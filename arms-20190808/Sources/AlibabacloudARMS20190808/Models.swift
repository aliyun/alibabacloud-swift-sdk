import Foundation
import Tea
import TeaUtils
import AlibabacloudOpenApi
import AlibabaCloudOpenApiUtil
import AlibabacloudEndpointUtil

public class CallChainInfo : Tea.TeaModel {
    public var additionalInfo: String?

    public var appName: String?

    public var appType: String?

    public var children: [CallChainInfo]?

    public var haveSpan: Bool?

    public var logMap: [String: [String: Any]]?

    public var logTime: Int64?

    public var parentSpanId: String?

    public var pid: String?

    public var regionId: String?

    public var resultCode: String?

    public var rpc: String?

    public var rpcId: String?

    public var rpcType: Int64?

    public var serverIp: String?

    public var span: Int64?

    public var spanId: String?

    public var tagMap: [String: String]?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.additionalInfo != nil {
            map["AdditionalInfo"] = self.additionalInfo!
        }
        if self.appName != nil {
            map["AppName"] = self.appName!
        }
        if self.appType != nil {
            map["AppType"] = self.appType!
        }
        if self.children != nil {
            var tmp : [Any] = []
            for k in self.children! {
                tmp.append(k.toMap())
            }
            map["Children"] = tmp
        }
        if self.haveSpan != nil {
            map["HaveSpan"] = self.haveSpan!
        }
        if self.logMap != nil {
            map["LogMap"] = self.logMap!
        }
        if self.logTime != nil {
            map["LogTime"] = self.logTime!
        }
        if self.parentSpanId != nil {
            map["ParentSpanId"] = self.parentSpanId!
        }
        if self.pid != nil {
            map["Pid"] = self.pid!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resultCode != nil {
            map["ResultCode"] = self.resultCode!
        }
        if self.rpc != nil {
            map["Rpc"] = self.rpc!
        }
        if self.rpcId != nil {
            map["RpcId"] = self.rpcId!
        }
        if self.rpcType != nil {
            map["RpcType"] = self.rpcType!
        }
        if self.serverIp != nil {
            map["ServerIp"] = self.serverIp!
        }
        if self.span != nil {
            map["Span"] = self.span!
        }
        if self.spanId != nil {
            map["SpanId"] = self.spanId!
        }
        if self.tagMap != nil {
            map["TagMap"] = self.tagMap!
        }
        if self.traceId != nil {
            map["TraceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AdditionalInfo"] as? String {
            self.additionalInfo = value
        }
        if let value = dict["AppName"] as? String {
            self.appName = value
        }
        if let value = dict["AppType"] as? String {
            self.appType = value
        }
        if let value = dict["Children"] as? [Any?] {
            var tmp : [CallChainInfo] = []
            for v in value {
                if v != nil {
                    var model = CallChainInfo()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.children = tmp
        }
        if let value = dict["HaveSpan"] as? Bool {
            self.haveSpan = value
        }
        if let value = dict["LogMap"] as? [String: [String: Any]] {
            self.logMap = value
        }
        if let value = dict["LogTime"] as? Int64 {
            self.logTime = value
        }
        if let value = dict["ParentSpanId"] as? String {
            self.parentSpanId = value
        }
        if let value = dict["Pid"] as? String {
            self.pid = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResultCode"] as? String {
            self.resultCode = value
        }
        if let value = dict["Rpc"] as? String {
            self.rpc = value
        }
        if let value = dict["RpcId"] as? String {
            self.rpcId = value
        }
        if let value = dict["RpcType"] as? Int64 {
            self.rpcType = value
        }
        if let value = dict["ServerIp"] as? String {
            self.serverIp = value
        }
        if let value = dict["Span"] as? Int64 {
            self.span = value
        }
        if let value = dict["SpanId"] as? String {
            self.spanId = value
        }
        if let value = dict["TagMap"] as? [String: String] {
            self.tagMap = value
        }
        if let value = dict["TraceId"] as? String {
            self.traceId = value
        }
    }
}

public class GrafanaWorkspace : Tea.TeaModel {
    public class Tags : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["key"] = self.key!
            }
            if self.value != nil {
                map["value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["key"] as? String {
                self.key = value
            }
            if let value = dict["value"] as? String {
                self.value = value
            }
        }
    }
    public var commercial: Bool?

    public var deployType: String?

    public var description_: String?

    public var endTime: Double?

    public var gmtCreate: Double?

    public var grafanaVersion: String?

    public var grafanaWorkspaceDomain: String?

    public var grafanaWorkspaceDomainStatus: String?

    public var grafanaWorkspaceEdition: String?

    public var grafanaWorkspaceId: String?

    public var grafanaWorkspaceIp: String?

    public var grafanaWorkspaceName: String?

    public var maxAccount: String?

    public var ntmId: String?

    public var personalDomain: String?

    public var personalDomainPrefix: String?

    public var privateDomain: String?

    public var privateIp: String?

    public var protocol_: String?

    public var regionId: String?

    public var resourceGroupId: String?

    public var shareSynced: Bool?

    public var snatIp: String?

    public var status: String?

    public var tags: [GrafanaWorkspace.Tags]?

    public var upgradeVersion: [String]?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commercial != nil {
            map["commercial"] = self.commercial!
        }
        if self.deployType != nil {
            map["deployType"] = self.deployType!
        }
        if self.description_ != nil {
            map["description"] = self.description_!
        }
        if self.endTime != nil {
            map["endTime"] = self.endTime!
        }
        if self.gmtCreate != nil {
            map["gmtCreate"] = self.gmtCreate!
        }
        if self.grafanaVersion != nil {
            map["grafanaVersion"] = self.grafanaVersion!
        }
        if self.grafanaWorkspaceDomain != nil {
            map["grafanaWorkspaceDomain"] = self.grafanaWorkspaceDomain!
        }
        if self.grafanaWorkspaceDomainStatus != nil {
            map["grafanaWorkspaceDomainStatus"] = self.grafanaWorkspaceDomainStatus!
        }
        if self.grafanaWorkspaceEdition != nil {
            map["grafanaWorkspaceEdition"] = self.grafanaWorkspaceEdition!
        }
        if self.grafanaWorkspaceId != nil {
            map["grafanaWorkspaceId"] = self.grafanaWorkspaceId!
        }
        if self.grafanaWorkspaceIp != nil {
            map["grafanaWorkspaceIp"] = self.grafanaWorkspaceIp!
        }
        if self.grafanaWorkspaceName != nil {
            map["grafanaWorkspaceName"] = self.grafanaWorkspaceName!
        }
        if self.maxAccount != nil {
            map["maxAccount"] = self.maxAccount!
        }
        if self.ntmId != nil {
            map["ntmId"] = self.ntmId!
        }
        if self.personalDomain != nil {
            map["personalDomain"] = self.personalDomain!
        }
        if self.personalDomainPrefix != nil {
            map["personalDomainPrefix"] = self.personalDomainPrefix!
        }
        if self.privateDomain != nil {
            map["privateDomain"] = self.privateDomain!
        }
        if self.privateIp != nil {
            map["privateIp"] = self.privateIp!
        }
        if self.protocol_ != nil {
            map["protocol"] = self.protocol_!
        }
        if self.regionId != nil {
            map["regionId"] = self.regionId!
        }
        if self.resourceGroupId != nil {
            map["resourceGroupId"] = self.resourceGroupId!
        }
        if self.shareSynced != nil {
            map["shareSynced"] = self.shareSynced!
        }
        if self.snatIp != nil {
            map["snatIp"] = self.snatIp!
        }
        if self.status != nil {
            map["status"] = self.status!
        }
        if self.tags != nil {
            var tmp : [Any] = []
            for k in self.tags! {
                tmp.append(k.toMap())
            }
            map["tags"] = tmp
        }
        if self.upgradeVersion != nil {
            map["upgradeVersion"] = self.upgradeVersion!
        }
        if self.userId != nil {
            map["userId"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commercial"] as? Bool {
            self.commercial = value
        }
        if let value = dict["deployType"] as? String {
            self.deployType = value
        }
        if let value = dict["description"] as? String {
            self.description_ = value
        }
        if let value = dict["endTime"] as? Double {
            self.endTime = value
        }
        if let value = dict["gmtCreate"] as? Double {
            self.gmtCreate = value
        }
        if let value = dict["grafanaVersion"] as? String {
            self.grafanaVersion = value
        }
        if let value = dict["grafanaWorkspaceDomain"] as? String {
            self.grafanaWorkspaceDomain = value
        }
        if let value = dict["grafanaWorkspaceDomainStatus"] as? String {
            self.grafanaWorkspaceDomainStatus = value
        }
        if let value = dict["grafanaWorkspaceEdition"] as? String {
            self.grafanaWorkspaceEdition = value
        }
        if let value = dict["grafanaWorkspaceId"] as? String {
            self.grafanaWorkspaceId = value
        }
        if let value = dict["grafanaWorkspaceIp"] as? String {
            self.grafanaWorkspaceIp = value
        }
        if let value = dict["grafanaWorkspaceName"] as? String {
            self.grafanaWorkspaceName = value
        }
        if let value = dict["maxAccount"] as? String {
            self.maxAccount = value
        }
        if let value = dict["ntmId"] as? String {
            self.ntmId = value
        }
        if let value = dict["personalDomain"] as? String {
            self.personalDomain = value
        }
        if let value = dict["personalDomainPrefix"] as? String {
            self.personalDomainPrefix = value
        }
        if let value = dict["privateDomain"] as? String {
            self.privateDomain = value
        }
        if let value = dict["privateIp"] as? String {
            self.privateIp = value
        }
        if let value = dict["protocol"] as? String {
            self.protocol_ = value
        }
        if let value = dict["regionId"] as? String {
            self.regionId = value
        }
        if let value = dict["resourceGroupId"] as? String {
            self.resourceGroupId = value
        }
        if let value = dict["shareSynced"] as? Bool {
            self.shareSynced = value
        }
        if let value = dict["snatIp"] as? String {
            self.snatIp = value
        }
        if let value = dict["status"] as? String {
            self.status = value
        }
        if let value = dict["tags"] as? [Any?] {
            var tmp : [GrafanaWorkspace.Tags] = []
            for v in value {
                if v != nil {
                    var model = GrafanaWorkspace.Tags()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tags = tmp
        }
        if let value = dict["upgradeVersion"] as? [String] {
            self.upgradeVersion = value
        }
        if let value = dict["userId"] as? String {
            self.userId = value
        }
    }
}

public class GrafanaWorkspaceAccount : Tea.TeaModel {
    public var accountId: Int64?

    public var accountNotes: String?

    public var aliyunUid: String?

    public var aliyunUserName: String?

    public var gmtCreate: Double?

    public var orgs: [GrafanaWorkspaceUserOrg]?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.accountId != nil {
            map["accountId"] = self.accountId!
        }
        if self.accountNotes != nil {
            map["accountNotes"] = self.accountNotes!
        }
        if self.aliyunUid != nil {
            map["aliyunUid"] = self.aliyunUid!
        }
        if self.aliyunUserName != nil {
            map["aliyunUserName"] = self.aliyunUserName!
        }
        if self.gmtCreate != nil {
            map["gmtCreate"] = self.gmtCreate!
        }
        if self.orgs != nil {
            var tmp : [Any] = []
            for k in self.orgs! {
                tmp.append(k.toMap())
            }
            map["orgs"] = tmp
        }
        if self.type != nil {
            map["type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["accountId"] as? Int64 {
            self.accountId = value
        }
        if let value = dict["accountNotes"] as? String {
            self.accountNotes = value
        }
        if let value = dict["aliyunUid"] as? String {
            self.aliyunUid = value
        }
        if let value = dict["aliyunUserName"] as? String {
            self.aliyunUserName = value
        }
        if let value = dict["gmtCreate"] as? Double {
            self.gmtCreate = value
        }
        if let value = dict["orgs"] as? [Any?] {
            var tmp : [GrafanaWorkspaceUserOrg] = []
            for v in value {
                if v != nil {
                    var model = GrafanaWorkspaceUserOrg()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.orgs = tmp
        }
        if let value = dict["type"] as? String {
            self.type = value
        }
    }
}

public class GrafanaWorkspaceAlertNotification : Tea.TeaModel {
    public var id: Int64?

    public var isArms: Bool?

    public var isDefault: Bool?

    public var name: String?

    public var sendReminder: Bool?

    public var settings: String?

    public var type: String?

    public var uid: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["id"] = self.id!
        }
        if self.isArms != nil {
            map["isArms"] = self.isArms!
        }
        if self.isDefault != nil {
            map["isDefault"] = self.isDefault!
        }
        if self.name != nil {
            map["name"] = self.name!
        }
        if self.sendReminder != nil {
            map["sendReminder"] = self.sendReminder!
        }
        if self.settings != nil {
            map["settings"] = self.settings!
        }
        if self.type != nil {
            map["type"] = self.type!
        }
        if self.uid != nil {
            map["uid"] = self.uid!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["id"] as? Int64 {
            self.id = value
        }
        if let value = dict["isArms"] as? Bool {
            self.isArms = value
        }
        if let value = dict["isDefault"] as? Bool {
            self.isDefault = value
        }
        if let value = dict["name"] as? String {
            self.name = value
        }
        if let value = dict["sendReminder"] as? Bool {
            self.sendReminder = value
        }
        if let value = dict["settings"] as? String {
            self.settings = value
        }
        if let value = dict["type"] as? String {
            self.type = value
        }
        if let value = dict["uid"] as? String {
            self.uid = value
        }
    }
}

public class GrafanaWorkspaceArmsAlertConfig : Tea.TeaModel {
    public var armsAlertsEnable: String?

    public var armsAlertsWebhookUrl: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.armsAlertsEnable != nil {
            map["armsAlertsEnable"] = self.armsAlertsEnable!
        }
        if self.armsAlertsWebhookUrl != nil {
            map["armsAlertsWebhookUrl"] = self.armsAlertsWebhookUrl!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["armsAlertsEnable"] as? String {
            self.armsAlertsEnable = value
        }
        if let value = dict["armsAlertsWebhookUrl"] as? String {
            self.armsAlertsWebhookUrl = value
        }
    }
}

public class GrafanaWorkspaceCustomDomain : Tea.TeaModel {
    public var cert: String?

    public var date: Int64?

    public var domain: String?

    public var grafanaWorkspaceId: String?

    public var id: Int64?

    public var key: String?

    public var privateZone: String?

    public var protocol_: String?

    public var status: String?

    public var uri: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cert != nil {
            map["cert"] = self.cert!
        }
        if self.date != nil {
            map["date"] = self.date!
        }
        if self.domain != nil {
            map["domain"] = self.domain!
        }
        if self.grafanaWorkspaceId != nil {
            map["grafanaWorkspaceId"] = self.grafanaWorkspaceId!
        }
        if self.id != nil {
            map["id"] = self.id!
        }
        if self.key != nil {
            map["key"] = self.key!
        }
        if self.privateZone != nil {
            map["privateZone"] = self.privateZone!
        }
        if self.protocol_ != nil {
            map["protocol"] = self.protocol_!
        }
        if self.status != nil {
            map["status"] = self.status!
        }
        if self.uri != nil {
            map["uri"] = self.uri!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["cert"] as? String {
            self.cert = value
        }
        if let value = dict["date"] as? Int64 {
            self.date = value
        }
        if let value = dict["domain"] as? String {
            self.domain = value
        }
        if let value = dict["grafanaWorkspaceId"] as? String {
            self.grafanaWorkspaceId = value
        }
        if let value = dict["id"] as? Int64 {
            self.id = value
        }
        if let value = dict["key"] as? String {
            self.key = value
        }
        if let value = dict["privateZone"] as? String {
            self.privateZone = value
        }
        if let value = dict["protocol"] as? String {
            self.protocol_ = value
        }
        if let value = dict["status"] as? String {
            self.status = value
        }
        if let value = dict["uri"] as? String {
            self.uri = value
        }
    }
}

public class GrafanaWorkspaceDashboardReport : Tea.TeaModel {
    public var gmtCreate: Int64?

    public var grafanaWorkspaceId: String?

    public var id: Int64?

    public var lastSendTime: Int64?

    public var msg: String?

    public var name: String?

    public var reportChannelTarget: String?

    public var reportChannelType: String?

    public var reportStyle: String?

    public var reportType: String?

    public var status: String?

    public var triggerDay: String?

    public var triggerTime: String?

    public var triggerType: String?

    public var url: String?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.gmtCreate != nil {
            map["gmtCreate"] = self.gmtCreate!
        }
        if self.grafanaWorkspaceId != nil {
            map["grafanaWorkspaceId"] = self.grafanaWorkspaceId!
        }
        if self.id != nil {
            map["id"] = self.id!
        }
        if self.lastSendTime != nil {
            map["lastSendTime"] = self.lastSendTime!
        }
        if self.msg != nil {
            map["msg"] = self.msg!
        }
        if self.name != nil {
            map["name"] = self.name!
        }
        if self.reportChannelTarget != nil {
            map["reportChannelTarget"] = self.reportChannelTarget!
        }
        if self.reportChannelType != nil {
            map["reportChannelType"] = self.reportChannelType!
        }
        if self.reportStyle != nil {
            map["reportStyle"] = self.reportStyle!
        }
        if self.reportType != nil {
            map["reportType"] = self.reportType!
        }
        if self.status != nil {
            map["status"] = self.status!
        }
        if self.triggerDay != nil {
            map["triggerDay"] = self.triggerDay!
        }
        if self.triggerTime != nil {
            map["triggerTime"] = self.triggerTime!
        }
        if self.triggerType != nil {
            map["triggerType"] = self.triggerType!
        }
        if self.url != nil {
            map["url"] = self.url!
        }
        if self.userId != nil {
            map["userId"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["gmtCreate"] as? Int64 {
            self.gmtCreate = value
        }
        if let value = dict["grafanaWorkspaceId"] as? String {
            self.grafanaWorkspaceId = value
        }
        if let value = dict["id"] as? Int64 {
            self.id = value
        }
        if let value = dict["lastSendTime"] as? Int64 {
            self.lastSendTime = value
        }
        if let value = dict["msg"] as? String {
            self.msg = value
        }
        if let value = dict["name"] as? String {
            self.name = value
        }
        if let value = dict["reportChannelTarget"] as? String {
            self.reportChannelTarget = value
        }
        if let value = dict["reportChannelType"] as? String {
            self.reportChannelType = value
        }
        if let value = dict["reportStyle"] as? String {
            self.reportStyle = value
        }
        if let value = dict["reportType"] as? String {
            self.reportType = value
        }
        if let value = dict["status"] as? String {
            self.status = value
        }
        if let value = dict["triggerDay"] as? String {
            self.triggerDay = value
        }
        if let value = dict["triggerTime"] as? String {
            self.triggerTime = value
        }
        if let value = dict["triggerType"] as? String {
            self.triggerType = value
        }
        if let value = dict["url"] as? String {
            self.url = value
        }
        if let value = dict["userId"] as? String {
            self.userId = value
        }
    }
}

public class GrafanaWorkspaceDashboardSync : Tea.TeaModel {
    public var dashboardTitle: String?

    public var dashboardURL: String?

    public var dashboardUid: String?

    public var folderId: String?

    public var folderTitle: String?

    public var folderURL: String?

    public var folderUid: String?

    public var orgId: String?

    public var orgName: String?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dashboardTitle != nil {
            map["dashboardTitle"] = self.dashboardTitle!
        }
        if self.dashboardURL != nil {
            map["dashboardURL"] = self.dashboardURL!
        }
        if self.dashboardUid != nil {
            map["dashboardUid"] = self.dashboardUid!
        }
        if self.folderId != nil {
            map["folderId"] = self.folderId!
        }
        if self.folderTitle != nil {
            map["folderTitle"] = self.folderTitle!
        }
        if self.folderURL != nil {
            map["folderURL"] = self.folderURL!
        }
        if self.folderUid != nil {
            map["folderUid"] = self.folderUid!
        }
        if self.orgId != nil {
            map["orgId"] = self.orgId!
        }
        if self.orgName != nil {
            map["orgName"] = self.orgName!
        }
        if self.type != nil {
            map["type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["dashboardTitle"] as? String {
            self.dashboardTitle = value
        }
        if let value = dict["dashboardURL"] as? String {
            self.dashboardURL = value
        }
        if let value = dict["dashboardUid"] as? String {
            self.dashboardUid = value
        }
        if let value = dict["folderId"] as? String {
            self.folderId = value
        }
        if let value = dict["folderTitle"] as? String {
            self.folderTitle = value
        }
        if let value = dict["folderURL"] as? String {
            self.folderURL = value
        }
        if let value = dict["folderUid"] as? String {
            self.folderUid = value
        }
        if let value = dict["orgId"] as? String {
            self.orgId = value
        }
        if let value = dict["orgName"] as? String {
            self.orgName = value
        }
        if let value = dict["type"] as? String {
            self.type = value
        }
    }
}

public class GrafanaWorkspaceDataBackup : Tea.TeaModel {
    public var gmtCreate: Int64?

    public var gmtModified: Int64?

    public var grafanaWorkspaceId: String?

    public var id: Int64?

    public var msg: String?

    public var processName: String?

    public var processStatus: String?

    public var subType: String?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.gmtCreate != nil {
            map["gmtCreate"] = self.gmtCreate!
        }
        if self.gmtModified != nil {
            map["gmtModified"] = self.gmtModified!
        }
        if self.grafanaWorkspaceId != nil {
            map["grafanaWorkspaceId"] = self.grafanaWorkspaceId!
        }
        if self.id != nil {
            map["id"] = self.id!
        }
        if self.msg != nil {
            map["msg"] = self.msg!
        }
        if self.processName != nil {
            map["processName"] = self.processName!
        }
        if self.processStatus != nil {
            map["processStatus"] = self.processStatus!
        }
        if self.subType != nil {
            map["subType"] = self.subType!
        }
        if self.userId != nil {
            map["userId"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["gmtCreate"] as? Int64 {
            self.gmtCreate = value
        }
        if let value = dict["gmtModified"] as? Int64 {
            self.gmtModified = value
        }
        if let value = dict["grafanaWorkspaceId"] as? String {
            self.grafanaWorkspaceId = value
        }
        if let value = dict["id"] as? Int64 {
            self.id = value
        }
        if let value = dict["msg"] as? String {
            self.msg = value
        }
        if let value = dict["processName"] as? String {
            self.processName = value
        }
        if let value = dict["processStatus"] as? String {
            self.processStatus = value
        }
        if let value = dict["subType"] as? String {
            self.subType = value
        }
        if let value = dict["userId"] as? String {
            self.userId = value
        }
    }
}

public class GrafanaWorkspaceIniBackup : Tea.TeaModel {
    public var ext: String?

    public var gmtCreate: Int64?

    public var gmtModified: Int64?

    public var grafanaWorkspaceId: String?

    public var id: Int64?

    public var msg: String?

    public var processName: String?

    public var processStatus: String?

    public var subType: String?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ext != nil {
            map["ext"] = self.ext!
        }
        if self.gmtCreate != nil {
            map["gmtCreate"] = self.gmtCreate!
        }
        if self.gmtModified != nil {
            map["gmtModified"] = self.gmtModified!
        }
        if self.grafanaWorkspaceId != nil {
            map["grafanaWorkspaceId"] = self.grafanaWorkspaceId!
        }
        if self.id != nil {
            map["id"] = self.id!
        }
        if self.msg != nil {
            map["msg"] = self.msg!
        }
        if self.processName != nil {
            map["processName"] = self.processName!
        }
        if self.processStatus != nil {
            map["processStatus"] = self.processStatus!
        }
        if self.subType != nil {
            map["subType"] = self.subType!
        }
        if self.userId != nil {
            map["userId"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ext"] as? String {
            self.ext = value
        }
        if let value = dict["gmtCreate"] as? Int64 {
            self.gmtCreate = value
        }
        if let value = dict["gmtModified"] as? Int64 {
            self.gmtModified = value
        }
        if let value = dict["grafanaWorkspaceId"] as? String {
            self.grafanaWorkspaceId = value
        }
        if let value = dict["id"] as? Int64 {
            self.id = value
        }
        if let value = dict["msg"] as? String {
            self.msg = value
        }
        if let value = dict["processName"] as? String {
            self.processName = value
        }
        if let value = dict["processStatus"] as? String {
            self.processStatus = value
        }
        if let value = dict["subType"] as? String {
            self.subType = value
        }
        if let value = dict["userId"] as? String {
            self.userId = value
        }
    }
}

public class GrafanaWorkspaceIniProperty : Tea.TeaModel {
    public var defaultValue: String?

    public var description_: String?

    public var example: String?

    public var key: String?

    public var secret: Bool?

    public var value: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.defaultValue != nil {
            map["defaultValue"] = self.defaultValue!
        }
        if self.description_ != nil {
            map["description"] = self.description_!
        }
        if self.example != nil {
            map["example"] = self.example!
        }
        if self.key != nil {
            map["key"] = self.key!
        }
        if self.secret != nil {
            map["secret"] = self.secret!
        }
        if self.value != nil {
            map["value"] = self.value!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["defaultValue"] as? String {
            self.defaultValue = value
        }
        if let value = dict["description"] as? String {
            self.description_ = value
        }
        if let value = dict["example"] as? String {
            self.example = value
        }
        if let value = dict["key"] as? String {
            self.key = value
        }
        if let value = dict["secret"] as? Bool {
            self.secret = value
        }
        if let value = dict["value"] as? String {
            self.value = value
        }
    }
}

public class GrafanaWorkspaceIniSection : Tea.TeaModel {
    public var propertys: [GrafanaWorkspaceIniProperty]?

    public var section: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.propertys != nil {
            var tmp : [Any] = []
            for k in self.propertys! {
                tmp.append(k.toMap())
            }
            map["propertys"] = tmp
        }
        if self.section != nil {
            map["section"] = self.section!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["propertys"] as? [Any?] {
            var tmp : [GrafanaWorkspaceIniProperty] = []
            for v in value {
                if v != nil {
                    var model = GrafanaWorkspaceIniProperty()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.propertys = tmp
        }
        if let value = dict["section"] as? String {
            self.section = value
        }
    }
}

public class GrafanaWorkspaceIntegration : Tea.TeaModel {
    public var datasourceAmount: Int64?

    public var integrationId: String?

    public var integrationName: String?

    public var previews: [GrafanaWorkspaceIntegrationPreview]?

    public var status: String?

    public var supportRegions: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.datasourceAmount != nil {
            map["datasourceAmount"] = self.datasourceAmount!
        }
        if self.integrationId != nil {
            map["integrationId"] = self.integrationId!
        }
        if self.integrationName != nil {
            map["integrationName"] = self.integrationName!
        }
        if self.previews != nil {
            var tmp : [Any] = []
            for k in self.previews! {
                tmp.append(k.toMap())
            }
            map["previews"] = tmp
        }
        if self.status != nil {
            map["status"] = self.status!
        }
        if self.supportRegions != nil {
            map["supportRegions"] = self.supportRegions!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["datasourceAmount"] as? Int64 {
            self.datasourceAmount = value
        }
        if let value = dict["integrationId"] as? String {
            self.integrationId = value
        }
        if let value = dict["integrationName"] as? String {
            self.integrationName = value
        }
        if let value = dict["previews"] as? [Any?] {
            var tmp : [GrafanaWorkspaceIntegrationPreview] = []
            for v in value {
                if v != nil {
                    var model = GrafanaWorkspaceIntegrationPreview()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.previews = tmp
        }
        if let value = dict["status"] as? String {
            self.status = value
        }
        if let value = dict["supportRegions"] as? [String] {
            self.supportRegions = value
        }
    }
}

public class GrafanaWorkspaceIntegrationDataSource : Tea.TeaModel {
    public var clusterType: String?

    public var datasourceId: String?

    public var datasourceName: String?

    public var datasourceUrl: String?

    public var description_: String?

    public var exploreUrl: String?

    public var extra: [String: String]?

    public var folderUrl: String?

    public var regionId: String?

    public var status: String?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clusterType != nil {
            map["clusterType"] = self.clusterType!
        }
        if self.datasourceId != nil {
            map["datasourceId"] = self.datasourceId!
        }
        if self.datasourceName != nil {
            map["datasourceName"] = self.datasourceName!
        }
        if self.datasourceUrl != nil {
            map["datasourceUrl"] = self.datasourceUrl!
        }
        if self.description_ != nil {
            map["description"] = self.description_!
        }
        if self.exploreUrl != nil {
            map["exploreUrl"] = self.exploreUrl!
        }
        if self.extra != nil {
            map["extra"] = self.extra!
        }
        if self.folderUrl != nil {
            map["folderUrl"] = self.folderUrl!
        }
        if self.regionId != nil {
            map["regionId"] = self.regionId!
        }
        if self.status != nil {
            map["status"] = self.status!
        }
        if self.type != nil {
            map["type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["clusterType"] as? String {
            self.clusterType = value
        }
        if let value = dict["datasourceId"] as? String {
            self.datasourceId = value
        }
        if let value = dict["datasourceName"] as? String {
            self.datasourceName = value
        }
        if let value = dict["datasourceUrl"] as? String {
            self.datasourceUrl = value
        }
        if let value = dict["description"] as? String {
            self.description_ = value
        }
        if let value = dict["exploreUrl"] as? String {
            self.exploreUrl = value
        }
        if let value = dict["extra"] as? [String: String] {
            self.extra = value
        }
        if let value = dict["folderUrl"] as? String {
            self.folderUrl = value
        }
        if let value = dict["regionId"] as? String {
            self.regionId = value
        }
        if let value = dict["status"] as? String {
            self.status = value
        }
        if let value = dict["type"] as? String {
            self.type = value
        }
    }
}

public class GrafanaWorkspaceIntegrationDetail : Tea.TeaModel {
    public var dataSources: [GrafanaWorkspaceIntegrationDataSource]?

    public var integrationId: String?

    public var status: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dataSources != nil {
            var tmp : [Any] = []
            for k in self.dataSources! {
                tmp.append(k.toMap())
            }
            map["dataSources"] = tmp
        }
        if self.integrationId != nil {
            map["integrationId"] = self.integrationId!
        }
        if self.status != nil {
            map["status"] = self.status!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["dataSources"] as? [Any?] {
            var tmp : [GrafanaWorkspaceIntegrationDataSource] = []
            for v in value {
                if v != nil {
                    var model = GrafanaWorkspaceIntegrationDataSource()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.dataSources = tmp
        }
        if let value = dict["integrationId"] as? String {
            self.integrationId = value
        }
        if let value = dict["status"] as? String {
            self.status = value
        }
    }
}

public class GrafanaWorkspaceIntegrationPreview : Tea.TeaModel {
    public var id: String?

    public var image: String?

    public var name: String?

    public var thumbnail: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["id"] = self.id!
        }
        if self.image != nil {
            map["image"] = self.image!
        }
        if self.name != nil {
            map["name"] = self.name!
        }
        if self.thumbnail != nil {
            map["thumbnail"] = self.thumbnail!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["id"] as? String {
            self.id = value
        }
        if let value = dict["image"] as? String {
            self.image = value
        }
        if let value = dict["name"] as? String {
            self.name = value
        }
        if let value = dict["thumbnail"] as? String {
            self.thumbnail = value
        }
    }
}

public class GrafanaWorkspaceMoveProcess : Tea.TeaModel {
    public var gmtCreate: Int64?

    public var gmtModified: Int64?

    public var grafanaWorkspaceId: String?

    public var id: Int64?

    public var msg: String?

    public var processName: String?

    public var processStatus: String?

    public var subType: String?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.gmtCreate != nil {
            map["gmtCreate"] = self.gmtCreate!
        }
        if self.gmtModified != nil {
            map["gmtModified"] = self.gmtModified!
        }
        if self.grafanaWorkspaceId != nil {
            map["grafanaWorkspaceId"] = self.grafanaWorkspaceId!
        }
        if self.id != nil {
            map["id"] = self.id!
        }
        if self.msg != nil {
            map["msg"] = self.msg!
        }
        if self.processName != nil {
            map["processName"] = self.processName!
        }
        if self.processStatus != nil {
            map["processStatus"] = self.processStatus!
        }
        if self.subType != nil {
            map["subType"] = self.subType!
        }
        if self.userId != nil {
            map["userId"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["gmtCreate"] as? Int64 {
            self.gmtCreate = value
        }
        if let value = dict["gmtModified"] as? Int64 {
            self.gmtModified = value
        }
        if let value = dict["grafanaWorkspaceId"] as? String {
            self.grafanaWorkspaceId = value
        }
        if let value = dict["id"] as? Int64 {
            self.id = value
        }
        if let value = dict["msg"] as? String {
            self.msg = value
        }
        if let value = dict["processName"] as? String {
            self.processName = value
        }
        if let value = dict["processStatus"] as? String {
            self.processStatus = value
        }
        if let value = dict["subType"] as? String {
            self.subType = value
        }
        if let value = dict["userId"] as? String {
            self.userId = value
        }
    }
}

public class GrafanaWorkspaceNews : Tea.TeaModel {
    public var date: Int64?

    public var description_: String?

    public var image: String?

    public var link: String?

    public var title: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.date != nil {
            map["date"] = self.date!
        }
        if self.description_ != nil {
            map["description"] = self.description_!
        }
        if self.image != nil {
            map["image"] = self.image!
        }
        if self.link != nil {
            map["link"] = self.link!
        }
        if self.title != nil {
            map["title"] = self.title!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["date"] as? Int64 {
            self.date = value
        }
        if let value = dict["description"] as? String {
            self.description_ = value
        }
        if let value = dict["image"] as? String {
            self.image = value
        }
        if let value = dict["link"] as? String {
            self.link = value
        }
        if let value = dict["title"] as? String {
            self.title = value
        }
    }
}

public class GrafanaWorkspaceOperateLog : Tea.TeaModel {
    public var date: Double?

    public var detail: String?

    public var grafanaWorkspaceId: String?

    public var id: Int64?

    public var operatorId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.date != nil {
            map["date"] = self.date!
        }
        if self.detail != nil {
            map["detail"] = self.detail!
        }
        if self.grafanaWorkspaceId != nil {
            map["grafanaWorkspaceId"] = self.grafanaWorkspaceId!
        }
        if self.id != nil {
            map["id"] = self.id!
        }
        if self.operatorId != nil {
            map["operatorId"] = self.operatorId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["date"] as? Double {
            self.date = value
        }
        if let value = dict["detail"] as? String {
            self.detail = value
        }
        if let value = dict["grafanaWorkspaceId"] as? String {
            self.grafanaWorkspaceId = value
        }
        if let value = dict["id"] as? Int64 {
            self.id = value
        }
        if let value = dict["operatorId"] as? String {
            self.operatorId = value
        }
    }
}

public class GrafanaWorkspaceOrg : Tea.TeaModel {
    public var id: Int64?

    public var name: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["id"] = self.id!
        }
        if self.name != nil {
            map["name"] = self.name!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["id"] as? Int64 {
            self.id = value
        }
        if let value = dict["name"] as? String {
            self.name = value
        }
    }
}

public class GrafanaWorkspaceTrans : Tea.TeaModel {
    public var apiUrl: String?

    public var authType: String?

    public var gmtCreate: Double?

    public var gmtModified: Double?

    public var grafanaWorkspaceId: String?

    public var id: Int64?

    public var msg: String?

    public var processStatus: String?

    public var transDetails: [GrafanaWorkspaceTransDetail]?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiUrl != nil {
            map["apiUrl"] = self.apiUrl!
        }
        if self.authType != nil {
            map["authType"] = self.authType!
        }
        if self.gmtCreate != nil {
            map["gmtCreate"] = self.gmtCreate!
        }
        if self.gmtModified != nil {
            map["gmtModified"] = self.gmtModified!
        }
        if self.grafanaWorkspaceId != nil {
            map["grafanaWorkspaceId"] = self.grafanaWorkspaceId!
        }
        if self.id != nil {
            map["id"] = self.id!
        }
        if self.msg != nil {
            map["msg"] = self.msg!
        }
        if self.processStatus != nil {
            map["processStatus"] = self.processStatus!
        }
        if self.transDetails != nil {
            var tmp : [Any] = []
            for k in self.transDetails! {
                tmp.append(k.toMap())
            }
            map["transDetails"] = tmp
        }
        if self.userId != nil {
            map["userId"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["apiUrl"] as? String {
            self.apiUrl = value
        }
        if let value = dict["authType"] as? String {
            self.authType = value
        }
        if let value = dict["gmtCreate"] as? Double {
            self.gmtCreate = value
        }
        if let value = dict["gmtModified"] as? Double {
            self.gmtModified = value
        }
        if let value = dict["grafanaWorkspaceId"] as? String {
            self.grafanaWorkspaceId = value
        }
        if let value = dict["id"] as? Int64 {
            self.id = value
        }
        if let value = dict["msg"] as? String {
            self.msg = value
        }
        if let value = dict["processStatus"] as? String {
            self.processStatus = value
        }
        if let value = dict["transDetails"] as? [Any?] {
            var tmp : [GrafanaWorkspaceTransDetail] = []
            for v in value {
                if v != nil {
                    var model = GrafanaWorkspaceTransDetail()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.transDetails = tmp
        }
        if let value = dict["userId"] as? String {
            self.userId = value
        }
    }
}

public class GrafanaWorkspaceTransDetail : Tea.TeaModel {
    public var dashboardAmount: Int32?

    public var dataSourceAmount: Int32?

    public var original: Int64?

    public var originalName: String?

    public var target: Int64?

    public var targetName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dashboardAmount != nil {
            map["dashboardAmount"] = self.dashboardAmount!
        }
        if self.dataSourceAmount != nil {
            map["dataSourceAmount"] = self.dataSourceAmount!
        }
        if self.original != nil {
            map["original"] = self.original!
        }
        if self.originalName != nil {
            map["originalName"] = self.originalName!
        }
        if self.target != nil {
            map["target"] = self.target!
        }
        if self.targetName != nil {
            map["targetName"] = self.targetName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["dashboardAmount"] as? Int32 {
            self.dashboardAmount = value
        }
        if let value = dict["dataSourceAmount"] as? Int32 {
            self.dataSourceAmount = value
        }
        if let value = dict["original"] as? Int64 {
            self.original = value
        }
        if let value = dict["originalName"] as? String {
            self.originalName = value
        }
        if let value = dict["target"] as? Int64 {
            self.target = value
        }
        if let value = dict["targetName"] as? String {
            self.targetName = value
        }
    }
}

public class GrafanaWorkspaceUserCert : Tea.TeaModel {
    public var id: String?

    public var name: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["id"] = self.id!
        }
        if self.name != nil {
            map["name"] = self.name!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["id"] as? String {
            self.id = value
        }
        if let value = dict["name"] as? String {
            self.name = value
        }
    }
}

public class GrafanaWorkspaceUserOrg : Tea.TeaModel {
    public var orgId: Int64?

    public var orgName: String?

    public var role: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.orgId != nil {
            map["orgId"] = self.orgId!
        }
        if self.orgName != nil {
            map["orgName"] = self.orgName!
        }
        if self.role != nil {
            map["role"] = self.role!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["orgId"] as? Int64 {
            self.orgId = value
        }
        if let value = dict["orgName"] as? String {
            self.orgName = value
        }
        if let value = dict["role"] as? String {
            self.role = value
        }
    }
}

public class GrafanaWorkspaceVpcConfig : Tea.TeaModel {
    public var fcConfig: String?

    public var id: Int64?

    public var installMsg: String?

    public var installStatus: String?

    public var ipSections: String?

    public var name: String?

    public var regionId: String?

    public var securityGroupId: String?

    public var userId: String?

    public var vSwitchId: String?

    public var vpcId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.fcConfig != nil {
            map["fcConfig"] = self.fcConfig!
        }
        if self.id != nil {
            map["id"] = self.id!
        }
        if self.installMsg != nil {
            map["installMsg"] = self.installMsg!
        }
        if self.installStatus != nil {
            map["installStatus"] = self.installStatus!
        }
        if self.ipSections != nil {
            map["ipSections"] = self.ipSections!
        }
        if self.name != nil {
            map["name"] = self.name!
        }
        if self.regionId != nil {
            map["regionId"] = self.regionId!
        }
        if self.securityGroupId != nil {
            map["securityGroupId"] = self.securityGroupId!
        }
        if self.userId != nil {
            map["userId"] = self.userId!
        }
        if self.vSwitchId != nil {
            map["vSwitchId"] = self.vSwitchId!
        }
        if self.vpcId != nil {
            map["vpcId"] = self.vpcId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["fcConfig"] as? String {
            self.fcConfig = value
        }
        if let value = dict["id"] as? Int64 {
            self.id = value
        }
        if let value = dict["installMsg"] as? String {
            self.installMsg = value
        }
        if let value = dict["installStatus"] as? String {
            self.installStatus = value
        }
        if let value = dict["ipSections"] as? String {
            self.ipSections = value
        }
        if let value = dict["name"] as? String {
            self.name = value
        }
        if let value = dict["regionId"] as? String {
            self.regionId = value
        }
        if let value = dict["securityGroupId"] as? String {
            self.securityGroupId = value
        }
        if let value = dict["userId"] as? String {
            self.userId = value
        }
        if let value = dict["vSwitchId"] as? String {
            self.vSwitchId = value
        }
        if let value = dict["vpcId"] as? String {
            self.vpcId = value
        }
    }
}

public class GrafanaWorkspaceVpcRegion : Tea.TeaModel {
    public var regionId: String?

    public var regionName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.regionId != nil {
            map["regionId"] = self.regionId!
        }
        if self.regionName != nil {
            map["regionName"] = self.regionName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["regionId"] as? String {
            self.regionId = value
        }
        if let value = dict["regionName"] as? String {
            self.regionName = value
        }
    }
}

public class GrafanaWorkspaceVpcRegionDetail : Tea.TeaModel {
    public var fcConfig: String?

    public var id: Int64?

    public var installStatus: String?

    public var name: String?

    public var regionId: String?

    public var securityGroupId: String?

    public var securityGroupIds: [String]?

    public var userId: String?

    public var vSwitchId: String?

    public var vSwitchIds: [String]?

    public var vpcId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.fcConfig != nil {
            map["fcConfig"] = self.fcConfig!
        }
        if self.id != nil {
            map["id"] = self.id!
        }
        if self.installStatus != nil {
            map["installStatus"] = self.installStatus!
        }
        if self.name != nil {
            map["name"] = self.name!
        }
        if self.regionId != nil {
            map["regionId"] = self.regionId!
        }
        if self.securityGroupId != nil {
            map["securityGroupId"] = self.securityGroupId!
        }
        if self.securityGroupIds != nil {
            map["securityGroupIds"] = self.securityGroupIds!
        }
        if self.userId != nil {
            map["userId"] = self.userId!
        }
        if self.vSwitchId != nil {
            map["vSwitchId"] = self.vSwitchId!
        }
        if self.vSwitchIds != nil {
            map["vSwitchIds"] = self.vSwitchIds!
        }
        if self.vpcId != nil {
            map["vpcId"] = self.vpcId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["fcConfig"] as? String {
            self.fcConfig = value
        }
        if let value = dict["id"] as? Int64 {
            self.id = value
        }
        if let value = dict["installStatus"] as? String {
            self.installStatus = value
        }
        if let value = dict["name"] as? String {
            self.name = value
        }
        if let value = dict["regionId"] as? String {
            self.regionId = value
        }
        if let value = dict["securityGroupId"] as? String {
            self.securityGroupId = value
        }
        if let value = dict["securityGroupIds"] as? [String] {
            self.securityGroupIds = value
        }
        if let value = dict["userId"] as? String {
            self.userId = value
        }
        if let value = dict["vSwitchId"] as? String {
            self.vSwitchId = value
        }
        if let value = dict["vSwitchIds"] as? [String] {
            self.vSwitchIds = value
        }
        if let value = dict["vpcId"] as? String {
            self.vpcId = value
        }
    }
}

public class QueryDataResponse : Tea.TeaModel {
    public var results: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.results != nil {
            map["results"] = self.results!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["results"] as? String {
            self.results = value
        }
    }
}

public class DataBonreeSDKConfigModuleConfigDefaultConfigValue : Tea.TeaModel {
    public var enable: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.enable != nil {
            map["enable"] = self.enable!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["enable"] as? Bool {
            self.enable = value
        }
    }
}

public class DataBonreeSDKConfigModuleConfigVersionConfigsValue : Tea.TeaModel {
    public var useCustom: Bool?

    public var customConfig: [String: DataBonreeSDKConfigModuleConfigVersionConfigsValueCustomConfigValue]?

    public var description_: String?

    public var updateTime: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.useCustom != nil {
            map["useCustom"] = self.useCustom!
        }
        if self.customConfig != nil {
            var tmp : [String: Any] = [:]
            for (k, v) in self.customConfig! {
                tmp[k] = v.toMap()
            }
            map["customConfig"] = tmp
        }
        if self.description_ != nil {
            map["description"] = self.description_!
        }
        if self.updateTime != nil {
            map["updateTime"] = self.updateTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["useCustom"] as? Bool {
            self.useCustom = value
        }
        if let value = dict["customConfig"] as? [String: Any?] {
            var tmp : [String: DataBonreeSDKConfigModuleConfigVersionConfigsValueCustomConfigValue] = [:]
            for (k, v) in value {
                if v != nil {
                    var model = DataBonreeSDKConfigModuleConfigVersionConfigsValueCustomConfigValue()
                    model.fromMap(v as? [String: Any?])
                    tmp[k] = model
                }
            }
            self.customConfig = tmp
        }
        if let value = dict["description"] as? String {
            self.description_ = value
        }
        if let value = dict["updateTime"] as? Int64 {
            self.updateTime = value
        }
    }
}

public class DataBonreeSDKConfigModuleConfigVersionConfigsValueCustomConfigValue : Tea.TeaModel {
    public var enable: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.enable != nil {
            map["enable"] = self.enable!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["enable"] as? Bool {
            self.enable = value
        }
    }
}

public class AddAliClusterIdsToPrometheusGlobalViewRequest : Tea.TeaModel {
    public var clusterIds: String?

    public var globalViewClusterId: String?

    public var groupName: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clusterIds != nil {
            map["ClusterIds"] = self.clusterIds!
        }
        if self.globalViewClusterId != nil {
            map["GlobalViewClusterId"] = self.globalViewClusterId!
        }
        if self.groupName != nil {
            map["GroupName"] = self.groupName!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClusterIds"] as? String {
            self.clusterIds = value
        }
        if let value = dict["GlobalViewClusterId"] as? String {
            self.globalViewClusterId = value
        }
        if let value = dict["GroupName"] as? String {
            self.groupName = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class AddAliClusterIdsToPrometheusGlobalViewResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var info: String?

        public var msg: String?

        public var success: Bool?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.info != nil {
                map["Info"] = self.info!
            }
            if self.msg != nil {
                map["Msg"] = self.msg!
            }
            if self.success != nil {
                map["Success"] = self.success!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Info"] as? String {
                self.info = value
            }
            if let value = dict["Msg"] as? String {
                self.msg = value
            }
            if let value = dict["Success"] as? Bool {
                self.success = value
            }
        }
    }
    public var code: Int32?

    public var data: AddAliClusterIdsToPrometheusGlobalViewResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = AddAliClusterIdsToPrometheusGlobalViewResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class AddAliClusterIdsToPrometheusGlobalViewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AddAliClusterIdsToPrometheusGlobalViewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = AddAliClusterIdsToPrometheusGlobalViewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class AddGrafanaRequest : Tea.TeaModel {
    public var clusterId: String?

    public var integration: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.integration != nil {
            map["Integration"] = self.integration!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClusterId"] as? String {
            self.clusterId = value
        }
        if let value = dict["Integration"] as? String {
            self.integration = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class AddGrafanaResponseBody : Tea.TeaModel {
    public var data: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class AddGrafanaResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AddGrafanaResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = AddGrafanaResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class AddIntegrationRequest : Tea.TeaModel {
    public var clusterId: String?

    public var integration: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.integration != nil {
            map["Integration"] = self.integration!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClusterId"] as? String {
            self.clusterId = value
        }
        if let value = dict["Integration"] as? String {
            self.integration = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class AddIntegrationResponseBody : Tea.TeaModel {
    public var code: Int32?

    public var data: String?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class AddIntegrationResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AddIntegrationResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = AddIntegrationResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class AddPrometheusGlobalViewRequest : Tea.TeaModel {
    public class Tag : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var clusters: String?

    public var groupName: String?

    public var regionId: String?

    public var resourceGroupId: String?

    public var tag: [AddPrometheusGlobalViewRequest.Tag]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clusters != nil {
            map["Clusters"] = self.clusters!
        }
        if self.groupName != nil {
            map["GroupName"] = self.groupName!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceGroupId != nil {
            map["ResourceGroupId"] = self.resourceGroupId!
        }
        if self.tag != nil {
            var tmp : [Any] = []
            for k in self.tag! {
                tmp.append(k.toMap())
            }
            map["Tag"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Clusters"] as? String {
            self.clusters = value
        }
        if let value = dict["GroupName"] as? String {
            self.groupName = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceGroupId"] as? String {
            self.resourceGroupId = value
        }
        if let value = dict["Tag"] as? [Any?] {
            var tmp : [AddPrometheusGlobalViewRequest.Tag] = []
            for v in value {
                if v != nil {
                    var model = AddPrometheusGlobalViewRequest.Tag()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tag = tmp
        }
    }
}

public class AddPrometheusGlobalViewResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Info : Tea.TeaModel {
            public var failedInstances: String?

            public var globalViewClusterId: String?

            public var regionId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.failedInstances != nil {
                    map["FailedInstances"] = self.failedInstances!
                }
                if self.globalViewClusterId != nil {
                    map["GlobalViewClusterId"] = self.globalViewClusterId!
                }
                if self.regionId != nil {
                    map["RegionId"] = self.regionId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["FailedInstances"] as? String {
                    self.failedInstances = value
                }
                if let value = dict["GlobalViewClusterId"] as? String {
                    self.globalViewClusterId = value
                }
                if let value = dict["RegionId"] as? String {
                    self.regionId = value
                }
            }
        }
        public var info: AddPrometheusGlobalViewResponseBody.Data.Info?

        public var msg: String?

        public var success: Bool?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.info?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.info != nil {
                map["Info"] = self.info?.toMap()
            }
            if self.msg != nil {
                map["Msg"] = self.msg!
            }
            if self.success != nil {
                map["Success"] = self.success!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Info"] as? [String: Any?] {
                var model = AddPrometheusGlobalViewResponseBody.Data.Info()
                model.fromMap(value)
                self.info = model
            }
            if let value = dict["Msg"] as? String {
                self.msg = value
            }
            if let value = dict["Success"] as? Bool {
                self.success = value
            }
        }
    }
    public var code: Int32?

    public var data: AddPrometheusGlobalViewResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = AddPrometheusGlobalViewResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class AddPrometheusGlobalViewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AddPrometheusGlobalViewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = AddPrometheusGlobalViewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class AddPrometheusGlobalViewByAliClusterIdsRequest : Tea.TeaModel {
    public var clusterIds: String?

    public var groupName: String?

    public var productCode: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clusterIds != nil {
            map["ClusterIds"] = self.clusterIds!
        }
        if self.groupName != nil {
            map["GroupName"] = self.groupName!
        }
        if self.productCode != nil {
            map["ProductCode"] = self.productCode!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClusterIds"] as? String {
            self.clusterIds = value
        }
        if let value = dict["GroupName"] as? String {
            self.groupName = value
        }
        if let value = dict["ProductCode"] as? String {
            self.productCode = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class AddPrometheusGlobalViewByAliClusterIdsResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var info: String?

        public var msg: String?

        public var success: Bool?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.info != nil {
                map["Info"] = self.info!
            }
            if self.msg != nil {
                map["Msg"] = self.msg!
            }
            if self.success != nil {
                map["Success"] = self.success!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Info"] as? String {
                self.info = value
            }
            if let value = dict["Msg"] as? String {
                self.msg = value
            }
            if let value = dict["Success"] as? Bool {
                self.success = value
            }
        }
    }
    public var code: Int32?

    public var data: AddPrometheusGlobalViewByAliClusterIdsResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = AddPrometheusGlobalViewByAliClusterIdsResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class AddPrometheusGlobalViewByAliClusterIdsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AddPrometheusGlobalViewByAliClusterIdsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = AddPrometheusGlobalViewByAliClusterIdsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class AddPrometheusInstanceRequest : Tea.TeaModel {
    public var name: String?

    public var regionId: String?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
    }
}

public class AddPrometheusInstanceResponseBody : Tea.TeaModel {
    public var code: Int32?

    public var data: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class AddPrometheusInstanceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AddPrometheusInstanceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = AddPrometheusInstanceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class AddPrometheusIntegrationRequest : Tea.TeaModel {
    public var clusterId: String?

    public var integrationType: String?

    public var param: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.integrationType != nil {
            map["IntegrationType"] = self.integrationType!
        }
        if self.param != nil {
            map["Param"] = self.param!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClusterId"] as? String {
            self.clusterId = value
        }
        if let value = dict["IntegrationType"] as? String {
            self.integrationType = value
        }
        if let value = dict["Param"] as? String {
            self.param = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class AddPrometheusIntegrationResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var instanceId: Int64?

        public var instanceName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.instanceId != nil {
                map["InstanceId"] = self.instanceId!
            }
            if self.instanceName != nil {
                map["InstanceName"] = self.instanceName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["InstanceId"] as? Int64 {
                self.instanceId = value
            }
            if let value = dict["InstanceName"] as? String {
                self.instanceName = value
            }
        }
    }
    public var code: Int32?

    public var data: AddPrometheusIntegrationResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = AddPrometheusIntegrationResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class AddPrometheusIntegrationResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AddPrometheusIntegrationResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = AddPrometheusIntegrationResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class AddRecordingRuleRequest : Tea.TeaModel {
    public var clusterId: String?

    public var regionId: String?

    public var ruleYaml: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.ruleYaml != nil {
            map["RuleYaml"] = self.ruleYaml!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClusterId"] as? String {
            self.clusterId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["RuleYaml"] as? String {
            self.ruleYaml = value
        }
    }
}

public class AddRecordingRuleResponseBody : Tea.TeaModel {
    public var code: Int32?

    public var data: String?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class AddRecordingRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AddRecordingRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = AddRecordingRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class AddTagToFlinkClusterRequest : Tea.TeaModel {
    public var clusterId: String?

    public var flinkWorkSpaceId: String?

    public var flinkWorkSpaceName: String?

    public var regionId: String?

    public var resourceGroupId: String?

    public var targetUserId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.flinkWorkSpaceId != nil {
            map["FlinkWorkSpaceId"] = self.flinkWorkSpaceId!
        }
        if self.flinkWorkSpaceName != nil {
            map["FlinkWorkSpaceName"] = self.flinkWorkSpaceName!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceGroupId != nil {
            map["ResourceGroupId"] = self.resourceGroupId!
        }
        if self.targetUserId != nil {
            map["TargetUserId"] = self.targetUserId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClusterId"] as? String {
            self.clusterId = value
        }
        if let value = dict["FlinkWorkSpaceId"] as? String {
            self.flinkWorkSpaceId = value
        }
        if let value = dict["FlinkWorkSpaceName"] as? String {
            self.flinkWorkSpaceName = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceGroupId"] as? String {
            self.resourceGroupId = value
        }
        if let value = dict["TargetUserId"] as? String {
            self.targetUserId = value
        }
    }
}

public class AddTagToFlinkClusterResponseBody : Tea.TeaModel {
    public var code: Int32?

    public var data: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class AddTagToFlinkClusterResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AddTagToFlinkClusterResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = AddTagToFlinkClusterResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class AppendInstancesToPrometheusGlobalViewRequest : Tea.TeaModel {
    public var clusters: String?

    public var globalViewClusterId: String?

    public var groupName: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clusters != nil {
            map["Clusters"] = self.clusters!
        }
        if self.globalViewClusterId != nil {
            map["GlobalViewClusterId"] = self.globalViewClusterId!
        }
        if self.groupName != nil {
            map["GroupName"] = self.groupName!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Clusters"] as? String {
            self.clusters = value
        }
        if let value = dict["GlobalViewClusterId"] as? String {
            self.globalViewClusterId = value
        }
        if let value = dict["GroupName"] as? String {
            self.groupName = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class AppendInstancesToPrometheusGlobalViewResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var info: String?

        public var msg: String?

        public var success: Bool?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.info != nil {
                map["Info"] = self.info!
            }
            if self.msg != nil {
                map["Msg"] = self.msg!
            }
            if self.success != nil {
                map["Success"] = self.success!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Info"] as? String {
                self.info = value
            }
            if let value = dict["Msg"] as? String {
                self.msg = value
            }
            if let value = dict["Success"] as? Bool {
                self.success = value
            }
        }
    }
    public var code: Int32?

    public var data: AppendInstancesToPrometheusGlobalViewResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = AppendInstancesToPrometheusGlobalViewResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class AppendInstancesToPrometheusGlobalViewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AppendInstancesToPrometheusGlobalViewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = AppendInstancesToPrometheusGlobalViewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ApplyScenarioRequest : Tea.TeaModel {
    public var appId: String?

    public var config: [String: Any]?

    public var name: String?

    public var regionId: String?

    public var scenario: String?

    public var sign: String?

    public var snDump: Bool?

    public var snForce: Bool?

    public var snStat: Bool?

    public var snTransfer: Bool?

    public var updateOption: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        if self.config != nil {
            map["Config"] = self.config!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.scenario != nil {
            map["Scenario"] = self.scenario!
        }
        if self.sign != nil {
            map["Sign"] = self.sign!
        }
        if self.snDump != nil {
            map["SnDump"] = self.snDump!
        }
        if self.snForce != nil {
            map["SnForce"] = self.snForce!
        }
        if self.snStat != nil {
            map["SnStat"] = self.snStat!
        }
        if self.snTransfer != nil {
            map["SnTransfer"] = self.snTransfer!
        }
        if self.updateOption != nil {
            map["UpdateOption"] = self.updateOption!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppId"] as? String {
            self.appId = value
        }
        if let value = dict["Config"] as? [String: Any] {
            self.config = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Scenario"] as? String {
            self.scenario = value
        }
        if let value = dict["Sign"] as? String {
            self.sign = value
        }
        if let value = dict["SnDump"] as? Bool {
            self.snDump = value
        }
        if let value = dict["SnForce"] as? Bool {
            self.snForce = value
        }
        if let value = dict["SnStat"] as? Bool {
            self.snStat = value
        }
        if let value = dict["SnTransfer"] as? Bool {
            self.snTransfer = value
        }
        if let value = dict["UpdateOption"] as? Bool {
            self.updateOption = value
        }
    }
}

public class ApplyScenarioShrinkRequest : Tea.TeaModel {
    public var appId: String?

    public var configShrink: String?

    public var name: String?

    public var regionId: String?

    public var scenario: String?

    public var sign: String?

    public var snDump: Bool?

    public var snForce: Bool?

    public var snStat: Bool?

    public var snTransfer: Bool?

    public var updateOption: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        if self.configShrink != nil {
            map["Config"] = self.configShrink!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.scenario != nil {
            map["Scenario"] = self.scenario!
        }
        if self.sign != nil {
            map["Sign"] = self.sign!
        }
        if self.snDump != nil {
            map["SnDump"] = self.snDump!
        }
        if self.snForce != nil {
            map["SnForce"] = self.snForce!
        }
        if self.snStat != nil {
            map["SnStat"] = self.snStat!
        }
        if self.snTransfer != nil {
            map["SnTransfer"] = self.snTransfer!
        }
        if self.updateOption != nil {
            map["UpdateOption"] = self.updateOption!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppId"] as? String {
            self.appId = value
        }
        if let value = dict["Config"] as? String {
            self.configShrink = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Scenario"] as? String {
            self.scenario = value
        }
        if let value = dict["Sign"] as? String {
            self.sign = value
        }
        if let value = dict["SnDump"] as? Bool {
            self.snDump = value
        }
        if let value = dict["SnForce"] as? Bool {
            self.snForce = value
        }
        if let value = dict["SnStat"] as? Bool {
            self.snStat = value
        }
        if let value = dict["SnTransfer"] as? Bool {
            self.snTransfer = value
        }
        if let value = dict["UpdateOption"] as? Bool {
            self.updateOption = value
        }
    }
}

public class ApplyScenarioResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var result: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.result != nil {
            map["Result"] = self.result!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Result"] as? String {
            self.result = value
        }
    }
}

public class ApplyScenarioResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ApplyScenarioResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ApplyScenarioResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class BindPrometheusGrafanaInstanceRequest : Tea.TeaModel {
    public var clusterId: String?

    public var grafanaInstanceId: String?

    public var regionId: String?

    public var resourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.grafanaInstanceId != nil {
            map["GrafanaInstanceId"] = self.grafanaInstanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceGroupId != nil {
            map["ResourceGroupId"] = self.resourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClusterId"] as? String {
            self.clusterId = value
        }
        if let value = dict["GrafanaInstanceId"] as? String {
            self.grafanaInstanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceGroupId"] as? String {
            self.resourceGroupId = value
        }
    }
}

public class BindPrometheusGrafanaInstanceResponseBody : Tea.TeaModel {
    public var code: Int32?

    public var data: Bool?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? Bool {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class BindPrometheusGrafanaInstanceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: BindPrometheusGrafanaInstanceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = BindPrometheusGrafanaInstanceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class BlockAlarmNotificationRequest : Tea.TeaModel {
    public var alarmId: Int64?

    public var handlerId: Int64?

    public var regionId: String?

    public var timeout: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.alarmId != nil {
            map["AlarmId"] = self.alarmId!
        }
        if self.handlerId != nil {
            map["HandlerId"] = self.handlerId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.timeout != nil {
            map["Timeout"] = self.timeout!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AlarmId"] as? Int64 {
            self.alarmId = value
        }
        if let value = dict["HandlerId"] as? Int64 {
            self.handlerId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Timeout"] as? Int64 {
            self.timeout = value
        }
    }
}

public class BlockAlarmNotificationResponseBody : Tea.TeaModel {
    public var code: Int64?

    public var message: String?

    public var requestId: String?

    public var result: Bool?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.result != nil {
            map["Result"] = self.result!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int64 {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Result"] as? Bool {
            self.result = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class BlockAlarmNotificationResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: BlockAlarmNotificationResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = BlockAlarmNotificationResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ChangeAlarmSeverityRequest : Tea.TeaModel {
    public var alarmId: Int64?

    public var handlerId: Int64?

    public var regionId: String?

    public var severity: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.alarmId != nil {
            map["AlarmId"] = self.alarmId!
        }
        if self.handlerId != nil {
            map["HandlerId"] = self.handlerId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.severity != nil {
            map["Severity"] = self.severity!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AlarmId"] as? Int64 {
            self.alarmId = value
        }
        if let value = dict["HandlerId"] as? Int64 {
            self.handlerId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Severity"] as? String {
            self.severity = value
        }
    }
}

public class ChangeAlarmSeverityResponseBody : Tea.TeaModel {
    public var code: Int64?

    public var message: String?

    public var requestId: String?

    public var result: Bool?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.result != nil {
            map["Result"] = self.result!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int64 {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Result"] as? Bool {
            self.result = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ChangeAlarmSeverityResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ChangeAlarmSeverityResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ChangeAlarmSeverityResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ChangeResourceGroupRequest : Tea.TeaModel {
    public var newResourceGroupId: String?

    public var regionId: String?

    public var resourceId: String?

    public var resourceType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.newResourceGroupId != nil {
            map["NewResourceGroupId"] = self.newResourceGroupId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceId != nil {
            map["ResourceId"] = self.resourceId!
        }
        if self.resourceType != nil {
            map["ResourceType"] = self.resourceType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["NewResourceGroupId"] as? String {
            self.newResourceGroupId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceId"] as? String {
            self.resourceId = value
        }
        if let value = dict["ResourceType"] as? String {
            self.resourceType = value
        }
    }
}

public class ChangeResourceGroupResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var resourceGroupId: String?

        public var resourceId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.resourceGroupId != nil {
                map["ResourceGroupId"] = self.resourceGroupId!
            }
            if self.resourceId != nil {
                map["ResourceId"] = self.resourceId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ResourceGroupId"] as? String {
                self.resourceGroupId = value
            }
            if let value = dict["ResourceId"] as? String {
                self.resourceId = value
            }
        }
    }
    public var code: String?

    public var data: ChangeResourceGroupResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ChangeResourceGroupResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ChangeResourceGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ChangeResourceGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ChangeResourceGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CheckCommercialStatusRequest : Tea.TeaModel {
    public var regionId: String?

    public var service: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.service != nil {
            map["Service"] = self.service!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Service"] as? String {
            self.service = value
        }
    }
}

public class CheckCommercialStatusResponseBody : Tea.TeaModel {
    public var data: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CheckCommercialStatusResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CheckCommercialStatusResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CheckCommercialStatusResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CheckServiceStatusRequest : Tea.TeaModel {
    public var regionId: String?

    public var svcCode: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.svcCode != nil {
            map["SvcCode"] = self.svcCode!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["SvcCode"] as? String {
            self.svcCode = value
        }
    }
}

public class CheckServiceStatusResponseBody : Tea.TeaModel {
    public var data: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CheckServiceStatusResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CheckServiceStatusResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CheckServiceStatusResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ClaimAlarmRequest : Tea.TeaModel {
    public var alarmId: Int64?

    public var handlerId: Int64?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.alarmId != nil {
            map["AlarmId"] = self.alarmId!
        }
        if self.handlerId != nil {
            map["HandlerId"] = self.handlerId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AlarmId"] as? Int64 {
            self.alarmId = value
        }
        if let value = dict["HandlerId"] as? Int64 {
            self.handlerId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class ClaimAlarmResponseBody : Tea.TeaModel {
    public var code: Int64?

    public var message: String?

    public var requestId: String?

    public var result: Bool?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.result != nil {
            map["Result"] = self.result!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int64 {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Result"] as? Bool {
            self.result = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ClaimAlarmResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ClaimAlarmResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ClaimAlarmResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CloseAlarmRequest : Tea.TeaModel {
    public var alarmId: Int64?

    public var handlerId: Int64?

    public var regionId: String?

    public var solution: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.alarmId != nil {
            map["AlarmId"] = self.alarmId!
        }
        if self.handlerId != nil {
            map["HandlerId"] = self.handlerId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.solution != nil {
            map["Solution"] = self.solution!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AlarmId"] as? Int64 {
            self.alarmId = value
        }
        if let value = dict["HandlerId"] as? Int64 {
            self.handlerId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Solution"] as? String {
            self.solution = value
        }
    }
}

public class CloseAlarmResponseBody : Tea.TeaModel {
    public var code: Int64?

    public var message: String?

    public var requestId: String?

    public var result: Bool?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.result != nil {
            map["Result"] = self.result!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int64 {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Result"] as? Bool {
            self.result = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class CloseAlarmResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CloseAlarmResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CloseAlarmResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ConfigAppRequest : Tea.TeaModel {
    public var appIds: String?

    public var enable: String?

    public var regionId: String?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appIds != nil {
            map["AppIds"] = self.appIds!
        }
        if self.enable != nil {
            map["Enable"] = self.enable!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppIds"] as? String {
            self.appIds = value
        }
        if let value = dict["Enable"] as? String {
            self.enable = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
    }
}

public class ConfigAppResponseBody : Tea.TeaModel {
    public var data: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ConfigAppResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ConfigAppResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ConfigAppResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateAlertContactRequest : Tea.TeaModel {
    public var contactName: String?

    public var dingRobotWebhookUrl: String?

    public var email: String?

    public var phoneNum: String?

    public var regionId: String?

    public var resourceGroupId: String?

    public var systemNoc: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.contactName != nil {
            map["ContactName"] = self.contactName!
        }
        if self.dingRobotWebhookUrl != nil {
            map["DingRobotWebhookUrl"] = self.dingRobotWebhookUrl!
        }
        if self.email != nil {
            map["Email"] = self.email!
        }
        if self.phoneNum != nil {
            map["PhoneNum"] = self.phoneNum!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceGroupId != nil {
            map["ResourceGroupId"] = self.resourceGroupId!
        }
        if self.systemNoc != nil {
            map["SystemNoc"] = self.systemNoc!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ContactName"] as? String {
            self.contactName = value
        }
        if let value = dict["DingRobotWebhookUrl"] as? String {
            self.dingRobotWebhookUrl = value
        }
        if let value = dict["Email"] as? String {
            self.email = value
        }
        if let value = dict["PhoneNum"] as? String {
            self.phoneNum = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceGroupId"] as? String {
            self.resourceGroupId = value
        }
        if let value = dict["SystemNoc"] as? Bool {
            self.systemNoc = value
        }
    }
}

public class CreateAlertContactResponseBody : Tea.TeaModel {
    public var contactId: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.contactId != nil {
            map["ContactId"] = self.contactId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ContactId"] as? String {
            self.contactId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateAlertContactResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateAlertContactResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateAlertContactResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateAlertContactGroupRequest : Tea.TeaModel {
    public var contactGroupName: String?

    public var contactIds: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.contactGroupName != nil {
            map["ContactGroupName"] = self.contactGroupName!
        }
        if self.contactIds != nil {
            map["ContactIds"] = self.contactIds!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ContactGroupName"] as? String {
            self.contactGroupName = value
        }
        if let value = dict["ContactIds"] as? String {
            self.contactIds = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class CreateAlertContactGroupResponseBody : Tea.TeaModel {
    public var contactGroupId: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.contactGroupId != nil {
            map["ContactGroupId"] = self.contactGroupId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ContactGroupId"] as? String {
            self.contactGroupId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateAlertContactGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateAlertContactGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateAlertContactGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateDispatchRuleRequest : Tea.TeaModel {
    public var dispatchRule: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dispatchRule != nil {
            map["DispatchRule"] = self.dispatchRule!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DispatchRule"] as? String {
            self.dispatchRule = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class CreateDispatchRuleResponseBody : Tea.TeaModel {
    public var dispatchRuleId: Int64?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dispatchRuleId != nil {
            map["DispatchRuleId"] = self.dispatchRuleId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DispatchRuleId"] as? Int64 {
            self.dispatchRuleId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateDispatchRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateDispatchRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateDispatchRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateEnvCustomJobRequest : Tea.TeaModel {
    public var aliyunLang: String?

    public var configYaml: String?

    public var customJobName: String?

    public var environmentId: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.aliyunLang != nil {
            map["AliyunLang"] = self.aliyunLang!
        }
        if self.configYaml != nil {
            map["ConfigYaml"] = self.configYaml!
        }
        if self.customJobName != nil {
            map["CustomJobName"] = self.customJobName!
        }
        if self.environmentId != nil {
            map["EnvironmentId"] = self.environmentId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AliyunLang"] as? String {
            self.aliyunLang = value
        }
        if let value = dict["ConfigYaml"] as? String {
            self.configYaml = value
        }
        if let value = dict["CustomJobName"] as? String {
            self.customJobName = value
        }
        if let value = dict["EnvironmentId"] as? String {
            self.environmentId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class CreateEnvCustomJobResponseBody : Tea.TeaModel {
    public var code: Int32?

    public var data: String?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateEnvCustomJobResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateEnvCustomJobResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateEnvCustomJobResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateEnvPodMonitorRequest : Tea.TeaModel {
    public var aliyunLang: String?

    public var configYaml: String?

    public var dryRun: Bool?

    public var environmentId: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.aliyunLang != nil {
            map["AliyunLang"] = self.aliyunLang!
        }
        if self.configYaml != nil {
            map["ConfigYaml"] = self.configYaml!
        }
        if self.dryRun != nil {
            map["DryRun"] = self.dryRun!
        }
        if self.environmentId != nil {
            map["EnvironmentId"] = self.environmentId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AliyunLang"] as? String {
            self.aliyunLang = value
        }
        if let value = dict["ConfigYaml"] as? String {
            self.configYaml = value
        }
        if let value = dict["DryRun"] as? Bool {
            self.dryRun = value
        }
        if let value = dict["EnvironmentId"] as? String {
            self.environmentId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class CreateEnvPodMonitorResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var matchedMsg: String?

        public var matchedTargetCount: String?

        public var namespace: String?

        public var podMonitorName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.matchedMsg != nil {
                map["MatchedMsg"] = self.matchedMsg!
            }
            if self.matchedTargetCount != nil {
                map["MatchedTargetCount"] = self.matchedTargetCount!
            }
            if self.namespace != nil {
                map["Namespace"] = self.namespace!
            }
            if self.podMonitorName != nil {
                map["PodMonitorName"] = self.podMonitorName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["MatchedMsg"] as? String {
                self.matchedMsg = value
            }
            if let value = dict["MatchedTargetCount"] as? String {
                self.matchedTargetCount = value
            }
            if let value = dict["Namespace"] as? String {
                self.namespace = value
            }
            if let value = dict["PodMonitorName"] as? String {
                self.podMonitorName = value
            }
        }
    }
    public var code: Int32?

    public var data: CreateEnvPodMonitorResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = CreateEnvPodMonitorResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateEnvPodMonitorResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateEnvPodMonitorResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateEnvPodMonitorResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateEnvServiceMonitorRequest : Tea.TeaModel {
    public var aliyunLang: String?

    public var configYaml: String?

    public var dryRun: Bool?

    public var environmentId: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.aliyunLang != nil {
            map["AliyunLang"] = self.aliyunLang!
        }
        if self.configYaml != nil {
            map["ConfigYaml"] = self.configYaml!
        }
        if self.dryRun != nil {
            map["DryRun"] = self.dryRun!
        }
        if self.environmentId != nil {
            map["EnvironmentId"] = self.environmentId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AliyunLang"] as? String {
            self.aliyunLang = value
        }
        if let value = dict["ConfigYaml"] as? String {
            self.configYaml = value
        }
        if let value = dict["DryRun"] as? Bool {
            self.dryRun = value
        }
        if let value = dict["EnvironmentId"] as? String {
            self.environmentId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class CreateEnvServiceMonitorResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var matchedMsg: String?

        public var matchedTargetCount: Int32?

        public var namespace: String?

        public var serviceMonitorName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.matchedMsg != nil {
                map["MatchedMsg"] = self.matchedMsg!
            }
            if self.matchedTargetCount != nil {
                map["MatchedTargetCount"] = self.matchedTargetCount!
            }
            if self.namespace != nil {
                map["Namespace"] = self.namespace!
            }
            if self.serviceMonitorName != nil {
                map["ServiceMonitorName"] = self.serviceMonitorName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["MatchedMsg"] as? String {
                self.matchedMsg = value
            }
            if let value = dict["MatchedTargetCount"] as? Int32 {
                self.matchedTargetCount = value
            }
            if let value = dict["Namespace"] as? String {
                self.namespace = value
            }
            if let value = dict["ServiceMonitorName"] as? String {
                self.serviceMonitorName = value
            }
        }
    }
    public var code: Int32?

    public var data: CreateEnvServiceMonitorResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = CreateEnvServiceMonitorResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateEnvServiceMonitorResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateEnvServiceMonitorResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateEnvServiceMonitorResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateEnvironmentRequest : Tea.TeaModel {
    public class Tags : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var aliyunLang: String?

    public var bindResourceId: String?

    public var environmentName: String?

    public var environmentSubType: String?

    public var environmentType: String?

    public var feePackage: String?

    public var grafanaWorkspaceId: String?

    public var initEnvironment: Bool?

    public var managedType: String?

    public var prometheusInstanceId: String?

    public var regionId: String?

    public var resourceGroupId: String?

    public var tags: [CreateEnvironmentRequest.Tags]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.aliyunLang != nil {
            map["AliyunLang"] = self.aliyunLang!
        }
        if self.bindResourceId != nil {
            map["BindResourceId"] = self.bindResourceId!
        }
        if self.environmentName != nil {
            map["EnvironmentName"] = self.environmentName!
        }
        if self.environmentSubType != nil {
            map["EnvironmentSubType"] = self.environmentSubType!
        }
        if self.environmentType != nil {
            map["EnvironmentType"] = self.environmentType!
        }
        if self.feePackage != nil {
            map["FeePackage"] = self.feePackage!
        }
        if self.grafanaWorkspaceId != nil {
            map["GrafanaWorkspaceId"] = self.grafanaWorkspaceId!
        }
        if self.initEnvironment != nil {
            map["InitEnvironment"] = self.initEnvironment!
        }
        if self.managedType != nil {
            map["ManagedType"] = self.managedType!
        }
        if self.prometheusInstanceId != nil {
            map["PrometheusInstanceId"] = self.prometheusInstanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceGroupId != nil {
            map["ResourceGroupId"] = self.resourceGroupId!
        }
        if self.tags != nil {
            var tmp : [Any] = []
            for k in self.tags! {
                tmp.append(k.toMap())
            }
            map["Tags"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AliyunLang"] as? String {
            self.aliyunLang = value
        }
        if let value = dict["BindResourceId"] as? String {
            self.bindResourceId = value
        }
        if let value = dict["EnvironmentName"] as? String {
            self.environmentName = value
        }
        if let value = dict["EnvironmentSubType"] as? String {
            self.environmentSubType = value
        }
        if let value = dict["EnvironmentType"] as? String {
            self.environmentType = value
        }
        if let value = dict["FeePackage"] as? String {
            self.feePackage = value
        }
        if let value = dict["GrafanaWorkspaceId"] as? String {
            self.grafanaWorkspaceId = value
        }
        if let value = dict["InitEnvironment"] as? Bool {
            self.initEnvironment = value
        }
        if let value = dict["ManagedType"] as? String {
            self.managedType = value
        }
        if let value = dict["PrometheusInstanceId"] as? String {
            self.prometheusInstanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceGroupId"] as? String {
            self.resourceGroupId = value
        }
        if let value = dict["Tags"] as? [Any?] {
            var tmp : [CreateEnvironmentRequest.Tags] = []
            for v in value {
                if v != nil {
                    var model = CreateEnvironmentRequest.Tags()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tags = tmp
        }
    }
}

public class CreateEnvironmentResponseBody : Tea.TeaModel {
    public var code: Int32?

    public var data: String?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateEnvironmentResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateEnvironmentResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateEnvironmentResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateGrafanaWorkspaceRequest : Tea.TeaModel {
    public class Tags : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var accountNumber: String?

    public var aliyunLang: String?

    public var autoRenew: String?

    public var customAccountNumber: String?

    public var description_: String?

    public var duration: String?

    public var grafanaVersion: String?

    public var grafanaWorkspaceEdition: String?

    public var grafanaWorkspaceName: String?

    public var password: String?

    public var pricingCycle: String?

    public var regionId: String?

    public var resourceGroupId: String?

    public var tags: [CreateGrafanaWorkspaceRequest.Tags]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.accountNumber != nil {
            map["AccountNumber"] = self.accountNumber!
        }
        if self.aliyunLang != nil {
            map["AliyunLang"] = self.aliyunLang!
        }
        if self.autoRenew != nil {
            map["AutoRenew"] = self.autoRenew!
        }
        if self.customAccountNumber != nil {
            map["CustomAccountNumber"] = self.customAccountNumber!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.duration != nil {
            map["Duration"] = self.duration!
        }
        if self.grafanaVersion != nil {
            map["GrafanaVersion"] = self.grafanaVersion!
        }
        if self.grafanaWorkspaceEdition != nil {
            map["GrafanaWorkspaceEdition"] = self.grafanaWorkspaceEdition!
        }
        if self.grafanaWorkspaceName != nil {
            map["GrafanaWorkspaceName"] = self.grafanaWorkspaceName!
        }
        if self.password != nil {
            map["Password"] = self.password!
        }
        if self.pricingCycle != nil {
            map["PricingCycle"] = self.pricingCycle!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceGroupId != nil {
            map["ResourceGroupId"] = self.resourceGroupId!
        }
        if self.tags != nil {
            var tmp : [Any] = []
            for k in self.tags! {
                tmp.append(k.toMap())
            }
            map["Tags"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AccountNumber"] as? String {
            self.accountNumber = value
        }
        if let value = dict["AliyunLang"] as? String {
            self.aliyunLang = value
        }
        if let value = dict["AutoRenew"] as? String {
            self.autoRenew = value
        }
        if let value = dict["CustomAccountNumber"] as? String {
            self.customAccountNumber = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["Duration"] as? String {
            self.duration = value
        }
        if let value = dict["GrafanaVersion"] as? String {
            self.grafanaVersion = value
        }
        if let value = dict["GrafanaWorkspaceEdition"] as? String {
            self.grafanaWorkspaceEdition = value
        }
        if let value = dict["GrafanaWorkspaceName"] as? String {
            self.grafanaWorkspaceName = value
        }
        if let value = dict["Password"] as? String {
            self.password = value
        }
        if let value = dict["PricingCycle"] as? String {
            self.pricingCycle = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceGroupId"] as? String {
            self.resourceGroupId = value
        }
        if let value = dict["Tags"] as? [Any?] {
            var tmp : [CreateGrafanaWorkspaceRequest.Tags] = []
            for v in value {
                if v != nil {
                    var model = CreateGrafanaWorkspaceRequest.Tags()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tags = tmp
        }
    }
}

public class CreateGrafanaWorkspaceShrinkRequest : Tea.TeaModel {
    public var accountNumber: String?

    public var aliyunLang: String?

    public var autoRenew: String?

    public var customAccountNumber: String?

    public var description_: String?

    public var duration: String?

    public var grafanaVersion: String?

    public var grafanaWorkspaceEdition: String?

    public var grafanaWorkspaceName: String?

    public var password: String?

    public var pricingCycle: String?

    public var regionId: String?

    public var resourceGroupId: String?

    public var tagsShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.accountNumber != nil {
            map["AccountNumber"] = self.accountNumber!
        }
        if self.aliyunLang != nil {
            map["AliyunLang"] = self.aliyunLang!
        }
        if self.autoRenew != nil {
            map["AutoRenew"] = self.autoRenew!
        }
        if self.customAccountNumber != nil {
            map["CustomAccountNumber"] = self.customAccountNumber!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.duration != nil {
            map["Duration"] = self.duration!
        }
        if self.grafanaVersion != nil {
            map["GrafanaVersion"] = self.grafanaVersion!
        }
        if self.grafanaWorkspaceEdition != nil {
            map["GrafanaWorkspaceEdition"] = self.grafanaWorkspaceEdition!
        }
        if self.grafanaWorkspaceName != nil {
            map["GrafanaWorkspaceName"] = self.grafanaWorkspaceName!
        }
        if self.password != nil {
            map["Password"] = self.password!
        }
        if self.pricingCycle != nil {
            map["PricingCycle"] = self.pricingCycle!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceGroupId != nil {
            map["ResourceGroupId"] = self.resourceGroupId!
        }
        if self.tagsShrink != nil {
            map["Tags"] = self.tagsShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AccountNumber"] as? String {
            self.accountNumber = value
        }
        if let value = dict["AliyunLang"] as? String {
            self.aliyunLang = value
        }
        if let value = dict["AutoRenew"] as? String {
            self.autoRenew = value
        }
        if let value = dict["CustomAccountNumber"] as? String {
            self.customAccountNumber = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["Duration"] as? String {
            self.duration = value
        }
        if let value = dict["GrafanaVersion"] as? String {
            self.grafanaVersion = value
        }
        if let value = dict["GrafanaWorkspaceEdition"] as? String {
            self.grafanaWorkspaceEdition = value
        }
        if let value = dict["GrafanaWorkspaceName"] as? String {
            self.grafanaWorkspaceName = value
        }
        if let value = dict["Password"] as? String {
            self.password = value
        }
        if let value = dict["PricingCycle"] as? String {
            self.pricingCycle = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceGroupId"] as? String {
            self.resourceGroupId = value
        }
        if let value = dict["Tags"] as? String {
            self.tagsShrink = value
        }
    }
}

public class CreateGrafanaWorkspaceResponseBody : Tea.TeaModel {
    public var code: Int32?

    public var data: GrafanaWorkspace?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.traceId != nil {
            map["TraceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GrafanaWorkspace()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
        if let value = dict["TraceId"] as? String {
            self.traceId = value
        }
    }
}

public class CreateGrafanaWorkspaceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateGrafanaWorkspaceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateGrafanaWorkspaceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateIntegrationRequest : Tea.TeaModel {
    public var autoRecover: Bool?

    public var description_: String?

    public var integrationName: String?

    public var integrationProductType: String?

    public var recoverTime: Int64?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.autoRecover != nil {
            map["AutoRecover"] = self.autoRecover!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.integrationName != nil {
            map["IntegrationName"] = self.integrationName!
        }
        if self.integrationProductType != nil {
            map["IntegrationProductType"] = self.integrationProductType!
        }
        if self.recoverTime != nil {
            map["RecoverTime"] = self.recoverTime!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AutoRecover"] as? Bool {
            self.autoRecover = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["IntegrationName"] as? String {
            self.integrationName = value
        }
        if let value = dict["IntegrationProductType"] as? String {
            self.integrationProductType = value
        }
        if let value = dict["RecoverTime"] as? Int64 {
            self.recoverTime = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class CreateIntegrationResponseBody : Tea.TeaModel {
    public class Integration : Tea.TeaModel {
        public var autoRecover: Bool?

        public var description_: String?

        public var integrationId: Int64?

        public var integrationName: String?

        public var integrationProductType: String?

        public var recoverTime: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.autoRecover != nil {
                map["AutoRecover"] = self.autoRecover!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.integrationId != nil {
                map["IntegrationId"] = self.integrationId!
            }
            if self.integrationName != nil {
                map["IntegrationName"] = self.integrationName!
            }
            if self.integrationProductType != nil {
                map["IntegrationProductType"] = self.integrationProductType!
            }
            if self.recoverTime != nil {
                map["RecoverTime"] = self.recoverTime!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AutoRecover"] as? Bool {
                self.autoRecover = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["IntegrationId"] as? Int64 {
                self.integrationId = value
            }
            if let value = dict["IntegrationName"] as? String {
                self.integrationName = value
            }
            if let value = dict["IntegrationProductType"] as? String {
                self.integrationProductType = value
            }
            if let value = dict["RecoverTime"] as? Int64 {
                self.recoverTime = value
            }
        }
    }
    public var integration: CreateIntegrationResponseBody.Integration?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.integration?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.integration != nil {
            map["Integration"] = self.integration?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Integration"] as? [String: Any?] {
            var model = CreateIntegrationResponseBody.Integration()
            model.fromMap(value)
            self.integration = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateIntegrationResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateIntegrationResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateIntegrationResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateOrUpdateAlertRuleRequest : Tea.TeaModel {
    public class MarkTags : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public class Tags : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var alertCheckType: String?

    public var alertGroup: Int64?

    public var alertId: Int64?

    public var alertName: String?

    public var alertPiplines: String?

    public var alertRuleContent: String?

    public var alertStatus: String?

    public var alertType: String?

    public var annotations: String?

    public var autoAddNewApplication: Bool?

    public var autoAddTargetConfig: String?

    public var checkCycle: Int64?

    public var clusterId: String?

    public var dataConfig: String?

    public var duration: Int64?

    public var filters: String?

    public var labels: String?

    public var level: String?

    public var markTags: [CreateOrUpdateAlertRuleRequest.MarkTags]?

    public var message: String?

    public var metricsKey: String?

    public var metricsType: String?

    public var notice: String?

    public var notifyMode: String?

    public var notifyStrategy: String?

    public var pids: String?

    public var product: String?

    public var promQL: String?

    public var regionId: String?

    public var tags: [CreateOrUpdateAlertRuleRequest.Tags]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.alertCheckType != nil {
            map["AlertCheckType"] = self.alertCheckType!
        }
        if self.alertGroup != nil {
            map["AlertGroup"] = self.alertGroup!
        }
        if self.alertId != nil {
            map["AlertId"] = self.alertId!
        }
        if self.alertName != nil {
            map["AlertName"] = self.alertName!
        }
        if self.alertPiplines != nil {
            map["AlertPiplines"] = self.alertPiplines!
        }
        if self.alertRuleContent != nil {
            map["AlertRuleContent"] = self.alertRuleContent!
        }
        if self.alertStatus != nil {
            map["AlertStatus"] = self.alertStatus!
        }
        if self.alertType != nil {
            map["AlertType"] = self.alertType!
        }
        if self.annotations != nil {
            map["Annotations"] = self.annotations!
        }
        if self.autoAddNewApplication != nil {
            map["AutoAddNewApplication"] = self.autoAddNewApplication!
        }
        if self.autoAddTargetConfig != nil {
            map["AutoAddTargetConfig"] = self.autoAddTargetConfig!
        }
        if self.checkCycle != nil {
            map["CheckCycle"] = self.checkCycle!
        }
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.dataConfig != nil {
            map["DataConfig"] = self.dataConfig!
        }
        if self.duration != nil {
            map["Duration"] = self.duration!
        }
        if self.filters != nil {
            map["Filters"] = self.filters!
        }
        if self.labels != nil {
            map["Labels"] = self.labels!
        }
        if self.level != nil {
            map["Level"] = self.level!
        }
        if self.markTags != nil {
            var tmp : [Any] = []
            for k in self.markTags! {
                tmp.append(k.toMap())
            }
            map["MarkTags"] = tmp
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.metricsKey != nil {
            map["MetricsKey"] = self.metricsKey!
        }
        if self.metricsType != nil {
            map["MetricsType"] = self.metricsType!
        }
        if self.notice != nil {
            map["Notice"] = self.notice!
        }
        if self.notifyMode != nil {
            map["NotifyMode"] = self.notifyMode!
        }
        if self.notifyStrategy != nil {
            map["NotifyStrategy"] = self.notifyStrategy!
        }
        if self.pids != nil {
            map["Pids"] = self.pids!
        }
        if self.product != nil {
            map["Product"] = self.product!
        }
        if self.promQL != nil {
            map["PromQL"] = self.promQL!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.tags != nil {
            var tmp : [Any] = []
            for k in self.tags! {
                tmp.append(k.toMap())
            }
            map["Tags"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AlertCheckType"] as? String {
            self.alertCheckType = value
        }
        if let value = dict["AlertGroup"] as? Int64 {
            self.alertGroup = value
        }
        if let value = dict["AlertId"] as? Int64 {
            self.alertId = value
        }
        if let value = dict["AlertName"] as? String {
            self.alertName = value
        }
        if let value = dict["AlertPiplines"] as? String {
            self.alertPiplines = value
        }
        if let value = dict["AlertRuleContent"] as? String {
            self.alertRuleContent = value
        }
        if let value = dict["AlertStatus"] as? String {
            self.alertStatus = value
        }
        if let value = dict["AlertType"] as? String {
            self.alertType = value
        }
        if let value = dict["Annotations"] as? String {
            self.annotations = value
        }
        if let value = dict["AutoAddNewApplication"] as? Bool {
            self.autoAddNewApplication = value
        }
        if let value = dict["AutoAddTargetConfig"] as? String {
            self.autoAddTargetConfig = value
        }
        if let value = dict["CheckCycle"] as? Int64 {
            self.checkCycle = value
        }
        if let value = dict["ClusterId"] as? String {
            self.clusterId = value
        }
        if let value = dict["DataConfig"] as? String {
            self.dataConfig = value
        }
        if let value = dict["Duration"] as? Int64 {
            self.duration = value
        }
        if let value = dict["Filters"] as? String {
            self.filters = value
        }
        if let value = dict["Labels"] as? String {
            self.labels = value
        }
        if let value = dict["Level"] as? String {
            self.level = value
        }
        if let value = dict["MarkTags"] as? [Any?] {
            var tmp : [CreateOrUpdateAlertRuleRequest.MarkTags] = []
            for v in value {
                if v != nil {
                    var model = CreateOrUpdateAlertRuleRequest.MarkTags()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.markTags = tmp
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["MetricsKey"] as? String {
            self.metricsKey = value
        }
        if let value = dict["MetricsType"] as? String {
            self.metricsType = value
        }
        if let value = dict["Notice"] as? String {
            self.notice = value
        }
        if let value = dict["NotifyMode"] as? String {
            self.notifyMode = value
        }
        if let value = dict["NotifyStrategy"] as? String {
            self.notifyStrategy = value
        }
        if let value = dict["Pids"] as? String {
            self.pids = value
        }
        if let value = dict["Product"] as? String {
            self.product = value
        }
        if let value = dict["PromQL"] as? String {
            self.promQL = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Tags"] as? [Any?] {
            var tmp : [CreateOrUpdateAlertRuleRequest.Tags] = []
            for v in value {
                if v != nil {
                    var model = CreateOrUpdateAlertRuleRequest.Tags()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tags = tmp
        }
    }
}

public class CreateOrUpdateAlertRuleResponseBody : Tea.TeaModel {
    public class AlertRule : Tea.TeaModel {
        public class AlertRuleContent : Tea.TeaModel {
            public class AlertRuleItems : Tea.TeaModel {
                public var aggregate: String?

                public var metricKey: String?

                public var n: Double?

                public var operator_: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.aggregate != nil {
                        map["Aggregate"] = self.aggregate!
                    }
                    if self.metricKey != nil {
                        map["MetricKey"] = self.metricKey!
                    }
                    if self.n != nil {
                        map["N"] = self.n!
                    }
                    if self.operator_ != nil {
                        map["Operator"] = self.operator_!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Aggregate"] as? String {
                        self.aggregate = value
                    }
                    if let value = dict["MetricKey"] as? String {
                        self.metricKey = value
                    }
                    if let value = dict["N"] as? Double {
                        self.n = value
                    }
                    if let value = dict["Operator"] as? String {
                        self.operator_ = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public var alertRuleItems: [CreateOrUpdateAlertRuleResponseBody.AlertRule.AlertRuleContent.AlertRuleItems]?

            public var condition: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.alertRuleItems != nil {
                    var tmp : [Any] = []
                    for k in self.alertRuleItems! {
                        tmp.append(k.toMap())
                    }
                    map["AlertRuleItems"] = tmp
                }
                if self.condition != nil {
                    map["Condition"] = self.condition!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AlertRuleItems"] as? [Any?] {
                    var tmp : [CreateOrUpdateAlertRuleResponseBody.AlertRule.AlertRuleContent.AlertRuleItems] = []
                    for v in value {
                        if v != nil {
                            var model = CreateOrUpdateAlertRuleResponseBody.AlertRule.AlertRuleContent.AlertRuleItems()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.alertRuleItems = tmp
                }
                if let value = dict["Condition"] as? String {
                    self.condition = value
                }
            }
        }
        public class Annotations : Tea.TeaModel {
            public var name: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public class Filters : Tea.TeaModel {
            public class CustomSLSFilters : Tea.TeaModel {
                public var key: String?

                public var opt: String?

                public var show: Bool?

                public var t: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.key != nil {
                        map["Key"] = self.key!
                    }
                    if self.opt != nil {
                        map["Opt"] = self.opt!
                    }
                    if self.show != nil {
                        map["Show"] = self.show!
                    }
                    if self.t != nil {
                        map["T"] = self.t!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Key"] as? String {
                        self.key = value
                    }
                    if let value = dict["Opt"] as? String {
                        self.opt = value
                    }
                    if let value = dict["Show"] as? Bool {
                        self.show = value
                    }
                    if let value = dict["T"] as? String {
                        self.t = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class DimFilters : Tea.TeaModel {
                public var filterKey: String?

                public var filterOpt: String?

                public var filterValues: [String]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.filterKey != nil {
                        map["FilterKey"] = self.filterKey!
                    }
                    if self.filterOpt != nil {
                        map["FilterOpt"] = self.filterOpt!
                    }
                    if self.filterValues != nil {
                        map["FilterValues"] = self.filterValues!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["FilterKey"] as? String {
                        self.filterKey = value
                    }
                    if let value = dict["FilterOpt"] as? String {
                        self.filterOpt = value
                    }
                    if let value = dict["FilterValues"] as? [String] {
                        self.filterValues = value
                    }
                }
            }
            public var customSLSFilters: [CreateOrUpdateAlertRuleResponseBody.AlertRule.Filters.CustomSLSFilters]?

            public var customSLSGroupByDimensions: [String]?

            public var customSLSWheres: [String]?

            public var dimFilters: [CreateOrUpdateAlertRuleResponseBody.AlertRule.Filters.DimFilters]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.customSLSFilters != nil {
                    var tmp : [Any] = []
                    for k in self.customSLSFilters! {
                        tmp.append(k.toMap())
                    }
                    map["CustomSLSFilters"] = tmp
                }
                if self.customSLSGroupByDimensions != nil {
                    map["CustomSLSGroupByDimensions"] = self.customSLSGroupByDimensions!
                }
                if self.customSLSWheres != nil {
                    map["CustomSLSWheres"] = self.customSLSWheres!
                }
                if self.dimFilters != nil {
                    var tmp : [Any] = []
                    for k in self.dimFilters! {
                        tmp.append(k.toMap())
                    }
                    map["DimFilters"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CustomSLSFilters"] as? [Any?] {
                    var tmp : [CreateOrUpdateAlertRuleResponseBody.AlertRule.Filters.CustomSLSFilters] = []
                    for v in value {
                        if v != nil {
                            var model = CreateOrUpdateAlertRuleResponseBody.AlertRule.Filters.CustomSLSFilters()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.customSLSFilters = tmp
                }
                if let value = dict["CustomSLSGroupByDimensions"] as? [String] {
                    self.customSLSGroupByDimensions = value
                }
                if let value = dict["CustomSLSWheres"] as? [String] {
                    self.customSLSWheres = value
                }
                if let value = dict["DimFilters"] as? [Any?] {
                    var tmp : [CreateOrUpdateAlertRuleResponseBody.AlertRule.Filters.DimFilters] = []
                    for v in value {
                        if v != nil {
                            var model = CreateOrUpdateAlertRuleResponseBody.AlertRule.Filters.DimFilters()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.dimFilters = tmp
                }
            }
        }
        public class Labels : Tea.TeaModel {
            public var name: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public class Tags : Tea.TeaModel {
            public var key: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.key != nil {
                    map["Key"] = self.key!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Key"] as? String {
                    self.key = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public var alertCheckType: String?

        public var alertGroup: Int64?

        public var alertId: Int64?

        public var alertName: String?

        public var alertRuleContent: CreateOrUpdateAlertRuleResponseBody.AlertRule.AlertRuleContent?

        public var alertStatus: String?

        public var alertType: String?

        public var annotations: [CreateOrUpdateAlertRuleResponseBody.AlertRule.Annotations]?

        public var autoAddNewApplication: Bool?

        public var clusterId: String?

        public var createdTime: Int64?

        public var duration: String?

        public var extend: String?

        public var filters: CreateOrUpdateAlertRuleResponseBody.AlertRule.Filters?

        public var labels: [CreateOrUpdateAlertRuleResponseBody.AlertRule.Labels]?

        public var level: String?

        public var message: String?

        public var metricsType: String?

        public var notifyMode: String?

        public var notifyStrategy: String?

        public var pids: [String]?

        public var promQL: String?

        public var regionId: String?

        public var tags: [CreateOrUpdateAlertRuleResponseBody.AlertRule.Tags]?

        public var updatedTime: Int64?

        public var userId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.alertRuleContent?.validate()
            try self.filters?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.alertCheckType != nil {
                map["AlertCheckType"] = self.alertCheckType!
            }
            if self.alertGroup != nil {
                map["AlertGroup"] = self.alertGroup!
            }
            if self.alertId != nil {
                map["AlertId"] = self.alertId!
            }
            if self.alertName != nil {
                map["AlertName"] = self.alertName!
            }
            if self.alertRuleContent != nil {
                map["AlertRuleContent"] = self.alertRuleContent?.toMap()
            }
            if self.alertStatus != nil {
                map["AlertStatus"] = self.alertStatus!
            }
            if self.alertType != nil {
                map["AlertType"] = self.alertType!
            }
            if self.annotations != nil {
                var tmp : [Any] = []
                for k in self.annotations! {
                    tmp.append(k.toMap())
                }
                map["Annotations"] = tmp
            }
            if self.autoAddNewApplication != nil {
                map["AutoAddNewApplication"] = self.autoAddNewApplication!
            }
            if self.clusterId != nil {
                map["ClusterId"] = self.clusterId!
            }
            if self.createdTime != nil {
                map["CreatedTime"] = self.createdTime!
            }
            if self.duration != nil {
                map["Duration"] = self.duration!
            }
            if self.extend != nil {
                map["Extend"] = self.extend!
            }
            if self.filters != nil {
                map["Filters"] = self.filters?.toMap()
            }
            if self.labels != nil {
                var tmp : [Any] = []
                for k in self.labels! {
                    tmp.append(k.toMap())
                }
                map["Labels"] = tmp
            }
            if self.level != nil {
                map["Level"] = self.level!
            }
            if self.message != nil {
                map["Message"] = self.message!
            }
            if self.metricsType != nil {
                map["MetricsType"] = self.metricsType!
            }
            if self.notifyMode != nil {
                map["NotifyMode"] = self.notifyMode!
            }
            if self.notifyStrategy != nil {
                map["NotifyStrategy"] = self.notifyStrategy!
            }
            if self.pids != nil {
                map["Pids"] = self.pids!
            }
            if self.promQL != nil {
                map["PromQL"] = self.promQL!
            }
            if self.regionId != nil {
                map["RegionId"] = self.regionId!
            }
            if self.tags != nil {
                var tmp : [Any] = []
                for k in self.tags! {
                    tmp.append(k.toMap())
                }
                map["Tags"] = tmp
            }
            if self.updatedTime != nil {
                map["UpdatedTime"] = self.updatedTime!
            }
            if self.userId != nil {
                map["UserId"] = self.userId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AlertCheckType"] as? String {
                self.alertCheckType = value
            }
            if let value = dict["AlertGroup"] as? Int64 {
                self.alertGroup = value
            }
            if let value = dict["AlertId"] as? Int64 {
                self.alertId = value
            }
            if let value = dict["AlertName"] as? String {
                self.alertName = value
            }
            if let value = dict["AlertRuleContent"] as? [String: Any?] {
                var model = CreateOrUpdateAlertRuleResponseBody.AlertRule.AlertRuleContent()
                model.fromMap(value)
                self.alertRuleContent = model
            }
            if let value = dict["AlertStatus"] as? String {
                self.alertStatus = value
            }
            if let value = dict["AlertType"] as? String {
                self.alertType = value
            }
            if let value = dict["Annotations"] as? [Any?] {
                var tmp : [CreateOrUpdateAlertRuleResponseBody.AlertRule.Annotations] = []
                for v in value {
                    if v != nil {
                        var model = CreateOrUpdateAlertRuleResponseBody.AlertRule.Annotations()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.annotations = tmp
            }
            if let value = dict["AutoAddNewApplication"] as? Bool {
                self.autoAddNewApplication = value
            }
            if let value = dict["ClusterId"] as? String {
                self.clusterId = value
            }
            if let value = dict["CreatedTime"] as? Int64 {
                self.createdTime = value
            }
            if let value = dict["Duration"] as? String {
                self.duration = value
            }
            if let value = dict["Extend"] as? String {
                self.extend = value
            }
            if let value = dict["Filters"] as? [String: Any?] {
                var model = CreateOrUpdateAlertRuleResponseBody.AlertRule.Filters()
                model.fromMap(value)
                self.filters = model
            }
            if let value = dict["Labels"] as? [Any?] {
                var tmp : [CreateOrUpdateAlertRuleResponseBody.AlertRule.Labels] = []
                for v in value {
                    if v != nil {
                        var model = CreateOrUpdateAlertRuleResponseBody.AlertRule.Labels()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.labels = tmp
            }
            if let value = dict["Level"] as? String {
                self.level = value
            }
            if let value = dict["Message"] as? String {
                self.message = value
            }
            if let value = dict["MetricsType"] as? String {
                self.metricsType = value
            }
            if let value = dict["NotifyMode"] as? String {
                self.notifyMode = value
            }
            if let value = dict["NotifyStrategy"] as? String {
                self.notifyStrategy = value
            }
            if let value = dict["Pids"] as? [String] {
                self.pids = value
            }
            if let value = dict["PromQL"] as? String {
                self.promQL = value
            }
            if let value = dict["RegionId"] as? String {
                self.regionId = value
            }
            if let value = dict["Tags"] as? [Any?] {
                var tmp : [CreateOrUpdateAlertRuleResponseBody.AlertRule.Tags] = []
                for v in value {
                    if v != nil {
                        var model = CreateOrUpdateAlertRuleResponseBody.AlertRule.Tags()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.tags = tmp
            }
            if let value = dict["UpdatedTime"] as? Int64 {
                self.updatedTime = value
            }
            if let value = dict["UserId"] as? String {
                self.userId = value
            }
        }
    }
    public var alertRule: CreateOrUpdateAlertRuleResponseBody.AlertRule?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.alertRule?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.alertRule != nil {
            map["AlertRule"] = self.alertRule?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AlertRule"] as? [String: Any?] {
            var model = CreateOrUpdateAlertRuleResponseBody.AlertRule()
            model.fromMap(value)
            self.alertRule = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateOrUpdateAlertRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateOrUpdateAlertRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateOrUpdateAlertRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateOrUpdateContactRequest : Tea.TeaModel {
    public var contactId: Int64?

    public var contactName: String?

    public var corpUserId: String?

    public var dingRobotUrl: String?

    public var email: String?

    public var isEmailVerify: Bool?

    public var phone: String?

    public var reissueSendNotice: Int64?

    public var resourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.contactId != nil {
            map["ContactId"] = self.contactId!
        }
        if self.contactName != nil {
            map["ContactName"] = self.contactName!
        }
        if self.corpUserId != nil {
            map["CorpUserId"] = self.corpUserId!
        }
        if self.dingRobotUrl != nil {
            map["DingRobotUrl"] = self.dingRobotUrl!
        }
        if self.email != nil {
            map["Email"] = self.email!
        }
        if self.isEmailVerify != nil {
            map["IsEmailVerify"] = self.isEmailVerify!
        }
        if self.phone != nil {
            map["Phone"] = self.phone!
        }
        if self.reissueSendNotice != nil {
            map["ReissueSendNotice"] = self.reissueSendNotice!
        }
        if self.resourceGroupId != nil {
            map["ResourceGroupId"] = self.resourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ContactId"] as? Int64 {
            self.contactId = value
        }
        if let value = dict["ContactName"] as? String {
            self.contactName = value
        }
        if let value = dict["CorpUserId"] as? String {
            self.corpUserId = value
        }
        if let value = dict["DingRobotUrl"] as? String {
            self.dingRobotUrl = value
        }
        if let value = dict["Email"] as? String {
            self.email = value
        }
        if let value = dict["IsEmailVerify"] as? Bool {
            self.isEmailVerify = value
        }
        if let value = dict["Phone"] as? String {
            self.phone = value
        }
        if let value = dict["ReissueSendNotice"] as? Int64 {
            self.reissueSendNotice = value
        }
        if let value = dict["ResourceGroupId"] as? String {
            self.resourceGroupId = value
        }
    }
}

public class CreateOrUpdateContactResponseBody : Tea.TeaModel {
    public class AlertContact : Tea.TeaModel {
        public var contactId: Double?

        public var contactName: String?

        public var dingRobotUrl: String?

        public var email: String?

        public var isVerify: Bool?

        public var phone: String?

        public var reissueSendNotice: Int64?

        public var isEmailVerify: Bool?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.contactId != nil {
                map["ContactId"] = self.contactId!
            }
            if self.contactName != nil {
                map["ContactName"] = self.contactName!
            }
            if self.dingRobotUrl != nil {
                map["DingRobotUrl"] = self.dingRobotUrl!
            }
            if self.email != nil {
                map["Email"] = self.email!
            }
            if self.isVerify != nil {
                map["IsVerify"] = self.isVerify!
            }
            if self.phone != nil {
                map["Phone"] = self.phone!
            }
            if self.reissueSendNotice != nil {
                map["ReissueSendNotice"] = self.reissueSendNotice!
            }
            if self.isEmailVerify != nil {
                map["isEmailVerify"] = self.isEmailVerify!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ContactId"] as? Double {
                self.contactId = value
            }
            if let value = dict["ContactName"] as? String {
                self.contactName = value
            }
            if let value = dict["DingRobotUrl"] as? String {
                self.dingRobotUrl = value
            }
            if let value = dict["Email"] as? String {
                self.email = value
            }
            if let value = dict["IsVerify"] as? Bool {
                self.isVerify = value
            }
            if let value = dict["Phone"] as? String {
                self.phone = value
            }
            if let value = dict["ReissueSendNotice"] as? Int64 {
                self.reissueSendNotice = value
            }
            if let value = dict["isEmailVerify"] as? Bool {
                self.isEmailVerify = value
            }
        }
    }
    public var alertContact: CreateOrUpdateContactResponseBody.AlertContact?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.alertContact?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.alertContact != nil {
            map["AlertContact"] = self.alertContact?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AlertContact"] as? [String: Any?] {
            var model = CreateOrUpdateContactResponseBody.AlertContact()
            model.fromMap(value)
            self.alertContact = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateOrUpdateContactResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateOrUpdateContactResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateOrUpdateContactResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateOrUpdateContactGroupRequest : Tea.TeaModel {
    public var contactGroupId: Int64?

    public var contactGroupName: String?

    public var contactIds: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.contactGroupId != nil {
            map["ContactGroupId"] = self.contactGroupId!
        }
        if self.contactGroupName != nil {
            map["ContactGroupName"] = self.contactGroupName!
        }
        if self.contactIds != nil {
            map["ContactIds"] = self.contactIds!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ContactGroupId"] as? Int64 {
            self.contactGroupId = value
        }
        if let value = dict["ContactGroupName"] as? String {
            self.contactGroupName = value
        }
        if let value = dict["ContactIds"] as? String {
            self.contactIds = value
        }
    }
}

public class CreateOrUpdateContactGroupResponseBody : Tea.TeaModel {
    public class AlertContactGroup : Tea.TeaModel {
        public var contactGroupId: Double?

        public var contactGroupName: String?

        public var contactIds: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.contactGroupId != nil {
                map["ContactGroupId"] = self.contactGroupId!
            }
            if self.contactGroupName != nil {
                map["ContactGroupName"] = self.contactGroupName!
            }
            if self.contactIds != nil {
                map["ContactIds"] = self.contactIds!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ContactGroupId"] as? Double {
                self.contactGroupId = value
            }
            if let value = dict["ContactGroupName"] as? String {
                self.contactGroupName = value
            }
            if let value = dict["ContactIds"] as? String {
                self.contactIds = value
            }
        }
    }
    public var alertContactGroup: CreateOrUpdateContactGroupResponseBody.AlertContactGroup?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.alertContactGroup?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.alertContactGroup != nil {
            map["AlertContactGroup"] = self.alertContactGroup?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AlertContactGroup"] as? [String: Any?] {
            var model = CreateOrUpdateContactGroupResponseBody.AlertContactGroup()
            model.fromMap(value)
            self.alertContactGroup = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateOrUpdateContactGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateOrUpdateContactGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateOrUpdateContactGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateOrUpdateEventBridgeIntegrationRequest : Tea.TeaModel {
    public var accessKey: String?

    public var accessSecret: String?

    public var description_: String?

    public var endpoint: String?

    public var eventBusName: String?

    public var eventBusRegionId: String?

    public var id: Int64?

    public var name: String?

    public var source: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.accessKey != nil {
            map["AccessKey"] = self.accessKey!
        }
        if self.accessSecret != nil {
            map["AccessSecret"] = self.accessSecret!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.endpoint != nil {
            map["Endpoint"] = self.endpoint!
        }
        if self.eventBusName != nil {
            map["EventBusName"] = self.eventBusName!
        }
        if self.eventBusRegionId != nil {
            map["EventBusRegionId"] = self.eventBusRegionId!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.source != nil {
            map["Source"] = self.source!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AccessKey"] as? String {
            self.accessKey = value
        }
        if let value = dict["AccessSecret"] as? String {
            self.accessSecret = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["Endpoint"] as? String {
            self.endpoint = value
        }
        if let value = dict["EventBusName"] as? String {
            self.eventBusName = value
        }
        if let value = dict["EventBusRegionId"] as? String {
            self.eventBusRegionId = value
        }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["Source"] as? String {
            self.source = value
        }
    }
}

public class CreateOrUpdateEventBridgeIntegrationResponseBody : Tea.TeaModel {
    public class EventBridgeIntegration : Tea.TeaModel {
        public var accessKey: String?

        public var accessSecret: String?

        public var description_: String?

        public var endpoint: String?

        public var eventBusName: String?

        public var eventBusRegionId: String?

        public var id: Int64?

        public var name: String?

        public var source: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accessKey != nil {
                map["AccessKey"] = self.accessKey!
            }
            if self.accessSecret != nil {
                map["AccessSecret"] = self.accessSecret!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.endpoint != nil {
                map["Endpoint"] = self.endpoint!
            }
            if self.eventBusName != nil {
                map["EventBusName"] = self.eventBusName!
            }
            if self.eventBusRegionId != nil {
                map["EventBusRegionId"] = self.eventBusRegionId!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.source != nil {
                map["Source"] = self.source!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AccessKey"] as? String {
                self.accessKey = value
            }
            if let value = dict["AccessSecret"] as? String {
                self.accessSecret = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["Endpoint"] as? String {
                self.endpoint = value
            }
            if let value = dict["EventBusName"] as? String {
                self.eventBusName = value
            }
            if let value = dict["EventBusRegionId"] as? String {
                self.eventBusRegionId = value
            }
            if let value = dict["Id"] as? Int64 {
                self.id = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["Source"] as? String {
                self.source = value
            }
        }
    }
    public var eventBridgeIntegration: CreateOrUpdateEventBridgeIntegrationResponseBody.EventBridgeIntegration?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.eventBridgeIntegration?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.eventBridgeIntegration != nil {
            map["EventBridgeIntegration"] = self.eventBridgeIntegration?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EventBridgeIntegration"] as? [String: Any?] {
            var model = CreateOrUpdateEventBridgeIntegrationResponseBody.EventBridgeIntegration()
            model.fromMap(value)
            self.eventBridgeIntegration = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateOrUpdateEventBridgeIntegrationResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateOrUpdateEventBridgeIntegrationResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateOrUpdateEventBridgeIntegrationResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateOrUpdateIMRobotRequest : Tea.TeaModel {
    public var cardTemplate: String?

    public var dailyNoc: Bool?

    public var dailyNocTime: String?

    public var dingSignKey: String?

    public var enableOutgoing: Bool?

    public var robotAddress: String?

    public var robotId: Int64?

    public var robotName: String?

    public var token: String?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cardTemplate != nil {
            map["CardTemplate"] = self.cardTemplate!
        }
        if self.dailyNoc != nil {
            map["DailyNoc"] = self.dailyNoc!
        }
        if self.dailyNocTime != nil {
            map["DailyNocTime"] = self.dailyNocTime!
        }
        if self.dingSignKey != nil {
            map["DingSignKey"] = self.dingSignKey!
        }
        if self.enableOutgoing != nil {
            map["EnableOutgoing"] = self.enableOutgoing!
        }
        if self.robotAddress != nil {
            map["RobotAddress"] = self.robotAddress!
        }
        if self.robotId != nil {
            map["RobotId"] = self.robotId!
        }
        if self.robotName != nil {
            map["RobotName"] = self.robotName!
        }
        if self.token != nil {
            map["Token"] = self.token!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CardTemplate"] as? String {
            self.cardTemplate = value
        }
        if let value = dict["DailyNoc"] as? Bool {
            self.dailyNoc = value
        }
        if let value = dict["DailyNocTime"] as? String {
            self.dailyNocTime = value
        }
        if let value = dict["DingSignKey"] as? String {
            self.dingSignKey = value
        }
        if let value = dict["EnableOutgoing"] as? Bool {
            self.enableOutgoing = value
        }
        if let value = dict["RobotAddress"] as? String {
            self.robotAddress = value
        }
        if let value = dict["RobotId"] as? Int64 {
            self.robotId = value
        }
        if let value = dict["RobotName"] as? String {
            self.robotName = value
        }
        if let value = dict["Token"] as? String {
            self.token = value
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
    }
}

public class CreateOrUpdateIMRobotResponseBody : Tea.TeaModel {
    public class AlertRobot : Tea.TeaModel {
        public var cardTemplate: String?

        public var dailyNoc: Bool?

        public var dailyNocTime: String?

        public var enableOutgoing: Bool?

        public var robotAddress: String?

        public var robotId: Double?

        public var robotName: String?

        public var token: String?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.cardTemplate != nil {
                map["CardTemplate"] = self.cardTemplate!
            }
            if self.dailyNoc != nil {
                map["DailyNoc"] = self.dailyNoc!
            }
            if self.dailyNocTime != nil {
                map["DailyNocTime"] = self.dailyNocTime!
            }
            if self.enableOutgoing != nil {
                map["EnableOutgoing"] = self.enableOutgoing!
            }
            if self.robotAddress != nil {
                map["RobotAddress"] = self.robotAddress!
            }
            if self.robotId != nil {
                map["RobotId"] = self.robotId!
            }
            if self.robotName != nil {
                map["RobotName"] = self.robotName!
            }
            if self.token != nil {
                map["Token"] = self.token!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CardTemplate"] as? String {
                self.cardTemplate = value
            }
            if let value = dict["DailyNoc"] as? Bool {
                self.dailyNoc = value
            }
            if let value = dict["DailyNocTime"] as? String {
                self.dailyNocTime = value
            }
            if let value = dict["EnableOutgoing"] as? Bool {
                self.enableOutgoing = value
            }
            if let value = dict["RobotAddress"] as? String {
                self.robotAddress = value
            }
            if let value = dict["RobotId"] as? Double {
                self.robotId = value
            }
            if let value = dict["RobotName"] as? String {
                self.robotName = value
            }
            if let value = dict["Token"] as? String {
                self.token = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
        }
    }
    public var alertRobot: CreateOrUpdateIMRobotResponseBody.AlertRobot?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.alertRobot?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.alertRobot != nil {
            map["AlertRobot"] = self.alertRobot?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AlertRobot"] as? [String: Any?] {
            var model = CreateOrUpdateIMRobotResponseBody.AlertRobot()
            model.fromMap(value)
            self.alertRobot = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateOrUpdateIMRobotResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateOrUpdateIMRobotResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateOrUpdateIMRobotResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateOrUpdateNotificationPolicyRequest : Tea.TeaModel {
    public var directedMode: Bool?

    public var escalationPolicyId: Int64?

    public var groupRule: String?

    public var id: Int64?

    public var integrationId: Int64?

    public var matchingRules: String?

    public var name: String?

    public var notifyRule: String?

    public var notifyTemplate: String?

    public var regionId: String?

    public var repeat_: Bool?

    public var repeatInterval: Int64?

    public var sendRecoverMessage: Bool?

    public var state: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.directedMode != nil {
            map["DirectedMode"] = self.directedMode!
        }
        if self.escalationPolicyId != nil {
            map["EscalationPolicyId"] = self.escalationPolicyId!
        }
        if self.groupRule != nil {
            map["GroupRule"] = self.groupRule!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.integrationId != nil {
            map["IntegrationId"] = self.integrationId!
        }
        if self.matchingRules != nil {
            map["MatchingRules"] = self.matchingRules!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.notifyRule != nil {
            map["NotifyRule"] = self.notifyRule!
        }
        if self.notifyTemplate != nil {
            map["NotifyTemplate"] = self.notifyTemplate!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.repeat_ != nil {
            map["Repeat"] = self.repeat_!
        }
        if self.repeatInterval != nil {
            map["RepeatInterval"] = self.repeatInterval!
        }
        if self.sendRecoverMessage != nil {
            map["SendRecoverMessage"] = self.sendRecoverMessage!
        }
        if self.state != nil {
            map["State"] = self.state!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DirectedMode"] as? Bool {
            self.directedMode = value
        }
        if let value = dict["EscalationPolicyId"] as? Int64 {
            self.escalationPolicyId = value
        }
        if let value = dict["GroupRule"] as? String {
            self.groupRule = value
        }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["IntegrationId"] as? Int64 {
            self.integrationId = value
        }
        if let value = dict["MatchingRules"] as? String {
            self.matchingRules = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["NotifyRule"] as? String {
            self.notifyRule = value
        }
        if let value = dict["NotifyTemplate"] as? String {
            self.notifyTemplate = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Repeat"] as? Bool {
            self.repeat_ = value
        }
        if let value = dict["RepeatInterval"] as? Int64 {
            self.repeatInterval = value
        }
        if let value = dict["SendRecoverMessage"] as? Bool {
            self.sendRecoverMessage = value
        }
        if let value = dict["State"] as? String {
            self.state = value
        }
    }
}

public class CreateOrUpdateNotificationPolicyResponseBody : Tea.TeaModel {
    public class NotificationPolicy : Tea.TeaModel {
        public class GroupRule : Tea.TeaModel {
            public var groupInterval: Int64?

            public var groupWait: Int64?

            public var groupingFields: [String]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.groupInterval != nil {
                    map["GroupInterval"] = self.groupInterval!
                }
                if self.groupWait != nil {
                    map["GroupWait"] = self.groupWait!
                }
                if self.groupingFields != nil {
                    map["GroupingFields"] = self.groupingFields!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["GroupInterval"] as? Int64 {
                    self.groupInterval = value
                }
                if let value = dict["GroupWait"] as? Int64 {
                    self.groupWait = value
                }
                if let value = dict["GroupingFields"] as? [String] {
                    self.groupingFields = value
                }
            }
        }
        public class MatchingRules : Tea.TeaModel {
            public class MatchingConditions : Tea.TeaModel {
                public var key: String?

                public var operator_: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.key != nil {
                        map["Key"] = self.key!
                    }
                    if self.operator_ != nil {
                        map["Operator"] = self.operator_!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Key"] as? String {
                        self.key = value
                    }
                    if let value = dict["Operator"] as? String {
                        self.operator_ = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public var matchingConditions: [CreateOrUpdateNotificationPolicyResponseBody.NotificationPolicy.MatchingRules.MatchingConditions]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.matchingConditions != nil {
                    var tmp : [Any] = []
                    for k in self.matchingConditions! {
                        tmp.append(k.toMap())
                    }
                    map["MatchingConditions"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["MatchingConditions"] as? [Any?] {
                    var tmp : [CreateOrUpdateNotificationPolicyResponseBody.NotificationPolicy.MatchingRules.MatchingConditions] = []
                    for v in value {
                        if v != nil {
                            var model = CreateOrUpdateNotificationPolicyResponseBody.NotificationPolicy.MatchingRules.MatchingConditions()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.matchingConditions = tmp
                }
            }
        }
        public class NotifyRule : Tea.TeaModel {
            public class NotifyObjects : Tea.TeaModel {
                public var notifyChannels: [String]?

                public var notifyObjectId: Int64?

                public var notifyObjectName: String?

                public var notifyObjectType: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.notifyChannels != nil {
                        map["NotifyChannels"] = self.notifyChannels!
                    }
                    if self.notifyObjectId != nil {
                        map["NotifyObjectId"] = self.notifyObjectId!
                    }
                    if self.notifyObjectName != nil {
                        map["NotifyObjectName"] = self.notifyObjectName!
                    }
                    if self.notifyObjectType != nil {
                        map["NotifyObjectType"] = self.notifyObjectType!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["NotifyChannels"] as? [String] {
                        self.notifyChannels = value
                    }
                    if let value = dict["NotifyObjectId"] as? Int64 {
                        self.notifyObjectId = value
                    }
                    if let value = dict["NotifyObjectName"] as? String {
                        self.notifyObjectName = value
                    }
                    if let value = dict["NotifyObjectType"] as? String {
                        self.notifyObjectType = value
                    }
                }
            }
            public var notifyChannels: [String]?

            public var notifyEndTime: String?

            public var notifyObjects: [CreateOrUpdateNotificationPolicyResponseBody.NotificationPolicy.NotifyRule.NotifyObjects]?

            public var notifyStartTime: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.notifyChannels != nil {
                    map["NotifyChannels"] = self.notifyChannels!
                }
                if self.notifyEndTime != nil {
                    map["NotifyEndTime"] = self.notifyEndTime!
                }
                if self.notifyObjects != nil {
                    var tmp : [Any] = []
                    for k in self.notifyObjects! {
                        tmp.append(k.toMap())
                    }
                    map["NotifyObjects"] = tmp
                }
                if self.notifyStartTime != nil {
                    map["NotifyStartTime"] = self.notifyStartTime!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["NotifyChannels"] as? [String] {
                    self.notifyChannels = value
                }
                if let value = dict["NotifyEndTime"] as? String {
                    self.notifyEndTime = value
                }
                if let value = dict["NotifyObjects"] as? [Any?] {
                    var tmp : [CreateOrUpdateNotificationPolicyResponseBody.NotificationPolicy.NotifyRule.NotifyObjects] = []
                    for v in value {
                        if v != nil {
                            var model = CreateOrUpdateNotificationPolicyResponseBody.NotificationPolicy.NotifyRule.NotifyObjects()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.notifyObjects = tmp
                }
                if let value = dict["NotifyStartTime"] as? String {
                    self.notifyStartTime = value
                }
            }
        }
        public class NotifyTemplate : Tea.TeaModel {
            public var emailContent: String?

            public var emailRecoverContent: String?

            public var emailRecoverTitle: String?

            public var emailTitle: String?

            public var robotContent: String?

            public var smsContent: String?

            public var smsRecoverContent: String?

            public var ttsContent: String?

            public var ttsRecoverContent: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.emailContent != nil {
                    map["EmailContent"] = self.emailContent!
                }
                if self.emailRecoverContent != nil {
                    map["EmailRecoverContent"] = self.emailRecoverContent!
                }
                if self.emailRecoverTitle != nil {
                    map["EmailRecoverTitle"] = self.emailRecoverTitle!
                }
                if self.emailTitle != nil {
                    map["EmailTitle"] = self.emailTitle!
                }
                if self.robotContent != nil {
                    map["RobotContent"] = self.robotContent!
                }
                if self.smsContent != nil {
                    map["SmsContent"] = self.smsContent!
                }
                if self.smsRecoverContent != nil {
                    map["SmsRecoverContent"] = self.smsRecoverContent!
                }
                if self.ttsContent != nil {
                    map["TtsContent"] = self.ttsContent!
                }
                if self.ttsRecoverContent != nil {
                    map["TtsRecoverContent"] = self.ttsRecoverContent!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["EmailContent"] as? String {
                    self.emailContent = value
                }
                if let value = dict["EmailRecoverContent"] as? String {
                    self.emailRecoverContent = value
                }
                if let value = dict["EmailRecoverTitle"] as? String {
                    self.emailRecoverTitle = value
                }
                if let value = dict["EmailTitle"] as? String {
                    self.emailTitle = value
                }
                if let value = dict["RobotContent"] as? String {
                    self.robotContent = value
                }
                if let value = dict["SmsContent"] as? String {
                    self.smsContent = value
                }
                if let value = dict["SmsRecoverContent"] as? String {
                    self.smsRecoverContent = value
                }
                if let value = dict["TtsContent"] as? String {
                    self.ttsContent = value
                }
                if let value = dict["TtsRecoverContent"] as? String {
                    self.ttsRecoverContent = value
                }
            }
        }
        public var directedMode: Bool?

        public var escalationPolicyId: Int64?

        public var groupRule: CreateOrUpdateNotificationPolicyResponseBody.NotificationPolicy.GroupRule?

        public var id: Int64?

        public var integrationId: Int64?

        public var matchingRules: [CreateOrUpdateNotificationPolicyResponseBody.NotificationPolicy.MatchingRules]?

        public var name: String?

        public var notifyRule: CreateOrUpdateNotificationPolicyResponseBody.NotificationPolicy.NotifyRule?

        public var notifyTemplate: CreateOrUpdateNotificationPolicyResponseBody.NotificationPolicy.NotifyTemplate?

        public var repeat_: Bool?

        public var repeatInterval: Int64?

        public var sendRecoverMessage: Bool?

        public var state: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.groupRule?.validate()
            try self.notifyRule?.validate()
            try self.notifyTemplate?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.directedMode != nil {
                map["DirectedMode"] = self.directedMode!
            }
            if self.escalationPolicyId != nil {
                map["EscalationPolicyId"] = self.escalationPolicyId!
            }
            if self.groupRule != nil {
                map["GroupRule"] = self.groupRule?.toMap()
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.integrationId != nil {
                map["IntegrationId"] = self.integrationId!
            }
            if self.matchingRules != nil {
                var tmp : [Any] = []
                for k in self.matchingRules! {
                    tmp.append(k.toMap())
                }
                map["MatchingRules"] = tmp
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.notifyRule != nil {
                map["NotifyRule"] = self.notifyRule?.toMap()
            }
            if self.notifyTemplate != nil {
                map["NotifyTemplate"] = self.notifyTemplate?.toMap()
            }
            if self.repeat_ != nil {
                map["Repeat"] = self.repeat_!
            }
            if self.repeatInterval != nil {
                map["RepeatInterval"] = self.repeatInterval!
            }
            if self.sendRecoverMessage != nil {
                map["SendRecoverMessage"] = self.sendRecoverMessage!
            }
            if self.state != nil {
                map["State"] = self.state!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DirectedMode"] as? Bool {
                self.directedMode = value
            }
            if let value = dict["EscalationPolicyId"] as? Int64 {
                self.escalationPolicyId = value
            }
            if let value = dict["GroupRule"] as? [String: Any?] {
                var model = CreateOrUpdateNotificationPolicyResponseBody.NotificationPolicy.GroupRule()
                model.fromMap(value)
                self.groupRule = model
            }
            if let value = dict["Id"] as? Int64 {
                self.id = value
            }
            if let value = dict["IntegrationId"] as? Int64 {
                self.integrationId = value
            }
            if let value = dict["MatchingRules"] as? [Any?] {
                var tmp : [CreateOrUpdateNotificationPolicyResponseBody.NotificationPolicy.MatchingRules] = []
                for v in value {
                    if v != nil {
                        var model = CreateOrUpdateNotificationPolicyResponseBody.NotificationPolicy.MatchingRules()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.matchingRules = tmp
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["NotifyRule"] as? [String: Any?] {
                var model = CreateOrUpdateNotificationPolicyResponseBody.NotificationPolicy.NotifyRule()
                model.fromMap(value)
                self.notifyRule = model
            }
            if let value = dict["NotifyTemplate"] as? [String: Any?] {
                var model = CreateOrUpdateNotificationPolicyResponseBody.NotificationPolicy.NotifyTemplate()
                model.fromMap(value)
                self.notifyTemplate = model
            }
            if let value = dict["Repeat"] as? Bool {
                self.repeat_ = value
            }
            if let value = dict["RepeatInterval"] as? Int64 {
                self.repeatInterval = value
            }
            if let value = dict["SendRecoverMessage"] as? Bool {
                self.sendRecoverMessage = value
            }
            if let value = dict["State"] as? String {
                self.state = value
            }
        }
    }
    public var notificationPolicy: CreateOrUpdateNotificationPolicyResponseBody.NotificationPolicy?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.notificationPolicy?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.notificationPolicy != nil {
            map["NotificationPolicy"] = self.notificationPolicy?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["NotificationPolicy"] as? [String: Any?] {
            var model = CreateOrUpdateNotificationPolicyResponseBody.NotificationPolicy()
            model.fromMap(value)
            self.notificationPolicy = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateOrUpdateNotificationPolicyResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateOrUpdateNotificationPolicyResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateOrUpdateNotificationPolicyResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateOrUpdateSilencePolicyRequest : Tea.TeaModel {
    public var effectiveTimeType: String?

    public var id: Int64?

    public var matchingRules: String?

    public var name: String?

    public var regionId: String?

    public var state: String?

    public var timePeriod: String?

    public var timeSlots: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.effectiveTimeType != nil {
            map["EffectiveTimeType"] = self.effectiveTimeType!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.matchingRules != nil {
            map["MatchingRules"] = self.matchingRules!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.state != nil {
            map["State"] = self.state!
        }
        if self.timePeriod != nil {
            map["TimePeriod"] = self.timePeriod!
        }
        if self.timeSlots != nil {
            map["TimeSlots"] = self.timeSlots!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EffectiveTimeType"] as? String {
            self.effectiveTimeType = value
        }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["MatchingRules"] as? String {
            self.matchingRules = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["State"] as? String {
            self.state = value
        }
        if let value = dict["TimePeriod"] as? String {
            self.timePeriod = value
        }
        if let value = dict["TimeSlots"] as? String {
            self.timeSlots = value
        }
    }
}

public class CreateOrUpdateSilencePolicyResponseBody : Tea.TeaModel {
    public class SilencePolicy : Tea.TeaModel {
        public class MatchingRules : Tea.TeaModel {
            public class MatchingConditions : Tea.TeaModel {
                public var key: String?

                public var operator_: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.key != nil {
                        map["Key"] = self.key!
                    }
                    if self.operator_ != nil {
                        map["Operator"] = self.operator_!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Key"] as? String {
                        self.key = value
                    }
                    if let value = dict["Operator"] as? String {
                        self.operator_ = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public var matchingConditions: [CreateOrUpdateSilencePolicyResponseBody.SilencePolicy.MatchingRules.MatchingConditions]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.matchingConditions != nil {
                    var tmp : [Any] = []
                    for k in self.matchingConditions! {
                        tmp.append(k.toMap())
                    }
                    map["MatchingConditions"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["MatchingConditions"] as? [Any?] {
                    var tmp : [CreateOrUpdateSilencePolicyResponseBody.SilencePolicy.MatchingRules.MatchingConditions] = []
                    for v in value {
                        if v != nil {
                            var model = CreateOrUpdateSilencePolicyResponseBody.SilencePolicy.MatchingRules.MatchingConditions()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.matchingConditions = tmp
                }
            }
        }
        public var effectiveTimeType: String?

        public var id: Int64?

        public var matchingRules: [CreateOrUpdateSilencePolicyResponseBody.SilencePolicy.MatchingRules]?

        public var name: String?

        public var state: String?

        public var timePeriod: String?

        public var timeSlots: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.effectiveTimeType != nil {
                map["EffectiveTimeType"] = self.effectiveTimeType!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.matchingRules != nil {
                var tmp : [Any] = []
                for k in self.matchingRules! {
                    tmp.append(k.toMap())
                }
                map["MatchingRules"] = tmp
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.state != nil {
                map["State"] = self.state!
            }
            if self.timePeriod != nil {
                map["TimePeriod"] = self.timePeriod!
            }
            if self.timeSlots != nil {
                map["TimeSlots"] = self.timeSlots!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["EffectiveTimeType"] as? String {
                self.effectiveTimeType = value
            }
            if let value = dict["Id"] as? Int64 {
                self.id = value
            }
            if let value = dict["MatchingRules"] as? [Any?] {
                var tmp : [CreateOrUpdateSilencePolicyResponseBody.SilencePolicy.MatchingRules] = []
                for v in value {
                    if v != nil {
                        var model = CreateOrUpdateSilencePolicyResponseBody.SilencePolicy.MatchingRules()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.matchingRules = tmp
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["State"] as? String {
                self.state = value
            }
            if let value = dict["TimePeriod"] as? String {
                self.timePeriod = value
            }
            if let value = dict["TimeSlots"] as? String {
                self.timeSlots = value
            }
        }
    }
    public var requestId: String?

    public var silencePolicy: CreateOrUpdateSilencePolicyResponseBody.SilencePolicy?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.silencePolicy?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.silencePolicy != nil {
            map["SilencePolicy"] = self.silencePolicy?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SilencePolicy"] as? [String: Any?] {
            var model = CreateOrUpdateSilencePolicyResponseBody.SilencePolicy()
            model.fromMap(value)
            self.silencePolicy = model
        }
    }
}

public class CreateOrUpdateSilencePolicyResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateOrUpdateSilencePolicyResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateOrUpdateSilencePolicyResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateOrUpdateWebhookContactRequest : Tea.TeaModel {
    public var bizHeaders: String?

    public var bizParams: String?

    public var body: String?

    public var method: String?

    public var recoverBody: String?

    public var url: String?

    public var webhookId: Int64?

    public var webhookName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.bizHeaders != nil {
            map["BizHeaders"] = self.bizHeaders!
        }
        if self.bizParams != nil {
            map["BizParams"] = self.bizParams!
        }
        if self.body != nil {
            map["Body"] = self.body!
        }
        if self.method != nil {
            map["Method"] = self.method!
        }
        if self.recoverBody != nil {
            map["RecoverBody"] = self.recoverBody!
        }
        if self.url != nil {
            map["Url"] = self.url!
        }
        if self.webhookId != nil {
            map["WebhookId"] = self.webhookId!
        }
        if self.webhookName != nil {
            map["WebhookName"] = self.webhookName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BizHeaders"] as? String {
            self.bizHeaders = value
        }
        if let value = dict["BizParams"] as? String {
            self.bizParams = value
        }
        if let value = dict["Body"] as? String {
            self.body = value
        }
        if let value = dict["Method"] as? String {
            self.method = value
        }
        if let value = dict["RecoverBody"] as? String {
            self.recoverBody = value
        }
        if let value = dict["Url"] as? String {
            self.url = value
        }
        if let value = dict["WebhookId"] as? Int64 {
            self.webhookId = value
        }
        if let value = dict["WebhookName"] as? String {
            self.webhookName = value
        }
    }
}

public class CreateOrUpdateWebhookContactResponseBody : Tea.TeaModel {
    public class WebhookContact : Tea.TeaModel {
        public class Webhook : Tea.TeaModel {
            public var bizHeaders: String?

            public var bizParams: String?

            public var body: String?

            public var method: String?

            public var recoverBody: String?

            public var url: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.bizHeaders != nil {
                    map["BizHeaders"] = self.bizHeaders!
                }
                if self.bizParams != nil {
                    map["BizParams"] = self.bizParams!
                }
                if self.body != nil {
                    map["Body"] = self.body!
                }
                if self.method != nil {
                    map["Method"] = self.method!
                }
                if self.recoverBody != nil {
                    map["RecoverBody"] = self.recoverBody!
                }
                if self.url != nil {
                    map["Url"] = self.url!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["BizHeaders"] as? String {
                    self.bizHeaders = value
                }
                if let value = dict["BizParams"] as? String {
                    self.bizParams = value
                }
                if let value = dict["Body"] as? String {
                    self.body = value
                }
                if let value = dict["Method"] as? String {
                    self.method = value
                }
                if let value = dict["RecoverBody"] as? String {
                    self.recoverBody = value
                }
                if let value = dict["Url"] as? String {
                    self.url = value
                }
            }
        }
        public var webhook: CreateOrUpdateWebhookContactResponseBody.WebhookContact.Webhook?

        public var webhookId: Double?

        public var webhookName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.webhook?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.webhook != nil {
                map["Webhook"] = self.webhook?.toMap()
            }
            if self.webhookId != nil {
                map["WebhookId"] = self.webhookId!
            }
            if self.webhookName != nil {
                map["WebhookName"] = self.webhookName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Webhook"] as? [String: Any?] {
                var model = CreateOrUpdateWebhookContactResponseBody.WebhookContact.Webhook()
                model.fromMap(value)
                self.webhook = model
            }
            if let value = dict["WebhookId"] as? Double {
                self.webhookId = value
            }
            if let value = dict["WebhookName"] as? String {
                self.webhookName = value
            }
        }
    }
    public var requestId: String?

    public var webhookContact: CreateOrUpdateWebhookContactResponseBody.WebhookContact?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.webhookContact?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.webhookContact != nil {
            map["WebhookContact"] = self.webhookContact?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["WebhookContact"] as? [String: Any?] {
            var model = CreateOrUpdateWebhookContactResponseBody.WebhookContact()
            model.fromMap(value)
            self.webhookContact = model
        }
    }
}

public class CreateOrUpdateWebhookContactResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateOrUpdateWebhookContactResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateOrUpdateWebhookContactResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreatePrometheusAlertRuleRequest : Tea.TeaModel {
    public class Tags : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var alertName: String?

    public var annotations: String?

    public var clusterId: String?

    public var dispatchRuleId: Int64?

    public var duration: String?

    public var expression: String?

    public var labels: String?

    public var message: String?

    public var notifyType: String?

    public var regionId: String?

    public var tags: [CreatePrometheusAlertRuleRequest.Tags]?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.alertName != nil {
            map["AlertName"] = self.alertName!
        }
        if self.annotations != nil {
            map["Annotations"] = self.annotations!
        }
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.dispatchRuleId != nil {
            map["DispatchRuleId"] = self.dispatchRuleId!
        }
        if self.duration != nil {
            map["Duration"] = self.duration!
        }
        if self.expression != nil {
            map["Expression"] = self.expression!
        }
        if self.labels != nil {
            map["Labels"] = self.labels!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.notifyType != nil {
            map["NotifyType"] = self.notifyType!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.tags != nil {
            var tmp : [Any] = []
            for k in self.tags! {
                tmp.append(k.toMap())
            }
            map["Tags"] = tmp
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AlertName"] as? String {
            self.alertName = value
        }
        if let value = dict["Annotations"] as? String {
            self.annotations = value
        }
        if let value = dict["ClusterId"] as? String {
            self.clusterId = value
        }
        if let value = dict["DispatchRuleId"] as? Int64 {
            self.dispatchRuleId = value
        }
        if let value = dict["Duration"] as? String {
            self.duration = value
        }
        if let value = dict["Expression"] as? String {
            self.expression = value
        }
        if let value = dict["Labels"] as? String {
            self.labels = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["NotifyType"] as? String {
            self.notifyType = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Tags"] as? [Any?] {
            var tmp : [CreatePrometheusAlertRuleRequest.Tags] = []
            for v in value {
                if v != nil {
                    var model = CreatePrometheusAlertRuleRequest.Tags()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tags = tmp
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
    }
}

public class CreatePrometheusAlertRuleResponseBody : Tea.TeaModel {
    public class PrometheusAlertRule : Tea.TeaModel {
        public class Annotations : Tea.TeaModel {
            public var name: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public class Labels : Tea.TeaModel {
            public var name: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public var alertId: Int64?

        public var alertName: String?

        public var annotations: [CreatePrometheusAlertRuleResponseBody.PrometheusAlertRule.Annotations]?

        public var clusterId: String?

        public var dispatchRuleId: Int64?

        public var duration: String?

        public var expression: String?

        public var labels: [CreatePrometheusAlertRuleResponseBody.PrometheusAlertRule.Labels]?

        public var message: String?

        public var notifyType: String?

        public var status: Int32?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.alertId != nil {
                map["AlertId"] = self.alertId!
            }
            if self.alertName != nil {
                map["AlertName"] = self.alertName!
            }
            if self.annotations != nil {
                var tmp : [Any] = []
                for k in self.annotations! {
                    tmp.append(k.toMap())
                }
                map["Annotations"] = tmp
            }
            if self.clusterId != nil {
                map["ClusterId"] = self.clusterId!
            }
            if self.dispatchRuleId != nil {
                map["DispatchRuleId"] = self.dispatchRuleId!
            }
            if self.duration != nil {
                map["Duration"] = self.duration!
            }
            if self.expression != nil {
                map["Expression"] = self.expression!
            }
            if self.labels != nil {
                var tmp : [Any] = []
                for k in self.labels! {
                    tmp.append(k.toMap())
                }
                map["Labels"] = tmp
            }
            if self.message != nil {
                map["Message"] = self.message!
            }
            if self.notifyType != nil {
                map["NotifyType"] = self.notifyType!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AlertId"] as? Int64 {
                self.alertId = value
            }
            if let value = dict["AlertName"] as? String {
                self.alertName = value
            }
            if let value = dict["Annotations"] as? [Any?] {
                var tmp : [CreatePrometheusAlertRuleResponseBody.PrometheusAlertRule.Annotations] = []
                for v in value {
                    if v != nil {
                        var model = CreatePrometheusAlertRuleResponseBody.PrometheusAlertRule.Annotations()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.annotations = tmp
            }
            if let value = dict["ClusterId"] as? String {
                self.clusterId = value
            }
            if let value = dict["DispatchRuleId"] as? Int64 {
                self.dispatchRuleId = value
            }
            if let value = dict["Duration"] as? String {
                self.duration = value
            }
            if let value = dict["Expression"] as? String {
                self.expression = value
            }
            if let value = dict["Labels"] as? [Any?] {
                var tmp : [CreatePrometheusAlertRuleResponseBody.PrometheusAlertRule.Labels] = []
                for v in value {
                    if v != nil {
                        var model = CreatePrometheusAlertRuleResponseBody.PrometheusAlertRule.Labels()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.labels = tmp
            }
            if let value = dict["Message"] as? String {
                self.message = value
            }
            if let value = dict["NotifyType"] as? String {
                self.notifyType = value
            }
            if let value = dict["Status"] as? Int32 {
                self.status = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
        }
    }
    public var code: Int64?

    public var message: String?

    public var prometheusAlertRule: CreatePrometheusAlertRuleResponseBody.PrometheusAlertRule?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.prometheusAlertRule?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.prometheusAlertRule != nil {
            map["PrometheusAlertRule"] = self.prometheusAlertRule?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int64 {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["PrometheusAlertRule"] as? [String: Any?] {
            var model = CreatePrometheusAlertRuleResponseBody.PrometheusAlertRule()
            model.fromMap(value)
            self.prometheusAlertRule = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class CreatePrometheusAlertRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreatePrometheusAlertRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreatePrometheusAlertRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreatePrometheusInstanceRequest : Tea.TeaModel {
    public class Tags : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var allSubClustersSuccess: Bool?

    public var archiveDuration: Int32?

    public var clusterId: String?

    public var clusterName: String?

    public var clusterType: String?

    public var duration: Int32?

    public var grafanaInstanceId: String?

    public var paymentType: String?

    public var regionId: String?

    public var resourceGroupId: String?

    public var securityGroupId: String?

    public var subClustersJson: String?

    public var tags: [CreatePrometheusInstanceRequest.Tags]?

    public var vSwitchId: String?

    public var vpcId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.allSubClustersSuccess != nil {
            map["AllSubClustersSuccess"] = self.allSubClustersSuccess!
        }
        if self.archiveDuration != nil {
            map["ArchiveDuration"] = self.archiveDuration!
        }
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.clusterName != nil {
            map["ClusterName"] = self.clusterName!
        }
        if self.clusterType != nil {
            map["ClusterType"] = self.clusterType!
        }
        if self.duration != nil {
            map["Duration"] = self.duration!
        }
        if self.grafanaInstanceId != nil {
            map["GrafanaInstanceId"] = self.grafanaInstanceId!
        }
        if self.paymentType != nil {
            map["PaymentType"] = self.paymentType!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceGroupId != nil {
            map["ResourceGroupId"] = self.resourceGroupId!
        }
        if self.securityGroupId != nil {
            map["SecurityGroupId"] = self.securityGroupId!
        }
        if self.subClustersJson != nil {
            map["SubClustersJson"] = self.subClustersJson!
        }
        if self.tags != nil {
            var tmp : [Any] = []
            for k in self.tags! {
                tmp.append(k.toMap())
            }
            map["Tags"] = tmp
        }
        if self.vSwitchId != nil {
            map["VSwitchId"] = self.vSwitchId!
        }
        if self.vpcId != nil {
            map["VpcId"] = self.vpcId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AllSubClustersSuccess"] as? Bool {
            self.allSubClustersSuccess = value
        }
        if let value = dict["ArchiveDuration"] as? Int32 {
            self.archiveDuration = value
        }
        if let value = dict["ClusterId"] as? String {
            self.clusterId = value
        }
        if let value = dict["ClusterName"] as? String {
            self.clusterName = value
        }
        if let value = dict["ClusterType"] as? String {
            self.clusterType = value
        }
        if let value = dict["Duration"] as? Int32 {
            self.duration = value
        }
        if let value = dict["GrafanaInstanceId"] as? String {
            self.grafanaInstanceId = value
        }
        if let value = dict["PaymentType"] as? String {
            self.paymentType = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceGroupId"] as? String {
            self.resourceGroupId = value
        }
        if let value = dict["SecurityGroupId"] as? String {
            self.securityGroupId = value
        }
        if let value = dict["SubClustersJson"] as? String {
            self.subClustersJson = value
        }
        if let value = dict["Tags"] as? [Any?] {
            var tmp : [CreatePrometheusInstanceRequest.Tags] = []
            for v in value {
                if v != nil {
                    var model = CreatePrometheusInstanceRequest.Tags()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tags = tmp
        }
        if let value = dict["VSwitchId"] as? String {
            self.vSwitchId = value
        }
        if let value = dict["VpcId"] as? String {
            self.vpcId = value
        }
    }
}

public class CreatePrometheusInstanceResponseBody : Tea.TeaModel {
    public var code: Int32?

    public var data: String?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreatePrometheusInstanceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreatePrometheusInstanceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreatePrometheusInstanceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreatePrometheusMonitoringRequest : Tea.TeaModel {
    public var clusterId: String?

    public var configYaml: String?

    public var regionId: String?

    public var status: String?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.configYaml != nil {
            map["ConfigYaml"] = self.configYaml!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClusterId"] as? String {
            self.clusterId = value
        }
        if let value = dict["ConfigYaml"] as? String {
            self.configYaml = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
    }
}

public class CreatePrometheusMonitoringResponseBody : Tea.TeaModel {
    public var code: Int32?

    public var data: String?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreatePrometheusMonitoringResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreatePrometheusMonitoringResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreatePrometheusMonitoringResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateRetcodeAppRequest : Tea.TeaModel {
    public class Tags : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var regionId: String?

    public var resourceGroupId: String?

    public var retcodeAppName: String?

    public var retcodeAppType: String?

    public var tags: [CreateRetcodeAppRequest.Tags]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceGroupId != nil {
            map["ResourceGroupId"] = self.resourceGroupId!
        }
        if self.retcodeAppName != nil {
            map["RetcodeAppName"] = self.retcodeAppName!
        }
        if self.retcodeAppType != nil {
            map["RetcodeAppType"] = self.retcodeAppType!
        }
        if self.tags != nil {
            var tmp : [Any] = []
            for k in self.tags! {
                tmp.append(k.toMap())
            }
            map["Tags"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceGroupId"] as? String {
            self.resourceGroupId = value
        }
        if let value = dict["RetcodeAppName"] as? String {
            self.retcodeAppName = value
        }
        if let value = dict["RetcodeAppType"] as? String {
            self.retcodeAppType = value
        }
        if let value = dict["Tags"] as? [Any?] {
            var tmp : [CreateRetcodeAppRequest.Tags] = []
            for v in value {
                if v != nil {
                    var model = CreateRetcodeAppRequest.Tags()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tags = tmp
        }
    }
}

public class CreateRetcodeAppResponseBody : Tea.TeaModel {
    public class RetcodeAppDataBean : Tea.TeaModel {
        public class Tags : Tea.TeaModel {
            public class Tags : Tea.TeaModel {
                public var key: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.key != nil {
                        map["Key"] = self.key!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Key"] as? String {
                        self.key = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public var tags: [CreateRetcodeAppResponseBody.RetcodeAppDataBean.Tags.Tags]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.tags != nil {
                    var tmp : [Any] = []
                    for k in self.tags! {
                        tmp.append(k.toMap())
                    }
                    map["Tags"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Tags"] as? [Any?] {
                    var tmp : [CreateRetcodeAppResponseBody.RetcodeAppDataBean.Tags.Tags] = []
                    for v in value {
                        if v != nil {
                            var model = CreateRetcodeAppResponseBody.RetcodeAppDataBean.Tags.Tags()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.tags = tmp
                }
            }
        }
        public var appId: Int64?

        public var pid: String?

        public var resourceGroupId: String?

        public var tags: CreateRetcodeAppResponseBody.RetcodeAppDataBean.Tags?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.tags?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.appId != nil {
                map["AppId"] = self.appId!
            }
            if self.pid != nil {
                map["Pid"] = self.pid!
            }
            if self.resourceGroupId != nil {
                map["ResourceGroupId"] = self.resourceGroupId!
            }
            if self.tags != nil {
                map["Tags"] = self.tags?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AppId"] as? Int64 {
                self.appId = value
            }
            if let value = dict["Pid"] as? String {
                self.pid = value
            }
            if let value = dict["ResourceGroupId"] as? String {
                self.resourceGroupId = value
            }
            if let value = dict["Tags"] as? [String: Any?] {
                var model = CreateRetcodeAppResponseBody.RetcodeAppDataBean.Tags()
                model.fromMap(value)
                self.tags = model
            }
        }
    }
    public var code: Int32?

    public var data: String?

    public var message: String?

    public var requestId: String?

    public var retcodeAppDataBean: CreateRetcodeAppResponseBody.RetcodeAppDataBean?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.retcodeAppDataBean?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.retcodeAppDataBean != nil {
            map["RetcodeAppDataBean"] = self.retcodeAppDataBean?.toMap()
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["RetcodeAppDataBean"] as? [String: Any?] {
            var model = CreateRetcodeAppResponseBody.RetcodeAppDataBean()
            model.fromMap(value)
            self.retcodeAppDataBean = model
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class CreateRetcodeAppResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateRetcodeAppResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateRetcodeAppResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateRumAppRequest : Tea.TeaModel {
    public class Tag : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var appGroup: String?

    public var appName: String?

    public var description_: String?

    public var language: String?

    public var nickName: String?

    public var packageName: String?

    public var realRegionId: String?

    public var regionId: String?

    public var resourceGroupId: String?

    public var siteType: String?

    public var source: String?

    public var tag: [CreateRumAppRequest.Tag]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appGroup != nil {
            map["AppGroup"] = self.appGroup!
        }
        if self.appName != nil {
            map["AppName"] = self.appName!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.language != nil {
            map["Language"] = self.language!
        }
        if self.nickName != nil {
            map["NickName"] = self.nickName!
        }
        if self.packageName != nil {
            map["PackageName"] = self.packageName!
        }
        if self.realRegionId != nil {
            map["RealRegionId"] = self.realRegionId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceGroupId != nil {
            map["ResourceGroupId"] = self.resourceGroupId!
        }
        if self.siteType != nil {
            map["SiteType"] = self.siteType!
        }
        if self.source != nil {
            map["Source"] = self.source!
        }
        if self.tag != nil {
            var tmp : [Any] = []
            for k in self.tag! {
                tmp.append(k.toMap())
            }
            map["Tag"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppGroup"] as? String {
            self.appGroup = value
        }
        if let value = dict["AppName"] as? String {
            self.appName = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["Language"] as? String {
            self.language = value
        }
        if let value = dict["NickName"] as? String {
            self.nickName = value
        }
        if let value = dict["PackageName"] as? String {
            self.packageName = value
        }
        if let value = dict["RealRegionId"] as? String {
            self.realRegionId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceGroupId"] as? String {
            self.resourceGroupId = value
        }
        if let value = dict["SiteType"] as? String {
            self.siteType = value
        }
        if let value = dict["Source"] as? String {
            self.source = value
        }
        if let value = dict["Tag"] as? [Any?] {
            var tmp : [CreateRumAppRequest.Tag] = []
            for v in value {
                if v != nil {
                    var model = CreateRumAppRequest.Tag()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tag = tmp
        }
    }
}

public class CreateRumAppShrinkRequest : Tea.TeaModel {
    public var appGroup: String?

    public var appName: String?

    public var description_: String?

    public var language: String?

    public var nickName: String?

    public var packageName: String?

    public var realRegionId: String?

    public var regionId: String?

    public var resourceGroupId: String?

    public var siteType: String?

    public var source: String?

    public var tagShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appGroup != nil {
            map["AppGroup"] = self.appGroup!
        }
        if self.appName != nil {
            map["AppName"] = self.appName!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.language != nil {
            map["Language"] = self.language!
        }
        if self.nickName != nil {
            map["NickName"] = self.nickName!
        }
        if self.packageName != nil {
            map["PackageName"] = self.packageName!
        }
        if self.realRegionId != nil {
            map["RealRegionId"] = self.realRegionId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceGroupId != nil {
            map["ResourceGroupId"] = self.resourceGroupId!
        }
        if self.siteType != nil {
            map["SiteType"] = self.siteType!
        }
        if self.source != nil {
            map["Source"] = self.source!
        }
        if self.tagShrink != nil {
            map["Tag"] = self.tagShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppGroup"] as? String {
            self.appGroup = value
        }
        if let value = dict["AppName"] as? String {
            self.appName = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["Language"] as? String {
            self.language = value
        }
        if let value = dict["NickName"] as? String {
            self.nickName = value
        }
        if let value = dict["PackageName"] as? String {
            self.packageName = value
        }
        if let value = dict["RealRegionId"] as? String {
            self.realRegionId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceGroupId"] as? String {
            self.resourceGroupId = value
        }
        if let value = dict["SiteType"] as? String {
            self.siteType = value
        }
        if let value = dict["Source"] as? String {
            self.source = value
        }
        if let value = dict["Tag"] as? String {
            self.tagShrink = value
        }
    }
}

public class CreateRumAppResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var cdnDomain: String?

        public var endpoint: String?

        public var pid: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.cdnDomain != nil {
                map["CdnDomain"] = self.cdnDomain!
            }
            if self.endpoint != nil {
                map["Endpoint"] = self.endpoint!
            }
            if self.pid != nil {
                map["Pid"] = self.pid!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CdnDomain"] as? String {
                self.cdnDomain = value
            }
            if let value = dict["Endpoint"] as? String {
                self.endpoint = value
            }
            if let value = dict["Pid"] as? String {
                self.pid = value
            }
        }
    }
    public var code: Int32?

    public var data: CreateRumAppResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var resourceGroupId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resourceGroupId != nil {
            map["ResourceGroupId"] = self.resourceGroupId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = CreateRumAppResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["ResourceGroupId"] as? String {
            self.resourceGroupId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class CreateRumAppResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateRumAppResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateRumAppResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateRumUploadFileUrlRequest : Tea.TeaModel {
    public var appName: String?

    public var contentType: String?

    public var fileName: String?

    public var pid: String?

    public var regionId: String?

    public var serviceId: String?

    public var sourcemapType: String?

    public var uuid: String?

    public var versionId: String?

    public var workspace: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appName != nil {
            map["AppName"] = self.appName!
        }
        if self.contentType != nil {
            map["ContentType"] = self.contentType!
        }
        if self.fileName != nil {
            map["FileName"] = self.fileName!
        }
        if self.pid != nil {
            map["Pid"] = self.pid!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.serviceId != nil {
            map["ServiceId"] = self.serviceId!
        }
        if self.sourcemapType != nil {
            map["SourcemapType"] = self.sourcemapType!
        }
        if self.uuid != nil {
            map["Uuid"] = self.uuid!
        }
        if self.versionId != nil {
            map["VersionId"] = self.versionId!
        }
        if self.workspace != nil {
            map["Workspace"] = self.workspace!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppName"] as? String {
            self.appName = value
        }
        if let value = dict["ContentType"] as? String {
            self.contentType = value
        }
        if let value = dict["FileName"] as? String {
            self.fileName = value
        }
        if let value = dict["Pid"] as? String {
            self.pid = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ServiceId"] as? String {
            self.serviceId = value
        }
        if let value = dict["SourcemapType"] as? String {
            self.sourcemapType = value
        }
        if let value = dict["Uuid"] as? String {
            self.uuid = value
        }
        if let value = dict["VersionId"] as? String {
            self.versionId = value
        }
        if let value = dict["Workspace"] as? String {
            self.workspace = value
        }
    }
}

public class CreateRumUploadFileUrlResponseBody : Tea.TeaModel {
    public var code: Int32?

    public var data: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class CreateRumUploadFileUrlResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateRumUploadFileUrlResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateRumUploadFileUrlResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateSyntheticTaskRequest : Tea.TeaModel {
    public class CommonParam : Tea.TeaModel {
        public class AlertList : Tea.TeaModel {
            public var isCritical: Int64?

            public var name: String?

            public var symbols: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.isCritical != nil {
                    map["IsCritical"] = self.isCritical!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.symbols != nil {
                    map["Symbols"] = self.symbols!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["IsCritical"] as? Int64 {
                    self.isCritical = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["Symbols"] as? Int64 {
                    self.symbols = value
                }
            }
        }
        public var alarmFlag: String?

        public var alertList: [CreateSyntheticTaskRequest.CommonParam.AlertList]?

        public var alertNotifierId: String?

        public var alertPolicyId: String?

        public var monitorSamples: Int64?

        public var startExecutionTime: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.alarmFlag != nil {
                map["AlarmFlag"] = self.alarmFlag!
            }
            if self.alertList != nil {
                var tmp : [Any] = []
                for k in self.alertList! {
                    tmp.append(k.toMap())
                }
                map["AlertList"] = tmp
            }
            if self.alertNotifierId != nil {
                map["AlertNotifierId"] = self.alertNotifierId!
            }
            if self.alertPolicyId != nil {
                map["AlertPolicyId"] = self.alertPolicyId!
            }
            if self.monitorSamples != nil {
                map["MonitorSamples"] = self.monitorSamples!
            }
            if self.startExecutionTime != nil {
                map["StartExecutionTime"] = self.startExecutionTime!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AlarmFlag"] as? String {
                self.alarmFlag = value
            }
            if let value = dict["AlertList"] as? [Any?] {
                var tmp : [CreateSyntheticTaskRequest.CommonParam.AlertList] = []
                for v in value {
                    if v != nil {
                        var model = CreateSyntheticTaskRequest.CommonParam.AlertList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.alertList = tmp
            }
            if let value = dict["AlertNotifierId"] as? String {
                self.alertNotifierId = value
            }
            if let value = dict["AlertPolicyId"] as? String {
                self.alertPolicyId = value
            }
            if let value = dict["MonitorSamples"] as? Int64 {
                self.monitorSamples = value
            }
            if let value = dict["StartExecutionTime"] as? Int64 {
                self.startExecutionTime = value
            }
        }
    }
    public class Download : Tea.TeaModel {
        public var connectionTimeout: Double?

        public var downloadCustomHeaderContent: String?

        public var downloadCustomHost: Int64?

        public var downloadCustomHostIp: String?

        public var downloadIgnoreCertificateError: String?

        public var downloadKernel: Int64?

        public var downloadRedirection: Int64?

        public var downloadTransmissionSize: Int64?

        public var monitorTimeout: Int64?

        public var quickProtocol: String?

        public var validateKeywords: String?

        public var verifyWay: Int64?

        public var whiteList: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.connectionTimeout != nil {
                map["ConnectionTimeout"] = self.connectionTimeout!
            }
            if self.downloadCustomHeaderContent != nil {
                map["DownloadCustomHeaderContent"] = self.downloadCustomHeaderContent!
            }
            if self.downloadCustomHost != nil {
                map["DownloadCustomHost"] = self.downloadCustomHost!
            }
            if self.downloadCustomHostIp != nil {
                map["DownloadCustomHostIp"] = self.downloadCustomHostIp!
            }
            if self.downloadIgnoreCertificateError != nil {
                map["DownloadIgnoreCertificateError"] = self.downloadIgnoreCertificateError!
            }
            if self.downloadKernel != nil {
                map["DownloadKernel"] = self.downloadKernel!
            }
            if self.downloadRedirection != nil {
                map["DownloadRedirection"] = self.downloadRedirection!
            }
            if self.downloadTransmissionSize != nil {
                map["DownloadTransmissionSize"] = self.downloadTransmissionSize!
            }
            if self.monitorTimeout != nil {
                map["MonitorTimeout"] = self.monitorTimeout!
            }
            if self.quickProtocol != nil {
                map["QuickProtocol"] = self.quickProtocol!
            }
            if self.validateKeywords != nil {
                map["ValidateKeywords"] = self.validateKeywords!
            }
            if self.verifyWay != nil {
                map["VerifyWay"] = self.verifyWay!
            }
            if self.whiteList != nil {
                map["WhiteList"] = self.whiteList!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ConnectionTimeout"] as? Double {
                self.connectionTimeout = value
            }
            if let value = dict["DownloadCustomHeaderContent"] as? String {
                self.downloadCustomHeaderContent = value
            }
            if let value = dict["DownloadCustomHost"] as? Int64 {
                self.downloadCustomHost = value
            }
            if let value = dict["DownloadCustomHostIp"] as? String {
                self.downloadCustomHostIp = value
            }
            if let value = dict["DownloadIgnoreCertificateError"] as? String {
                self.downloadIgnoreCertificateError = value
            }
            if let value = dict["DownloadKernel"] as? Int64 {
                self.downloadKernel = value
            }
            if let value = dict["DownloadRedirection"] as? Int64 {
                self.downloadRedirection = value
            }
            if let value = dict["DownloadTransmissionSize"] as? Int64 {
                self.downloadTransmissionSize = value
            }
            if let value = dict["MonitorTimeout"] as? Int64 {
                self.monitorTimeout = value
            }
            if let value = dict["QuickProtocol"] as? String {
                self.quickProtocol = value
            }
            if let value = dict["ValidateKeywords"] as? String {
                self.validateKeywords = value
            }
            if let value = dict["VerifyWay"] as? Int64 {
                self.verifyWay = value
            }
            if let value = dict["WhiteList"] as? String {
                self.whiteList = value
            }
        }
    }
    public class ExtendInterval : Tea.TeaModel {
        public var days: [Int64]?

        public var endHour: Int64?

        public var endMinute: Int64?

        public var endTime: String?

        public var startHour: Int64?

        public var startMinute: Int64?

        public var startTime: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.days != nil {
                map["Days"] = self.days!
            }
            if self.endHour != nil {
                map["EndHour"] = self.endHour!
            }
            if self.endMinute != nil {
                map["EndMinute"] = self.endMinute!
            }
            if self.endTime != nil {
                map["EndTime"] = self.endTime!
            }
            if self.startHour != nil {
                map["StartHour"] = self.startHour!
            }
            if self.startMinute != nil {
                map["StartMinute"] = self.startMinute!
            }
            if self.startTime != nil {
                map["StartTime"] = self.startTime!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Days"] as? [Int64] {
                self.days = value
            }
            if let value = dict["EndHour"] as? Int64 {
                self.endHour = value
            }
            if let value = dict["EndMinute"] as? Int64 {
                self.endMinute = value
            }
            if let value = dict["EndTime"] as? String {
                self.endTime = value
            }
            if let value = dict["StartHour"] as? Int64 {
                self.startHour = value
            }
            if let value = dict["StartMinute"] as? Int64 {
                self.startMinute = value
            }
            if let value = dict["StartTime"] as? String {
                self.startTime = value
            }
        }
    }
    public class MonitorList : Tea.TeaModel {
        public var cityCode: Int64?

        public var monitorType: Int64?

        public var netServiceId: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.cityCode != nil {
                map["CityCode"] = self.cityCode!
            }
            if self.monitorType != nil {
                map["MonitorType"] = self.monitorType!
            }
            if self.netServiceId != nil {
                map["NetServiceId"] = self.netServiceId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CityCode"] as? Int64 {
                self.cityCode = value
            }
            if let value = dict["MonitorType"] as? Int64 {
                self.monitorType = value
            }
            if let value = dict["NetServiceId"] as? Int64 {
                self.netServiceId = value
            }
        }
    }
    public class Navigation : Tea.TeaModel {
        public var DNSHijackWhiteList: String?

        public var elementBlacklist: String?

        public var executeActiveX: Int64?

        public var executeApplication: Int64?

        public var executeScript: Int64?

        public var filterInvalidIP: Int64?

        public var flowHijackJumpTimes: Int64?

        public var flowHijackLogo: String?

        public var monitorTimeout: String?

        public var navAutomaticScrolling: String?

        public var navCustomHeader: String?

        public var navCustomHeaderContent: String?

        public var navCustomHost: Int64?

        public var navCustomHostIp: String?

        public var navDisableCache: Int64?

        public var navDisableCompression: String?

        public var navIgnoreCertificateError: Int64?

        public var navRedirection: Int64?

        public var navReturnElement: Int64?

        public var pageTamper: String?

        public var processName: String?

        public var QUICDomain: String?

        public var QUICVersion: Int64?

        public var requestHeader: Int64?

        public var responseHeader: Int64?

        public var slowElementThreshold: Double?

        public var verifyStringBlacklist: String?

        public var verifyStringWhiteList: String?

        public var waitCompletionTime: Double?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.DNSHijackWhiteList != nil {
                map["DNSHijackWhiteList"] = self.DNSHijackWhiteList!
            }
            if self.elementBlacklist != nil {
                map["ElementBlacklist"] = self.elementBlacklist!
            }
            if self.executeActiveX != nil {
                map["ExecuteActiveX"] = self.executeActiveX!
            }
            if self.executeApplication != nil {
                map["ExecuteApplication"] = self.executeApplication!
            }
            if self.executeScript != nil {
                map["ExecuteScript"] = self.executeScript!
            }
            if self.filterInvalidIP != nil {
                map["FilterInvalidIP"] = self.filterInvalidIP!
            }
            if self.flowHijackJumpTimes != nil {
                map["FlowHijackJumpTimes"] = self.flowHijackJumpTimes!
            }
            if self.flowHijackLogo != nil {
                map["FlowHijackLogo"] = self.flowHijackLogo!
            }
            if self.monitorTimeout != nil {
                map["MonitorTimeout"] = self.monitorTimeout!
            }
            if self.navAutomaticScrolling != nil {
                map["NavAutomaticScrolling"] = self.navAutomaticScrolling!
            }
            if self.navCustomHeader != nil {
                map["NavCustomHeader"] = self.navCustomHeader!
            }
            if self.navCustomHeaderContent != nil {
                map["NavCustomHeaderContent"] = self.navCustomHeaderContent!
            }
            if self.navCustomHost != nil {
                map["NavCustomHost"] = self.navCustomHost!
            }
            if self.navCustomHostIp != nil {
                map["NavCustomHostIp"] = self.navCustomHostIp!
            }
            if self.navDisableCache != nil {
                map["NavDisableCache"] = self.navDisableCache!
            }
            if self.navDisableCompression != nil {
                map["NavDisableCompression"] = self.navDisableCompression!
            }
            if self.navIgnoreCertificateError != nil {
                map["NavIgnoreCertificateError"] = self.navIgnoreCertificateError!
            }
            if self.navRedirection != nil {
                map["NavRedirection"] = self.navRedirection!
            }
            if self.navReturnElement != nil {
                map["NavReturnElement"] = self.navReturnElement!
            }
            if self.pageTamper != nil {
                map["PageTamper"] = self.pageTamper!
            }
            if self.processName != nil {
                map["ProcessName"] = self.processName!
            }
            if self.QUICDomain != nil {
                map["QUICDomain"] = self.QUICDomain!
            }
            if self.QUICVersion != nil {
                map["QUICVersion"] = self.QUICVersion!
            }
            if self.requestHeader != nil {
                map["RequestHeader"] = self.requestHeader!
            }
            if self.responseHeader != nil {
                map["ResponseHeader"] = self.responseHeader!
            }
            if self.slowElementThreshold != nil {
                map["SlowElementThreshold"] = self.slowElementThreshold!
            }
            if self.verifyStringBlacklist != nil {
                map["VerifyStringBlacklist"] = self.verifyStringBlacklist!
            }
            if self.verifyStringWhiteList != nil {
                map["VerifyStringWhiteList"] = self.verifyStringWhiteList!
            }
            if self.waitCompletionTime != nil {
                map["WaitCompletionTime"] = self.waitCompletionTime!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DNSHijackWhiteList"] as? String {
                self.DNSHijackWhiteList = value
            }
            if let value = dict["ElementBlacklist"] as? String {
                self.elementBlacklist = value
            }
            if let value = dict["ExecuteActiveX"] as? Int64 {
                self.executeActiveX = value
            }
            if let value = dict["ExecuteApplication"] as? Int64 {
                self.executeApplication = value
            }
            if let value = dict["ExecuteScript"] as? Int64 {
                self.executeScript = value
            }
            if let value = dict["FilterInvalidIP"] as? Int64 {
                self.filterInvalidIP = value
            }
            if let value = dict["FlowHijackJumpTimes"] as? Int64 {
                self.flowHijackJumpTimes = value
            }
            if let value = dict["FlowHijackLogo"] as? String {
                self.flowHijackLogo = value
            }
            if let value = dict["MonitorTimeout"] as? String {
                self.monitorTimeout = value
            }
            if let value = dict["NavAutomaticScrolling"] as? String {
                self.navAutomaticScrolling = value
            }
            if let value = dict["NavCustomHeader"] as? String {
                self.navCustomHeader = value
            }
            if let value = dict["NavCustomHeaderContent"] as? String {
                self.navCustomHeaderContent = value
            }
            if let value = dict["NavCustomHost"] as? Int64 {
                self.navCustomHost = value
            }
            if let value = dict["NavCustomHostIp"] as? String {
                self.navCustomHostIp = value
            }
            if let value = dict["NavDisableCache"] as? Int64 {
                self.navDisableCache = value
            }
            if let value = dict["NavDisableCompression"] as? String {
                self.navDisableCompression = value
            }
            if let value = dict["NavIgnoreCertificateError"] as? Int64 {
                self.navIgnoreCertificateError = value
            }
            if let value = dict["NavRedirection"] as? Int64 {
                self.navRedirection = value
            }
            if let value = dict["NavReturnElement"] as? Int64 {
                self.navReturnElement = value
            }
            if let value = dict["PageTamper"] as? String {
                self.pageTamper = value
            }
            if let value = dict["ProcessName"] as? String {
                self.processName = value
            }
            if let value = dict["QUICDomain"] as? String {
                self.QUICDomain = value
            }
            if let value = dict["QUICVersion"] as? Int64 {
                self.QUICVersion = value
            }
            if let value = dict["RequestHeader"] as? Int64 {
                self.requestHeader = value
            }
            if let value = dict["ResponseHeader"] as? Int64 {
                self.responseHeader = value
            }
            if let value = dict["SlowElementThreshold"] as? Double {
                self.slowElementThreshold = value
            }
            if let value = dict["VerifyStringBlacklist"] as? String {
                self.verifyStringBlacklist = value
            }
            if let value = dict["VerifyStringWhiteList"] as? String {
                self.verifyStringWhiteList = value
            }
            if let value = dict["WaitCompletionTime"] as? Double {
                self.waitCompletionTime = value
            }
        }
    }
    public class Net : Tea.TeaModel {
        public var netDNSNs: String?

        public var netDNSQueryMethod: Int64?

        public var netDNSServer: Int64?

        public var netDNSSwitch: Int64?

        public var netDNSTimeout: Int64?

        public var netDigSwitch: Int64?

        public var netICMPActive: Int64?

        public var netICMPDataCut: Int64?

        public var netICMPInterval: Int64?

        public var netICMPNum: Int64?

        public var netICMPSize: Int64?

        public var netICMPSwitch: Int64?

        public var netICMPTimeout: Int64?

        public var netTraceRouteNum: Int64?

        public var netTraceRouteSwitch: Int64?

        public var netTraceRouteTimeout: Int64?

        public var whiteList: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.netDNSNs != nil {
                map["NetDNSNs"] = self.netDNSNs!
            }
            if self.netDNSQueryMethod != nil {
                map["NetDNSQueryMethod"] = self.netDNSQueryMethod!
            }
            if self.netDNSServer != nil {
                map["NetDNSServer"] = self.netDNSServer!
            }
            if self.netDNSSwitch != nil {
                map["NetDNSSwitch"] = self.netDNSSwitch!
            }
            if self.netDNSTimeout != nil {
                map["NetDNSTimeout"] = self.netDNSTimeout!
            }
            if self.netDigSwitch != nil {
                map["NetDigSwitch"] = self.netDigSwitch!
            }
            if self.netICMPActive != nil {
                map["NetICMPActive"] = self.netICMPActive!
            }
            if self.netICMPDataCut != nil {
                map["NetICMPDataCut"] = self.netICMPDataCut!
            }
            if self.netICMPInterval != nil {
                map["NetICMPInterval"] = self.netICMPInterval!
            }
            if self.netICMPNum != nil {
                map["NetICMPNum"] = self.netICMPNum!
            }
            if self.netICMPSize != nil {
                map["NetICMPSize"] = self.netICMPSize!
            }
            if self.netICMPSwitch != nil {
                map["NetICMPSwitch"] = self.netICMPSwitch!
            }
            if self.netICMPTimeout != nil {
                map["NetICMPTimeout"] = self.netICMPTimeout!
            }
            if self.netTraceRouteNum != nil {
                map["NetTraceRouteNum"] = self.netTraceRouteNum!
            }
            if self.netTraceRouteSwitch != nil {
                map["NetTraceRouteSwitch"] = self.netTraceRouteSwitch!
            }
            if self.netTraceRouteTimeout != nil {
                map["NetTraceRouteTimeout"] = self.netTraceRouteTimeout!
            }
            if self.whiteList != nil {
                map["WhiteList"] = self.whiteList!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["NetDNSNs"] as? String {
                self.netDNSNs = value
            }
            if let value = dict["NetDNSQueryMethod"] as? Int64 {
                self.netDNSQueryMethod = value
            }
            if let value = dict["NetDNSServer"] as? Int64 {
                self.netDNSServer = value
            }
            if let value = dict["NetDNSSwitch"] as? Int64 {
                self.netDNSSwitch = value
            }
            if let value = dict["NetDNSTimeout"] as? Int64 {
                self.netDNSTimeout = value
            }
            if let value = dict["NetDigSwitch"] as? Int64 {
                self.netDigSwitch = value
            }
            if let value = dict["NetICMPActive"] as? Int64 {
                self.netICMPActive = value
            }
            if let value = dict["NetICMPDataCut"] as? Int64 {
                self.netICMPDataCut = value
            }
            if let value = dict["NetICMPInterval"] as? Int64 {
                self.netICMPInterval = value
            }
            if let value = dict["NetICMPNum"] as? Int64 {
                self.netICMPNum = value
            }
            if let value = dict["NetICMPSize"] as? Int64 {
                self.netICMPSize = value
            }
            if let value = dict["NetICMPSwitch"] as? Int64 {
                self.netICMPSwitch = value
            }
            if let value = dict["NetICMPTimeout"] as? Int64 {
                self.netICMPTimeout = value
            }
            if let value = dict["NetTraceRouteNum"] as? Int64 {
                self.netTraceRouteNum = value
            }
            if let value = dict["NetTraceRouteSwitch"] as? Int64 {
                self.netTraceRouteSwitch = value
            }
            if let value = dict["NetTraceRouteTimeout"] as? Int64 {
                self.netTraceRouteTimeout = value
            }
            if let value = dict["WhiteList"] as? String {
                self.whiteList = value
            }
        }
    }
    public class Protocol_ : Tea.TeaModel {
        public class RequestContent : Tea.TeaModel {
            public class Body : Tea.TeaModel {
                public class FormData : Tea.TeaModel {
                    public var key: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.key != nil {
                            map["Key"] = self.key!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Key"] as? String {
                            self.key = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public class UrlEncoding : Tea.TeaModel {
                    public var key: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.key != nil {
                            map["Key"] = self.key!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Key"] as? String {
                            self.key = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public var formData: [CreateSyntheticTaskRequest.Protocol_.RequestContent.Body.FormData]?

                public var language: String?

                public var mode: String?

                public var raw: String?

                public var urlEncoding: [CreateSyntheticTaskRequest.Protocol_.RequestContent.Body.UrlEncoding]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.formData != nil {
                        var tmp : [Any] = []
                        for k in self.formData! {
                            tmp.append(k.toMap())
                        }
                        map["FormData"] = tmp
                    }
                    if self.language != nil {
                        map["Language"] = self.language!
                    }
                    if self.mode != nil {
                        map["Mode"] = self.mode!
                    }
                    if self.raw != nil {
                        map["Raw"] = self.raw!
                    }
                    if self.urlEncoding != nil {
                        var tmp : [Any] = []
                        for k in self.urlEncoding! {
                            tmp.append(k.toMap())
                        }
                        map["UrlEncoding"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["FormData"] as? [Any?] {
                        var tmp : [CreateSyntheticTaskRequest.Protocol_.RequestContent.Body.FormData] = []
                        for v in value {
                            if v != nil {
                                var model = CreateSyntheticTaskRequest.Protocol_.RequestContent.Body.FormData()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.formData = tmp
                    }
                    if let value = dict["Language"] as? String {
                        self.language = value
                    }
                    if let value = dict["Mode"] as? String {
                        self.mode = value
                    }
                    if let value = dict["Raw"] as? String {
                        self.raw = value
                    }
                    if let value = dict["UrlEncoding"] as? [Any?] {
                        var tmp : [CreateSyntheticTaskRequest.Protocol_.RequestContent.Body.UrlEncoding] = []
                        for v in value {
                            if v != nil {
                                var model = CreateSyntheticTaskRequest.Protocol_.RequestContent.Body.UrlEncoding()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.urlEncoding = tmp
                    }
                }
            }
            public class Header : Tea.TeaModel {
                public var key: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.key != nil {
                        map["Key"] = self.key!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Key"] as? String {
                        self.key = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public var body: CreateSyntheticTaskRequest.Protocol_.RequestContent.Body?

            public var header: [CreateSyntheticTaskRequest.Protocol_.RequestContent.Header]?

            public var method: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.body?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.body != nil {
                    map["Body"] = self.body?.toMap()
                }
                if self.header != nil {
                    var tmp : [Any] = []
                    for k in self.header! {
                        tmp.append(k.toMap())
                    }
                    map["Header"] = tmp
                }
                if self.method != nil {
                    map["Method"] = self.method!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Body"] as? [String: Any?] {
                    var model = CreateSyntheticTaskRequest.Protocol_.RequestContent.Body()
                    model.fromMap(value)
                    self.body = model
                }
                if let value = dict["Header"] as? [Any?] {
                    var tmp : [CreateSyntheticTaskRequest.Protocol_.RequestContent.Header] = []
                    for v in value {
                        if v != nil {
                            var model = CreateSyntheticTaskRequest.Protocol_.RequestContent.Header()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.header = tmp
                }
                if let value = dict["Method"] as? String {
                    self.method = value
                }
            }
        }
        public var characterEncoding: Int64?

        public var customHost: Int64?

        public var customHostIp: String?

        public var protocolConnectionTime: Int64?

        public var protocolMonitorTimeout: String?

        public var receivedDataSize: Int64?

        public var requestContent: CreateSyntheticTaskRequest.Protocol_.RequestContent?

        public var verifyContent: String?

        public var verifyWay: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.requestContent?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.characterEncoding != nil {
                map["CharacterEncoding"] = self.characterEncoding!
            }
            if self.customHost != nil {
                map["CustomHost"] = self.customHost!
            }
            if self.customHostIp != nil {
                map["CustomHostIp"] = self.customHostIp!
            }
            if self.protocolConnectionTime != nil {
                map["ProtocolConnectionTime"] = self.protocolConnectionTime!
            }
            if self.protocolMonitorTimeout != nil {
                map["ProtocolMonitorTimeout"] = self.protocolMonitorTimeout!
            }
            if self.receivedDataSize != nil {
                map["ReceivedDataSize"] = self.receivedDataSize!
            }
            if self.requestContent != nil {
                map["RequestContent"] = self.requestContent?.toMap()
            }
            if self.verifyContent != nil {
                map["VerifyContent"] = self.verifyContent!
            }
            if self.verifyWay != nil {
                map["VerifyWay"] = self.verifyWay!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CharacterEncoding"] as? Int64 {
                self.characterEncoding = value
            }
            if let value = dict["CustomHost"] as? Int64 {
                self.customHost = value
            }
            if let value = dict["CustomHostIp"] as? String {
                self.customHostIp = value
            }
            if let value = dict["ProtocolConnectionTime"] as? Int64 {
                self.protocolConnectionTime = value
            }
            if let value = dict["ProtocolMonitorTimeout"] as? String {
                self.protocolMonitorTimeout = value
            }
            if let value = dict["ReceivedDataSize"] as? Int64 {
                self.receivedDataSize = value
            }
            if let value = dict["RequestContent"] as? [String: Any?] {
                var model = CreateSyntheticTaskRequest.Protocol_.RequestContent()
                model.fromMap(value)
                self.requestContent = model
            }
            if let value = dict["VerifyContent"] as? String {
                self.verifyContent = value
            }
            if let value = dict["VerifyWay"] as? Int64 {
                self.verifyWay = value
            }
        }
    }
    public var commonParam: CreateSyntheticTaskRequest.CommonParam?

    public var download: CreateSyntheticTaskRequest.Download?

    public var extendInterval: CreateSyntheticTaskRequest.ExtendInterval?

    public var intervalTime: String?

    public var intervalType: String?

    public var ipType: Int64?

    public var monitorList: [CreateSyntheticTaskRequest.MonitorList]?

    public var navigation: CreateSyntheticTaskRequest.Navigation?

    public var net: CreateSyntheticTaskRequest.Net?

    public var protocol_: CreateSyntheticTaskRequest.Protocol_?

    public var regionId: String?

    public var taskName: String?

    public var taskType: Int64?

    public var updateTask: Bool?

    public var url: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.commonParam?.validate()
        try self.download?.validate()
        try self.extendInterval?.validate()
        try self.navigation?.validate()
        try self.net?.validate()
        try self.protocol_?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonParam != nil {
            map["CommonParam"] = self.commonParam?.toMap()
        }
        if self.download != nil {
            map["Download"] = self.download?.toMap()
        }
        if self.extendInterval != nil {
            map["ExtendInterval"] = self.extendInterval?.toMap()
        }
        if self.intervalTime != nil {
            map["IntervalTime"] = self.intervalTime!
        }
        if self.intervalType != nil {
            map["IntervalType"] = self.intervalType!
        }
        if self.ipType != nil {
            map["IpType"] = self.ipType!
        }
        if self.monitorList != nil {
            var tmp : [Any] = []
            for k in self.monitorList! {
                tmp.append(k.toMap())
            }
            map["MonitorList"] = tmp
        }
        if self.navigation != nil {
            map["Navigation"] = self.navigation?.toMap()
        }
        if self.net != nil {
            map["Net"] = self.net?.toMap()
        }
        if self.protocol_ != nil {
            map["Protocol"] = self.protocol_?.toMap()
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.taskName != nil {
            map["TaskName"] = self.taskName!
        }
        if self.taskType != nil {
            map["TaskType"] = self.taskType!
        }
        if self.updateTask != nil {
            map["UpdateTask"] = self.updateTask!
        }
        if self.url != nil {
            map["Url"] = self.url!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CommonParam"] as? [String: Any?] {
            var model = CreateSyntheticTaskRequest.CommonParam()
            model.fromMap(value)
            self.commonParam = model
        }
        if let value = dict["Download"] as? [String: Any?] {
            var model = CreateSyntheticTaskRequest.Download()
            model.fromMap(value)
            self.download = model
        }
        if let value = dict["ExtendInterval"] as? [String: Any?] {
            var model = CreateSyntheticTaskRequest.ExtendInterval()
            model.fromMap(value)
            self.extendInterval = model
        }
        if let value = dict["IntervalTime"] as? String {
            self.intervalTime = value
        }
        if let value = dict["IntervalType"] as? String {
            self.intervalType = value
        }
        if let value = dict["IpType"] as? Int64 {
            self.ipType = value
        }
        if let value = dict["MonitorList"] as? [Any?] {
            var tmp : [CreateSyntheticTaskRequest.MonitorList] = []
            for v in value {
                if v != nil {
                    var model = CreateSyntheticTaskRequest.MonitorList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.monitorList = tmp
        }
        if let value = dict["Navigation"] as? [String: Any?] {
            var model = CreateSyntheticTaskRequest.Navigation()
            model.fromMap(value)
            self.navigation = model
        }
        if let value = dict["Net"] as? [String: Any?] {
            var model = CreateSyntheticTaskRequest.Net()
            model.fromMap(value)
            self.net = model
        }
        if let value = dict["Protocol"] as? [String: Any?] {
            var model = CreateSyntheticTaskRequest.Protocol_()
            model.fromMap(value)
            self.protocol_ = model
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["TaskName"] as? String {
            self.taskName = value
        }
        if let value = dict["TaskType"] as? Int64 {
            self.taskType = value
        }
        if let value = dict["UpdateTask"] as? Bool {
            self.updateTask = value
        }
        if let value = dict["Url"] as? String {
            self.url = value
        }
    }
}

public class CreateSyntheticTaskShrinkRequest : Tea.TeaModel {
    public var commonParamShrink: String?

    public var downloadShrink: String?

    public var extendIntervalShrink: String?

    public var intervalTime: String?

    public var intervalType: String?

    public var ipType: Int64?

    public var monitorListShrink: String?

    public var navigationShrink: String?

    public var netShrink: String?

    public var protocolShrink: String?

    public var regionId: String?

    public var taskName: String?

    public var taskType: Int64?

    public var updateTask: Bool?

    public var url: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonParamShrink != nil {
            map["CommonParam"] = self.commonParamShrink!
        }
        if self.downloadShrink != nil {
            map["Download"] = self.downloadShrink!
        }
        if self.extendIntervalShrink != nil {
            map["ExtendInterval"] = self.extendIntervalShrink!
        }
        if self.intervalTime != nil {
            map["IntervalTime"] = self.intervalTime!
        }
        if self.intervalType != nil {
            map["IntervalType"] = self.intervalType!
        }
        if self.ipType != nil {
            map["IpType"] = self.ipType!
        }
        if self.monitorListShrink != nil {
            map["MonitorList"] = self.monitorListShrink!
        }
        if self.navigationShrink != nil {
            map["Navigation"] = self.navigationShrink!
        }
        if self.netShrink != nil {
            map["Net"] = self.netShrink!
        }
        if self.protocolShrink != nil {
            map["Protocol"] = self.protocolShrink!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.taskName != nil {
            map["TaskName"] = self.taskName!
        }
        if self.taskType != nil {
            map["TaskType"] = self.taskType!
        }
        if self.updateTask != nil {
            map["UpdateTask"] = self.updateTask!
        }
        if self.url != nil {
            map["Url"] = self.url!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CommonParam"] as? String {
            self.commonParamShrink = value
        }
        if let value = dict["Download"] as? String {
            self.downloadShrink = value
        }
        if let value = dict["ExtendInterval"] as? String {
            self.extendIntervalShrink = value
        }
        if let value = dict["IntervalTime"] as? String {
            self.intervalTime = value
        }
        if let value = dict["IntervalType"] as? String {
            self.intervalType = value
        }
        if let value = dict["IpType"] as? Int64 {
            self.ipType = value
        }
        if let value = dict["MonitorList"] as? String {
            self.monitorListShrink = value
        }
        if let value = dict["Navigation"] as? String {
            self.navigationShrink = value
        }
        if let value = dict["Net"] as? String {
            self.netShrink = value
        }
        if let value = dict["Protocol"] as? String {
            self.protocolShrink = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["TaskName"] as? String {
            self.taskName = value
        }
        if let value = dict["TaskType"] as? Int64 {
            self.taskType = value
        }
        if let value = dict["UpdateTask"] as? Bool {
            self.updateTask = value
        }
        if let value = dict["Url"] as? String {
            self.url = value
        }
    }
}

public class CreateSyntheticTaskResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var taskId: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["TaskId"] as? Int64 {
                self.taskId = value
            }
        }
    }
    public var code: String?

    public var data: CreateSyntheticTaskResponseBody.Data?

    public var msg: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.msg != nil {
            map["Msg"] = self.msg!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = CreateSyntheticTaskResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Msg"] as? String {
            self.msg = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateSyntheticTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateSyntheticTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateSyntheticTaskResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateTimingSyntheticTaskRequest : Tea.TeaModel {
    public class AvailableAssertions : Tea.TeaModel {
        public var expect: String?

        public var operator_: String?

        public var target: String?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.expect != nil {
                map["Expect"] = self.expect!
            }
            if self.operator_ != nil {
                map["Operator"] = self.operator_!
            }
            if self.target != nil {
                map["Target"] = self.target!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Expect"] as? String {
                self.expect = value
            }
            if let value = dict["Operator"] as? String {
                self.operator_ = value
            }
            if let value = dict["Target"] as? String {
                self.target = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
        }
    }
    public class CommonSetting : Tea.TeaModel {
        public class CustomHost : Tea.TeaModel {
            public class Hosts : Tea.TeaModel {
                public var domain: String?

                public var ipType: Int32?

                public var ips: [String]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.domain != nil {
                        map["Domain"] = self.domain!
                    }
                    if self.ipType != nil {
                        map["IpType"] = self.ipType!
                    }
                    if self.ips != nil {
                        map["Ips"] = self.ips!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Domain"] as? String {
                        self.domain = value
                    }
                    if let value = dict["IpType"] as? Int32 {
                        self.ipType = value
                    }
                    if let value = dict["Ips"] as? [String] {
                        self.ips = value
                    }
                }
            }
            public var hosts: [CreateTimingSyntheticTaskRequest.CommonSetting.CustomHost.Hosts]?

            public var selectType: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.hosts != nil {
                    var tmp : [Any] = []
                    for k in self.hosts! {
                        tmp.append(k.toMap())
                    }
                    map["Hosts"] = tmp
                }
                if self.selectType != nil {
                    map["SelectType"] = self.selectType!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Hosts"] as? [Any?] {
                    var tmp : [CreateTimingSyntheticTaskRequest.CommonSetting.CustomHost.Hosts] = []
                    for v in value {
                        if v != nil {
                            var model = CreateTimingSyntheticTaskRequest.CommonSetting.CustomHost.Hosts()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.hosts = tmp
                }
                if let value = dict["SelectType"] as? Int32 {
                    self.selectType = value
                }
            }
        }
        public class CustomPrometheusSetting : Tea.TeaModel {
            public var prometheusClusterId: String?

            public var prometheusClusterRegion: String?

            public var prometheusLabels: [String: String]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.prometheusClusterId != nil {
                    map["PrometheusClusterId"] = self.prometheusClusterId!
                }
                if self.prometheusClusterRegion != nil {
                    map["PrometheusClusterRegion"] = self.prometheusClusterRegion!
                }
                if self.prometheusLabels != nil {
                    map["PrometheusLabels"] = self.prometheusLabels!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["PrometheusClusterId"] as? String {
                    self.prometheusClusterId = value
                }
                if let value = dict["PrometheusClusterRegion"] as? String {
                    self.prometheusClusterRegion = value
                }
                if let value = dict["PrometheusLabels"] as? [String: String] {
                    self.prometheusLabels = value
                }
            }
        }
        public class CustomVPCSetting : Tea.TeaModel {
            public var regionId: String?

            public var secureGroupId: String?

            public var vSwitchId: String?

            public var vpcId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.regionId != nil {
                    map["RegionId"] = self.regionId!
                }
                if self.secureGroupId != nil {
                    map["SecureGroupId"] = self.secureGroupId!
                }
                if self.vSwitchId != nil {
                    map["VSwitchId"] = self.vSwitchId!
                }
                if self.vpcId != nil {
                    map["VpcId"] = self.vpcId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["RegionId"] as? String {
                    self.regionId = value
                }
                if let value = dict["SecureGroupId"] as? String {
                    self.secureGroupId = value
                }
                if let value = dict["VSwitchId"] as? String {
                    self.vSwitchId = value
                }
                if let value = dict["VpcId"] as? String {
                    self.vpcId = value
                }
            }
        }
        public var customHost: CreateTimingSyntheticTaskRequest.CommonSetting.CustomHost?

        public var customPrometheusSetting: CreateTimingSyntheticTaskRequest.CommonSetting.CustomPrometheusSetting?

        public var customVPCSetting: CreateTimingSyntheticTaskRequest.CommonSetting.CustomVPCSetting?

        public var ipType: Int32?

        public var isOpenTrace: Bool?

        public var monitorSamples: Int32?

        public var traceClientType: Int32?

        public var xtraceRegion: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.customHost?.validate()
            try self.customPrometheusSetting?.validate()
            try self.customVPCSetting?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.customHost != nil {
                map["CustomHost"] = self.customHost?.toMap()
            }
            if self.customPrometheusSetting != nil {
                map["CustomPrometheusSetting"] = self.customPrometheusSetting?.toMap()
            }
            if self.customVPCSetting != nil {
                map["CustomVPCSetting"] = self.customVPCSetting?.toMap()
            }
            if self.ipType != nil {
                map["IpType"] = self.ipType!
            }
            if self.isOpenTrace != nil {
                map["IsOpenTrace"] = self.isOpenTrace!
            }
            if self.monitorSamples != nil {
                map["MonitorSamples"] = self.monitorSamples!
            }
            if self.traceClientType != nil {
                map["TraceClientType"] = self.traceClientType!
            }
            if self.xtraceRegion != nil {
                map["XtraceRegion"] = self.xtraceRegion!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CustomHost"] as? [String: Any?] {
                var model = CreateTimingSyntheticTaskRequest.CommonSetting.CustomHost()
                model.fromMap(value)
                self.customHost = model
            }
            if let value = dict["CustomPrometheusSetting"] as? [String: Any?] {
                var model = CreateTimingSyntheticTaskRequest.CommonSetting.CustomPrometheusSetting()
                model.fromMap(value)
                self.customPrometheusSetting = model
            }
            if let value = dict["CustomVPCSetting"] as? [String: Any?] {
                var model = CreateTimingSyntheticTaskRequest.CommonSetting.CustomVPCSetting()
                model.fromMap(value)
                self.customVPCSetting = model
            }
            if let value = dict["IpType"] as? Int32 {
                self.ipType = value
            }
            if let value = dict["IsOpenTrace"] as? Bool {
                self.isOpenTrace = value
            }
            if let value = dict["MonitorSamples"] as? Int32 {
                self.monitorSamples = value
            }
            if let value = dict["TraceClientType"] as? Int32 {
                self.traceClientType = value
            }
            if let value = dict["XtraceRegion"] as? String {
                self.xtraceRegion = value
            }
        }
    }
    public class CustomPeriod : Tea.TeaModel {
        public var endHour: Int32?

        public var startHour: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.endHour != nil {
                map["EndHour"] = self.endHour!
            }
            if self.startHour != nil {
                map["StartHour"] = self.startHour!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["EndHour"] as? Int32 {
                self.endHour = value
            }
            if let value = dict["StartHour"] as? Int32 {
                self.startHour = value
            }
        }
    }
    public class MonitorConf : Tea.TeaModel {
        public class ApiHTTP : Tea.TeaModel {
            public class RequestBody : Tea.TeaModel {
                public var content: String?

                public var type: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.content != nil {
                        map["Content"] = self.content!
                    }
                    if self.type != nil {
                        map["Type"] = self.type!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Content"] as? String {
                        self.content = value
                    }
                    if let value = dict["Type"] as? String {
                        self.type = value
                    }
                }
            }
            public var checkCert: Bool?

            public var connectTimeout: Int64?

            public var method: String?

            public var protocolAlpnProtocol: Int32?

            public var requestBody: CreateTimingSyntheticTaskRequest.MonitorConf.ApiHTTP.RequestBody?

            public var requestHeaders: [String: String]?

            public var targetUrl: String?

            public var timeout: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.requestBody?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.checkCert != nil {
                    map["CheckCert"] = self.checkCert!
                }
                if self.connectTimeout != nil {
                    map["ConnectTimeout"] = self.connectTimeout!
                }
                if self.method != nil {
                    map["Method"] = self.method!
                }
                if self.protocolAlpnProtocol != nil {
                    map["ProtocolAlpnProtocol"] = self.protocolAlpnProtocol!
                }
                if self.requestBody != nil {
                    map["RequestBody"] = self.requestBody?.toMap()
                }
                if self.requestHeaders != nil {
                    map["RequestHeaders"] = self.requestHeaders!
                }
                if self.targetUrl != nil {
                    map["TargetUrl"] = self.targetUrl!
                }
                if self.timeout != nil {
                    map["Timeout"] = self.timeout!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CheckCert"] as? Bool {
                    self.checkCert = value
                }
                if let value = dict["ConnectTimeout"] as? Int64 {
                    self.connectTimeout = value
                }
                if let value = dict["Method"] as? String {
                    self.method = value
                }
                if let value = dict["ProtocolAlpnProtocol"] as? Int32 {
                    self.protocolAlpnProtocol = value
                }
                if let value = dict["RequestBody"] as? [String: Any?] {
                    var model = CreateTimingSyntheticTaskRequest.MonitorConf.ApiHTTP.RequestBody()
                    model.fromMap(value)
                    self.requestBody = model
                }
                if let value = dict["RequestHeaders"] as? [String: String] {
                    self.requestHeaders = value
                }
                if let value = dict["TargetUrl"] as? String {
                    self.targetUrl = value
                }
                if let value = dict["Timeout"] as? Int64 {
                    self.timeout = value
                }
            }
        }
        public class FileDownload : Tea.TeaModel {
            public var connectionTimeout: Int64?

            public var customHeaderContent: [String: String]?

            public var downloadKernel: Int32?

            public var ignoreCertificateAuthError: Int32?

            public var ignoreCertificateCanceledError: Int32?

            public var ignoreCertificateOutOfDateError: Int32?

            public var ignoreCertificateStatusError: Int32?

            public var ignoreCertificateUntrustworthyError: Int32?

            public var ignoreCertificateUsingError: Int32?

            public var ignoreInvalidHostError: Int32?

            public var monitorTimeout: Int64?

            public var quickProtocol: Int32?

            public var redirection: Int32?

            public var targetUrl: String?

            public var transmissionSize: Int64?

            public var validateKeywords: String?

            public var verifyWay: Int32?

            public var whiteList: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.connectionTimeout != nil {
                    map["ConnectionTimeout"] = self.connectionTimeout!
                }
                if self.customHeaderContent != nil {
                    map["CustomHeaderContent"] = self.customHeaderContent!
                }
                if self.downloadKernel != nil {
                    map["DownloadKernel"] = self.downloadKernel!
                }
                if self.ignoreCertificateAuthError != nil {
                    map["IgnoreCertificateAuthError"] = self.ignoreCertificateAuthError!
                }
                if self.ignoreCertificateCanceledError != nil {
                    map["IgnoreCertificateCanceledError"] = self.ignoreCertificateCanceledError!
                }
                if self.ignoreCertificateOutOfDateError != nil {
                    map["IgnoreCertificateOutOfDateError"] = self.ignoreCertificateOutOfDateError!
                }
                if self.ignoreCertificateStatusError != nil {
                    map["IgnoreCertificateStatusError"] = self.ignoreCertificateStatusError!
                }
                if self.ignoreCertificateUntrustworthyError != nil {
                    map["IgnoreCertificateUntrustworthyError"] = self.ignoreCertificateUntrustworthyError!
                }
                if self.ignoreCertificateUsingError != nil {
                    map["IgnoreCertificateUsingError"] = self.ignoreCertificateUsingError!
                }
                if self.ignoreInvalidHostError != nil {
                    map["IgnoreInvalidHostError"] = self.ignoreInvalidHostError!
                }
                if self.monitorTimeout != nil {
                    map["MonitorTimeout"] = self.monitorTimeout!
                }
                if self.quickProtocol != nil {
                    map["QuickProtocol"] = self.quickProtocol!
                }
                if self.redirection != nil {
                    map["Redirection"] = self.redirection!
                }
                if self.targetUrl != nil {
                    map["TargetUrl"] = self.targetUrl!
                }
                if self.transmissionSize != nil {
                    map["TransmissionSize"] = self.transmissionSize!
                }
                if self.validateKeywords != nil {
                    map["ValidateKeywords"] = self.validateKeywords!
                }
                if self.verifyWay != nil {
                    map["VerifyWay"] = self.verifyWay!
                }
                if self.whiteList != nil {
                    map["WhiteList"] = self.whiteList!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ConnectionTimeout"] as? Int64 {
                    self.connectionTimeout = value
                }
                if let value = dict["CustomHeaderContent"] as? [String: String] {
                    self.customHeaderContent = value
                }
                if let value = dict["DownloadKernel"] as? Int32 {
                    self.downloadKernel = value
                }
                if let value = dict["IgnoreCertificateAuthError"] as? Int32 {
                    self.ignoreCertificateAuthError = value
                }
                if let value = dict["IgnoreCertificateCanceledError"] as? Int32 {
                    self.ignoreCertificateCanceledError = value
                }
                if let value = dict["IgnoreCertificateOutOfDateError"] as? Int32 {
                    self.ignoreCertificateOutOfDateError = value
                }
                if let value = dict["IgnoreCertificateStatusError"] as? Int32 {
                    self.ignoreCertificateStatusError = value
                }
                if let value = dict["IgnoreCertificateUntrustworthyError"] as? Int32 {
                    self.ignoreCertificateUntrustworthyError = value
                }
                if let value = dict["IgnoreCertificateUsingError"] as? Int32 {
                    self.ignoreCertificateUsingError = value
                }
                if let value = dict["IgnoreInvalidHostError"] as? Int32 {
                    self.ignoreInvalidHostError = value
                }
                if let value = dict["MonitorTimeout"] as? Int64 {
                    self.monitorTimeout = value
                }
                if let value = dict["QuickProtocol"] as? Int32 {
                    self.quickProtocol = value
                }
                if let value = dict["Redirection"] as? Int32 {
                    self.redirection = value
                }
                if let value = dict["TargetUrl"] as? String {
                    self.targetUrl = value
                }
                if let value = dict["TransmissionSize"] as? Int64 {
                    self.transmissionSize = value
                }
                if let value = dict["ValidateKeywords"] as? String {
                    self.validateKeywords = value
                }
                if let value = dict["VerifyWay"] as? Int32 {
                    self.verifyWay = value
                }
                if let value = dict["WhiteList"] as? String {
                    self.whiteList = value
                }
            }
        }
        public class NetDNS : Tea.TeaModel {
            public var dnsServerIpType: Int32?

            public var nsServer: String?

            public var queryMethod: Int32?

            public var targetUrl: String?

            public var timeout: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.dnsServerIpType != nil {
                    map["DnsServerIpType"] = self.dnsServerIpType!
                }
                if self.nsServer != nil {
                    map["NsServer"] = self.nsServer!
                }
                if self.queryMethod != nil {
                    map["QueryMethod"] = self.queryMethod!
                }
                if self.targetUrl != nil {
                    map["TargetUrl"] = self.targetUrl!
                }
                if self.timeout != nil {
                    map["Timeout"] = self.timeout!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["DnsServerIpType"] as? Int32 {
                    self.dnsServerIpType = value
                }
                if let value = dict["NsServer"] as? String {
                    self.nsServer = value
                }
                if let value = dict["QueryMethod"] as? Int32 {
                    self.queryMethod = value
                }
                if let value = dict["TargetUrl"] as? String {
                    self.targetUrl = value
                }
                if let value = dict["Timeout"] as? Int64 {
                    self.timeout = value
                }
            }
        }
        public class NetICMP : Tea.TeaModel {
            public var interval: Int64?

            public var packageNum: Int32?

            public var packageSize: Int32?

            public var splitPackage: Bool?

            public var targetUrl: String?

            public var timeout: Int64?

            public var tracertEnable: Bool?

            public var tracertNumMax: Int32?

            public var tracertTimeout: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.interval != nil {
                    map["Interval"] = self.interval!
                }
                if self.packageNum != nil {
                    map["PackageNum"] = self.packageNum!
                }
                if self.packageSize != nil {
                    map["PackageSize"] = self.packageSize!
                }
                if self.splitPackage != nil {
                    map["SplitPackage"] = self.splitPackage!
                }
                if self.targetUrl != nil {
                    map["TargetUrl"] = self.targetUrl!
                }
                if self.timeout != nil {
                    map["Timeout"] = self.timeout!
                }
                if self.tracertEnable != nil {
                    map["TracertEnable"] = self.tracertEnable!
                }
                if self.tracertNumMax != nil {
                    map["TracertNumMax"] = self.tracertNumMax!
                }
                if self.tracertTimeout != nil {
                    map["TracertTimeout"] = self.tracertTimeout!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Interval"] as? Int64 {
                    self.interval = value
                }
                if let value = dict["PackageNum"] as? Int32 {
                    self.packageNum = value
                }
                if let value = dict["PackageSize"] as? Int32 {
                    self.packageSize = value
                }
                if let value = dict["SplitPackage"] as? Bool {
                    self.splitPackage = value
                }
                if let value = dict["TargetUrl"] as? String {
                    self.targetUrl = value
                }
                if let value = dict["Timeout"] as? Int64 {
                    self.timeout = value
                }
                if let value = dict["TracertEnable"] as? Bool {
                    self.tracertEnable = value
                }
                if let value = dict["TracertNumMax"] as? Int32 {
                    self.tracertNumMax = value
                }
                if let value = dict["TracertTimeout"] as? Int64 {
                    self.tracertTimeout = value
                }
            }
        }
        public class NetTCP : Tea.TeaModel {
            public var connectTimes: Int32?

            public var interval: Int64?

            public var targetUrl: String?

            public var timeout: Int64?

            public var tracertEnable: Bool?

            public var tracertNumMax: Int32?

            public var tracertTimeout: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.connectTimes != nil {
                    map["ConnectTimes"] = self.connectTimes!
                }
                if self.interval != nil {
                    map["Interval"] = self.interval!
                }
                if self.targetUrl != nil {
                    map["TargetUrl"] = self.targetUrl!
                }
                if self.timeout != nil {
                    map["Timeout"] = self.timeout!
                }
                if self.tracertEnable != nil {
                    map["TracertEnable"] = self.tracertEnable!
                }
                if self.tracertNumMax != nil {
                    map["TracertNumMax"] = self.tracertNumMax!
                }
                if self.tracertTimeout != nil {
                    map["TracertTimeout"] = self.tracertTimeout!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ConnectTimes"] as? Int32 {
                    self.connectTimes = value
                }
                if let value = dict["Interval"] as? Int64 {
                    self.interval = value
                }
                if let value = dict["TargetUrl"] as? String {
                    self.targetUrl = value
                }
                if let value = dict["Timeout"] as? Int64 {
                    self.timeout = value
                }
                if let value = dict["TracertEnable"] as? Bool {
                    self.tracertEnable = value
                }
                if let value = dict["TracertNumMax"] as? Int32 {
                    self.tracertNumMax = value
                }
                if let value = dict["TracertTimeout"] as? Int64 {
                    self.tracertTimeout = value
                }
            }
        }
        public class Stream : Tea.TeaModel {
            public var customHeaderContent: [String: String]?

            public var playerType: Int32?

            public var streamAddressType: Int32?

            public var streamMonitorTimeout: Int32?

            public var streamType: Int32?

            public var targetUrl: String?

            public var whiteList: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.customHeaderContent != nil {
                    map["CustomHeaderContent"] = self.customHeaderContent!
                }
                if self.playerType != nil {
                    map["PlayerType"] = self.playerType!
                }
                if self.streamAddressType != nil {
                    map["StreamAddressType"] = self.streamAddressType!
                }
                if self.streamMonitorTimeout != nil {
                    map["StreamMonitorTimeout"] = self.streamMonitorTimeout!
                }
                if self.streamType != nil {
                    map["StreamType"] = self.streamType!
                }
                if self.targetUrl != nil {
                    map["TargetUrl"] = self.targetUrl!
                }
                if self.whiteList != nil {
                    map["WhiteList"] = self.whiteList!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CustomHeaderContent"] as? [String: String] {
                    self.customHeaderContent = value
                }
                if let value = dict["PlayerType"] as? Int32 {
                    self.playerType = value
                }
                if let value = dict["StreamAddressType"] as? Int32 {
                    self.streamAddressType = value
                }
                if let value = dict["StreamMonitorTimeout"] as? Int32 {
                    self.streamMonitorTimeout = value
                }
                if let value = dict["StreamType"] as? Int32 {
                    self.streamType = value
                }
                if let value = dict["TargetUrl"] as? String {
                    self.targetUrl = value
                }
                if let value = dict["WhiteList"] as? String {
                    self.whiteList = value
                }
            }
        }
        public class Website : Tea.TeaModel {
            public var automaticScrolling: Int32?

            public var customHeader: Int32?

            public var customHeaderContent: [String: String]?

            public var DNSHijackWhitelist: String?

            public var disableCache: Int32?

            public var disableCompression: Int32?

            public var elementBlacklist: String?

            public var filterInvalidIP: Int32?

            public var flowHijackJumpTimes: Int32?

            public var flowHijackLogo: String?

            public var ignoreCertificateError: Int32?

            public var monitorTimeout: Int64?

            public var pageTamper: String?

            public var redirection: Int32?

            public var slowElementThreshold: Int64?

            public var targetUrl: String?

            public var verifyStringBlacklist: String?

            public var verifyStringWhitelist: String?

            public var waitCompletionTime: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.automaticScrolling != nil {
                    map["AutomaticScrolling"] = self.automaticScrolling!
                }
                if self.customHeader != nil {
                    map["CustomHeader"] = self.customHeader!
                }
                if self.customHeaderContent != nil {
                    map["CustomHeaderContent"] = self.customHeaderContent!
                }
                if self.DNSHijackWhitelist != nil {
                    map["DNSHijackWhitelist"] = self.DNSHijackWhitelist!
                }
                if self.disableCache != nil {
                    map["DisableCache"] = self.disableCache!
                }
                if self.disableCompression != nil {
                    map["DisableCompression"] = self.disableCompression!
                }
                if self.elementBlacklist != nil {
                    map["ElementBlacklist"] = self.elementBlacklist!
                }
                if self.filterInvalidIP != nil {
                    map["FilterInvalidIP"] = self.filterInvalidIP!
                }
                if self.flowHijackJumpTimes != nil {
                    map["FlowHijackJumpTimes"] = self.flowHijackJumpTimes!
                }
                if self.flowHijackLogo != nil {
                    map["FlowHijackLogo"] = self.flowHijackLogo!
                }
                if self.ignoreCertificateError != nil {
                    map["IgnoreCertificateError"] = self.ignoreCertificateError!
                }
                if self.monitorTimeout != nil {
                    map["MonitorTimeout"] = self.monitorTimeout!
                }
                if self.pageTamper != nil {
                    map["PageTamper"] = self.pageTamper!
                }
                if self.redirection != nil {
                    map["Redirection"] = self.redirection!
                }
                if self.slowElementThreshold != nil {
                    map["SlowElementThreshold"] = self.slowElementThreshold!
                }
                if self.targetUrl != nil {
                    map["TargetUrl"] = self.targetUrl!
                }
                if self.verifyStringBlacklist != nil {
                    map["VerifyStringBlacklist"] = self.verifyStringBlacklist!
                }
                if self.verifyStringWhitelist != nil {
                    map["VerifyStringWhitelist"] = self.verifyStringWhitelist!
                }
                if self.waitCompletionTime != nil {
                    map["WaitCompletionTime"] = self.waitCompletionTime!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AutomaticScrolling"] as? Int32 {
                    self.automaticScrolling = value
                }
                if let value = dict["CustomHeader"] as? Int32 {
                    self.customHeader = value
                }
                if let value = dict["CustomHeaderContent"] as? [String: String] {
                    self.customHeaderContent = value
                }
                if let value = dict["DNSHijackWhitelist"] as? String {
                    self.DNSHijackWhitelist = value
                }
                if let value = dict["DisableCache"] as? Int32 {
                    self.disableCache = value
                }
                if let value = dict["DisableCompression"] as? Int32 {
                    self.disableCompression = value
                }
                if let value = dict["ElementBlacklist"] as? String {
                    self.elementBlacklist = value
                }
                if let value = dict["FilterInvalidIP"] as? Int32 {
                    self.filterInvalidIP = value
                }
                if let value = dict["FlowHijackJumpTimes"] as? Int32 {
                    self.flowHijackJumpTimes = value
                }
                if let value = dict["FlowHijackLogo"] as? String {
                    self.flowHijackLogo = value
                }
                if let value = dict["IgnoreCertificateError"] as? Int32 {
                    self.ignoreCertificateError = value
                }
                if let value = dict["MonitorTimeout"] as? Int64 {
                    self.monitorTimeout = value
                }
                if let value = dict["PageTamper"] as? String {
                    self.pageTamper = value
                }
                if let value = dict["Redirection"] as? Int32 {
                    self.redirection = value
                }
                if let value = dict["SlowElementThreshold"] as? Int64 {
                    self.slowElementThreshold = value
                }
                if let value = dict["TargetUrl"] as? String {
                    self.targetUrl = value
                }
                if let value = dict["VerifyStringBlacklist"] as? String {
                    self.verifyStringBlacklist = value
                }
                if let value = dict["VerifyStringWhitelist"] as? String {
                    self.verifyStringWhitelist = value
                }
                if let value = dict["WaitCompletionTime"] as? Int64 {
                    self.waitCompletionTime = value
                }
            }
        }
        public var apiHTTP: CreateTimingSyntheticTaskRequest.MonitorConf.ApiHTTP?

        public var fileDownload: CreateTimingSyntheticTaskRequest.MonitorConf.FileDownload?

        public var netDNS: CreateTimingSyntheticTaskRequest.MonitorConf.NetDNS?

        public var netICMP: CreateTimingSyntheticTaskRequest.MonitorConf.NetICMP?

        public var netTCP: CreateTimingSyntheticTaskRequest.MonitorConf.NetTCP?

        public var stream: CreateTimingSyntheticTaskRequest.MonitorConf.Stream?

        public var website: CreateTimingSyntheticTaskRequest.MonitorConf.Website?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.apiHTTP?.validate()
            try self.fileDownload?.validate()
            try self.netDNS?.validate()
            try self.netICMP?.validate()
            try self.netTCP?.validate()
            try self.stream?.validate()
            try self.website?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.apiHTTP != nil {
                map["ApiHTTP"] = self.apiHTTP?.toMap()
            }
            if self.fileDownload != nil {
                map["FileDownload"] = self.fileDownload?.toMap()
            }
            if self.netDNS != nil {
                map["NetDNS"] = self.netDNS?.toMap()
            }
            if self.netICMP != nil {
                map["NetICMP"] = self.netICMP?.toMap()
            }
            if self.netTCP != nil {
                map["NetTCP"] = self.netTCP?.toMap()
            }
            if self.stream != nil {
                map["Stream"] = self.stream?.toMap()
            }
            if self.website != nil {
                map["Website"] = self.website?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ApiHTTP"] as? [String: Any?] {
                var model = CreateTimingSyntheticTaskRequest.MonitorConf.ApiHTTP()
                model.fromMap(value)
                self.apiHTTP = model
            }
            if let value = dict["FileDownload"] as? [String: Any?] {
                var model = CreateTimingSyntheticTaskRequest.MonitorConf.FileDownload()
                model.fromMap(value)
                self.fileDownload = model
            }
            if let value = dict["NetDNS"] as? [String: Any?] {
                var model = CreateTimingSyntheticTaskRequest.MonitorConf.NetDNS()
                model.fromMap(value)
                self.netDNS = model
            }
            if let value = dict["NetICMP"] as? [String: Any?] {
                var model = CreateTimingSyntheticTaskRequest.MonitorConf.NetICMP()
                model.fromMap(value)
                self.netICMP = model
            }
            if let value = dict["NetTCP"] as? [String: Any?] {
                var model = CreateTimingSyntheticTaskRequest.MonitorConf.NetTCP()
                model.fromMap(value)
                self.netTCP = model
            }
            if let value = dict["Stream"] as? [String: Any?] {
                var model = CreateTimingSyntheticTaskRequest.MonitorConf.Stream()
                model.fromMap(value)
                self.stream = model
            }
            if let value = dict["Website"] as? [String: Any?] {
                var model = CreateTimingSyntheticTaskRequest.MonitorConf.Website()
                model.fromMap(value)
                self.website = model
            }
        }
    }
    public class Monitors : Tea.TeaModel {
        public var cityCode: String?

        public var clientType: Int32?

        public var operatorCode: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.cityCode != nil {
                map["CityCode"] = self.cityCode!
            }
            if self.clientType != nil {
                map["ClientType"] = self.clientType!
            }
            if self.operatorCode != nil {
                map["OperatorCode"] = self.operatorCode!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CityCode"] as? String {
                self.cityCode = value
            }
            if let value = dict["ClientType"] as? Int32 {
                self.clientType = value
            }
            if let value = dict["OperatorCode"] as? String {
                self.operatorCode = value
            }
        }
    }
    public class Tags : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var availableAssertions: [CreateTimingSyntheticTaskRequest.AvailableAssertions]?

    public var commonSetting: CreateTimingSyntheticTaskRequest.CommonSetting?

    public var customPeriod: CreateTimingSyntheticTaskRequest.CustomPeriod?

    public var frequency: String?

    public var monitorCategory: Int32?

    public var monitorConf: CreateTimingSyntheticTaskRequest.MonitorConf?

    public var monitors: [CreateTimingSyntheticTaskRequest.Monitors]?

    public var name: String?

    public var regionId: String?

    public var resourceGroupId: String?

    public var tags: [CreateTimingSyntheticTaskRequest.Tags]?

    public var taskType: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.commonSetting?.validate()
        try self.customPeriod?.validate()
        try self.monitorConf?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.availableAssertions != nil {
            var tmp : [Any] = []
            for k in self.availableAssertions! {
                tmp.append(k.toMap())
            }
            map["AvailableAssertions"] = tmp
        }
        if self.commonSetting != nil {
            map["CommonSetting"] = self.commonSetting?.toMap()
        }
        if self.customPeriod != nil {
            map["CustomPeriod"] = self.customPeriod?.toMap()
        }
        if self.frequency != nil {
            map["Frequency"] = self.frequency!
        }
        if self.monitorCategory != nil {
            map["MonitorCategory"] = self.monitorCategory!
        }
        if self.monitorConf != nil {
            map["MonitorConf"] = self.monitorConf?.toMap()
        }
        if self.monitors != nil {
            var tmp : [Any] = []
            for k in self.monitors! {
                tmp.append(k.toMap())
            }
            map["Monitors"] = tmp
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceGroupId != nil {
            map["ResourceGroupId"] = self.resourceGroupId!
        }
        if self.tags != nil {
            var tmp : [Any] = []
            for k in self.tags! {
                tmp.append(k.toMap())
            }
            map["Tags"] = tmp
        }
        if self.taskType != nil {
            map["TaskType"] = self.taskType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AvailableAssertions"] as? [Any?] {
            var tmp : [CreateTimingSyntheticTaskRequest.AvailableAssertions] = []
            for v in value {
                if v != nil {
                    var model = CreateTimingSyntheticTaskRequest.AvailableAssertions()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.availableAssertions = tmp
        }
        if let value = dict["CommonSetting"] as? [String: Any?] {
            var model = CreateTimingSyntheticTaskRequest.CommonSetting()
            model.fromMap(value)
            self.commonSetting = model
        }
        if let value = dict["CustomPeriod"] as? [String: Any?] {
            var model = CreateTimingSyntheticTaskRequest.CustomPeriod()
            model.fromMap(value)
            self.customPeriod = model
        }
        if let value = dict["Frequency"] as? String {
            self.frequency = value
        }
        if let value = dict["MonitorCategory"] as? Int32 {
            self.monitorCategory = value
        }
        if let value = dict["MonitorConf"] as? [String: Any?] {
            var model = CreateTimingSyntheticTaskRequest.MonitorConf()
            model.fromMap(value)
            self.monitorConf = model
        }
        if let value = dict["Monitors"] as? [Any?] {
            var tmp : [CreateTimingSyntheticTaskRequest.Monitors] = []
            for v in value {
                if v != nil {
                    var model = CreateTimingSyntheticTaskRequest.Monitors()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.monitors = tmp
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceGroupId"] as? String {
            self.resourceGroupId = value
        }
        if let value = dict["Tags"] as? [Any?] {
            var tmp : [CreateTimingSyntheticTaskRequest.Tags] = []
            for v in value {
                if v != nil {
                    var model = CreateTimingSyntheticTaskRequest.Tags()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tags = tmp
        }
        if let value = dict["TaskType"] as? Int32 {
            self.taskType = value
        }
    }
}

public class CreateTimingSyntheticTaskShrinkRequest : Tea.TeaModel {
    public var availableAssertionsShrink: String?

    public var commonSettingShrink: String?

    public var customPeriodShrink: String?

    public var frequency: String?

    public var monitorCategory: Int32?

    public var monitorConfShrink: String?

    public var monitorsShrink: String?

    public var name: String?

    public var regionId: String?

    public var resourceGroupId: String?

    public var tagsShrink: String?

    public var taskType: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.availableAssertionsShrink != nil {
            map["AvailableAssertions"] = self.availableAssertionsShrink!
        }
        if self.commonSettingShrink != nil {
            map["CommonSetting"] = self.commonSettingShrink!
        }
        if self.customPeriodShrink != nil {
            map["CustomPeriod"] = self.customPeriodShrink!
        }
        if self.frequency != nil {
            map["Frequency"] = self.frequency!
        }
        if self.monitorCategory != nil {
            map["MonitorCategory"] = self.monitorCategory!
        }
        if self.monitorConfShrink != nil {
            map["MonitorConf"] = self.monitorConfShrink!
        }
        if self.monitorsShrink != nil {
            map["Monitors"] = self.monitorsShrink!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceGroupId != nil {
            map["ResourceGroupId"] = self.resourceGroupId!
        }
        if self.tagsShrink != nil {
            map["Tags"] = self.tagsShrink!
        }
        if self.taskType != nil {
            map["TaskType"] = self.taskType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AvailableAssertions"] as? String {
            self.availableAssertionsShrink = value
        }
        if let value = dict["CommonSetting"] as? String {
            self.commonSettingShrink = value
        }
        if let value = dict["CustomPeriod"] as? String {
            self.customPeriodShrink = value
        }
        if let value = dict["Frequency"] as? String {
            self.frequency = value
        }
        if let value = dict["MonitorCategory"] as? Int32 {
            self.monitorCategory = value
        }
        if let value = dict["MonitorConf"] as? String {
            self.monitorConfShrink = value
        }
        if let value = dict["Monitors"] as? String {
            self.monitorsShrink = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceGroupId"] as? String {
            self.resourceGroupId = value
        }
        if let value = dict["Tags"] as? String {
            self.tagsShrink = value
        }
        if let value = dict["TaskType"] as? Int32 {
            self.taskType = value
        }
    }
}

public class CreateTimingSyntheticTaskResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var status: String?

        public var taskId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["TaskId"] as? String {
                self.taskId = value
            }
        }
    }
    public var code: Int64?

    public var data: CreateTimingSyntheticTaskResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int64 {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = CreateTimingSyntheticTaskResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class CreateTimingSyntheticTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateTimingSyntheticTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateTimingSyntheticTaskResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateWebhookRequest : Tea.TeaModel {
    public var body: String?

    public var contactName: String?

    public var httpHeaders: String?

    public var httpParams: String?

    public var method: String?

    public var recoverBody: String?

    public var regionId: String?

    public var url: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.body != nil {
            map["Body"] = self.body!
        }
        if self.contactName != nil {
            map["ContactName"] = self.contactName!
        }
        if self.httpHeaders != nil {
            map["HttpHeaders"] = self.httpHeaders!
        }
        if self.httpParams != nil {
            map["HttpParams"] = self.httpParams!
        }
        if self.method != nil {
            map["Method"] = self.method!
        }
        if self.recoverBody != nil {
            map["RecoverBody"] = self.recoverBody!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.url != nil {
            map["Url"] = self.url!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Body"] as? String {
            self.body = value
        }
        if let value = dict["ContactName"] as? String {
            self.contactName = value
        }
        if let value = dict["HttpHeaders"] as? String {
            self.httpHeaders = value
        }
        if let value = dict["HttpParams"] as? String {
            self.httpParams = value
        }
        if let value = dict["Method"] as? String {
            self.method = value
        }
        if let value = dict["RecoverBody"] as? String {
            self.recoverBody = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Url"] as? String {
            self.url = value
        }
    }
}

public class CreateWebhookResponseBody : Tea.TeaModel {
    public var contactId: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.contactId != nil {
            map["ContactId"] = self.contactId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ContactId"] as? String {
            self.contactId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateWebhookResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateWebhookResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateWebhookResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DelAuthTokenRequest : Tea.TeaModel {
    public var clusterId: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClusterId"] as? String {
            self.clusterId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DelAuthTokenResponseBody : Tea.TeaModel {
    public var data: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DelAuthTokenResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DelAuthTokenResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DelAuthTokenResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteAddonReleaseRequest : Tea.TeaModel {
    public var addonName: String?

    public var environmentId: String?

    public var force: Bool?

    public var regionId: String?

    public var releaseName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.addonName != nil {
            map["AddonName"] = self.addonName!
        }
        if self.environmentId != nil {
            map["EnvironmentId"] = self.environmentId!
        }
        if self.force != nil {
            map["Force"] = self.force!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.releaseName != nil {
            map["ReleaseName"] = self.releaseName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AddonName"] as? String {
            self.addonName = value
        }
        if let value = dict["EnvironmentId"] as? String {
            self.environmentId = value
        }
        if let value = dict["Force"] as? Bool {
            self.force = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ReleaseName"] as? String {
            self.releaseName = value
        }
    }
}

public class DeleteAddonReleaseResponseBody : Tea.TeaModel {
    public var code: Int32?

    public var data: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DeleteAddonReleaseResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteAddonReleaseResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteAddonReleaseResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteAlertContactRequest : Tea.TeaModel {
    public var contactId: Int64?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.contactId != nil {
            map["ContactId"] = self.contactId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ContactId"] as? Int64 {
            self.contactId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DeleteAlertContactResponseBody : Tea.TeaModel {
    public var isSuccess: Bool?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.isSuccess != nil {
            map["IsSuccess"] = self.isSuccess!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["IsSuccess"] as? Bool {
            self.isSuccess = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteAlertContactResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteAlertContactResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteAlertContactResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteAlertContactGroupRequest : Tea.TeaModel {
    public var contactGroupId: Int64?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.contactGroupId != nil {
            map["ContactGroupId"] = self.contactGroupId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ContactGroupId"] as? Int64 {
            self.contactGroupId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DeleteAlertContactGroupResponseBody : Tea.TeaModel {
    public var isSuccess: Bool?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.isSuccess != nil {
            map["IsSuccess"] = self.isSuccess!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["IsSuccess"] as? Bool {
            self.isSuccess = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteAlertContactGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteAlertContactGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteAlertContactGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteAlertRuleRequest : Tea.TeaModel {
    public var alertId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.alertId != nil {
            map["AlertId"] = self.alertId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AlertId"] as? Int64 {
            self.alertId = value
        }
    }
}

public class DeleteAlertRuleResponseBody : Tea.TeaModel {
    public var isSuccess: Bool?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.isSuccess != nil {
            map["IsSuccess"] = self.isSuccess!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["IsSuccess"] as? Bool {
            self.isSuccess = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteAlertRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteAlertRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteAlertRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteAlertRulesRequest : Tea.TeaModel {
    public var alertIds: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.alertIds != nil {
            map["AlertIds"] = self.alertIds!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AlertIds"] as? String {
            self.alertIds = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DeleteAlertRulesResponseBody : Tea.TeaModel {
    public var isSuccess: Bool?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.isSuccess != nil {
            map["IsSuccess"] = self.isSuccess!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["IsSuccess"] as? Bool {
            self.isSuccess = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteAlertRulesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteAlertRulesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteAlertRulesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteAppListRequest : Tea.TeaModel {
    public var pids: [String]?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pids != nil {
            map["Pids"] = self.pids!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Pids"] as? [String] {
            self.pids = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DeleteAppListResponseBody : Tea.TeaModel {
    public var code: Int64?

    public var data: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int64 {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DeleteAppListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteAppListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteAppListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteCmsExporterRequest : Tea.TeaModel {
    public var clusterId: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClusterId"] as? String {
            self.clusterId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DeleteCmsExporterResponseBody : Tea.TeaModel {
    public var data: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteCmsExporterResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteCmsExporterResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteCmsExporterResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteContactRequest : Tea.TeaModel {
    public var contactId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.contactId != nil {
            map["ContactId"] = self.contactId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ContactId"] as? Int64 {
            self.contactId = value
        }
    }
}

public class DeleteContactResponseBody : Tea.TeaModel {
    public var isSuccess: Bool?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.isSuccess != nil {
            map["IsSuccess"] = self.isSuccess!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["IsSuccess"] as? Bool {
            self.isSuccess = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteContactResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteContactResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteContactResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteContactGroupRequest : Tea.TeaModel {
    public var contactGroupId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.contactGroupId != nil {
            map["ContactGroupId"] = self.contactGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ContactGroupId"] as? Int64 {
            self.contactGroupId = value
        }
    }
}

public class DeleteContactGroupResponseBody : Tea.TeaModel {
    public var isSuccess: Bool?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.isSuccess != nil {
            map["IsSuccess"] = self.isSuccess!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["IsSuccess"] as? Bool {
            self.isSuccess = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteContactGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteContactGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteContactGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteDispatchRuleRequest : Tea.TeaModel {
    public var id: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? String {
            self.id = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DeleteDispatchRuleResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DeleteDispatchRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteDispatchRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteDispatchRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteEnvCustomJobRequest : Tea.TeaModel {
    public var customJobName: String?

    public var environmentId: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.customJobName != nil {
            map["CustomJobName"] = self.customJobName!
        }
        if self.environmentId != nil {
            map["EnvironmentId"] = self.environmentId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CustomJobName"] as? String {
            self.customJobName = value
        }
        if let value = dict["EnvironmentId"] as? String {
            self.environmentId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DeleteEnvCustomJobResponseBody : Tea.TeaModel {
    public var code: Int32?

    public var data: String?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteEnvCustomJobResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteEnvCustomJobResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteEnvCustomJobResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteEnvPodMonitorRequest : Tea.TeaModel {
    public var environmentId: String?

    public var namespace: String?

    public var podMonitorName: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.environmentId != nil {
            map["EnvironmentId"] = self.environmentId!
        }
        if self.namespace != nil {
            map["Namespace"] = self.namespace!
        }
        if self.podMonitorName != nil {
            map["PodMonitorName"] = self.podMonitorName!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EnvironmentId"] as? String {
            self.environmentId = value
        }
        if let value = dict["Namespace"] as? String {
            self.namespace = value
        }
        if let value = dict["PodMonitorName"] as? String {
            self.podMonitorName = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DeleteEnvPodMonitorResponseBody : Tea.TeaModel {
    public var code: Int32?

    public var data: String?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteEnvPodMonitorResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteEnvPodMonitorResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteEnvPodMonitorResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteEnvServiceMonitorRequest : Tea.TeaModel {
    public var environmentId: String?

    public var namespace: String?

    public var regionId: String?

    public var serviceMonitorName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.environmentId != nil {
            map["EnvironmentId"] = self.environmentId!
        }
        if self.namespace != nil {
            map["Namespace"] = self.namespace!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.serviceMonitorName != nil {
            map["ServiceMonitorName"] = self.serviceMonitorName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EnvironmentId"] as? String {
            self.environmentId = value
        }
        if let value = dict["Namespace"] as? String {
            self.namespace = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ServiceMonitorName"] as? String {
            self.serviceMonitorName = value
        }
    }
}

public class DeleteEnvServiceMonitorResponseBody : Tea.TeaModel {
    public var code: Int32?

    public var data: String?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteEnvServiceMonitorResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteEnvServiceMonitorResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteEnvServiceMonitorResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteEnvironmentRequest : Tea.TeaModel {
    public var deletePromInstance: Bool?

    public var environmentId: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.deletePromInstance != nil {
            map["DeletePromInstance"] = self.deletePromInstance!
        }
        if self.environmentId != nil {
            map["EnvironmentId"] = self.environmentId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DeletePromInstance"] as? Bool {
            self.deletePromInstance = value
        }
        if let value = dict["EnvironmentId"] as? String {
            self.environmentId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DeleteEnvironmentResponseBody : Tea.TeaModel {
    public var code: Int32?

    public var data: String?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteEnvironmentResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteEnvironmentResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteEnvironmentResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteEnvironmentFeatureRequest : Tea.TeaModel {
    public var environmentId: String?

    public var featureName: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.environmentId != nil {
            map["EnvironmentId"] = self.environmentId!
        }
        if self.featureName != nil {
            map["FeatureName"] = self.featureName!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EnvironmentId"] as? String {
            self.environmentId = value
        }
        if let value = dict["FeatureName"] as? String {
            self.featureName = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DeleteEnvironmentFeatureResponseBody : Tea.TeaModel {
    public var code: Int32?

    public var data: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DeleteEnvironmentFeatureResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteEnvironmentFeatureResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteEnvironmentFeatureResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteEventBridgeIntegrationRequest : Tea.TeaModel {
    public var id: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
    }
}

public class DeleteEventBridgeIntegrationResponseBody : Tea.TeaModel {
    public var isSuccess: Bool?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.isSuccess != nil {
            map["IsSuccess"] = self.isSuccess!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["IsSuccess"] as? Bool {
            self.isSuccess = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteEventBridgeIntegrationResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteEventBridgeIntegrationResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteEventBridgeIntegrationResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteGrafanaResourceRequest : Tea.TeaModel {
    public var clusterId: String?

    public var clusterName: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.clusterName != nil {
            map["ClusterName"] = self.clusterName!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClusterId"] as? String {
            self.clusterId = value
        }
        if let value = dict["ClusterName"] as? String {
            self.clusterName = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DeleteGrafanaResourceResponseBody : Tea.TeaModel {
    public var code: Int32?

    public var data: String?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteGrafanaResourceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteGrafanaResourceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteGrafanaResourceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteGrafanaWorkspaceRequest : Tea.TeaModel {
    public var grafanaWorkspaceId: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.grafanaWorkspaceId != nil {
            map["GrafanaWorkspaceId"] = self.grafanaWorkspaceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["GrafanaWorkspaceId"] as? String {
            self.grafanaWorkspaceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DeleteGrafanaWorkspaceResponseBody : Tea.TeaModel {
    public var code: Int32?

    public var data: Bool?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.traceId != nil {
            map["TraceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? Bool {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
        if let value = dict["TraceId"] as? String {
            self.traceId = value
        }
    }
}

public class DeleteGrafanaWorkspaceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteGrafanaWorkspaceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteGrafanaWorkspaceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteIMRobotRequest : Tea.TeaModel {
    public var robotId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.robotId != nil {
            map["RobotId"] = self.robotId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RobotId"] as? Int64 {
            self.robotId = value
        }
    }
}

public class DeleteIMRobotResponseBody : Tea.TeaModel {
    public var isSuccess: Bool?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.isSuccess != nil {
            map["IsSuccess"] = self.isSuccess!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["IsSuccess"] as? Bool {
            self.isSuccess = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteIMRobotResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteIMRobotResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteIMRobotResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteIntegrationRequest : Tea.TeaModel {
    public var clusterId: String?

    public var integration: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.integration != nil {
            map["Integration"] = self.integration!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClusterId"] as? String {
            self.clusterId = value
        }
        if let value = dict["Integration"] as? String {
            self.integration = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DeleteIntegrationResponseBody : Tea.TeaModel {
    public var code: Int32?

    public var data: String?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteIntegrationResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteIntegrationResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteIntegrationResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteIntegrationsRequest : Tea.TeaModel {
    public var integrationId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.integrationId != nil {
            map["IntegrationId"] = self.integrationId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["IntegrationId"] as? Int64 {
            self.integrationId = value
        }
    }
}

public class DeleteIntegrationsResponseBody : Tea.TeaModel {
    public var isSuccess: Bool?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.isSuccess != nil {
            map["IsSuccess"] = self.isSuccess!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["IsSuccess"] as? Bool {
            self.isSuccess = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteIntegrationsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteIntegrationsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteIntegrationsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteNotificationPolicyRequest : Tea.TeaModel {
    public var id: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
    }
}

public class DeleteNotificationPolicyResponseBody : Tea.TeaModel {
    public var isSuccess: Bool?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.isSuccess != nil {
            map["IsSuccess"] = self.isSuccess!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["IsSuccess"] as? Bool {
            self.isSuccess = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteNotificationPolicyResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteNotificationPolicyResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteNotificationPolicyResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeletePrometheusAlertRuleRequest : Tea.TeaModel {
    public var alertId: Int64?

    public var clusterId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.alertId != nil {
            map["AlertId"] = self.alertId!
        }
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AlertId"] as? Int64 {
            self.alertId = value
        }
        if let value = dict["ClusterId"] as? String {
            self.clusterId = value
        }
    }
}

public class DeletePrometheusAlertRuleResponseBody : Tea.TeaModel {
    public var code: Int64?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int64 {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DeletePrometheusAlertRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeletePrometheusAlertRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeletePrometheusAlertRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeletePrometheusGlobalViewRequest : Tea.TeaModel {
    public var globalViewClusterId: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.globalViewClusterId != nil {
            map["GlobalViewClusterId"] = self.globalViewClusterId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["GlobalViewClusterId"] as? String {
            self.globalViewClusterId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DeletePrometheusGlobalViewResponseBody : Tea.TeaModel {
    public var code: Int32?

    public var data: String?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeletePrometheusGlobalViewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeletePrometheusGlobalViewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeletePrometheusGlobalViewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeletePrometheusIntegrationRequest : Tea.TeaModel {
    public var clusterId: String?

    public var instanceId: Int64?

    public var integrationType: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.integrationType != nil {
            map["IntegrationType"] = self.integrationType!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClusterId"] as? String {
            self.clusterId = value
        }
        if let value = dict["InstanceId"] as? Int64 {
            self.instanceId = value
        }
        if let value = dict["IntegrationType"] as? String {
            self.integrationType = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DeletePrometheusIntegrationResponseBody : Tea.TeaModel {
    public var code: Int32?

    public var data: String?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeletePrometheusIntegrationResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeletePrometheusIntegrationResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeletePrometheusIntegrationResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeletePrometheusMonitoringRequest : Tea.TeaModel {
    public var clusterId: String?

    public var monitoringName: String?

    public var regionId: String?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.monitoringName != nil {
            map["MonitoringName"] = self.monitoringName!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClusterId"] as? String {
            self.clusterId = value
        }
        if let value = dict["MonitoringName"] as? String {
            self.monitoringName = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
    }
}

public class DeletePrometheusMonitoringResponseBody : Tea.TeaModel {
    public var code: Int32?

    public var data: String?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeletePrometheusMonitoringResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeletePrometheusMonitoringResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeletePrometheusMonitoringResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteRetcodeAppRequest : Tea.TeaModel {
    public var appId: String?

    public var appName: String?

    public var pid: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        if self.appName != nil {
            map["AppName"] = self.appName!
        }
        if self.pid != nil {
            map["Pid"] = self.pid!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppId"] as? String {
            self.appId = value
        }
        if let value = dict["AppName"] as? String {
            self.appName = value
        }
        if let value = dict["Pid"] as? String {
            self.pid = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DeleteRetcodeAppResponseBody : Tea.TeaModel {
    public var code: Int32?

    public var data: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DeleteRetcodeAppResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteRetcodeAppResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteRetcodeAppResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteRumAppRequest : Tea.TeaModel {
    public var appGroup: String?

    public var appId: String?

    public var realRegionId: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appGroup != nil {
            map["AppGroup"] = self.appGroup!
        }
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        if self.realRegionId != nil {
            map["RealRegionId"] = self.realRegionId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppGroup"] as? String {
            self.appGroup = value
        }
        if let value = dict["AppId"] as? String {
            self.appId = value
        }
        if let value = dict["RealRegionId"] as? String {
            self.realRegionId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DeleteRumAppResponseBody : Tea.TeaModel {
    public var code: Int32?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var resourceGroupId: String?

    public var result: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resourceGroupId != nil {
            map["ResourceGroupId"] = self.resourceGroupId!
        }
        if self.result != nil {
            map["Result"] = self.result!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["ResourceGroupId"] as? String {
            self.resourceGroupId = value
        }
        if let value = dict["Result"] as? String {
            self.result = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DeleteRumAppResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteRumAppResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteRumAppResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteRumUploadFileRequest : Tea.TeaModel {
    public var batchItems: String?

    public var fileName: String?

    public var pid: String?

    public var regionId: String?

    public var serviceId: String?

    public var uuid: String?

    public var versionId: String?

    public var workspace: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.batchItems != nil {
            map["BatchItems"] = self.batchItems!
        }
        if self.fileName != nil {
            map["FileName"] = self.fileName!
        }
        if self.pid != nil {
            map["Pid"] = self.pid!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.serviceId != nil {
            map["ServiceId"] = self.serviceId!
        }
        if self.uuid != nil {
            map["Uuid"] = self.uuid!
        }
        if self.versionId != nil {
            map["VersionId"] = self.versionId!
        }
        if self.workspace != nil {
            map["Workspace"] = self.workspace!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BatchItems"] as? String {
            self.batchItems = value
        }
        if let value = dict["FileName"] as? String {
            self.fileName = value
        }
        if let value = dict["Pid"] as? String {
            self.pid = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ServiceId"] as? String {
            self.serviceId = value
        }
        if let value = dict["Uuid"] as? String {
            self.uuid = value
        }
        if let value = dict["VersionId"] as? String {
            self.versionId = value
        }
        if let value = dict["Workspace"] as? String {
            self.workspace = value
        }
    }
}

public class DeleteRumUploadFileResponseBody : Tea.TeaModel {
    public var code: Int32?

    public var data: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DeleteRumUploadFileResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteRumUploadFileResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteRumUploadFileResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteScenarioRequest : Tea.TeaModel {
    public var regionId: String?

    public var scenarioId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.scenarioId != nil {
            map["ScenarioId"] = self.scenarioId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ScenarioId"] as? Int64 {
            self.scenarioId = value
        }
    }
}

public class DeleteScenarioResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var result: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.result != nil {
            map["Result"] = self.result!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Result"] as? Bool {
            self.result = value
        }
    }
}

public class DeleteScenarioResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteScenarioResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteScenarioResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteSilencePolicyRequest : Tea.TeaModel {
    public var id: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
    }
}

public class DeleteSilencePolicyResponseBody : Tea.TeaModel {
    public var isSuccess: Bool?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.isSuccess != nil {
            map["IsSuccess"] = self.isSuccess!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["IsSuccess"] as? Bool {
            self.isSuccess = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteSilencePolicyResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteSilencePolicyResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteSilencePolicyResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteSourceMapRequest : Tea.TeaModel {
    public var fidList: [String]?

    public var pid: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.fidList != nil {
            map["FidList"] = self.fidList!
        }
        if self.pid != nil {
            map["Pid"] = self.pid!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["FidList"] as? [String] {
            self.fidList = value
        }
        if let value = dict["Pid"] as? String {
            self.pid = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DeleteSourceMapShrinkRequest : Tea.TeaModel {
    public var fidListShrink: String?

    public var pid: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.fidListShrink != nil {
            map["FidList"] = self.fidListShrink!
        }
        if self.pid != nil {
            map["Pid"] = self.pid!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["FidList"] as? String {
            self.fidListShrink = value
        }
        if let value = dict["Pid"] as? String {
            self.pid = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DeleteSourceMapResponseBody : Tea.TeaModel {
    public var data: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteSourceMapResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteSourceMapResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteSourceMapResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteSyntheticTaskRequest : Tea.TeaModel {
    public var regionId: String?

    public var taskIds: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.taskIds != nil {
            map["TaskIds"] = self.taskIds!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["TaskIds"] as? [String] {
            self.taskIds = value
        }
    }
}

public class DeleteSyntheticTaskResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var result: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.result != nil {
            map["Result"] = self.result!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Result"] as? String {
            self.result = value
        }
    }
}

public class DeleteSyntheticTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteSyntheticTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteSyntheticTaskResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteTimingSyntheticTaskRequest : Tea.TeaModel {
    public var regionId: String?

    public var resourceGroupId: String?

    public var taskId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceGroupId != nil {
            map["ResourceGroupId"] = self.resourceGroupId!
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceGroupId"] as? String {
            self.resourceGroupId = value
        }
        if let value = dict["TaskId"] as? String {
            self.taskId = value
        }
    }
}

public class DeleteTimingSyntheticTaskResponseBody : Tea.TeaModel {
    public var code: Int64?

    public var data: Bool?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int64 {
            self.code = value
        }
        if let value = dict["Data"] as? Bool {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteTimingSyntheticTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteTimingSyntheticTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteTimingSyntheticTaskResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteTraceAppRequest : Tea.TeaModel {
    public class DeleteReason : Tea.TeaModel {
        public class ReasonIds : Tea.TeaModel {
            public var id: Int32?

            public var name: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Id"] as? Int32 {
                    self.id = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
            }
        }
        public var reasonIds: [DeleteTraceAppRequest.DeleteReason.ReasonIds]?

        public var remark: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.reasonIds != nil {
                var tmp : [Any] = []
                for k in self.reasonIds! {
                    tmp.append(k.toMap())
                }
                map["ReasonIds"] = tmp
            }
            if self.remark != nil {
                map["Remark"] = self.remark!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ReasonIds"] as? [Any?] {
                var tmp : [DeleteTraceAppRequest.DeleteReason.ReasonIds] = []
                for v in value {
                    if v != nil {
                        var model = DeleteTraceAppRequest.DeleteReason.ReasonIds()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.reasonIds = tmp
            }
            if let value = dict["Remark"] as? String {
                self.remark = value
            }
        }
    }
    public var appId: String?

    public var deleteReason: DeleteTraceAppRequest.DeleteReason?

    public var pid: String?

    public var regionId: String?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.deleteReason?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        if self.deleteReason != nil {
            map["DeleteReason"] = self.deleteReason?.toMap()
        }
        if self.pid != nil {
            map["Pid"] = self.pid!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppId"] as? String {
            self.appId = value
        }
        if let value = dict["DeleteReason"] as? [String: Any?] {
            var model = DeleteTraceAppRequest.DeleteReason()
            model.fromMap(value)
            self.deleteReason = model
        }
        if let value = dict["Pid"] as? String {
            self.pid = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
    }
}

public class DeleteTraceAppShrinkRequest : Tea.TeaModel {
    public var appId: String?

    public var deleteReasonShrink: String?

    public var pid: String?

    public var regionId: String?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        if self.deleteReasonShrink != nil {
            map["DeleteReason"] = self.deleteReasonShrink!
        }
        if self.pid != nil {
            map["Pid"] = self.pid!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppId"] as? String {
            self.appId = value
        }
        if let value = dict["DeleteReason"] as? String {
            self.deleteReasonShrink = value
        }
        if let value = dict["Pid"] as? String {
            self.pid = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
    }
}

public class DeleteTraceAppResponseBody : Tea.TeaModel {
    public var code: Int64?

    public var data: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int64 {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DeleteTraceAppResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteTraceAppResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteTraceAppResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteWebhookContactRequest : Tea.TeaModel {
    public var webhookId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.webhookId != nil {
            map["WebhookId"] = self.webhookId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["WebhookId"] as? Int64 {
            self.webhookId = value
        }
    }
}

public class DeleteWebhookContactResponseBody : Tea.TeaModel {
    public var isSuccess: Bool?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.isSuccess != nil {
            map["IsSuccess"] = self.isSuccess!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["IsSuccess"] as? Bool {
            self.isSuccess = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteWebhookContactResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteWebhookContactResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteWebhookContactResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeAddonMetricsRequest : Tea.TeaModel {
    public var addonVersion: String?

    public var aliyunLang: String?

    public var environmentType: String?

    public var name: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.addonVersion != nil {
            map["AddonVersion"] = self.addonVersion!
        }
        if self.aliyunLang != nil {
            map["AliyunLang"] = self.aliyunLang!
        }
        if self.environmentType != nil {
            map["EnvironmentType"] = self.environmentType!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AddonVersion"] as? String {
            self.addonVersion = value
        }
        if let value = dict["AliyunLang"] as? String {
            self.aliyunLang = value
        }
        if let value = dict["EnvironmentType"] as? String {
            self.environmentType = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DescribeAddonMetricsResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Labels : Tea.TeaModel {
            public var description_: String?

            public var key: String?

            public var source: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.key != nil {
                    map["Key"] = self.key!
                }
                if self.source != nil {
                    map["Source"] = self.source!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["Key"] as? String {
                    self.key = value
                }
                if let value = dict["Source"] as? String {
                    self.source = value
                }
            }
        }
        public class Metrics : Tea.TeaModel {
            public class Labels : Tea.TeaModel {
                public var description_: String?

                public var key: String?

                public var source: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.description_ != nil {
                        map["Description"] = self.description_!
                    }
                    if self.key != nil {
                        map["Key"] = self.key!
                    }
                    if self.source != nil {
                        map["Source"] = self.source!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Description"] as? String {
                        self.description_ = value
                    }
                    if let value = dict["Key"] as? String {
                        self.key = value
                    }
                    if let value = dict["Source"] as? String {
                        self.source = value
                    }
                }
            }
            public var description_: String?

            public var labels: [DescribeAddonMetricsResponseBody.Data.Metrics.Labels]?

            public var metric: String?

            public var type: String?

            public var unit: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.labels != nil {
                    var tmp : [Any] = []
                    for k in self.labels! {
                        tmp.append(k.toMap())
                    }
                    map["Labels"] = tmp
                }
                if self.metric != nil {
                    map["Metric"] = self.metric!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                if self.unit != nil {
                    map["Unit"] = self.unit!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["Labels"] as? [Any?] {
                    var tmp : [DescribeAddonMetricsResponseBody.Data.Metrics.Labels] = []
                    for v in value {
                        if v != nil {
                            var model = DescribeAddonMetricsResponseBody.Data.Metrics.Labels()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.labels = tmp
                }
                if let value = dict["Metric"] as? String {
                    self.metric = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
                if let value = dict["Unit"] as? String {
                    self.unit = value
                }
            }
        }
        public var group: String?

        public var labels: [DescribeAddonMetricsResponseBody.Data.Labels]?

        public var metrics: [DescribeAddonMetricsResponseBody.Data.Metrics]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.group != nil {
                map["Group"] = self.group!
            }
            if self.labels != nil {
                var tmp : [Any] = []
                for k in self.labels! {
                    tmp.append(k.toMap())
                }
                map["Labels"] = tmp
            }
            if self.metrics != nil {
                var tmp : [Any] = []
                for k in self.metrics! {
                    tmp.append(k.toMap())
                }
                map["Metrics"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Group"] as? String {
                self.group = value
            }
            if let value = dict["Labels"] as? [Any?] {
                var tmp : [DescribeAddonMetricsResponseBody.Data.Labels] = []
                for v in value {
                    if v != nil {
                        var model = DescribeAddonMetricsResponseBody.Data.Labels()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.labels = tmp
            }
            if let value = dict["Metrics"] as? [Any?] {
                var tmp : [DescribeAddonMetricsResponseBody.Data.Metrics] = []
                for v in value {
                    if v != nil {
                        var model = DescribeAddonMetricsResponseBody.Data.Metrics()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.metrics = tmp
            }
        }
    }
    public var code: Int32?

    public var data: [DescribeAddonMetricsResponseBody.Data]?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [DescribeAddonMetricsResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = DescribeAddonMetricsResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DescribeAddonMetricsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeAddonMetricsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeAddonMetricsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeAddonReleaseRequest : Tea.TeaModel {
    public var environmentId: String?

    public var regionId: String?

    public var releaseName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.environmentId != nil {
            map["EnvironmentId"] = self.environmentId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.releaseName != nil {
            map["ReleaseName"] = self.releaseName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EnvironmentId"] as? String {
            self.environmentId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ReleaseName"] as? String {
            self.releaseName = value
        }
    }
}

public class DescribeAddonReleaseResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Release : Tea.TeaModel {
            public class Conditions : Tea.TeaModel {
                public var firstTransitionTime: String?

                public var lastTransitionTime: String?

                public var message: String?

                public var reason: String?

                public var status: String?

                public var type: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.firstTransitionTime != nil {
                        map["FirstTransitionTime"] = self.firstTransitionTime!
                    }
                    if self.lastTransitionTime != nil {
                        map["LastTransitionTime"] = self.lastTransitionTime!
                    }
                    if self.message != nil {
                        map["Message"] = self.message!
                    }
                    if self.reason != nil {
                        map["Reason"] = self.reason!
                    }
                    if self.status != nil {
                        map["Status"] = self.status!
                    }
                    if self.type != nil {
                        map["Type"] = self.type!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["FirstTransitionTime"] as? String {
                        self.firstTransitionTime = value
                    }
                    if let value = dict["LastTransitionTime"] as? String {
                        self.lastTransitionTime = value
                    }
                    if let value = dict["Message"] as? String {
                        self.message = value
                    }
                    if let value = dict["Reason"] as? String {
                        self.reason = value
                    }
                    if let value = dict["Status"] as? String {
                        self.status = value
                    }
                    if let value = dict["Type"] as? String {
                        self.type = value
                    }
                }
            }
            public var addonName: String?

            public var alertRuleCount: Int64?

            public var conditions: [DescribeAddonReleaseResponseBody.Data.Release.Conditions]?

            public var createTime: String?

            public var dashboardCount: Int64?

            public var environmentId: String?

            public var exporterCount: Int64?

            public var haveConfig: Bool?

            public var installUserId: String?

            public var language: String?

            public var managed: Bool?

            public var regionId: String?

            public var releaseId: String?

            public var releaseName: String?

            public var scene: String?

            public var status: String?

            public var updateTime: String?

            public var userID: String?

            public var version: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.addonName != nil {
                    map["AddonName"] = self.addonName!
                }
                if self.alertRuleCount != nil {
                    map["AlertRuleCount"] = self.alertRuleCount!
                }
                if self.conditions != nil {
                    var tmp : [Any] = []
                    for k in self.conditions! {
                        tmp.append(k.toMap())
                    }
                    map["Conditions"] = tmp
                }
                if self.createTime != nil {
                    map["CreateTime"] = self.createTime!
                }
                if self.dashboardCount != nil {
                    map["DashboardCount"] = self.dashboardCount!
                }
                if self.environmentId != nil {
                    map["EnvironmentId"] = self.environmentId!
                }
                if self.exporterCount != nil {
                    map["ExporterCount"] = self.exporterCount!
                }
                if self.haveConfig != nil {
                    map["HaveConfig"] = self.haveConfig!
                }
                if self.installUserId != nil {
                    map["InstallUserId"] = self.installUserId!
                }
                if self.language != nil {
                    map["Language"] = self.language!
                }
                if self.managed != nil {
                    map["Managed"] = self.managed!
                }
                if self.regionId != nil {
                    map["RegionId"] = self.regionId!
                }
                if self.releaseId != nil {
                    map["ReleaseId"] = self.releaseId!
                }
                if self.releaseName != nil {
                    map["ReleaseName"] = self.releaseName!
                }
                if self.scene != nil {
                    map["Scene"] = self.scene!
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                if self.updateTime != nil {
                    map["UpdateTime"] = self.updateTime!
                }
                if self.userID != nil {
                    map["UserID"] = self.userID!
                }
                if self.version != nil {
                    map["Version"] = self.version!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AddonName"] as? String {
                    self.addonName = value
                }
                if let value = dict["AlertRuleCount"] as? Int64 {
                    self.alertRuleCount = value
                }
                if let value = dict["Conditions"] as? [Any?] {
                    var tmp : [DescribeAddonReleaseResponseBody.Data.Release.Conditions] = []
                    for v in value {
                        if v != nil {
                            var model = DescribeAddonReleaseResponseBody.Data.Release.Conditions()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.conditions = tmp
                }
                if let value = dict["CreateTime"] as? String {
                    self.createTime = value
                }
                if let value = dict["DashboardCount"] as? Int64 {
                    self.dashboardCount = value
                }
                if let value = dict["EnvironmentId"] as? String {
                    self.environmentId = value
                }
                if let value = dict["ExporterCount"] as? Int64 {
                    self.exporterCount = value
                }
                if let value = dict["HaveConfig"] as? Bool {
                    self.haveConfig = value
                }
                if let value = dict["InstallUserId"] as? String {
                    self.installUserId = value
                }
                if let value = dict["Language"] as? String {
                    self.language = value
                }
                if let value = dict["Managed"] as? Bool {
                    self.managed = value
                }
                if let value = dict["RegionId"] as? String {
                    self.regionId = value
                }
                if let value = dict["ReleaseId"] as? String {
                    self.releaseId = value
                }
                if let value = dict["ReleaseName"] as? String {
                    self.releaseName = value
                }
                if let value = dict["Scene"] as? String {
                    self.scene = value
                }
                if let value = dict["Status"] as? String {
                    self.status = value
                }
                if let value = dict["UpdateTime"] as? String {
                    self.updateTime = value
                }
                if let value = dict["UserID"] as? String {
                    self.userID = value
                }
                if let value = dict["Version"] as? String {
                    self.version = value
                }
            }
        }
        public var config: String?

        public var release: DescribeAddonReleaseResponseBody.Data.Release?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.release?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.config != nil {
                map["Config"] = self.config!
            }
            if self.release != nil {
                map["Release"] = self.release?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Config"] as? String {
                self.config = value
            }
            if let value = dict["Release"] as? [String: Any?] {
                var model = DescribeAddonReleaseResponseBody.Data.Release()
                model.fromMap(value)
                self.release = model
            }
        }
    }
    public var code: String?

    public var data: DescribeAddonReleaseResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = DescribeAddonReleaseResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? String {
            self.success = value
        }
    }
}

public class DescribeAddonReleaseResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeAddonReleaseResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeAddonReleaseResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeContactGroupsRequest : Tea.TeaModel {
    public var contactGroupName: String?

    public var groupIds: String?

    public var isDetail: Bool?

    public var page: Int64?

    public var regionId: String?

    public var size: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.contactGroupName != nil {
            map["ContactGroupName"] = self.contactGroupName!
        }
        if self.groupIds != nil {
            map["GroupIds"] = self.groupIds!
        }
        if self.isDetail != nil {
            map["IsDetail"] = self.isDetail!
        }
        if self.page != nil {
            map["Page"] = self.page!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.size != nil {
            map["Size"] = self.size!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ContactGroupName"] as? String {
            self.contactGroupName = value
        }
        if let value = dict["GroupIds"] as? String {
            self.groupIds = value
        }
        if let value = dict["IsDetail"] as? Bool {
            self.isDetail = value
        }
        if let value = dict["Page"] as? Int64 {
            self.page = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Size"] as? Int64 {
            self.size = value
        }
    }
}

public class DescribeContactGroupsResponseBody : Tea.TeaModel {
    public class PageBean : Tea.TeaModel {
        public class AlertContactGroups : Tea.TeaModel {
            public class Contacts : Tea.TeaModel {
                public var armsContactId: Int64?

                public var contactId: Double?

                public var contactName: String?

                public var email: String?

                public var phone: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.armsContactId != nil {
                        map["ArmsContactId"] = self.armsContactId!
                    }
                    if self.contactId != nil {
                        map["ContactId"] = self.contactId!
                    }
                    if self.contactName != nil {
                        map["ContactName"] = self.contactName!
                    }
                    if self.email != nil {
                        map["Email"] = self.email!
                    }
                    if self.phone != nil {
                        map["Phone"] = self.phone!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["ArmsContactId"] as? Int64 {
                        self.armsContactId = value
                    }
                    if let value = dict["ContactId"] as? Double {
                        self.contactId = value
                    }
                    if let value = dict["ContactName"] as? String {
                        self.contactName = value
                    }
                    if let value = dict["Email"] as? String {
                        self.email = value
                    }
                    if let value = dict["Phone"] as? String {
                        self.phone = value
                    }
                }
            }
            public var armsContactGroupId: Int64?

            public var contactGroupId: Double?

            public var contactGroupName: String?

            public var contacts: [DescribeContactGroupsResponseBody.PageBean.AlertContactGroups.Contacts]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.armsContactGroupId != nil {
                    map["ArmsContactGroupId"] = self.armsContactGroupId!
                }
                if self.contactGroupId != nil {
                    map["ContactGroupId"] = self.contactGroupId!
                }
                if self.contactGroupName != nil {
                    map["ContactGroupName"] = self.contactGroupName!
                }
                if self.contacts != nil {
                    var tmp : [Any] = []
                    for k in self.contacts! {
                        tmp.append(k.toMap())
                    }
                    map["Contacts"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ArmsContactGroupId"] as? Int64 {
                    self.armsContactGroupId = value
                }
                if let value = dict["ContactGroupId"] as? Double {
                    self.contactGroupId = value
                }
                if let value = dict["ContactGroupName"] as? String {
                    self.contactGroupName = value
                }
                if let value = dict["Contacts"] as? [Any?] {
                    var tmp : [DescribeContactGroupsResponseBody.PageBean.AlertContactGroups.Contacts] = []
                    for v in value {
                        if v != nil {
                            var model = DescribeContactGroupsResponseBody.PageBean.AlertContactGroups.Contacts()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.contacts = tmp
                }
            }
        }
        public var alertContactGroups: [DescribeContactGroupsResponseBody.PageBean.AlertContactGroups]?

        public var page: Int64?

        public var size: Int64?

        public var total: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.alertContactGroups != nil {
                var tmp : [Any] = []
                for k in self.alertContactGroups! {
                    tmp.append(k.toMap())
                }
                map["AlertContactGroups"] = tmp
            }
            if self.page != nil {
                map["Page"] = self.page!
            }
            if self.size != nil {
                map["Size"] = self.size!
            }
            if self.total != nil {
                map["Total"] = self.total!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AlertContactGroups"] as? [Any?] {
                var tmp : [DescribeContactGroupsResponseBody.PageBean.AlertContactGroups] = []
                for v in value {
                    if v != nil {
                        var model = DescribeContactGroupsResponseBody.PageBean.AlertContactGroups()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.alertContactGroups = tmp
            }
            if let value = dict["Page"] as? Int64 {
                self.page = value
            }
            if let value = dict["Size"] as? Int64 {
                self.size = value
            }
            if let value = dict["Total"] as? Int64 {
                self.total = value
            }
        }
    }
    public var pageBean: DescribeContactGroupsResponseBody.PageBean?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.pageBean?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageBean != nil {
            map["PageBean"] = self.pageBean?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageBean"] as? [String: Any?] {
            var model = DescribeContactGroupsResponseBody.PageBean()
            model.fromMap(value)
            self.pageBean = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeContactGroupsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeContactGroupsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeContactGroupsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeContactsRequest : Tea.TeaModel {
    public var contactIds: String?

    public var contactName: String?

    public var email: String?

    public var page: Int64?

    public var phone: String?

    public var regionId: String?

    public var size: Int64?

    public var verbose: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.contactIds != nil {
            map["ContactIds"] = self.contactIds!
        }
        if self.contactName != nil {
            map["ContactName"] = self.contactName!
        }
        if self.email != nil {
            map["Email"] = self.email!
        }
        if self.page != nil {
            map["Page"] = self.page!
        }
        if self.phone != nil {
            map["Phone"] = self.phone!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.size != nil {
            map["Size"] = self.size!
        }
        if self.verbose != nil {
            map["Verbose"] = self.verbose!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ContactIds"] as? String {
            self.contactIds = value
        }
        if let value = dict["ContactName"] as? String {
            self.contactName = value
        }
        if let value = dict["Email"] as? String {
            self.email = value
        }
        if let value = dict["Page"] as? Int64 {
            self.page = value
        }
        if let value = dict["Phone"] as? String {
            self.phone = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Size"] as? Int64 {
            self.size = value
        }
        if let value = dict["Verbose"] as? String {
            self.verbose = value
        }
    }
}

public class DescribeContactsResponseBody : Tea.TeaModel {
    public class PageBean : Tea.TeaModel {
        public class AlertContacts : Tea.TeaModel {
            public var armsContactId: Int64?

            public var contactId: Double?

            public var contactName: String?

            public var email: String?

            public var isEmailVerify: Bool?

            public var isVerify: Bool?

            public var phone: String?

            public var reissueSendNotice: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.armsContactId != nil {
                    map["ArmsContactId"] = self.armsContactId!
                }
                if self.contactId != nil {
                    map["ContactId"] = self.contactId!
                }
                if self.contactName != nil {
                    map["ContactName"] = self.contactName!
                }
                if self.email != nil {
                    map["Email"] = self.email!
                }
                if self.isEmailVerify != nil {
                    map["IsEmailVerify"] = self.isEmailVerify!
                }
                if self.isVerify != nil {
                    map["IsVerify"] = self.isVerify!
                }
                if self.phone != nil {
                    map["Phone"] = self.phone!
                }
                if self.reissueSendNotice != nil {
                    map["ReissueSendNotice"] = self.reissueSendNotice!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ArmsContactId"] as? Int64 {
                    self.armsContactId = value
                }
                if let value = dict["ContactId"] as? Double {
                    self.contactId = value
                }
                if let value = dict["ContactName"] as? String {
                    self.contactName = value
                }
                if let value = dict["Email"] as? String {
                    self.email = value
                }
                if let value = dict["IsEmailVerify"] as? Bool {
                    self.isEmailVerify = value
                }
                if let value = dict["IsVerify"] as? Bool {
                    self.isVerify = value
                }
                if let value = dict["Phone"] as? String {
                    self.phone = value
                }
                if let value = dict["ReissueSendNotice"] as? Int64 {
                    self.reissueSendNotice = value
                }
            }
        }
        public var alertContacts: [DescribeContactsResponseBody.PageBean.AlertContacts]?

        public var page: Int64?

        public var size: Int64?

        public var total: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.alertContacts != nil {
                var tmp : [Any] = []
                for k in self.alertContacts! {
                    tmp.append(k.toMap())
                }
                map["AlertContacts"] = tmp
            }
            if self.page != nil {
                map["Page"] = self.page!
            }
            if self.size != nil {
                map["Size"] = self.size!
            }
            if self.total != nil {
                map["Total"] = self.total!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AlertContacts"] as? [Any?] {
                var tmp : [DescribeContactsResponseBody.PageBean.AlertContacts] = []
                for v in value {
                    if v != nil {
                        var model = DescribeContactsResponseBody.PageBean.AlertContacts()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.alertContacts = tmp
            }
            if let value = dict["Page"] as? Int64 {
                self.page = value
            }
            if let value = dict["Size"] as? Int64 {
                self.size = value
            }
            if let value = dict["Total"] as? Int64 {
                self.total = value
            }
        }
    }
    public var pageBean: DescribeContactsResponseBody.PageBean?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.pageBean?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageBean != nil {
            map["PageBean"] = self.pageBean?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageBean"] as? [String: Any?] {
            var model = DescribeContactsResponseBody.PageBean()
            model.fromMap(value)
            self.pageBean = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeContactsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeContactsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeContactsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeDispatchRuleRequest : Tea.TeaModel {
    public var id: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? String {
            self.id = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DescribeDispatchRuleResponseBody : Tea.TeaModel {
    public class DispatchRule : Tea.TeaModel {
        public class GroupRules : Tea.TeaModel {
            public var groupId: Int64?

            public var groupInterval: Int64?

            public var groupWaitTime: Int64?

            public var groupingFields: [String]?

            public var repeatInterval: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.groupId != nil {
                    map["GroupId"] = self.groupId!
                }
                if self.groupInterval != nil {
                    map["GroupInterval"] = self.groupInterval!
                }
                if self.groupWaitTime != nil {
                    map["GroupWaitTime"] = self.groupWaitTime!
                }
                if self.groupingFields != nil {
                    map["GroupingFields"] = self.groupingFields!
                }
                if self.repeatInterval != nil {
                    map["RepeatInterval"] = self.repeatInterval!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["GroupId"] as? Int64 {
                    self.groupId = value
                }
                if let value = dict["GroupInterval"] as? Int64 {
                    self.groupInterval = value
                }
                if let value = dict["GroupWaitTime"] as? Int64 {
                    self.groupWaitTime = value
                }
                if let value = dict["GroupingFields"] as? [String] {
                    self.groupingFields = value
                }
                if let value = dict["RepeatInterval"] as? Int64 {
                    self.repeatInterval = value
                }
            }
        }
        public class LabelMatchExpressionGrid : Tea.TeaModel {
            public class LabelMatchExpressionGroups : Tea.TeaModel {
                public class LabelMatchExpressions : Tea.TeaModel {
                    public var key: String?

                    public var operator_: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.key != nil {
                            map["Key"] = self.key!
                        }
                        if self.operator_ != nil {
                            map["Operator"] = self.operator_!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Key"] as? String {
                            self.key = value
                        }
                        if let value = dict["Operator"] as? String {
                            self.operator_ = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public var labelMatchExpressions: [DescribeDispatchRuleResponseBody.DispatchRule.LabelMatchExpressionGrid.LabelMatchExpressionGroups.LabelMatchExpressions]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.labelMatchExpressions != nil {
                        var tmp : [Any] = []
                        for k in self.labelMatchExpressions! {
                            tmp.append(k.toMap())
                        }
                        map["LabelMatchExpressions"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["LabelMatchExpressions"] as? [Any?] {
                        var tmp : [DescribeDispatchRuleResponseBody.DispatchRule.LabelMatchExpressionGrid.LabelMatchExpressionGroups.LabelMatchExpressions] = []
                        for v in value {
                            if v != nil {
                                var model = DescribeDispatchRuleResponseBody.DispatchRule.LabelMatchExpressionGrid.LabelMatchExpressionGroups.LabelMatchExpressions()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.labelMatchExpressions = tmp
                    }
                }
            }
            public var labelMatchExpressionGroups: [DescribeDispatchRuleResponseBody.DispatchRule.LabelMatchExpressionGrid.LabelMatchExpressionGroups]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.labelMatchExpressionGroups != nil {
                    var tmp : [Any] = []
                    for k in self.labelMatchExpressionGroups! {
                        tmp.append(k.toMap())
                    }
                    map["LabelMatchExpressionGroups"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["LabelMatchExpressionGroups"] as? [Any?] {
                    var tmp : [DescribeDispatchRuleResponseBody.DispatchRule.LabelMatchExpressionGrid.LabelMatchExpressionGroups] = []
                    for v in value {
                        if v != nil {
                            var model = DescribeDispatchRuleResponseBody.DispatchRule.LabelMatchExpressionGrid.LabelMatchExpressionGroups()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.labelMatchExpressionGroups = tmp
                }
            }
        }
        public class NotifyRules : Tea.TeaModel {
            public class NotifyObjects : Tea.TeaModel {
                public var name: String?

                public var notifyObjectId: String?

                public var notifyType: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.name != nil {
                        map["Name"] = self.name!
                    }
                    if self.notifyObjectId != nil {
                        map["NotifyObjectId"] = self.notifyObjectId!
                    }
                    if self.notifyType != nil {
                        map["NotifyType"] = self.notifyType!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Name"] as? String {
                        self.name = value
                    }
                    if let value = dict["NotifyObjectId"] as? String {
                        self.notifyObjectId = value
                    }
                    if let value = dict["NotifyType"] as? String {
                        self.notifyType = value
                    }
                }
            }
            public var notifyChannels: [String]?

            public var notifyObjects: [DescribeDispatchRuleResponseBody.DispatchRule.NotifyRules.NotifyObjects]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.notifyChannels != nil {
                    map["NotifyChannels"] = self.notifyChannels!
                }
                if self.notifyObjects != nil {
                    var tmp : [Any] = []
                    for k in self.notifyObjects! {
                        tmp.append(k.toMap())
                    }
                    map["NotifyObjects"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["NotifyChannels"] as? [String] {
                    self.notifyChannels = value
                }
                if let value = dict["NotifyObjects"] as? [Any?] {
                    var tmp : [DescribeDispatchRuleResponseBody.DispatchRule.NotifyRules.NotifyObjects] = []
                    for v in value {
                        if v != nil {
                            var model = DescribeDispatchRuleResponseBody.DispatchRule.NotifyRules.NotifyObjects()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.notifyObjects = tmp
                }
            }
        }
        public var dispatchType: String?

        public var groupRules: [DescribeDispatchRuleResponseBody.DispatchRule.GroupRules]?

        public var isRecover: Bool?

        public var labelMatchExpressionGrid: DescribeDispatchRuleResponseBody.DispatchRule.LabelMatchExpressionGrid?

        public var name: String?

        public var notifyRules: [DescribeDispatchRuleResponseBody.DispatchRule.NotifyRules]?

        public var ruleId: Int64?

        public var state: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.labelMatchExpressionGrid?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.dispatchType != nil {
                map["DispatchType"] = self.dispatchType!
            }
            if self.groupRules != nil {
                var tmp : [Any] = []
                for k in self.groupRules! {
                    tmp.append(k.toMap())
                }
                map["GroupRules"] = tmp
            }
            if self.isRecover != nil {
                map["IsRecover"] = self.isRecover!
            }
            if self.labelMatchExpressionGrid != nil {
                map["LabelMatchExpressionGrid"] = self.labelMatchExpressionGrid?.toMap()
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.notifyRules != nil {
                var tmp : [Any] = []
                for k in self.notifyRules! {
                    tmp.append(k.toMap())
                }
                map["NotifyRules"] = tmp
            }
            if self.ruleId != nil {
                map["RuleId"] = self.ruleId!
            }
            if self.state != nil {
                map["State"] = self.state!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DispatchType"] as? String {
                self.dispatchType = value
            }
            if let value = dict["GroupRules"] as? [Any?] {
                var tmp : [DescribeDispatchRuleResponseBody.DispatchRule.GroupRules] = []
                for v in value {
                    if v != nil {
                        var model = DescribeDispatchRuleResponseBody.DispatchRule.GroupRules()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.groupRules = tmp
            }
            if let value = dict["IsRecover"] as? Bool {
                self.isRecover = value
            }
            if let value = dict["LabelMatchExpressionGrid"] as? [String: Any?] {
                var model = DescribeDispatchRuleResponseBody.DispatchRule.LabelMatchExpressionGrid()
                model.fromMap(value)
                self.labelMatchExpressionGrid = model
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["NotifyRules"] as? [Any?] {
                var tmp : [DescribeDispatchRuleResponseBody.DispatchRule.NotifyRules] = []
                for v in value {
                    if v != nil {
                        var model = DescribeDispatchRuleResponseBody.DispatchRule.NotifyRules()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.notifyRules = tmp
            }
            if let value = dict["RuleId"] as? Int64 {
                self.ruleId = value
            }
            if let value = dict["State"] as? String {
                self.state = value
            }
        }
    }
    public var dispatchRule: DescribeDispatchRuleResponseBody.DispatchRule?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.dispatchRule?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dispatchRule != nil {
            map["DispatchRule"] = self.dispatchRule?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DispatchRule"] as? [String: Any?] {
            var model = DescribeDispatchRuleResponseBody.DispatchRule()
            model.fromMap(value)
            self.dispatchRule = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeDispatchRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeDispatchRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeDispatchRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeEnvCustomJobRequest : Tea.TeaModel {
    public var customJobName: String?

    public var encryptYaml: Bool?

    public var environmentId: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.customJobName != nil {
            map["CustomJobName"] = self.customJobName!
        }
        if self.encryptYaml != nil {
            map["EncryptYaml"] = self.encryptYaml!
        }
        if self.environmentId != nil {
            map["EnvironmentId"] = self.environmentId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CustomJobName"] as? String {
            self.customJobName = value
        }
        if let value = dict["EncryptYaml"] as? Bool {
            self.encryptYaml = value
        }
        if let value = dict["EnvironmentId"] as? String {
            self.environmentId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DescribeEnvCustomJobResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var configYaml: String?

        public var customJobName: String?

        public var environmentId: String?

        public var regionId: String?

        public var status: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.configYaml != nil {
                map["ConfigYaml"] = self.configYaml!
            }
            if self.customJobName != nil {
                map["CustomJobName"] = self.customJobName!
            }
            if self.environmentId != nil {
                map["EnvironmentId"] = self.environmentId!
            }
            if self.regionId != nil {
                map["RegionId"] = self.regionId!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ConfigYaml"] as? String {
                self.configYaml = value
            }
            if let value = dict["CustomJobName"] as? String {
                self.customJobName = value
            }
            if let value = dict["EnvironmentId"] as? String {
                self.environmentId = value
            }
            if let value = dict["RegionId"] as? String {
                self.regionId = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
        }
    }
    public var code: Int32?

    public var data: DescribeEnvCustomJobResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = DescribeEnvCustomJobResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeEnvCustomJobResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeEnvCustomJobResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeEnvCustomJobResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeEnvDropMetricsRuleRequest : Tea.TeaModel {
    public var environmentId: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.environmentId != nil {
            map["EnvironmentId"] = self.environmentId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EnvironmentId"] as? String {
            self.environmentId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DescribeEnvDropMetricsRuleResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var dropMetrics: String?

        public var ruleName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.dropMetrics != nil {
                map["DropMetrics"] = self.dropMetrics!
            }
            if self.ruleName != nil {
                map["RuleName"] = self.ruleName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DropMetrics"] as? String {
                self.dropMetrics = value
            }
            if let value = dict["RuleName"] as? String {
                self.ruleName = value
            }
        }
    }
    public var code: Int32?

    public var data: DescribeEnvDropMetricsRuleResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = DescribeEnvDropMetricsRuleResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeEnvDropMetricsRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeEnvDropMetricsRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeEnvDropMetricsRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeEnvPodMonitorRequest : Tea.TeaModel {
    public var environmentId: String?

    public var namespace: String?

    public var podMonitorName: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.environmentId != nil {
            map["EnvironmentId"] = self.environmentId!
        }
        if self.namespace != nil {
            map["Namespace"] = self.namespace!
        }
        if self.podMonitorName != nil {
            map["PodMonitorName"] = self.podMonitorName!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EnvironmentId"] as? String {
            self.environmentId = value
        }
        if let value = dict["Namespace"] as? String {
            self.namespace = value
        }
        if let value = dict["PodMonitorName"] as? String {
            self.podMonitorName = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DescribeEnvPodMonitorResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var configYaml: String?

        public var environmentId: String?

        public var namespace: String?

        public var podMonitorName: String?

        public var regionId: String?

        public var status: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.configYaml != nil {
                map["ConfigYaml"] = self.configYaml!
            }
            if self.environmentId != nil {
                map["EnvironmentId"] = self.environmentId!
            }
            if self.namespace != nil {
                map["Namespace"] = self.namespace!
            }
            if self.podMonitorName != nil {
                map["PodMonitorName"] = self.podMonitorName!
            }
            if self.regionId != nil {
                map["RegionId"] = self.regionId!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ConfigYaml"] as? String {
                self.configYaml = value
            }
            if let value = dict["EnvironmentId"] as? String {
                self.environmentId = value
            }
            if let value = dict["Namespace"] as? String {
                self.namespace = value
            }
            if let value = dict["PodMonitorName"] as? String {
                self.podMonitorName = value
            }
            if let value = dict["RegionId"] as? String {
                self.regionId = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
        }
    }
    public var code: Int32?

    public var data: DescribeEnvPodMonitorResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = DescribeEnvPodMonitorResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeEnvPodMonitorResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeEnvPodMonitorResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeEnvPodMonitorResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeEnvServiceMonitorRequest : Tea.TeaModel {
    public var environmentId: String?

    public var namespace: String?

    public var regionId: String?

    public var serviceMonitorName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.environmentId != nil {
            map["EnvironmentId"] = self.environmentId!
        }
        if self.namespace != nil {
            map["Namespace"] = self.namespace!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.serviceMonitorName != nil {
            map["ServiceMonitorName"] = self.serviceMonitorName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EnvironmentId"] as? String {
            self.environmentId = value
        }
        if let value = dict["Namespace"] as? String {
            self.namespace = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ServiceMonitorName"] as? String {
            self.serviceMonitorName = value
        }
    }
}

public class DescribeEnvServiceMonitorResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var configYaml: String?

        public var environmentId: String?

        public var namespace: String?

        public var regionId: String?

        public var serviceMonitorName: String?

        public var status: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.configYaml != nil {
                map["ConfigYaml"] = self.configYaml!
            }
            if self.environmentId != nil {
                map["EnvironmentId"] = self.environmentId!
            }
            if self.namespace != nil {
                map["Namespace"] = self.namespace!
            }
            if self.regionId != nil {
                map["RegionId"] = self.regionId!
            }
            if self.serviceMonitorName != nil {
                map["ServiceMonitorName"] = self.serviceMonitorName!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ConfigYaml"] as? String {
                self.configYaml = value
            }
            if let value = dict["EnvironmentId"] as? String {
                self.environmentId = value
            }
            if let value = dict["Namespace"] as? String {
                self.namespace = value
            }
            if let value = dict["RegionId"] as? String {
                self.regionId = value
            }
            if let value = dict["ServiceMonitorName"] as? String {
                self.serviceMonitorName = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
        }
    }
    public var code: Int32?

    public var data: DescribeEnvServiceMonitorResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = DescribeEnvServiceMonitorResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeEnvServiceMonitorResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeEnvServiceMonitorResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeEnvServiceMonitorResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeEnvironmentRequest : Tea.TeaModel {
    public var environmentId: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.environmentId != nil {
            map["EnvironmentId"] = self.environmentId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EnvironmentId"] as? String {
            self.environmentId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DescribeEnvironmentResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Tags : Tea.TeaModel {
            public var key: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.key != nil {
                    map["Key"] = self.key!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Key"] as? String {
                    self.key = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public var bindResourceId: String?

        public var bindResourceProfile: String?

        public var bindResourceStatus: String?

        public var bindResourceStoreDuration: String?

        public var bindResourceType: String?

        public var bindVpcCidr: String?

        public var dbInstanceStatus: String?

        public var environmentId: String?

        public var environmentName: String?

        public var environmentSubType: String?

        public var environmentType: String?

        public var feePackage: String?

        public var grafaDataSourceName: String?

        public var grafanaDatasourceUid: String?

        public var grafanaFolderTitle: String?

        public var grafanaFolderUid: String?

        public var grafanaFolderUrl: String?

        public var grafanaWorkspaceId: String?

        public var managedType: String?

        public var prometheusInstanceId: String?

        public var prometheusInstanceName: String?

        public var regionId: String?

        public var resourceGroupId: String?

        public var securityGroupId: String?

        public var tags: [DescribeEnvironmentResponseBody.Data.Tags]?

        public var userId: String?

        public var vpcId: String?

        public var vswitchId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.bindResourceId != nil {
                map["BindResourceId"] = self.bindResourceId!
            }
            if self.bindResourceProfile != nil {
                map["BindResourceProfile"] = self.bindResourceProfile!
            }
            if self.bindResourceStatus != nil {
                map["BindResourceStatus"] = self.bindResourceStatus!
            }
            if self.bindResourceStoreDuration != nil {
                map["BindResourceStoreDuration"] = self.bindResourceStoreDuration!
            }
            if self.bindResourceType != nil {
                map["BindResourceType"] = self.bindResourceType!
            }
            if self.bindVpcCidr != nil {
                map["BindVpcCidr"] = self.bindVpcCidr!
            }
            if self.dbInstanceStatus != nil {
                map["DbInstanceStatus"] = self.dbInstanceStatus!
            }
            if self.environmentId != nil {
                map["EnvironmentId"] = self.environmentId!
            }
            if self.environmentName != nil {
                map["EnvironmentName"] = self.environmentName!
            }
            if self.environmentSubType != nil {
                map["EnvironmentSubType"] = self.environmentSubType!
            }
            if self.environmentType != nil {
                map["EnvironmentType"] = self.environmentType!
            }
            if self.feePackage != nil {
                map["FeePackage"] = self.feePackage!
            }
            if self.grafaDataSourceName != nil {
                map["GrafaDataSourceName"] = self.grafaDataSourceName!
            }
            if self.grafanaDatasourceUid != nil {
                map["GrafanaDatasourceUid"] = self.grafanaDatasourceUid!
            }
            if self.grafanaFolderTitle != nil {
                map["GrafanaFolderTitle"] = self.grafanaFolderTitle!
            }
            if self.grafanaFolderUid != nil {
                map["GrafanaFolderUid"] = self.grafanaFolderUid!
            }
            if self.grafanaFolderUrl != nil {
                map["GrafanaFolderUrl"] = self.grafanaFolderUrl!
            }
            if self.grafanaWorkspaceId != nil {
                map["GrafanaWorkspaceId"] = self.grafanaWorkspaceId!
            }
            if self.managedType != nil {
                map["ManagedType"] = self.managedType!
            }
            if self.prometheusInstanceId != nil {
                map["PrometheusInstanceId"] = self.prometheusInstanceId!
            }
            if self.prometheusInstanceName != nil {
                map["PrometheusInstanceName"] = self.prometheusInstanceName!
            }
            if self.regionId != nil {
                map["RegionId"] = self.regionId!
            }
            if self.resourceGroupId != nil {
                map["ResourceGroupId"] = self.resourceGroupId!
            }
            if self.securityGroupId != nil {
                map["SecurityGroupId"] = self.securityGroupId!
            }
            if self.tags != nil {
                var tmp : [Any] = []
                for k in self.tags! {
                    tmp.append(k.toMap())
                }
                map["Tags"] = tmp
            }
            if self.userId != nil {
                map["UserId"] = self.userId!
            }
            if self.vpcId != nil {
                map["VpcId"] = self.vpcId!
            }
            if self.vswitchId != nil {
                map["VswitchId"] = self.vswitchId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["BindResourceId"] as? String {
                self.bindResourceId = value
            }
            if let value = dict["BindResourceProfile"] as? String {
                self.bindResourceProfile = value
            }
            if let value = dict["BindResourceStatus"] as? String {
                self.bindResourceStatus = value
            }
            if let value = dict["BindResourceStoreDuration"] as? String {
                self.bindResourceStoreDuration = value
            }
            if let value = dict["BindResourceType"] as? String {
                self.bindResourceType = value
            }
            if let value = dict["BindVpcCidr"] as? String {
                self.bindVpcCidr = value
            }
            if let value = dict["DbInstanceStatus"] as? String {
                self.dbInstanceStatus = value
            }
            if let value = dict["EnvironmentId"] as? String {
                self.environmentId = value
            }
            if let value = dict["EnvironmentName"] as? String {
                self.environmentName = value
            }
            if let value = dict["EnvironmentSubType"] as? String {
                self.environmentSubType = value
            }
            if let value = dict["EnvironmentType"] as? String {
                self.environmentType = value
            }
            if let value = dict["FeePackage"] as? String {
                self.feePackage = value
            }
            if let value = dict["GrafaDataSourceName"] as? String {
                self.grafaDataSourceName = value
            }
            if let value = dict["GrafanaDatasourceUid"] as? String {
                self.grafanaDatasourceUid = value
            }
            if let value = dict["GrafanaFolderTitle"] as? String {
                self.grafanaFolderTitle = value
            }
            if let value = dict["GrafanaFolderUid"] as? String {
                self.grafanaFolderUid = value
            }
            if let value = dict["GrafanaFolderUrl"] as? String {
                self.grafanaFolderUrl = value
            }
            if let value = dict["GrafanaWorkspaceId"] as? String {
                self.grafanaWorkspaceId = value
            }
            if let value = dict["ManagedType"] as? String {
                self.managedType = value
            }
            if let value = dict["PrometheusInstanceId"] as? String {
                self.prometheusInstanceId = value
            }
            if let value = dict["PrometheusInstanceName"] as? String {
                self.prometheusInstanceName = value
            }
            if let value = dict["RegionId"] as? String {
                self.regionId = value
            }
            if let value = dict["ResourceGroupId"] as? String {
                self.resourceGroupId = value
            }
            if let value = dict["SecurityGroupId"] as? String {
                self.securityGroupId = value
            }
            if let value = dict["Tags"] as? [Any?] {
                var tmp : [DescribeEnvironmentResponseBody.Data.Tags] = []
                for v in value {
                    if v != nil {
                        var model = DescribeEnvironmentResponseBody.Data.Tags()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.tags = tmp
            }
            if let value = dict["UserId"] as? String {
                self.userId = value
            }
            if let value = dict["VpcId"] as? String {
                self.vpcId = value
            }
            if let value = dict["VswitchId"] as? String {
                self.vswitchId = value
            }
        }
    }
    public var code: Int32?

    public var data: DescribeEnvironmentResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = DescribeEnvironmentResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeEnvironmentResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeEnvironmentResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeEnvironmentResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeEnvironmentFeatureRequest : Tea.TeaModel {
    public var aliyunLang: String?

    public var environmentId: String?

    public var featureName: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.aliyunLang != nil {
            map["AliyunLang"] = self.aliyunLang!
        }
        if self.environmentId != nil {
            map["EnvironmentId"] = self.environmentId!
        }
        if self.featureName != nil {
            map["FeatureName"] = self.featureName!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AliyunLang"] as? String {
            self.aliyunLang = value
        }
        if let value = dict["EnvironmentId"] as? String {
            self.environmentId = value
        }
        if let value = dict["FeatureName"] as? String {
            self.featureName = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DescribeEnvironmentFeatureResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Feature : Tea.TeaModel {
            public var alias: String?

            public var config: [String: String]?

            public var description_: String?

            public var environmentId: String?

            public var icon: String?

            public var language: String?

            public var latestVersion: String?

            public var managed: Bool?

            public var name: String?

            public var status: String?

            public var version: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.alias != nil {
                    map["Alias"] = self.alias!
                }
                if self.config != nil {
                    map["Config"] = self.config!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.environmentId != nil {
                    map["EnvironmentId"] = self.environmentId!
                }
                if self.icon != nil {
                    map["Icon"] = self.icon!
                }
                if self.language != nil {
                    map["Language"] = self.language!
                }
                if self.latestVersion != nil {
                    map["LatestVersion"] = self.latestVersion!
                }
                if self.managed != nil {
                    map["Managed"] = self.managed!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                if self.version != nil {
                    map["Version"] = self.version!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Alias"] as? String {
                    self.alias = value
                }
                if let value = dict["Config"] as? [String: String] {
                    self.config = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["EnvironmentId"] as? String {
                    self.environmentId = value
                }
                if let value = dict["Icon"] as? String {
                    self.icon = value
                }
                if let value = dict["Language"] as? String {
                    self.language = value
                }
                if let value = dict["LatestVersion"] as? String {
                    self.latestVersion = value
                }
                if let value = dict["Managed"] as? Bool {
                    self.managed = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["Status"] as? String {
                    self.status = value
                }
                if let value = dict["Version"] as? String {
                    self.version = value
                }
            }
        }
        public class FeatureStatus : Tea.TeaModel {
            public class FeatureContainers : Tea.TeaModel {
                public var args: [String]?

                public var image: String?

                public var name: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.args != nil {
                        map["Args"] = self.args!
                    }
                    if self.image != nil {
                        map["Image"] = self.image!
                    }
                    if self.name != nil {
                        map["Name"] = self.name!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Args"] as? [String] {
                        self.args = value
                    }
                    if let value = dict["Image"] as? String {
                        self.image = value
                    }
                    if let value = dict["Name"] as? String {
                        self.name = value
                    }
                }
            }
            public var bindResourceId: String?

            public var featureContainers: [DescribeEnvironmentFeatureResponseBody.Data.FeatureStatus.FeatureContainers]?

            public var ips: [String]?

            public var name: String?

            public var namespace: String?

            public var securityGroupId: String?

            public var status: String?

            public var vSwitchId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.bindResourceId != nil {
                    map["BindResourceId"] = self.bindResourceId!
                }
                if self.featureContainers != nil {
                    var tmp : [Any] = []
                    for k in self.featureContainers! {
                        tmp.append(k.toMap())
                    }
                    map["FeatureContainers"] = tmp
                }
                if self.ips != nil {
                    map["Ips"] = self.ips!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.namespace != nil {
                    map["Namespace"] = self.namespace!
                }
                if self.securityGroupId != nil {
                    map["SecurityGroupId"] = self.securityGroupId!
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                if self.vSwitchId != nil {
                    map["VSwitchId"] = self.vSwitchId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["BindResourceId"] as? String {
                    self.bindResourceId = value
                }
                if let value = dict["FeatureContainers"] as? [Any?] {
                    var tmp : [DescribeEnvironmentFeatureResponseBody.Data.FeatureStatus.FeatureContainers] = []
                    for v in value {
                        if v != nil {
                            var model = DescribeEnvironmentFeatureResponseBody.Data.FeatureStatus.FeatureContainers()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.featureContainers = tmp
                }
                if let value = dict["Ips"] as? [String] {
                    self.ips = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["Namespace"] as? String {
                    self.namespace = value
                }
                if let value = dict["SecurityGroupId"] as? String {
                    self.securityGroupId = value
                }
                if let value = dict["Status"] as? String {
                    self.status = value
                }
                if let value = dict["VSwitchId"] as? String {
                    self.vSwitchId = value
                }
            }
        }
        public var feature: DescribeEnvironmentFeatureResponseBody.Data.Feature?

        public var featureStatus: DescribeEnvironmentFeatureResponseBody.Data.FeatureStatus?

        public var config: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.feature?.validate()
            try self.featureStatus?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.feature != nil {
                map["Feature"] = self.feature?.toMap()
            }
            if self.featureStatus != nil {
                map["FeatureStatus"] = self.featureStatus?.toMap()
            }
            if self.config != nil {
                map["config"] = self.config!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Feature"] as? [String: Any?] {
                var model = DescribeEnvironmentFeatureResponseBody.Data.Feature()
                model.fromMap(value)
                self.feature = model
            }
            if let value = dict["FeatureStatus"] as? [String: Any?] {
                var model = DescribeEnvironmentFeatureResponseBody.Data.FeatureStatus()
                model.fromMap(value)
                self.featureStatus = model
            }
            if let value = dict["config"] as? String {
                self.config = value
            }
        }
    }
    public var code: Int32?

    public var data: DescribeEnvironmentFeatureResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = DescribeEnvironmentFeatureResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DescribeEnvironmentFeatureResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeEnvironmentFeatureResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeEnvironmentFeatureResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeIMRobotsRequest : Tea.TeaModel {
    public var page: Int64?

    public var robotIds: String?

    public var robotName: String?

    public var size: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.page != nil {
            map["Page"] = self.page!
        }
        if self.robotIds != nil {
            map["RobotIds"] = self.robotIds!
        }
        if self.robotName != nil {
            map["RobotName"] = self.robotName!
        }
        if self.size != nil {
            map["Size"] = self.size!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Page"] as? Int64 {
            self.page = value
        }
        if let value = dict["RobotIds"] as? String {
            self.robotIds = value
        }
        if let value = dict["RobotName"] as? String {
            self.robotName = value
        }
        if let value = dict["Size"] as? Int64 {
            self.size = value
        }
    }
}

public class DescribeIMRobotsResponseBody : Tea.TeaModel {
    public class PageBean : Tea.TeaModel {
        public class AlertIMRobots : Tea.TeaModel {
            public class DispatchRules : Tea.TeaModel {
                public var id: Int64?

                public var name: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.id != nil {
                        map["id"] = self.id!
                    }
                    if self.name != nil {
                        map["name"] = self.name!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["id"] as? Int64 {
                        self.id = value
                    }
                    if let value = dict["name"] as? String {
                        self.name = value
                    }
                }
            }
            public var createTime: String?

            public var dailyNoc: Bool?

            public var dailyNocTime: String?

            public var dingSignKey: String?

            public var dispatchRules: [DescribeIMRobotsResponseBody.PageBean.AlertIMRobots.DispatchRules]?

            public var robotAddr: String?

            public var robotId: Double?

            public var robotName: String?

            public var type: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.createTime != nil {
                    map["CreateTime"] = self.createTime!
                }
                if self.dailyNoc != nil {
                    map["DailyNoc"] = self.dailyNoc!
                }
                if self.dailyNocTime != nil {
                    map["DailyNocTime"] = self.dailyNocTime!
                }
                if self.dingSignKey != nil {
                    map["DingSignKey"] = self.dingSignKey!
                }
                if self.dispatchRules != nil {
                    var tmp : [Any] = []
                    for k in self.dispatchRules! {
                        tmp.append(k.toMap())
                    }
                    map["DispatchRules"] = tmp
                }
                if self.robotAddr != nil {
                    map["RobotAddr"] = self.robotAddr!
                }
                if self.robotId != nil {
                    map["RobotId"] = self.robotId!
                }
                if self.robotName != nil {
                    map["RobotName"] = self.robotName!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CreateTime"] as? String {
                    self.createTime = value
                }
                if let value = dict["DailyNoc"] as? Bool {
                    self.dailyNoc = value
                }
                if let value = dict["DailyNocTime"] as? String {
                    self.dailyNocTime = value
                }
                if let value = dict["DingSignKey"] as? String {
                    self.dingSignKey = value
                }
                if let value = dict["DispatchRules"] as? [Any?] {
                    var tmp : [DescribeIMRobotsResponseBody.PageBean.AlertIMRobots.DispatchRules] = []
                    for v in value {
                        if v != nil {
                            var model = DescribeIMRobotsResponseBody.PageBean.AlertIMRobots.DispatchRules()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.dispatchRules = tmp
                }
                if let value = dict["RobotAddr"] as? String {
                    self.robotAddr = value
                }
                if let value = dict["RobotId"] as? Double {
                    self.robotId = value
                }
                if let value = dict["RobotName"] as? String {
                    self.robotName = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
            }
        }
        public var alertIMRobots: [DescribeIMRobotsResponseBody.PageBean.AlertIMRobots]?

        public var page: Int64?

        public var size: Int64?

        public var total: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.alertIMRobots != nil {
                var tmp : [Any] = []
                for k in self.alertIMRobots! {
                    tmp.append(k.toMap())
                }
                map["AlertIMRobots"] = tmp
            }
            if self.page != nil {
                map["Page"] = self.page!
            }
            if self.size != nil {
                map["Size"] = self.size!
            }
            if self.total != nil {
                map["Total"] = self.total!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AlertIMRobots"] as? [Any?] {
                var tmp : [DescribeIMRobotsResponseBody.PageBean.AlertIMRobots] = []
                for v in value {
                    if v != nil {
                        var model = DescribeIMRobotsResponseBody.PageBean.AlertIMRobots()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.alertIMRobots = tmp
            }
            if let value = dict["Page"] as? Int64 {
                self.page = value
            }
            if let value = dict["Size"] as? Int64 {
                self.size = value
            }
            if let value = dict["Total"] as? Int64 {
                self.total = value
            }
        }
    }
    public var pageBean: DescribeIMRobotsResponseBody.PageBean?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.pageBean?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageBean != nil {
            map["PageBean"] = self.pageBean?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageBean"] as? [String: Any?] {
            var model = DescribeIMRobotsResponseBody.PageBean()
            model.fromMap(value)
            self.pageBean = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeIMRobotsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeIMRobotsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeIMRobotsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribePrometheusAlertRuleRequest : Tea.TeaModel {
    public var alertId: Int64?

    public var clusterId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.alertId != nil {
            map["AlertId"] = self.alertId!
        }
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AlertId"] as? Int64 {
            self.alertId = value
        }
        if let value = dict["ClusterId"] as? String {
            self.clusterId = value
        }
    }
}

public class DescribePrometheusAlertRuleResponseBody : Tea.TeaModel {
    public class PrometheusAlertRule : Tea.TeaModel {
        public class Annotations : Tea.TeaModel {
            public var name: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public class Labels : Tea.TeaModel {
            public var name: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public var alertId: Int64?

        public var alertName: String?

        public var annotations: [DescribePrometheusAlertRuleResponseBody.PrometheusAlertRule.Annotations]?

        public var clusterId: String?

        public var dispatchRuleId: Int64?

        public var duration: String?

        public var expression: String?

        public var labels: [DescribePrometheusAlertRuleResponseBody.PrometheusAlertRule.Labels]?

        public var message: String?

        public var notifyType: String?

        public var status: Int32?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.alertId != nil {
                map["AlertId"] = self.alertId!
            }
            if self.alertName != nil {
                map["AlertName"] = self.alertName!
            }
            if self.annotations != nil {
                var tmp : [Any] = []
                for k in self.annotations! {
                    tmp.append(k.toMap())
                }
                map["Annotations"] = tmp
            }
            if self.clusterId != nil {
                map["ClusterId"] = self.clusterId!
            }
            if self.dispatchRuleId != nil {
                map["DispatchRuleId"] = self.dispatchRuleId!
            }
            if self.duration != nil {
                map["Duration"] = self.duration!
            }
            if self.expression != nil {
                map["Expression"] = self.expression!
            }
            if self.labels != nil {
                var tmp : [Any] = []
                for k in self.labels! {
                    tmp.append(k.toMap())
                }
                map["Labels"] = tmp
            }
            if self.message != nil {
                map["Message"] = self.message!
            }
            if self.notifyType != nil {
                map["NotifyType"] = self.notifyType!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AlertId"] as? Int64 {
                self.alertId = value
            }
            if let value = dict["AlertName"] as? String {
                self.alertName = value
            }
            if let value = dict["Annotations"] as? [Any?] {
                var tmp : [DescribePrometheusAlertRuleResponseBody.PrometheusAlertRule.Annotations] = []
                for v in value {
                    if v != nil {
                        var model = DescribePrometheusAlertRuleResponseBody.PrometheusAlertRule.Annotations()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.annotations = tmp
            }
            if let value = dict["ClusterId"] as? String {
                self.clusterId = value
            }
            if let value = dict["DispatchRuleId"] as? Int64 {
                self.dispatchRuleId = value
            }
            if let value = dict["Duration"] as? String {
                self.duration = value
            }
            if let value = dict["Expression"] as? String {
                self.expression = value
            }
            if let value = dict["Labels"] as? [Any?] {
                var tmp : [DescribePrometheusAlertRuleResponseBody.PrometheusAlertRule.Labels] = []
                for v in value {
                    if v != nil {
                        var model = DescribePrometheusAlertRuleResponseBody.PrometheusAlertRule.Labels()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.labels = tmp
            }
            if let value = dict["Message"] as? String {
                self.message = value
            }
            if let value = dict["NotifyType"] as? String {
                self.notifyType = value
            }
            if let value = dict["Status"] as? Int32 {
                self.status = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
        }
    }
    public var code: Int64?

    public var message: String?

    public var prometheusAlertRule: DescribePrometheusAlertRuleResponseBody.PrometheusAlertRule?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.prometheusAlertRule?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.prometheusAlertRule != nil {
            map["PrometheusAlertRule"] = self.prometheusAlertRule?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int64 {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["PrometheusAlertRule"] as? [String: Any?] {
            var model = DescribePrometheusAlertRuleResponseBody.PrometheusAlertRule()
            model.fromMap(value)
            self.prometheusAlertRule = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DescribePrometheusAlertRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribePrometheusAlertRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribePrometheusAlertRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeTraceLicenseKeyRequest : Tea.TeaModel {
    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DescribeTraceLicenseKeyResponseBody : Tea.TeaModel {
    public var licenseKey: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.licenseKey != nil {
            map["LicenseKey"] = self.licenseKey!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["LicenseKey"] as? String {
            self.licenseKey = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeTraceLicenseKeyResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeTraceLicenseKeyResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeTraceLicenseKeyResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeWebhookContactsRequest : Tea.TeaModel {
    public var contactIds: String?

    public var page: Int64?

    public var size: Int64?

    public var webhookName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.contactIds != nil {
            map["ContactIds"] = self.contactIds!
        }
        if self.page != nil {
            map["Page"] = self.page!
        }
        if self.size != nil {
            map["Size"] = self.size!
        }
        if self.webhookName != nil {
            map["WebhookName"] = self.webhookName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ContactIds"] as? String {
            self.contactIds = value
        }
        if let value = dict["Page"] as? Int64 {
            self.page = value
        }
        if let value = dict["Size"] as? Int64 {
            self.size = value
        }
        if let value = dict["WebhookName"] as? String {
            self.webhookName = value
        }
    }
}

public class DescribeWebhookContactsResponseBody : Tea.TeaModel {
    public class PageBean : Tea.TeaModel {
        public class WebhookContacts : Tea.TeaModel {
            public class Webhook : Tea.TeaModel {
                public var bizHeaders: [String: Any]?

                public var bizParams: [String: Any]?

                public var body: String?

                public var method: String?

                public var recoverBody: String?

                public var url: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.bizHeaders != nil {
                        map["BizHeaders"] = self.bizHeaders!
                    }
                    if self.bizParams != nil {
                        map["BizParams"] = self.bizParams!
                    }
                    if self.body != nil {
                        map["Body"] = self.body!
                    }
                    if self.method != nil {
                        map["Method"] = self.method!
                    }
                    if self.recoverBody != nil {
                        map["RecoverBody"] = self.recoverBody!
                    }
                    if self.url != nil {
                        map["Url"] = self.url!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["BizHeaders"] as? [String: Any] {
                        self.bizHeaders = value
                    }
                    if let value = dict["BizParams"] as? [String: Any] {
                        self.bizParams = value
                    }
                    if let value = dict["Body"] as? String {
                        self.body = value
                    }
                    if let value = dict["Method"] as? String {
                        self.method = value
                    }
                    if let value = dict["RecoverBody"] as? String {
                        self.recoverBody = value
                    }
                    if let value = dict["Url"] as? String {
                        self.url = value
                    }
                }
            }
            public var webhook: DescribeWebhookContactsResponseBody.PageBean.WebhookContacts.Webhook?

            public var webhookId: Double?

            public var webhookName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.webhook?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.webhook != nil {
                    map["Webhook"] = self.webhook?.toMap()
                }
                if self.webhookId != nil {
                    map["WebhookId"] = self.webhookId!
                }
                if self.webhookName != nil {
                    map["WebhookName"] = self.webhookName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Webhook"] as? [String: Any?] {
                    var model = DescribeWebhookContactsResponseBody.PageBean.WebhookContacts.Webhook()
                    model.fromMap(value)
                    self.webhook = model
                }
                if let value = dict["WebhookId"] as? Double {
                    self.webhookId = value
                }
                if let value = dict["WebhookName"] as? String {
                    self.webhookName = value
                }
            }
        }
        public var page: Int64?

        public var size: Int64?

        public var total: Int64?

        public var webhookContacts: [DescribeWebhookContactsResponseBody.PageBean.WebhookContacts]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.page != nil {
                map["Page"] = self.page!
            }
            if self.size != nil {
                map["Size"] = self.size!
            }
            if self.total != nil {
                map["Total"] = self.total!
            }
            if self.webhookContacts != nil {
                var tmp : [Any] = []
                for k in self.webhookContacts! {
                    tmp.append(k.toMap())
                }
                map["WebhookContacts"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Page"] as? Int64 {
                self.page = value
            }
            if let value = dict["Size"] as? Int64 {
                self.size = value
            }
            if let value = dict["Total"] as? Int64 {
                self.total = value
            }
            if let value = dict["WebhookContacts"] as? [Any?] {
                var tmp : [DescribeWebhookContactsResponseBody.PageBean.WebhookContacts] = []
                for v in value {
                    if v != nil {
                        var model = DescribeWebhookContactsResponseBody.PageBean.WebhookContacts()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.webhookContacts = tmp
            }
        }
    }
    public var pageBean: DescribeWebhookContactsResponseBody.PageBean?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.pageBean?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageBean != nil {
            map["PageBean"] = self.pageBean?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageBean"] as? [String: Any?] {
            var model = DescribeWebhookContactsResponseBody.PageBean()
            model.fromMap(value)
            self.pageBean = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeWebhookContactsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeWebhookContactsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeWebhookContactsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DoInsightsActionRequest : Tea.TeaModel {
    public var data: String?

    public var module: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.module != nil {
            map["Module"] = self.module!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["Module"] as? String {
            self.module = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DoInsightsActionResponseBody : Tea.TeaModel {
    public var code: Int32?

    public var data: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DoInsightsActionResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DoInsightsActionResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DoInsightsActionResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class EnableMetricRequest : Tea.TeaModel {
    public var clusterId: String?

    public var dropMetric: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.dropMetric != nil {
            map["DropMetric"] = self.dropMetric!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClusterId"] as? String {
            self.clusterId = value
        }
        if let value = dict["DropMetric"] as? String {
            self.dropMetric = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class EnableMetricResponseBody : Tea.TeaModel {
    public var code: Int64?

    public var data: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int64 {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class EnableMetricResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: EnableMetricResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = EnableMetricResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetAgentDownloadUrlRequest : Tea.TeaModel {
    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class GetAgentDownloadUrlResponseBody : Tea.TeaModel {
    public var armsAgentDownloadUrl: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.armsAgentDownloadUrl != nil {
            map["ArmsAgentDownloadUrl"] = self.armsAgentDownloadUrl!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ArmsAgentDownloadUrl"] as? String {
            self.armsAgentDownloadUrl = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetAgentDownloadUrlResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetAgentDownloadUrlResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetAgentDownloadUrlResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetAgentDownloadUrlV2Request : Tea.TeaModel {
    public var agentType: String?

    public var archType: String?

    public var osType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentType != nil {
            map["AgentType"] = self.agentType!
        }
        if self.archType != nil {
            map["ArchType"] = self.archType!
        }
        if self.osType != nil {
            map["OsType"] = self.osType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentType"] as? String {
            self.agentType = value
        }
        if let value = dict["ArchType"] as? String {
            self.archType = value
        }
        if let value = dict["OsType"] as? String {
            self.osType = value
        }
    }
}

public class GetAgentDownloadUrlV2ResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var url: String?

        public var version: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.url != nil {
                map["Url"] = self.url!
            }
            if self.version != nil {
                map["Version"] = self.version!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Url"] as? String {
                self.url = value
            }
            if let value = dict["Version"] as? String {
                self.version = value
            }
        }
    }
    public var code: Int64?

    public var data: GetAgentDownloadUrlV2ResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int64 {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetAgentDownloadUrlV2ResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetAgentDownloadUrlV2Response : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetAgentDownloadUrlV2ResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetAgentDownloadUrlV2ResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetAlertRulesRequest : Tea.TeaModel {
    public class Tags : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var alertIds: String?

    public var alertNames: String?

    public var alertStatus: String?

    public var alertType: String?

    public var bizRegionId: String?

    public var clusterId: String?

    public var page: Int64?

    public var productCode: String?

    public var regionId: String?

    public var size: Int64?

    public var tags: [GetAlertRulesRequest.Tags]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.alertIds != nil {
            map["AlertIds"] = self.alertIds!
        }
        if self.alertNames != nil {
            map["AlertNames"] = self.alertNames!
        }
        if self.alertStatus != nil {
            map["AlertStatus"] = self.alertStatus!
        }
        if self.alertType != nil {
            map["AlertType"] = self.alertType!
        }
        if self.bizRegionId != nil {
            map["BizRegionId"] = self.bizRegionId!
        }
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.page != nil {
            map["Page"] = self.page!
        }
        if self.productCode != nil {
            map["ProductCode"] = self.productCode!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.size != nil {
            map["Size"] = self.size!
        }
        if self.tags != nil {
            var tmp : [Any] = []
            for k in self.tags! {
                tmp.append(k.toMap())
            }
            map["Tags"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AlertIds"] as? String {
            self.alertIds = value
        }
        if let value = dict["AlertNames"] as? String {
            self.alertNames = value
        }
        if let value = dict["AlertStatus"] as? String {
            self.alertStatus = value
        }
        if let value = dict["AlertType"] as? String {
            self.alertType = value
        }
        if let value = dict["BizRegionId"] as? String {
            self.bizRegionId = value
        }
        if let value = dict["ClusterId"] as? String {
            self.clusterId = value
        }
        if let value = dict["Page"] as? Int64 {
            self.page = value
        }
        if let value = dict["ProductCode"] as? String {
            self.productCode = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Size"] as? Int64 {
            self.size = value
        }
        if let value = dict["Tags"] as? [Any?] {
            var tmp : [GetAlertRulesRequest.Tags] = []
            for v in value {
                if v != nil {
                    var model = GetAlertRulesRequest.Tags()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tags = tmp
        }
    }
}

public class GetAlertRulesResponseBody : Tea.TeaModel {
    public class PageBean : Tea.TeaModel {
        public class AlertRules : Tea.TeaModel {
            public class AlertRuleContent : Tea.TeaModel {
                public class AlertRuleItems : Tea.TeaModel {
                    public var aggregate: String?

                    public var metricKey: String?

                    public var n: Int64?

                    public var operator_: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.aggregate != nil {
                            map["Aggregate"] = self.aggregate!
                        }
                        if self.metricKey != nil {
                            map["MetricKey"] = self.metricKey!
                        }
                        if self.n != nil {
                            map["N"] = self.n!
                        }
                        if self.operator_ != nil {
                            map["Operator"] = self.operator_!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Aggregate"] as? String {
                            self.aggregate = value
                        }
                        if let value = dict["MetricKey"] as? String {
                            self.metricKey = value
                        }
                        if let value = dict["N"] as? Int64 {
                            self.n = value
                        }
                        if let value = dict["Operator"] as? String {
                            self.operator_ = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public var alertRuleItems: [GetAlertRulesResponseBody.PageBean.AlertRules.AlertRuleContent.AlertRuleItems]?

                public var condition: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.alertRuleItems != nil {
                        var tmp : [Any] = []
                        for k in self.alertRuleItems! {
                            tmp.append(k.toMap())
                        }
                        map["AlertRuleItems"] = tmp
                    }
                    if self.condition != nil {
                        map["Condition"] = self.condition!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["AlertRuleItems"] as? [Any?] {
                        var tmp : [GetAlertRulesResponseBody.PageBean.AlertRules.AlertRuleContent.AlertRuleItems] = []
                        for v in value {
                            if v != nil {
                                var model = GetAlertRulesResponseBody.PageBean.AlertRules.AlertRuleContent.AlertRuleItems()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.alertRuleItems = tmp
                    }
                    if let value = dict["Condition"] as? String {
                        self.condition = value
                    }
                }
            }
            public class Annotations : Tea.TeaModel {
                public var name: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.name != nil {
                        map["Name"] = self.name!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Name"] as? String {
                        self.name = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class Filters : Tea.TeaModel {
                public class CustomSLSFilters : Tea.TeaModel {
                    public var key: String?

                    public var opt: String?

                    public var show: Bool?

                    public var t: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.key != nil {
                            map["Key"] = self.key!
                        }
                        if self.opt != nil {
                            map["Opt"] = self.opt!
                        }
                        if self.show != nil {
                            map["Show"] = self.show!
                        }
                        if self.t != nil {
                            map["T"] = self.t!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Key"] as? String {
                            self.key = value
                        }
                        if let value = dict["Opt"] as? String {
                            self.opt = value
                        }
                        if let value = dict["Show"] as? Bool {
                            self.show = value
                        }
                        if let value = dict["T"] as? String {
                            self.t = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public class DimFilters : Tea.TeaModel {
                    public var filterKey: String?

                    public var filterOpt: String?

                    public var filterValues: [String]?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.filterKey != nil {
                            map["FilterKey"] = self.filterKey!
                        }
                        if self.filterOpt != nil {
                            map["FilterOpt"] = self.filterOpt!
                        }
                        if self.filterValues != nil {
                            map["FilterValues"] = self.filterValues!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["FilterKey"] as? String {
                            self.filterKey = value
                        }
                        if let value = dict["FilterOpt"] as? String {
                            self.filterOpt = value
                        }
                        if let value = dict["FilterValues"] as? [String] {
                            self.filterValues = value
                        }
                    }
                }
                public var customSLSFilters: [GetAlertRulesResponseBody.PageBean.AlertRules.Filters.CustomSLSFilters]?

                public var customSLSGroupByDimensions: [String]?

                public var customSLSWheres: [String]?

                public var dimFilters: [GetAlertRulesResponseBody.PageBean.AlertRules.Filters.DimFilters]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.customSLSFilters != nil {
                        var tmp : [Any] = []
                        for k in self.customSLSFilters! {
                            tmp.append(k.toMap())
                        }
                        map["CustomSLSFilters"] = tmp
                    }
                    if self.customSLSGroupByDimensions != nil {
                        map["CustomSLSGroupByDimensions"] = self.customSLSGroupByDimensions!
                    }
                    if self.customSLSWheres != nil {
                        map["CustomSLSWheres"] = self.customSLSWheres!
                    }
                    if self.dimFilters != nil {
                        var tmp : [Any] = []
                        for k in self.dimFilters! {
                            tmp.append(k.toMap())
                        }
                        map["DimFilters"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["CustomSLSFilters"] as? [Any?] {
                        var tmp : [GetAlertRulesResponseBody.PageBean.AlertRules.Filters.CustomSLSFilters] = []
                        for v in value {
                            if v != nil {
                                var model = GetAlertRulesResponseBody.PageBean.AlertRules.Filters.CustomSLSFilters()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.customSLSFilters = tmp
                    }
                    if let value = dict["CustomSLSGroupByDimensions"] as? [String] {
                        self.customSLSGroupByDimensions = value
                    }
                    if let value = dict["CustomSLSWheres"] as? [String] {
                        self.customSLSWheres = value
                    }
                    if let value = dict["DimFilters"] as? [Any?] {
                        var tmp : [GetAlertRulesResponseBody.PageBean.AlertRules.Filters.DimFilters] = []
                        for v in value {
                            if v != nil {
                                var model = GetAlertRulesResponseBody.PageBean.AlertRules.Filters.DimFilters()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.dimFilters = tmp
                    }
                }
            }
            public class Labels : Tea.TeaModel {
                public var name: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.name != nil {
                        map["Name"] = self.name!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Name"] as? String {
                        self.name = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class Tags : Tea.TeaModel {
                public var key: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.key != nil {
                        map["Key"] = self.key!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Key"] as? String {
                        self.key = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public var alertCheckType: String?

            public var alertGroup: Int64?

            public var alertId: Int64?

            public var alertName: String?

            public var alertRuleContent: GetAlertRulesResponseBody.PageBean.AlertRules.AlertRuleContent?

            public var alertStatus: String?

            public var alertType: String?

            public var annotations: [GetAlertRulesResponseBody.PageBean.AlertRules.Annotations]?

            public var autoAddNewApplication: Bool?

            public var clusterId: String?

            public var createdTime: Int64?

            public var duration: String?

            public var extend: String?

            public var filters: GetAlertRulesResponseBody.PageBean.AlertRules.Filters?

            public var labels: [GetAlertRulesResponseBody.PageBean.AlertRules.Labels]?

            public var level: String?

            public var message: String?

            public var metricsType: String?

            public var notifyStrategy: String?

            public var pids: [String]?

            public var promQL: String?

            public var regionId: String?

            public var tags: [GetAlertRulesResponseBody.PageBean.AlertRules.Tags]?

            public var updatedTime: Int64?

            public var userId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.alertRuleContent?.validate()
                try self.filters?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.alertCheckType != nil {
                    map["AlertCheckType"] = self.alertCheckType!
                }
                if self.alertGroup != nil {
                    map["AlertGroup"] = self.alertGroup!
                }
                if self.alertId != nil {
                    map["AlertId"] = self.alertId!
                }
                if self.alertName != nil {
                    map["AlertName"] = self.alertName!
                }
                if self.alertRuleContent != nil {
                    map["AlertRuleContent"] = self.alertRuleContent?.toMap()
                }
                if self.alertStatus != nil {
                    map["AlertStatus"] = self.alertStatus!
                }
                if self.alertType != nil {
                    map["AlertType"] = self.alertType!
                }
                if self.annotations != nil {
                    var tmp : [Any] = []
                    for k in self.annotations! {
                        tmp.append(k.toMap())
                    }
                    map["Annotations"] = tmp
                }
                if self.autoAddNewApplication != nil {
                    map["AutoAddNewApplication"] = self.autoAddNewApplication!
                }
                if self.clusterId != nil {
                    map["ClusterId"] = self.clusterId!
                }
                if self.createdTime != nil {
                    map["CreatedTime"] = self.createdTime!
                }
                if self.duration != nil {
                    map["Duration"] = self.duration!
                }
                if self.extend != nil {
                    map["Extend"] = self.extend!
                }
                if self.filters != nil {
                    map["Filters"] = self.filters?.toMap()
                }
                if self.labels != nil {
                    var tmp : [Any] = []
                    for k in self.labels! {
                        tmp.append(k.toMap())
                    }
                    map["Labels"] = tmp
                }
                if self.level != nil {
                    map["Level"] = self.level!
                }
                if self.message != nil {
                    map["Message"] = self.message!
                }
                if self.metricsType != nil {
                    map["MetricsType"] = self.metricsType!
                }
                if self.notifyStrategy != nil {
                    map["NotifyStrategy"] = self.notifyStrategy!
                }
                if self.pids != nil {
                    map["Pids"] = self.pids!
                }
                if self.promQL != nil {
                    map["PromQL"] = self.promQL!
                }
                if self.regionId != nil {
                    map["RegionId"] = self.regionId!
                }
                if self.tags != nil {
                    var tmp : [Any] = []
                    for k in self.tags! {
                        tmp.append(k.toMap())
                    }
                    map["Tags"] = tmp
                }
                if self.updatedTime != nil {
                    map["UpdatedTime"] = self.updatedTime!
                }
                if self.userId != nil {
                    map["UserId"] = self.userId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AlertCheckType"] as? String {
                    self.alertCheckType = value
                }
                if let value = dict["AlertGroup"] as? Int64 {
                    self.alertGroup = value
                }
                if let value = dict["AlertId"] as? Int64 {
                    self.alertId = value
                }
                if let value = dict["AlertName"] as? String {
                    self.alertName = value
                }
                if let value = dict["AlertRuleContent"] as? [String: Any?] {
                    var model = GetAlertRulesResponseBody.PageBean.AlertRules.AlertRuleContent()
                    model.fromMap(value)
                    self.alertRuleContent = model
                }
                if let value = dict["AlertStatus"] as? String {
                    self.alertStatus = value
                }
                if let value = dict["AlertType"] as? String {
                    self.alertType = value
                }
                if let value = dict["Annotations"] as? [Any?] {
                    var tmp : [GetAlertRulesResponseBody.PageBean.AlertRules.Annotations] = []
                    for v in value {
                        if v != nil {
                            var model = GetAlertRulesResponseBody.PageBean.AlertRules.Annotations()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.annotations = tmp
                }
                if let value = dict["AutoAddNewApplication"] as? Bool {
                    self.autoAddNewApplication = value
                }
                if let value = dict["ClusterId"] as? String {
                    self.clusterId = value
                }
                if let value = dict["CreatedTime"] as? Int64 {
                    self.createdTime = value
                }
                if let value = dict["Duration"] as? String {
                    self.duration = value
                }
                if let value = dict["Extend"] as? String {
                    self.extend = value
                }
                if let value = dict["Filters"] as? [String: Any?] {
                    var model = GetAlertRulesResponseBody.PageBean.AlertRules.Filters()
                    model.fromMap(value)
                    self.filters = model
                }
                if let value = dict["Labels"] as? [Any?] {
                    var tmp : [GetAlertRulesResponseBody.PageBean.AlertRules.Labels] = []
                    for v in value {
                        if v != nil {
                            var model = GetAlertRulesResponseBody.PageBean.AlertRules.Labels()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.labels = tmp
                }
                if let value = dict["Level"] as? String {
                    self.level = value
                }
                if let value = dict["Message"] as? String {
                    self.message = value
                }
                if let value = dict["MetricsType"] as? String {
                    self.metricsType = value
                }
                if let value = dict["NotifyStrategy"] as? String {
                    self.notifyStrategy = value
                }
                if let value = dict["Pids"] as? [String] {
                    self.pids = value
                }
                if let value = dict["PromQL"] as? String {
                    self.promQL = value
                }
                if let value = dict["RegionId"] as? String {
                    self.regionId = value
                }
                if let value = dict["Tags"] as? [Any?] {
                    var tmp : [GetAlertRulesResponseBody.PageBean.AlertRules.Tags] = []
                    for v in value {
                        if v != nil {
                            var model = GetAlertRulesResponseBody.PageBean.AlertRules.Tags()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.tags = tmp
                }
                if let value = dict["UpdatedTime"] as? Int64 {
                    self.updatedTime = value
                }
                if let value = dict["UserId"] as? String {
                    self.userId = value
                }
            }
        }
        public var alertRules: [GetAlertRulesResponseBody.PageBean.AlertRules]?

        public var page: Int64?

        public var size: Int64?

        public var total: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.alertRules != nil {
                var tmp : [Any] = []
                for k in self.alertRules! {
                    tmp.append(k.toMap())
                }
                map["AlertRules"] = tmp
            }
            if self.page != nil {
                map["Page"] = self.page!
            }
            if self.size != nil {
                map["Size"] = self.size!
            }
            if self.total != nil {
                map["Total"] = self.total!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AlertRules"] as? [Any?] {
                var tmp : [GetAlertRulesResponseBody.PageBean.AlertRules] = []
                for v in value {
                    if v != nil {
                        var model = GetAlertRulesResponseBody.PageBean.AlertRules()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.alertRules = tmp
            }
            if let value = dict["Page"] as? Int64 {
                self.page = value
            }
            if let value = dict["Size"] as? Int64 {
                self.size = value
            }
            if let value = dict["Total"] as? Int64 {
                self.total = value
            }
        }
    }
    public var pageBean: GetAlertRulesResponseBody.PageBean?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.pageBean?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageBean != nil {
            map["PageBean"] = self.pageBean?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageBean"] as? [String: Any?] {
            var model = GetAlertRulesResponseBody.PageBean()
            model.fromMap(value)
            self.pageBean = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetAlertRulesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetAlertRulesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetAlertRulesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetAppApiByPageRequest : Tea.TeaModel {
    public var currentPage: Int32?

    public var endTime: Int64?

    public var intervalMills: Int32?

    public var PId: String?

    public var pageSize: Int32?

    public var regionId: String?

    public var startTime: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.currentPage != nil {
            map["CurrentPage"] = self.currentPage!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.intervalMills != nil {
            map["IntervalMills"] = self.intervalMills!
        }
        if self.PId != nil {
            map["PId"] = self.PId!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CurrentPage"] as? Int32 {
            self.currentPage = value
        }
        if let value = dict["EndTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["IntervalMills"] as? Int32 {
            self.intervalMills = value
        }
        if let value = dict["PId"] as? String {
            self.PId = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
    }
}

public class GetAppApiByPageResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var completed: Bool?

        public var items: [[String: Any]]?

        public var page: Int32?

        public var pageSize: Int32?

        public var total: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.completed != nil {
                map["Completed"] = self.completed!
            }
            if self.items != nil {
                map["Items"] = self.items!
            }
            if self.page != nil {
                map["Page"] = self.page!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.total != nil {
                map["Total"] = self.total!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Completed"] as? Bool {
                self.completed = value
            }
            if let value = dict["Items"] as? [[String: Any]] {
                self.items = value
            }
            if let value = dict["Page"] as? Int32 {
                self.page = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
            if let value = dict["Total"] as? String {
                self.total = value
            }
        }
    }
    public var code: Int32?

    public var data: GetAppApiByPageResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetAppApiByPageResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetAppApiByPageResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetAppApiByPageResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetAppApiByPageResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetAppJVMConfigRequest : Tea.TeaModel {
    public var endTime: Int64?

    public var pid: String?

    public var regionId: String?

    public var startTime: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.pid != nil {
            map["Pid"] = self.pid!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["Pid"] as? String {
            self.pid = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
    }
}

public class GetAppJVMConfigResponseBody : Tea.TeaModel {
    public class JvmInfoList : Tea.TeaModel {
        public var agentVersion: String?

        public var hostName: String?

        public var ip: String?

        public var pid: String?

        public var procId: String?

        public var vmArgs: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.agentVersion != nil {
                map["AgentVersion"] = self.agentVersion!
            }
            if self.hostName != nil {
                map["HostName"] = self.hostName!
            }
            if self.ip != nil {
                map["Ip"] = self.ip!
            }
            if self.pid != nil {
                map["Pid"] = self.pid!
            }
            if self.procId != nil {
                map["ProcId"] = self.procId!
            }
            if self.vmArgs != nil {
                map["VmArgs"] = self.vmArgs!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AgentVersion"] as? String {
                self.agentVersion = value
            }
            if let value = dict["HostName"] as? String {
                self.hostName = value
            }
            if let value = dict["Ip"] as? String {
                self.ip = value
            }
            if let value = dict["Pid"] as? String {
                self.pid = value
            }
            if let value = dict["ProcId"] as? String {
                self.procId = value
            }
            if let value = dict["VmArgs"] as? String {
                self.vmArgs = value
            }
        }
    }
    public var code: Int32?

    public var jvmInfoList: [GetAppJVMConfigResponseBody.JvmInfoList]?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.jvmInfoList != nil {
            var tmp : [Any] = []
            for k in self.jvmInfoList! {
                tmp.append(k.toMap())
            }
            map["JvmInfoList"] = tmp
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["JvmInfoList"] as? [Any?] {
            var tmp : [GetAppJVMConfigResponseBody.JvmInfoList] = []
            for v in value {
                if v != nil {
                    var model = GetAppJVMConfigResponseBody.JvmInfoList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.jvmInfoList = tmp
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetAppJVMConfigResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetAppJVMConfigResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetAppJVMConfigResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetAuthTokenRequest : Tea.TeaModel {
    public var clusterId: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClusterId"] as? String {
            self.clusterId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class GetAuthTokenResponseBody : Tea.TeaModel {
    public var code: Int32?

    public var data: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetAuthTokenResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetAuthTokenResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetAuthTokenResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetCloudClusterAllUrlRequest : Tea.TeaModel {
    public var clusterId: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClusterId"] as? String {
            self.clusterId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class GetCloudClusterAllUrlResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class RemoteUrl : Tea.TeaModel {
            public var authToken: Bool?

            public var grafanaUrl: String?

            public var internetGrafanaUrl: String?

            public var internetPushGatewayUrl: String?

            public var internetRemoteReadUrl: String?

            public var internetRemoteWriteUrl: String?

            public var pushGatewayUrl: String?

            public var remoteReadUrl: String?

            public var remoteWriteUrl: String?

            public var token: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.authToken != nil {
                    map["AuthToken"] = self.authToken!
                }
                if self.grafanaUrl != nil {
                    map["GrafanaUrl"] = self.grafanaUrl!
                }
                if self.internetGrafanaUrl != nil {
                    map["InternetGrafanaUrl"] = self.internetGrafanaUrl!
                }
                if self.internetPushGatewayUrl != nil {
                    map["InternetPushGatewayUrl"] = self.internetPushGatewayUrl!
                }
                if self.internetRemoteReadUrl != nil {
                    map["InternetRemoteReadUrl"] = self.internetRemoteReadUrl!
                }
                if self.internetRemoteWriteUrl != nil {
                    map["InternetRemoteWriteUrl"] = self.internetRemoteWriteUrl!
                }
                if self.pushGatewayUrl != nil {
                    map["PushGatewayUrl"] = self.pushGatewayUrl!
                }
                if self.remoteReadUrl != nil {
                    map["RemoteReadUrl"] = self.remoteReadUrl!
                }
                if self.remoteWriteUrl != nil {
                    map["RemoteWriteUrl"] = self.remoteWriteUrl!
                }
                if self.token != nil {
                    map["Token"] = self.token!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AuthToken"] as? Bool {
                    self.authToken = value
                }
                if let value = dict["GrafanaUrl"] as? String {
                    self.grafanaUrl = value
                }
                if let value = dict["InternetGrafanaUrl"] as? String {
                    self.internetGrafanaUrl = value
                }
                if let value = dict["InternetPushGatewayUrl"] as? String {
                    self.internetPushGatewayUrl = value
                }
                if let value = dict["InternetRemoteReadUrl"] as? String {
                    self.internetRemoteReadUrl = value
                }
                if let value = dict["InternetRemoteWriteUrl"] as? String {
                    self.internetRemoteWriteUrl = value
                }
                if let value = dict["PushGatewayUrl"] as? String {
                    self.pushGatewayUrl = value
                }
                if let value = dict["RemoteReadUrl"] as? String {
                    self.remoteReadUrl = value
                }
                if let value = dict["RemoteWriteUrl"] as? String {
                    self.remoteWriteUrl = value
                }
                if let value = dict["Token"] as? String {
                    self.token = value
                }
            }
        }
        public var productCode: String?

        public var region: String?

        public var remoteUrl: GetCloudClusterAllUrlResponseBody.Data.RemoteUrl?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.remoteUrl?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.productCode != nil {
                map["ProductCode"] = self.productCode!
            }
            if self.region != nil {
                map["Region"] = self.region!
            }
            if self.remoteUrl != nil {
                map["RemoteUrl"] = self.remoteUrl?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ProductCode"] as? String {
                self.productCode = value
            }
            if let value = dict["Region"] as? String {
                self.region = value
            }
            if let value = dict["RemoteUrl"] as? [String: Any?] {
                var model = GetCloudClusterAllUrlResponseBody.Data.RemoteUrl()
                model.fromMap(value)
                self.remoteUrl = model
            }
        }
    }
    public var code: Int32?

    public var data: [GetCloudClusterAllUrlResponseBody.Data]?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [GetCloudClusterAllUrlResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = GetCloudClusterAllUrlResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetCloudClusterAllUrlResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetCloudClusterAllUrlResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetCloudClusterAllUrlResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetClusterAllUrlRequest : Tea.TeaModel {
    public var clusterId: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClusterId"] as? String {
            self.clusterId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class GetClusterAllUrlResponseBody : Tea.TeaModel {
    public var code: Int32?

    public var data: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetClusterAllUrlResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetClusterAllUrlResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetClusterAllUrlResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetCommercialStatusRequest : Tea.TeaModel {
    public var commodityCode: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commodityCode != nil {
            map["CommodityCode"] = self.commodityCode!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CommodityCode"] as? String {
            self.commodityCode = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class GetCommercialStatusResponseBody : Tea.TeaModel {
    public class UserAndCommodityStatus : Tea.TeaModel {
        public var basic: Bool?

        public var chargeType: String?

        public var enable: Bool?

        public var extraInfo: [String: Any]?

        public var freeDays: Int64?

        public var lable: String?

        public var status: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.basic != nil {
                map["Basic"] = self.basic!
            }
            if self.chargeType != nil {
                map["ChargeType"] = self.chargeType!
            }
            if self.enable != nil {
                map["Enable"] = self.enable!
            }
            if self.extraInfo != nil {
                map["ExtraInfo"] = self.extraInfo!
            }
            if self.freeDays != nil {
                map["FreeDays"] = self.freeDays!
            }
            if self.lable != nil {
                map["Lable"] = self.lable!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Basic"] as? Bool {
                self.basic = value
            }
            if let value = dict["ChargeType"] as? String {
                self.chargeType = value
            }
            if let value = dict["Enable"] as? Bool {
                self.enable = value
            }
            if let value = dict["ExtraInfo"] as? [String: Any] {
                self.extraInfo = value
            }
            if let value = dict["FreeDays"] as? Int64 {
                self.freeDays = value
            }
            if let value = dict["Lable"] as? String {
                self.lable = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
        }
    }
    public var requestId: String?

    public var userAndCommodityStatus: GetCommercialStatusResponseBody.UserAndCommodityStatus?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.userAndCommodityStatus?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.userAndCommodityStatus != nil {
            map["UserAndCommodityStatus"] = self.userAndCommodityStatus?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["UserAndCommodityStatus"] as? [String: Any?] {
            var model = GetCommercialStatusResponseBody.UserAndCommodityStatus()
            model.fromMap(value)
            self.userAndCommodityStatus = model
        }
    }
}

public class GetCommercialStatusResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetCommercialStatusResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetCommercialStatusResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetExploreUrlRequest : Tea.TeaModel {
    public var clusterId: String?

    public var expression: String?

    public var regionId: String?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.expression != nil {
            map["Expression"] = self.expression!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClusterId"] as? String {
            self.clusterId = value
        }
        if let value = dict["Expression"] as? String {
            self.expression = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
    }
}

public class GetExploreUrlResponseBody : Tea.TeaModel {
    public var code: Int32?

    public var data: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetExploreUrlResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetExploreUrlResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetExploreUrlResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetGrafanaWorkspaceRequest : Tea.TeaModel {
    public var aliyunLang: String?

    public var grafanaWorkspaceId: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.aliyunLang != nil {
            map["AliyunLang"] = self.aliyunLang!
        }
        if self.grafanaWorkspaceId != nil {
            map["GrafanaWorkspaceId"] = self.grafanaWorkspaceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AliyunLang"] as? String {
            self.aliyunLang = value
        }
        if let value = dict["GrafanaWorkspaceId"] as? String {
            self.grafanaWorkspaceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class GetGrafanaWorkspaceResponseBody : Tea.TeaModel {
    public var code: Int32?

    public var data: GrafanaWorkspace?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.traceId != nil {
            map["TraceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GrafanaWorkspace()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
        if let value = dict["TraceId"] as? String {
            self.traceId = value
        }
    }
}

public class GetGrafanaWorkspaceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetGrafanaWorkspaceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetGrafanaWorkspaceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetIntegrationStateRequest : Tea.TeaModel {
    public var clusterId: String?

    public var integration: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.integration != nil {
            map["Integration"] = self.integration!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClusterId"] as? String {
            self.clusterId = value
        }
        if let value = dict["Integration"] as? String {
            self.integration = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class GetIntegrationStateResponseBody : Tea.TeaModel {
    public var code: Int32?

    public var message: String?

    public var requestId: String?

    public var state: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.state != nil {
            map["State"] = self.state!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["State"] as? Bool {
            self.state = value
        }
    }
}

public class GetIntegrationStateResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetIntegrationStateResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetIntegrationStateResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetManagedPrometheusStatusRequest : Tea.TeaModel {
    public var clusterId: String?

    public var clusterType: String?

    public var regionId: String?

    public var resourceGroupId: String?

    public var vpcId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.clusterType != nil {
            map["ClusterType"] = self.clusterType!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceGroupId != nil {
            map["ResourceGroupId"] = self.resourceGroupId!
        }
        if self.vpcId != nil {
            map["VpcId"] = self.vpcId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClusterId"] as? String {
            self.clusterId = value
        }
        if let value = dict["ClusterType"] as? String {
            self.clusterType = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceGroupId"] as? String {
            self.resourceGroupId = value
        }
        if let value = dict["VpcId"] as? String {
            self.vpcId = value
        }
    }
}

public class GetManagedPrometheusStatusResponseBody : Tea.TeaModel {
    public var code: Int32?

    public var data: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetManagedPrometheusStatusResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetManagedPrometheusStatusResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetManagedPrometheusStatusResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetMultipleTraceRequest : Tea.TeaModel {
    public var endTime: Int64?

    public var pageNumber: Int64?

    public var pageSize: Int64?

    public var regionId: String?

    public var startTime: Int64?

    public var traceIDs: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.traceIDs != nil {
            map["TraceIDs"] = self.traceIDs!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["PageNumber"] as? Int64 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
        if let value = dict["TraceIDs"] as? [String] {
            self.traceIDs = value
        }
    }
}

public class GetMultipleTraceResponseBody : Tea.TeaModel {
    public class MultiCallChainInfos : Tea.TeaModel {
        public class Spans : Tea.TeaModel {
            public class LogEventList : Tea.TeaModel {
                public class TagEntryList : Tea.TeaModel {
                    public var key: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.key != nil {
                            map["Key"] = self.key!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Key"] as? String {
                            self.key = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public var tagEntryList: [GetMultipleTraceResponseBody.MultiCallChainInfos.Spans.LogEventList.TagEntryList]?

                public var timestamp: Int64?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.tagEntryList != nil {
                        var tmp : [Any] = []
                        for k in self.tagEntryList! {
                            tmp.append(k.toMap())
                        }
                        map["TagEntryList"] = tmp
                    }
                    if self.timestamp != nil {
                        map["Timestamp"] = self.timestamp!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["TagEntryList"] as? [Any?] {
                        var tmp : [GetMultipleTraceResponseBody.MultiCallChainInfos.Spans.LogEventList.TagEntryList] = []
                        for v in value {
                            if v != nil {
                                var model = GetMultipleTraceResponseBody.MultiCallChainInfos.Spans.LogEventList.TagEntryList()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.tagEntryList = tmp
                    }
                    if let value = dict["Timestamp"] as? Int64 {
                        self.timestamp = value
                    }
                }
            }
            public class TagEntryList : Tea.TeaModel {
                public var key: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.key != nil {
                        map["Key"] = self.key!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Key"] as? String {
                        self.key = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public var duration: Int64?

            public var haveStack: Bool?

            public var logEventList: [GetMultipleTraceResponseBody.MultiCallChainInfos.Spans.LogEventList]?

            public var operationName: String?

            public var parentSpanId: String?

            public var resultCode: String?

            public var rpcId: String?

            public var rpcType: Int32?

            public var serviceIp: String?

            public var serviceName: String?

            public var spanId: String?

            public var tagEntryList: [GetMultipleTraceResponseBody.MultiCallChainInfos.Spans.TagEntryList]?

            public var timestamp: Int64?

            public var traceID: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.duration != nil {
                    map["Duration"] = self.duration!
                }
                if self.haveStack != nil {
                    map["HaveStack"] = self.haveStack!
                }
                if self.logEventList != nil {
                    var tmp : [Any] = []
                    for k in self.logEventList! {
                        tmp.append(k.toMap())
                    }
                    map["LogEventList"] = tmp
                }
                if self.operationName != nil {
                    map["OperationName"] = self.operationName!
                }
                if self.parentSpanId != nil {
                    map["ParentSpanId"] = self.parentSpanId!
                }
                if self.resultCode != nil {
                    map["ResultCode"] = self.resultCode!
                }
                if self.rpcId != nil {
                    map["RpcId"] = self.rpcId!
                }
                if self.rpcType != nil {
                    map["RpcType"] = self.rpcType!
                }
                if self.serviceIp != nil {
                    map["ServiceIp"] = self.serviceIp!
                }
                if self.serviceName != nil {
                    map["ServiceName"] = self.serviceName!
                }
                if self.spanId != nil {
                    map["SpanId"] = self.spanId!
                }
                if self.tagEntryList != nil {
                    var tmp : [Any] = []
                    for k in self.tagEntryList! {
                        tmp.append(k.toMap())
                    }
                    map["TagEntryList"] = tmp
                }
                if self.timestamp != nil {
                    map["Timestamp"] = self.timestamp!
                }
                if self.traceID != nil {
                    map["TraceID"] = self.traceID!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Duration"] as? Int64 {
                    self.duration = value
                }
                if let value = dict["HaveStack"] as? Bool {
                    self.haveStack = value
                }
                if let value = dict["LogEventList"] as? [Any?] {
                    var tmp : [GetMultipleTraceResponseBody.MultiCallChainInfos.Spans.LogEventList] = []
                    for v in value {
                        if v != nil {
                            var model = GetMultipleTraceResponseBody.MultiCallChainInfos.Spans.LogEventList()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.logEventList = tmp
                }
                if let value = dict["OperationName"] as? String {
                    self.operationName = value
                }
                if let value = dict["ParentSpanId"] as? String {
                    self.parentSpanId = value
                }
                if let value = dict["ResultCode"] as? String {
                    self.resultCode = value
                }
                if let value = dict["RpcId"] as? String {
                    self.rpcId = value
                }
                if let value = dict["RpcType"] as? Int32 {
                    self.rpcType = value
                }
                if let value = dict["ServiceIp"] as? String {
                    self.serviceIp = value
                }
                if let value = dict["ServiceName"] as? String {
                    self.serviceName = value
                }
                if let value = dict["SpanId"] as? String {
                    self.spanId = value
                }
                if let value = dict["TagEntryList"] as? [Any?] {
                    var tmp : [GetMultipleTraceResponseBody.MultiCallChainInfos.Spans.TagEntryList] = []
                    for v in value {
                        if v != nil {
                            var model = GetMultipleTraceResponseBody.MultiCallChainInfos.Spans.TagEntryList()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.tagEntryList = tmp
                }
                if let value = dict["Timestamp"] as? Int64 {
                    self.timestamp = value
                }
                if let value = dict["TraceID"] as? String {
                    self.traceID = value
                }
            }
        }
        public var spans: [GetMultipleTraceResponseBody.MultiCallChainInfos.Spans]?

        public var traceID: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.spans != nil {
                var tmp : [Any] = []
                for k in self.spans! {
                    tmp.append(k.toMap())
                }
                map["Spans"] = tmp
            }
            if self.traceID != nil {
                map["TraceID"] = self.traceID!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Spans"] as? [Any?] {
                var tmp : [GetMultipleTraceResponseBody.MultiCallChainInfos.Spans] = []
                for v in value {
                    if v != nil {
                        var model = GetMultipleTraceResponseBody.MultiCallChainInfos.Spans()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.spans = tmp
            }
            if let value = dict["TraceID"] as? String {
                self.traceID = value
            }
        }
    }
    public var multiCallChainInfos: [GetMultipleTraceResponseBody.MultiCallChainInfos]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.multiCallChainInfos != nil {
            var tmp : [Any] = []
            for k in self.multiCallChainInfos! {
                tmp.append(k.toMap())
            }
            map["MultiCallChainInfos"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["MultiCallChainInfos"] as? [Any?] {
            var tmp : [GetMultipleTraceResponseBody.MultiCallChainInfos] = []
            for v in value {
                if v != nil {
                    var model = GetMultipleTraceResponseBody.MultiCallChainInfos()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.multiCallChainInfos = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetMultipleTraceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetMultipleTraceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetMultipleTraceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetOnCallSchedulesDetailRequest : Tea.TeaModel {
    public var endTime: String?

    public var id: Int64?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
    }
}

public class GetOnCallSchedulesDetailResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class RenderedFinnalEntries : Tea.TeaModel {
            public class SimpleContact : Tea.TeaModel {
                public var id: Int64?

                public var name: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.id != nil {
                        map["Id"] = self.id!
                    }
                    if self.name != nil {
                        map["Name"] = self.name!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Id"] as? Int64 {
                        self.id = value
                    }
                    if let value = dict["Name"] as? String {
                        self.name = value
                    }
                }
            }
            public var end: String?

            public var simpleContact: GetOnCallSchedulesDetailResponseBody.Data.RenderedFinnalEntries.SimpleContact?

            public var start: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.simpleContact?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.end != nil {
                    map["End"] = self.end!
                }
                if self.simpleContact != nil {
                    map["SimpleContact"] = self.simpleContact?.toMap()
                }
                if self.start != nil {
                    map["Start"] = self.start!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["End"] as? String {
                    self.end = value
                }
                if let value = dict["SimpleContact"] as? [String: Any?] {
                    var model = GetOnCallSchedulesDetailResponseBody.Data.RenderedFinnalEntries.SimpleContact()
                    model.fromMap(value)
                    self.simpleContact = model
                }
                if let value = dict["Start"] as? String {
                    self.start = value
                }
            }
        }
        public class RenderedLayerEntries : Tea.TeaModel {
            public class SimpleContact : Tea.TeaModel {
                public var id: Int64?

                public var name: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.id != nil {
                        map["Id"] = self.id!
                    }
                    if self.name != nil {
                        map["Name"] = self.name!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Id"] as? Int64 {
                        self.id = value
                    }
                    if let value = dict["Name"] as? String {
                        self.name = value
                    }
                }
            }
            public var start: String?

            public var end: String?

            public var simpleContact: GetOnCallSchedulesDetailResponseBody.Data.RenderedLayerEntries.SimpleContact?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.simpleContact?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.start != nil {
                    map["Start"] = self.start!
                }
                if self.end != nil {
                    map["End"] = self.end!
                }
                if self.simpleContact != nil {
                    map["SimpleContact"] = self.simpleContact?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Start"] as? String {
                    self.start = value
                }
                if let value = dict["End"] as? String {
                    self.end = value
                }
                if let value = dict["SimpleContact"] as? [String: Any?] {
                    var model = GetOnCallSchedulesDetailResponseBody.Data.RenderedLayerEntries.SimpleContact()
                    model.fromMap(value)
                    self.simpleContact = model
                }
            }
        }
        public class RenderedSubstitudeEntries : Tea.TeaModel {
            public class SimpleContact : Tea.TeaModel {
                public var id: Int64?

                public var name: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.id != nil {
                        map["Id"] = self.id!
                    }
                    if self.name != nil {
                        map["Name"] = self.name!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Id"] as? Int64 {
                        self.id = value
                    }
                    if let value = dict["Name"] as? String {
                        self.name = value
                    }
                }
            }
            public var end: String?

            public var simpleContact: GetOnCallSchedulesDetailResponseBody.Data.RenderedSubstitudeEntries.SimpleContact?

            public var start: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.simpleContact?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.end != nil {
                    map["End"] = self.end!
                }
                if self.simpleContact != nil {
                    map["SimpleContact"] = self.simpleContact?.toMap()
                }
                if self.start != nil {
                    map["Start"] = self.start!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["End"] as? String {
                    self.end = value
                }
                if let value = dict["SimpleContact"] as? [String: Any?] {
                    var model = GetOnCallSchedulesDetailResponseBody.Data.RenderedSubstitudeEntries.SimpleContact()
                    model.fromMap(value)
                    self.simpleContact = model
                }
                if let value = dict["Start"] as? String {
                    self.start = value
                }
            }
        }
        public class ScheduleLayers : Tea.TeaModel {
            public class Restrictions : Tea.TeaModel {
                public var endTimeOfDay: String?

                public var restrictionType: String?

                public var startTimeOfDay: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.endTimeOfDay != nil {
                        map["EndTimeOfDay"] = self.endTimeOfDay!
                    }
                    if self.restrictionType != nil {
                        map["RestrictionType"] = self.restrictionType!
                    }
                    if self.startTimeOfDay != nil {
                        map["StartTimeOfDay"] = self.startTimeOfDay!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["EndTimeOfDay"] as? String {
                        self.endTimeOfDay = value
                    }
                    if let value = dict["RestrictionType"] as? String {
                        self.restrictionType = value
                    }
                    if let value = dict["StartTimeOfDay"] as? String {
                        self.startTimeOfDay = value
                    }
                }
            }
            public var contactIds: [Int64]?

            public var restrictions: [GetOnCallSchedulesDetailResponseBody.Data.ScheduleLayers.Restrictions]?

            public var rotationType: String?

            public var shiftLength: Int64?

            public var startTime: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.contactIds != nil {
                    map["ContactIds"] = self.contactIds!
                }
                if self.restrictions != nil {
                    var tmp : [Any] = []
                    for k in self.restrictions! {
                        tmp.append(k.toMap())
                    }
                    map["Restrictions"] = tmp
                }
                if self.rotationType != nil {
                    map["RotationType"] = self.rotationType!
                }
                if self.shiftLength != nil {
                    map["ShiftLength"] = self.shiftLength!
                }
                if self.startTime != nil {
                    map["StartTime"] = self.startTime!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ContactIds"] as? [Int64] {
                    self.contactIds = value
                }
                if let value = dict["Restrictions"] as? [Any?] {
                    var tmp : [GetOnCallSchedulesDetailResponseBody.Data.ScheduleLayers.Restrictions] = []
                    for v in value {
                        if v != nil {
                            var model = GetOnCallSchedulesDetailResponseBody.Data.ScheduleLayers.Restrictions()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.restrictions = tmp
                }
                if let value = dict["RotationType"] as? String {
                    self.rotationType = value
                }
                if let value = dict["ShiftLength"] as? Int64 {
                    self.shiftLength = value
                }
                if let value = dict["StartTime"] as? String {
                    self.startTime = value
                }
            }
        }
        public var alertRobotId: Int64?

        public var description_: String?

        public var id: Int64?

        public var name: String?

        public var renderedFinnalEntries: [GetOnCallSchedulesDetailResponseBody.Data.RenderedFinnalEntries]?

        public var renderedLayerEntries: [[GetOnCallSchedulesDetailResponseBody.Data.RenderedLayerEntries]]?

        public var renderedSubstitudeEntries: [GetOnCallSchedulesDetailResponseBody.Data.RenderedSubstitudeEntries]?

        public var scheduleLayers: [GetOnCallSchedulesDetailResponseBody.Data.ScheduleLayers]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.alertRobotId != nil {
                map["AlertRobotId"] = self.alertRobotId!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.renderedFinnalEntries != nil {
                var tmp : [Any] = []
                for k in self.renderedFinnalEntries! {
                    tmp.append(k.toMap())
                }
                map["RenderedFinnalEntries"] = tmp
            }
            if self.renderedLayerEntries != nil {
                var tmp : [Any] = []
                for k in self.renderedLayerEntries! {
                    var l1 : [Any] = []
                    for k1 in k {
                        l1.append(k1.toMap())
                    }
                    tmp.append(l1)
                }
                map["RenderedLayerEntries"] = tmp
            }
            if self.renderedSubstitudeEntries != nil {
                var tmp : [Any] = []
                for k in self.renderedSubstitudeEntries! {
                    tmp.append(k.toMap())
                }
                map["RenderedSubstitudeEntries"] = tmp
            }
            if self.scheduleLayers != nil {
                var tmp : [Any] = []
                for k in self.scheduleLayers! {
                    tmp.append(k.toMap())
                }
                map["ScheduleLayers"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AlertRobotId"] as? Int64 {
                self.alertRobotId = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["Id"] as? Int64 {
                self.id = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["RenderedFinnalEntries"] as? [Any?] {
                var tmp : [GetOnCallSchedulesDetailResponseBody.Data.RenderedFinnalEntries] = []
                for v in value {
                    if v != nil {
                        var model = GetOnCallSchedulesDetailResponseBody.Data.RenderedFinnalEntries()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.renderedFinnalEntries = tmp
            }
            if let value = dict["RenderedLayerEntries"] as? [Any?] {
                var tmp : [[GetOnCallSchedulesDetailResponseBody.Data.RenderedLayerEntries]] = []
                for v in value {
                    if v != nil {
                        var l1 : [GetOnCallSchedulesDetailResponseBody.Data.RenderedLayerEntries] = []
                        for v1 in v as! [Any?] {
                            if v1 != nil {
                                var model = GetOnCallSchedulesDetailResponseBody.Data.RenderedLayerEntries()
                                if v1 != nil {
                                    model.fromMap(v1 as? [String: Any?])
                                }
                                l1.append(model)
                            }
                        }
                        tmp.append(l1)
                    }
                }
                self.renderedLayerEntries = tmp
            }
            if let value = dict["RenderedSubstitudeEntries"] as? [Any?] {
                var tmp : [GetOnCallSchedulesDetailResponseBody.Data.RenderedSubstitudeEntries] = []
                for v in value {
                    if v != nil {
                        var model = GetOnCallSchedulesDetailResponseBody.Data.RenderedSubstitudeEntries()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.renderedSubstitudeEntries = tmp
            }
            if let value = dict["ScheduleLayers"] as? [Any?] {
                var tmp : [GetOnCallSchedulesDetailResponseBody.Data.ScheduleLayers] = []
                for v in value {
                    if v != nil {
                        var model = GetOnCallSchedulesDetailResponseBody.Data.ScheduleLayers()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.scheduleLayers = tmp
            }
        }
    }
    public var data: GetOnCallSchedulesDetailResponseBody.Data?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetOnCallSchedulesDetailResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetOnCallSchedulesDetailResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetOnCallSchedulesDetailResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetOnCallSchedulesDetailResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetPrometheusApiTokenRequest : Tea.TeaModel {
    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class GetPrometheusApiTokenResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var token: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.token != nil {
            map["Token"] = self.token!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Token"] as? String {
            self.token = value
        }
    }
}

public class GetPrometheusApiTokenResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetPrometheusApiTokenResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetPrometheusApiTokenResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetPrometheusGlobalViewRequest : Tea.TeaModel {
    public var globalViewClusterId: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.globalViewClusterId != nil {
            map["GlobalViewClusterId"] = self.globalViewClusterId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["GlobalViewClusterId"] as? String {
            self.globalViewClusterId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class GetPrometheusGlobalViewResponseBody : Tea.TeaModel {
    public var code: Int32?

    public var data: String?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetPrometheusGlobalViewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetPrometheusGlobalViewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetPrometheusGlobalViewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetPrometheusInstanceRequest : Tea.TeaModel {
    public var clusterId: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClusterId"] as? String {
            self.clusterId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class GetPrometheusInstanceResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Tags : Tea.TeaModel {
            public var tagKey: String?

            public var tagValue: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.tagKey != nil {
                    map["TagKey"] = self.tagKey!
                }
                if self.tagValue != nil {
                    map["TagValue"] = self.tagValue!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["TagKey"] as? String {
                    self.tagKey = value
                }
                if let value = dict["TagValue"] as? String {
                    self.tagValue = value
                }
            }
        }
        public var accessType: String?

        public var archiveDuration: Int32?

        public var authFreeReadPolicy: String?

        public var authFreeWritePolicy: String?

        public var authToken: String?

        public var clusterId: String?

        public var clusterName: String?

        public var clusterType: String?

        public var dbInstanceStatus: String?

        public var enableAuthFreeRead: Bool?

        public var enableAuthFreeWrite: Bool?

        public var enableAuthToken: String?

        public var extraInfo: [String: String]?

        public var grafanaInstanceId: String?

        public var httpApiInterUrl: String?

        public var httpApiIntraUrl: String?

        public var openTelemetryInterUrl: String?

        public var openTelemetryIntraUrl: String?

        public var paymentType: String?

        public var paymentTypeUpdateTime: String?

        public var product: String?

        public var pushGatewayInterUrl: String?

        public var pushGatewayIntraUrl: String?

        public var regionId: String?

        public var remoteReadInterUrl: String?

        public var remoteReadIntraUrl: String?

        public var remoteWriteInterUrl: String?

        public var remoteWriteIntraUrl: String?

        public var resourceGroupId: String?

        public var resourceType: String?

        public var securityGroupId: String?

        public var storageDuration: Int32?

        public var subClustersJson: String?

        public var supportAuthTypes: [String]?

        public var tags: [GetPrometheusInstanceResponseBody.Data.Tags]?

        public var userId: String?

        public var vSwitchId: String?

        public var version: String?

        public var vpcId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accessType != nil {
                map["AccessType"] = self.accessType!
            }
            if self.archiveDuration != nil {
                map["ArchiveDuration"] = self.archiveDuration!
            }
            if self.authFreeReadPolicy != nil {
                map["AuthFreeReadPolicy"] = self.authFreeReadPolicy!
            }
            if self.authFreeWritePolicy != nil {
                map["AuthFreeWritePolicy"] = self.authFreeWritePolicy!
            }
            if self.authToken != nil {
                map["AuthToken"] = self.authToken!
            }
            if self.clusterId != nil {
                map["ClusterId"] = self.clusterId!
            }
            if self.clusterName != nil {
                map["ClusterName"] = self.clusterName!
            }
            if self.clusterType != nil {
                map["ClusterType"] = self.clusterType!
            }
            if self.dbInstanceStatus != nil {
                map["DbInstanceStatus"] = self.dbInstanceStatus!
            }
            if self.enableAuthFreeRead != nil {
                map["EnableAuthFreeRead"] = self.enableAuthFreeRead!
            }
            if self.enableAuthFreeWrite != nil {
                map["EnableAuthFreeWrite"] = self.enableAuthFreeWrite!
            }
            if self.enableAuthToken != nil {
                map["EnableAuthToken"] = self.enableAuthToken!
            }
            if self.extraInfo != nil {
                map["ExtraInfo"] = self.extraInfo!
            }
            if self.grafanaInstanceId != nil {
                map["GrafanaInstanceId"] = self.grafanaInstanceId!
            }
            if self.httpApiInterUrl != nil {
                map["HttpApiInterUrl"] = self.httpApiInterUrl!
            }
            if self.httpApiIntraUrl != nil {
                map["HttpApiIntraUrl"] = self.httpApiIntraUrl!
            }
            if self.openTelemetryInterUrl != nil {
                map["OpenTelemetryInterUrl"] = self.openTelemetryInterUrl!
            }
            if self.openTelemetryIntraUrl != nil {
                map["OpenTelemetryIntraUrl"] = self.openTelemetryIntraUrl!
            }
            if self.paymentType != nil {
                map["PaymentType"] = self.paymentType!
            }
            if self.paymentTypeUpdateTime != nil {
                map["PaymentTypeUpdateTime"] = self.paymentTypeUpdateTime!
            }
            if self.product != nil {
                map["Product"] = self.product!
            }
            if self.pushGatewayInterUrl != nil {
                map["PushGatewayInterUrl"] = self.pushGatewayInterUrl!
            }
            if self.pushGatewayIntraUrl != nil {
                map["PushGatewayIntraUrl"] = self.pushGatewayIntraUrl!
            }
            if self.regionId != nil {
                map["RegionId"] = self.regionId!
            }
            if self.remoteReadInterUrl != nil {
                map["RemoteReadInterUrl"] = self.remoteReadInterUrl!
            }
            if self.remoteReadIntraUrl != nil {
                map["RemoteReadIntraUrl"] = self.remoteReadIntraUrl!
            }
            if self.remoteWriteInterUrl != nil {
                map["RemoteWriteInterUrl"] = self.remoteWriteInterUrl!
            }
            if self.remoteWriteIntraUrl != nil {
                map["RemoteWriteIntraUrl"] = self.remoteWriteIntraUrl!
            }
            if self.resourceGroupId != nil {
                map["ResourceGroupId"] = self.resourceGroupId!
            }
            if self.resourceType != nil {
                map["ResourceType"] = self.resourceType!
            }
            if self.securityGroupId != nil {
                map["SecurityGroupId"] = self.securityGroupId!
            }
            if self.storageDuration != nil {
                map["StorageDuration"] = self.storageDuration!
            }
            if self.subClustersJson != nil {
                map["SubClustersJson"] = self.subClustersJson!
            }
            if self.supportAuthTypes != nil {
                map["SupportAuthTypes"] = self.supportAuthTypes!
            }
            if self.tags != nil {
                var tmp : [Any] = []
                for k in self.tags! {
                    tmp.append(k.toMap())
                }
                map["Tags"] = tmp
            }
            if self.userId != nil {
                map["UserId"] = self.userId!
            }
            if self.vSwitchId != nil {
                map["VSwitchId"] = self.vSwitchId!
            }
            if self.version != nil {
                map["Version"] = self.version!
            }
            if self.vpcId != nil {
                map["VpcId"] = self.vpcId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AccessType"] as? String {
                self.accessType = value
            }
            if let value = dict["ArchiveDuration"] as? Int32 {
                self.archiveDuration = value
            }
            if let value = dict["AuthFreeReadPolicy"] as? String {
                self.authFreeReadPolicy = value
            }
            if let value = dict["AuthFreeWritePolicy"] as? String {
                self.authFreeWritePolicy = value
            }
            if let value = dict["AuthToken"] as? String {
                self.authToken = value
            }
            if let value = dict["ClusterId"] as? String {
                self.clusterId = value
            }
            if let value = dict["ClusterName"] as? String {
                self.clusterName = value
            }
            if let value = dict["ClusterType"] as? String {
                self.clusterType = value
            }
            if let value = dict["DbInstanceStatus"] as? String {
                self.dbInstanceStatus = value
            }
            if let value = dict["EnableAuthFreeRead"] as? Bool {
                self.enableAuthFreeRead = value
            }
            if let value = dict["EnableAuthFreeWrite"] as? Bool {
                self.enableAuthFreeWrite = value
            }
            if let value = dict["EnableAuthToken"] as? String {
                self.enableAuthToken = value
            }
            if let value = dict["ExtraInfo"] as? [String: String] {
                self.extraInfo = value
            }
            if let value = dict["GrafanaInstanceId"] as? String {
                self.grafanaInstanceId = value
            }
            if let value = dict["HttpApiInterUrl"] as? String {
                self.httpApiInterUrl = value
            }
            if let value = dict["HttpApiIntraUrl"] as? String {
                self.httpApiIntraUrl = value
            }
            if let value = dict["OpenTelemetryInterUrl"] as? String {
                self.openTelemetryInterUrl = value
            }
            if let value = dict["OpenTelemetryIntraUrl"] as? String {
                self.openTelemetryIntraUrl = value
            }
            if let value = dict["PaymentType"] as? String {
                self.paymentType = value
            }
            if let value = dict["PaymentTypeUpdateTime"] as? String {
                self.paymentTypeUpdateTime = value
            }
            if let value = dict["Product"] as? String {
                self.product = value
            }
            if let value = dict["PushGatewayInterUrl"] as? String {
                self.pushGatewayInterUrl = value
            }
            if let value = dict["PushGatewayIntraUrl"] as? String {
                self.pushGatewayIntraUrl = value
            }
            if let value = dict["RegionId"] as? String {
                self.regionId = value
            }
            if let value = dict["RemoteReadInterUrl"] as? String {
                self.remoteReadInterUrl = value
            }
            if let value = dict["RemoteReadIntraUrl"] as? String {
                self.remoteReadIntraUrl = value
            }
            if let value = dict["RemoteWriteInterUrl"] as? String {
                self.remoteWriteInterUrl = value
            }
            if let value = dict["RemoteWriteIntraUrl"] as? String {
                self.remoteWriteIntraUrl = value
            }
            if let value = dict["ResourceGroupId"] as? String {
                self.resourceGroupId = value
            }
            if let value = dict["ResourceType"] as? String {
                self.resourceType = value
            }
            if let value = dict["SecurityGroupId"] as? String {
                self.securityGroupId = value
            }
            if let value = dict["StorageDuration"] as? Int32 {
                self.storageDuration = value
            }
            if let value = dict["SubClustersJson"] as? String {
                self.subClustersJson = value
            }
            if let value = dict["SupportAuthTypes"] as? [String] {
                self.supportAuthTypes = value
            }
            if let value = dict["Tags"] as? [Any?] {
                var tmp : [GetPrometheusInstanceResponseBody.Data.Tags] = []
                for v in value {
                    if v != nil {
                        var model = GetPrometheusInstanceResponseBody.Data.Tags()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.tags = tmp
            }
            if let value = dict["UserId"] as? String {
                self.userId = value
            }
            if let value = dict["VSwitchId"] as? String {
                self.vSwitchId = value
            }
            if let value = dict["Version"] as? String {
                self.version = value
            }
            if let value = dict["VpcId"] as? String {
                self.vpcId = value
            }
        }
    }
    public var code: Int32?

    public var data: GetPrometheusInstanceResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetPrometheusInstanceResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetPrometheusInstanceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetPrometheusInstanceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetPrometheusInstanceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetPrometheusIntegrationRequest : Tea.TeaModel {
    public var clusterId: String?

    public var instanceId: Int64?

    public var integrationType: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.integrationType != nil {
            map["IntegrationType"] = self.integrationType!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClusterId"] as? String {
            self.clusterId = value
        }
        if let value = dict["InstanceId"] as? Int64 {
            self.instanceId = value
        }
        if let value = dict["IntegrationType"] as? String {
            self.integrationType = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class GetPrometheusIntegrationResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var canDelete: Bool?

        public var canEditor: Bool?

        public var clusterId: String?

        public var containerName: String?

        public var describe: String?

        public var exporterType: String?

        public var instanceId: Int64?

        public var instanceName: String?

        public var integrationType: String?

        public var namespace: String?

        public var needUpgrade: Bool?

        public var param: String?

        public var showDescribe: Bool?

        public var showLog: String?

        public var status: String?

        public var target: String?

        public var version: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.canDelete != nil {
                map["CanDelete"] = self.canDelete!
            }
            if self.canEditor != nil {
                map["CanEditor"] = self.canEditor!
            }
            if self.clusterId != nil {
                map["ClusterId"] = self.clusterId!
            }
            if self.containerName != nil {
                map["ContainerName"] = self.containerName!
            }
            if self.describe != nil {
                map["Describe"] = self.describe!
            }
            if self.exporterType != nil {
                map["ExporterType"] = self.exporterType!
            }
            if self.instanceId != nil {
                map["InstanceId"] = self.instanceId!
            }
            if self.instanceName != nil {
                map["InstanceName"] = self.instanceName!
            }
            if self.integrationType != nil {
                map["IntegrationType"] = self.integrationType!
            }
            if self.namespace != nil {
                map["Namespace"] = self.namespace!
            }
            if self.needUpgrade != nil {
                map["NeedUpgrade"] = self.needUpgrade!
            }
            if self.param != nil {
                map["Param"] = self.param!
            }
            if self.showDescribe != nil {
                map["ShowDescribe"] = self.showDescribe!
            }
            if self.showLog != nil {
                map["ShowLog"] = self.showLog!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.target != nil {
                map["Target"] = self.target!
            }
            if self.version != nil {
                map["Version"] = self.version!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CanDelete"] as? Bool {
                self.canDelete = value
            }
            if let value = dict["CanEditor"] as? Bool {
                self.canEditor = value
            }
            if let value = dict["ClusterId"] as? String {
                self.clusterId = value
            }
            if let value = dict["ContainerName"] as? String {
                self.containerName = value
            }
            if let value = dict["Describe"] as? String {
                self.describe = value
            }
            if let value = dict["ExporterType"] as? String {
                self.exporterType = value
            }
            if let value = dict["InstanceId"] as? Int64 {
                self.instanceId = value
            }
            if let value = dict["InstanceName"] as? String {
                self.instanceName = value
            }
            if let value = dict["IntegrationType"] as? String {
                self.integrationType = value
            }
            if let value = dict["Namespace"] as? String {
                self.namespace = value
            }
            if let value = dict["NeedUpgrade"] as? Bool {
                self.needUpgrade = value
            }
            if let value = dict["Param"] as? String {
                self.param = value
            }
            if let value = dict["ShowDescribe"] as? Bool {
                self.showDescribe = value
            }
            if let value = dict["ShowLog"] as? String {
                self.showLog = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["Target"] as? String {
                self.target = value
            }
            if let value = dict["Version"] as? String {
                self.version = value
            }
        }
    }
    public var code: Int32?

    public var data: GetPrometheusIntegrationResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetPrometheusIntegrationResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetPrometheusIntegrationResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetPrometheusIntegrationResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetPrometheusIntegrationResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetPrometheusMonitoringRequest : Tea.TeaModel {
    public var clusterId: String?

    public var monitoringName: String?

    public var regionId: String?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.monitoringName != nil {
            map["MonitoringName"] = self.monitoringName!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClusterId"] as? String {
            self.clusterId = value
        }
        if let value = dict["MonitoringName"] as? String {
            self.monitoringName = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
    }
}

public class GetPrometheusMonitoringResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var clusterId: String?

        public var configYaml: String?

        public var monitoringName: String?

        public var status: String?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.clusterId != nil {
                map["ClusterId"] = self.clusterId!
            }
            if self.configYaml != nil {
                map["ConfigYaml"] = self.configYaml!
            }
            if self.monitoringName != nil {
                map["MonitoringName"] = self.monitoringName!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ClusterId"] as? String {
                self.clusterId = value
            }
            if let value = dict["ConfigYaml"] as? String {
                self.configYaml = value
            }
            if let value = dict["MonitoringName"] as? String {
                self.monitoringName = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
        }
    }
    public var code: Int32?

    public var data: GetPrometheusMonitoringResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetPrometheusMonitoringResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetPrometheusMonitoringResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetPrometheusMonitoringResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetPrometheusMonitoringResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetRecordingRuleRequest : Tea.TeaModel {
    public var clusterId: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClusterId"] as? String {
            self.clusterId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class GetRecordingRuleResponseBody : Tea.TeaModel {
    public var code: Int32?

    public var data: String?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetRecordingRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetRecordingRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetRecordingRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetRetcodeAppByPidRequest : Tea.TeaModel {
    public class Tags : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var pid: String?

    public var regionId: String?

    public var tags: [GetRetcodeAppByPidRequest.Tags]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pid != nil {
            map["Pid"] = self.pid!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.tags != nil {
            var tmp : [Any] = []
            for k in self.tags! {
                tmp.append(k.toMap())
            }
            map["Tags"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Pid"] as? String {
            self.pid = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Tags"] as? [Any?] {
            var tmp : [GetRetcodeAppByPidRequest.Tags] = []
            for v in value {
                if v != nil {
                    var model = GetRetcodeAppByPidRequest.Tags()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tags = tmp
        }
    }
}

public class GetRetcodeAppByPidResponseBody : Tea.TeaModel {
    public class RetcodeApp : Tea.TeaModel {
        public class Tags : Tea.TeaModel {
            public var key: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.key != nil {
                    map["Key"] = self.key!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Key"] as? String {
                    self.key = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public var appId: String?

        public var appName: String?

        public var pid: String?

        public var resourceGroupId: String?

        public var retcodeAppType: String?

        public var tags: [GetRetcodeAppByPidResponseBody.RetcodeApp.Tags]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.appId != nil {
                map["AppId"] = self.appId!
            }
            if self.appName != nil {
                map["AppName"] = self.appName!
            }
            if self.pid != nil {
                map["Pid"] = self.pid!
            }
            if self.resourceGroupId != nil {
                map["ResourceGroupId"] = self.resourceGroupId!
            }
            if self.retcodeAppType != nil {
                map["RetcodeAppType"] = self.retcodeAppType!
            }
            if self.tags != nil {
                var tmp : [Any] = []
                for k in self.tags! {
                    tmp.append(k.toMap())
                }
                map["Tags"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AppId"] as? String {
                self.appId = value
            }
            if let value = dict["AppName"] as? String {
                self.appName = value
            }
            if let value = dict["Pid"] as? String {
                self.pid = value
            }
            if let value = dict["ResourceGroupId"] as? String {
                self.resourceGroupId = value
            }
            if let value = dict["RetcodeAppType"] as? String {
                self.retcodeAppType = value
            }
            if let value = dict["Tags"] as? [Any?] {
                var tmp : [GetRetcodeAppByPidResponseBody.RetcodeApp.Tags] = []
                for v in value {
                    if v != nil {
                        var model = GetRetcodeAppByPidResponseBody.RetcodeApp.Tags()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.tags = tmp
            }
        }
    }
    public var requestId: String?

    public var retcodeApp: GetRetcodeAppByPidResponseBody.RetcodeApp?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.retcodeApp?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.retcodeApp != nil {
            map["RetcodeApp"] = self.retcodeApp?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["RetcodeApp"] as? [String: Any?] {
            var model = GetRetcodeAppByPidResponseBody.RetcodeApp()
            model.fromMap(value)
            self.retcodeApp = model
        }
    }
}

public class GetRetcodeAppByPidResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetRetcodeAppByPidResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetRetcodeAppByPidResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetRetcodeDataByQueryRequest : Tea.TeaModel {
    public var from: Int64?

    public var pid: String?

    public var query: String?

    public var regionId: String?

    public var to: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.from != nil {
            map["From"] = self.from!
        }
        if self.pid != nil {
            map["Pid"] = self.pid!
        }
        if self.query != nil {
            map["Query"] = self.query!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.to != nil {
            map["To"] = self.to!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["From"] as? Int64 {
            self.from = value
        }
        if let value = dict["Pid"] as? String {
            self.pid = value
        }
        if let value = dict["Query"] as? String {
            self.query = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["To"] as? Int64 {
            self.to = value
        }
    }
}

public class GetRetcodeDataByQueryResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetRetcodeDataByQueryResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetRetcodeDataByQueryResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetRetcodeDataByQueryResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetRetcodeLogstoreRequest : Tea.TeaModel {
    public var pid: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pid != nil {
            map["Pid"] = self.pid!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Pid"] as? String {
            self.pid = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class GetRetcodeLogstoreResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class RetcodeSLSConfig : Tea.TeaModel {
            public var logstore: String?

            public var project: String?

            public var regionId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.logstore != nil {
                    map["Logstore"] = self.logstore!
                }
                if self.project != nil {
                    map["Project"] = self.project!
                }
                if self.regionId != nil {
                    map["RegionId"] = self.regionId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Logstore"] as? String {
                    self.logstore = value
                }
                if let value = dict["Project"] as? String {
                    self.project = value
                }
                if let value = dict["RegionId"] as? String {
                    self.regionId = value
                }
            }
        }
        public var message: String?

        public var retcodeSLSConfig: GetRetcodeLogstoreResponseBody.Data.RetcodeSLSConfig?

        public var status: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.retcodeSLSConfig?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.message != nil {
                map["Message"] = self.message!
            }
            if self.retcodeSLSConfig != nil {
                map["RetcodeSLSConfig"] = self.retcodeSLSConfig?.toMap()
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Message"] as? String {
                self.message = value
            }
            if let value = dict["RetcodeSLSConfig"] as? [String: Any?] {
                var model = GetRetcodeLogstoreResponseBody.Data.RetcodeSLSConfig()
                model.fromMap(value)
                self.retcodeSLSConfig = model
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
        }
    }
    public var data: GetRetcodeLogstoreResponseBody.Data?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetRetcodeLogstoreResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetRetcodeLogstoreResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetRetcodeLogstoreResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetRetcodeLogstoreResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetRetcodeShareUrlRequest : Tea.TeaModel {
    public var pid: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pid != nil {
            map["Pid"] = self.pid!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Pid"] as? String {
            self.pid = value
        }
    }
}

public class GetRetcodeShareUrlResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var url: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.url != nil {
            map["Url"] = self.url!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Url"] as? String {
            self.url = value
        }
    }
}

public class GetRetcodeShareUrlResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetRetcodeShareUrlResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetRetcodeShareUrlResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetRumAppInfoRequest : Tea.TeaModel {
    public var appGroup: String?

    public var pid: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appGroup != nil {
            map["AppGroup"] = self.appGroup!
        }
        if self.pid != nil {
            map["Pid"] = self.pid!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppGroup"] as? String {
            self.appGroup = value
        }
        if let value = dict["Pid"] as? String {
            self.pid = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class GetRumAppInfoResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class BonreeSDKConfig : Tea.TeaModel {
            public class ModuleConfig : Tea.TeaModel {
                public var defaultConfig: [String: DataBonreeSDKConfigModuleConfigDefaultConfigValue]?

                public var enable: Bool?

                public var versionConfigs: [String: DataBonreeSDKConfigModuleConfigVersionConfigsValue]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.defaultConfig != nil {
                        var tmp : [String: Any] = [:]
                        for (k, v) in self.defaultConfig! {
                            tmp[k] = v.toMap()
                        }
                        map["defaultConfig"] = tmp
                    }
                    if self.enable != nil {
                        map["enable"] = self.enable!
                    }
                    if self.versionConfigs != nil {
                        var tmp : [String: Any] = [:]
                        for (k, v) in self.versionConfigs! {
                            tmp[k] = v.toMap()
                        }
                        map["versionConfigs"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["defaultConfig"] as? [String: Any?] {
                        var tmp : [String: DataBonreeSDKConfigModuleConfigDefaultConfigValue] = [:]
                        for (k, v) in value {
                            if v != nil {
                                var model = DataBonreeSDKConfigModuleConfigDefaultConfigValue()
                                model.fromMap(v as? [String: Any?])
                                tmp[k] = model
                            }
                        }
                        self.defaultConfig = tmp
                    }
                    if let value = dict["enable"] as? Bool {
                        self.enable = value
                    }
                    if let value = dict["versionConfigs"] as? [String: Any?] {
                        var tmp : [String: DataBonreeSDKConfigModuleConfigVersionConfigsValue] = [:]
                        for (k, v) in value {
                            if v != nil {
                                var model = DataBonreeSDKConfigModuleConfigVersionConfigsValue()
                                model.fromMap(v as? [String: Any?])
                                tmp[k] = model
                            }
                        }
                        self.versionConfigs = tmp
                    }
                }
            }
            public class SamplingConfig : Tea.TeaModel {
                public var samplingRate: Int32?

                public var samplingType: Int32?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.samplingRate != nil {
                        map["samplingRate"] = self.samplingRate!
                    }
                    if self.samplingType != nil {
                        map["samplingType"] = self.samplingType!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["samplingRate"] as? Int32 {
                        self.samplingRate = value
                    }
                    if let value = dict["samplingType"] as? Int32 {
                        self.samplingType = value
                    }
                }
            }
            public var moduleConfig: GetRumAppInfoResponseBody.Data.BonreeSDKConfig.ModuleConfig?

            public var samplingConfig: GetRumAppInfoResponseBody.Data.BonreeSDKConfig.SamplingConfig?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.moduleConfig?.validate()
                try self.samplingConfig?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.moduleConfig != nil {
                    map["moduleConfig"] = self.moduleConfig?.toMap()
                }
                if self.samplingConfig != nil {
                    map["samplingConfig"] = self.samplingConfig?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["moduleConfig"] as? [String: Any?] {
                    var model = GetRumAppInfoResponseBody.Data.BonreeSDKConfig.ModuleConfig()
                    model.fromMap(value)
                    self.moduleConfig = model
                }
                if let value = dict["samplingConfig"] as? [String: Any?] {
                    var model = GetRumAppInfoResponseBody.Data.BonreeSDKConfig.SamplingConfig()
                    model.fromMap(value)
                    self.samplingConfig = model
                }
            }
        }
        public class ServiceDomainConfigs : Tea.TeaModel {
            public var description_: String?

            public var domain: String?

            public var propagatorTypes: [String]?

            public var samplingRate: Int32?

            public var tracing: Bool?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.domain != nil {
                    map["Domain"] = self.domain!
                }
                if self.propagatorTypes != nil {
                    map["PropagatorTypes"] = self.propagatorTypes!
                }
                if self.samplingRate != nil {
                    map["SamplingRate"] = self.samplingRate!
                }
                if self.tracing != nil {
                    map["Tracing"] = self.tracing!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["Domain"] as? String {
                    self.domain = value
                }
                if let value = dict["PropagatorTypes"] as? [String] {
                    self.propagatorTypes = value
                }
                if let value = dict["SamplingRate"] as? Int32 {
                    self.samplingRate = value
                }
                if let value = dict["Tracing"] as? Bool {
                    self.tracing = value
                }
            }
        }
        public class Tags : Tea.TeaModel {
            public var key: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.key != nil {
                    map["Key"] = self.key!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Key"] as? String {
                    self.key = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public var appConfig: String?

        public var appGroup: String?

        public var appType: String?

        public var backendServiceTraceRegion: String?

        public var bonreeSDKConfig: GetRumAppInfoResponseBody.Data.BonreeSDKConfig?

        public var cdnDomain: String?

        public var createTime: String?

        public var description_: String?

        public var endpoint: String?

        public var isSubscription: String?

        public var name: String?

        public var nickName: String?

        public var packageName: String?

        public var pid: String?

        public var regionId: String?

        public var resourceGroupId: String?

        public var serviceDomainConfigs: [GetRumAppInfoResponseBody.Data.ServiceDomainConfigs]?

        public var slsLogstore: String?

        public var slsProject: String?

        public var status: String?

        public var tags: [GetRumAppInfoResponseBody.Data.Tags]?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.bonreeSDKConfig?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.appConfig != nil {
                map["AppConfig"] = self.appConfig!
            }
            if self.appGroup != nil {
                map["AppGroup"] = self.appGroup!
            }
            if self.appType != nil {
                map["AppType"] = self.appType!
            }
            if self.backendServiceTraceRegion != nil {
                map["BackendServiceTraceRegion"] = self.backendServiceTraceRegion!
            }
            if self.bonreeSDKConfig != nil {
                map["BonreeSDKConfig"] = self.bonreeSDKConfig?.toMap()
            }
            if self.cdnDomain != nil {
                map["CdnDomain"] = self.cdnDomain!
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.endpoint != nil {
                map["Endpoint"] = self.endpoint!
            }
            if self.isSubscription != nil {
                map["IsSubscription"] = self.isSubscription!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.nickName != nil {
                map["NickName"] = self.nickName!
            }
            if self.packageName != nil {
                map["PackageName"] = self.packageName!
            }
            if self.pid != nil {
                map["Pid"] = self.pid!
            }
            if self.regionId != nil {
                map["RegionId"] = self.regionId!
            }
            if self.resourceGroupId != nil {
                map["ResourceGroupId"] = self.resourceGroupId!
            }
            if self.serviceDomainConfigs != nil {
                var tmp : [Any] = []
                for k in self.serviceDomainConfigs! {
                    tmp.append(k.toMap())
                }
                map["ServiceDomainConfigs"] = tmp
            }
            if self.slsLogstore != nil {
                map["SlsLogstore"] = self.slsLogstore!
            }
            if self.slsProject != nil {
                map["SlsProject"] = self.slsProject!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.tags != nil {
                var tmp : [Any] = []
                for k in self.tags! {
                    tmp.append(k.toMap())
                }
                map["Tags"] = tmp
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AppConfig"] as? String {
                self.appConfig = value
            }
            if let value = dict["AppGroup"] as? String {
                self.appGroup = value
            }
            if let value = dict["AppType"] as? String {
                self.appType = value
            }
            if let value = dict["BackendServiceTraceRegion"] as? String {
                self.backendServiceTraceRegion = value
            }
            if let value = dict["BonreeSDKConfig"] as? [String: Any?] {
                var model = GetRumAppInfoResponseBody.Data.BonreeSDKConfig()
                model.fromMap(value)
                self.bonreeSDKConfig = model
            }
            if let value = dict["CdnDomain"] as? String {
                self.cdnDomain = value
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["Endpoint"] as? String {
                self.endpoint = value
            }
            if let value = dict["IsSubscription"] as? String {
                self.isSubscription = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["NickName"] as? String {
                self.nickName = value
            }
            if let value = dict["PackageName"] as? String {
                self.packageName = value
            }
            if let value = dict["Pid"] as? String {
                self.pid = value
            }
            if let value = dict["RegionId"] as? String {
                self.regionId = value
            }
            if let value = dict["ResourceGroupId"] as? String {
                self.resourceGroupId = value
            }
            if let value = dict["ServiceDomainConfigs"] as? [Any?] {
                var tmp : [GetRumAppInfoResponseBody.Data.ServiceDomainConfigs] = []
                for v in value {
                    if v != nil {
                        var model = GetRumAppInfoResponseBody.Data.ServiceDomainConfigs()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.serviceDomainConfigs = tmp
            }
            if let value = dict["SlsLogstore"] as? String {
                self.slsLogstore = value
            }
            if let value = dict["SlsProject"] as? String {
                self.slsProject = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["Tags"] as? [Any?] {
                var tmp : [GetRumAppInfoResponseBody.Data.Tags] = []
                for v in value {
                    if v != nil {
                        var model = GetRumAppInfoResponseBody.Data.Tags()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.tags = tmp
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
        }
    }
    public var code: Int32?

    public var data: GetRumAppInfoResponseBody.Data?

    public var httpStatusCode: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetRumAppInfoResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? String {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetRumAppInfoResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetRumAppInfoResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetRumAppInfoResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetRumAppsRequest : Tea.TeaModel {
    public class Tags : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var appGroup: String?

    public var appId: String?

    public var appName: String?

    public var appType: String?

    public var regionId: String?

    public var resourceGroupId: String?

    public var tags: [GetRumAppsRequest.Tags]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appGroup != nil {
            map["AppGroup"] = self.appGroup!
        }
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        if self.appName != nil {
            map["AppName"] = self.appName!
        }
        if self.appType != nil {
            map["AppType"] = self.appType!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceGroupId != nil {
            map["ResourceGroupId"] = self.resourceGroupId!
        }
        if self.tags != nil {
            var tmp : [Any] = []
            for k in self.tags! {
                tmp.append(k.toMap())
            }
            map["Tags"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppGroup"] as? String {
            self.appGroup = value
        }
        if let value = dict["AppId"] as? String {
            self.appId = value
        }
        if let value = dict["AppName"] as? String {
            self.appName = value
        }
        if let value = dict["AppType"] as? String {
            self.appType = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceGroupId"] as? String {
            self.resourceGroupId = value
        }
        if let value = dict["Tags"] as? [Any?] {
            var tmp : [GetRumAppsRequest.Tags] = []
            for v in value {
                if v != nil {
                    var model = GetRumAppsRequest.Tags()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tags = tmp
        }
    }
}

public class GetRumAppsShrinkRequest : Tea.TeaModel {
    public var appGroup: String?

    public var appId: String?

    public var appName: String?

    public var appType: String?

    public var regionId: String?

    public var resourceGroupId: String?

    public var tagsShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appGroup != nil {
            map["AppGroup"] = self.appGroup!
        }
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        if self.appName != nil {
            map["AppName"] = self.appName!
        }
        if self.appType != nil {
            map["AppType"] = self.appType!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceGroupId != nil {
            map["ResourceGroupId"] = self.resourceGroupId!
        }
        if self.tagsShrink != nil {
            map["Tags"] = self.tagsShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppGroup"] as? String {
            self.appGroup = value
        }
        if let value = dict["AppId"] as? String {
            self.appId = value
        }
        if let value = dict["AppName"] as? String {
            self.appName = value
        }
        if let value = dict["AppType"] as? String {
            self.appType = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceGroupId"] as? String {
            self.resourceGroupId = value
        }
        if let value = dict["Tags"] as? String {
            self.tagsShrink = value
        }
    }
}

public class GetRumAppsResponseBody : Tea.TeaModel {
    public class AppList : Tea.TeaModel {
        public class ServiceDomainConfigs : Tea.TeaModel {
            public var description_: String?

            public var domain: String?

            public var propagatorTypes: [String]?

            public var tracing: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.domain != nil {
                    map["Domain"] = self.domain!
                }
                if self.propagatorTypes != nil {
                    map["PropagatorTypes"] = self.propagatorTypes!
                }
                if self.tracing != nil {
                    map["Tracing"] = self.tracing!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["Domain"] as? String {
                    self.domain = value
                }
                if let value = dict["PropagatorTypes"] as? [String] {
                    self.propagatorTypes = value
                }
                if let value = dict["Tracing"] as? String {
                    self.tracing = value
                }
            }
        }
        public class Tags : Tea.TeaModel {
            public var key: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.key != nil {
                    map["Key"] = self.key!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Key"] as? String {
                    self.key = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public var appType: String?

        public var createTime: Any?

        public var description_: String?

        public var endpoint: String?

        public var isSubscription: Bool?

        public var name: String?

        public var nickName: String?

        public var packageName: String?

        public var pid: String?

        public var regionId: String?

        public var resourceGroupId: String?

        public var serviceDomainConfigs: [GetRumAppsResponseBody.AppList.ServiceDomainConfigs]?

        public var slsLogstore: String?

        public var slsProject: String?

        public var status: String?

        public var tags: [GetRumAppsResponseBody.AppList.Tags]?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.appType != nil {
                map["AppType"] = self.appType!
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.endpoint != nil {
                map["Endpoint"] = self.endpoint!
            }
            if self.isSubscription != nil {
                map["IsSubscription"] = self.isSubscription!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.nickName != nil {
                map["NickName"] = self.nickName!
            }
            if self.packageName != nil {
                map["PackageName"] = self.packageName!
            }
            if self.pid != nil {
                map["Pid"] = self.pid!
            }
            if self.regionId != nil {
                map["RegionId"] = self.regionId!
            }
            if self.resourceGroupId != nil {
                map["ResourceGroupId"] = self.resourceGroupId!
            }
            if self.serviceDomainConfigs != nil {
                var tmp : [Any] = []
                for k in self.serviceDomainConfigs! {
                    tmp.append(k.toMap())
                }
                map["ServiceDomainConfigs"] = tmp
            }
            if self.slsLogstore != nil {
                map["SlsLogstore"] = self.slsLogstore!
            }
            if self.slsProject != nil {
                map["SlsProject"] = self.slsProject!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.tags != nil {
                var tmp : [Any] = []
                for k in self.tags! {
                    tmp.append(k.toMap())
                }
                map["Tags"] = tmp
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AppType"] as? String {
                self.appType = value
            }
            if let value = dict["CreateTime"] as? Any {
                self.createTime = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["Endpoint"] as? String {
                self.endpoint = value
            }
            if let value = dict["IsSubscription"] as? Bool {
                self.isSubscription = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["NickName"] as? String {
                self.nickName = value
            }
            if let value = dict["PackageName"] as? String {
                self.packageName = value
            }
            if let value = dict["Pid"] as? String {
                self.pid = value
            }
            if let value = dict["RegionId"] as? String {
                self.regionId = value
            }
            if let value = dict["ResourceGroupId"] as? String {
                self.resourceGroupId = value
            }
            if let value = dict["ServiceDomainConfigs"] as? [Any?] {
                var tmp : [GetRumAppsResponseBody.AppList.ServiceDomainConfigs] = []
                for v in value {
                    if v != nil {
                        var model = GetRumAppsResponseBody.AppList.ServiceDomainConfigs()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.serviceDomainConfigs = tmp
            }
            if let value = dict["SlsLogstore"] as? String {
                self.slsLogstore = value
            }
            if let value = dict["SlsProject"] as? String {
                self.slsProject = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["Tags"] as? [Any?] {
                var tmp : [GetRumAppsResponseBody.AppList.Tags] = []
                for v in value {
                    if v != nil {
                        var model = GetRumAppsResponseBody.AppList.Tags()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.tags = tmp
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
        }
    }
    public var appList: [GetRumAppsResponseBody.AppList]?

    public var code: Int32?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appList != nil {
            var tmp : [Any] = []
            for k in self.appList! {
                tmp.append(k.toMap())
            }
            map["AppList"] = tmp
        }
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppList"] as? [Any?] {
            var tmp : [GetRumAppsResponseBody.AppList] = []
            for v in value {
                if v != nil {
                    var model = GetRumAppsResponseBody.AppList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.appList = tmp
        }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetRumAppsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetRumAppsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetRumAppsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetRumDataForPageRequest : Tea.TeaModel {
    public var appGroup: String?

    public var currentPage: Int32?

    public var endTime: Int32?

    public var pageSize: Int32?

    public var pid: String?

    public var query: String?

    public var regionId: String?

    public var startTime: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appGroup != nil {
            map["AppGroup"] = self.appGroup!
        }
        if self.currentPage != nil {
            map["CurrentPage"] = self.currentPage!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.pid != nil {
            map["Pid"] = self.pid!
        }
        if self.query != nil {
            map["Query"] = self.query!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppGroup"] as? String {
            self.appGroup = value
        }
        if let value = dict["CurrentPage"] as? Int32 {
            self.currentPage = value
        }
        if let value = dict["EndTime"] as? Int32 {
            self.endTime = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["Pid"] as? String {
            self.pid = value
        }
        if let value = dict["Query"] as? String {
            self.query = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["StartTime"] as? Int32 {
            self.startTime = value
        }
    }
}

public class GetRumDataForPageResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var authentication: String?

        public var completion: String?

        public var items: [[String: Any]]?

        public var page: String?

        public var pageSize: String?

        public var preference: String?

        public var total: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.authentication != nil {
                map["Authentication"] = self.authentication!
            }
            if self.completion != nil {
                map["Completion"] = self.completion!
            }
            if self.items != nil {
                map["Items"] = self.items!
            }
            if self.page != nil {
                map["Page"] = self.page!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.preference != nil {
                map["Preference"] = self.preference!
            }
            if self.total != nil {
                map["Total"] = self.total!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Authentication"] as? String {
                self.authentication = value
            }
            if let value = dict["Completion"] as? String {
                self.completion = value
            }
            if let value = dict["Items"] as? [[String: Any]] {
                self.items = value
            }
            if let value = dict["Page"] as? String {
                self.page = value
            }
            if let value = dict["PageSize"] as? String {
                self.pageSize = value
            }
            if let value = dict["Preference"] as? String {
                self.preference = value
            }
            if let value = dict["Total"] as? String {
                self.total = value
            }
        }
    }
    public var code: String?

    public var data: GetRumDataForPageResponseBody.Data?

    public var httpStatusCode: String?

    public var message: String?

    public var requestId: String?

    public var success: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetRumDataForPageResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? String {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? String {
            self.success = value
        }
    }
}

public class GetRumDataForPageResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetRumDataForPageResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetRumDataForPageResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetRumExceptionStackRequest : Tea.TeaModel {
    public var exceptionBinaryImages: String?

    public var exceptionStack: String?

    public var exceptionThreadId: String?

    public var extraInfo: String?

    public var pid: String?

    public var regionId: String?

    public var serviceId: String?

    public var sourcemapType: String?

    public var workspace: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.exceptionBinaryImages != nil {
            map["ExceptionBinaryImages"] = self.exceptionBinaryImages!
        }
        if self.exceptionStack != nil {
            map["ExceptionStack"] = self.exceptionStack!
        }
        if self.exceptionThreadId != nil {
            map["ExceptionThreadId"] = self.exceptionThreadId!
        }
        if self.extraInfo != nil {
            map["ExtraInfo"] = self.extraInfo!
        }
        if self.pid != nil {
            map["Pid"] = self.pid!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.serviceId != nil {
            map["ServiceId"] = self.serviceId!
        }
        if self.sourcemapType != nil {
            map["SourcemapType"] = self.sourcemapType!
        }
        if self.workspace != nil {
            map["Workspace"] = self.workspace!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ExceptionBinaryImages"] as? String {
            self.exceptionBinaryImages = value
        }
        if let value = dict["ExceptionStack"] as? String {
            self.exceptionStack = value
        }
        if let value = dict["ExceptionThreadId"] as? String {
            self.exceptionThreadId = value
        }
        if let value = dict["ExtraInfo"] as? String {
            self.extraInfo = value
        }
        if let value = dict["Pid"] as? String {
            self.pid = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ServiceId"] as? String {
            self.serviceId = value
        }
        if let value = dict["SourcemapType"] as? String {
            self.sourcemapType = value
        }
        if let value = dict["Workspace"] as? String {
            self.workspace = value
        }
    }
}

public class GetRumExceptionStackResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class ThreadInfoList : Tea.TeaModel {
            public var threadDetail: String?

            public var threadTag: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.threadDetail != nil {
                    map["ThreadDetail"] = self.threadDetail!
                }
                if self.threadTag != nil {
                    map["ThreadTag"] = self.threadTag!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ThreadDetail"] as? String {
                    self.threadDetail = value
                }
                if let value = dict["ThreadTag"] as? String {
                    self.threadTag = value
                }
            }
        }
        public var binaryImages: String?

        public var crashAddress: String?

        public var crashReason: String?

        public var lines: [String]?

        public var moduleName: String?

        public var threadId: String?

        public var threadInfoList: [GetRumExceptionStackResponseBody.Data.ThreadInfoList]?

        public var uuid: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.binaryImages != nil {
                map["BinaryImages"] = self.binaryImages!
            }
            if self.crashAddress != nil {
                map["CrashAddress"] = self.crashAddress!
            }
            if self.crashReason != nil {
                map["CrashReason"] = self.crashReason!
            }
            if self.lines != nil {
                map["Lines"] = self.lines!
            }
            if self.moduleName != nil {
                map["ModuleName"] = self.moduleName!
            }
            if self.threadId != nil {
                map["ThreadId"] = self.threadId!
            }
            if self.threadInfoList != nil {
                var tmp : [Any] = []
                for k in self.threadInfoList! {
                    tmp.append(k.toMap())
                }
                map["ThreadInfoList"] = tmp
            }
            if self.uuid != nil {
                map["Uuid"] = self.uuid!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["BinaryImages"] as? String {
                self.binaryImages = value
            }
            if let value = dict["CrashAddress"] as? String {
                self.crashAddress = value
            }
            if let value = dict["CrashReason"] as? String {
                self.crashReason = value
            }
            if let value = dict["Lines"] as? [String] {
                self.lines = value
            }
            if let value = dict["ModuleName"] as? String {
                self.moduleName = value
            }
            if let value = dict["ThreadId"] as? String {
                self.threadId = value
            }
            if let value = dict["ThreadInfoList"] as? [Any?] {
                var tmp : [GetRumExceptionStackResponseBody.Data.ThreadInfoList] = []
                for v in value {
                    if v != nil {
                        var model = GetRumExceptionStackResponseBody.Data.ThreadInfoList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.threadInfoList = tmp
            }
            if let value = dict["Uuid"] as? String {
                self.uuid = value
            }
        }
    }
    public var code: String?

    public var data: GetRumExceptionStackResponseBody.Data?

    public var httpStatusCode: String?

    public var message: String?

    public var requestId: String?

    public var success: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetRumExceptionStackResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? String {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? String {
            self.success = value
        }
    }
}

public class GetRumExceptionStackResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetRumExceptionStackResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetRumExceptionStackResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetRumOcuStatisticDataRequest : Tea.TeaModel {
    public class Filter : Tea.TeaModel {
        public var key: String?

        public var opType: String?

        public var value: Any?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.opType != nil {
                map["OpType"] = self.opType!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["OpType"] as? String {
                self.opType = value
            }
            if let value = dict["Value"] as? Any {
                self.value = value
            }
        }
    }
    public var endTime: Int64?

    public var filter: [GetRumOcuStatisticDataRequest.Filter]?

    public var group: [String]?

    public var page: Int32?

    public var pageSize: Int32?

    public var queryType: String?

    public var regionId: String?

    public var startTime: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.filter != nil {
            var tmp : [Any] = []
            for k in self.filter! {
                tmp.append(k.toMap())
            }
            map["Filter"] = tmp
        }
        if self.group != nil {
            map["Group"] = self.group!
        }
        if self.page != nil {
            map["Page"] = self.page!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.queryType != nil {
            map["QueryType"] = self.queryType!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["Filter"] as? [Any?] {
            var tmp : [GetRumOcuStatisticDataRequest.Filter] = []
            for v in value {
                if v != nil {
                    var model = GetRumOcuStatisticDataRequest.Filter()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.filter = tmp
        }
        if let value = dict["Group"] as? [String] {
            self.group = value
        }
        if let value = dict["Page"] as? Int32 {
            self.page = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["QueryType"] as? String {
            self.queryType = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
    }
}

public class GetRumOcuStatisticDataShrinkRequest : Tea.TeaModel {
    public var endTime: Int64?

    public var filterShrink: String?

    public var groupShrink: String?

    public var page: Int32?

    public var pageSize: Int32?

    public var queryType: String?

    public var regionId: String?

    public var startTime: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.filterShrink != nil {
            map["Filter"] = self.filterShrink!
        }
        if self.groupShrink != nil {
            map["Group"] = self.groupShrink!
        }
        if self.page != nil {
            map["Page"] = self.page!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.queryType != nil {
            map["QueryType"] = self.queryType!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["Filter"] as? String {
            self.filterShrink = value
        }
        if let value = dict["Group"] as? String {
            self.groupShrink = value
        }
        if let value = dict["Page"] as? Int32 {
            self.page = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["QueryType"] as? String {
            self.queryType = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
    }
}

public class GetRumOcuStatisticDataResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var complete: Bool?

        public var items: [[String: Any]]?

        public var page: Int32?

        public var pageSize: Int32?

        public var total: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.complete != nil {
                map["Complete"] = self.complete!
            }
            if self.items != nil {
                map["Items"] = self.items!
            }
            if self.page != nil {
                map["Page"] = self.page!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.total != nil {
                map["Total"] = self.total!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Complete"] as? Bool {
                self.complete = value
            }
            if let value = dict["Items"] as? [[String: Any]] {
                self.items = value
            }
            if let value = dict["Page"] as? Int32 {
                self.page = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
            if let value = dict["Total"] as? Int32 {
                self.total = value
            }
        }
    }
    public var code: Int64?

    public var data: GetRumOcuStatisticDataResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int64 {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetRumOcuStatisticDataResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetRumOcuStatisticDataResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetRumOcuStatisticDataResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetRumOcuStatisticDataResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetRumUploadFilesRequest : Tea.TeaModel {
    public var appType: String?

    public var fileName: String?

    public var nextToken: String?

    public var pageSize: Int32?

    public var pid: String?

    public var regionId: String?

    public var serviceId: String?

    public var versionId: String?

    public var workspace: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appType != nil {
            map["AppType"] = self.appType!
        }
        if self.fileName != nil {
            map["FileName"] = self.fileName!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.pid != nil {
            map["Pid"] = self.pid!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.serviceId != nil {
            map["ServiceId"] = self.serviceId!
        }
        if self.versionId != nil {
            map["VersionId"] = self.versionId!
        }
        if self.workspace != nil {
            map["Workspace"] = self.workspace!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppType"] as? String {
            self.appType = value
        }
        if let value = dict["FileName"] as? String {
            self.fileName = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["Pid"] as? String {
            self.pid = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ServiceId"] as? String {
            self.serviceId = value
        }
        if let value = dict["VersionId"] as? String {
            self.versionId = value
        }
        if let value = dict["Workspace"] as? String {
            self.workspace = value
        }
    }
}

public class GetRumUploadFilesResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class FileList : Tea.TeaModel {
            public var fileName: String?

            public var lastModifiedTime: Any?

            public var size: String?

            public var uuid: String?

            public var versionId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.fileName != nil {
                    map["FileName"] = self.fileName!
                }
                if self.lastModifiedTime != nil {
                    map["LastModifiedTime"] = self.lastModifiedTime!
                }
                if self.size != nil {
                    map["Size"] = self.size!
                }
                if self.uuid != nil {
                    map["Uuid"] = self.uuid!
                }
                if self.versionId != nil {
                    map["VersionId"] = self.versionId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["FileName"] as? String {
                    self.fileName = value
                }
                if let value = dict["LastModifiedTime"] as? Any {
                    self.lastModifiedTime = value
                }
                if let value = dict["Size"] as? String {
                    self.size = value
                }
                if let value = dict["Uuid"] as? String {
                    self.uuid = value
                }
                if let value = dict["VersionId"] as? String {
                    self.versionId = value
                }
            }
        }
        public var fileList: [GetRumUploadFilesResponseBody.Data.FileList]?

        public var nextToken: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.fileList != nil {
                var tmp : [Any] = []
                for k in self.fileList! {
                    tmp.append(k.toMap())
                }
                map["FileList"] = tmp
            }
            if self.nextToken != nil {
                map["NextToken"] = self.nextToken!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["FileList"] as? [Any?] {
                var tmp : [GetRumUploadFilesResponseBody.Data.FileList] = []
                for v in value {
                    if v != nil {
                        var model = GetRumUploadFilesResponseBody.Data.FileList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.fileList = tmp
            }
            if let value = dict["NextToken"] as? String {
                self.nextToken = value
            }
        }
    }
    public var code: Int32?

    public var data: GetRumUploadFilesResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetRumUploadFilesResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetRumUploadFilesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetRumUploadFilesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetRumUploadFilesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetSourceMapInfoRequest : Tea.TeaModel {
    public var ascendingSequence: Bool?

    public var edition: String?

    public var ID: String?

    public var keyword: String?

    public var orderField: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ascendingSequence != nil {
            map["AscendingSequence"] = self.ascendingSequence!
        }
        if self.edition != nil {
            map["Edition"] = self.edition!
        }
        if self.ID != nil {
            map["ID"] = self.ID!
        }
        if self.keyword != nil {
            map["Keyword"] = self.keyword!
        }
        if self.orderField != nil {
            map["OrderField"] = self.orderField!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AscendingSequence"] as? Bool {
            self.ascendingSequence = value
        }
        if let value = dict["Edition"] as? String {
            self.edition = value
        }
        if let value = dict["ID"] as? String {
            self.ID = value
        }
        if let value = dict["Keyword"] as? String {
            self.keyword = value
        }
        if let value = dict["OrderField"] as? String {
            self.orderField = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class GetSourceMapInfoResponseBody : Tea.TeaModel {
    public class SourceMapList : Tea.TeaModel {
        public var fid: String?

        public var fileName: String?

        public var size: String?

        public var uploadTime: String?

        public var version: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.fid != nil {
                map["Fid"] = self.fid!
            }
            if self.fileName != nil {
                map["FileName"] = self.fileName!
            }
            if self.size != nil {
                map["Size"] = self.size!
            }
            if self.uploadTime != nil {
                map["UploadTime"] = self.uploadTime!
            }
            if self.version != nil {
                map["Version"] = self.version!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Fid"] as? String {
                self.fid = value
            }
            if let value = dict["FileName"] as? String {
                self.fileName = value
            }
            if let value = dict["Size"] as? String {
                self.size = value
            }
            if let value = dict["UploadTime"] as? String {
                self.uploadTime = value
            }
            if let value = dict["Version"] as? String {
                self.version = value
            }
        }
    }
    public var requestId: String?

    public var sourceMapList: [GetSourceMapInfoResponseBody.SourceMapList]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.sourceMapList != nil {
            var tmp : [Any] = []
            for k in self.sourceMapList! {
                tmp.append(k.toMap())
            }
            map["SourceMapList"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SourceMapList"] as? [Any?] {
            var tmp : [GetSourceMapInfoResponseBody.SourceMapList] = []
            for v in value {
                if v != nil {
                    var model = GetSourceMapInfoResponseBody.SourceMapList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.sourceMapList = tmp
        }
    }
}

public class GetSourceMapInfoResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetSourceMapInfoResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetSourceMapInfoResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetStackRequest : Tea.TeaModel {
    public var endTime: Int64?

    public var pid: String?

    public var regionId: String?

    public var rpcID: String?

    public var spanID: String?

    public var startTime: Int64?

    public var traceID: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.pid != nil {
            map["Pid"] = self.pid!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.rpcID != nil {
            map["RpcID"] = self.rpcID!
        }
        if self.spanID != nil {
            map["SpanID"] = self.spanID!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.traceID != nil {
            map["TraceID"] = self.traceID!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["Pid"] as? String {
            self.pid = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["RpcID"] as? String {
            self.rpcID = value
        }
        if let value = dict["SpanID"] as? String {
            self.spanID = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
        if let value = dict["TraceID"] as? String {
            self.traceID = value
        }
    }
}

public class GetStackResponseBody : Tea.TeaModel {
    public class StackInfo : Tea.TeaModel {
        public class ExtInfo : Tea.TeaModel {
            public var info: String?

            public var type: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.info != nil {
                    map["Info"] = self.info!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Info"] as? String {
                    self.info = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
            }
        }
        public var api: String?

        public var callCount: String?

        public var duration: Int64?

        public var exception: String?

        public var extInfo: GetStackResponseBody.StackInfo.ExtInfo?

        public var line: String?

        public var rpcId: String?

        public var serviceName: String?

        public var startTime: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.extInfo?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.api != nil {
                map["Api"] = self.api!
            }
            if self.callCount != nil {
                map["CallCount"] = self.callCount!
            }
            if self.duration != nil {
                map["Duration"] = self.duration!
            }
            if self.exception != nil {
                map["Exception"] = self.exception!
            }
            if self.extInfo != nil {
                map["ExtInfo"] = self.extInfo?.toMap()
            }
            if self.line != nil {
                map["Line"] = self.line!
            }
            if self.rpcId != nil {
                map["RpcId"] = self.rpcId!
            }
            if self.serviceName != nil {
                map["ServiceName"] = self.serviceName!
            }
            if self.startTime != nil {
                map["StartTime"] = self.startTime!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Api"] as? String {
                self.api = value
            }
            if let value = dict["CallCount"] as? String {
                self.callCount = value
            }
            if let value = dict["Duration"] as? Int64 {
                self.duration = value
            }
            if let value = dict["Exception"] as? String {
                self.exception = value
            }
            if let value = dict["ExtInfo"] as? [String: Any?] {
                var model = GetStackResponseBody.StackInfo.ExtInfo()
                model.fromMap(value)
                self.extInfo = model
            }
            if let value = dict["Line"] as? String {
                self.line = value
            }
            if let value = dict["RpcId"] as? String {
                self.rpcId = value
            }
            if let value = dict["ServiceName"] as? String {
                self.serviceName = value
            }
            if let value = dict["StartTime"] as? Int64 {
                self.startTime = value
            }
        }
    }
    public var requestId: String?

    public var stackInfo: [GetStackResponseBody.StackInfo]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.stackInfo != nil {
            var tmp : [Any] = []
            for k in self.stackInfo! {
                tmp.append(k.toMap())
            }
            map["StackInfo"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["StackInfo"] as? [Any?] {
            var tmp : [GetStackResponseBody.StackInfo] = []
            for v in value {
                if v != nil {
                    var model = GetStackResponseBody.StackInfo()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.stackInfo = tmp
        }
    }
}

public class GetStackResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetStackResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetStackResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetSyntheticMonitorsRequest : Tea.TeaModel {
    public class Filter : Tea.TeaModel {
        public var monitorCategory: Int32?

        public var network: Int32?

        public var taskType: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.monitorCategory != nil {
                map["MonitorCategory"] = self.monitorCategory!
            }
            if self.network != nil {
                map["Network"] = self.network!
            }
            if self.taskType != nil {
                map["TaskType"] = self.taskType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["MonitorCategory"] as? Int32 {
                self.monitorCategory = value
            }
            if let value = dict["Network"] as? Int32 {
                self.network = value
            }
            if let value = dict["TaskType"] as? Int32 {
                self.taskType = value
            }
        }
    }
    public var filter: GetSyntheticMonitorsRequest.Filter?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.filter?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.filter != nil {
            map["Filter"] = self.filter?.toMap()
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Filter"] as? [String: Any?] {
            var model = GetSyntheticMonitorsRequest.Filter()
            model.fromMap(value)
            self.filter = model
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class GetSyntheticMonitorsShrinkRequest : Tea.TeaModel {
    public var filterShrink: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.filterShrink != nil {
            map["Filter"] = self.filterShrink!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Filter"] as? String {
            self.filterShrink = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class GetSyntheticMonitorsResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var available: String?

        public var canBeSelected: Bool?

        public var city: String?

        public var cityCode: String?

        public var clientType: Int32?

        public var country: String?

        public var ipv6: Int32?

        public var operator_: String?

        public var operatorCode: String?

        public var region: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.available != nil {
                map["Available"] = self.available!
            }
            if self.canBeSelected != nil {
                map["CanBeSelected"] = self.canBeSelected!
            }
            if self.city != nil {
                map["City"] = self.city!
            }
            if self.cityCode != nil {
                map["CityCode"] = self.cityCode!
            }
            if self.clientType != nil {
                map["ClientType"] = self.clientType!
            }
            if self.country != nil {
                map["Country"] = self.country!
            }
            if self.ipv6 != nil {
                map["Ipv6"] = self.ipv6!
            }
            if self.operator_ != nil {
                map["Operator"] = self.operator_!
            }
            if self.operatorCode != nil {
                map["OperatorCode"] = self.operatorCode!
            }
            if self.region != nil {
                map["Region"] = self.region!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Available"] as? String {
                self.available = value
            }
            if let value = dict["CanBeSelected"] as? Bool {
                self.canBeSelected = value
            }
            if let value = dict["City"] as? String {
                self.city = value
            }
            if let value = dict["CityCode"] as? String {
                self.cityCode = value
            }
            if let value = dict["ClientType"] as? Int32 {
                self.clientType = value
            }
            if let value = dict["Country"] as? String {
                self.country = value
            }
            if let value = dict["Ipv6"] as? Int32 {
                self.ipv6 = value
            }
            if let value = dict["Operator"] as? String {
                self.operator_ = value
            }
            if let value = dict["OperatorCode"] as? String {
                self.operatorCode = value
            }
            if let value = dict["Region"] as? String {
                self.region = value
            }
        }
    }
    public var code: Int64?

    public var data: [GetSyntheticMonitorsResponseBody.Data]?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int64 {
            self.code = value
        }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [GetSyntheticMonitorsResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = GetSyntheticMonitorsResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetSyntheticMonitorsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetSyntheticMonitorsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetSyntheticMonitorsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetSyntheticTaskDetailRequest : Tea.TeaModel {
    public var regionId: String?

    public var taskId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["TaskId"] as? String {
            self.taskId = value
        }
    }
}

public class GetSyntheticTaskDetailResponseBody : Tea.TeaModel {
    public class TaskDetail : Tea.TeaModel {
        public class CommonParam : Tea.TeaModel {
            public class AlertList : Tea.TeaModel {
                public var generalAlert: String?

                public var isCritical: String?

                public var name: String?

                public var seriousAlert: String?

                public var symbols: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.generalAlert != nil {
                        map["GeneralAlert"] = self.generalAlert!
                    }
                    if self.isCritical != nil {
                        map["IsCritical"] = self.isCritical!
                    }
                    if self.name != nil {
                        map["Name"] = self.name!
                    }
                    if self.seriousAlert != nil {
                        map["SeriousAlert"] = self.seriousAlert!
                    }
                    if self.symbols != nil {
                        map["Symbols"] = self.symbols!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["GeneralAlert"] as? String {
                        self.generalAlert = value
                    }
                    if let value = dict["IsCritical"] as? String {
                        self.isCritical = value
                    }
                    if let value = dict["Name"] as? String {
                        self.name = value
                    }
                    if let value = dict["SeriousAlert"] as? String {
                        self.seriousAlert = value
                    }
                    if let value = dict["Symbols"] as? String {
                        self.symbols = value
                    }
                }
            }
            public var alarmFlag: Int64?

            public var alertList: [GetSyntheticTaskDetailResponseBody.TaskDetail.CommonParam.AlertList]?

            public var alertNotifierId: String?

            public var alertPolicyId: String?

            public var monitorSamples: String?

            public var startExecutionTime: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.alarmFlag != nil {
                    map["AlarmFlag"] = self.alarmFlag!
                }
                if self.alertList != nil {
                    var tmp : [Any] = []
                    for k in self.alertList! {
                        tmp.append(k.toMap())
                    }
                    map["AlertList"] = tmp
                }
                if self.alertNotifierId != nil {
                    map["AlertNotifierId"] = self.alertNotifierId!
                }
                if self.alertPolicyId != nil {
                    map["AlertPolicyId"] = self.alertPolicyId!
                }
                if self.monitorSamples != nil {
                    map["MonitorSamples"] = self.monitorSamples!
                }
                if self.startExecutionTime != nil {
                    map["StartExecutionTime"] = self.startExecutionTime!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AlarmFlag"] as? Int64 {
                    self.alarmFlag = value
                }
                if let value = dict["AlertList"] as? [Any?] {
                    var tmp : [GetSyntheticTaskDetailResponseBody.TaskDetail.CommonParam.AlertList] = []
                    for v in value {
                        if v != nil {
                            var model = GetSyntheticTaskDetailResponseBody.TaskDetail.CommonParam.AlertList()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.alertList = tmp
                }
                if let value = dict["AlertNotifierId"] as? String {
                    self.alertNotifierId = value
                }
                if let value = dict["AlertPolicyId"] as? String {
                    self.alertPolicyId = value
                }
                if let value = dict["MonitorSamples"] as? String {
                    self.monitorSamples = value
                }
                if let value = dict["StartExecutionTime"] as? String {
                    self.startExecutionTime = value
                }
            }
        }
        public class Download : Tea.TeaModel {
            public var connectionTimeout: Int64?

            public var downloadCustomHeaderContent: String?

            public var downloadCustomHost: Int64?

            public var downloadCustomHostIp: String?

            public var downloadKernel: Int64?

            public var downloadRedirect: Int64?

            public var downloadTransmissionSize: Int64?

            public var monitorTimeout: Int64?

            public var quickProtocol: String?

            public var validateKeywords: String?

            public var verifyWay: Int64?

            public var whiteList: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.connectionTimeout != nil {
                    map["ConnectionTimeout"] = self.connectionTimeout!
                }
                if self.downloadCustomHeaderContent != nil {
                    map["DownloadCustomHeaderContent"] = self.downloadCustomHeaderContent!
                }
                if self.downloadCustomHost != nil {
                    map["DownloadCustomHost"] = self.downloadCustomHost!
                }
                if self.downloadCustomHostIp != nil {
                    map["DownloadCustomHostIp"] = self.downloadCustomHostIp!
                }
                if self.downloadKernel != nil {
                    map["DownloadKernel"] = self.downloadKernel!
                }
                if self.downloadRedirect != nil {
                    map["DownloadRedirect"] = self.downloadRedirect!
                }
                if self.downloadTransmissionSize != nil {
                    map["DownloadTransmissionSize"] = self.downloadTransmissionSize!
                }
                if self.monitorTimeout != nil {
                    map["MonitorTimeout"] = self.monitorTimeout!
                }
                if self.quickProtocol != nil {
                    map["QuickProtocol"] = self.quickProtocol!
                }
                if self.validateKeywords != nil {
                    map["ValidateKeywords"] = self.validateKeywords!
                }
                if self.verifyWay != nil {
                    map["VerifyWay"] = self.verifyWay!
                }
                if self.whiteList != nil {
                    map["WhiteList"] = self.whiteList!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ConnectionTimeout"] as? Int64 {
                    self.connectionTimeout = value
                }
                if let value = dict["DownloadCustomHeaderContent"] as? String {
                    self.downloadCustomHeaderContent = value
                }
                if let value = dict["DownloadCustomHost"] as? Int64 {
                    self.downloadCustomHost = value
                }
                if let value = dict["DownloadCustomHostIp"] as? String {
                    self.downloadCustomHostIp = value
                }
                if let value = dict["DownloadKernel"] as? Int64 {
                    self.downloadKernel = value
                }
                if let value = dict["DownloadRedirect"] as? Int64 {
                    self.downloadRedirect = value
                }
                if let value = dict["DownloadTransmissionSize"] as? Int64 {
                    self.downloadTransmissionSize = value
                }
                if let value = dict["MonitorTimeout"] as? Int64 {
                    self.monitorTimeout = value
                }
                if let value = dict["QuickProtocol"] as? String {
                    self.quickProtocol = value
                }
                if let value = dict["ValidateKeywords"] as? String {
                    self.validateKeywords = value
                }
                if let value = dict["VerifyWay"] as? Int64 {
                    self.verifyWay = value
                }
                if let value = dict["WhiteList"] as? String {
                    self.whiteList = value
                }
            }
        }
        public class ExtendInterval : Tea.TeaModel {
            public var days: [Int64]?

            public var endMinute: Int64?

            public var endTime: String?

            public var endhour: Int64?

            public var startHour: Int64?

            public var startMinute: Int64?

            public var startTime: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.days != nil {
                    map["Days"] = self.days!
                }
                if self.endMinute != nil {
                    map["EndMinute"] = self.endMinute!
                }
                if self.endTime != nil {
                    map["EndTime"] = self.endTime!
                }
                if self.endhour != nil {
                    map["Endhour"] = self.endhour!
                }
                if self.startHour != nil {
                    map["StartHour"] = self.startHour!
                }
                if self.startMinute != nil {
                    map["StartMinute"] = self.startMinute!
                }
                if self.startTime != nil {
                    map["StartTime"] = self.startTime!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Days"] as? [Int64] {
                    self.days = value
                }
                if let value = dict["EndMinute"] as? Int64 {
                    self.endMinute = value
                }
                if let value = dict["EndTime"] as? String {
                    self.endTime = value
                }
                if let value = dict["Endhour"] as? Int64 {
                    self.endhour = value
                }
                if let value = dict["StartHour"] as? Int64 {
                    self.startHour = value
                }
                if let value = dict["StartMinute"] as? Int64 {
                    self.startMinute = value
                }
                if let value = dict["StartTime"] as? String {
                    self.startTime = value
                }
            }
        }
        public class MonitorList : Tea.TeaModel {
            public var cityCode: Int64?

            public var monitorType: Int64?

            public var netServiceId: Int64?

            public var sendCount: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.cityCode != nil {
                    map["CityCode"] = self.cityCode!
                }
                if self.monitorType != nil {
                    map["MonitorType"] = self.monitorType!
                }
                if self.netServiceId != nil {
                    map["NetServiceId"] = self.netServiceId!
                }
                if self.sendCount != nil {
                    map["SendCount"] = self.sendCount!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CityCode"] as? Int64 {
                    self.cityCode = value
                }
                if let value = dict["MonitorType"] as? Int64 {
                    self.monitorType = value
                }
                if let value = dict["NetServiceId"] as? Int64 {
                    self.netServiceId = value
                }
                if let value = dict["SendCount"] as? Int64 {
                    self.sendCount = value
                }
            }
        }
        public class Nav : Tea.TeaModel {
            public var dnsHijackWhitelist: String?

            public var elementBlacklist: String?

            public var executeActiveX: Int64?

            public var executeApplet: Int64?

            public var executeScript: Int64?

            public var filterInvalidIP: Int64?

            public var flowHijackJumpTimes: Int64?

            public var flowHijackLogo: String?

            public var monitorTimeout: Int64?

            public var navAutomaticScrolling: Int64?

            public var navCustomHeader: String?

            public var navCustomHeaderContent: String?

            public var navCustomHost: Int64?

            public var navCustomHostIp: String?

            public var navDisableCache: Int64?

            public var navDisableCompression: Int64?

            public var navIgnoreCertificateError: Int64?

            public var navRedirect: Int64?

            public var navReturnElement: Int64?

            public var pageTampering: String?

            public var processName: String?

            public var quicDomain: String?

            public var quicVersion: Int64?

            public var requestHeader: Int64?

            public var slowElementThreshold: Int64?

            public var verifyStringBlacklist: String?

            public var verifyStringWhitelist: String?

            public var waitCompletionTime: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.dnsHijackWhitelist != nil {
                    map["DnsHijackWhitelist"] = self.dnsHijackWhitelist!
                }
                if self.elementBlacklist != nil {
                    map["ElementBlacklist"] = self.elementBlacklist!
                }
                if self.executeActiveX != nil {
                    map["ExecuteActiveX"] = self.executeActiveX!
                }
                if self.executeApplet != nil {
                    map["ExecuteApplet"] = self.executeApplet!
                }
                if self.executeScript != nil {
                    map["ExecuteScript"] = self.executeScript!
                }
                if self.filterInvalidIP != nil {
                    map["FilterInvalidIP"] = self.filterInvalidIP!
                }
                if self.flowHijackJumpTimes != nil {
                    map["FlowHijackJumpTimes"] = self.flowHijackJumpTimes!
                }
                if self.flowHijackLogo != nil {
                    map["FlowHijackLogo"] = self.flowHijackLogo!
                }
                if self.monitorTimeout != nil {
                    map["MonitorTimeout"] = self.monitorTimeout!
                }
                if self.navAutomaticScrolling != nil {
                    map["NavAutomaticScrolling"] = self.navAutomaticScrolling!
                }
                if self.navCustomHeader != nil {
                    map["NavCustomHeader"] = self.navCustomHeader!
                }
                if self.navCustomHeaderContent != nil {
                    map["NavCustomHeaderContent"] = self.navCustomHeaderContent!
                }
                if self.navCustomHost != nil {
                    map["NavCustomHost"] = self.navCustomHost!
                }
                if self.navCustomHostIp != nil {
                    map["NavCustomHostIp"] = self.navCustomHostIp!
                }
                if self.navDisableCache != nil {
                    map["NavDisableCache"] = self.navDisableCache!
                }
                if self.navDisableCompression != nil {
                    map["NavDisableCompression"] = self.navDisableCompression!
                }
                if self.navIgnoreCertificateError != nil {
                    map["NavIgnoreCertificateError"] = self.navIgnoreCertificateError!
                }
                if self.navRedirect != nil {
                    map["NavRedirect"] = self.navRedirect!
                }
                if self.navReturnElement != nil {
                    map["NavReturnElement"] = self.navReturnElement!
                }
                if self.pageTampering != nil {
                    map["PageTampering"] = self.pageTampering!
                }
                if self.processName != nil {
                    map["ProcessName"] = self.processName!
                }
                if self.quicDomain != nil {
                    map["QuicDomain"] = self.quicDomain!
                }
                if self.quicVersion != nil {
                    map["QuicVersion"] = self.quicVersion!
                }
                if self.requestHeader != nil {
                    map["RequestHeader"] = self.requestHeader!
                }
                if self.slowElementThreshold != nil {
                    map["SlowElementThreshold"] = self.slowElementThreshold!
                }
                if self.verifyStringBlacklist != nil {
                    map["VerifyStringBlacklist"] = self.verifyStringBlacklist!
                }
                if self.verifyStringWhitelist != nil {
                    map["VerifyStringWhitelist"] = self.verifyStringWhitelist!
                }
                if self.waitCompletionTime != nil {
                    map["WaitCompletionTime"] = self.waitCompletionTime!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["DnsHijackWhitelist"] as? String {
                    self.dnsHijackWhitelist = value
                }
                if let value = dict["ElementBlacklist"] as? String {
                    self.elementBlacklist = value
                }
                if let value = dict["ExecuteActiveX"] as? Int64 {
                    self.executeActiveX = value
                }
                if let value = dict["ExecuteApplet"] as? Int64 {
                    self.executeApplet = value
                }
                if let value = dict["ExecuteScript"] as? Int64 {
                    self.executeScript = value
                }
                if let value = dict["FilterInvalidIP"] as? Int64 {
                    self.filterInvalidIP = value
                }
                if let value = dict["FlowHijackJumpTimes"] as? Int64 {
                    self.flowHijackJumpTimes = value
                }
                if let value = dict["FlowHijackLogo"] as? String {
                    self.flowHijackLogo = value
                }
                if let value = dict["MonitorTimeout"] as? Int64 {
                    self.monitorTimeout = value
                }
                if let value = dict["NavAutomaticScrolling"] as? Int64 {
                    self.navAutomaticScrolling = value
                }
                if let value = dict["NavCustomHeader"] as? String {
                    self.navCustomHeader = value
                }
                if let value = dict["NavCustomHeaderContent"] as? String {
                    self.navCustomHeaderContent = value
                }
                if let value = dict["NavCustomHost"] as? Int64 {
                    self.navCustomHost = value
                }
                if let value = dict["NavCustomHostIp"] as? String {
                    self.navCustomHostIp = value
                }
                if let value = dict["NavDisableCache"] as? Int64 {
                    self.navDisableCache = value
                }
                if let value = dict["NavDisableCompression"] as? Int64 {
                    self.navDisableCompression = value
                }
                if let value = dict["NavIgnoreCertificateError"] as? Int64 {
                    self.navIgnoreCertificateError = value
                }
                if let value = dict["NavRedirect"] as? Int64 {
                    self.navRedirect = value
                }
                if let value = dict["NavReturnElement"] as? Int64 {
                    self.navReturnElement = value
                }
                if let value = dict["PageTampering"] as? String {
                    self.pageTampering = value
                }
                if let value = dict["ProcessName"] as? String {
                    self.processName = value
                }
                if let value = dict["QuicDomain"] as? String {
                    self.quicDomain = value
                }
                if let value = dict["QuicVersion"] as? Int64 {
                    self.quicVersion = value
                }
                if let value = dict["RequestHeader"] as? Int64 {
                    self.requestHeader = value
                }
                if let value = dict["SlowElementThreshold"] as? Int64 {
                    self.slowElementThreshold = value
                }
                if let value = dict["VerifyStringBlacklist"] as? String {
                    self.verifyStringBlacklist = value
                }
                if let value = dict["VerifyStringWhitelist"] as? String {
                    self.verifyStringWhitelist = value
                }
                if let value = dict["WaitCompletionTime"] as? Int64 {
                    self.waitCompletionTime = value
                }
            }
        }
        public class Net : Tea.TeaModel {
            public var netDigSwitch: Int64?

            public var netDnsNs: String?

            public var netDnsQueryMethod: String?

            public var netDnsServer: Int64?

            public var netDnsSwitch: Int64?

            public var netDnsTimeout: String?

            public var netIcmpActive: Int64?

            public var netIcmpDataCut: Int64?

            public var netIcmpInterval: Int64?

            public var netIcmpNum: Int64?

            public var netIcmpSize: Int64?

            public var netIcmpSwitch: Int64?

            public var netIcmpTimeout: Int64?

            public var netTraceRouteNum: Int64?

            public var netTraceRouteSwitch: Int64?

            public var netTraceRouteTimeout: Int64?

            public var whiteList: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.netDigSwitch != nil {
                    map["NetDigSwitch"] = self.netDigSwitch!
                }
                if self.netDnsNs != nil {
                    map["NetDnsNs"] = self.netDnsNs!
                }
                if self.netDnsQueryMethod != nil {
                    map["NetDnsQueryMethod"] = self.netDnsQueryMethod!
                }
                if self.netDnsServer != nil {
                    map["NetDnsServer"] = self.netDnsServer!
                }
                if self.netDnsSwitch != nil {
                    map["NetDnsSwitch"] = self.netDnsSwitch!
                }
                if self.netDnsTimeout != nil {
                    map["NetDnsTimeout"] = self.netDnsTimeout!
                }
                if self.netIcmpActive != nil {
                    map["NetIcmpActive"] = self.netIcmpActive!
                }
                if self.netIcmpDataCut != nil {
                    map["NetIcmpDataCut"] = self.netIcmpDataCut!
                }
                if self.netIcmpInterval != nil {
                    map["NetIcmpInterval"] = self.netIcmpInterval!
                }
                if self.netIcmpNum != nil {
                    map["NetIcmpNum"] = self.netIcmpNum!
                }
                if self.netIcmpSize != nil {
                    map["NetIcmpSize"] = self.netIcmpSize!
                }
                if self.netIcmpSwitch != nil {
                    map["NetIcmpSwitch"] = self.netIcmpSwitch!
                }
                if self.netIcmpTimeout != nil {
                    map["NetIcmpTimeout"] = self.netIcmpTimeout!
                }
                if self.netTraceRouteNum != nil {
                    map["NetTraceRouteNum"] = self.netTraceRouteNum!
                }
                if self.netTraceRouteSwitch != nil {
                    map["NetTraceRouteSwitch"] = self.netTraceRouteSwitch!
                }
                if self.netTraceRouteTimeout != nil {
                    map["NetTraceRouteTimeout"] = self.netTraceRouteTimeout!
                }
                if self.whiteList != nil {
                    map["WhiteList"] = self.whiteList!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["NetDigSwitch"] as? Int64 {
                    self.netDigSwitch = value
                }
                if let value = dict["NetDnsNs"] as? String {
                    self.netDnsNs = value
                }
                if let value = dict["NetDnsQueryMethod"] as? String {
                    self.netDnsQueryMethod = value
                }
                if let value = dict["NetDnsServer"] as? Int64 {
                    self.netDnsServer = value
                }
                if let value = dict["NetDnsSwitch"] as? Int64 {
                    self.netDnsSwitch = value
                }
                if let value = dict["NetDnsTimeout"] as? String {
                    self.netDnsTimeout = value
                }
                if let value = dict["NetIcmpActive"] as? Int64 {
                    self.netIcmpActive = value
                }
                if let value = dict["NetIcmpDataCut"] as? Int64 {
                    self.netIcmpDataCut = value
                }
                if let value = dict["NetIcmpInterval"] as? Int64 {
                    self.netIcmpInterval = value
                }
                if let value = dict["NetIcmpNum"] as? Int64 {
                    self.netIcmpNum = value
                }
                if let value = dict["NetIcmpSize"] as? Int64 {
                    self.netIcmpSize = value
                }
                if let value = dict["NetIcmpSwitch"] as? Int64 {
                    self.netIcmpSwitch = value
                }
                if let value = dict["NetIcmpTimeout"] as? Int64 {
                    self.netIcmpTimeout = value
                }
                if let value = dict["NetTraceRouteNum"] as? Int64 {
                    self.netTraceRouteNum = value
                }
                if let value = dict["NetTraceRouteSwitch"] as? Int64 {
                    self.netTraceRouteSwitch = value
                }
                if let value = dict["NetTraceRouteTimeout"] as? Int64 {
                    self.netTraceRouteTimeout = value
                }
                if let value = dict["WhiteList"] as? String {
                    self.whiteList = value
                }
            }
        }
        public class Protocol_ : Tea.TeaModel {
            public class RequestContent : Tea.TeaModel {
                public class Body : Tea.TeaModel {
                    public class Formdata : Tea.TeaModel {
                        public var key: String?

                        public var value: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.key != nil {
                                map["Key"] = self.key!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Key"] as? String {
                                self.key = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                        }
                    }
                    public class Urlencoded : Tea.TeaModel {
                        public var key: String?

                        public var value: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.key != nil {
                                map["Key"] = self.key!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Key"] as? String {
                                self.key = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                        }
                    }
                    public var formdata: GetSyntheticTaskDetailResponseBody.TaskDetail.Protocol_.RequestContent.Body.Formdata?

                    public var language: String?

                    public var mode: String?

                    public var raw: String?

                    public var urlencoded: GetSyntheticTaskDetailResponseBody.TaskDetail.Protocol_.RequestContent.Body.Urlencoded?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                        try self.formdata?.validate()
                        try self.urlencoded?.validate()
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.formdata != nil {
                            map["Formdata"] = self.formdata?.toMap()
                        }
                        if self.language != nil {
                            map["Language"] = self.language!
                        }
                        if self.mode != nil {
                            map["Mode"] = self.mode!
                        }
                        if self.raw != nil {
                            map["Raw"] = self.raw!
                        }
                        if self.urlencoded != nil {
                            map["Urlencoded"] = self.urlencoded?.toMap()
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Formdata"] as? [String: Any?] {
                            var model = GetSyntheticTaskDetailResponseBody.TaskDetail.Protocol_.RequestContent.Body.Formdata()
                            model.fromMap(value)
                            self.formdata = model
                        }
                        if let value = dict["Language"] as? String {
                            self.language = value
                        }
                        if let value = dict["Mode"] as? String {
                            self.mode = value
                        }
                        if let value = dict["Raw"] as? String {
                            self.raw = value
                        }
                        if let value = dict["Urlencoded"] as? [String: Any?] {
                            var model = GetSyntheticTaskDetailResponseBody.TaskDetail.Protocol_.RequestContent.Body.Urlencoded()
                            model.fromMap(value)
                            self.urlencoded = model
                        }
                    }
                }
                public class Header : Tea.TeaModel {
                    public var key: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.key != nil {
                            map["Key"] = self.key!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Key"] as? String {
                            self.key = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public var body: GetSyntheticTaskDetailResponseBody.TaskDetail.Protocol_.RequestContent.Body?

                public var header: [GetSyntheticTaskDetailResponseBody.TaskDetail.Protocol_.RequestContent.Header]?

                public var method: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.body?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.body != nil {
                        map["Body"] = self.body?.toMap()
                    }
                    if self.header != nil {
                        var tmp : [Any] = []
                        for k in self.header! {
                            tmp.append(k.toMap())
                        }
                        map["Header"] = tmp
                    }
                    if self.method != nil {
                        map["Method"] = self.method!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Body"] as? [String: Any?] {
                        var model = GetSyntheticTaskDetailResponseBody.TaskDetail.Protocol_.RequestContent.Body()
                        model.fromMap(value)
                        self.body = model
                    }
                    if let value = dict["Header"] as? [Any?] {
                        var tmp : [GetSyntheticTaskDetailResponseBody.TaskDetail.Protocol_.RequestContent.Header] = []
                        for v in value {
                            if v != nil {
                                var model = GetSyntheticTaskDetailResponseBody.TaskDetail.Protocol_.RequestContent.Header()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.header = tmp
                    }
                    if let value = dict["Method"] as? String {
                        self.method = value
                    }
                }
            }
            public var characterEncoding: Int64?

            public var customHost: Int64?

            public var customHostIp: String?

            public var protocolConnectionTimeout: Int64?

            public var protocolMonitorTimeout: Int64?

            public var receivedDataSize: Int64?

            public var requestContent: GetSyntheticTaskDetailResponseBody.TaskDetail.Protocol_.RequestContent?

            public var verifyContent: String?

            public var verifyWay: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.requestContent?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.characterEncoding != nil {
                    map["CharacterEncoding"] = self.characterEncoding!
                }
                if self.customHost != nil {
                    map["CustomHost"] = self.customHost!
                }
                if self.customHostIp != nil {
                    map["CustomHostIp"] = self.customHostIp!
                }
                if self.protocolConnectionTimeout != nil {
                    map["ProtocolConnectionTimeout"] = self.protocolConnectionTimeout!
                }
                if self.protocolMonitorTimeout != nil {
                    map["ProtocolMonitorTimeout"] = self.protocolMonitorTimeout!
                }
                if self.receivedDataSize != nil {
                    map["ReceivedDataSize"] = self.receivedDataSize!
                }
                if self.requestContent != nil {
                    map["RequestContent"] = self.requestContent?.toMap()
                }
                if self.verifyContent != nil {
                    map["VerifyContent"] = self.verifyContent!
                }
                if self.verifyWay != nil {
                    map["VerifyWay"] = self.verifyWay!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CharacterEncoding"] as? Int64 {
                    self.characterEncoding = value
                }
                if let value = dict["CustomHost"] as? Int64 {
                    self.customHost = value
                }
                if let value = dict["CustomHostIp"] as? String {
                    self.customHostIp = value
                }
                if let value = dict["ProtocolConnectionTimeout"] as? Int64 {
                    self.protocolConnectionTimeout = value
                }
                if let value = dict["ProtocolMonitorTimeout"] as? Int64 {
                    self.protocolMonitorTimeout = value
                }
                if let value = dict["ReceivedDataSize"] as? Int64 {
                    self.receivedDataSize = value
                }
                if let value = dict["RequestContent"] as? [String: Any?] {
                    var model = GetSyntheticTaskDetailResponseBody.TaskDetail.Protocol_.RequestContent()
                    model.fromMap(value)
                    self.requestContent = model
                }
                if let value = dict["VerifyContent"] as? String {
                    self.verifyContent = value
                }
                if let value = dict["VerifyWay"] as? Int64 {
                    self.verifyWay = value
                }
            }
        }
        public var commonParam: GetSyntheticTaskDetailResponseBody.TaskDetail.CommonParam?

        public var download: GetSyntheticTaskDetailResponseBody.TaskDetail.Download?

        public var extendInterval: GetSyntheticTaskDetailResponseBody.TaskDetail.ExtendInterval?

        public var intervalTime: Int64?

        public var intervalType: Int64?

        public var ipType: Int64?

        public var monitorList: [GetSyntheticTaskDetailResponseBody.TaskDetail.MonitorList]?

        public var monitorListString: String?

        public var nav: GetSyntheticTaskDetailResponseBody.TaskDetail.Nav?

        public var net: GetSyntheticTaskDetailResponseBody.TaskDetail.Net?

        public var protocol_: GetSyntheticTaskDetailResponseBody.TaskDetail.Protocol_?

        public var taskId: Int64?

        public var taskName: String?

        public var taskType: Int64?

        public var url: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.commonParam?.validate()
            try self.download?.validate()
            try self.extendInterval?.validate()
            try self.nav?.validate()
            try self.net?.validate()
            try self.protocol_?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.commonParam != nil {
                map["CommonParam"] = self.commonParam?.toMap()
            }
            if self.download != nil {
                map["Download"] = self.download?.toMap()
            }
            if self.extendInterval != nil {
                map["ExtendInterval"] = self.extendInterval?.toMap()
            }
            if self.intervalTime != nil {
                map["IntervalTime"] = self.intervalTime!
            }
            if self.intervalType != nil {
                map["IntervalType"] = self.intervalType!
            }
            if self.ipType != nil {
                map["IpType"] = self.ipType!
            }
            if self.monitorList != nil {
                var tmp : [Any] = []
                for k in self.monitorList! {
                    tmp.append(k.toMap())
                }
                map["MonitorList"] = tmp
            }
            if self.monitorListString != nil {
                map["MonitorListString"] = self.monitorListString!
            }
            if self.nav != nil {
                map["Nav"] = self.nav?.toMap()
            }
            if self.net != nil {
                map["Net"] = self.net?.toMap()
            }
            if self.protocol_ != nil {
                map["Protocol"] = self.protocol_?.toMap()
            }
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            if self.taskName != nil {
                map["TaskName"] = self.taskName!
            }
            if self.taskType != nil {
                map["TaskType"] = self.taskType!
            }
            if self.url != nil {
                map["Url"] = self.url!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CommonParam"] as? [String: Any?] {
                var model = GetSyntheticTaskDetailResponseBody.TaskDetail.CommonParam()
                model.fromMap(value)
                self.commonParam = model
            }
            if let value = dict["Download"] as? [String: Any?] {
                var model = GetSyntheticTaskDetailResponseBody.TaskDetail.Download()
                model.fromMap(value)
                self.download = model
            }
            if let value = dict["ExtendInterval"] as? [String: Any?] {
                var model = GetSyntheticTaskDetailResponseBody.TaskDetail.ExtendInterval()
                model.fromMap(value)
                self.extendInterval = model
            }
            if let value = dict["IntervalTime"] as? Int64 {
                self.intervalTime = value
            }
            if let value = dict["IntervalType"] as? Int64 {
                self.intervalType = value
            }
            if let value = dict["IpType"] as? Int64 {
                self.ipType = value
            }
            if let value = dict["MonitorList"] as? [Any?] {
                var tmp : [GetSyntheticTaskDetailResponseBody.TaskDetail.MonitorList] = []
                for v in value {
                    if v != nil {
                        var model = GetSyntheticTaskDetailResponseBody.TaskDetail.MonitorList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.monitorList = tmp
            }
            if let value = dict["MonitorListString"] as? String {
                self.monitorListString = value
            }
            if let value = dict["Nav"] as? [String: Any?] {
                var model = GetSyntheticTaskDetailResponseBody.TaskDetail.Nav()
                model.fromMap(value)
                self.nav = model
            }
            if let value = dict["Net"] as? [String: Any?] {
                var model = GetSyntheticTaskDetailResponseBody.TaskDetail.Net()
                model.fromMap(value)
                self.net = model
            }
            if let value = dict["Protocol"] as? [String: Any?] {
                var model = GetSyntheticTaskDetailResponseBody.TaskDetail.Protocol_()
                model.fromMap(value)
                self.protocol_ = model
            }
            if let value = dict["TaskId"] as? Int64 {
                self.taskId = value
            }
            if let value = dict["TaskName"] as? String {
                self.taskName = value
            }
            if let value = dict["TaskType"] as? Int64 {
                self.taskType = value
            }
            if let value = dict["Url"] as? String {
                self.url = value
            }
        }
    }
    public var requestId: String?

    public var taskDetail: GetSyntheticTaskDetailResponseBody.TaskDetail?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.taskDetail?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.taskDetail != nil {
            map["TaskDetail"] = self.taskDetail?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TaskDetail"] as? [String: Any?] {
            var model = GetSyntheticTaskDetailResponseBody.TaskDetail()
            model.fromMap(value)
            self.taskDetail = model
        }
    }
}

public class GetSyntheticTaskDetailResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetSyntheticTaskDetailResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetSyntheticTaskDetailResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetSyntheticTaskListRequest : Tea.TeaModel {
    public var direction: String?

    public var order: String?

    public var pageNum: Int64?

    public var pageSize: Int64?

    public var regionId: String?

    public var taskName: String?

    public var taskStatus: String?

    public var taskType: String?

    public var url: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.direction != nil {
            map["Direction"] = self.direction!
        }
        if self.order != nil {
            map["Order"] = self.order!
        }
        if self.pageNum != nil {
            map["PageNum"] = self.pageNum!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.taskName != nil {
            map["TaskName"] = self.taskName!
        }
        if self.taskStatus != nil {
            map["TaskStatus"] = self.taskStatus!
        }
        if self.taskType != nil {
            map["TaskType"] = self.taskType!
        }
        if self.url != nil {
            map["Url"] = self.url!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Direction"] as? String {
            self.direction = value
        }
        if let value = dict["Order"] as? String {
            self.order = value
        }
        if let value = dict["PageNum"] as? Int64 {
            self.pageNum = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["TaskName"] as? String {
            self.taskName = value
        }
        if let value = dict["TaskStatus"] as? String {
            self.taskStatus = value
        }
        if let value = dict["TaskType"] as? String {
            self.taskType = value
        }
        if let value = dict["Url"] as? String {
            self.url = value
        }
    }
}

public class GetSyntheticTaskListResponseBody : Tea.TeaModel {
    public class PageInfo : Tea.TeaModel {
        public class List : Tea.TeaModel {
            public var createTime: String?

            public var monitorNumber: Int64?

            public var taskId: String?

            public var taskName: String?

            public var taskStatus: String?

            public var taskType: Int64?

            public var taskTypeName: String?

            public var url: String?

            public var usable: Double?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.createTime != nil {
                    map["CreateTime"] = self.createTime!
                }
                if self.monitorNumber != nil {
                    map["MonitorNumber"] = self.monitorNumber!
                }
                if self.taskId != nil {
                    map["TaskId"] = self.taskId!
                }
                if self.taskName != nil {
                    map["TaskName"] = self.taskName!
                }
                if self.taskStatus != nil {
                    map["TaskStatus"] = self.taskStatus!
                }
                if self.taskType != nil {
                    map["TaskType"] = self.taskType!
                }
                if self.taskTypeName != nil {
                    map["TaskTypeName"] = self.taskTypeName!
                }
                if self.url != nil {
                    map["Url"] = self.url!
                }
                if self.usable != nil {
                    map["Usable"] = self.usable!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CreateTime"] as? String {
                    self.createTime = value
                }
                if let value = dict["MonitorNumber"] as? Int64 {
                    self.monitorNumber = value
                }
                if let value = dict["TaskId"] as? String {
                    self.taskId = value
                }
                if let value = dict["TaskName"] as? String {
                    self.taskName = value
                }
                if let value = dict["TaskStatus"] as? String {
                    self.taskStatus = value
                }
                if let value = dict["TaskType"] as? Int64 {
                    self.taskType = value
                }
                if let value = dict["TaskTypeName"] as? String {
                    self.taskTypeName = value
                }
                if let value = dict["Url"] as? String {
                    self.url = value
                }
                if let value = dict["Usable"] as? Double {
                    self.usable = value
                }
            }
        }
        public var hasNextPage: String?

        public var hasPreviousPage: Bool?

        public var isFirstPage: Bool?

        public var isLastPage: Bool?

        public var list: [GetSyntheticTaskListResponseBody.PageInfo.List]?

        public var navigateFirstPage: String?

        public var navigateLastPage: String?

        public var navigatePageNums: String?

        public var nextPage: String?

        public var pages: String?

        public var prepage: String?

        public var size: Int64?

        public var total: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.hasNextPage != nil {
                map["HasNextPage"] = self.hasNextPage!
            }
            if self.hasPreviousPage != nil {
                map["HasPreviousPage"] = self.hasPreviousPage!
            }
            if self.isFirstPage != nil {
                map["IsFirstPage"] = self.isFirstPage!
            }
            if self.isLastPage != nil {
                map["IsLastPage"] = self.isLastPage!
            }
            if self.list != nil {
                var tmp : [Any] = []
                for k in self.list! {
                    tmp.append(k.toMap())
                }
                map["List"] = tmp
            }
            if self.navigateFirstPage != nil {
                map["NavigateFirstPage"] = self.navigateFirstPage!
            }
            if self.navigateLastPage != nil {
                map["NavigateLastPage"] = self.navigateLastPage!
            }
            if self.navigatePageNums != nil {
                map["NavigatePageNums"] = self.navigatePageNums!
            }
            if self.nextPage != nil {
                map["NextPage"] = self.nextPage!
            }
            if self.pages != nil {
                map["Pages"] = self.pages!
            }
            if self.prepage != nil {
                map["Prepage"] = self.prepage!
            }
            if self.size != nil {
                map["Size"] = self.size!
            }
            if self.total != nil {
                map["Total"] = self.total!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["HasNextPage"] as? String {
                self.hasNextPage = value
            }
            if let value = dict["HasPreviousPage"] as? Bool {
                self.hasPreviousPage = value
            }
            if let value = dict["IsFirstPage"] as? Bool {
                self.isFirstPage = value
            }
            if let value = dict["IsLastPage"] as? Bool {
                self.isLastPage = value
            }
            if let value = dict["List"] as? [Any?] {
                var tmp : [GetSyntheticTaskListResponseBody.PageInfo.List] = []
                for v in value {
                    if v != nil {
                        var model = GetSyntheticTaskListResponseBody.PageInfo.List()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.list = tmp
            }
            if let value = dict["NavigateFirstPage"] as? String {
                self.navigateFirstPage = value
            }
            if let value = dict["NavigateLastPage"] as? String {
                self.navigateLastPage = value
            }
            if let value = dict["NavigatePageNums"] as? String {
                self.navigatePageNums = value
            }
            if let value = dict["NextPage"] as? String {
                self.nextPage = value
            }
            if let value = dict["Pages"] as? String {
                self.pages = value
            }
            if let value = dict["Prepage"] as? String {
                self.prepage = value
            }
            if let value = dict["Size"] as? Int64 {
                self.size = value
            }
            if let value = dict["Total"] as? Int64 {
                self.total = value
            }
        }
    }
    public var pageInfo: GetSyntheticTaskListResponseBody.PageInfo?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.pageInfo?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageInfo != nil {
            map["PageInfo"] = self.pageInfo?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageInfo"] as? [String: Any?] {
            var model = GetSyntheticTaskListResponseBody.PageInfo()
            model.fromMap(value)
            self.pageInfo = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetSyntheticTaskListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetSyntheticTaskListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetSyntheticTaskListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetSyntheticTaskMonitorsRequest : Tea.TeaModel {
    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class GetSyntheticTaskMonitorsResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var busy: Int64?

        public var city: String?

        public var cityCode: Int64?

        public var clientType: Int64?

        public var district: String?

        public var netServiceId: Int64?

        public var netServiceName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.busy != nil {
                map["Busy"] = self.busy!
            }
            if self.city != nil {
                map["City"] = self.city!
            }
            if self.cityCode != nil {
                map["CityCode"] = self.cityCode!
            }
            if self.clientType != nil {
                map["ClientType"] = self.clientType!
            }
            if self.district != nil {
                map["District"] = self.district!
            }
            if self.netServiceId != nil {
                map["NetServiceId"] = self.netServiceId!
            }
            if self.netServiceName != nil {
                map["NetServiceName"] = self.netServiceName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Busy"] as? Int64 {
                self.busy = value
            }
            if let value = dict["City"] as? String {
                self.city = value
            }
            if let value = dict["CityCode"] as? Int64 {
                self.cityCode = value
            }
            if let value = dict["ClientType"] as? Int64 {
                self.clientType = value
            }
            if let value = dict["District"] as? String {
                self.district = value
            }
            if let value = dict["NetServiceId"] as? Int64 {
                self.netServiceId = value
            }
            if let value = dict["NetServiceName"] as? String {
                self.netServiceName = value
            }
        }
    }
    public var code: String?

    public var data: [GetSyntheticTaskMonitorsResponseBody.Data]?

    public var msg: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.msg != nil {
            map["Msg"] = self.msg!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [GetSyntheticTaskMonitorsResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = GetSyntheticTaskMonitorsResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["Msg"] as? String {
            self.msg = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetSyntheticTaskMonitorsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetSyntheticTaskMonitorsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetSyntheticTaskMonitorsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetTimingSyntheticTaskRequest : Tea.TeaModel {
    public var regionId: String?

    public var taskId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["TaskId"] as? String {
            self.taskId = value
        }
    }
}

public class GetTimingSyntheticTaskResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class AvailableAssertions : Tea.TeaModel {
            public var expect: String?

            public var operator_: String?

            public var target: String?

            public var type: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.expect != nil {
                    map["Expect"] = self.expect!
                }
                if self.operator_ != nil {
                    map["Operator"] = self.operator_!
                }
                if self.target != nil {
                    map["Target"] = self.target!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Expect"] as? String {
                    self.expect = value
                }
                if let value = dict["Operator"] as? String {
                    self.operator_ = value
                }
                if let value = dict["Target"] as? String {
                    self.target = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
            }
        }
        public class CommonSetting : Tea.TeaModel {
            public class CustomHost : Tea.TeaModel {
                public class Hosts : Tea.TeaModel {
                    public var domain: String?

                    public var ipType: Int32?

                    public var ips: [String]?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.domain != nil {
                            map["Domain"] = self.domain!
                        }
                        if self.ipType != nil {
                            map["IpType"] = self.ipType!
                        }
                        if self.ips != nil {
                            map["Ips"] = self.ips!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Domain"] as? String {
                            self.domain = value
                        }
                        if let value = dict["IpType"] as? Int32 {
                            self.ipType = value
                        }
                        if let value = dict["Ips"] as? [String] {
                            self.ips = value
                        }
                    }
                }
                public var hosts: [GetTimingSyntheticTaskResponseBody.Data.CommonSetting.CustomHost.Hosts]?

                public var selectType: Int32?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.hosts != nil {
                        var tmp : [Any] = []
                        for k in self.hosts! {
                            tmp.append(k.toMap())
                        }
                        map["Hosts"] = tmp
                    }
                    if self.selectType != nil {
                        map["SelectType"] = self.selectType!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Hosts"] as? [Any?] {
                        var tmp : [GetTimingSyntheticTaskResponseBody.Data.CommonSetting.CustomHost.Hosts] = []
                        for v in value {
                            if v != nil {
                                var model = GetTimingSyntheticTaskResponseBody.Data.CommonSetting.CustomHost.Hosts()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.hosts = tmp
                    }
                    if let value = dict["SelectType"] as? Int32 {
                        self.selectType = value
                    }
                }
            }
            public class CustomPrometheusSetting : Tea.TeaModel {
                public var prometheusClusterId: String?

                public var prometheusClusterRegion: String?

                public var prometheusLabels: [String: String]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.prometheusClusterId != nil {
                        map["PrometheusClusterId"] = self.prometheusClusterId!
                    }
                    if self.prometheusClusterRegion != nil {
                        map["PrometheusClusterRegion"] = self.prometheusClusterRegion!
                    }
                    if self.prometheusLabels != nil {
                        map["PrometheusLabels"] = self.prometheusLabels!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["PrometheusClusterId"] as? String {
                        self.prometheusClusterId = value
                    }
                    if let value = dict["PrometheusClusterRegion"] as? String {
                        self.prometheusClusterRegion = value
                    }
                    if let value = dict["PrometheusLabels"] as? [String: String] {
                        self.prometheusLabels = value
                    }
                }
            }
            public class CustomVPCSetting : Tea.TeaModel {
                public var regionId: String?

                public var secureGroupId: String?

                public var vSwitchId: String?

                public var vpcId: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.regionId != nil {
                        map["RegionId"] = self.regionId!
                    }
                    if self.secureGroupId != nil {
                        map["SecureGroupId"] = self.secureGroupId!
                    }
                    if self.vSwitchId != nil {
                        map["VSwitchId"] = self.vSwitchId!
                    }
                    if self.vpcId != nil {
                        map["VpcId"] = self.vpcId!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["RegionId"] as? String {
                        self.regionId = value
                    }
                    if let value = dict["SecureGroupId"] as? String {
                        self.secureGroupId = value
                    }
                    if let value = dict["VSwitchId"] as? String {
                        self.vSwitchId = value
                    }
                    if let value = dict["VpcId"] as? String {
                        self.vpcId = value
                    }
                }
            }
            public var customHost: GetTimingSyntheticTaskResponseBody.Data.CommonSetting.CustomHost?

            public var customPrometheusSetting: GetTimingSyntheticTaskResponseBody.Data.CommonSetting.CustomPrometheusSetting?

            public var customVPCSetting: GetTimingSyntheticTaskResponseBody.Data.CommonSetting.CustomVPCSetting?

            public var ipType: Int32?

            public var isOpenTrace: Bool?

            public var monitorSamples: Int32?

            public var traceClientType: Int32?

            public var xtraceRegion: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.customHost?.validate()
                try self.customPrometheusSetting?.validate()
                try self.customVPCSetting?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.customHost != nil {
                    map["CustomHost"] = self.customHost?.toMap()
                }
                if self.customPrometheusSetting != nil {
                    map["CustomPrometheusSetting"] = self.customPrometheusSetting?.toMap()
                }
                if self.customVPCSetting != nil {
                    map["CustomVPCSetting"] = self.customVPCSetting?.toMap()
                }
                if self.ipType != nil {
                    map["IpType"] = self.ipType!
                }
                if self.isOpenTrace != nil {
                    map["IsOpenTrace"] = self.isOpenTrace!
                }
                if self.monitorSamples != nil {
                    map["MonitorSamples"] = self.monitorSamples!
                }
                if self.traceClientType != nil {
                    map["TraceClientType"] = self.traceClientType!
                }
                if self.xtraceRegion != nil {
                    map["XtraceRegion"] = self.xtraceRegion!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CustomHost"] as? [String: Any?] {
                    var model = GetTimingSyntheticTaskResponseBody.Data.CommonSetting.CustomHost()
                    model.fromMap(value)
                    self.customHost = model
                }
                if let value = dict["CustomPrometheusSetting"] as? [String: Any?] {
                    var model = GetTimingSyntheticTaskResponseBody.Data.CommonSetting.CustomPrometheusSetting()
                    model.fromMap(value)
                    self.customPrometheusSetting = model
                }
                if let value = dict["CustomVPCSetting"] as? [String: Any?] {
                    var model = GetTimingSyntheticTaskResponseBody.Data.CommonSetting.CustomVPCSetting()
                    model.fromMap(value)
                    self.customVPCSetting = model
                }
                if let value = dict["IpType"] as? Int32 {
                    self.ipType = value
                }
                if let value = dict["IsOpenTrace"] as? Bool {
                    self.isOpenTrace = value
                }
                if let value = dict["MonitorSamples"] as? Int32 {
                    self.monitorSamples = value
                }
                if let value = dict["TraceClientType"] as? Int32 {
                    self.traceClientType = value
                }
                if let value = dict["XtraceRegion"] as? String {
                    self.xtraceRegion = value
                }
            }
        }
        public class CustomPeriod : Tea.TeaModel {
            public var endHour: Int64?

            public var startHour: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.endHour != nil {
                    map["EndHour"] = self.endHour!
                }
                if self.startHour != nil {
                    map["StartHour"] = self.startHour!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["EndHour"] as? Int64 {
                    self.endHour = value
                }
                if let value = dict["StartHour"] as? Int64 {
                    self.startHour = value
                }
            }
        }
        public class MonitorConf : Tea.TeaModel {
            public class ApiHTTP : Tea.TeaModel {
                public class RequestBody : Tea.TeaModel {
                    public var content: String?

                    public var type: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.content != nil {
                            map["Content"] = self.content!
                        }
                        if self.type != nil {
                            map["Type"] = self.type!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Content"] as? String {
                            self.content = value
                        }
                        if let value = dict["Type"] as? String {
                            self.type = value
                        }
                    }
                }
                public var checkCert: Bool?

                public var connectTimeout: Int64?

                public var method: String?

                public var protocolAlpnProtocol: Int32?

                public var requestBody: GetTimingSyntheticTaskResponseBody.Data.MonitorConf.ApiHTTP.RequestBody?

                public var requestHeaders: [String: String]?

                public var targetUrl: String?

                public var timeout: Int64?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.requestBody?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.checkCert != nil {
                        map["CheckCert"] = self.checkCert!
                    }
                    if self.connectTimeout != nil {
                        map["ConnectTimeout"] = self.connectTimeout!
                    }
                    if self.method != nil {
                        map["Method"] = self.method!
                    }
                    if self.protocolAlpnProtocol != nil {
                        map["ProtocolAlpnProtocol"] = self.protocolAlpnProtocol!
                    }
                    if self.requestBody != nil {
                        map["RequestBody"] = self.requestBody?.toMap()
                    }
                    if self.requestHeaders != nil {
                        map["RequestHeaders"] = self.requestHeaders!
                    }
                    if self.targetUrl != nil {
                        map["TargetUrl"] = self.targetUrl!
                    }
                    if self.timeout != nil {
                        map["Timeout"] = self.timeout!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["CheckCert"] as? Bool {
                        self.checkCert = value
                    }
                    if let value = dict["ConnectTimeout"] as? Int64 {
                        self.connectTimeout = value
                    }
                    if let value = dict["Method"] as? String {
                        self.method = value
                    }
                    if let value = dict["ProtocolAlpnProtocol"] as? Int32 {
                        self.protocolAlpnProtocol = value
                    }
                    if let value = dict["RequestBody"] as? [String: Any?] {
                        var model = GetTimingSyntheticTaskResponseBody.Data.MonitorConf.ApiHTTP.RequestBody()
                        model.fromMap(value)
                        self.requestBody = model
                    }
                    if let value = dict["RequestHeaders"] as? [String: String] {
                        self.requestHeaders = value
                    }
                    if let value = dict["TargetUrl"] as? String {
                        self.targetUrl = value
                    }
                    if let value = dict["Timeout"] as? Int64 {
                        self.timeout = value
                    }
                }
            }
            public class FileDownload : Tea.TeaModel {
                public var connectionTimeout: Int64?

                public var customHeaderContent: [String: String]?

                public var downloadKernel: Int64?

                public var ignoreCertificateAuthError: Int32?

                public var ignoreCertificateCanceledError: Int32?

                public var ignoreCertificateOutOfDateError: Int32?

                public var ignoreCertificateStatusError: Int32?

                public var ignoreCertificateUntrustworthyError: Int32?

                public var ignoreCertificateUsingError: Int32?

                public var ignoreInvalidHostError: Int32?

                public var monitorTimeout: Int64?

                public var quickProtocol: Int64?

                public var redirection: Int32?

                public var targetUrl: String?

                public var transmissionSize: Int64?

                public var validateKeywords: String?

                public var verifyWay: Int32?

                public var whiteList: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.connectionTimeout != nil {
                        map["ConnectionTimeout"] = self.connectionTimeout!
                    }
                    if self.customHeaderContent != nil {
                        map["CustomHeaderContent"] = self.customHeaderContent!
                    }
                    if self.downloadKernel != nil {
                        map["DownloadKernel"] = self.downloadKernel!
                    }
                    if self.ignoreCertificateAuthError != nil {
                        map["IgnoreCertificateAuthError"] = self.ignoreCertificateAuthError!
                    }
                    if self.ignoreCertificateCanceledError != nil {
                        map["IgnoreCertificateCanceledError"] = self.ignoreCertificateCanceledError!
                    }
                    if self.ignoreCertificateOutOfDateError != nil {
                        map["IgnoreCertificateOutOfDateError"] = self.ignoreCertificateOutOfDateError!
                    }
                    if self.ignoreCertificateStatusError != nil {
                        map["IgnoreCertificateStatusError"] = self.ignoreCertificateStatusError!
                    }
                    if self.ignoreCertificateUntrustworthyError != nil {
                        map["IgnoreCertificateUntrustworthyError"] = self.ignoreCertificateUntrustworthyError!
                    }
                    if self.ignoreCertificateUsingError != nil {
                        map["IgnoreCertificateUsingError"] = self.ignoreCertificateUsingError!
                    }
                    if self.ignoreInvalidHostError != nil {
                        map["IgnoreInvalidHostError"] = self.ignoreInvalidHostError!
                    }
                    if self.monitorTimeout != nil {
                        map["MonitorTimeout"] = self.monitorTimeout!
                    }
                    if self.quickProtocol != nil {
                        map["QuickProtocol"] = self.quickProtocol!
                    }
                    if self.redirection != nil {
                        map["Redirection"] = self.redirection!
                    }
                    if self.targetUrl != nil {
                        map["TargetUrl"] = self.targetUrl!
                    }
                    if self.transmissionSize != nil {
                        map["TransmissionSize"] = self.transmissionSize!
                    }
                    if self.validateKeywords != nil {
                        map["ValidateKeywords"] = self.validateKeywords!
                    }
                    if self.verifyWay != nil {
                        map["VerifyWay"] = self.verifyWay!
                    }
                    if self.whiteList != nil {
                        map["WhiteList"] = self.whiteList!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["ConnectionTimeout"] as? Int64 {
                        self.connectionTimeout = value
                    }
                    if let value = dict["CustomHeaderContent"] as? [String: String] {
                        self.customHeaderContent = value
                    }
                    if let value = dict["DownloadKernel"] as? Int64 {
                        self.downloadKernel = value
                    }
                    if let value = dict["IgnoreCertificateAuthError"] as? Int32 {
                        self.ignoreCertificateAuthError = value
                    }
                    if let value = dict["IgnoreCertificateCanceledError"] as? Int32 {
                        self.ignoreCertificateCanceledError = value
                    }
                    if let value = dict["IgnoreCertificateOutOfDateError"] as? Int32 {
                        self.ignoreCertificateOutOfDateError = value
                    }
                    if let value = dict["IgnoreCertificateStatusError"] as? Int32 {
                        self.ignoreCertificateStatusError = value
                    }
                    if let value = dict["IgnoreCertificateUntrustworthyError"] as? Int32 {
                        self.ignoreCertificateUntrustworthyError = value
                    }
                    if let value = dict["IgnoreCertificateUsingError"] as? Int32 {
                        self.ignoreCertificateUsingError = value
                    }
                    if let value = dict["IgnoreInvalidHostError"] as? Int32 {
                        self.ignoreInvalidHostError = value
                    }
                    if let value = dict["MonitorTimeout"] as? Int64 {
                        self.monitorTimeout = value
                    }
                    if let value = dict["QuickProtocol"] as? Int64 {
                        self.quickProtocol = value
                    }
                    if let value = dict["Redirection"] as? Int32 {
                        self.redirection = value
                    }
                    if let value = dict["TargetUrl"] as? String {
                        self.targetUrl = value
                    }
                    if let value = dict["TransmissionSize"] as? Int64 {
                        self.transmissionSize = value
                    }
                    if let value = dict["ValidateKeywords"] as? String {
                        self.validateKeywords = value
                    }
                    if let value = dict["VerifyWay"] as? Int32 {
                        self.verifyWay = value
                    }
                    if let value = dict["WhiteList"] as? String {
                        self.whiteList = value
                    }
                }
            }
            public class NetDNS : Tea.TeaModel {
                public var dnsServerIpType: Int32?

                public var nsServer: String?

                public var queryMethod: Int32?

                public var targetUrl: String?

                public var timeout: Int64?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.dnsServerIpType != nil {
                        map["DnsServerIpType"] = self.dnsServerIpType!
                    }
                    if self.nsServer != nil {
                        map["NsServer"] = self.nsServer!
                    }
                    if self.queryMethod != nil {
                        map["QueryMethod"] = self.queryMethod!
                    }
                    if self.targetUrl != nil {
                        map["TargetUrl"] = self.targetUrl!
                    }
                    if self.timeout != nil {
                        map["Timeout"] = self.timeout!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["DnsServerIpType"] as? Int32 {
                        self.dnsServerIpType = value
                    }
                    if let value = dict["NsServer"] as? String {
                        self.nsServer = value
                    }
                    if let value = dict["QueryMethod"] as? Int32 {
                        self.queryMethod = value
                    }
                    if let value = dict["TargetUrl"] as? String {
                        self.targetUrl = value
                    }
                    if let value = dict["Timeout"] as? Int64 {
                        self.timeout = value
                    }
                }
            }
            public class NetICMP : Tea.TeaModel {
                public var interval: Int32?

                public var packageNum: Int32?

                public var packageSize: Int32?

                public var splitPackage: Bool?

                public var targetUrl: String?

                public var timeout: Int64?

                public var tracertEnable: Bool?

                public var tracertNumMax: Int32?

                public var tracertTimeout: Int64?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.interval != nil {
                        map["Interval"] = self.interval!
                    }
                    if self.packageNum != nil {
                        map["PackageNum"] = self.packageNum!
                    }
                    if self.packageSize != nil {
                        map["PackageSize"] = self.packageSize!
                    }
                    if self.splitPackage != nil {
                        map["SplitPackage"] = self.splitPackage!
                    }
                    if self.targetUrl != nil {
                        map["TargetUrl"] = self.targetUrl!
                    }
                    if self.timeout != nil {
                        map["Timeout"] = self.timeout!
                    }
                    if self.tracertEnable != nil {
                        map["TracertEnable"] = self.tracertEnable!
                    }
                    if self.tracertNumMax != nil {
                        map["TracertNumMax"] = self.tracertNumMax!
                    }
                    if self.tracertTimeout != nil {
                        map["TracertTimeout"] = self.tracertTimeout!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Interval"] as? Int32 {
                        self.interval = value
                    }
                    if let value = dict["PackageNum"] as? Int32 {
                        self.packageNum = value
                    }
                    if let value = dict["PackageSize"] as? Int32 {
                        self.packageSize = value
                    }
                    if let value = dict["SplitPackage"] as? Bool {
                        self.splitPackage = value
                    }
                    if let value = dict["TargetUrl"] as? String {
                        self.targetUrl = value
                    }
                    if let value = dict["Timeout"] as? Int64 {
                        self.timeout = value
                    }
                    if let value = dict["TracertEnable"] as? Bool {
                        self.tracertEnable = value
                    }
                    if let value = dict["TracertNumMax"] as? Int32 {
                        self.tracertNumMax = value
                    }
                    if let value = dict["TracertTimeout"] as? Int64 {
                        self.tracertTimeout = value
                    }
                }
            }
            public class NetTCP : Tea.TeaModel {
                public var connectTimes: Int32?

                public var interval: Int64?

                public var targetUrl: String?

                public var timeout: Int64?

                public var tracertEnable: Bool?

                public var tracertNumMax: Int32?

                public var tracertTimeout: Int64?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.connectTimes != nil {
                        map["ConnectTimes"] = self.connectTimes!
                    }
                    if self.interval != nil {
                        map["Interval"] = self.interval!
                    }
                    if self.targetUrl != nil {
                        map["TargetUrl"] = self.targetUrl!
                    }
                    if self.timeout != nil {
                        map["Timeout"] = self.timeout!
                    }
                    if self.tracertEnable != nil {
                        map["TracertEnable"] = self.tracertEnable!
                    }
                    if self.tracertNumMax != nil {
                        map["TracertNumMax"] = self.tracertNumMax!
                    }
                    if self.tracertTimeout != nil {
                        map["TracertTimeout"] = self.tracertTimeout!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["ConnectTimes"] as? Int32 {
                        self.connectTimes = value
                    }
                    if let value = dict["Interval"] as? Int64 {
                        self.interval = value
                    }
                    if let value = dict["TargetUrl"] as? String {
                        self.targetUrl = value
                    }
                    if let value = dict["Timeout"] as? Int64 {
                        self.timeout = value
                    }
                    if let value = dict["TracertEnable"] as? Bool {
                        self.tracertEnable = value
                    }
                    if let value = dict["TracertNumMax"] as? Int32 {
                        self.tracertNumMax = value
                    }
                    if let value = dict["TracertTimeout"] as? Int64 {
                        self.tracertTimeout = value
                    }
                }
            }
            public class Stream : Tea.TeaModel {
                public var customHeaderContent: [String: String]?

                public var playerType: Int32?

                public var streamAddressType: Int32?

                public var streamMonitorTimeout: Int32?

                public var streamType: Int32?

                public var targetUrl: String?

                public var whiteList: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.customHeaderContent != nil {
                        map["CustomHeaderContent"] = self.customHeaderContent!
                    }
                    if self.playerType != nil {
                        map["PlayerType"] = self.playerType!
                    }
                    if self.streamAddressType != nil {
                        map["StreamAddressType"] = self.streamAddressType!
                    }
                    if self.streamMonitorTimeout != nil {
                        map["StreamMonitorTimeout"] = self.streamMonitorTimeout!
                    }
                    if self.streamType != nil {
                        map["StreamType"] = self.streamType!
                    }
                    if self.targetUrl != nil {
                        map["TargetUrl"] = self.targetUrl!
                    }
                    if self.whiteList != nil {
                        map["WhiteList"] = self.whiteList!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["CustomHeaderContent"] as? [String: String] {
                        self.customHeaderContent = value
                    }
                    if let value = dict["PlayerType"] as? Int32 {
                        self.playerType = value
                    }
                    if let value = dict["StreamAddressType"] as? Int32 {
                        self.streamAddressType = value
                    }
                    if let value = dict["StreamMonitorTimeout"] as? Int32 {
                        self.streamMonitorTimeout = value
                    }
                    if let value = dict["StreamType"] as? Int32 {
                        self.streamType = value
                    }
                    if let value = dict["TargetUrl"] as? String {
                        self.targetUrl = value
                    }
                    if let value = dict["WhiteList"] as? String {
                        self.whiteList = value
                    }
                }
            }
            public class Website : Tea.TeaModel {
                public var automaticScrolling: Int32?

                public var customHeader: Int32?

                public var customHeaderContent: [String: String]?

                public var DNSHijackWhitelist: String?

                public var disableCache: Int32?

                public var disableCompression: Int32?

                public var elementBlacklist: String?

                public var filterInvalidIP: Int32?

                public var flowHijackJumpTimes: Int32?

                public var flowHijackLogo: String?

                public var ignoreCertificateError: Int32?

                public var monitorTimeout: Int32?

                public var pageTamper: String?

                public var redirection: Int32?

                public var slowElementThreshold: Int64?

                public var targetUrl: String?

                public var verifyStringBlacklist: String?

                public var verifyStringWhitelist: String?

                public var waitCompletionTime: Int64?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.automaticScrolling != nil {
                        map["AutomaticScrolling"] = self.automaticScrolling!
                    }
                    if self.customHeader != nil {
                        map["CustomHeader"] = self.customHeader!
                    }
                    if self.customHeaderContent != nil {
                        map["CustomHeaderContent"] = self.customHeaderContent!
                    }
                    if self.DNSHijackWhitelist != nil {
                        map["DNSHijackWhitelist"] = self.DNSHijackWhitelist!
                    }
                    if self.disableCache != nil {
                        map["DisableCache"] = self.disableCache!
                    }
                    if self.disableCompression != nil {
                        map["DisableCompression"] = self.disableCompression!
                    }
                    if self.elementBlacklist != nil {
                        map["ElementBlacklist"] = self.elementBlacklist!
                    }
                    if self.filterInvalidIP != nil {
                        map["FilterInvalidIP"] = self.filterInvalidIP!
                    }
                    if self.flowHijackJumpTimes != nil {
                        map["FlowHijackJumpTimes"] = self.flowHijackJumpTimes!
                    }
                    if self.flowHijackLogo != nil {
                        map["FlowHijackLogo"] = self.flowHijackLogo!
                    }
                    if self.ignoreCertificateError != nil {
                        map["IgnoreCertificateError"] = self.ignoreCertificateError!
                    }
                    if self.monitorTimeout != nil {
                        map["MonitorTimeout"] = self.monitorTimeout!
                    }
                    if self.pageTamper != nil {
                        map["PageTamper"] = self.pageTamper!
                    }
                    if self.redirection != nil {
                        map["Redirection"] = self.redirection!
                    }
                    if self.slowElementThreshold != nil {
                        map["SlowElementThreshold"] = self.slowElementThreshold!
                    }
                    if self.targetUrl != nil {
                        map["TargetUrl"] = self.targetUrl!
                    }
                    if self.verifyStringBlacklist != nil {
                        map["VerifyStringBlacklist"] = self.verifyStringBlacklist!
                    }
                    if self.verifyStringWhitelist != nil {
                        map["VerifyStringWhitelist"] = self.verifyStringWhitelist!
                    }
                    if self.waitCompletionTime != nil {
                        map["WaitCompletionTime"] = self.waitCompletionTime!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["AutomaticScrolling"] as? Int32 {
                        self.automaticScrolling = value
                    }
                    if let value = dict["CustomHeader"] as? Int32 {
                        self.customHeader = value
                    }
                    if let value = dict["CustomHeaderContent"] as? [String: String] {
                        self.customHeaderContent = value
                    }
                    if let value = dict["DNSHijackWhitelist"] as? String {
                        self.DNSHijackWhitelist = value
                    }
                    if let value = dict["DisableCache"] as? Int32 {
                        self.disableCache = value
                    }
                    if let value = dict["DisableCompression"] as? Int32 {
                        self.disableCompression = value
                    }
                    if let value = dict["ElementBlacklist"] as? String {
                        self.elementBlacklist = value
                    }
                    if let value = dict["FilterInvalidIP"] as? Int32 {
                        self.filterInvalidIP = value
                    }
                    if let value = dict["FlowHijackJumpTimes"] as? Int32 {
                        self.flowHijackJumpTimes = value
                    }
                    if let value = dict["FlowHijackLogo"] as? String {
                        self.flowHijackLogo = value
                    }
                    if let value = dict["IgnoreCertificateError"] as? Int32 {
                        self.ignoreCertificateError = value
                    }
                    if let value = dict["MonitorTimeout"] as? Int32 {
                        self.monitorTimeout = value
                    }
                    if let value = dict["PageTamper"] as? String {
                        self.pageTamper = value
                    }
                    if let value = dict["Redirection"] as? Int32 {
                        self.redirection = value
                    }
                    if let value = dict["SlowElementThreshold"] as? Int64 {
                        self.slowElementThreshold = value
                    }
                    if let value = dict["TargetUrl"] as? String {
                        self.targetUrl = value
                    }
                    if let value = dict["VerifyStringBlacklist"] as? String {
                        self.verifyStringBlacklist = value
                    }
                    if let value = dict["VerifyStringWhitelist"] as? String {
                        self.verifyStringWhitelist = value
                    }
                    if let value = dict["WaitCompletionTime"] as? Int64 {
                        self.waitCompletionTime = value
                    }
                }
            }
            public var apiHTTP: GetTimingSyntheticTaskResponseBody.Data.MonitorConf.ApiHTTP?

            public var fileDownload: GetTimingSyntheticTaskResponseBody.Data.MonitorConf.FileDownload?

            public var netDNS: GetTimingSyntheticTaskResponseBody.Data.MonitorConf.NetDNS?

            public var netICMP: GetTimingSyntheticTaskResponseBody.Data.MonitorConf.NetICMP?

            public var netTCP: GetTimingSyntheticTaskResponseBody.Data.MonitorConf.NetTCP?

            public var stream: GetTimingSyntheticTaskResponseBody.Data.MonitorConf.Stream?

            public var website: GetTimingSyntheticTaskResponseBody.Data.MonitorConf.Website?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.apiHTTP?.validate()
                try self.fileDownload?.validate()
                try self.netDNS?.validate()
                try self.netICMP?.validate()
                try self.netTCP?.validate()
                try self.stream?.validate()
                try self.website?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.apiHTTP != nil {
                    map["ApiHTTP"] = self.apiHTTP?.toMap()
                }
                if self.fileDownload != nil {
                    map["FileDownload"] = self.fileDownload?.toMap()
                }
                if self.netDNS != nil {
                    map["NetDNS"] = self.netDNS?.toMap()
                }
                if self.netICMP != nil {
                    map["NetICMP"] = self.netICMP?.toMap()
                }
                if self.netTCP != nil {
                    map["NetTCP"] = self.netTCP?.toMap()
                }
                if self.stream != nil {
                    map["Stream"] = self.stream?.toMap()
                }
                if self.website != nil {
                    map["Website"] = self.website?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ApiHTTP"] as? [String: Any?] {
                    var model = GetTimingSyntheticTaskResponseBody.Data.MonitorConf.ApiHTTP()
                    model.fromMap(value)
                    self.apiHTTP = model
                }
                if let value = dict["FileDownload"] as? [String: Any?] {
                    var model = GetTimingSyntheticTaskResponseBody.Data.MonitorConf.FileDownload()
                    model.fromMap(value)
                    self.fileDownload = model
                }
                if let value = dict["NetDNS"] as? [String: Any?] {
                    var model = GetTimingSyntheticTaskResponseBody.Data.MonitorConf.NetDNS()
                    model.fromMap(value)
                    self.netDNS = model
                }
                if let value = dict["NetICMP"] as? [String: Any?] {
                    var model = GetTimingSyntheticTaskResponseBody.Data.MonitorConf.NetICMP()
                    model.fromMap(value)
                    self.netICMP = model
                }
                if let value = dict["NetTCP"] as? [String: Any?] {
                    var model = GetTimingSyntheticTaskResponseBody.Data.MonitorConf.NetTCP()
                    model.fromMap(value)
                    self.netTCP = model
                }
                if let value = dict["Stream"] as? [String: Any?] {
                    var model = GetTimingSyntheticTaskResponseBody.Data.MonitorConf.Stream()
                    model.fromMap(value)
                    self.stream = model
                }
                if let value = dict["Website"] as? [String: Any?] {
                    var model = GetTimingSyntheticTaskResponseBody.Data.MonitorConf.Website()
                    model.fromMap(value)
                    self.website = model
                }
            }
        }
        public class Monitors : Tea.TeaModel {
            public var cityCode: String?

            public var clientType: Int32?

            public var operatorCode: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.cityCode != nil {
                    map["CityCode"] = self.cityCode!
                }
                if self.clientType != nil {
                    map["ClientType"] = self.clientType!
                }
                if self.operatorCode != nil {
                    map["OperatorCode"] = self.operatorCode!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CityCode"] as? String {
                    self.cityCode = value
                }
                if let value = dict["ClientType"] as? Int32 {
                    self.clientType = value
                }
                if let value = dict["OperatorCode"] as? String {
                    self.operatorCode = value
                }
            }
        }
        public class Tags : Tea.TeaModel {
            public var key: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.key != nil {
                    map["Key"] = self.key!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Key"] as? String {
                    self.key = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public var availableAssertions: [GetTimingSyntheticTaskResponseBody.Data.AvailableAssertions]?

        public var commonSetting: GetTimingSyntheticTaskResponseBody.Data.CommonSetting?

        public var customPeriod: GetTimingSyntheticTaskResponseBody.Data.CustomPeriod?

        public var frequency: String?

        public var monitorCategory: Int64?

        public var monitorConf: GetTimingSyntheticTaskResponseBody.Data.MonitorConf?

        public var monitors: [GetTimingSyntheticTaskResponseBody.Data.Monitors]?

        public var name: String?

        public var regionId: String?

        public var resourceGroupId: String?

        public var status: String?

        public var tags: [GetTimingSyntheticTaskResponseBody.Data.Tags]?

        public var taskId: String?

        public var taskType: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.commonSetting?.validate()
            try self.customPeriod?.validate()
            try self.monitorConf?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.availableAssertions != nil {
                var tmp : [Any] = []
                for k in self.availableAssertions! {
                    tmp.append(k.toMap())
                }
                map["AvailableAssertions"] = tmp
            }
            if self.commonSetting != nil {
                map["CommonSetting"] = self.commonSetting?.toMap()
            }
            if self.customPeriod != nil {
                map["CustomPeriod"] = self.customPeriod?.toMap()
            }
            if self.frequency != nil {
                map["Frequency"] = self.frequency!
            }
            if self.monitorCategory != nil {
                map["MonitorCategory"] = self.monitorCategory!
            }
            if self.monitorConf != nil {
                map["MonitorConf"] = self.monitorConf?.toMap()
            }
            if self.monitors != nil {
                var tmp : [Any] = []
                for k in self.monitors! {
                    tmp.append(k.toMap())
                }
                map["Monitors"] = tmp
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.regionId != nil {
                map["RegionId"] = self.regionId!
            }
            if self.resourceGroupId != nil {
                map["ResourceGroupId"] = self.resourceGroupId!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.tags != nil {
                var tmp : [Any] = []
                for k in self.tags! {
                    tmp.append(k.toMap())
                }
                map["Tags"] = tmp
            }
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            if self.taskType != nil {
                map["TaskType"] = self.taskType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AvailableAssertions"] as? [Any?] {
                var tmp : [GetTimingSyntheticTaskResponseBody.Data.AvailableAssertions] = []
                for v in value {
                    if v != nil {
                        var model = GetTimingSyntheticTaskResponseBody.Data.AvailableAssertions()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.availableAssertions = tmp
            }
            if let value = dict["CommonSetting"] as? [String: Any?] {
                var model = GetTimingSyntheticTaskResponseBody.Data.CommonSetting()
                model.fromMap(value)
                self.commonSetting = model
            }
            if let value = dict["CustomPeriod"] as? [String: Any?] {
                var model = GetTimingSyntheticTaskResponseBody.Data.CustomPeriod()
                model.fromMap(value)
                self.customPeriod = model
            }
            if let value = dict["Frequency"] as? String {
                self.frequency = value
            }
            if let value = dict["MonitorCategory"] as? Int64 {
                self.monitorCategory = value
            }
            if let value = dict["MonitorConf"] as? [String: Any?] {
                var model = GetTimingSyntheticTaskResponseBody.Data.MonitorConf()
                model.fromMap(value)
                self.monitorConf = model
            }
            if let value = dict["Monitors"] as? [Any?] {
                var tmp : [GetTimingSyntheticTaskResponseBody.Data.Monitors] = []
                for v in value {
                    if v != nil {
                        var model = GetTimingSyntheticTaskResponseBody.Data.Monitors()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.monitors = tmp
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["RegionId"] as? String {
                self.regionId = value
            }
            if let value = dict["ResourceGroupId"] as? String {
                self.resourceGroupId = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["Tags"] as? [Any?] {
                var tmp : [GetTimingSyntheticTaskResponseBody.Data.Tags] = []
                for v in value {
                    if v != nil {
                        var model = GetTimingSyntheticTaskResponseBody.Data.Tags()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.tags = tmp
            }
            if let value = dict["TaskId"] as? String {
                self.taskId = value
            }
            if let value = dict["TaskType"] as? Int32 {
                self.taskType = value
            }
        }
    }
    public var code: Int64?

    public var data: GetTimingSyntheticTaskResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int64 {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetTimingSyntheticTaskResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetTimingSyntheticTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetTimingSyntheticTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetTimingSyntheticTaskResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetTraceRequest : Tea.TeaModel {
    public var endTime: Int64?

    public var pageNumber: Int64?

    public var pageSize: Int64?

    public var regionId: String?

    public var startTime: Int64?

    public var traceID: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.traceID != nil {
            map["TraceID"] = self.traceID!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["PageNumber"] as? Int64 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
        if let value = dict["TraceID"] as? String {
            self.traceID = value
        }
    }
}

public class GetTraceResponseBody : Tea.TeaModel {
    public class Spans : Tea.TeaModel {
        public class LogEventList : Tea.TeaModel {
            public class TagEntryList : Tea.TeaModel {
                public var key: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.key != nil {
                        map["Key"] = self.key!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Key"] as? String {
                        self.key = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public var tagEntryList: [GetTraceResponseBody.Spans.LogEventList.TagEntryList]?

            public var timestamp: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.tagEntryList != nil {
                    var tmp : [Any] = []
                    for k in self.tagEntryList! {
                        tmp.append(k.toMap())
                    }
                    map["TagEntryList"] = tmp
                }
                if self.timestamp != nil {
                    map["Timestamp"] = self.timestamp!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["TagEntryList"] as? [Any?] {
                    var tmp : [GetTraceResponseBody.Spans.LogEventList.TagEntryList] = []
                    for v in value {
                        if v != nil {
                            var model = GetTraceResponseBody.Spans.LogEventList.TagEntryList()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.tagEntryList = tmp
                }
                if let value = dict["Timestamp"] as? Int64 {
                    self.timestamp = value
                }
            }
        }
        public class TagEntryList : Tea.TeaModel {
            public var key: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.key != nil {
                    map["Key"] = self.key!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Key"] as? String {
                    self.key = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public var children: [[String: Any]]?

        public var duration: Int64?

        public var haveStack: Bool?

        public var logEventList: [GetTraceResponseBody.Spans.LogEventList]?

        public var operationName: String?

        public var parentSpanId: String?

        public var resultCode: String?

        public var rpcId: String?

        public var rpcType: Int32?

        public var serviceIp: String?

        public var serviceName: String?

        public var spanId: String?

        public var tagEntryList: [GetTraceResponseBody.Spans.TagEntryList]?

        public var timestamp: Int64?

        public var traceID: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.children != nil {
                map["Children"] = self.children!
            }
            if self.duration != nil {
                map["Duration"] = self.duration!
            }
            if self.haveStack != nil {
                map["HaveStack"] = self.haveStack!
            }
            if self.logEventList != nil {
                var tmp : [Any] = []
                for k in self.logEventList! {
                    tmp.append(k.toMap())
                }
                map["LogEventList"] = tmp
            }
            if self.operationName != nil {
                map["OperationName"] = self.operationName!
            }
            if self.parentSpanId != nil {
                map["ParentSpanId"] = self.parentSpanId!
            }
            if self.resultCode != nil {
                map["ResultCode"] = self.resultCode!
            }
            if self.rpcId != nil {
                map["RpcId"] = self.rpcId!
            }
            if self.rpcType != nil {
                map["RpcType"] = self.rpcType!
            }
            if self.serviceIp != nil {
                map["ServiceIp"] = self.serviceIp!
            }
            if self.serviceName != nil {
                map["ServiceName"] = self.serviceName!
            }
            if self.spanId != nil {
                map["SpanId"] = self.spanId!
            }
            if self.tagEntryList != nil {
                var tmp : [Any] = []
                for k in self.tagEntryList! {
                    tmp.append(k.toMap())
                }
                map["TagEntryList"] = tmp
            }
            if self.timestamp != nil {
                map["Timestamp"] = self.timestamp!
            }
            if self.traceID != nil {
                map["TraceID"] = self.traceID!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Children"] as? [[String: Any]] {
                self.children = value
            }
            if let value = dict["Duration"] as? Int64 {
                self.duration = value
            }
            if let value = dict["HaveStack"] as? Bool {
                self.haveStack = value
            }
            if let value = dict["LogEventList"] as? [Any?] {
                var tmp : [GetTraceResponseBody.Spans.LogEventList] = []
                for v in value {
                    if v != nil {
                        var model = GetTraceResponseBody.Spans.LogEventList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.logEventList = tmp
            }
            if let value = dict["OperationName"] as? String {
                self.operationName = value
            }
            if let value = dict["ParentSpanId"] as? String {
                self.parentSpanId = value
            }
            if let value = dict["ResultCode"] as? String {
                self.resultCode = value
            }
            if let value = dict["RpcId"] as? String {
                self.rpcId = value
            }
            if let value = dict["RpcType"] as? Int32 {
                self.rpcType = value
            }
            if let value = dict["ServiceIp"] as? String {
                self.serviceIp = value
            }
            if let value = dict["ServiceName"] as? String {
                self.serviceName = value
            }
            if let value = dict["SpanId"] as? String {
                self.spanId = value
            }
            if let value = dict["TagEntryList"] as? [Any?] {
                var tmp : [GetTraceResponseBody.Spans.TagEntryList] = []
                for v in value {
                    if v != nil {
                        var model = GetTraceResponseBody.Spans.TagEntryList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.tagEntryList = tmp
            }
            if let value = dict["Timestamp"] as? Int64 {
                self.timestamp = value
            }
            if let value = dict["TraceID"] as? String {
                self.traceID = value
            }
        }
    }
    public var requestId: String?

    public var spans: [GetTraceResponseBody.Spans]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.spans != nil {
            var tmp : [Any] = []
            for k in self.spans! {
                tmp.append(k.toMap())
            }
            map["Spans"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Spans"] as? [Any?] {
            var tmp : [GetTraceResponseBody.Spans] = []
            for v in value {
                if v != nil {
                    var model = GetTraceResponseBody.Spans()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.spans = tmp
        }
    }
}

public class GetTraceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetTraceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetTraceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetTraceAppRequest : Tea.TeaModel {
    public class Tags : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var pid: String?

    public var regionId: String?

    public var tags: [GetTraceAppRequest.Tags]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pid != nil {
            map["Pid"] = self.pid!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.tags != nil {
            var tmp : [Any] = []
            for k in self.tags! {
                tmp.append(k.toMap())
            }
            map["Tags"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Pid"] as? String {
            self.pid = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Tags"] as? [Any?] {
            var tmp : [GetTraceAppRequest.Tags] = []
            for v in value {
                if v != nil {
                    var model = GetTraceAppRequest.Tags()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tags = tmp
        }
    }
}

public class GetTraceAppResponseBody : Tea.TeaModel {
    public class TraceApp : Tea.TeaModel {
        public class Tags : Tea.TeaModel {
            public var key: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.key != nil {
                    map["Key"] = self.key!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Key"] as? String {
                    self.key = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public var appId: Int64?

        public var appName: String?

        public var clusterId: String?

        public var createTime: Int64?

        public var labels: [String]?

        public var language: String?

        public var pid: String?

        public var regionId: String?

        public var resourceGroupId: String?

        public var show: Bool?

        public var source: String?

        public var tags: [GetTraceAppResponseBody.TraceApp.Tags]?

        public var type: String?

        public var updateTime: Int64?

        public var userId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.appId != nil {
                map["AppId"] = self.appId!
            }
            if self.appName != nil {
                map["AppName"] = self.appName!
            }
            if self.clusterId != nil {
                map["ClusterId"] = self.clusterId!
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.labels != nil {
                map["Labels"] = self.labels!
            }
            if self.language != nil {
                map["Language"] = self.language!
            }
            if self.pid != nil {
                map["Pid"] = self.pid!
            }
            if self.regionId != nil {
                map["RegionId"] = self.regionId!
            }
            if self.resourceGroupId != nil {
                map["ResourceGroupId"] = self.resourceGroupId!
            }
            if self.show != nil {
                map["Show"] = self.show!
            }
            if self.source != nil {
                map["Source"] = self.source!
            }
            if self.tags != nil {
                var tmp : [Any] = []
                for k in self.tags! {
                    tmp.append(k.toMap())
                }
                map["Tags"] = tmp
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            if self.updateTime != nil {
                map["UpdateTime"] = self.updateTime!
            }
            if self.userId != nil {
                map["UserId"] = self.userId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AppId"] as? Int64 {
                self.appId = value
            }
            if let value = dict["AppName"] as? String {
                self.appName = value
            }
            if let value = dict["ClusterId"] as? String {
                self.clusterId = value
            }
            if let value = dict["CreateTime"] as? Int64 {
                self.createTime = value
            }
            if let value = dict["Labels"] as? [String] {
                self.labels = value
            }
            if let value = dict["Language"] as? String {
                self.language = value
            }
            if let value = dict["Pid"] as? String {
                self.pid = value
            }
            if let value = dict["RegionId"] as? String {
                self.regionId = value
            }
            if let value = dict["ResourceGroupId"] as? String {
                self.resourceGroupId = value
            }
            if let value = dict["Show"] as? Bool {
                self.show = value
            }
            if let value = dict["Source"] as? String {
                self.source = value
            }
            if let value = dict["Tags"] as? [Any?] {
                var tmp : [GetTraceAppResponseBody.TraceApp.Tags] = []
                for v in value {
                    if v != nil {
                        var model = GetTraceAppResponseBody.TraceApp.Tags()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.tags = tmp
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
            if let value = dict["UpdateTime"] as? Int64 {
                self.updateTime = value
            }
            if let value = dict["UserId"] as? String {
                self.userId = value
            }
        }
    }
    public var requestId: String?

    public var traceApp: GetTraceAppResponseBody.TraceApp?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.traceApp?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.traceApp != nil {
            map["TraceApp"] = self.traceApp?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TraceApp"] as? [String: Any?] {
            var model = GetTraceAppResponseBody.TraceApp()
            model.fromMap(value)
            self.traceApp = model
        }
    }
}

public class GetTraceAppResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetTraceAppResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetTraceAppResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetTraceAppConfigRequest : Tea.TeaModel {
    public var pid: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pid != nil {
            map["Pid"] = self.pid!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Pid"] as? String {
            self.pid = value
        }
    }
}

public class GetTraceAppConfigResponseBody : Tea.TeaModel {
    public var code: Int64?

    public var data: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int64 {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetTraceAppConfigResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetTraceAppConfigResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetTraceAppConfigResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ImportAppAlertRulesRequest : Tea.TeaModel {
    public class Tags : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var contactGroupIds: String?

    public var isAutoStart: Bool?

    public var pids: String?

    public var regionId: String?

    public var tags: [ImportAppAlertRulesRequest.Tags]?

    public var templageAlertConfig: String?

    public var templateAlertId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.contactGroupIds != nil {
            map["ContactGroupIds"] = self.contactGroupIds!
        }
        if self.isAutoStart != nil {
            map["IsAutoStart"] = self.isAutoStart!
        }
        if self.pids != nil {
            map["Pids"] = self.pids!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.tags != nil {
            var tmp : [Any] = []
            for k in self.tags! {
                tmp.append(k.toMap())
            }
            map["Tags"] = tmp
        }
        if self.templageAlertConfig != nil {
            map["TemplageAlertConfig"] = self.templageAlertConfig!
        }
        if self.templateAlertId != nil {
            map["TemplateAlertId"] = self.templateAlertId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ContactGroupIds"] as? String {
            self.contactGroupIds = value
        }
        if let value = dict["IsAutoStart"] as? Bool {
            self.isAutoStart = value
        }
        if let value = dict["Pids"] as? String {
            self.pids = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Tags"] as? [Any?] {
            var tmp : [ImportAppAlertRulesRequest.Tags] = []
            for v in value {
                if v != nil {
                    var model = ImportAppAlertRulesRequest.Tags()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tags = tmp
        }
        if let value = dict["TemplageAlertConfig"] as? String {
            self.templageAlertConfig = value
        }
        if let value = dict["TemplateAlertId"] as? String {
            self.templateAlertId = value
        }
    }
}

public class ImportAppAlertRulesResponseBody : Tea.TeaModel {
    public var data: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ImportAppAlertRulesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ImportAppAlertRulesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ImportAppAlertRulesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class InitEnvironmentRequest : Tea.TeaModel {
    public var aliyunLang: String?

    public var createAuthToken: Bool?

    public var environmentId: String?

    public var managedType: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.aliyunLang != nil {
            map["AliyunLang"] = self.aliyunLang!
        }
        if self.createAuthToken != nil {
            map["CreateAuthToken"] = self.createAuthToken!
        }
        if self.environmentId != nil {
            map["EnvironmentId"] = self.environmentId!
        }
        if self.managedType != nil {
            map["ManagedType"] = self.managedType!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AliyunLang"] as? String {
            self.aliyunLang = value
        }
        if let value = dict["CreateAuthToken"] as? Bool {
            self.createAuthToken = value
        }
        if let value = dict["EnvironmentId"] as? String {
            self.environmentId = value
        }
        if let value = dict["ManagedType"] as? String {
            self.managedType = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class InitEnvironmentResponseBody : Tea.TeaModel {
    public var code: Int32?

    public var data: String?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class InitEnvironmentResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: InitEnvironmentResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = InitEnvironmentResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class InstallAddonRequest : Tea.TeaModel {
    public var addonVersion: String?

    public var aliyunLang: String?

    public var dryRun: Bool?

    public var environmentId: String?

    public var name: String?

    public var regionId: String?

    public var releaseName: String?

    public var values: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.addonVersion != nil {
            map["AddonVersion"] = self.addonVersion!
        }
        if self.aliyunLang != nil {
            map["AliyunLang"] = self.aliyunLang!
        }
        if self.dryRun != nil {
            map["DryRun"] = self.dryRun!
        }
        if self.environmentId != nil {
            map["EnvironmentId"] = self.environmentId!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.releaseName != nil {
            map["ReleaseName"] = self.releaseName!
        }
        if self.values != nil {
            map["Values"] = self.values!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AddonVersion"] as? String {
            self.addonVersion = value
        }
        if let value = dict["AliyunLang"] as? String {
            self.aliyunLang = value
        }
        if let value = dict["DryRun"] as? Bool {
            self.dryRun = value
        }
        if let value = dict["EnvironmentId"] as? String {
            self.environmentId = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ReleaseName"] as? String {
            self.releaseName = value
        }
        if let value = dict["Values"] as? String {
            self.values = value
        }
    }
}

public class InstallAddonResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Conditions : Tea.TeaModel {
            public var firstTransitionTime: String?

            public var lastTransitionTime: String?

            public var message: String?

            public var reason: String?

            public var status: String?

            public var type: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.firstTransitionTime != nil {
                    map["FirstTransitionTime"] = self.firstTransitionTime!
                }
                if self.lastTransitionTime != nil {
                    map["LastTransitionTime"] = self.lastTransitionTime!
                }
                if self.message != nil {
                    map["Message"] = self.message!
                }
                if self.reason != nil {
                    map["Reason"] = self.reason!
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["FirstTransitionTime"] as? String {
                    self.firstTransitionTime = value
                }
                if let value = dict["LastTransitionTime"] as? String {
                    self.lastTransitionTime = value
                }
                if let value = dict["Message"] as? String {
                    self.message = value
                }
                if let value = dict["Reason"] as? String {
                    self.reason = value
                }
                if let value = dict["Status"] as? String {
                    self.status = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
            }
        }
        public var addonName: String?

        public var alertRuleCount: Int64?

        public var conditions: [InstallAddonResponseBody.Data.Conditions]?

        public var createTime: String?

        public var dashboardCount: Int64?

        public var environmentId: String?

        public var exporterCount: Int64?

        public var haveConfig: Bool?

        public var installUserId: String?

        public var language: String?

        public var managed: Bool?

        public var regionId: String?

        public var releaseId: String?

        public var releaseName: String?

        public var scene: String?

        public var status: String?

        public var updateTime: String?

        public var userId: String?

        public var version: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.addonName != nil {
                map["AddonName"] = self.addonName!
            }
            if self.alertRuleCount != nil {
                map["AlertRuleCount"] = self.alertRuleCount!
            }
            if self.conditions != nil {
                var tmp : [Any] = []
                for k in self.conditions! {
                    tmp.append(k.toMap())
                }
                map["Conditions"] = tmp
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.dashboardCount != nil {
                map["DashboardCount"] = self.dashboardCount!
            }
            if self.environmentId != nil {
                map["EnvironmentId"] = self.environmentId!
            }
            if self.exporterCount != nil {
                map["ExporterCount"] = self.exporterCount!
            }
            if self.haveConfig != nil {
                map["HaveConfig"] = self.haveConfig!
            }
            if self.installUserId != nil {
                map["InstallUserId"] = self.installUserId!
            }
            if self.language != nil {
                map["Language"] = self.language!
            }
            if self.managed != nil {
                map["Managed"] = self.managed!
            }
            if self.regionId != nil {
                map["RegionId"] = self.regionId!
            }
            if self.releaseId != nil {
                map["ReleaseId"] = self.releaseId!
            }
            if self.releaseName != nil {
                map["ReleaseName"] = self.releaseName!
            }
            if self.scene != nil {
                map["Scene"] = self.scene!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.updateTime != nil {
                map["UpdateTime"] = self.updateTime!
            }
            if self.userId != nil {
                map["UserId"] = self.userId!
            }
            if self.version != nil {
                map["Version"] = self.version!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AddonName"] as? String {
                self.addonName = value
            }
            if let value = dict["AlertRuleCount"] as? Int64 {
                self.alertRuleCount = value
            }
            if let value = dict["Conditions"] as? [Any?] {
                var tmp : [InstallAddonResponseBody.Data.Conditions] = []
                for v in value {
                    if v != nil {
                        var model = InstallAddonResponseBody.Data.Conditions()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.conditions = tmp
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["DashboardCount"] as? Int64 {
                self.dashboardCount = value
            }
            if let value = dict["EnvironmentId"] as? String {
                self.environmentId = value
            }
            if let value = dict["ExporterCount"] as? Int64 {
                self.exporterCount = value
            }
            if let value = dict["HaveConfig"] as? Bool {
                self.haveConfig = value
            }
            if let value = dict["InstallUserId"] as? String {
                self.installUserId = value
            }
            if let value = dict["Language"] as? String {
                self.language = value
            }
            if let value = dict["Managed"] as? Bool {
                self.managed = value
            }
            if let value = dict["RegionId"] as? String {
                self.regionId = value
            }
            if let value = dict["ReleaseId"] as? String {
                self.releaseId = value
            }
            if let value = dict["ReleaseName"] as? String {
                self.releaseName = value
            }
            if let value = dict["Scene"] as? String {
                self.scene = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["UpdateTime"] as? String {
                self.updateTime = value
            }
            if let value = dict["UserId"] as? String {
                self.userId = value
            }
            if let value = dict["Version"] as? String {
                self.version = value
            }
        }
    }
    public var code: Int32?

    public var data: InstallAddonResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = InstallAddonResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class InstallAddonResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: InstallAddonResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = InstallAddonResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class InstallCmsExporterRequest : Tea.TeaModel {
    public var clusterId: String?

    public var cmsArgs: String?

    public var directArgs: String?

    public var enableTag: Bool?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.cmsArgs != nil {
            map["CmsArgs"] = self.cmsArgs!
        }
        if self.directArgs != nil {
            map["DirectArgs"] = self.directArgs!
        }
        if self.enableTag != nil {
            map["EnableTag"] = self.enableTag!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClusterId"] as? String {
            self.clusterId = value
        }
        if let value = dict["CmsArgs"] as? String {
            self.cmsArgs = value
        }
        if let value = dict["DirectArgs"] as? String {
            self.directArgs = value
        }
        if let value = dict["EnableTag"] as? Bool {
            self.enableTag = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class InstallCmsExporterResponseBody : Tea.TeaModel {
    public var data: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class InstallCmsExporterResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: InstallCmsExporterResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = InstallCmsExporterResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class InstallEnvironmentFeatureRequest : Tea.TeaModel {
    public var aliyunLang: String?

    public var config: String?

    public var environmentId: String?

    public var featureName: String?

    public var featureVersion: String?

    public var region: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.aliyunLang != nil {
            map["AliyunLang"] = self.aliyunLang!
        }
        if self.config != nil {
            map["Config"] = self.config!
        }
        if self.environmentId != nil {
            map["EnvironmentId"] = self.environmentId!
        }
        if self.featureName != nil {
            map["FeatureName"] = self.featureName!
        }
        if self.featureVersion != nil {
            map["FeatureVersion"] = self.featureVersion!
        }
        if self.region != nil {
            map["Region"] = self.region!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AliyunLang"] as? String {
            self.aliyunLang = value
        }
        if let value = dict["Config"] as? String {
            self.config = value
        }
        if let value = dict["EnvironmentId"] as? String {
            self.environmentId = value
        }
        if let value = dict["FeatureName"] as? String {
            self.featureName = value
        }
        if let value = dict["FeatureVersion"] as? String {
            self.featureVersion = value
        }
        if let value = dict["Region"] as? String {
            self.region = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class InstallEnvironmentFeatureResponseBody : Tea.TeaModel {
    public var code: Int32?

    public var data: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class InstallEnvironmentFeatureResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: InstallEnvironmentFeatureResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = InstallEnvironmentFeatureResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class InstallManagedPrometheusRequest : Tea.TeaModel {
    public var clusterId: String?

    public var clusterName: String?

    public var clusterType: String?

    public var grafanaInstanceId: String?

    public var kubeConfig: String?

    public var regionId: String?

    public var resourceGroupId: String?

    public var securityGroupId: String?

    public var vSwitchId: String?

    public var vcExtraInfo: String?

    public var vpcId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.clusterName != nil {
            map["ClusterName"] = self.clusterName!
        }
        if self.clusterType != nil {
            map["ClusterType"] = self.clusterType!
        }
        if self.grafanaInstanceId != nil {
            map["GrafanaInstanceId"] = self.grafanaInstanceId!
        }
        if self.kubeConfig != nil {
            map["KubeConfig"] = self.kubeConfig!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceGroupId != nil {
            map["ResourceGroupId"] = self.resourceGroupId!
        }
        if self.securityGroupId != nil {
            map["SecurityGroupId"] = self.securityGroupId!
        }
        if self.vSwitchId != nil {
            map["VSwitchId"] = self.vSwitchId!
        }
        if self.vcExtraInfo != nil {
            map["VcExtraInfo"] = self.vcExtraInfo!
        }
        if self.vpcId != nil {
            map["VpcId"] = self.vpcId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClusterId"] as? String {
            self.clusterId = value
        }
        if let value = dict["ClusterName"] as? String {
            self.clusterName = value
        }
        if let value = dict["ClusterType"] as? String {
            self.clusterType = value
        }
        if let value = dict["GrafanaInstanceId"] as? String {
            self.grafanaInstanceId = value
        }
        if let value = dict["KubeConfig"] as? String {
            self.kubeConfig = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceGroupId"] as? String {
            self.resourceGroupId = value
        }
        if let value = dict["SecurityGroupId"] as? String {
            self.securityGroupId = value
        }
        if let value = dict["VSwitchId"] as? String {
            self.vSwitchId = value
        }
        if let value = dict["VcExtraInfo"] as? String {
            self.vcExtraInfo = value
        }
        if let value = dict["VpcId"] as? String {
            self.vpcId = value
        }
    }
}

public class InstallManagedPrometheusResponseBody : Tea.TeaModel {
    public var code: Int32?

    public var data: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class InstallManagedPrometheusResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: InstallManagedPrometheusResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = InstallManagedPrometheusResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListActivatedAlertsRequest : Tea.TeaModel {
    public var currentPage: Int32?

    public var filter: String?

    public var pageSize: Int32?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.currentPage != nil {
            map["CurrentPage"] = self.currentPage!
        }
        if self.filter != nil {
            map["Filter"] = self.filter!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CurrentPage"] as? Int32 {
            self.currentPage = value
        }
        if let value = dict["Filter"] as? String {
            self.filter = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class ListActivatedAlertsResponseBody : Tea.TeaModel {
    public class Page : Tea.TeaModel {
        public class Alerts : Tea.TeaModel {
            public class DispatchRules : Tea.TeaModel {
                public var ruleId: Int32?

                public var ruleName: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.ruleId != nil {
                        map["RuleId"] = self.ruleId!
                    }
                    if self.ruleName != nil {
                        map["RuleName"] = self.ruleName!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["RuleId"] as? Int32 {
                        self.ruleId = value
                    }
                    if let value = dict["RuleName"] as? String {
                        self.ruleName = value
                    }
                }
            }
            public var alertId: String?

            public var alertName: String?

            public var alertType: String?

            public var count: Int32?

            public var createTime: Int64?

            public var dispatchRules: [ListActivatedAlertsResponseBody.Page.Alerts.DispatchRules]?

            public var endsAt: Int64?

            public var expandFields: [String: Any]?

            public var integrationName: String?

            public var integrationType: String?

            public var involvedObjectKind: String?

            public var involvedObjectName: String?

            public var message: String?

            public var severity: String?

            public var startsAt: Int64?

            public var status: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.alertId != nil {
                    map["AlertId"] = self.alertId!
                }
                if self.alertName != nil {
                    map["AlertName"] = self.alertName!
                }
                if self.alertType != nil {
                    map["AlertType"] = self.alertType!
                }
                if self.count != nil {
                    map["Count"] = self.count!
                }
                if self.createTime != nil {
                    map["CreateTime"] = self.createTime!
                }
                if self.dispatchRules != nil {
                    var tmp : [Any] = []
                    for k in self.dispatchRules! {
                        tmp.append(k.toMap())
                    }
                    map["DispatchRules"] = tmp
                }
                if self.endsAt != nil {
                    map["EndsAt"] = self.endsAt!
                }
                if self.expandFields != nil {
                    map["ExpandFields"] = self.expandFields!
                }
                if self.integrationName != nil {
                    map["IntegrationName"] = self.integrationName!
                }
                if self.integrationType != nil {
                    map["IntegrationType"] = self.integrationType!
                }
                if self.involvedObjectKind != nil {
                    map["InvolvedObjectKind"] = self.involvedObjectKind!
                }
                if self.involvedObjectName != nil {
                    map["InvolvedObjectName"] = self.involvedObjectName!
                }
                if self.message != nil {
                    map["Message"] = self.message!
                }
                if self.severity != nil {
                    map["Severity"] = self.severity!
                }
                if self.startsAt != nil {
                    map["StartsAt"] = self.startsAt!
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AlertId"] as? String {
                    self.alertId = value
                }
                if let value = dict["AlertName"] as? String {
                    self.alertName = value
                }
                if let value = dict["AlertType"] as? String {
                    self.alertType = value
                }
                if let value = dict["Count"] as? Int32 {
                    self.count = value
                }
                if let value = dict["CreateTime"] as? Int64 {
                    self.createTime = value
                }
                if let value = dict["DispatchRules"] as? [Any?] {
                    var tmp : [ListActivatedAlertsResponseBody.Page.Alerts.DispatchRules] = []
                    for v in value {
                        if v != nil {
                            var model = ListActivatedAlertsResponseBody.Page.Alerts.DispatchRules()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.dispatchRules = tmp
                }
                if let value = dict["EndsAt"] as? Int64 {
                    self.endsAt = value
                }
                if let value = dict["ExpandFields"] as? [String: Any] {
                    self.expandFields = value
                }
                if let value = dict["IntegrationName"] as? String {
                    self.integrationName = value
                }
                if let value = dict["IntegrationType"] as? String {
                    self.integrationType = value
                }
                if let value = dict["InvolvedObjectKind"] as? String {
                    self.involvedObjectKind = value
                }
                if let value = dict["InvolvedObjectName"] as? String {
                    self.involvedObjectName = value
                }
                if let value = dict["Message"] as? String {
                    self.message = value
                }
                if let value = dict["Severity"] as? String {
                    self.severity = value
                }
                if let value = dict["StartsAt"] as? Int64 {
                    self.startsAt = value
                }
                if let value = dict["Status"] as? String {
                    self.status = value
                }
            }
        }
        public var alerts: [ListActivatedAlertsResponseBody.Page.Alerts]?

        public var page: Int32?

        public var pageSize: Int32?

        public var total: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.alerts != nil {
                var tmp : [Any] = []
                for k in self.alerts! {
                    tmp.append(k.toMap())
                }
                map["Alerts"] = tmp
            }
            if self.page != nil {
                map["Page"] = self.page!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.total != nil {
                map["Total"] = self.total!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Alerts"] as? [Any?] {
                var tmp : [ListActivatedAlertsResponseBody.Page.Alerts] = []
                for v in value {
                    if v != nil {
                        var model = ListActivatedAlertsResponseBody.Page.Alerts()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.alerts = tmp
            }
            if let value = dict["Page"] as? Int32 {
                self.page = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
            if let value = dict["Total"] as? Int32 {
                self.total = value
            }
        }
    }
    public var message: String?

    public var page: ListActivatedAlertsResponseBody.Page?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.page?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.page != nil {
            map["Page"] = self.page?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Page"] as? [String: Any?] {
            var model = ListActivatedAlertsResponseBody.Page()
            model.fromMap(value)
            self.page = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListActivatedAlertsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListActivatedAlertsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListActivatedAlertsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListAddonReleasesRequest : Tea.TeaModel {
    public var addonName: String?

    public var environmentId: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.addonName != nil {
            map["AddonName"] = self.addonName!
        }
        if self.environmentId != nil {
            map["EnvironmentId"] = self.environmentId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AddonName"] as? String {
            self.addonName = value
        }
        if let value = dict["EnvironmentId"] as? String {
            self.environmentId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class ListAddonReleasesResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Releases : Tea.TeaModel {
            public class Conditions : Tea.TeaModel {
                public var firstTransitionTime: String?

                public var lastTransitionTime: String?

                public var message: String?

                public var reason: String?

                public var status: String?

                public var type: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.firstTransitionTime != nil {
                        map["FirstTransitionTime"] = self.firstTransitionTime!
                    }
                    if self.lastTransitionTime != nil {
                        map["LastTransitionTime"] = self.lastTransitionTime!
                    }
                    if self.message != nil {
                        map["Message"] = self.message!
                    }
                    if self.reason != nil {
                        map["Reason"] = self.reason!
                    }
                    if self.status != nil {
                        map["Status"] = self.status!
                    }
                    if self.type != nil {
                        map["Type"] = self.type!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["FirstTransitionTime"] as? String {
                        self.firstTransitionTime = value
                    }
                    if let value = dict["LastTransitionTime"] as? String {
                        self.lastTransitionTime = value
                    }
                    if let value = dict["Message"] as? String {
                        self.message = value
                    }
                    if let value = dict["Reason"] as? String {
                        self.reason = value
                    }
                    if let value = dict["Status"] as? String {
                        self.status = value
                    }
                    if let value = dict["Type"] as? String {
                        self.type = value
                    }
                }
            }
            public var addonName: String?

            public var alertRuleCount: Int64?

            public var conditions: [ListAddonReleasesResponseBody.Data.Releases.Conditions]?

            public var config: String?

            public var createTime: String?

            public var dashboardCount: Int64?

            public var environmentId: String?

            public var exporterCount: Int64?

            public var haveConfig: Bool?

            public var installUserId: String?

            public var language: String?

            public var managed: Bool?

            public var nextVersion: String?

            public var regionId: String?

            public var releaseId: String?

            public var releaseName: String?

            public var scene: String?

            public var status: String?

            public var updateTime: String?

            public var userId: String?

            public var version: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.addonName != nil {
                    map["AddonName"] = self.addonName!
                }
                if self.alertRuleCount != nil {
                    map["AlertRuleCount"] = self.alertRuleCount!
                }
                if self.conditions != nil {
                    var tmp : [Any] = []
                    for k in self.conditions! {
                        tmp.append(k.toMap())
                    }
                    map["Conditions"] = tmp
                }
                if self.config != nil {
                    map["Config"] = self.config!
                }
                if self.createTime != nil {
                    map["CreateTime"] = self.createTime!
                }
                if self.dashboardCount != nil {
                    map["DashboardCount"] = self.dashboardCount!
                }
                if self.environmentId != nil {
                    map["EnvironmentId"] = self.environmentId!
                }
                if self.exporterCount != nil {
                    map["ExporterCount"] = self.exporterCount!
                }
                if self.haveConfig != nil {
                    map["HaveConfig"] = self.haveConfig!
                }
                if self.installUserId != nil {
                    map["InstallUserId"] = self.installUserId!
                }
                if self.language != nil {
                    map["Language"] = self.language!
                }
                if self.managed != nil {
                    map["Managed"] = self.managed!
                }
                if self.nextVersion != nil {
                    map["NextVersion"] = self.nextVersion!
                }
                if self.regionId != nil {
                    map["RegionId"] = self.regionId!
                }
                if self.releaseId != nil {
                    map["ReleaseId"] = self.releaseId!
                }
                if self.releaseName != nil {
                    map["ReleaseName"] = self.releaseName!
                }
                if self.scene != nil {
                    map["Scene"] = self.scene!
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                if self.updateTime != nil {
                    map["UpdateTime"] = self.updateTime!
                }
                if self.userId != nil {
                    map["UserId"] = self.userId!
                }
                if self.version != nil {
                    map["Version"] = self.version!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AddonName"] as? String {
                    self.addonName = value
                }
                if let value = dict["AlertRuleCount"] as? Int64 {
                    self.alertRuleCount = value
                }
                if let value = dict["Conditions"] as? [Any?] {
                    var tmp : [ListAddonReleasesResponseBody.Data.Releases.Conditions] = []
                    for v in value {
                        if v != nil {
                            var model = ListAddonReleasesResponseBody.Data.Releases.Conditions()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.conditions = tmp
                }
                if let value = dict["Config"] as? String {
                    self.config = value
                }
                if let value = dict["CreateTime"] as? String {
                    self.createTime = value
                }
                if let value = dict["DashboardCount"] as? Int64 {
                    self.dashboardCount = value
                }
                if let value = dict["EnvironmentId"] as? String {
                    self.environmentId = value
                }
                if let value = dict["ExporterCount"] as? Int64 {
                    self.exporterCount = value
                }
                if let value = dict["HaveConfig"] as? Bool {
                    self.haveConfig = value
                }
                if let value = dict["InstallUserId"] as? String {
                    self.installUserId = value
                }
                if let value = dict["Language"] as? String {
                    self.language = value
                }
                if let value = dict["Managed"] as? Bool {
                    self.managed = value
                }
                if let value = dict["NextVersion"] as? String {
                    self.nextVersion = value
                }
                if let value = dict["RegionId"] as? String {
                    self.regionId = value
                }
                if let value = dict["ReleaseId"] as? String {
                    self.releaseId = value
                }
                if let value = dict["ReleaseName"] as? String {
                    self.releaseName = value
                }
                if let value = dict["Scene"] as? String {
                    self.scene = value
                }
                if let value = dict["Status"] as? String {
                    self.status = value
                }
                if let value = dict["UpdateTime"] as? String {
                    self.updateTime = value
                }
                if let value = dict["UserId"] as? String {
                    self.userId = value
                }
                if let value = dict["Version"] as? String {
                    self.version = value
                }
            }
        }
        public var releases: [ListAddonReleasesResponseBody.Data.Releases]?

        public var total: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.releases != nil {
                var tmp : [Any] = []
                for k in self.releases! {
                    tmp.append(k.toMap())
                }
                map["Releases"] = tmp
            }
            if self.total != nil {
                map["Total"] = self.total!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Releases"] as? [Any?] {
                var tmp : [ListAddonReleasesResponseBody.Data.Releases] = []
                for v in value {
                    if v != nil {
                        var model = ListAddonReleasesResponseBody.Data.Releases()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.releases = tmp
            }
            if let value = dict["Total"] as? Int64 {
                self.total = value
            }
        }
    }
    public var code: Int32?

    public var data: ListAddonReleasesResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ListAddonReleasesResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ListAddonReleasesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListAddonReleasesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListAddonReleasesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListAddonsRequest : Tea.TeaModel {
    public var aliyunLang: String?

    public var category: String?

    public var regexp: Bool?

    public var regionId: String?

    public var search: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.aliyunLang != nil {
            map["AliyunLang"] = self.aliyunLang!
        }
        if self.category != nil {
            map["Category"] = self.category!
        }
        if self.regexp != nil {
            map["Regexp"] = self.regexp!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.search != nil {
            map["Search"] = self.search!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AliyunLang"] as? String {
            self.aliyunLang = value
        }
        if let value = dict["Category"] as? String {
            self.category = value
        }
        if let value = dict["Regexp"] as? Bool {
            self.regexp = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Search"] as? String {
            self.search = value
        }
    }
}

public class ListAddonsResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Dashboards : Tea.TeaModel {
            public var description_: String?

            public var name: String?

            public var url: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.url != nil {
                    map["Url"] = self.url!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["Url"] as? String {
                    self.url = value
                }
            }
        }
        public class Environments : Tea.TeaModel {
            public class Dependencies : Tea.TeaModel {
                public var clusterTypes: [String]?

                public var features: [String: Bool]?

                public var services: [String]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.clusterTypes != nil {
                        map["ClusterTypes"] = self.clusterTypes!
                    }
                    if self.features != nil {
                        map["Features"] = self.features!
                    }
                    if self.services != nil {
                        map["Services"] = self.services!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["ClusterTypes"] as? [String] {
                        self.clusterTypes = value
                    }
                    if let value = dict["Features"] as? [String: Bool] {
                        self.features = value
                    }
                    if let value = dict["Services"] as? [String] {
                        self.services = value
                    }
                }
            }
            public class Policies : Tea.TeaModel {
                public class MetricCheckRule : Tea.TeaModel {
                    public var promQL: [String]?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.promQL != nil {
                            map["PromQL"] = self.promQL!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["PromQL"] as? [String] {
                            self.promQL = value
                        }
                    }
                }
                public class Protocols : Tea.TeaModel {
                    public var description_: String?

                    public var icon: String?

                    public var label: String?

                    public var name: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.description_ != nil {
                            map["Description"] = self.description_!
                        }
                        if self.icon != nil {
                            map["Icon"] = self.icon!
                        }
                        if self.label != nil {
                            map["Label"] = self.label!
                        }
                        if self.name != nil {
                            map["Name"] = self.name!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Description"] as? String {
                            self.description_ = value
                        }
                        if let value = dict["Icon"] as? String {
                            self.icon = value
                        }
                        if let value = dict["Label"] as? String {
                            self.label = value
                        }
                        if let value = dict["Name"] as? String {
                            self.name = value
                        }
                    }
                }
                public var alertDefaultStatus: String?

                public var defaultInstall: Bool?

                public var enableServiceAccount: Bool?

                public var metricCheckRule: ListAddonsResponseBody.Data.Environments.Policies.MetricCheckRule?

                public var needRestartAfterIntegration: Bool?

                public var protocols: [ListAddonsResponseBody.Data.Environments.Policies.Protocols]?

                public var targetAddonName: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.metricCheckRule?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.alertDefaultStatus != nil {
                        map["AlertDefaultStatus"] = self.alertDefaultStatus!
                    }
                    if self.defaultInstall != nil {
                        map["DefaultInstall"] = self.defaultInstall!
                    }
                    if self.enableServiceAccount != nil {
                        map["EnableServiceAccount"] = self.enableServiceAccount!
                    }
                    if self.metricCheckRule != nil {
                        map["MetricCheckRule"] = self.metricCheckRule?.toMap()
                    }
                    if self.needRestartAfterIntegration != nil {
                        map["NeedRestartAfterIntegration"] = self.needRestartAfterIntegration!
                    }
                    if self.protocols != nil {
                        var tmp : [Any] = []
                        for k in self.protocols! {
                            tmp.append(k.toMap())
                        }
                        map["Protocols"] = tmp
                    }
                    if self.targetAddonName != nil {
                        map["TargetAddonName"] = self.targetAddonName!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["AlertDefaultStatus"] as? String {
                        self.alertDefaultStatus = value
                    }
                    if let value = dict["DefaultInstall"] as? Bool {
                        self.defaultInstall = value
                    }
                    if let value = dict["EnableServiceAccount"] as? Bool {
                        self.enableServiceAccount = value
                    }
                    if let value = dict["MetricCheckRule"] as? [String: Any?] {
                        var model = ListAddonsResponseBody.Data.Environments.Policies.MetricCheckRule()
                        model.fromMap(value)
                        self.metricCheckRule = model
                    }
                    if let value = dict["NeedRestartAfterIntegration"] as? Bool {
                        self.needRestartAfterIntegration = value
                    }
                    if let value = dict["Protocols"] as? [Any?] {
                        var tmp : [ListAddonsResponseBody.Data.Environments.Policies.Protocols] = []
                        for v in value {
                            if v != nil {
                                var model = ListAddonsResponseBody.Data.Environments.Policies.Protocols()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.protocols = tmp
                    }
                    if let value = dict["TargetAddonName"] as? String {
                        self.targetAddonName = value
                    }
                }
            }
            public var dependencies: ListAddonsResponseBody.Data.Environments.Dependencies?

            public var description_: String?

            public var enable: Bool?

            public var label: String?

            public var name: String?

            public var policies: ListAddonsResponseBody.Data.Environments.Policies?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.dependencies?.validate()
                try self.policies?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.dependencies != nil {
                    map["Dependencies"] = self.dependencies?.toMap()
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.enable != nil {
                    map["Enable"] = self.enable!
                }
                if self.label != nil {
                    map["Label"] = self.label!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.policies != nil {
                    map["Policies"] = self.policies?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Dependencies"] as? [String: Any?] {
                    var model = ListAddonsResponseBody.Data.Environments.Dependencies()
                    model.fromMap(value)
                    self.dependencies = model
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["Enable"] as? Bool {
                    self.enable = value
                }
                if let value = dict["Label"] as? String {
                    self.label = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["Policies"] as? [String: Any?] {
                    var model = ListAddonsResponseBody.Data.Environments.Policies()
                    model.fromMap(value)
                    self.policies = model
                }
            }
        }
        public var alias: String?

        public var categories: [String]?

        public var dashboards: [ListAddonsResponseBody.Data.Dashboards]?

        public var description_: String?

        public var environments: [ListAddonsResponseBody.Data.Environments]?

        public var icon: String?

        public var keywords: [String]?

        public var language: String?

        public var latestReleaseCreateTime: String?

        public var name: String?

        public var once: Bool?

        public var scene: String?

        public var version: String?

        public var weight: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.alias != nil {
                map["Alias"] = self.alias!
            }
            if self.categories != nil {
                map["Categories"] = self.categories!
            }
            if self.dashboards != nil {
                var tmp : [Any] = []
                for k in self.dashboards! {
                    tmp.append(k.toMap())
                }
                map["Dashboards"] = tmp
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.environments != nil {
                var tmp : [Any] = []
                for k in self.environments! {
                    tmp.append(k.toMap())
                }
                map["Environments"] = tmp
            }
            if self.icon != nil {
                map["Icon"] = self.icon!
            }
            if self.keywords != nil {
                map["Keywords"] = self.keywords!
            }
            if self.language != nil {
                map["Language"] = self.language!
            }
            if self.latestReleaseCreateTime != nil {
                map["LatestReleaseCreateTime"] = self.latestReleaseCreateTime!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.once != nil {
                map["Once"] = self.once!
            }
            if self.scene != nil {
                map["Scene"] = self.scene!
            }
            if self.version != nil {
                map["Version"] = self.version!
            }
            if self.weight != nil {
                map["Weight"] = self.weight!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Alias"] as? String {
                self.alias = value
            }
            if let value = dict["Categories"] as? [String] {
                self.categories = value
            }
            if let value = dict["Dashboards"] as? [Any?] {
                var tmp : [ListAddonsResponseBody.Data.Dashboards] = []
                for v in value {
                    if v != nil {
                        var model = ListAddonsResponseBody.Data.Dashboards()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.dashboards = tmp
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["Environments"] as? [Any?] {
                var tmp : [ListAddonsResponseBody.Data.Environments] = []
                for v in value {
                    if v != nil {
                        var model = ListAddonsResponseBody.Data.Environments()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.environments = tmp
            }
            if let value = dict["Icon"] as? String {
                self.icon = value
            }
            if let value = dict["Keywords"] as? [String] {
                self.keywords = value
            }
            if let value = dict["Language"] as? String {
                self.language = value
            }
            if let value = dict["LatestReleaseCreateTime"] as? String {
                self.latestReleaseCreateTime = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["Once"] as? Bool {
                self.once = value
            }
            if let value = dict["Scene"] as? String {
                self.scene = value
            }
            if let value = dict["Version"] as? String {
                self.version = value
            }
            if let value = dict["Weight"] as? String {
                self.weight = value
            }
        }
    }
    public var code: Int32?

    public var data: [ListAddonsResponseBody.Data]?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [ListAddonsResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = ListAddonsResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ListAddonsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListAddonsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListAddonsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListAlertEventsRequest : Tea.TeaModel {
    public var alertName: String?

    public var endTime: String?

    public var matchingConditions: String?

    public var page: Int64?

    public var showNotificationPolicies: Bool?

    public var size: Int64?

    public var startTime: String?

    public var status: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.alertName != nil {
            map["AlertName"] = self.alertName!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.matchingConditions != nil {
            map["MatchingConditions"] = self.matchingConditions!
        }
        if self.page != nil {
            map["Page"] = self.page!
        }
        if self.showNotificationPolicies != nil {
            map["ShowNotificationPolicies"] = self.showNotificationPolicies!
        }
        if self.size != nil {
            map["Size"] = self.size!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AlertName"] as? String {
            self.alertName = value
        }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["MatchingConditions"] as? String {
            self.matchingConditions = value
        }
        if let value = dict["Page"] as? Int64 {
            self.page = value
        }
        if let value = dict["ShowNotificationPolicies"] as? Bool {
            self.showNotificationPolicies = value
        }
        if let value = dict["Size"] as? Int64 {
            self.size = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
    }
}

public class ListAlertEventsResponseBody : Tea.TeaModel {
    public class PageBean : Tea.TeaModel {
        public class Events : Tea.TeaModel {
            public class Alarms : Tea.TeaModel {
                public var alarmId: Int64?

                public var alarmName: String?

                public var createTime: String?

                public var state: Int32?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.alarmId != nil {
                        map["AlarmId"] = self.alarmId!
                    }
                    if self.alarmName != nil {
                        map["AlarmName"] = self.alarmName!
                    }
                    if self.createTime != nil {
                        map["CreateTime"] = self.createTime!
                    }
                    if self.state != nil {
                        map["State"] = self.state!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["AlarmId"] as? Int64 {
                        self.alarmId = value
                    }
                    if let value = dict["AlarmName"] as? String {
                        self.alarmName = value
                    }
                    if let value = dict["CreateTime"] as? String {
                        self.createTime = value
                    }
                    if let value = dict["State"] as? Int32 {
                        self.state = value
                    }
                }
            }
            public class NotificationPolicies : Tea.TeaModel {
                public var id: Int64?

                public var name: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.id != nil {
                        map["Id"] = self.id!
                    }
                    if self.name != nil {
                        map["Name"] = self.name!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Id"] as? Int64 {
                        self.id = value
                    }
                    if let value = dict["Name"] as? String {
                        self.name = value
                    }
                }
            }
            public var alarms: [ListAlertEventsResponseBody.PageBean.Events.Alarms]?

            public var alertName: String?

            public var annotations: String?

            public var description_: String?

            public var endTime: String?

            public var generatorURL: String?

            public var handlerName: String?

            public var integrationName: String?

            public var integrationType: String?

            public var labels: String?

            public var notificationPolicies: [ListAlertEventsResponseBody.PageBean.Events.NotificationPolicies]?

            public var receiveTime: String?

            public var severity: String?

            public var startTime: String?

            public var status: String?

            public var triggerCount: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.alarms != nil {
                    var tmp : [Any] = []
                    for k in self.alarms! {
                        tmp.append(k.toMap())
                    }
                    map["Alarms"] = tmp
                }
                if self.alertName != nil {
                    map["AlertName"] = self.alertName!
                }
                if self.annotations != nil {
                    map["Annotations"] = self.annotations!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.endTime != nil {
                    map["EndTime"] = self.endTime!
                }
                if self.generatorURL != nil {
                    map["GeneratorURL"] = self.generatorURL!
                }
                if self.handlerName != nil {
                    map["HandlerName"] = self.handlerName!
                }
                if self.integrationName != nil {
                    map["IntegrationName"] = self.integrationName!
                }
                if self.integrationType != nil {
                    map["IntegrationType"] = self.integrationType!
                }
                if self.labels != nil {
                    map["Labels"] = self.labels!
                }
                if self.notificationPolicies != nil {
                    var tmp : [Any] = []
                    for k in self.notificationPolicies! {
                        tmp.append(k.toMap())
                    }
                    map["NotificationPolicies"] = tmp
                }
                if self.receiveTime != nil {
                    map["ReceiveTime"] = self.receiveTime!
                }
                if self.severity != nil {
                    map["Severity"] = self.severity!
                }
                if self.startTime != nil {
                    map["StartTime"] = self.startTime!
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                if self.triggerCount != nil {
                    map["TriggerCount"] = self.triggerCount!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Alarms"] as? [Any?] {
                    var tmp : [ListAlertEventsResponseBody.PageBean.Events.Alarms] = []
                    for v in value {
                        if v != nil {
                            var model = ListAlertEventsResponseBody.PageBean.Events.Alarms()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.alarms = tmp
                }
                if let value = dict["AlertName"] as? String {
                    self.alertName = value
                }
                if let value = dict["Annotations"] as? String {
                    self.annotations = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["EndTime"] as? String {
                    self.endTime = value
                }
                if let value = dict["GeneratorURL"] as? String {
                    self.generatorURL = value
                }
                if let value = dict["HandlerName"] as? String {
                    self.handlerName = value
                }
                if let value = dict["IntegrationName"] as? String {
                    self.integrationName = value
                }
                if let value = dict["IntegrationType"] as? String {
                    self.integrationType = value
                }
                if let value = dict["Labels"] as? String {
                    self.labels = value
                }
                if let value = dict["NotificationPolicies"] as? [Any?] {
                    var tmp : [ListAlertEventsResponseBody.PageBean.Events.NotificationPolicies] = []
                    for v in value {
                        if v != nil {
                            var model = ListAlertEventsResponseBody.PageBean.Events.NotificationPolicies()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.notificationPolicies = tmp
                }
                if let value = dict["ReceiveTime"] as? String {
                    self.receiveTime = value
                }
                if let value = dict["Severity"] as? String {
                    self.severity = value
                }
                if let value = dict["StartTime"] as? String {
                    self.startTime = value
                }
                if let value = dict["Status"] as? String {
                    self.status = value
                }
                if let value = dict["TriggerCount"] as? Int64 {
                    self.triggerCount = value
                }
            }
        }
        public var events: [ListAlertEventsResponseBody.PageBean.Events]?

        public var page: Int64?

        public var size: Int64?

        public var total: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.events != nil {
                var tmp : [Any] = []
                for k in self.events! {
                    tmp.append(k.toMap())
                }
                map["Events"] = tmp
            }
            if self.page != nil {
                map["Page"] = self.page!
            }
            if self.size != nil {
                map["Size"] = self.size!
            }
            if self.total != nil {
                map["Total"] = self.total!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Events"] as? [Any?] {
                var tmp : [ListAlertEventsResponseBody.PageBean.Events] = []
                for v in value {
                    if v != nil {
                        var model = ListAlertEventsResponseBody.PageBean.Events()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.events = tmp
            }
            if let value = dict["Page"] as? Int64 {
                self.page = value
            }
            if let value = dict["Size"] as? Int64 {
                self.size = value
            }
            if let value = dict["Total"] as? Int64 {
                self.total = value
            }
        }
    }
    public var pageBean: ListAlertEventsResponseBody.PageBean?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.pageBean?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageBean != nil {
            map["PageBean"] = self.pageBean?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageBean"] as? [String: Any?] {
            var model = ListAlertEventsResponseBody.PageBean()
            model.fromMap(value)
            self.pageBean = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListAlertEventsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListAlertEventsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListAlertEventsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListAlertsRequest : Tea.TeaModel {
    public var alertName: String?

    public var dispatchRuleId: Int64?

    public var endTime: String?

    public var integrationType: String?

    public var owner: String?

    public var page: Int64?

    public var regionId: String?

    public var severity: String?

    public var showActivities: Bool?

    public var showEvents: Bool?

    public var size: Int64?

    public var startTime: String?

    public var state: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.alertName != nil {
            map["AlertName"] = self.alertName!
        }
        if self.dispatchRuleId != nil {
            map["DispatchRuleId"] = self.dispatchRuleId!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.integrationType != nil {
            map["IntegrationType"] = self.integrationType!
        }
        if self.owner != nil {
            map["Owner"] = self.owner!
        }
        if self.page != nil {
            map["Page"] = self.page!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.severity != nil {
            map["Severity"] = self.severity!
        }
        if self.showActivities != nil {
            map["ShowActivities"] = self.showActivities!
        }
        if self.showEvents != nil {
            map["ShowEvents"] = self.showEvents!
        }
        if self.size != nil {
            map["Size"] = self.size!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.state != nil {
            map["State"] = self.state!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AlertName"] as? String {
            self.alertName = value
        }
        if let value = dict["DispatchRuleId"] as? Int64 {
            self.dispatchRuleId = value
        }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["IntegrationType"] as? String {
            self.integrationType = value
        }
        if let value = dict["Owner"] as? String {
            self.owner = value
        }
        if let value = dict["Page"] as? Int64 {
            self.page = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Severity"] as? String {
            self.severity = value
        }
        if let value = dict["ShowActivities"] as? Bool {
            self.showActivities = value
        }
        if let value = dict["ShowEvents"] as? Bool {
            self.showEvents = value
        }
        if let value = dict["Size"] as? Int64 {
            self.size = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
        if let value = dict["State"] as? Int64 {
            self.state = value
        }
    }
}

public class ListAlertsResponseBody : Tea.TeaModel {
    public class PageBean : Tea.TeaModel {
        public class ListAlerts : Tea.TeaModel {
            public class Activities : Tea.TeaModel {
                public var content: String?

                public var description_: String?

                public var handlerName: String?

                public var time: String?

                public var type: Int64?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.content != nil {
                        map["Content"] = self.content!
                    }
                    if self.description_ != nil {
                        map["Description"] = self.description_!
                    }
                    if self.handlerName != nil {
                        map["HandlerName"] = self.handlerName!
                    }
                    if self.time != nil {
                        map["Time"] = self.time!
                    }
                    if self.type != nil {
                        map["Type"] = self.type!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Content"] as? String {
                        self.content = value
                    }
                    if let value = dict["Description"] as? String {
                        self.description_ = value
                    }
                    if let value = dict["HandlerName"] as? String {
                        self.handlerName = value
                    }
                    if let value = dict["Time"] as? String {
                        self.time = value
                    }
                    if let value = dict["Type"] as? Int64 {
                        self.type = value
                    }
                }
            }
            public class AlertEvents : Tea.TeaModel {
                public var alertName: String?

                public var annotations: String?

                public var description_: String?

                public var endTime: String?

                public var generatorURL: String?

                public var integrationName: String?

                public var integrationType: String?

                public var labels: String?

                public var receiveTime: String?

                public var severity: String?

                public var startTime: String?

                public var state: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.alertName != nil {
                        map["AlertName"] = self.alertName!
                    }
                    if self.annotations != nil {
                        map["Annotations"] = self.annotations!
                    }
                    if self.description_ != nil {
                        map["Description"] = self.description_!
                    }
                    if self.endTime != nil {
                        map["EndTime"] = self.endTime!
                    }
                    if self.generatorURL != nil {
                        map["GeneratorURL"] = self.generatorURL!
                    }
                    if self.integrationName != nil {
                        map["IntegrationName"] = self.integrationName!
                    }
                    if self.integrationType != nil {
                        map["IntegrationType"] = self.integrationType!
                    }
                    if self.labels != nil {
                        map["Labels"] = self.labels!
                    }
                    if self.receiveTime != nil {
                        map["ReceiveTime"] = self.receiveTime!
                    }
                    if self.severity != nil {
                        map["Severity"] = self.severity!
                    }
                    if self.startTime != nil {
                        map["StartTime"] = self.startTime!
                    }
                    if self.state != nil {
                        map["State"] = self.state!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["AlertName"] as? String {
                        self.alertName = value
                    }
                    if let value = dict["Annotations"] as? String {
                        self.annotations = value
                    }
                    if let value = dict["Description"] as? String {
                        self.description_ = value
                    }
                    if let value = dict["EndTime"] as? String {
                        self.endTime = value
                    }
                    if let value = dict["GeneratorURL"] as? String {
                        self.generatorURL = value
                    }
                    if let value = dict["IntegrationName"] as? String {
                        self.integrationName = value
                    }
                    if let value = dict["IntegrationType"] as? String {
                        self.integrationType = value
                    }
                    if let value = dict["Labels"] as? String {
                        self.labels = value
                    }
                    if let value = dict["ReceiveTime"] as? String {
                        self.receiveTime = value
                    }
                    if let value = dict["Severity"] as? String {
                        self.severity = value
                    }
                    if let value = dict["StartTime"] as? String {
                        self.startTime = value
                    }
                    if let value = dict["State"] as? String {
                        self.state = value
                    }
                }
            }
            public var acknowledgeTime: Int64?

            public var activities: [ListAlertsResponseBody.PageBean.ListAlerts.Activities]?

            public var alertEvents: [ListAlertsResponseBody.PageBean.ListAlerts.AlertEvents]?

            public var alertId: Int64?

            public var alertName: String?

            public var createTime: String?

            public var describe: String?

            public var dispatchRuleId: Double?

            public var dispatchRuleName: String?

            public var handler: String?

            public var notifyRobots: String?

            public var owner: String?

            public var recoverTime: Int64?

            public var severity: String?

            public var solution: String?

            public var state: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.acknowledgeTime != nil {
                    map["AcknowledgeTime"] = self.acknowledgeTime!
                }
                if self.activities != nil {
                    var tmp : [Any] = []
                    for k in self.activities! {
                        tmp.append(k.toMap())
                    }
                    map["Activities"] = tmp
                }
                if self.alertEvents != nil {
                    var tmp : [Any] = []
                    for k in self.alertEvents! {
                        tmp.append(k.toMap())
                    }
                    map["AlertEvents"] = tmp
                }
                if self.alertId != nil {
                    map["AlertId"] = self.alertId!
                }
                if self.alertName != nil {
                    map["AlertName"] = self.alertName!
                }
                if self.createTime != nil {
                    map["CreateTime"] = self.createTime!
                }
                if self.describe != nil {
                    map["Describe"] = self.describe!
                }
                if self.dispatchRuleId != nil {
                    map["DispatchRuleId"] = self.dispatchRuleId!
                }
                if self.dispatchRuleName != nil {
                    map["DispatchRuleName"] = self.dispatchRuleName!
                }
                if self.handler != nil {
                    map["Handler"] = self.handler!
                }
                if self.notifyRobots != nil {
                    map["NotifyRobots"] = self.notifyRobots!
                }
                if self.owner != nil {
                    map["Owner"] = self.owner!
                }
                if self.recoverTime != nil {
                    map["RecoverTime"] = self.recoverTime!
                }
                if self.severity != nil {
                    map["Severity"] = self.severity!
                }
                if self.solution != nil {
                    map["Solution"] = self.solution!
                }
                if self.state != nil {
                    map["State"] = self.state!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AcknowledgeTime"] as? Int64 {
                    self.acknowledgeTime = value
                }
                if let value = dict["Activities"] as? [Any?] {
                    var tmp : [ListAlertsResponseBody.PageBean.ListAlerts.Activities] = []
                    for v in value {
                        if v != nil {
                            var model = ListAlertsResponseBody.PageBean.ListAlerts.Activities()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.activities = tmp
                }
                if let value = dict["AlertEvents"] as? [Any?] {
                    var tmp : [ListAlertsResponseBody.PageBean.ListAlerts.AlertEvents] = []
                    for v in value {
                        if v != nil {
                            var model = ListAlertsResponseBody.PageBean.ListAlerts.AlertEvents()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.alertEvents = tmp
                }
                if let value = dict["AlertId"] as? Int64 {
                    self.alertId = value
                }
                if let value = dict["AlertName"] as? String {
                    self.alertName = value
                }
                if let value = dict["CreateTime"] as? String {
                    self.createTime = value
                }
                if let value = dict["Describe"] as? String {
                    self.describe = value
                }
                if let value = dict["DispatchRuleId"] as? Double {
                    self.dispatchRuleId = value
                }
                if let value = dict["DispatchRuleName"] as? String {
                    self.dispatchRuleName = value
                }
                if let value = dict["Handler"] as? String {
                    self.handler = value
                }
                if let value = dict["NotifyRobots"] as? String {
                    self.notifyRobots = value
                }
                if let value = dict["Owner"] as? String {
                    self.owner = value
                }
                if let value = dict["RecoverTime"] as? Int64 {
                    self.recoverTime = value
                }
                if let value = dict["Severity"] as? String {
                    self.severity = value
                }
                if let value = dict["Solution"] as? String {
                    self.solution = value
                }
                if let value = dict["State"] as? Int64 {
                    self.state = value
                }
            }
        }
        public var listAlerts: [ListAlertsResponseBody.PageBean.ListAlerts]?

        public var page: Int64?

        public var size: Int64?

        public var total: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.listAlerts != nil {
                var tmp : [Any] = []
                for k in self.listAlerts! {
                    tmp.append(k.toMap())
                }
                map["ListAlerts"] = tmp
            }
            if self.page != nil {
                map["Page"] = self.page!
            }
            if self.size != nil {
                map["Size"] = self.size!
            }
            if self.total != nil {
                map["Total"] = self.total!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ListAlerts"] as? [Any?] {
                var tmp : [ListAlertsResponseBody.PageBean.ListAlerts] = []
                for v in value {
                    if v != nil {
                        var model = ListAlertsResponseBody.PageBean.ListAlerts()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.listAlerts = tmp
            }
            if let value = dict["Page"] as? Int64 {
                self.page = value
            }
            if let value = dict["Size"] as? Int64 {
                self.size = value
            }
            if let value = dict["Total"] as? Int64 {
                self.total = value
            }
        }
    }
    public var message: String?

    public var pageBean: ListAlertsResponseBody.PageBean?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.pageBean?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.pageBean != nil {
            map["PageBean"] = self.pageBean?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["PageBean"] as? [String: Any?] {
            var model = ListAlertsResponseBody.PageBean()
            model.fromMap(value)
            self.pageBean = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListAlertsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListAlertsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListAlertsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListClusterFromGrafanaRequest : Tea.TeaModel {
    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class ListClusterFromGrafanaResponseBody : Tea.TeaModel {
    public class PromClusterList : Tea.TeaModel {
        public var agentStatus: String?

        public var clusterId: String?

        public var clusterName: String?

        public var clusterType: String?

        public var controllerId: String?

        public var createTime: Int64?

        public var extra: String?

        public var id: Int64?

        public var installTime: Int64?

        public var isControllerInstalled: Bool?

        public var lastHeartBeatTime: Int64?

        public var nodeNum: Int32?

        public var options: String?

        public var pluginsJsonArray: String?

        public var regionId: String?

        public var stateJson: String?

        public var updateTime: Int64?

        public var userId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.agentStatus != nil {
                map["AgentStatus"] = self.agentStatus!
            }
            if self.clusterId != nil {
                map["ClusterId"] = self.clusterId!
            }
            if self.clusterName != nil {
                map["ClusterName"] = self.clusterName!
            }
            if self.clusterType != nil {
                map["ClusterType"] = self.clusterType!
            }
            if self.controllerId != nil {
                map["ControllerId"] = self.controllerId!
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.extra != nil {
                map["Extra"] = self.extra!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.installTime != nil {
                map["InstallTime"] = self.installTime!
            }
            if self.isControllerInstalled != nil {
                map["IsControllerInstalled"] = self.isControllerInstalled!
            }
            if self.lastHeartBeatTime != nil {
                map["LastHeartBeatTime"] = self.lastHeartBeatTime!
            }
            if self.nodeNum != nil {
                map["NodeNum"] = self.nodeNum!
            }
            if self.options != nil {
                map["Options"] = self.options!
            }
            if self.pluginsJsonArray != nil {
                map["PluginsJsonArray"] = self.pluginsJsonArray!
            }
            if self.regionId != nil {
                map["RegionId"] = self.regionId!
            }
            if self.stateJson != nil {
                map["StateJson"] = self.stateJson!
            }
            if self.updateTime != nil {
                map["UpdateTime"] = self.updateTime!
            }
            if self.userId != nil {
                map["UserId"] = self.userId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AgentStatus"] as? String {
                self.agentStatus = value
            }
            if let value = dict["ClusterId"] as? String {
                self.clusterId = value
            }
            if let value = dict["ClusterName"] as? String {
                self.clusterName = value
            }
            if let value = dict["ClusterType"] as? String {
                self.clusterType = value
            }
            if let value = dict["ControllerId"] as? String {
                self.controllerId = value
            }
            if let value = dict["CreateTime"] as? Int64 {
                self.createTime = value
            }
            if let value = dict["Extra"] as? String {
                self.extra = value
            }
            if let value = dict["Id"] as? Int64 {
                self.id = value
            }
            if let value = dict["InstallTime"] as? Int64 {
                self.installTime = value
            }
            if let value = dict["IsControllerInstalled"] as? Bool {
                self.isControllerInstalled = value
            }
            if let value = dict["LastHeartBeatTime"] as? Int64 {
                self.lastHeartBeatTime = value
            }
            if let value = dict["NodeNum"] as? Int32 {
                self.nodeNum = value
            }
            if let value = dict["Options"] as? String {
                self.options = value
            }
            if let value = dict["PluginsJsonArray"] as? String {
                self.pluginsJsonArray = value
            }
            if let value = dict["RegionId"] as? String {
                self.regionId = value
            }
            if let value = dict["StateJson"] as? String {
                self.stateJson = value
            }
            if let value = dict["UpdateTime"] as? Int64 {
                self.updateTime = value
            }
            if let value = dict["UserId"] as? String {
                self.userId = value
            }
        }
    }
    public var promClusterList: [ListClusterFromGrafanaResponseBody.PromClusterList]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.promClusterList != nil {
            var tmp : [Any] = []
            for k in self.promClusterList! {
                tmp.append(k.toMap())
            }
            map["PromClusterList"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PromClusterList"] as? [Any?] {
            var tmp : [ListClusterFromGrafanaResponseBody.PromClusterList] = []
            for v in value {
                if v != nil {
                    var model = ListClusterFromGrafanaResponseBody.PromClusterList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.promClusterList = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListClusterFromGrafanaResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListClusterFromGrafanaResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListClusterFromGrafanaResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListCmsInstancesRequest : Tea.TeaModel {
    public var clusterId: String?

    public var regionId: String?

    public var typeFilter: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.typeFilter != nil {
            map["TypeFilter"] = self.typeFilter!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClusterId"] as? String {
            self.clusterId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["TypeFilter"] as? String {
            self.typeFilter = value
        }
    }
}

public class ListCmsInstancesResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Products : Tea.TeaModel {
            public var descr: String?

            public var id: String?

            public var instance: String?

            public var name: String?

            public var prod: String?

            public var source: String?

            public var state: String?

            public var time: String?

            public var type: String?

            public var url: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.descr != nil {
                    map["Descr"] = self.descr!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.instance != nil {
                    map["Instance"] = self.instance!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.prod != nil {
                    map["Prod"] = self.prod!
                }
                if self.source != nil {
                    map["Source"] = self.source!
                }
                if self.state != nil {
                    map["State"] = self.state!
                }
                if self.time != nil {
                    map["Time"] = self.time!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                if self.url != nil {
                    map["Url"] = self.url!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Descr"] as? String {
                    self.descr = value
                }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
                if let value = dict["Instance"] as? String {
                    self.instance = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["Prod"] as? String {
                    self.prod = value
                }
                if let value = dict["Source"] as? String {
                    self.source = value
                }
                if let value = dict["State"] as? String {
                    self.state = value
                }
                if let value = dict["Time"] as? String {
                    self.time = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
                if let value = dict["Url"] as? String {
                    self.url = value
                }
            }
        }
        public var enableTag: Bool?

        public var products: [ListCmsInstancesResponseBody.Data.Products]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.enableTag != nil {
                map["EnableTag"] = self.enableTag!
            }
            if self.products != nil {
                var tmp : [Any] = []
                for k in self.products! {
                    tmp.append(k.toMap())
                }
                map["Products"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["EnableTag"] as? Bool {
                self.enableTag = value
            }
            if let value = dict["Products"] as? [Any?] {
                var tmp : [ListCmsInstancesResponseBody.Data.Products] = []
                for v in value {
                    if v != nil {
                        var model = ListCmsInstancesResponseBody.Data.Products()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.products = tmp
            }
        }
    }
    public var data: ListCmsInstancesResponseBody.Data?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ListCmsInstancesResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListCmsInstancesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListCmsInstancesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListCmsInstancesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListDashboardsRequest : Tea.TeaModel {
    public var clusterId: String?

    public var clusterType: String?

    public var dashboardName: String?

    public var language: String?

    public var product: String?

    public var recreateSwitch: Bool?

    public var regionId: String?

    public var title: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.clusterType != nil {
            map["ClusterType"] = self.clusterType!
        }
        if self.dashboardName != nil {
            map["DashboardName"] = self.dashboardName!
        }
        if self.language != nil {
            map["Language"] = self.language!
        }
        if self.product != nil {
            map["Product"] = self.product!
        }
        if self.recreateSwitch != nil {
            map["RecreateSwitch"] = self.recreateSwitch!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.title != nil {
            map["Title"] = self.title!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClusterId"] as? String {
            self.clusterId = value
        }
        if let value = dict["ClusterType"] as? String {
            self.clusterType = value
        }
        if let value = dict["DashboardName"] as? String {
            self.dashboardName = value
        }
        if let value = dict["Language"] as? String {
            self.language = value
        }
        if let value = dict["Product"] as? String {
            self.product = value
        }
        if let value = dict["RecreateSwitch"] as? Bool {
            self.recreateSwitch = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Title"] as? String {
            self.title = value
        }
    }
}

public class ListDashboardsResponseBody : Tea.TeaModel {
    public class DashboardVos : Tea.TeaModel {
        public class I18nChild : Tea.TeaModel {
            public var dashboardType: String?

            public var exporter: String?

            public var httpUrl: String?

            public var httpsUrl: String?

            public var id: String?

            public var isArmsExporter: Bool?

            public var kind: String?

            public var language: String?

            public var name: String?

            public var needUpdate: Bool?

            public var tags: [String]?

            public var time: String?

            public var title: String?

            public var type: String?

            public var uid: String?

            public var url: String?

            public var version: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.dashboardType != nil {
                    map["DashboardType"] = self.dashboardType!
                }
                if self.exporter != nil {
                    map["Exporter"] = self.exporter!
                }
                if self.httpUrl != nil {
                    map["HttpUrl"] = self.httpUrl!
                }
                if self.httpsUrl != nil {
                    map["HttpsUrl"] = self.httpsUrl!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.isArmsExporter != nil {
                    map["IsArmsExporter"] = self.isArmsExporter!
                }
                if self.kind != nil {
                    map["Kind"] = self.kind!
                }
                if self.language != nil {
                    map["Language"] = self.language!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.needUpdate != nil {
                    map["NeedUpdate"] = self.needUpdate!
                }
                if self.tags != nil {
                    map["Tags"] = self.tags!
                }
                if self.time != nil {
                    map["Time"] = self.time!
                }
                if self.title != nil {
                    map["Title"] = self.title!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                if self.uid != nil {
                    map["Uid"] = self.uid!
                }
                if self.url != nil {
                    map["Url"] = self.url!
                }
                if self.version != nil {
                    map["Version"] = self.version!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["DashboardType"] as? String {
                    self.dashboardType = value
                }
                if let value = dict["Exporter"] as? String {
                    self.exporter = value
                }
                if let value = dict["HttpUrl"] as? String {
                    self.httpUrl = value
                }
                if let value = dict["HttpsUrl"] as? String {
                    self.httpsUrl = value
                }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
                if let value = dict["IsArmsExporter"] as? Bool {
                    self.isArmsExporter = value
                }
                if let value = dict["Kind"] as? String {
                    self.kind = value
                }
                if let value = dict["Language"] as? String {
                    self.language = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["NeedUpdate"] as? Bool {
                    self.needUpdate = value
                }
                if let value = dict["Tags"] as? [String] {
                    self.tags = value
                }
                if let value = dict["Time"] as? String {
                    self.time = value
                }
                if let value = dict["Title"] as? String {
                    self.title = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
                if let value = dict["Uid"] as? String {
                    self.uid = value
                }
                if let value = dict["Url"] as? String {
                    self.url = value
                }
                if let value = dict["Version"] as? String {
                    self.version = value
                }
            }
        }
        public var dashboardType: String?

        public var exporter: String?

        public var httpUrl: String?

        public var httpsUrl: String?

        public var i18nChild: ListDashboardsResponseBody.DashboardVos.I18nChild?

        public var id: String?

        public var isArmsExporter: Bool?

        public var kind: String?

        public var language: String?

        public var name: String?

        public var needUpdate: Bool?

        public var tags: [String]?

        public var time: String?

        public var title: String?

        public var type: String?

        public var uid: String?

        public var url: String?

        public var version: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.i18nChild?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.dashboardType != nil {
                map["DashboardType"] = self.dashboardType!
            }
            if self.exporter != nil {
                map["Exporter"] = self.exporter!
            }
            if self.httpUrl != nil {
                map["HttpUrl"] = self.httpUrl!
            }
            if self.httpsUrl != nil {
                map["HttpsUrl"] = self.httpsUrl!
            }
            if self.i18nChild != nil {
                map["I18nChild"] = self.i18nChild?.toMap()
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.isArmsExporter != nil {
                map["IsArmsExporter"] = self.isArmsExporter!
            }
            if self.kind != nil {
                map["Kind"] = self.kind!
            }
            if self.language != nil {
                map["Language"] = self.language!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.needUpdate != nil {
                map["NeedUpdate"] = self.needUpdate!
            }
            if self.tags != nil {
                map["Tags"] = self.tags!
            }
            if self.time != nil {
                map["Time"] = self.time!
            }
            if self.title != nil {
                map["Title"] = self.title!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            if self.uid != nil {
                map["Uid"] = self.uid!
            }
            if self.url != nil {
                map["Url"] = self.url!
            }
            if self.version != nil {
                map["Version"] = self.version!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DashboardType"] as? String {
                self.dashboardType = value
            }
            if let value = dict["Exporter"] as? String {
                self.exporter = value
            }
            if let value = dict["HttpUrl"] as? String {
                self.httpUrl = value
            }
            if let value = dict["HttpsUrl"] as? String {
                self.httpsUrl = value
            }
            if let value = dict["I18nChild"] as? [String: Any?] {
                var model = ListDashboardsResponseBody.DashboardVos.I18nChild()
                model.fromMap(value)
                self.i18nChild = model
            }
            if let value = dict["Id"] as? String {
                self.id = value
            }
            if let value = dict["IsArmsExporter"] as? Bool {
                self.isArmsExporter = value
            }
            if let value = dict["Kind"] as? String {
                self.kind = value
            }
            if let value = dict["Language"] as? String {
                self.language = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["NeedUpdate"] as? Bool {
                self.needUpdate = value
            }
            if let value = dict["Tags"] as? [String] {
                self.tags = value
            }
            if let value = dict["Time"] as? String {
                self.time = value
            }
            if let value = dict["Title"] as? String {
                self.title = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
            if let value = dict["Uid"] as? String {
                self.uid = value
            }
            if let value = dict["Url"] as? String {
                self.url = value
            }
            if let value = dict["Version"] as? String {
                self.version = value
            }
        }
    }
    public var dashboardVos: [ListDashboardsResponseBody.DashboardVos]?

    public var environmentId: String?

    public var grafanaServiceOpened: String?

    public var prometheusServiceOpened: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dashboardVos != nil {
            var tmp : [Any] = []
            for k in self.dashboardVos! {
                tmp.append(k.toMap())
            }
            map["DashboardVos"] = tmp
        }
        if self.environmentId != nil {
            map["EnvironmentId"] = self.environmentId!
        }
        if self.grafanaServiceOpened != nil {
            map["GrafanaServiceOpened"] = self.grafanaServiceOpened!
        }
        if self.prometheusServiceOpened != nil {
            map["PrometheusServiceOpened"] = self.prometheusServiceOpened!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DashboardVos"] as? [Any?] {
            var tmp : [ListDashboardsResponseBody.DashboardVos] = []
            for v in value {
                if v != nil {
                    var model = ListDashboardsResponseBody.DashboardVos()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.dashboardVos = tmp
        }
        if let value = dict["EnvironmentId"] as? String {
            self.environmentId = value
        }
        if let value = dict["GrafanaServiceOpened"] as? String {
            self.grafanaServiceOpened = value
        }
        if let value = dict["PrometheusServiceOpened"] as? String {
            self.prometheusServiceOpened = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListDashboardsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListDashboardsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListDashboardsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListDashboardsByNameRequest : Tea.TeaModel {
    public var clusterId: String?

    public var clusterType: String?

    public var dashBoardName: String?

    public var dashBoardVersion: String?

    public var dataSourceType: String?

    public var groupName: String?

    public var onlyQuery: Bool?

    public var productCode: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.clusterType != nil {
            map["ClusterType"] = self.clusterType!
        }
        if self.dashBoardName != nil {
            map["DashBoardName"] = self.dashBoardName!
        }
        if self.dashBoardVersion != nil {
            map["DashBoardVersion"] = self.dashBoardVersion!
        }
        if self.dataSourceType != nil {
            map["DataSourceType"] = self.dataSourceType!
        }
        if self.groupName != nil {
            map["GroupName"] = self.groupName!
        }
        if self.onlyQuery != nil {
            map["OnlyQuery"] = self.onlyQuery!
        }
        if self.productCode != nil {
            map["ProductCode"] = self.productCode!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClusterId"] as? String {
            self.clusterId = value
        }
        if let value = dict["ClusterType"] as? String {
            self.clusterType = value
        }
        if let value = dict["DashBoardName"] as? String {
            self.dashBoardName = value
        }
        if let value = dict["DashBoardVersion"] as? String {
            self.dashBoardVersion = value
        }
        if let value = dict["DataSourceType"] as? String {
            self.dataSourceType = value
        }
        if let value = dict["GroupName"] as? String {
            self.groupName = value
        }
        if let value = dict["OnlyQuery"] as? Bool {
            self.onlyQuery = value
        }
        if let value = dict["ProductCode"] as? String {
            self.productCode = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class ListDashboardsByNameResponseBody : Tea.TeaModel {
    public var code: Int32?

    public var data: String?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListDashboardsByNameResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListDashboardsByNameResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListDashboardsByNameResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListDispatchRuleRequest : Tea.TeaModel {
    public var name: String?

    public var regionId: String?

    public var system: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.system != nil {
            map["System"] = self.system!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["System"] as? Bool {
            self.system = value
        }
    }
}

public class ListDispatchRuleResponseBody : Tea.TeaModel {
    public class DispatchRules : Tea.TeaModel {
        public var name: String?

        public var ruleId: Int64?

        public var state: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.ruleId != nil {
                map["RuleId"] = self.ruleId!
            }
            if self.state != nil {
                map["State"] = self.state!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["RuleId"] as? Int64 {
                self.ruleId = value
            }
            if let value = dict["State"] as? String {
                self.state = value
            }
        }
    }
    public var dispatchRules: [ListDispatchRuleResponseBody.DispatchRules]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dispatchRules != nil {
            var tmp : [Any] = []
            for k in self.dispatchRules! {
                tmp.append(k.toMap())
            }
            map["DispatchRules"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DispatchRules"] as? [Any?] {
            var tmp : [ListDispatchRuleResponseBody.DispatchRules] = []
            for v in value {
                if v != nil {
                    var model = ListDispatchRuleResponseBody.DispatchRules()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.dispatchRules = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListDispatchRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListDispatchRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListDispatchRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListEnvCustomJobsRequest : Tea.TeaModel {
    public var encryptYaml: Bool?

    public var environmentId: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.encryptYaml != nil {
            map["EncryptYaml"] = self.encryptYaml!
        }
        if self.environmentId != nil {
            map["EnvironmentId"] = self.environmentId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EncryptYaml"] as? Bool {
            self.encryptYaml = value
        }
        if let value = dict["EnvironmentId"] as? String {
            self.environmentId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class ListEnvCustomJobsResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class ScrapeConfigs : Tea.TeaModel {
            public var jobName: String?

            public var metricsPath: String?

            public var scrapeDiscoverys: [String]?

            public var scrapeInterval: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.jobName != nil {
                    map["JobName"] = self.jobName!
                }
                if self.metricsPath != nil {
                    map["MetricsPath"] = self.metricsPath!
                }
                if self.scrapeDiscoverys != nil {
                    map["ScrapeDiscoverys"] = self.scrapeDiscoverys!
                }
                if self.scrapeInterval != nil {
                    map["ScrapeInterval"] = self.scrapeInterval!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["JobName"] as? String {
                    self.jobName = value
                }
                if let value = dict["MetricsPath"] as? String {
                    self.metricsPath = value
                }
                if let value = dict["ScrapeDiscoverys"] as? [String] {
                    self.scrapeDiscoverys = value
                }
                if let value = dict["ScrapeInterval"] as? String {
                    self.scrapeInterval = value
                }
            }
        }
        public var addonName: String?

        public var addonReleaseName: String?

        public var addonVersion: String?

        public var configYaml: String?

        public var creationTimestamp: String?

        public var customJobName: String?

        public var environmentId: String?

        public var regionId: String?

        public var scrapeConfigs: [ListEnvCustomJobsResponseBody.Data.ScrapeConfigs]?

        public var status: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.addonName != nil {
                map["AddonName"] = self.addonName!
            }
            if self.addonReleaseName != nil {
                map["AddonReleaseName"] = self.addonReleaseName!
            }
            if self.addonVersion != nil {
                map["AddonVersion"] = self.addonVersion!
            }
            if self.configYaml != nil {
                map["ConfigYaml"] = self.configYaml!
            }
            if self.creationTimestamp != nil {
                map["CreationTimestamp"] = self.creationTimestamp!
            }
            if self.customJobName != nil {
                map["CustomJobName"] = self.customJobName!
            }
            if self.environmentId != nil {
                map["EnvironmentId"] = self.environmentId!
            }
            if self.regionId != nil {
                map["RegionId"] = self.regionId!
            }
            if self.scrapeConfigs != nil {
                var tmp : [Any] = []
                for k in self.scrapeConfigs! {
                    tmp.append(k.toMap())
                }
                map["ScrapeConfigs"] = tmp
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AddonName"] as? String {
                self.addonName = value
            }
            if let value = dict["AddonReleaseName"] as? String {
                self.addonReleaseName = value
            }
            if let value = dict["AddonVersion"] as? String {
                self.addonVersion = value
            }
            if let value = dict["ConfigYaml"] as? String {
                self.configYaml = value
            }
            if let value = dict["CreationTimestamp"] as? String {
                self.creationTimestamp = value
            }
            if let value = dict["CustomJobName"] as? String {
                self.customJobName = value
            }
            if let value = dict["EnvironmentId"] as? String {
                self.environmentId = value
            }
            if let value = dict["RegionId"] as? String {
                self.regionId = value
            }
            if let value = dict["ScrapeConfigs"] as? [Any?] {
                var tmp : [ListEnvCustomJobsResponseBody.Data.ScrapeConfigs] = []
                for v in value {
                    if v != nil {
                        var model = ListEnvCustomJobsResponseBody.Data.ScrapeConfigs()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.scrapeConfigs = tmp
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
        }
    }
    public var code: Int32?

    public var data: [ListEnvCustomJobsResponseBody.Data]?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [ListEnvCustomJobsResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = ListEnvCustomJobsResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListEnvCustomJobsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListEnvCustomJobsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListEnvCustomJobsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListEnvPodMonitorsRequest : Tea.TeaModel {
    public var environmentId: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.environmentId != nil {
            map["EnvironmentId"] = self.environmentId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EnvironmentId"] as? String {
            self.environmentId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class ListEnvPodMonitorsResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Endpoints : Tea.TeaModel {
            public var interval: String?

            public var matchedTargetCount: Int32?

            public var path: String?

            public var port: String?

            public var targetPort: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.interval != nil {
                    map["Interval"] = self.interval!
                }
                if self.matchedTargetCount != nil {
                    map["MatchedTargetCount"] = self.matchedTargetCount!
                }
                if self.path != nil {
                    map["Path"] = self.path!
                }
                if self.port != nil {
                    map["Port"] = self.port!
                }
                if self.targetPort != nil {
                    map["TargetPort"] = self.targetPort!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Interval"] as? String {
                    self.interval = value
                }
                if let value = dict["MatchedTargetCount"] as? Int32 {
                    self.matchedTargetCount = value
                }
                if let value = dict["Path"] as? String {
                    self.path = value
                }
                if let value = dict["Port"] as? String {
                    self.port = value
                }
                if let value = dict["TargetPort"] as? Int32 {
                    self.targetPort = value
                }
            }
        }
        public var addonName: String?

        public var addonReleaseName: String?

        public var addonVersion: String?

        public var configYaml: String?

        public var creationTimestamp: String?

        public var endpoints: [ListEnvPodMonitorsResponseBody.Data.Endpoints]?

        public var environmentId: String?

        public var namespace: String?

        public var podMonitorName: String?

        public var regionId: String?

        public var status: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.addonName != nil {
                map["AddonName"] = self.addonName!
            }
            if self.addonReleaseName != nil {
                map["AddonReleaseName"] = self.addonReleaseName!
            }
            if self.addonVersion != nil {
                map["AddonVersion"] = self.addonVersion!
            }
            if self.configYaml != nil {
                map["ConfigYaml"] = self.configYaml!
            }
            if self.creationTimestamp != nil {
                map["CreationTimestamp"] = self.creationTimestamp!
            }
            if self.endpoints != nil {
                var tmp : [Any] = []
                for k in self.endpoints! {
                    tmp.append(k.toMap())
                }
                map["Endpoints"] = tmp
            }
            if self.environmentId != nil {
                map["EnvironmentId"] = self.environmentId!
            }
            if self.namespace != nil {
                map["Namespace"] = self.namespace!
            }
            if self.podMonitorName != nil {
                map["PodMonitorName"] = self.podMonitorName!
            }
            if self.regionId != nil {
                map["RegionId"] = self.regionId!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AddonName"] as? String {
                self.addonName = value
            }
            if let value = dict["AddonReleaseName"] as? String {
                self.addonReleaseName = value
            }
            if let value = dict["AddonVersion"] as? String {
                self.addonVersion = value
            }
            if let value = dict["ConfigYaml"] as? String {
                self.configYaml = value
            }
            if let value = dict["CreationTimestamp"] as? String {
                self.creationTimestamp = value
            }
            if let value = dict["Endpoints"] as? [Any?] {
                var tmp : [ListEnvPodMonitorsResponseBody.Data.Endpoints] = []
                for v in value {
                    if v != nil {
                        var model = ListEnvPodMonitorsResponseBody.Data.Endpoints()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.endpoints = tmp
            }
            if let value = dict["EnvironmentId"] as? String {
                self.environmentId = value
            }
            if let value = dict["Namespace"] as? String {
                self.namespace = value
            }
            if let value = dict["PodMonitorName"] as? String {
                self.podMonitorName = value
            }
            if let value = dict["RegionId"] as? String {
                self.regionId = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
        }
    }
    public var code: Int32?

    public var data: [ListEnvPodMonitorsResponseBody.Data]?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [ListEnvPodMonitorsResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = ListEnvPodMonitorsResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListEnvPodMonitorsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListEnvPodMonitorsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListEnvPodMonitorsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListEnvServiceMonitorsRequest : Tea.TeaModel {
    public var environmentId: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.environmentId != nil {
            map["EnvironmentId"] = self.environmentId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EnvironmentId"] as? String {
            self.environmentId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class ListEnvServiceMonitorsResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Endpoints : Tea.TeaModel {
            public var interval: String?

            public var matchedTargetCount: Int32?

            public var path: String?

            public var port: String?

            public var targetPort: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.interval != nil {
                    map["Interval"] = self.interval!
                }
                if self.matchedTargetCount != nil {
                    map["MatchedTargetCount"] = self.matchedTargetCount!
                }
                if self.path != nil {
                    map["Path"] = self.path!
                }
                if self.port != nil {
                    map["Port"] = self.port!
                }
                if self.targetPort != nil {
                    map["TargetPort"] = self.targetPort!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Interval"] as? String {
                    self.interval = value
                }
                if let value = dict["MatchedTargetCount"] as? Int32 {
                    self.matchedTargetCount = value
                }
                if let value = dict["Path"] as? String {
                    self.path = value
                }
                if let value = dict["Port"] as? String {
                    self.port = value
                }
                if let value = dict["TargetPort"] as? Int32 {
                    self.targetPort = value
                }
            }
        }
        public var addonName: String?

        public var addonReleaseName: String?

        public var addonVersion: String?

        public var configYaml: String?

        public var creationTimestamp: String?

        public var endpoints: [ListEnvServiceMonitorsResponseBody.Data.Endpoints]?

        public var environmentId: String?

        public var matchedServiceCount: Int32?

        public var namespace: String?

        public var regionId: String?

        public var serviceMonitorName: String?

        public var status: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.addonName != nil {
                map["AddonName"] = self.addonName!
            }
            if self.addonReleaseName != nil {
                map["AddonReleaseName"] = self.addonReleaseName!
            }
            if self.addonVersion != nil {
                map["AddonVersion"] = self.addonVersion!
            }
            if self.configYaml != nil {
                map["ConfigYaml"] = self.configYaml!
            }
            if self.creationTimestamp != nil {
                map["CreationTimestamp"] = self.creationTimestamp!
            }
            if self.endpoints != nil {
                var tmp : [Any] = []
                for k in self.endpoints! {
                    tmp.append(k.toMap())
                }
                map["Endpoints"] = tmp
            }
            if self.environmentId != nil {
                map["EnvironmentId"] = self.environmentId!
            }
            if self.matchedServiceCount != nil {
                map["MatchedServiceCount"] = self.matchedServiceCount!
            }
            if self.namespace != nil {
                map["Namespace"] = self.namespace!
            }
            if self.regionId != nil {
                map["RegionId"] = self.regionId!
            }
            if self.serviceMonitorName != nil {
                map["ServiceMonitorName"] = self.serviceMonitorName!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AddonName"] as? String {
                self.addonName = value
            }
            if let value = dict["AddonReleaseName"] as? String {
                self.addonReleaseName = value
            }
            if let value = dict["AddonVersion"] as? String {
                self.addonVersion = value
            }
            if let value = dict["ConfigYaml"] as? String {
                self.configYaml = value
            }
            if let value = dict["CreationTimestamp"] as? String {
                self.creationTimestamp = value
            }
            if let value = dict["Endpoints"] as? [Any?] {
                var tmp : [ListEnvServiceMonitorsResponseBody.Data.Endpoints] = []
                for v in value {
                    if v != nil {
                        var model = ListEnvServiceMonitorsResponseBody.Data.Endpoints()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.endpoints = tmp
            }
            if let value = dict["EnvironmentId"] as? String {
                self.environmentId = value
            }
            if let value = dict["MatchedServiceCount"] as? Int32 {
                self.matchedServiceCount = value
            }
            if let value = dict["Namespace"] as? String {
                self.namespace = value
            }
            if let value = dict["RegionId"] as? String {
                self.regionId = value
            }
            if let value = dict["ServiceMonitorName"] as? String {
                self.serviceMonitorName = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
        }
    }
    public var code: Int32?

    public var data: [ListEnvServiceMonitorsResponseBody.Data]?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [ListEnvServiceMonitorsResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = ListEnvServiceMonitorsResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListEnvServiceMonitorsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListEnvServiceMonitorsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListEnvServiceMonitorsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListEnvironmentAddonsRequest : Tea.TeaModel {
    public var environmentId: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.environmentId != nil {
            map["EnvironmentId"] = self.environmentId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EnvironmentId"] as? String {
            self.environmentId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class ListEnvironmentAddonsResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Addons : Tea.TeaModel {
            public class Dashboards : Tea.TeaModel {
                public var description_: String?

                public var name: String?

                public var url: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.description_ != nil {
                        map["Description"] = self.description_!
                    }
                    if self.name != nil {
                        map["Name"] = self.name!
                    }
                    if self.url != nil {
                        map["Url"] = self.url!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Description"] as? String {
                        self.description_ = value
                    }
                    if let value = dict["Name"] as? String {
                        self.name = value
                    }
                    if let value = dict["Url"] as? String {
                        self.url = value
                    }
                }
            }
            public class Environments : Tea.TeaModel {
                public class Dependencies : Tea.TeaModel {
                    public var clusterTypes: [String]?

                    public var features: [String: Bool]?

                    public var services: [String]?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.clusterTypes != nil {
                            map["ClusterTypes"] = self.clusterTypes!
                        }
                        if self.features != nil {
                            map["Features"] = self.features!
                        }
                        if self.services != nil {
                            map["Services"] = self.services!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["ClusterTypes"] as? [String] {
                            self.clusterTypes = value
                        }
                        if let value = dict["Features"] as? [String: Bool] {
                            self.features = value
                        }
                        if let value = dict["Services"] as? [String] {
                            self.services = value
                        }
                    }
                }
                public class Policies : Tea.TeaModel {
                    public class MetricCheckRule : Tea.TeaModel {
                        public var promQL: [String]?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.promQL != nil {
                                map["PromQL"] = self.promQL!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["PromQL"] as? [String] {
                                self.promQL = value
                            }
                        }
                    }
                    public class Protocols : Tea.TeaModel {
                        public var description_: String?

                        public var icon: String?

                        public var label: String?

                        public var name: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.description_ != nil {
                                map["Description"] = self.description_!
                            }
                            if self.icon != nil {
                                map["Icon"] = self.icon!
                            }
                            if self.label != nil {
                                map["Label"] = self.label!
                            }
                            if self.name != nil {
                                map["Name"] = self.name!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Description"] as? String {
                                self.description_ = value
                            }
                            if let value = dict["Icon"] as? String {
                                self.icon = value
                            }
                            if let value = dict["Label"] as? String {
                                self.label = value
                            }
                            if let value = dict["Name"] as? String {
                                self.name = value
                            }
                        }
                    }
                    public var alertDefaultStatus: String?

                    public var defaultInstall: Bool?

                    public var enableServiceAccount: Bool?

                    public var metricCheckRule: ListEnvironmentAddonsResponseBody.Data.Addons.Environments.Policies.MetricCheckRule?

                    public var needRestartAfterIntegration: Bool?

                    public var protocols: [ListEnvironmentAddonsResponseBody.Data.Addons.Environments.Policies.Protocols]?

                    public var targetAddonName: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                        try self.metricCheckRule?.validate()
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.alertDefaultStatus != nil {
                            map["AlertDefaultStatus"] = self.alertDefaultStatus!
                        }
                        if self.defaultInstall != nil {
                            map["DefaultInstall"] = self.defaultInstall!
                        }
                        if self.enableServiceAccount != nil {
                            map["EnableServiceAccount"] = self.enableServiceAccount!
                        }
                        if self.metricCheckRule != nil {
                            map["MetricCheckRule"] = self.metricCheckRule?.toMap()
                        }
                        if self.needRestartAfterIntegration != nil {
                            map["NeedRestartAfterIntegration"] = self.needRestartAfterIntegration!
                        }
                        if self.protocols != nil {
                            var tmp : [Any] = []
                            for k in self.protocols! {
                                tmp.append(k.toMap())
                            }
                            map["Protocols"] = tmp
                        }
                        if self.targetAddonName != nil {
                            map["TargetAddonName"] = self.targetAddonName!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["AlertDefaultStatus"] as? String {
                            self.alertDefaultStatus = value
                        }
                        if let value = dict["DefaultInstall"] as? Bool {
                            self.defaultInstall = value
                        }
                        if let value = dict["EnableServiceAccount"] as? Bool {
                            self.enableServiceAccount = value
                        }
                        if let value = dict["MetricCheckRule"] as? [String: Any?] {
                            var model = ListEnvironmentAddonsResponseBody.Data.Addons.Environments.Policies.MetricCheckRule()
                            model.fromMap(value)
                            self.metricCheckRule = model
                        }
                        if let value = dict["NeedRestartAfterIntegration"] as? Bool {
                            self.needRestartAfterIntegration = value
                        }
                        if let value = dict["Protocols"] as? [Any?] {
                            var tmp : [ListEnvironmentAddonsResponseBody.Data.Addons.Environments.Policies.Protocols] = []
                            for v in value {
                                if v != nil {
                                    var model = ListEnvironmentAddonsResponseBody.Data.Addons.Environments.Policies.Protocols()
                                    if v != nil {
                                        model.fromMap(v as? [String: Any?])
                                    }
                                    tmp.append(model)
                                }
                            }
                            self.protocols = tmp
                        }
                        if let value = dict["TargetAddonName"] as? String {
                            self.targetAddonName = value
                        }
                    }
                }
                public var dependencies: ListEnvironmentAddonsResponseBody.Data.Addons.Environments.Dependencies?

                public var description_: String?

                public var enable: Bool?

                public var label: String?

                public var name: String?

                public var policies: ListEnvironmentAddonsResponseBody.Data.Addons.Environments.Policies?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.dependencies?.validate()
                    try self.policies?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.dependencies != nil {
                        map["Dependencies"] = self.dependencies?.toMap()
                    }
                    if self.description_ != nil {
                        map["Description"] = self.description_!
                    }
                    if self.enable != nil {
                        map["Enable"] = self.enable!
                    }
                    if self.label != nil {
                        map["Label"] = self.label!
                    }
                    if self.name != nil {
                        map["Name"] = self.name!
                    }
                    if self.policies != nil {
                        map["Policies"] = self.policies?.toMap()
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Dependencies"] as? [String: Any?] {
                        var model = ListEnvironmentAddonsResponseBody.Data.Addons.Environments.Dependencies()
                        model.fromMap(value)
                        self.dependencies = model
                    }
                    if let value = dict["Description"] as? String {
                        self.description_ = value
                    }
                    if let value = dict["Enable"] as? Bool {
                        self.enable = value
                    }
                    if let value = dict["Label"] as? String {
                        self.label = value
                    }
                    if let value = dict["Name"] as? String {
                        self.name = value
                    }
                    if let value = dict["Policies"] as? [String: Any?] {
                        var model = ListEnvironmentAddonsResponseBody.Data.Addons.Environments.Policies()
                        model.fromMap(value)
                        self.policies = model
                    }
                }
            }
            public var alias: String?

            public var categories: [String]?

            public var dashboards: [ListEnvironmentAddonsResponseBody.Data.Addons.Dashboards]?

            public var description_: String?

            public var environments: [ListEnvironmentAddonsResponseBody.Data.Addons.Environments]?

            public var icon: String?

            public var keywords: [String]?

            public var language: String?

            public var latestReleaseCreateTime: String?

            public var name: String?

            public var once: Bool?

            public var scene: String?

            public var version: String?

            public var weight: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.alias != nil {
                    map["Alias"] = self.alias!
                }
                if self.categories != nil {
                    map["Categories"] = self.categories!
                }
                if self.dashboards != nil {
                    var tmp : [Any] = []
                    for k in self.dashboards! {
                        tmp.append(k.toMap())
                    }
                    map["Dashboards"] = tmp
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.environments != nil {
                    var tmp : [Any] = []
                    for k in self.environments! {
                        tmp.append(k.toMap())
                    }
                    map["Environments"] = tmp
                }
                if self.icon != nil {
                    map["Icon"] = self.icon!
                }
                if self.keywords != nil {
                    map["Keywords"] = self.keywords!
                }
                if self.language != nil {
                    map["Language"] = self.language!
                }
                if self.latestReleaseCreateTime != nil {
                    map["LatestReleaseCreateTime"] = self.latestReleaseCreateTime!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.once != nil {
                    map["Once"] = self.once!
                }
                if self.scene != nil {
                    map["Scene"] = self.scene!
                }
                if self.version != nil {
                    map["Version"] = self.version!
                }
                if self.weight != nil {
                    map["Weight"] = self.weight!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Alias"] as? String {
                    self.alias = value
                }
                if let value = dict["Categories"] as? [String] {
                    self.categories = value
                }
                if let value = dict["Dashboards"] as? [Any?] {
                    var tmp : [ListEnvironmentAddonsResponseBody.Data.Addons.Dashboards] = []
                    for v in value {
                        if v != nil {
                            var model = ListEnvironmentAddonsResponseBody.Data.Addons.Dashboards()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.dashboards = tmp
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["Environments"] as? [Any?] {
                    var tmp : [ListEnvironmentAddonsResponseBody.Data.Addons.Environments] = []
                    for v in value {
                        if v != nil {
                            var model = ListEnvironmentAddonsResponseBody.Data.Addons.Environments()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.environments = tmp
                }
                if let value = dict["Icon"] as? String {
                    self.icon = value
                }
                if let value = dict["Keywords"] as? [String] {
                    self.keywords = value
                }
                if let value = dict["Language"] as? String {
                    self.language = value
                }
                if let value = dict["LatestReleaseCreateTime"] as? String {
                    self.latestReleaseCreateTime = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["Once"] as? Bool {
                    self.once = value
                }
                if let value = dict["Scene"] as? String {
                    self.scene = value
                }
                if let value = dict["Version"] as? String {
                    self.version = value
                }
                if let value = dict["Weight"] as? String {
                    self.weight = value
                }
            }
        }
        public var addons: [ListEnvironmentAddonsResponseBody.Data.Addons]?

        public var total: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.addons != nil {
                var tmp : [Any] = []
                for k in self.addons! {
                    tmp.append(k.toMap())
                }
                map["Addons"] = tmp
            }
            if self.total != nil {
                map["Total"] = self.total!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Addons"] as? [Any?] {
                var tmp : [ListEnvironmentAddonsResponseBody.Data.Addons] = []
                for v in value {
                    if v != nil {
                        var model = ListEnvironmentAddonsResponseBody.Data.Addons()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.addons = tmp
            }
            if let value = dict["Total"] as? Int64 {
                self.total = value
            }
        }
    }
    public var code: Int32?

    public var data: ListEnvironmentAddonsResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ListEnvironmentAddonsResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ListEnvironmentAddonsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListEnvironmentAddonsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListEnvironmentAddonsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListEnvironmentAlertRulesRequest : Tea.TeaModel {
    public var addonName: String?

    public var environmentId: String?

    public var regionId: String?

    public var scene: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.addonName != nil {
            map["AddonName"] = self.addonName!
        }
        if self.environmentId != nil {
            map["EnvironmentId"] = self.environmentId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.scene != nil {
            map["Scene"] = self.scene!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AddonName"] as? String {
            self.addonName = value
        }
        if let value = dict["EnvironmentId"] as? String {
            self.environmentId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Scene"] as? String {
            self.scene = value
        }
    }
}

public class ListEnvironmentAlertRulesResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Rules : Tea.TeaModel {
            public var alertId: Int64?

            public var name: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.alertId != nil {
                    map["AlertId"] = self.alertId!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AlertId"] as? Int64 {
                    self.alertId = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
            }
        }
        public var groups: [String]?

        public var rules: [ListEnvironmentAlertRulesResponseBody.Data.Rules]?

        public var total: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.groups != nil {
                map["Groups"] = self.groups!
            }
            if self.rules != nil {
                var tmp : [Any] = []
                for k in self.rules! {
                    tmp.append(k.toMap())
                }
                map["Rules"] = tmp
            }
            if self.total != nil {
                map["Total"] = self.total!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Groups"] as? [String] {
                self.groups = value
            }
            if let value = dict["Rules"] as? [Any?] {
                var tmp : [ListEnvironmentAlertRulesResponseBody.Data.Rules] = []
                for v in value {
                    if v != nil {
                        var model = ListEnvironmentAlertRulesResponseBody.Data.Rules()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.rules = tmp
            }
            if let value = dict["Total"] as? Int64 {
                self.total = value
            }
        }
    }
    public var code: Int32?

    public var data: ListEnvironmentAlertRulesResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ListEnvironmentAlertRulesResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ListEnvironmentAlertRulesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListEnvironmentAlertRulesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListEnvironmentAlertRulesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListEnvironmentDashboardsRequest : Tea.TeaModel {
    public var addonName: String?

    public var environmentId: String?

    public var regionId: String?

    public var scene: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.addonName != nil {
            map["AddonName"] = self.addonName!
        }
        if self.environmentId != nil {
            map["EnvironmentId"] = self.environmentId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.scene != nil {
            map["Scene"] = self.scene!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AddonName"] as? String {
            self.addonName = value
        }
        if let value = dict["EnvironmentId"] as? String {
            self.environmentId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Scene"] as? String {
            self.scene = value
        }
    }
}

public class ListEnvironmentDashboardsResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Dashboards : Tea.TeaModel {
            public var folderUid: String?

            public var region: String?

            public var tags: [String]?

            public var title: String?

            public var uid: String?

            public var url: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.folderUid != nil {
                    map["FolderUid"] = self.folderUid!
                }
                if self.region != nil {
                    map["Region"] = self.region!
                }
                if self.tags != nil {
                    map["Tags"] = self.tags!
                }
                if self.title != nil {
                    map["Title"] = self.title!
                }
                if self.uid != nil {
                    map["Uid"] = self.uid!
                }
                if self.url != nil {
                    map["Url"] = self.url!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["FolderUid"] as? String {
                    self.folderUid = value
                }
                if let value = dict["Region"] as? String {
                    self.region = value
                }
                if let value = dict["Tags"] as? [String] {
                    self.tags = value
                }
                if let value = dict["Title"] as? String {
                    self.title = value
                }
                if let value = dict["Uid"] as? String {
                    self.uid = value
                }
                if let value = dict["Url"] as? String {
                    self.url = value
                }
            }
        }
        public var dashboards: [ListEnvironmentDashboardsResponseBody.Data.Dashboards]?

        public var total: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.dashboards != nil {
                var tmp : [Any] = []
                for k in self.dashboards! {
                    tmp.append(k.toMap())
                }
                map["Dashboards"] = tmp
            }
            if self.total != nil {
                map["Total"] = self.total!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Dashboards"] as? [Any?] {
                var tmp : [ListEnvironmentDashboardsResponseBody.Data.Dashboards] = []
                for v in value {
                    if v != nil {
                        var model = ListEnvironmentDashboardsResponseBody.Data.Dashboards()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.dashboards = tmp
            }
            if let value = dict["Total"] as? Int64 {
                self.total = value
            }
        }
    }
    public var code: Int32?

    public var data: ListEnvironmentDashboardsResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ListEnvironmentDashboardsResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ListEnvironmentDashboardsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListEnvironmentDashboardsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListEnvironmentDashboardsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListEnvironmentFeaturesRequest : Tea.TeaModel {
    public var aliyunLang: String?

    public var environmentId: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.aliyunLang != nil {
            map["AliyunLang"] = self.aliyunLang!
        }
        if self.environmentId != nil {
            map["EnvironmentId"] = self.environmentId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AliyunLang"] as? String {
            self.aliyunLang = value
        }
        if let value = dict["EnvironmentId"] as? String {
            self.environmentId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class ListEnvironmentFeaturesResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var alias: String?

        public var config: [String: String]?

        public var description_: String?

        public var environmentId: String?

        public var icon: String?

        public var language: String?

        public var latestVersion: String?

        public var managed: Bool?

        public var name: String?

        public var status: String?

        public var version: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.alias != nil {
                map["Alias"] = self.alias!
            }
            if self.config != nil {
                map["Config"] = self.config!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.environmentId != nil {
                map["EnvironmentId"] = self.environmentId!
            }
            if self.icon != nil {
                map["Icon"] = self.icon!
            }
            if self.language != nil {
                map["Language"] = self.language!
            }
            if self.latestVersion != nil {
                map["LatestVersion"] = self.latestVersion!
            }
            if self.managed != nil {
                map["Managed"] = self.managed!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.version != nil {
                map["Version"] = self.version!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Alias"] as? String {
                self.alias = value
            }
            if let value = dict["Config"] as? [String: String] {
                self.config = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["EnvironmentId"] as? String {
                self.environmentId = value
            }
            if let value = dict["Icon"] as? String {
                self.icon = value
            }
            if let value = dict["Language"] as? String {
                self.language = value
            }
            if let value = dict["LatestVersion"] as? String {
                self.latestVersion = value
            }
            if let value = dict["Managed"] as? Bool {
                self.managed = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["Version"] as? String {
                self.version = value
            }
        }
    }
    public var code: Int32?

    public var data: [ListEnvironmentFeaturesResponseBody.Data]?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [ListEnvironmentFeaturesResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = ListEnvironmentFeaturesResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ListEnvironmentFeaturesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListEnvironmentFeaturesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListEnvironmentFeaturesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListEnvironmentKubeResourcesRequest : Tea.TeaModel {
    public var environmentId: String?

    public var kind: String?

    public var labelSelectors: [String: String]?

    public var namespace: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.environmentId != nil {
            map["EnvironmentId"] = self.environmentId!
        }
        if self.kind != nil {
            map["Kind"] = self.kind!
        }
        if self.labelSelectors != nil {
            map["LabelSelectors"] = self.labelSelectors!
        }
        if self.namespace != nil {
            map["Namespace"] = self.namespace!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EnvironmentId"] as? String {
            self.environmentId = value
        }
        if let value = dict["Kind"] as? String {
            self.kind = value
        }
        if let value = dict["LabelSelectors"] as? [String: String] {
            self.labelSelectors = value
        }
        if let value = dict["Namespace"] as? String {
            self.namespace = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class ListEnvironmentKubeResourcesShrinkRequest : Tea.TeaModel {
    public var environmentId: String?

    public var kind: String?

    public var labelSelectorsShrink: String?

    public var namespace: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.environmentId != nil {
            map["EnvironmentId"] = self.environmentId!
        }
        if self.kind != nil {
            map["Kind"] = self.kind!
        }
        if self.labelSelectorsShrink != nil {
            map["LabelSelectors"] = self.labelSelectorsShrink!
        }
        if self.namespace != nil {
            map["Namespace"] = self.namespace!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EnvironmentId"] as? String {
            self.environmentId = value
        }
        if let value = dict["Kind"] as? String {
            self.kind = value
        }
        if let value = dict["LabelSelectors"] as? String {
            self.labelSelectorsShrink = value
        }
        if let value = dict["Namespace"] as? String {
            self.namespace = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class ListEnvironmentKubeResourcesResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Metadata : Tea.TeaModel {
            public var annotations: [String: String]?

            public var labels: [String: String]?

            public var name: String?

            public var namespace: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.annotations != nil {
                    map["Annotations"] = self.annotations!
                }
                if self.labels != nil {
                    map["Labels"] = self.labels!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.namespace != nil {
                    map["Namespace"] = self.namespace!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Annotations"] as? [String: String] {
                    self.annotations = value
                }
                if let value = dict["Labels"] as? [String: String] {
                    self.labels = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["Namespace"] as? String {
                    self.namespace = value
                }
            }
        }
        public var apiVersion: String?

        public var kind: String?

        public var metadata: ListEnvironmentKubeResourcesResponseBody.Data.Metadata?

        public var spec: Any?

        public var status: Any?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.metadata?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.apiVersion != nil {
                map["ApiVersion"] = self.apiVersion!
            }
            if self.kind != nil {
                map["Kind"] = self.kind!
            }
            if self.metadata != nil {
                map["Metadata"] = self.metadata?.toMap()
            }
            if self.spec != nil {
                map["Spec"] = self.spec!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ApiVersion"] as? String {
                self.apiVersion = value
            }
            if let value = dict["Kind"] as? String {
                self.kind = value
            }
            if let value = dict["Metadata"] as? [String: Any?] {
                var model = ListEnvironmentKubeResourcesResponseBody.Data.Metadata()
                model.fromMap(value)
                self.metadata = model
            }
            if let value = dict["Spec"] as? Any {
                self.spec = value
            }
            if let value = dict["Status"] as? Any {
                self.status = value
            }
        }
    }
    public var code: Int32?

    public var data: [ListEnvironmentKubeResourcesResponseBody.Data]?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [ListEnvironmentKubeResourcesResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = ListEnvironmentKubeResourcesResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ListEnvironmentKubeResourcesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListEnvironmentKubeResourcesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListEnvironmentKubeResourcesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListEnvironmentMetricTargetsRequest : Tea.TeaModel {
    public var environmentId: String?

    public var jobName: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.environmentId != nil {
            map["EnvironmentId"] = self.environmentId!
        }
        if self.jobName != nil {
            map["JobName"] = self.jobName!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EnvironmentId"] as? String {
            self.environmentId = value
        }
        if let value = dict["JobName"] as? String {
            self.jobName = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class ListEnvironmentMetricTargetsResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class ActiveTargets : Tea.TeaModel {
            public var discoveredLabels: [String: String]?

            public var globalUrl: String?

            public var health: String?

            public var labels: [String: String]?

            public var lastError: String?

            public var lastScrape: String?

            public var lastScrapeDuration: Double?

            public var lastScrapeSeries: Int64?

            public var scrapePool: String?

            public var scrapeUrl: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.discoveredLabels != nil {
                    map["DiscoveredLabels"] = self.discoveredLabels!
                }
                if self.globalUrl != nil {
                    map["GlobalUrl"] = self.globalUrl!
                }
                if self.health != nil {
                    map["Health"] = self.health!
                }
                if self.labels != nil {
                    map["Labels"] = self.labels!
                }
                if self.lastError != nil {
                    map["LastError"] = self.lastError!
                }
                if self.lastScrape != nil {
                    map["LastScrape"] = self.lastScrape!
                }
                if self.lastScrapeDuration != nil {
                    map["LastScrapeDuration"] = self.lastScrapeDuration!
                }
                if self.lastScrapeSeries != nil {
                    map["LastScrapeSeries"] = self.lastScrapeSeries!
                }
                if self.scrapePool != nil {
                    map["ScrapePool"] = self.scrapePool!
                }
                if self.scrapeUrl != nil {
                    map["ScrapeUrl"] = self.scrapeUrl!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["DiscoveredLabels"] as? [String: String] {
                    self.discoveredLabels = value
                }
                if let value = dict["GlobalUrl"] as? String {
                    self.globalUrl = value
                }
                if let value = dict["Health"] as? String {
                    self.health = value
                }
                if let value = dict["Labels"] as? [String: String] {
                    self.labels = value
                }
                if let value = dict["LastError"] as? String {
                    self.lastError = value
                }
                if let value = dict["LastScrape"] as? String {
                    self.lastScrape = value
                }
                if let value = dict["LastScrapeDuration"] as? Double {
                    self.lastScrapeDuration = value
                }
                if let value = dict["LastScrapeSeries"] as? Int64 {
                    self.lastScrapeSeries = value
                }
                if let value = dict["ScrapePool"] as? String {
                    self.scrapePool = value
                }
                if let value = dict["ScrapeUrl"] as? String {
                    self.scrapeUrl = value
                }
            }
        }
        public class DroppedTargets : Tea.TeaModel {
            public var discoveredLabels: [String: String]?

            public var globalUrl: String?

            public var health: String?

            public var labels: [String: String]?

            public var lastError: String?

            public var lastScrape: String?

            public var lastScrapeDuration: Double?

            public var lastScrapeSeries: Int64?

            public var scrapePool: String?

            public var scrapeUrl: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.discoveredLabels != nil {
                    map["DiscoveredLabels"] = self.discoveredLabels!
                }
                if self.globalUrl != nil {
                    map["GlobalUrl"] = self.globalUrl!
                }
                if self.health != nil {
                    map["Health"] = self.health!
                }
                if self.labels != nil {
                    map["Labels"] = self.labels!
                }
                if self.lastError != nil {
                    map["LastError"] = self.lastError!
                }
                if self.lastScrape != nil {
                    map["LastScrape"] = self.lastScrape!
                }
                if self.lastScrapeDuration != nil {
                    map["LastScrapeDuration"] = self.lastScrapeDuration!
                }
                if self.lastScrapeSeries != nil {
                    map["LastScrapeSeries"] = self.lastScrapeSeries!
                }
                if self.scrapePool != nil {
                    map["ScrapePool"] = self.scrapePool!
                }
                if self.scrapeUrl != nil {
                    map["ScrapeUrl"] = self.scrapeUrl!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["DiscoveredLabels"] as? [String: String] {
                    self.discoveredLabels = value
                }
                if let value = dict["GlobalUrl"] as? String {
                    self.globalUrl = value
                }
                if let value = dict["Health"] as? String {
                    self.health = value
                }
                if let value = dict["Labels"] as? [String: String] {
                    self.labels = value
                }
                if let value = dict["LastError"] as? String {
                    self.lastError = value
                }
                if let value = dict["LastScrape"] as? String {
                    self.lastScrape = value
                }
                if let value = dict["LastScrapeDuration"] as? Double {
                    self.lastScrapeDuration = value
                }
                if let value = dict["LastScrapeSeries"] as? Int64 {
                    self.lastScrapeSeries = value
                }
                if let value = dict["ScrapePool"] as? String {
                    self.scrapePool = value
                }
                if let value = dict["ScrapeUrl"] as? String {
                    self.scrapeUrl = value
                }
            }
        }
        public var activeTargets: [ListEnvironmentMetricTargetsResponseBody.Data.ActiveTargets]?

        public var droppedTargets: [ListEnvironmentMetricTargetsResponseBody.Data.DroppedTargets]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.activeTargets != nil {
                var tmp : [Any] = []
                for k in self.activeTargets! {
                    tmp.append(k.toMap())
                }
                map["ActiveTargets"] = tmp
            }
            if self.droppedTargets != nil {
                var tmp : [Any] = []
                for k in self.droppedTargets! {
                    tmp.append(k.toMap())
                }
                map["DroppedTargets"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ActiveTargets"] as? [Any?] {
                var tmp : [ListEnvironmentMetricTargetsResponseBody.Data.ActiveTargets] = []
                for v in value {
                    if v != nil {
                        var model = ListEnvironmentMetricTargetsResponseBody.Data.ActiveTargets()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.activeTargets = tmp
            }
            if let value = dict["DroppedTargets"] as? [Any?] {
                var tmp : [ListEnvironmentMetricTargetsResponseBody.Data.DroppedTargets] = []
                for v in value {
                    if v != nil {
                        var model = ListEnvironmentMetricTargetsResponseBody.Data.DroppedTargets()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.droppedTargets = tmp
            }
        }
    }
    public var code: Int32?

    public var data: ListEnvironmentMetricTargetsResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ListEnvironmentMetricTargetsResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ListEnvironmentMetricTargetsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListEnvironmentMetricTargetsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListEnvironmentMetricTargetsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListEnvironmentsRequest : Tea.TeaModel {
    public class Tag : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var addonName: String?

    public var bindResourceId: String?

    public var environmentType: String?

    public var feePackage: String?

    public var filterRegionIds: String?

    public var regionId: String?

    public var resourceGroupId: String?

    public var tag: [ListEnvironmentsRequest.Tag]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.addonName != nil {
            map["AddonName"] = self.addonName!
        }
        if self.bindResourceId != nil {
            map["BindResourceId"] = self.bindResourceId!
        }
        if self.environmentType != nil {
            map["EnvironmentType"] = self.environmentType!
        }
        if self.feePackage != nil {
            map["FeePackage"] = self.feePackage!
        }
        if self.filterRegionIds != nil {
            map["FilterRegionIds"] = self.filterRegionIds!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceGroupId != nil {
            map["ResourceGroupId"] = self.resourceGroupId!
        }
        if self.tag != nil {
            var tmp : [Any] = []
            for k in self.tag! {
                tmp.append(k.toMap())
            }
            map["Tag"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AddonName"] as? String {
            self.addonName = value
        }
        if let value = dict["BindResourceId"] as? String {
            self.bindResourceId = value
        }
        if let value = dict["EnvironmentType"] as? String {
            self.environmentType = value
        }
        if let value = dict["FeePackage"] as? String {
            self.feePackage = value
        }
        if let value = dict["FilterRegionIds"] as? String {
            self.filterRegionIds = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceGroupId"] as? String {
            self.resourceGroupId = value
        }
        if let value = dict["Tag"] as? [Any?] {
            var tmp : [ListEnvironmentsRequest.Tag] = []
            for v in value {
                if v != nil {
                    var model = ListEnvironmentsRequest.Tag()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tag = tmp
        }
    }
}

public class ListEnvironmentsShrinkRequest : Tea.TeaModel {
    public var addonName: String?

    public var bindResourceId: String?

    public var environmentType: String?

    public var feePackage: String?

    public var filterRegionIds: String?

    public var regionId: String?

    public var resourceGroupId: String?

    public var tagShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.addonName != nil {
            map["AddonName"] = self.addonName!
        }
        if self.bindResourceId != nil {
            map["BindResourceId"] = self.bindResourceId!
        }
        if self.environmentType != nil {
            map["EnvironmentType"] = self.environmentType!
        }
        if self.feePackage != nil {
            map["FeePackage"] = self.feePackage!
        }
        if self.filterRegionIds != nil {
            map["FilterRegionIds"] = self.filterRegionIds!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceGroupId != nil {
            map["ResourceGroupId"] = self.resourceGroupId!
        }
        if self.tagShrink != nil {
            map["Tag"] = self.tagShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AddonName"] as? String {
            self.addonName = value
        }
        if let value = dict["BindResourceId"] as? String {
            self.bindResourceId = value
        }
        if let value = dict["EnvironmentType"] as? String {
            self.environmentType = value
        }
        if let value = dict["FeePackage"] as? String {
            self.feePackage = value
        }
        if let value = dict["FilterRegionIds"] as? String {
            self.filterRegionIds = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceGroupId"] as? String {
            self.resourceGroupId = value
        }
        if let value = dict["Tag"] as? String {
            self.tagShrink = value
        }
    }
}

public class ListEnvironmentsResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Environments : Tea.TeaModel {
            public class Addons : Tea.TeaModel {
                public var alias: String?

                public var description_: String?

                public var icon: String?

                public var name: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.alias != nil {
                        map["Alias"] = self.alias!
                    }
                    if self.description_ != nil {
                        map["Description"] = self.description_!
                    }
                    if self.icon != nil {
                        map["Icon"] = self.icon!
                    }
                    if self.name != nil {
                        map["Name"] = self.name!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Alias"] as? String {
                        self.alias = value
                    }
                    if let value = dict["Description"] as? String {
                        self.description_ = value
                    }
                    if let value = dict["Icon"] as? String {
                        self.icon = value
                    }
                    if let value = dict["Name"] as? String {
                        self.name = value
                    }
                }
            }
            public class Features : Tea.TeaModel {
                public var alias: String?

                public var description_: String?

                public var icon: String?

                public var name: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.alias != nil {
                        map["Alias"] = self.alias!
                    }
                    if self.description_ != nil {
                        map["Description"] = self.description_!
                    }
                    if self.icon != nil {
                        map["Icon"] = self.icon!
                    }
                    if self.name != nil {
                        map["Name"] = self.name!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Alias"] as? String {
                        self.alias = value
                    }
                    if let value = dict["Description"] as? String {
                        self.description_ = value
                    }
                    if let value = dict["Icon"] as? String {
                        self.icon = value
                    }
                    if let value = dict["Name"] as? String {
                        self.name = value
                    }
                }
            }
            public class Tags : Tea.TeaModel {
                public var key: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.key != nil {
                        map["Key"] = self.key!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Key"] as? String {
                        self.key = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public var addons: [ListEnvironmentsResponseBody.Data.Environments.Addons]?

            public var bindResourceId: String?

            public var bindResourceProfile: String?

            public var bindResourceType: String?

            public var bindVpcCidr: String?

            public var createTime: String?

            public var createdUserId: String?

            public var environmentId: String?

            public var environmentName: String?

            public var environmentType: String?

            public var features: [ListEnvironmentsResponseBody.Data.Environments.Features]?

            public var feePackage: String?

            public var grafanaDatasourceUid: String?

            public var grafanaFolderTitle: String?

            public var grafanaFolderUid: String?

            public var latestReleaseCreateTime: String?

            public var managedType: String?

            public var prometheusId: Int64?

            public var prometheusInstanceId: String?

            public var regionId: String?

            public var releaseCount: Int32?

            public var resourceGroupId: String?

            public var tags: [ListEnvironmentsResponseBody.Data.Environments.Tags]?

            public var userId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.addons != nil {
                    var tmp : [Any] = []
                    for k in self.addons! {
                        tmp.append(k.toMap())
                    }
                    map["Addons"] = tmp
                }
                if self.bindResourceId != nil {
                    map["BindResourceId"] = self.bindResourceId!
                }
                if self.bindResourceProfile != nil {
                    map["BindResourceProfile"] = self.bindResourceProfile!
                }
                if self.bindResourceType != nil {
                    map["BindResourceType"] = self.bindResourceType!
                }
                if self.bindVpcCidr != nil {
                    map["BindVpcCidr"] = self.bindVpcCidr!
                }
                if self.createTime != nil {
                    map["CreateTime"] = self.createTime!
                }
                if self.createdUserId != nil {
                    map["CreatedUserId"] = self.createdUserId!
                }
                if self.environmentId != nil {
                    map["EnvironmentId"] = self.environmentId!
                }
                if self.environmentName != nil {
                    map["EnvironmentName"] = self.environmentName!
                }
                if self.environmentType != nil {
                    map["EnvironmentType"] = self.environmentType!
                }
                if self.features != nil {
                    var tmp : [Any] = []
                    for k in self.features! {
                        tmp.append(k.toMap())
                    }
                    map["Features"] = tmp
                }
                if self.feePackage != nil {
                    map["FeePackage"] = self.feePackage!
                }
                if self.grafanaDatasourceUid != nil {
                    map["GrafanaDatasourceUid"] = self.grafanaDatasourceUid!
                }
                if self.grafanaFolderTitle != nil {
                    map["GrafanaFolderTitle"] = self.grafanaFolderTitle!
                }
                if self.grafanaFolderUid != nil {
                    map["GrafanaFolderUid"] = self.grafanaFolderUid!
                }
                if self.latestReleaseCreateTime != nil {
                    map["LatestReleaseCreateTime"] = self.latestReleaseCreateTime!
                }
                if self.managedType != nil {
                    map["ManagedType"] = self.managedType!
                }
                if self.prometheusId != nil {
                    map["PrometheusId"] = self.prometheusId!
                }
                if self.prometheusInstanceId != nil {
                    map["PrometheusInstanceId"] = self.prometheusInstanceId!
                }
                if self.regionId != nil {
                    map["RegionId"] = self.regionId!
                }
                if self.releaseCount != nil {
                    map["ReleaseCount"] = self.releaseCount!
                }
                if self.resourceGroupId != nil {
                    map["ResourceGroupId"] = self.resourceGroupId!
                }
                if self.tags != nil {
                    var tmp : [Any] = []
                    for k in self.tags! {
                        tmp.append(k.toMap())
                    }
                    map["Tags"] = tmp
                }
                if self.userId != nil {
                    map["UserId"] = self.userId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Addons"] as? [Any?] {
                    var tmp : [ListEnvironmentsResponseBody.Data.Environments.Addons] = []
                    for v in value {
                        if v != nil {
                            var model = ListEnvironmentsResponseBody.Data.Environments.Addons()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.addons = tmp
                }
                if let value = dict["BindResourceId"] as? String {
                    self.bindResourceId = value
                }
                if let value = dict["BindResourceProfile"] as? String {
                    self.bindResourceProfile = value
                }
                if let value = dict["BindResourceType"] as? String {
                    self.bindResourceType = value
                }
                if let value = dict["BindVpcCidr"] as? String {
                    self.bindVpcCidr = value
                }
                if let value = dict["CreateTime"] as? String {
                    self.createTime = value
                }
                if let value = dict["CreatedUserId"] as? String {
                    self.createdUserId = value
                }
                if let value = dict["EnvironmentId"] as? String {
                    self.environmentId = value
                }
                if let value = dict["EnvironmentName"] as? String {
                    self.environmentName = value
                }
                if let value = dict["EnvironmentType"] as? String {
                    self.environmentType = value
                }
                if let value = dict["Features"] as? [Any?] {
                    var tmp : [ListEnvironmentsResponseBody.Data.Environments.Features] = []
                    for v in value {
                        if v != nil {
                            var model = ListEnvironmentsResponseBody.Data.Environments.Features()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.features = tmp
                }
                if let value = dict["FeePackage"] as? String {
                    self.feePackage = value
                }
                if let value = dict["GrafanaDatasourceUid"] as? String {
                    self.grafanaDatasourceUid = value
                }
                if let value = dict["GrafanaFolderTitle"] as? String {
                    self.grafanaFolderTitle = value
                }
                if let value = dict["GrafanaFolderUid"] as? String {
                    self.grafanaFolderUid = value
                }
                if let value = dict["LatestReleaseCreateTime"] as? String {
                    self.latestReleaseCreateTime = value
                }
                if let value = dict["ManagedType"] as? String {
                    self.managedType = value
                }
                if let value = dict["PrometheusId"] as? Int64 {
                    self.prometheusId = value
                }
                if let value = dict["PrometheusInstanceId"] as? String {
                    self.prometheusInstanceId = value
                }
                if let value = dict["RegionId"] as? String {
                    self.regionId = value
                }
                if let value = dict["ReleaseCount"] as? Int32 {
                    self.releaseCount = value
                }
                if let value = dict["ResourceGroupId"] as? String {
                    self.resourceGroupId = value
                }
                if let value = dict["Tags"] as? [Any?] {
                    var tmp : [ListEnvironmentsResponseBody.Data.Environments.Tags] = []
                    for v in value {
                        if v != nil {
                            var model = ListEnvironmentsResponseBody.Data.Environments.Tags()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.tags = tmp
                }
                if let value = dict["UserId"] as? String {
                    self.userId = value
                }
            }
        }
        public var environments: [ListEnvironmentsResponseBody.Data.Environments]?

        public var total: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.environments != nil {
                var tmp : [Any] = []
                for k in self.environments! {
                    tmp.append(k.toMap())
                }
                map["Environments"] = tmp
            }
            if self.total != nil {
                map["Total"] = self.total!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Environments"] as? [Any?] {
                var tmp : [ListEnvironmentsResponseBody.Data.Environments] = []
                for v in value {
                    if v != nil {
                        var model = ListEnvironmentsResponseBody.Data.Environments()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.environments = tmp
            }
            if let value = dict["Total"] as? Int64 {
                self.total = value
            }
        }
    }
    public var code: Int32?

    public var data: ListEnvironmentsResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ListEnvironmentsResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ListEnvironmentsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListEnvironmentsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListEnvironmentsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListEscalationPoliciesRequest : Tea.TeaModel {
    public var name: String?

    public var page: Int64?

    public var size: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.page != nil {
            map["Page"] = self.page!
        }
        if self.size != nil {
            map["Size"] = self.size!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["Page"] as? Int64 {
            self.page = value
        }
        if let value = dict["Size"] as? Int64 {
            self.size = value
        }
    }
}

public class ListEscalationPoliciesResponseBody : Tea.TeaModel {
    public class PageBean : Tea.TeaModel {
        public class EscalationPolicies : Tea.TeaModel {
            public var id: Int64?

            public var name: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Id"] as? Int64 {
                    self.id = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
            }
        }
        public var escalationPolicies: [ListEscalationPoliciesResponseBody.PageBean.EscalationPolicies]?

        public var page: Int64?

        public var size: Int64?

        public var total: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.escalationPolicies != nil {
                var tmp : [Any] = []
                for k in self.escalationPolicies! {
                    tmp.append(k.toMap())
                }
                map["EscalationPolicies"] = tmp
            }
            if self.page != nil {
                map["Page"] = self.page!
            }
            if self.size != nil {
                map["Size"] = self.size!
            }
            if self.total != nil {
                map["Total"] = self.total!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["EscalationPolicies"] as? [Any?] {
                var tmp : [ListEscalationPoliciesResponseBody.PageBean.EscalationPolicies] = []
                for v in value {
                    if v != nil {
                        var model = ListEscalationPoliciesResponseBody.PageBean.EscalationPolicies()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.escalationPolicies = tmp
            }
            if let value = dict["Page"] as? Int64 {
                self.page = value
            }
            if let value = dict["Size"] as? Int64 {
                self.size = value
            }
            if let value = dict["Total"] as? Int64 {
                self.total = value
            }
        }
    }
    public var pageBean: ListEscalationPoliciesResponseBody.PageBean?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.pageBean?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageBean != nil {
            map["PageBean"] = self.pageBean?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageBean"] as? [String: Any?] {
            var model = ListEscalationPoliciesResponseBody.PageBean()
            model.fromMap(value)
            self.pageBean = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListEscalationPoliciesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListEscalationPoliciesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListEscalationPoliciesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListEventBridgeIntegrationsRequest : Tea.TeaModel {
    public var name: String?

    public var page: Int64?

    public var size: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.page != nil {
            map["Page"] = self.page!
        }
        if self.size != nil {
            map["Size"] = self.size!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["Page"] as? Int64 {
            self.page = value
        }
        if let value = dict["Size"] as? Int64 {
            self.size = value
        }
    }
}

public class ListEventBridgeIntegrationsResponseBody : Tea.TeaModel {
    public class PageBean : Tea.TeaModel {
        public class EventBridgeIntegrations : Tea.TeaModel {
            public var description_: String?

            public var id: Int64?

            public var name: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["Id"] as? Int64 {
                    self.id = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
            }
        }
        public var eventBridgeIntegrations: [ListEventBridgeIntegrationsResponseBody.PageBean.EventBridgeIntegrations]?

        public var page: Int64?

        public var size: Int64?

        public var total: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.eventBridgeIntegrations != nil {
                var tmp : [Any] = []
                for k in self.eventBridgeIntegrations! {
                    tmp.append(k.toMap())
                }
                map["EventBridgeIntegrations"] = tmp
            }
            if self.page != nil {
                map["Page"] = self.page!
            }
            if self.size != nil {
                map["Size"] = self.size!
            }
            if self.total != nil {
                map["Total"] = self.total!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["EventBridgeIntegrations"] as? [Any?] {
                var tmp : [ListEventBridgeIntegrationsResponseBody.PageBean.EventBridgeIntegrations] = []
                for v in value {
                    if v != nil {
                        var model = ListEventBridgeIntegrationsResponseBody.PageBean.EventBridgeIntegrations()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.eventBridgeIntegrations = tmp
            }
            if let value = dict["Page"] as? Int64 {
                self.page = value
            }
            if let value = dict["Size"] as? Int64 {
                self.size = value
            }
            if let value = dict["Total"] as? Int64 {
                self.total = value
            }
        }
    }
    public var pageBean: ListEventBridgeIntegrationsResponseBody.PageBean?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.pageBean?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageBean != nil {
            map["PageBean"] = self.pageBean?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageBean"] as? [String: Any?] {
            var model = ListEventBridgeIntegrationsResponseBody.PageBean()
            model.fromMap(value)
            self.pageBean = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListEventBridgeIntegrationsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListEventBridgeIntegrationsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListEventBridgeIntegrationsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListGrafanaWorkspaceRequest : Tea.TeaModel {
    public class Tags : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var aliyunLang: String?

    public var regionId: String?

    public var resourceGroupId: String?

    public var tags: [ListGrafanaWorkspaceRequest.Tags]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.aliyunLang != nil {
            map["AliyunLang"] = self.aliyunLang!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceGroupId != nil {
            map["ResourceGroupId"] = self.resourceGroupId!
        }
        if self.tags != nil {
            var tmp : [Any] = []
            for k in self.tags! {
                tmp.append(k.toMap())
            }
            map["Tags"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AliyunLang"] as? String {
            self.aliyunLang = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceGroupId"] as? String {
            self.resourceGroupId = value
        }
        if let value = dict["Tags"] as? [Any?] {
            var tmp : [ListGrafanaWorkspaceRequest.Tags] = []
            for v in value {
                if v != nil {
                    var model = ListGrafanaWorkspaceRequest.Tags()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tags = tmp
        }
    }
}

public class ListGrafanaWorkspaceShrinkRequest : Tea.TeaModel {
    public var aliyunLang: String?

    public var regionId: String?

    public var resourceGroupId: String?

    public var tagsShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.aliyunLang != nil {
            map["AliyunLang"] = self.aliyunLang!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceGroupId != nil {
            map["ResourceGroupId"] = self.resourceGroupId!
        }
        if self.tagsShrink != nil {
            map["Tags"] = self.tagsShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AliyunLang"] as? String {
            self.aliyunLang = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceGroupId"] as? String {
            self.resourceGroupId = value
        }
        if let value = dict["Tags"] as? String {
            self.tagsShrink = value
        }
    }
}

public class ListGrafanaWorkspaceResponseBody : Tea.TeaModel {
    public var code: Int32?

    public var data: [GrafanaWorkspace]?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.traceId != nil {
            map["TraceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [GrafanaWorkspace] = []
            for v in value {
                if v != nil {
                    var model = GrafanaWorkspace()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
        if let value = dict["TraceId"] as? String {
            self.traceId = value
        }
    }
}

public class ListGrafanaWorkspaceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListGrafanaWorkspaceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListGrafanaWorkspaceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListInsightsEventsRequest : Tea.TeaModel {
    public var endTime: String?

    public var insightsTypes: String?

    public var pid: String?

    public var regionId: String?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.insightsTypes != nil {
            map["InsightsTypes"] = self.insightsTypes!
        }
        if self.pid != nil {
            map["Pid"] = self.pid!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["InsightsTypes"] as? String {
            self.insightsTypes = value
        }
        if let value = dict["Pid"] as? String {
            self.pid = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
    }
}

public class ListInsightsEventsResponseBody : Tea.TeaModel {
    public class InsightsEvents : Tea.TeaModel {
        public var date: Int64?

        public var desc: String?

        public var level: String?

        public var pid: String?

        public var problemId: String?

        public var title: String?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.date != nil {
                map["Date"] = self.date!
            }
            if self.desc != nil {
                map["Desc"] = self.desc!
            }
            if self.level != nil {
                map["Level"] = self.level!
            }
            if self.pid != nil {
                map["Pid"] = self.pid!
            }
            if self.problemId != nil {
                map["ProblemId"] = self.problemId!
            }
            if self.title != nil {
                map["Title"] = self.title!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Date"] as? Int64 {
                self.date = value
            }
            if let value = dict["Desc"] as? String {
                self.desc = value
            }
            if let value = dict["Level"] as? String {
                self.level = value
            }
            if let value = dict["Pid"] as? String {
                self.pid = value
            }
            if let value = dict["ProblemId"] as? String {
                self.problemId = value
            }
            if let value = dict["Title"] as? String {
                self.title = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
        }
    }
    public var insightsEvents: [ListInsightsEventsResponseBody.InsightsEvents]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.insightsEvents != nil {
            var tmp : [Any] = []
            for k in self.insightsEvents! {
                tmp.append(k.toMap())
            }
            map["InsightsEvents"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InsightsEvents"] as? [Any?] {
            var tmp : [ListInsightsEventsResponseBody.InsightsEvents] = []
            for v in value {
                if v != nil {
                    var model = ListInsightsEventsResponseBody.InsightsEvents()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.insightsEvents = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListInsightsEventsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListInsightsEventsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListInsightsEventsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListIntegrationRequest : Tea.TeaModel {
    public var integrationName: String?

    public var integrationProductType: String?

    public var isDetail: Bool?

    public var page: Int64?

    public var size: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.integrationName != nil {
            map["IntegrationName"] = self.integrationName!
        }
        if self.integrationProductType != nil {
            map["IntegrationProductType"] = self.integrationProductType!
        }
        if self.isDetail != nil {
            map["IsDetail"] = self.isDetail!
        }
        if self.page != nil {
            map["Page"] = self.page!
        }
        if self.size != nil {
            map["Size"] = self.size!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["IntegrationName"] as? String {
            self.integrationName = value
        }
        if let value = dict["IntegrationProductType"] as? String {
            self.integrationProductType = value
        }
        if let value = dict["IsDetail"] as? Bool {
            self.isDetail = value
        }
        if let value = dict["Page"] as? Int64 {
            self.page = value
        }
        if let value = dict["Size"] as? Int64 {
            self.size = value
        }
    }
}

public class ListIntegrationResponseBody : Tea.TeaModel {
    public class PageInfo : Tea.TeaModel {
        public class Integrations : Tea.TeaModel {
            public class IntegrationDetail : Tea.TeaModel {
                public var autoRecover: Bool?

                public var description_: String?

                public var duplicateKey: String?

                public var extendedFieldRedefineRules: [[String: Any]]?

                public var fieldRedefineRules: [[String: Any]]?

                public var initiativeRecoverField: String?

                public var initiativeRecoverValue: String?

                public var recoverTime: Int64?

                public var stat: [Int64]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.autoRecover != nil {
                        map["AutoRecover"] = self.autoRecover!
                    }
                    if self.description_ != nil {
                        map["Description"] = self.description_!
                    }
                    if self.duplicateKey != nil {
                        map["DuplicateKey"] = self.duplicateKey!
                    }
                    if self.extendedFieldRedefineRules != nil {
                        map["ExtendedFieldRedefineRules"] = self.extendedFieldRedefineRules!
                    }
                    if self.fieldRedefineRules != nil {
                        map["FieldRedefineRules"] = self.fieldRedefineRules!
                    }
                    if self.initiativeRecoverField != nil {
                        map["InitiativeRecoverField"] = self.initiativeRecoverField!
                    }
                    if self.initiativeRecoverValue != nil {
                        map["InitiativeRecoverValue"] = self.initiativeRecoverValue!
                    }
                    if self.recoverTime != nil {
                        map["RecoverTime"] = self.recoverTime!
                    }
                    if self.stat != nil {
                        map["Stat"] = self.stat!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["AutoRecover"] as? Bool {
                        self.autoRecover = value
                    }
                    if let value = dict["Description"] as? String {
                        self.description_ = value
                    }
                    if let value = dict["DuplicateKey"] as? String {
                        self.duplicateKey = value
                    }
                    if let value = dict["ExtendedFieldRedefineRules"] as? [[String: Any]] {
                        self.extendedFieldRedefineRules = value
                    }
                    if let value = dict["FieldRedefineRules"] as? [[String: Any]] {
                        self.fieldRedefineRules = value
                    }
                    if let value = dict["InitiativeRecoverField"] as? String {
                        self.initiativeRecoverField = value
                    }
                    if let value = dict["InitiativeRecoverValue"] as? String {
                        self.initiativeRecoverValue = value
                    }
                    if let value = dict["RecoverTime"] as? Int64 {
                        self.recoverTime = value
                    }
                    if let value = dict["Stat"] as? [Int64] {
                        self.stat = value
                    }
                }
            }
            public var apiEndpoint: String?

            public var createTime: String?

            public var integrationDetail: ListIntegrationResponseBody.PageInfo.Integrations.IntegrationDetail?

            public var integrationId: Int64?

            public var integrationName: String?

            public var integrationProductType: String?

            public var liveness: String?

            public var shortToken: String?

            public var state: Bool?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.integrationDetail?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.apiEndpoint != nil {
                    map["ApiEndpoint"] = self.apiEndpoint!
                }
                if self.createTime != nil {
                    map["CreateTime"] = self.createTime!
                }
                if self.integrationDetail != nil {
                    map["IntegrationDetail"] = self.integrationDetail?.toMap()
                }
                if self.integrationId != nil {
                    map["IntegrationId"] = self.integrationId!
                }
                if self.integrationName != nil {
                    map["IntegrationName"] = self.integrationName!
                }
                if self.integrationProductType != nil {
                    map["IntegrationProductType"] = self.integrationProductType!
                }
                if self.liveness != nil {
                    map["Liveness"] = self.liveness!
                }
                if self.shortToken != nil {
                    map["ShortToken"] = self.shortToken!
                }
                if self.state != nil {
                    map["State"] = self.state!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ApiEndpoint"] as? String {
                    self.apiEndpoint = value
                }
                if let value = dict["CreateTime"] as? String {
                    self.createTime = value
                }
                if let value = dict["IntegrationDetail"] as? [String: Any?] {
                    var model = ListIntegrationResponseBody.PageInfo.Integrations.IntegrationDetail()
                    model.fromMap(value)
                    self.integrationDetail = model
                }
                if let value = dict["IntegrationId"] as? Int64 {
                    self.integrationId = value
                }
                if let value = dict["IntegrationName"] as? String {
                    self.integrationName = value
                }
                if let value = dict["IntegrationProductType"] as? String {
                    self.integrationProductType = value
                }
                if let value = dict["Liveness"] as? String {
                    self.liveness = value
                }
                if let value = dict["ShortToken"] as? String {
                    self.shortToken = value
                }
                if let value = dict["State"] as? Bool {
                    self.state = value
                }
            }
        }
        public var integrations: [ListIntegrationResponseBody.PageInfo.Integrations]?

        public var page: Int64?

        public var size: Int64?

        public var total: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.integrations != nil {
                var tmp : [Any] = []
                for k in self.integrations! {
                    tmp.append(k.toMap())
                }
                map["Integrations"] = tmp
            }
            if self.page != nil {
                map["Page"] = self.page!
            }
            if self.size != nil {
                map["Size"] = self.size!
            }
            if self.total != nil {
                map["Total"] = self.total!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Integrations"] as? [Any?] {
                var tmp : [ListIntegrationResponseBody.PageInfo.Integrations] = []
                for v in value {
                    if v != nil {
                        var model = ListIntegrationResponseBody.PageInfo.Integrations()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.integrations = tmp
            }
            if let value = dict["Page"] as? Int64 {
                self.page = value
            }
            if let value = dict["Size"] as? Int64 {
                self.size = value
            }
            if let value = dict["Total"] as? Int64 {
                self.total = value
            }
        }
    }
    public var pageInfo: ListIntegrationResponseBody.PageInfo?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.pageInfo?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageInfo != nil {
            map["PageInfo"] = self.pageInfo?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageInfo"] as? [String: Any?] {
            var model = ListIntegrationResponseBody.PageInfo()
            model.fromMap(value)
            self.pageInfo = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListIntegrationResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListIntegrationResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListIntegrationResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListNotificationPoliciesRequest : Tea.TeaModel {
    public var directedMode: Bool?

    public var ids: String?

    public var isDetail: Bool?

    public var name: String?

    public var page: Int64?

    public var regionId: String?

    public var size: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.directedMode != nil {
            map["DirectedMode"] = self.directedMode!
        }
        if self.ids != nil {
            map["Ids"] = self.ids!
        }
        if self.isDetail != nil {
            map["IsDetail"] = self.isDetail!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.page != nil {
            map["Page"] = self.page!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.size != nil {
            map["Size"] = self.size!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DirectedMode"] as? Bool {
            self.directedMode = value
        }
        if let value = dict["Ids"] as? String {
            self.ids = value
        }
        if let value = dict["IsDetail"] as? Bool {
            self.isDetail = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["Page"] as? Int64 {
            self.page = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Size"] as? Int64 {
            self.size = value
        }
    }
}

public class ListNotificationPoliciesResponseBody : Tea.TeaModel {
    public class PageBean : Tea.TeaModel {
        public class NotificationPolicies : Tea.TeaModel {
            public class GroupRule : Tea.TeaModel {
                public var groupInterval: Int64?

                public var groupWait: Int64?

                public var groupingFields: [String]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.groupInterval != nil {
                        map["GroupInterval"] = self.groupInterval!
                    }
                    if self.groupWait != nil {
                        map["GroupWait"] = self.groupWait!
                    }
                    if self.groupingFields != nil {
                        map["GroupingFields"] = self.groupingFields!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["GroupInterval"] as? Int64 {
                        self.groupInterval = value
                    }
                    if let value = dict["GroupWait"] as? Int64 {
                        self.groupWait = value
                    }
                    if let value = dict["GroupingFields"] as? [String] {
                        self.groupingFields = value
                    }
                }
            }
            public class MatchingRules : Tea.TeaModel {
                public class MatchingConditions : Tea.TeaModel {
                    public var key: String?

                    public var operator_: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.key != nil {
                            map["Key"] = self.key!
                        }
                        if self.operator_ != nil {
                            map["Operator"] = self.operator_!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Key"] as? String {
                            self.key = value
                        }
                        if let value = dict["Operator"] as? String {
                            self.operator_ = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public var matchingConditions: [ListNotificationPoliciesResponseBody.PageBean.NotificationPolicies.MatchingRules.MatchingConditions]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.matchingConditions != nil {
                        var tmp : [Any] = []
                        for k in self.matchingConditions! {
                            tmp.append(k.toMap())
                        }
                        map["MatchingConditions"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["MatchingConditions"] as? [Any?] {
                        var tmp : [ListNotificationPoliciesResponseBody.PageBean.NotificationPolicies.MatchingRules.MatchingConditions] = []
                        for v in value {
                            if v != nil {
                                var model = ListNotificationPoliciesResponseBody.PageBean.NotificationPolicies.MatchingRules.MatchingConditions()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.matchingConditions = tmp
                    }
                }
            }
            public class NotifyRule : Tea.TeaModel {
                public class NotifyObjects : Tea.TeaModel {
                    public var notifyChannels: [String]?

                    public var notifyObjectId: Int64?

                    public var notifyObjectName: String?

                    public var notifyObjectType: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.notifyChannels != nil {
                            map["NotifyChannels"] = self.notifyChannels!
                        }
                        if self.notifyObjectId != nil {
                            map["NotifyObjectId"] = self.notifyObjectId!
                        }
                        if self.notifyObjectName != nil {
                            map["NotifyObjectName"] = self.notifyObjectName!
                        }
                        if self.notifyObjectType != nil {
                            map["NotifyObjectType"] = self.notifyObjectType!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["NotifyChannels"] as? [String] {
                            self.notifyChannels = value
                        }
                        if let value = dict["NotifyObjectId"] as? Int64 {
                            self.notifyObjectId = value
                        }
                        if let value = dict["NotifyObjectName"] as? String {
                            self.notifyObjectName = value
                        }
                        if let value = dict["NotifyObjectType"] as? String {
                            self.notifyObjectType = value
                        }
                    }
                }
                public var notifyChannels: [String]?

                public var notifyEndTime: String?

                public var notifyObjects: [ListNotificationPoliciesResponseBody.PageBean.NotificationPolicies.NotifyRule.NotifyObjects]?

                public var notifyStartTime: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.notifyChannels != nil {
                        map["NotifyChannels"] = self.notifyChannels!
                    }
                    if self.notifyEndTime != nil {
                        map["NotifyEndTime"] = self.notifyEndTime!
                    }
                    if self.notifyObjects != nil {
                        var tmp : [Any] = []
                        for k in self.notifyObjects! {
                            tmp.append(k.toMap())
                        }
                        map["NotifyObjects"] = tmp
                    }
                    if self.notifyStartTime != nil {
                        map["NotifyStartTime"] = self.notifyStartTime!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["NotifyChannels"] as? [String] {
                        self.notifyChannels = value
                    }
                    if let value = dict["NotifyEndTime"] as? String {
                        self.notifyEndTime = value
                    }
                    if let value = dict["NotifyObjects"] as? [Any?] {
                        var tmp : [ListNotificationPoliciesResponseBody.PageBean.NotificationPolicies.NotifyRule.NotifyObjects] = []
                        for v in value {
                            if v != nil {
                                var model = ListNotificationPoliciesResponseBody.PageBean.NotificationPolicies.NotifyRule.NotifyObjects()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.notifyObjects = tmp
                    }
                    if let value = dict["NotifyStartTime"] as? String {
                        self.notifyStartTime = value
                    }
                }
            }
            public class NotifyTemplate : Tea.TeaModel {
                public var emailContent: String?

                public var emailRecoverContent: String?

                public var emailRecoverTitle: String?

                public var emailTitle: String?

                public var robotContent: String?

                public var smsContent: String?

                public var smsRecoverContent: String?

                public var ttsContent: String?

                public var ttsRecoverContent: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.emailContent != nil {
                        map["EmailContent"] = self.emailContent!
                    }
                    if self.emailRecoverContent != nil {
                        map["EmailRecoverContent"] = self.emailRecoverContent!
                    }
                    if self.emailRecoverTitle != nil {
                        map["EmailRecoverTitle"] = self.emailRecoverTitle!
                    }
                    if self.emailTitle != nil {
                        map["EmailTitle"] = self.emailTitle!
                    }
                    if self.robotContent != nil {
                        map["RobotContent"] = self.robotContent!
                    }
                    if self.smsContent != nil {
                        map["SmsContent"] = self.smsContent!
                    }
                    if self.smsRecoverContent != nil {
                        map["SmsRecoverContent"] = self.smsRecoverContent!
                    }
                    if self.ttsContent != nil {
                        map["TtsContent"] = self.ttsContent!
                    }
                    if self.ttsRecoverContent != nil {
                        map["TtsRecoverContent"] = self.ttsRecoverContent!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["EmailContent"] as? String {
                        self.emailContent = value
                    }
                    if let value = dict["EmailRecoverContent"] as? String {
                        self.emailRecoverContent = value
                    }
                    if let value = dict["EmailRecoverTitle"] as? String {
                        self.emailRecoverTitle = value
                    }
                    if let value = dict["EmailTitle"] as? String {
                        self.emailTitle = value
                    }
                    if let value = dict["RobotContent"] as? String {
                        self.robotContent = value
                    }
                    if let value = dict["SmsContent"] as? String {
                        self.smsContent = value
                    }
                    if let value = dict["SmsRecoverContent"] as? String {
                        self.smsRecoverContent = value
                    }
                    if let value = dict["TtsContent"] as? String {
                        self.ttsContent = value
                    }
                    if let value = dict["TtsRecoverContent"] as? String {
                        self.ttsRecoverContent = value
                    }
                }
            }
            public var directedMode: Bool?

            public var escalationPolicyId: Int64?

            public var groupRule: ListNotificationPoliciesResponseBody.PageBean.NotificationPolicies.GroupRule?

            public var id: Int64?

            public var integrationId: Int64?

            public var matchingRules: [ListNotificationPoliciesResponseBody.PageBean.NotificationPolicies.MatchingRules]?

            public var name: String?

            public var notifyRule: ListNotificationPoliciesResponseBody.PageBean.NotificationPolicies.NotifyRule?

            public var notifyTemplate: ListNotificationPoliciesResponseBody.PageBean.NotificationPolicies.NotifyTemplate?

            public var repeat_: Bool?

            public var repeatInterval: Int64?

            public var sendRecoverMessage: Bool?

            public var state: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.groupRule?.validate()
                try self.notifyRule?.validate()
                try self.notifyTemplate?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.directedMode != nil {
                    map["DirectedMode"] = self.directedMode!
                }
                if self.escalationPolicyId != nil {
                    map["EscalationPolicyId"] = self.escalationPolicyId!
                }
                if self.groupRule != nil {
                    map["GroupRule"] = self.groupRule?.toMap()
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.integrationId != nil {
                    map["IntegrationId"] = self.integrationId!
                }
                if self.matchingRules != nil {
                    var tmp : [Any] = []
                    for k in self.matchingRules! {
                        tmp.append(k.toMap())
                    }
                    map["MatchingRules"] = tmp
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.notifyRule != nil {
                    map["NotifyRule"] = self.notifyRule?.toMap()
                }
                if self.notifyTemplate != nil {
                    map["NotifyTemplate"] = self.notifyTemplate?.toMap()
                }
                if self.repeat_ != nil {
                    map["Repeat"] = self.repeat_!
                }
                if self.repeatInterval != nil {
                    map["RepeatInterval"] = self.repeatInterval!
                }
                if self.sendRecoverMessage != nil {
                    map["SendRecoverMessage"] = self.sendRecoverMessage!
                }
                if self.state != nil {
                    map["State"] = self.state!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["DirectedMode"] as? Bool {
                    self.directedMode = value
                }
                if let value = dict["EscalationPolicyId"] as? Int64 {
                    self.escalationPolicyId = value
                }
                if let value = dict["GroupRule"] as? [String: Any?] {
                    var model = ListNotificationPoliciesResponseBody.PageBean.NotificationPolicies.GroupRule()
                    model.fromMap(value)
                    self.groupRule = model
                }
                if let value = dict["Id"] as? Int64 {
                    self.id = value
                }
                if let value = dict["IntegrationId"] as? Int64 {
                    self.integrationId = value
                }
                if let value = dict["MatchingRules"] as? [Any?] {
                    var tmp : [ListNotificationPoliciesResponseBody.PageBean.NotificationPolicies.MatchingRules] = []
                    for v in value {
                        if v != nil {
                            var model = ListNotificationPoliciesResponseBody.PageBean.NotificationPolicies.MatchingRules()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.matchingRules = tmp
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["NotifyRule"] as? [String: Any?] {
                    var model = ListNotificationPoliciesResponseBody.PageBean.NotificationPolicies.NotifyRule()
                    model.fromMap(value)
                    self.notifyRule = model
                }
                if let value = dict["NotifyTemplate"] as? [String: Any?] {
                    var model = ListNotificationPoliciesResponseBody.PageBean.NotificationPolicies.NotifyTemplate()
                    model.fromMap(value)
                    self.notifyTemplate = model
                }
                if let value = dict["Repeat"] as? Bool {
                    self.repeat_ = value
                }
                if let value = dict["RepeatInterval"] as? Int64 {
                    self.repeatInterval = value
                }
                if let value = dict["SendRecoverMessage"] as? Bool {
                    self.sendRecoverMessage = value
                }
                if let value = dict["State"] as? String {
                    self.state = value
                }
            }
        }
        public var notificationPolicies: [ListNotificationPoliciesResponseBody.PageBean.NotificationPolicies]?

        public var page: Int64?

        public var size: Int64?

        public var total: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.notificationPolicies != nil {
                var tmp : [Any] = []
                for k in self.notificationPolicies! {
                    tmp.append(k.toMap())
                }
                map["NotificationPolicies"] = tmp
            }
            if self.page != nil {
                map["Page"] = self.page!
            }
            if self.size != nil {
                map["Size"] = self.size!
            }
            if self.total != nil {
                map["Total"] = self.total!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["NotificationPolicies"] as? [Any?] {
                var tmp : [ListNotificationPoliciesResponseBody.PageBean.NotificationPolicies] = []
                for v in value {
                    if v != nil {
                        var model = ListNotificationPoliciesResponseBody.PageBean.NotificationPolicies()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.notificationPolicies = tmp
            }
            if let value = dict["Page"] as? Int64 {
                self.page = value
            }
            if let value = dict["Size"] as? Int64 {
                self.size = value
            }
            if let value = dict["Total"] as? Int64 {
                self.total = value
            }
        }
    }
    public var pageBean: ListNotificationPoliciesResponseBody.PageBean?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.pageBean?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageBean != nil {
            map["PageBean"] = self.pageBean?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageBean"] as? [String: Any?] {
            var model = ListNotificationPoliciesResponseBody.PageBean()
            model.fromMap(value)
            self.pageBean = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListNotificationPoliciesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListNotificationPoliciesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListNotificationPoliciesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListOnCallSchedulesRequest : Tea.TeaModel {
    public var name: String?

    public var page: Int64?

    public var size: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.page != nil {
            map["Page"] = self.page!
        }
        if self.size != nil {
            map["Size"] = self.size!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["Page"] as? Int64 {
            self.page = value
        }
        if let value = dict["Size"] as? Int64 {
            self.size = value
        }
    }
}

public class ListOnCallSchedulesResponseBody : Tea.TeaModel {
    public class PageBean : Tea.TeaModel {
        public class OnCallSchedules : Tea.TeaModel {
            public var description_: String?

            public var id: Int64?

            public var name: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["Id"] as? Int64 {
                    self.id = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
            }
        }
        public var onCallSchedules: [ListOnCallSchedulesResponseBody.PageBean.OnCallSchedules]?

        public var page: Int64?

        public var size: Int64?

        public var total: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.onCallSchedules != nil {
                var tmp : [Any] = []
                for k in self.onCallSchedules! {
                    tmp.append(k.toMap())
                }
                map["OnCallSchedules"] = tmp
            }
            if self.page != nil {
                map["Page"] = self.page!
            }
            if self.size != nil {
                map["Size"] = self.size!
            }
            if self.total != nil {
                map["Total"] = self.total!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["OnCallSchedules"] as? [Any?] {
                var tmp : [ListOnCallSchedulesResponseBody.PageBean.OnCallSchedules] = []
                for v in value {
                    if v != nil {
                        var model = ListOnCallSchedulesResponseBody.PageBean.OnCallSchedules()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.onCallSchedules = tmp
            }
            if let value = dict["Page"] as? Int64 {
                self.page = value
            }
            if let value = dict["Size"] as? Int64 {
                self.size = value
            }
            if let value = dict["Total"] as? Int64 {
                self.total = value
            }
        }
    }
    public var pageBean: ListOnCallSchedulesResponseBody.PageBean?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.pageBean?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageBean != nil {
            map["PageBean"] = self.pageBean?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageBean"] as? [String: Any?] {
            var model = ListOnCallSchedulesResponseBody.PageBean()
            model.fromMap(value)
            self.pageBean = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListOnCallSchedulesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListOnCallSchedulesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListOnCallSchedulesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListPrometheusAlertRulesRequest : Tea.TeaModel {
    public class Tags : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var clusterId: String?

    public var matchExpressions: String?

    public var name: String?

    public var regionId: String?

    public var status: Int32?

    public var tags: [ListPrometheusAlertRulesRequest.Tags]?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.matchExpressions != nil {
            map["MatchExpressions"] = self.matchExpressions!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        if self.tags != nil {
            var tmp : [Any] = []
            for k in self.tags! {
                tmp.append(k.toMap())
            }
            map["Tags"] = tmp
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClusterId"] as? String {
            self.clusterId = value
        }
        if let value = dict["MatchExpressions"] as? String {
            self.matchExpressions = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Status"] as? Int32 {
            self.status = value
        }
        if let value = dict["Tags"] as? [Any?] {
            var tmp : [ListPrometheusAlertRulesRequest.Tags] = []
            for v in value {
                if v != nil {
                    var model = ListPrometheusAlertRulesRequest.Tags()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tags = tmp
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
    }
}

public class ListPrometheusAlertRulesResponseBody : Tea.TeaModel {
    public class PrometheusAlertRules : Tea.TeaModel {
        public class Annotations : Tea.TeaModel {
            public var name: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public class Labels : Tea.TeaModel {
            public var name: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public class Tags : Tea.TeaModel {
            public var key: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.key != nil {
                    map["Key"] = self.key!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Key"] as? String {
                    self.key = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public var alertId: Int64?

        public var alertName: String?

        public var annotations: [ListPrometheusAlertRulesResponseBody.PrometheusAlertRules.Annotations]?

        public var clusterId: String?

        public var dispatchRuleId: Int64?

        public var duration: String?

        public var expression: String?

        public var labels: [ListPrometheusAlertRulesResponseBody.PrometheusAlertRules.Labels]?

        public var message: String?

        public var notifyType: String?

        public var status: Int32?

        public var tags: [ListPrometheusAlertRulesResponseBody.PrometheusAlertRules.Tags]?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.alertId != nil {
                map["AlertId"] = self.alertId!
            }
            if self.alertName != nil {
                map["AlertName"] = self.alertName!
            }
            if self.annotations != nil {
                var tmp : [Any] = []
                for k in self.annotations! {
                    tmp.append(k.toMap())
                }
                map["Annotations"] = tmp
            }
            if self.clusterId != nil {
                map["ClusterId"] = self.clusterId!
            }
            if self.dispatchRuleId != nil {
                map["DispatchRuleId"] = self.dispatchRuleId!
            }
            if self.duration != nil {
                map["Duration"] = self.duration!
            }
            if self.expression != nil {
                map["Expression"] = self.expression!
            }
            if self.labels != nil {
                var tmp : [Any] = []
                for k in self.labels! {
                    tmp.append(k.toMap())
                }
                map["Labels"] = tmp
            }
            if self.message != nil {
                map["Message"] = self.message!
            }
            if self.notifyType != nil {
                map["NotifyType"] = self.notifyType!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.tags != nil {
                var tmp : [Any] = []
                for k in self.tags! {
                    tmp.append(k.toMap())
                }
                map["Tags"] = tmp
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AlertId"] as? Int64 {
                self.alertId = value
            }
            if let value = dict["AlertName"] as? String {
                self.alertName = value
            }
            if let value = dict["Annotations"] as? [Any?] {
                var tmp : [ListPrometheusAlertRulesResponseBody.PrometheusAlertRules.Annotations] = []
                for v in value {
                    if v != nil {
                        var model = ListPrometheusAlertRulesResponseBody.PrometheusAlertRules.Annotations()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.annotations = tmp
            }
            if let value = dict["ClusterId"] as? String {
                self.clusterId = value
            }
            if let value = dict["DispatchRuleId"] as? Int64 {
                self.dispatchRuleId = value
            }
            if let value = dict["Duration"] as? String {
                self.duration = value
            }
            if let value = dict["Expression"] as? String {
                self.expression = value
            }
            if let value = dict["Labels"] as? [Any?] {
                var tmp : [ListPrometheusAlertRulesResponseBody.PrometheusAlertRules.Labels] = []
                for v in value {
                    if v != nil {
                        var model = ListPrometheusAlertRulesResponseBody.PrometheusAlertRules.Labels()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.labels = tmp
            }
            if let value = dict["Message"] as? String {
                self.message = value
            }
            if let value = dict["NotifyType"] as? String {
                self.notifyType = value
            }
            if let value = dict["Status"] as? Int32 {
                self.status = value
            }
            if let value = dict["Tags"] as? [Any?] {
                var tmp : [ListPrometheusAlertRulesResponseBody.PrometheusAlertRules.Tags] = []
                for v in value {
                    if v != nil {
                        var model = ListPrometheusAlertRulesResponseBody.PrometheusAlertRules.Tags()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.tags = tmp
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
        }
    }
    public var code: Int64?

    public var message: String?

    public var prometheusAlertRules: [ListPrometheusAlertRulesResponseBody.PrometheusAlertRules]?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.prometheusAlertRules != nil {
            var tmp : [Any] = []
            for k in self.prometheusAlertRules! {
                tmp.append(k.toMap())
            }
            map["PrometheusAlertRules"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int64 {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["PrometheusAlertRules"] as? [Any?] {
            var tmp : [ListPrometheusAlertRulesResponseBody.PrometheusAlertRules] = []
            for v in value {
                if v != nil {
                    var model = ListPrometheusAlertRulesResponseBody.PrometheusAlertRules()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.prometheusAlertRules = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ListPrometheusAlertRulesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListPrometheusAlertRulesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListPrometheusAlertRulesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListPrometheusAlertTemplatesRequest : Tea.TeaModel {
    public var clusterId: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClusterId"] as? String {
            self.clusterId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class ListPrometheusAlertTemplatesResponseBody : Tea.TeaModel {
    public class PrometheusAlertTemplates : Tea.TeaModel {
        public class Annotations : Tea.TeaModel {
            public var name: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public class Labels : Tea.TeaModel {
            public var name: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public var alertName: String?

        public var annotations: [ListPrometheusAlertTemplatesResponseBody.PrometheusAlertTemplates.Annotations]?

        public var description_: String?

        public var duration: String?

        public var expression: String?

        public var labels: [ListPrometheusAlertTemplatesResponseBody.PrometheusAlertTemplates.Labels]?

        public var type: String?

        public var version: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.alertName != nil {
                map["AlertName"] = self.alertName!
            }
            if self.annotations != nil {
                var tmp : [Any] = []
                for k in self.annotations! {
                    tmp.append(k.toMap())
                }
                map["Annotations"] = tmp
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.duration != nil {
                map["Duration"] = self.duration!
            }
            if self.expression != nil {
                map["Expression"] = self.expression!
            }
            if self.labels != nil {
                var tmp : [Any] = []
                for k in self.labels! {
                    tmp.append(k.toMap())
                }
                map["Labels"] = tmp
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            if self.version != nil {
                map["Version"] = self.version!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AlertName"] as? String {
                self.alertName = value
            }
            if let value = dict["Annotations"] as? [Any?] {
                var tmp : [ListPrometheusAlertTemplatesResponseBody.PrometheusAlertTemplates.Annotations] = []
                for v in value {
                    if v != nil {
                        var model = ListPrometheusAlertTemplatesResponseBody.PrometheusAlertTemplates.Annotations()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.annotations = tmp
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["Duration"] as? String {
                self.duration = value
            }
            if let value = dict["Expression"] as? String {
                self.expression = value
            }
            if let value = dict["Labels"] as? [Any?] {
                var tmp : [ListPrometheusAlertTemplatesResponseBody.PrometheusAlertTemplates.Labels] = []
                for v in value {
                    if v != nil {
                        var model = ListPrometheusAlertTemplatesResponseBody.PrometheusAlertTemplates.Labels()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.labels = tmp
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
            if let value = dict["Version"] as? String {
                self.version = value
            }
        }
    }
    public var prometheusAlertTemplates: [ListPrometheusAlertTemplatesResponseBody.PrometheusAlertTemplates]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.prometheusAlertTemplates != nil {
            var tmp : [Any] = []
            for k in self.prometheusAlertTemplates! {
                tmp.append(k.toMap())
            }
            map["PrometheusAlertTemplates"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PrometheusAlertTemplates"] as? [Any?] {
            var tmp : [ListPrometheusAlertTemplatesResponseBody.PrometheusAlertTemplates] = []
            for v in value {
                if v != nil {
                    var model = ListPrometheusAlertTemplatesResponseBody.PrometheusAlertTemplates()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.prometheusAlertTemplates = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListPrometheusAlertTemplatesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListPrometheusAlertTemplatesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListPrometheusAlertTemplatesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListPrometheusGlobalViewRequest : Tea.TeaModel {
    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class ListPrometheusGlobalViewResponseBody : Tea.TeaModel {
    public var code: Int32?

    public var data: String?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListPrometheusGlobalViewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListPrometheusGlobalViewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListPrometheusGlobalViewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListPrometheusInstanceByTagAndResourceGroupIdRequest : Tea.TeaModel {
    public class Tag : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var regionId: String?

    public var resourceGroupId: String?

    public var tag: [ListPrometheusInstanceByTagAndResourceGroupIdRequest.Tag]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceGroupId != nil {
            map["ResourceGroupId"] = self.resourceGroupId!
        }
        if self.tag != nil {
            var tmp : [Any] = []
            for k in self.tag! {
                tmp.append(k.toMap())
            }
            map["Tag"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceGroupId"] as? String {
            self.resourceGroupId = value
        }
        if let value = dict["Tag"] as? [Any?] {
            var tmp : [ListPrometheusInstanceByTagAndResourceGroupIdRequest.Tag] = []
            for v in value {
                if v != nil {
                    var model = ListPrometheusInstanceByTagAndResourceGroupIdRequest.Tag()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tag = tmp
        }
    }
}

public class ListPrometheusInstanceByTagAndResourceGroupIdResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class PrometheusInstances : Tea.TeaModel {
            public class Tags : Tea.TeaModel {
                public var tagKey: String?

                public var tagValue: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.tagKey != nil {
                        map["TagKey"] = self.tagKey!
                    }
                    if self.tagValue != nil {
                        map["TagValue"] = self.tagValue!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["TagKey"] as? String {
                        self.tagKey = value
                    }
                    if let value = dict["TagValue"] as? String {
                        self.tagValue = value
                    }
                }
            }
            public var authToken: String?

            public var clusterId: String?

            public var clusterName: String?

            public var clusterType: String?

            public var grafanaInstanceId: String?

            public var httpApiInterUrl: String?

            public var httpApiIntraUrl: String?

            public var paymentType: String?

            public var pushGatewayInterUrl: String?

            public var pushGatewayIntraUrl: String?

            public var regionId: String?

            public var remoteReadInterUrl: String?

            public var remoteReadIntraUrl: String?

            public var remoteWriteInterUrl: String?

            public var remoteWriteIntraUrl: String?

            public var resourceGroupId: String?

            public var resourceType: String?

            public var securityGroupId: String?

            public var subClustersJson: String?

            public var tags: [ListPrometheusInstanceByTagAndResourceGroupIdResponseBody.Data.PrometheusInstances.Tags]?

            public var userId: String?

            public var vSwitchId: String?

            public var vpcId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.authToken != nil {
                    map["AuthToken"] = self.authToken!
                }
                if self.clusterId != nil {
                    map["ClusterId"] = self.clusterId!
                }
                if self.clusterName != nil {
                    map["ClusterName"] = self.clusterName!
                }
                if self.clusterType != nil {
                    map["ClusterType"] = self.clusterType!
                }
                if self.grafanaInstanceId != nil {
                    map["GrafanaInstanceId"] = self.grafanaInstanceId!
                }
                if self.httpApiInterUrl != nil {
                    map["HttpApiInterUrl"] = self.httpApiInterUrl!
                }
                if self.httpApiIntraUrl != nil {
                    map["HttpApiIntraUrl"] = self.httpApiIntraUrl!
                }
                if self.paymentType != nil {
                    map["PaymentType"] = self.paymentType!
                }
                if self.pushGatewayInterUrl != nil {
                    map["PushGatewayInterUrl"] = self.pushGatewayInterUrl!
                }
                if self.pushGatewayIntraUrl != nil {
                    map["PushGatewayIntraUrl"] = self.pushGatewayIntraUrl!
                }
                if self.regionId != nil {
                    map["RegionId"] = self.regionId!
                }
                if self.remoteReadInterUrl != nil {
                    map["RemoteReadInterUrl"] = self.remoteReadInterUrl!
                }
                if self.remoteReadIntraUrl != nil {
                    map["RemoteReadIntraUrl"] = self.remoteReadIntraUrl!
                }
                if self.remoteWriteInterUrl != nil {
                    map["RemoteWriteInterUrl"] = self.remoteWriteInterUrl!
                }
                if self.remoteWriteIntraUrl != nil {
                    map["RemoteWriteIntraUrl"] = self.remoteWriteIntraUrl!
                }
                if self.resourceGroupId != nil {
                    map["ResourceGroupId"] = self.resourceGroupId!
                }
                if self.resourceType != nil {
                    map["ResourceType"] = self.resourceType!
                }
                if self.securityGroupId != nil {
                    map["SecurityGroupId"] = self.securityGroupId!
                }
                if self.subClustersJson != nil {
                    map["SubClustersJson"] = self.subClustersJson!
                }
                if self.tags != nil {
                    var tmp : [Any] = []
                    for k in self.tags! {
                        tmp.append(k.toMap())
                    }
                    map["Tags"] = tmp
                }
                if self.userId != nil {
                    map["UserId"] = self.userId!
                }
                if self.vSwitchId != nil {
                    map["VSwitchId"] = self.vSwitchId!
                }
                if self.vpcId != nil {
                    map["VpcId"] = self.vpcId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AuthToken"] as? String {
                    self.authToken = value
                }
                if let value = dict["ClusterId"] as? String {
                    self.clusterId = value
                }
                if let value = dict["ClusterName"] as? String {
                    self.clusterName = value
                }
                if let value = dict["ClusterType"] as? String {
                    self.clusterType = value
                }
                if let value = dict["GrafanaInstanceId"] as? String {
                    self.grafanaInstanceId = value
                }
                if let value = dict["HttpApiInterUrl"] as? String {
                    self.httpApiInterUrl = value
                }
                if let value = dict["HttpApiIntraUrl"] as? String {
                    self.httpApiIntraUrl = value
                }
                if let value = dict["PaymentType"] as? String {
                    self.paymentType = value
                }
                if let value = dict["PushGatewayInterUrl"] as? String {
                    self.pushGatewayInterUrl = value
                }
                if let value = dict["PushGatewayIntraUrl"] as? String {
                    self.pushGatewayIntraUrl = value
                }
                if let value = dict["RegionId"] as? String {
                    self.regionId = value
                }
                if let value = dict["RemoteReadInterUrl"] as? String {
                    self.remoteReadInterUrl = value
                }
                if let value = dict["RemoteReadIntraUrl"] as? String {
                    self.remoteReadIntraUrl = value
                }
                if let value = dict["RemoteWriteInterUrl"] as? String {
                    self.remoteWriteInterUrl = value
                }
                if let value = dict["RemoteWriteIntraUrl"] as? String {
                    self.remoteWriteIntraUrl = value
                }
                if let value = dict["ResourceGroupId"] as? String {
                    self.resourceGroupId = value
                }
                if let value = dict["ResourceType"] as? String {
                    self.resourceType = value
                }
                if let value = dict["SecurityGroupId"] as? String {
                    self.securityGroupId = value
                }
                if let value = dict["SubClustersJson"] as? String {
                    self.subClustersJson = value
                }
                if let value = dict["Tags"] as? [Any?] {
                    var tmp : [ListPrometheusInstanceByTagAndResourceGroupIdResponseBody.Data.PrometheusInstances.Tags] = []
                    for v in value {
                        if v != nil {
                            var model = ListPrometheusInstanceByTagAndResourceGroupIdResponseBody.Data.PrometheusInstances.Tags()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.tags = tmp
                }
                if let value = dict["UserId"] as? String {
                    self.userId = value
                }
                if let value = dict["VSwitchId"] as? String {
                    self.vSwitchId = value
                }
                if let value = dict["VpcId"] as? String {
                    self.vpcId = value
                }
            }
        }
        public var prometheusInstances: [ListPrometheusInstanceByTagAndResourceGroupIdResponseBody.Data.PrometheusInstances]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.prometheusInstances != nil {
                var tmp : [Any] = []
                for k in self.prometheusInstances! {
                    tmp.append(k.toMap())
                }
                map["PrometheusInstances"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["PrometheusInstances"] as? [Any?] {
                var tmp : [ListPrometheusInstanceByTagAndResourceGroupIdResponseBody.Data.PrometheusInstances] = []
                for v in value {
                    if v != nil {
                        var model = ListPrometheusInstanceByTagAndResourceGroupIdResponseBody.Data.PrometheusInstances()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.prometheusInstances = tmp
            }
        }
    }
    public var code: String?

    public var data: ListPrometheusInstanceByTagAndResourceGroupIdResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ListPrometheusInstanceByTagAndResourceGroupIdResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListPrometheusInstanceByTagAndResourceGroupIdResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListPrometheusInstanceByTagAndResourceGroupIdResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListPrometheusInstanceByTagAndResourceGroupIdResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListPrometheusInstancesRequest : Tea.TeaModel {
    public var clusterType: String?

    public var regionId: String?

    public var showGlobalView: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clusterType != nil {
            map["ClusterType"] = self.clusterType!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.showGlobalView != nil {
            map["ShowGlobalView"] = self.showGlobalView!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClusterType"] as? String {
            self.clusterType = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ShowGlobalView"] as? Bool {
            self.showGlobalView = value
        }
    }
}

public class ListPrometheusInstancesResponseBody : Tea.TeaModel {
    public var code: Int32?

    public var data: String?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListPrometheusInstancesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListPrometheusInstancesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListPrometheusInstancesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListPrometheusIntegrationRequest : Tea.TeaModel {
    public var clusterId: String?

    public var integrationType: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.integrationType != nil {
            map["IntegrationType"] = self.integrationType!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClusterId"] as? String {
            self.clusterId = value
        }
        if let value = dict["IntegrationType"] as? String {
            self.integrationType = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class ListPrometheusIntegrationResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var canDelete: Bool?

        public var canEditor: Bool?

        public var clusterId: String?

        public var containerName: String?

        public var describe: String?

        public var exporterType: String?

        public var instanceId: Int64?

        public var instanceName: String?

        public var integrationType: String?

        public var namespace: String?

        public var needUpgrade: Bool?

        public var param: String?

        public var podName: String?

        public var showDescribe: Bool?

        public var showLog: Bool?

        public var status: String?

        public var target: String?

        public var version: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.canDelete != nil {
                map["CanDelete"] = self.canDelete!
            }
            if self.canEditor != nil {
                map["CanEditor"] = self.canEditor!
            }
            if self.clusterId != nil {
                map["ClusterId"] = self.clusterId!
            }
            if self.containerName != nil {
                map["ContainerName"] = self.containerName!
            }
            if self.describe != nil {
                map["Describe"] = self.describe!
            }
            if self.exporterType != nil {
                map["ExporterType"] = self.exporterType!
            }
            if self.instanceId != nil {
                map["InstanceId"] = self.instanceId!
            }
            if self.instanceName != nil {
                map["InstanceName"] = self.instanceName!
            }
            if self.integrationType != nil {
                map["IntegrationType"] = self.integrationType!
            }
            if self.namespace != nil {
                map["Namespace"] = self.namespace!
            }
            if self.needUpgrade != nil {
                map["NeedUpgrade"] = self.needUpgrade!
            }
            if self.param != nil {
                map["Param"] = self.param!
            }
            if self.podName != nil {
                map["PodName"] = self.podName!
            }
            if self.showDescribe != nil {
                map["ShowDescribe"] = self.showDescribe!
            }
            if self.showLog != nil {
                map["ShowLog"] = self.showLog!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.target != nil {
                map["Target"] = self.target!
            }
            if self.version != nil {
                map["Version"] = self.version!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CanDelete"] as? Bool {
                self.canDelete = value
            }
            if let value = dict["CanEditor"] as? Bool {
                self.canEditor = value
            }
            if let value = dict["ClusterId"] as? String {
                self.clusterId = value
            }
            if let value = dict["ContainerName"] as? String {
                self.containerName = value
            }
            if let value = dict["Describe"] as? String {
                self.describe = value
            }
            if let value = dict["ExporterType"] as? String {
                self.exporterType = value
            }
            if let value = dict["InstanceId"] as? Int64 {
                self.instanceId = value
            }
            if let value = dict["InstanceName"] as? String {
                self.instanceName = value
            }
            if let value = dict["IntegrationType"] as? String {
                self.integrationType = value
            }
            if let value = dict["Namespace"] as? String {
                self.namespace = value
            }
            if let value = dict["NeedUpgrade"] as? Bool {
                self.needUpgrade = value
            }
            if let value = dict["Param"] as? String {
                self.param = value
            }
            if let value = dict["PodName"] as? String {
                self.podName = value
            }
            if let value = dict["ShowDescribe"] as? Bool {
                self.showDescribe = value
            }
            if let value = dict["ShowLog"] as? Bool {
                self.showLog = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["Target"] as? String {
                self.target = value
            }
            if let value = dict["Version"] as? String {
                self.version = value
            }
        }
    }
    public var code: Int32?

    public var data: [ListPrometheusIntegrationResponseBody.Data]?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [ListPrometheusIntegrationResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = ListPrometheusIntegrationResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListPrometheusIntegrationResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListPrometheusIntegrationResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListPrometheusIntegrationResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListPrometheusMonitoringRequest : Tea.TeaModel {
    public var clusterId: String?

    public var regionId: String?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClusterId"] as? String {
            self.clusterId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
    }
}

public class ListPrometheusMonitoringResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var clusterId: String?

        public var configYaml: String?

        public var monitoringName: String?

        public var status: String?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.clusterId != nil {
                map["ClusterId"] = self.clusterId!
            }
            if self.configYaml != nil {
                map["ConfigYaml"] = self.configYaml!
            }
            if self.monitoringName != nil {
                map["MonitoringName"] = self.monitoringName!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ClusterId"] as? String {
                self.clusterId = value
            }
            if let value = dict["ConfigYaml"] as? String {
                self.configYaml = value
            }
            if let value = dict["MonitoringName"] as? String {
                self.monitoringName = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
        }
    }
    public var code: Int32?

    public var data: [ListPrometheusMonitoringResponseBody.Data]?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [ListPrometheusMonitoringResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = ListPrometheusMonitoringResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListPrometheusMonitoringResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListPrometheusMonitoringResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListPrometheusMonitoringResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListRetcodeAppsRequest : Tea.TeaModel {
    public class Tags : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var regionId: String?

    public var resourceGroupId: String?

    public var tags: [ListRetcodeAppsRequest.Tags]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceGroupId != nil {
            map["ResourceGroupId"] = self.resourceGroupId!
        }
        if self.tags != nil {
            var tmp : [Any] = []
            for k in self.tags! {
                tmp.append(k.toMap())
            }
            map["Tags"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceGroupId"] as? String {
            self.resourceGroupId = value
        }
        if let value = dict["Tags"] as? [Any?] {
            var tmp : [ListRetcodeAppsRequest.Tags] = []
            for v in value {
                if v != nil {
                    var model = ListRetcodeAppsRequest.Tags()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tags = tmp
        }
    }
}

public class ListRetcodeAppsResponseBody : Tea.TeaModel {
    public class RetcodeApps : Tea.TeaModel {
        public class Tags : Tea.TeaModel {
            public var key: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.key != nil {
                    map["Key"] = self.key!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Key"] as? String {
                    self.key = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public var appId: Int64?

        public var appName: String?

        public var nickName: String?

        public var pid: String?

        public var resourceGroupId: String?

        public var retcodeAppType: String?

        public var tags: [ListRetcodeAppsResponseBody.RetcodeApps.Tags]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.appId != nil {
                map["AppId"] = self.appId!
            }
            if self.appName != nil {
                map["AppName"] = self.appName!
            }
            if self.nickName != nil {
                map["NickName"] = self.nickName!
            }
            if self.pid != nil {
                map["Pid"] = self.pid!
            }
            if self.resourceGroupId != nil {
                map["ResourceGroupId"] = self.resourceGroupId!
            }
            if self.retcodeAppType != nil {
                map["RetcodeAppType"] = self.retcodeAppType!
            }
            if self.tags != nil {
                var tmp : [Any] = []
                for k in self.tags! {
                    tmp.append(k.toMap())
                }
                map["Tags"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AppId"] as? Int64 {
                self.appId = value
            }
            if let value = dict["AppName"] as? String {
                self.appName = value
            }
            if let value = dict["NickName"] as? String {
                self.nickName = value
            }
            if let value = dict["Pid"] as? String {
                self.pid = value
            }
            if let value = dict["ResourceGroupId"] as? String {
                self.resourceGroupId = value
            }
            if let value = dict["RetcodeAppType"] as? String {
                self.retcodeAppType = value
            }
            if let value = dict["Tags"] as? [Any?] {
                var tmp : [ListRetcodeAppsResponseBody.RetcodeApps.Tags] = []
                for v in value {
                    if v != nil {
                        var model = ListRetcodeAppsResponseBody.RetcodeApps.Tags()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.tags = tmp
            }
        }
    }
    public var requestId: String?

    public var retcodeApps: [ListRetcodeAppsResponseBody.RetcodeApps]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.retcodeApps != nil {
            var tmp : [Any] = []
            for k in self.retcodeApps! {
                tmp.append(k.toMap())
            }
            map["RetcodeApps"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["RetcodeApps"] as? [Any?] {
            var tmp : [ListRetcodeAppsResponseBody.RetcodeApps] = []
            for v in value {
                if v != nil {
                    var model = ListRetcodeAppsResponseBody.RetcodeApps()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.retcodeApps = tmp
        }
    }
}

public class ListRetcodeAppsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListRetcodeAppsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListRetcodeAppsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListScenarioRequest : Tea.TeaModel {
    public var appId: String?

    public var name: String?

    public var regionId: String?

    public var scenario: String?

    public var sign: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.scenario != nil {
            map["Scenario"] = self.scenario!
        }
        if self.sign != nil {
            map["Sign"] = self.sign!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppId"] as? String {
            self.appId = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Scenario"] as? String {
            self.scenario = value
        }
        if let value = dict["Sign"] as? String {
            self.sign = value
        }
    }
}

public class ListScenarioResponseBody : Tea.TeaModel {
    public class ArmsScenarios : Tea.TeaModel {
        public var appId: String?

        public var createTime: String?

        public var extensions: String?

        public var id: Int64?

        public var name: String?

        public var regionId: String?

        public var sign: String?

        public var updateTime: String?

        public var userId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.appId != nil {
                map["AppId"] = self.appId!
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.extensions != nil {
                map["Extensions"] = self.extensions!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.regionId != nil {
                map["RegionId"] = self.regionId!
            }
            if self.sign != nil {
                map["Sign"] = self.sign!
            }
            if self.updateTime != nil {
                map["UpdateTime"] = self.updateTime!
            }
            if self.userId != nil {
                map["UserId"] = self.userId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AppId"] as? String {
                self.appId = value
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["Extensions"] as? String {
                self.extensions = value
            }
            if let value = dict["Id"] as? Int64 {
                self.id = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["RegionId"] as? String {
                self.regionId = value
            }
            if let value = dict["Sign"] as? String {
                self.sign = value
            }
            if let value = dict["UpdateTime"] as? String {
                self.updateTime = value
            }
            if let value = dict["UserId"] as? String {
                self.userId = value
            }
        }
    }
    public var armsScenarios: [ListScenarioResponseBody.ArmsScenarios]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.armsScenarios != nil {
            var tmp : [Any] = []
            for k in self.armsScenarios! {
                tmp.append(k.toMap())
            }
            map["ArmsScenarios"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ArmsScenarios"] as? [Any?] {
            var tmp : [ListScenarioResponseBody.ArmsScenarios] = []
            for v in value {
                if v != nil {
                    var model = ListScenarioResponseBody.ArmsScenarios()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.armsScenarios = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListScenarioResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListScenarioResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListScenarioResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListSilencePoliciesRequest : Tea.TeaModel {
    public var isDetail: Bool?

    public var name: String?

    public var page: Int64?

    public var regionId: String?

    public var size: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.isDetail != nil {
            map["IsDetail"] = self.isDetail!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.page != nil {
            map["Page"] = self.page!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.size != nil {
            map["Size"] = self.size!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["IsDetail"] as? Bool {
            self.isDetail = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["Page"] as? Int64 {
            self.page = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Size"] as? Int64 {
            self.size = value
        }
    }
}

public class ListSilencePoliciesResponseBody : Tea.TeaModel {
    public class PageBean : Tea.TeaModel {
        public class SilencePolicies : Tea.TeaModel {
            public class MatchingRules : Tea.TeaModel {
                public class MatchingConditions : Tea.TeaModel {
                    public var key: String?

                    public var operator_: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.key != nil {
                            map["Key"] = self.key!
                        }
                        if self.operator_ != nil {
                            map["Operator"] = self.operator_!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Key"] as? String {
                            self.key = value
                        }
                        if let value = dict["Operator"] as? String {
                            self.operator_ = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public var matchingConditions: [ListSilencePoliciesResponseBody.PageBean.SilencePolicies.MatchingRules.MatchingConditions]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.matchingConditions != nil {
                        var tmp : [Any] = []
                        for k in self.matchingConditions! {
                            tmp.append(k.toMap())
                        }
                        map["MatchingConditions"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["MatchingConditions"] as? [Any?] {
                        var tmp : [ListSilencePoliciesResponseBody.PageBean.SilencePolicies.MatchingRules.MatchingConditions] = []
                        for v in value {
                            if v != nil {
                                var model = ListSilencePoliciesResponseBody.PageBean.SilencePolicies.MatchingRules.MatchingConditions()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.matchingConditions = tmp
                    }
                }
            }
            public var effectiveTimeType: String?

            public var id: Int64?

            public var matchingRules: [ListSilencePoliciesResponseBody.PageBean.SilencePolicies.MatchingRules]?

            public var name: String?

            public var state: String?

            public var timePeriod: String?

            public var timeSlots: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.effectiveTimeType != nil {
                    map["EffectiveTimeType"] = self.effectiveTimeType!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.matchingRules != nil {
                    var tmp : [Any] = []
                    for k in self.matchingRules! {
                        tmp.append(k.toMap())
                    }
                    map["MatchingRules"] = tmp
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.state != nil {
                    map["State"] = self.state!
                }
                if self.timePeriod != nil {
                    map["TimePeriod"] = self.timePeriod!
                }
                if self.timeSlots != nil {
                    map["TimeSlots"] = self.timeSlots!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["EffectiveTimeType"] as? String {
                    self.effectiveTimeType = value
                }
                if let value = dict["Id"] as? Int64 {
                    self.id = value
                }
                if let value = dict["MatchingRules"] as? [Any?] {
                    var tmp : [ListSilencePoliciesResponseBody.PageBean.SilencePolicies.MatchingRules] = []
                    for v in value {
                        if v != nil {
                            var model = ListSilencePoliciesResponseBody.PageBean.SilencePolicies.MatchingRules()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.matchingRules = tmp
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["State"] as? String {
                    self.state = value
                }
                if let value = dict["TimePeriod"] as? String {
                    self.timePeriod = value
                }
                if let value = dict["TimeSlots"] as? String {
                    self.timeSlots = value
                }
            }
        }
        public var page: Int64?

        public var silencePolicies: [ListSilencePoliciesResponseBody.PageBean.SilencePolicies]?

        public var size: Int64?

        public var total: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.page != nil {
                map["Page"] = self.page!
            }
            if self.silencePolicies != nil {
                var tmp : [Any] = []
                for k in self.silencePolicies! {
                    tmp.append(k.toMap())
                }
                map["SilencePolicies"] = tmp
            }
            if self.size != nil {
                map["Size"] = self.size!
            }
            if self.total != nil {
                map["Total"] = self.total!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Page"] as? Int64 {
                self.page = value
            }
            if let value = dict["SilencePolicies"] as? [Any?] {
                var tmp : [ListSilencePoliciesResponseBody.PageBean.SilencePolicies] = []
                for v in value {
                    if v != nil {
                        var model = ListSilencePoliciesResponseBody.PageBean.SilencePolicies()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.silencePolicies = tmp
            }
            if let value = dict["Size"] as? Int64 {
                self.size = value
            }
            if let value = dict["Total"] as? Int64 {
                self.total = value
            }
        }
    }
    public var pageBean: ListSilencePoliciesResponseBody.PageBean?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.pageBean?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageBean != nil {
            map["PageBean"] = self.pageBean?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageBean"] as? [String: Any?] {
            var model = ListSilencePoliciesResponseBody.PageBean()
            model.fromMap(value)
            self.pageBean = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListSilencePoliciesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListSilencePoliciesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListSilencePoliciesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListSyntheticDetailRequest : Tea.TeaModel {
    public class AdvancedFilters : Tea.TeaModel {
        public var key: String?

        public var opType: String?

        public var value: Any?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.opType != nil {
                map["OpType"] = self.opType!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["OpType"] as? String {
                self.opType = value
            }
            if let value = dict["Value"] as? Any {
                self.value = value
            }
        }
    }
    public class ExactFilters : Tea.TeaModel {
        public var key: String?

        public var opType: String?

        public var value: Any?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.opType != nil {
                map["OpType"] = self.opType!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["OpType"] as? String {
                self.opType = value
            }
            if let value = dict["Value"] as? Any {
                self.value = value
            }
        }
    }
    public var advancedFilters: [ListSyntheticDetailRequest.AdvancedFilters]?

    public var category: String?

    public var detail: String?

    public var endTime: Int64?

    public var exactFilters: [ListSyntheticDetailRequest.ExactFilters]?

    public var filters: [String: String]?

    public var order: String?

    public var orderBy: String?

    public var page: Int32?

    public var pageSize: Int32?

    public var regionId: String?

    public var startTime: Int64?

    public var syntheticType: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.advancedFilters != nil {
            var tmp : [Any] = []
            for k in self.advancedFilters! {
                tmp.append(k.toMap())
            }
            map["AdvancedFilters"] = tmp
        }
        if self.category != nil {
            map["Category"] = self.category!
        }
        if self.detail != nil {
            map["Detail"] = self.detail!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.exactFilters != nil {
            var tmp : [Any] = []
            for k in self.exactFilters! {
                tmp.append(k.toMap())
            }
            map["ExactFilters"] = tmp
        }
        if self.filters != nil {
            map["Filters"] = self.filters!
        }
        if self.order != nil {
            map["Order"] = self.order!
        }
        if self.orderBy != nil {
            map["OrderBy"] = self.orderBy!
        }
        if self.page != nil {
            map["Page"] = self.page!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.syntheticType != nil {
            map["SyntheticType"] = self.syntheticType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AdvancedFilters"] as? [Any?] {
            var tmp : [ListSyntheticDetailRequest.AdvancedFilters] = []
            for v in value {
                if v != nil {
                    var model = ListSyntheticDetailRequest.AdvancedFilters()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.advancedFilters = tmp
        }
        if let value = dict["Category"] as? String {
            self.category = value
        }
        if let value = dict["Detail"] as? String {
            self.detail = value
        }
        if let value = dict["EndTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["ExactFilters"] as? [Any?] {
            var tmp : [ListSyntheticDetailRequest.ExactFilters] = []
            for v in value {
                if v != nil {
                    var model = ListSyntheticDetailRequest.ExactFilters()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.exactFilters = tmp
        }
        if let value = dict["Filters"] as? [String: String] {
            self.filters = value
        }
        if let value = dict["Order"] as? String {
            self.order = value
        }
        if let value = dict["OrderBy"] as? String {
            self.orderBy = value
        }
        if let value = dict["Page"] as? Int32 {
            self.page = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
        if let value = dict["SyntheticType"] as? Int32 {
            self.syntheticType = value
        }
    }
}

public class ListSyntheticDetailShrinkRequest : Tea.TeaModel {
    public var advancedFiltersShrink: String?

    public var category: String?

    public var detail: String?

    public var endTime: Int64?

    public var exactFiltersShrink: String?

    public var filtersShrink: String?

    public var order: String?

    public var orderBy: String?

    public var page: Int32?

    public var pageSize: Int32?

    public var regionId: String?

    public var startTime: Int64?

    public var syntheticType: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.advancedFiltersShrink != nil {
            map["AdvancedFilters"] = self.advancedFiltersShrink!
        }
        if self.category != nil {
            map["Category"] = self.category!
        }
        if self.detail != nil {
            map["Detail"] = self.detail!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.exactFiltersShrink != nil {
            map["ExactFilters"] = self.exactFiltersShrink!
        }
        if self.filtersShrink != nil {
            map["Filters"] = self.filtersShrink!
        }
        if self.order != nil {
            map["Order"] = self.order!
        }
        if self.orderBy != nil {
            map["OrderBy"] = self.orderBy!
        }
        if self.page != nil {
            map["Page"] = self.page!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.syntheticType != nil {
            map["SyntheticType"] = self.syntheticType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AdvancedFilters"] as? String {
            self.advancedFiltersShrink = value
        }
        if let value = dict["Category"] as? String {
            self.category = value
        }
        if let value = dict["Detail"] as? String {
            self.detail = value
        }
        if let value = dict["EndTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["ExactFilters"] as? String {
            self.exactFiltersShrink = value
        }
        if let value = dict["Filters"] as? String {
            self.filtersShrink = value
        }
        if let value = dict["Order"] as? String {
            self.order = value
        }
        if let value = dict["OrderBy"] as? String {
            self.orderBy = value
        }
        if let value = dict["Page"] as? Int32 {
            self.page = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
        if let value = dict["SyntheticType"] as? Int32 {
            self.syntheticType = value
        }
    }
}

public class ListSyntheticDetailResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var items: [[String: Any]]?

        public var page: Int32?

        public var pageSize: Int32?

        public var taskCreateTime: Int64?

        public var total: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.items != nil {
                map["Items"] = self.items!
            }
            if self.page != nil {
                map["Page"] = self.page!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.taskCreateTime != nil {
                map["TaskCreateTime"] = self.taskCreateTime!
            }
            if self.total != nil {
                map["Total"] = self.total!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Items"] as? [[String: Any]] {
                self.items = value
            }
            if let value = dict["Page"] as? Int32 {
                self.page = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
            if let value = dict["TaskCreateTime"] as? Int64 {
                self.taskCreateTime = value
            }
            if let value = dict["Total"] as? Int32 {
                self.total = value
            }
        }
    }
    public var code: Int64?

    public var data: ListSyntheticDetailResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int64 {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ListSyntheticDetailResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListSyntheticDetailResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListSyntheticDetailResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListSyntheticDetailResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListTimingSyntheticTasksRequest : Tea.TeaModel {
    public class Search : Tea.TeaModel {
        public var name: String?

        public var order: Int32?

        public var orderField: String?

        public var page: Int32?

        public var pageSize: Int32?

        public var status: String?

        public var taskIds: [String]?

        public var taskTypes: [Int32]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.order != nil {
                map["Order"] = self.order!
            }
            if self.orderField != nil {
                map["OrderField"] = self.orderField!
            }
            if self.page != nil {
                map["Page"] = self.page!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.taskIds != nil {
                map["TaskIds"] = self.taskIds!
            }
            if self.taskTypes != nil {
                map["TaskTypes"] = self.taskTypes!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["Order"] as? Int32 {
                self.order = value
            }
            if let value = dict["OrderField"] as? String {
                self.orderField = value
            }
            if let value = dict["Page"] as? Int32 {
                self.page = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["TaskIds"] as? [String] {
                self.taskIds = value
            }
            if let value = dict["TaskTypes"] as? [Int32] {
                self.taskTypes = value
            }
        }
    }
    public class Tags : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var regionId: String?

    public var resourceGroupId: String?

    public var search: ListTimingSyntheticTasksRequest.Search?

    public var tags: [ListTimingSyntheticTasksRequest.Tags]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.search?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceGroupId != nil {
            map["ResourceGroupId"] = self.resourceGroupId!
        }
        if self.search != nil {
            map["Search"] = self.search?.toMap()
        }
        if self.tags != nil {
            var tmp : [Any] = []
            for k in self.tags! {
                tmp.append(k.toMap())
            }
            map["Tags"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceGroupId"] as? String {
            self.resourceGroupId = value
        }
        if let value = dict["Search"] as? [String: Any?] {
            var model = ListTimingSyntheticTasksRequest.Search()
            model.fromMap(value)
            self.search = model
        }
        if let value = dict["Tags"] as? [Any?] {
            var tmp : [ListTimingSyntheticTasksRequest.Tags] = []
            for v in value {
                if v != nil {
                    var model = ListTimingSyntheticTasksRequest.Tags()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tags = tmp
        }
    }
}

public class ListTimingSyntheticTasksShrinkRequest : Tea.TeaModel {
    public var regionId: String?

    public var resourceGroupId: String?

    public var searchShrink: String?

    public var tagsShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceGroupId != nil {
            map["ResourceGroupId"] = self.resourceGroupId!
        }
        if self.searchShrink != nil {
            map["Search"] = self.searchShrink!
        }
        if self.tagsShrink != nil {
            map["Tags"] = self.tagsShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceGroupId"] as? String {
            self.resourceGroupId = value
        }
        if let value = dict["Search"] as? String {
            self.searchShrink = value
        }
        if let value = dict["Tags"] as? String {
            self.tagsShrink = value
        }
    }
}

public class ListTimingSyntheticTasksResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Items : Tea.TeaModel {
            public class CommonSetting : Tea.TeaModel {
                public class CustomHost : Tea.TeaModel {
                    public class Hosts : Tea.TeaModel {
                        public var domain: String?

                        public var ipType: Int32?

                        public var ips: [String]?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.domain != nil {
                                map["Domain"] = self.domain!
                            }
                            if self.ipType != nil {
                                map["IpType"] = self.ipType!
                            }
                            if self.ips != nil {
                                map["Ips"] = self.ips!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Domain"] as? String {
                                self.domain = value
                            }
                            if let value = dict["IpType"] as? Int32 {
                                self.ipType = value
                            }
                            if let value = dict["Ips"] as? [String] {
                                self.ips = value
                            }
                        }
                    }
                    public var hosts: [ListTimingSyntheticTasksResponseBody.Data.Items.CommonSetting.CustomHost.Hosts]?

                    public var selectType: Int32?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.hosts != nil {
                            var tmp : [Any] = []
                            for k in self.hosts! {
                                tmp.append(k.toMap())
                            }
                            map["Hosts"] = tmp
                        }
                        if self.selectType != nil {
                            map["SelectType"] = self.selectType!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Hosts"] as? [Any?] {
                            var tmp : [ListTimingSyntheticTasksResponseBody.Data.Items.CommonSetting.CustomHost.Hosts] = []
                            for v in value {
                                if v != nil {
                                    var model = ListTimingSyntheticTasksResponseBody.Data.Items.CommonSetting.CustomHost.Hosts()
                                    if v != nil {
                                        model.fromMap(v as? [String: Any?])
                                    }
                                    tmp.append(model)
                                }
                            }
                            self.hosts = tmp
                        }
                        if let value = dict["SelectType"] as? Int32 {
                            self.selectType = value
                        }
                    }
                }
                public class CustomPrometheusSetting : Tea.TeaModel {
                    public var prometheusClusterId: String?

                    public var prometheusClusterRegion: String?

                    public var prometheusLabels: [String: String]?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.prometheusClusterId != nil {
                            map["PrometheusClusterId"] = self.prometheusClusterId!
                        }
                        if self.prometheusClusterRegion != nil {
                            map["PrometheusClusterRegion"] = self.prometheusClusterRegion!
                        }
                        if self.prometheusLabels != nil {
                            map["PrometheusLabels"] = self.prometheusLabels!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["PrometheusClusterId"] as? String {
                            self.prometheusClusterId = value
                        }
                        if let value = dict["PrometheusClusterRegion"] as? String {
                            self.prometheusClusterRegion = value
                        }
                        if let value = dict["PrometheusLabels"] as? [String: String] {
                            self.prometheusLabels = value
                        }
                    }
                }
                public class CustomVPCSetting : Tea.TeaModel {
                    public var regionId: String?

                    public var secureGroupId: String?

                    public var vSwitchId: String?

                    public var vpcId: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.regionId != nil {
                            map["RegionId"] = self.regionId!
                        }
                        if self.secureGroupId != nil {
                            map["SecureGroupId"] = self.secureGroupId!
                        }
                        if self.vSwitchId != nil {
                            map["VSwitchId"] = self.vSwitchId!
                        }
                        if self.vpcId != nil {
                            map["VpcId"] = self.vpcId!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["RegionId"] as? String {
                            self.regionId = value
                        }
                        if let value = dict["SecureGroupId"] as? String {
                            self.secureGroupId = value
                        }
                        if let value = dict["VSwitchId"] as? String {
                            self.vSwitchId = value
                        }
                        if let value = dict["VpcId"] as? String {
                            self.vpcId = value
                        }
                    }
                }
                public var customHost: ListTimingSyntheticTasksResponseBody.Data.Items.CommonSetting.CustomHost?

                public var customPrometheusSetting: ListTimingSyntheticTasksResponseBody.Data.Items.CommonSetting.CustomPrometheusSetting?

                public var customVPCSetting: ListTimingSyntheticTasksResponseBody.Data.Items.CommonSetting.CustomVPCSetting?

                public var ipType: Int32?

                public var isOpenTrace: Bool?

                public var monitorSamples: Int32?

                public var traceClientType: Int32?

                public var xtraceRegion: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.customHost?.validate()
                    try self.customPrometheusSetting?.validate()
                    try self.customVPCSetting?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.customHost != nil {
                        map["CustomHost"] = self.customHost?.toMap()
                    }
                    if self.customPrometheusSetting != nil {
                        map["CustomPrometheusSetting"] = self.customPrometheusSetting?.toMap()
                    }
                    if self.customVPCSetting != nil {
                        map["CustomVPCSetting"] = self.customVPCSetting?.toMap()
                    }
                    if self.ipType != nil {
                        map["IpType"] = self.ipType!
                    }
                    if self.isOpenTrace != nil {
                        map["IsOpenTrace"] = self.isOpenTrace!
                    }
                    if self.monitorSamples != nil {
                        map["MonitorSamples"] = self.monitorSamples!
                    }
                    if self.traceClientType != nil {
                        map["TraceClientType"] = self.traceClientType!
                    }
                    if self.xtraceRegion != nil {
                        map["XtraceRegion"] = self.xtraceRegion!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["CustomHost"] as? [String: Any?] {
                        var model = ListTimingSyntheticTasksResponseBody.Data.Items.CommonSetting.CustomHost()
                        model.fromMap(value)
                        self.customHost = model
                    }
                    if let value = dict["CustomPrometheusSetting"] as? [String: Any?] {
                        var model = ListTimingSyntheticTasksResponseBody.Data.Items.CommonSetting.CustomPrometheusSetting()
                        model.fromMap(value)
                        self.customPrometheusSetting = model
                    }
                    if let value = dict["CustomVPCSetting"] as? [String: Any?] {
                        var model = ListTimingSyntheticTasksResponseBody.Data.Items.CommonSetting.CustomVPCSetting()
                        model.fromMap(value)
                        self.customVPCSetting = model
                    }
                    if let value = dict["IpType"] as? Int32 {
                        self.ipType = value
                    }
                    if let value = dict["IsOpenTrace"] as? Bool {
                        self.isOpenTrace = value
                    }
                    if let value = dict["MonitorSamples"] as? Int32 {
                        self.monitorSamples = value
                    }
                    if let value = dict["TraceClientType"] as? Int32 {
                        self.traceClientType = value
                    }
                    if let value = dict["XtraceRegion"] as? String {
                        self.xtraceRegion = value
                    }
                }
            }
            public class Tags : Tea.TeaModel {
                public var key: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.key != nil {
                        map["Key"] = self.key!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Key"] as? String {
                        self.key = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public var commonSetting: ListTimingSyntheticTasksResponseBody.Data.Items.CommonSetting?

            public var frequency: String?

            public var gmtCreate: String?

            public var gmtModified: String?

            public var monitorCategory: Int32?

            public var monitorNum: String?

            public var name: String?

            public var regionId: String?

            public var resourceGroupId: String?

            public var status: String?

            public var tags: [ListTimingSyntheticTasksResponseBody.Data.Items.Tags]?

            public var taskId: String?

            public var taskType: Int32?

            public var url: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.commonSetting?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.commonSetting != nil {
                    map["CommonSetting"] = self.commonSetting?.toMap()
                }
                if self.frequency != nil {
                    map["Frequency"] = self.frequency!
                }
                if self.gmtCreate != nil {
                    map["GmtCreate"] = self.gmtCreate!
                }
                if self.gmtModified != nil {
                    map["GmtModified"] = self.gmtModified!
                }
                if self.monitorCategory != nil {
                    map["MonitorCategory"] = self.monitorCategory!
                }
                if self.monitorNum != nil {
                    map["MonitorNum"] = self.monitorNum!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.regionId != nil {
                    map["RegionId"] = self.regionId!
                }
                if self.resourceGroupId != nil {
                    map["ResourceGroupId"] = self.resourceGroupId!
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                if self.tags != nil {
                    var tmp : [Any] = []
                    for k in self.tags! {
                        tmp.append(k.toMap())
                    }
                    map["Tags"] = tmp
                }
                if self.taskId != nil {
                    map["TaskId"] = self.taskId!
                }
                if self.taskType != nil {
                    map["TaskType"] = self.taskType!
                }
                if self.url != nil {
                    map["Url"] = self.url!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CommonSetting"] as? [String: Any?] {
                    var model = ListTimingSyntheticTasksResponseBody.Data.Items.CommonSetting()
                    model.fromMap(value)
                    self.commonSetting = model
                }
                if let value = dict["Frequency"] as? String {
                    self.frequency = value
                }
                if let value = dict["GmtCreate"] as? String {
                    self.gmtCreate = value
                }
                if let value = dict["GmtModified"] as? String {
                    self.gmtModified = value
                }
                if let value = dict["MonitorCategory"] as? Int32 {
                    self.monitorCategory = value
                }
                if let value = dict["MonitorNum"] as? String {
                    self.monitorNum = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["RegionId"] as? String {
                    self.regionId = value
                }
                if let value = dict["ResourceGroupId"] as? String {
                    self.resourceGroupId = value
                }
                if let value = dict["Status"] as? String {
                    self.status = value
                }
                if let value = dict["Tags"] as? [Any?] {
                    var tmp : [ListTimingSyntheticTasksResponseBody.Data.Items.Tags] = []
                    for v in value {
                        if v != nil {
                            var model = ListTimingSyntheticTasksResponseBody.Data.Items.Tags()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.tags = tmp
                }
                if let value = dict["TaskId"] as? String {
                    self.taskId = value
                }
                if let value = dict["TaskType"] as? Int32 {
                    self.taskType = value
                }
                if let value = dict["Url"] as? String {
                    self.url = value
                }
            }
        }
        public var items: [ListTimingSyntheticTasksResponseBody.Data.Items]?

        public var page: Int32?

        public var pageSize: Int32?

        public var total: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.items != nil {
                var tmp : [Any] = []
                for k in self.items! {
                    tmp.append(k.toMap())
                }
                map["Items"] = tmp
            }
            if self.page != nil {
                map["Page"] = self.page!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.total != nil {
                map["Total"] = self.total!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Items"] as? [Any?] {
                var tmp : [ListTimingSyntheticTasksResponseBody.Data.Items] = []
                for v in value {
                    if v != nil {
                        var model = ListTimingSyntheticTasksResponseBody.Data.Items()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.items = tmp
            }
            if let value = dict["Page"] as? Int32 {
                self.page = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
            if let value = dict["Total"] as? Int32 {
                self.total = value
            }
        }
    }
    public var code: Int64?

    public var data: ListTimingSyntheticTasksResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int64 {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ListTimingSyntheticTasksResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListTimingSyntheticTasksResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListTimingSyntheticTasksResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListTimingSyntheticTasksResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListTraceAppsRequest : Tea.TeaModel {
    public class Tags : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var appType: String?

    public var region: String?

    public var regionId: String?

    public var resourceGroupId: String?

    public var tags: [ListTraceAppsRequest.Tags]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appType != nil {
            map["AppType"] = self.appType!
        }
        if self.region != nil {
            map["Region"] = self.region!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceGroupId != nil {
            map["ResourceGroupId"] = self.resourceGroupId!
        }
        if self.tags != nil {
            var tmp : [Any] = []
            for k in self.tags! {
                tmp.append(k.toMap())
            }
            map["Tags"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppType"] as? String {
            self.appType = value
        }
        if let value = dict["Region"] as? String {
            self.region = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceGroupId"] as? String {
            self.resourceGroupId = value
        }
        if let value = dict["Tags"] as? [Any?] {
            var tmp : [ListTraceAppsRequest.Tags] = []
            for v in value {
                if v != nil {
                    var model = ListTraceAppsRequest.Tags()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tags = tmp
        }
    }
}

public class ListTraceAppsResponseBody : Tea.TeaModel {
    public class TraceApps : Tea.TeaModel {
        public class Tags : Tea.TeaModel {
            public var key: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.key != nil {
                    map["Key"] = self.key!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Key"] as? String {
                    self.key = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public var appId: Int64?

        public var appName: String?

        public var clusterId: String?

        public var createTime: Int64?

        public var labels: [String]?

        public var language: String?

        public var namespace: String?

        public var pid: String?

        public var regionId: String?

        public var resourceGroupId: String?

        public var show: Bool?

        public var source: String?

        public var tags: [ListTraceAppsResponseBody.TraceApps.Tags]?

        public var type: String?

        public var updateTime: Int64?

        public var userId: String?

        public var workloadKind: String?

        public var workloadName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.appId != nil {
                map["AppId"] = self.appId!
            }
            if self.appName != nil {
                map["AppName"] = self.appName!
            }
            if self.clusterId != nil {
                map["ClusterId"] = self.clusterId!
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.labels != nil {
                map["Labels"] = self.labels!
            }
            if self.language != nil {
                map["Language"] = self.language!
            }
            if self.namespace != nil {
                map["Namespace"] = self.namespace!
            }
            if self.pid != nil {
                map["Pid"] = self.pid!
            }
            if self.regionId != nil {
                map["RegionId"] = self.regionId!
            }
            if self.resourceGroupId != nil {
                map["ResourceGroupId"] = self.resourceGroupId!
            }
            if self.show != nil {
                map["Show"] = self.show!
            }
            if self.source != nil {
                map["Source"] = self.source!
            }
            if self.tags != nil {
                var tmp : [Any] = []
                for k in self.tags! {
                    tmp.append(k.toMap())
                }
                map["Tags"] = tmp
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            if self.updateTime != nil {
                map["UpdateTime"] = self.updateTime!
            }
            if self.userId != nil {
                map["UserId"] = self.userId!
            }
            if self.workloadKind != nil {
                map["WorkloadKind"] = self.workloadKind!
            }
            if self.workloadName != nil {
                map["WorkloadName"] = self.workloadName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AppId"] as? Int64 {
                self.appId = value
            }
            if let value = dict["AppName"] as? String {
                self.appName = value
            }
            if let value = dict["ClusterId"] as? String {
                self.clusterId = value
            }
            if let value = dict["CreateTime"] as? Int64 {
                self.createTime = value
            }
            if let value = dict["Labels"] as? [String] {
                self.labels = value
            }
            if let value = dict["Language"] as? String {
                self.language = value
            }
            if let value = dict["Namespace"] as? String {
                self.namespace = value
            }
            if let value = dict["Pid"] as? String {
                self.pid = value
            }
            if let value = dict["RegionId"] as? String {
                self.regionId = value
            }
            if let value = dict["ResourceGroupId"] as? String {
                self.resourceGroupId = value
            }
            if let value = dict["Show"] as? Bool {
                self.show = value
            }
            if let value = dict["Source"] as? String {
                self.source = value
            }
            if let value = dict["Tags"] as? [Any?] {
                var tmp : [ListTraceAppsResponseBody.TraceApps.Tags] = []
                for v in value {
                    if v != nil {
                        var model = ListTraceAppsResponseBody.TraceApps.Tags()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.tags = tmp
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
            if let value = dict["UpdateTime"] as? Int64 {
                self.updateTime = value
            }
            if let value = dict["UserId"] as? String {
                self.userId = value
            }
            if let value = dict["WorkloadKind"] as? String {
                self.workloadKind = value
            }
            if let value = dict["WorkloadName"] as? String {
                self.workloadName = value
            }
        }
    }
    public var code: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public var traceApps: [ListTraceAppsResponseBody.TraceApps]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.traceApps != nil {
            var tmp : [Any] = []
            for k in self.traceApps! {
                tmp.append(k.toMap())
            }
            map["TraceApps"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
        if let value = dict["TraceApps"] as? [Any?] {
            var tmp : [ListTraceAppsResponseBody.TraceApps] = []
            for v in value {
                if v != nil {
                    var model = ListTraceAppsResponseBody.TraceApps()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.traceApps = tmp
        }
    }
}

public class ListTraceAppsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListTraceAppsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListTraceAppsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class OpenArmsDefaultSLRRequest : Tea.TeaModel {
    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class OpenArmsDefaultSLRResponseBody : Tea.TeaModel {
    public var data: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class OpenArmsDefaultSLRResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: OpenArmsDefaultSLRResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = OpenArmsDefaultSLRResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class OpenArmsServiceSecondVersionRequest : Tea.TeaModel {
    public var regionId: String?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
    }
}

public class OpenArmsServiceSecondVersionResponseBody : Tea.TeaModel {
    public var orderId: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.orderId != nil {
            map["OrderId"] = self.orderId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OrderId"] as? String {
            self.orderId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class OpenArmsServiceSecondVersionResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: OpenArmsServiceSecondVersionResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = OpenArmsServiceSecondVersionResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class OpenVClusterRequest : Tea.TeaModel {
    public var clusterType: String?

    public var length: Int32?

    public var product: String?

    public var recreateSwitch: Bool?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clusterType != nil {
            map["ClusterType"] = self.clusterType!
        }
        if self.length != nil {
            map["Length"] = self.length!
        }
        if self.product != nil {
            map["Product"] = self.product!
        }
        if self.recreateSwitch != nil {
            map["RecreateSwitch"] = self.recreateSwitch!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClusterType"] as? String {
            self.clusterType = value
        }
        if let value = dict["Length"] as? Int32 {
            self.length = value
        }
        if let value = dict["Product"] as? String {
            self.product = value
        }
        if let value = dict["RecreateSwitch"] as? Bool {
            self.recreateSwitch = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class OpenVClusterResponseBody : Tea.TeaModel {
    public var data: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class OpenVClusterResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: OpenVClusterResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = OpenVClusterResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class OpenXtraceDefaultSLRRequest : Tea.TeaModel {
    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class OpenXtraceDefaultSLRResponseBody : Tea.TeaModel {
    public var data: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class OpenXtraceDefaultSLRResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: OpenXtraceDefaultSLRResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = OpenXtraceDefaultSLRResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryAppMetadataRequest : Tea.TeaModel {
    public var metaIds: String?

    public var metaType: String?

    public var pid: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.metaIds != nil {
            map["MetaIds"] = self.metaIds!
        }
        if self.metaType != nil {
            map["MetaType"] = self.metaType!
        }
        if self.pid != nil {
            map["Pid"] = self.pid!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["MetaIds"] as? String {
            self.metaIds = value
        }
        if let value = dict["MetaType"] as? String {
            self.metaType = value
        }
        if let value = dict["Pid"] as? String {
            self.pid = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class QueryAppMetadataResponseBody : Tea.TeaModel {
    public var code: Int32?

    public var data: [String: Any]?

    public var httpStatusCode: Int32?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any] {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class QueryAppMetadataResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryAppMetadataResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryAppMetadataResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryAppTopologyRequest : Tea.TeaModel {
    public var appType: String?

    public var db: String?

    public var dbName: String?

    public var endTime: Int64?

    public var filters: [String: String]?

    public var pid: String?

    public var regionId: String?

    public var rpc: String?

    public var startTime: Int64?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appType != nil {
            map["AppType"] = self.appType!
        }
        if self.db != nil {
            map["Db"] = self.db!
        }
        if self.dbName != nil {
            map["DbName"] = self.dbName!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.filters != nil {
            map["Filters"] = self.filters!
        }
        if self.pid != nil {
            map["Pid"] = self.pid!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.rpc != nil {
            map["Rpc"] = self.rpc!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppType"] as? String {
            self.appType = value
        }
        if let value = dict["Db"] as? String {
            self.db = value
        }
        if let value = dict["DbName"] as? String {
            self.dbName = value
        }
        if let value = dict["EndTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["Filters"] as? [String: String] {
            self.filters = value
        }
        if let value = dict["Pid"] as? String {
            self.pid = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Rpc"] as? String {
            self.rpc = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
    }
}

public class QueryAppTopologyShrinkRequest : Tea.TeaModel {
    public var appType: String?

    public var db: String?

    public var dbName: String?

    public var endTime: Int64?

    public var filtersShrink: String?

    public var pid: String?

    public var regionId: String?

    public var rpc: String?

    public var startTime: Int64?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appType != nil {
            map["AppType"] = self.appType!
        }
        if self.db != nil {
            map["Db"] = self.db!
        }
        if self.dbName != nil {
            map["DbName"] = self.dbName!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.filtersShrink != nil {
            map["Filters"] = self.filtersShrink!
        }
        if self.pid != nil {
            map["Pid"] = self.pid!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.rpc != nil {
            map["Rpc"] = self.rpc!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppType"] as? String {
            self.appType = value
        }
        if let value = dict["Db"] as? String {
            self.db = value
        }
        if let value = dict["DbName"] as? String {
            self.dbName = value
        }
        if let value = dict["EndTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["Filters"] as? String {
            self.filtersShrink = value
        }
        if let value = dict["Pid"] as? String {
            self.pid = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Rpc"] as? String {
            self.rpc = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
    }
}

public class QueryAppTopologyResponseBody : Tea.TeaModel {
    public var code: Int64?

    public var data: Any?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int64 {
            self.code = value
        }
        if let value = dict["Data"] as? Any {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class QueryAppTopologyResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryAppTopologyResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryAppTopologyResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryCommercialUsageRequest : Tea.TeaModel {
    public class AdvancedFilters : Tea.TeaModel {
        public var key: String?

        public var opType: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.opType != nil {
                map["OpType"] = self.opType!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["OpType"] as? String {
                self.opType = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var advancedFilters: [QueryCommercialUsageRequest.AdvancedFilters]?

    public var dimensions: [String]?

    public var endTime: Int64?

    public var intervalInSec: Int32?

    public var measures: [String]?

    public var metric: String?

    public var order: String?

    public var orderBy: String?

    public var queryType: String?

    public var startTime: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.advancedFilters != nil {
            var tmp : [Any] = []
            for k in self.advancedFilters! {
                tmp.append(k.toMap())
            }
            map["AdvancedFilters"] = tmp
        }
        if self.dimensions != nil {
            map["Dimensions"] = self.dimensions!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.intervalInSec != nil {
            map["IntervalInSec"] = self.intervalInSec!
        }
        if self.measures != nil {
            map["Measures"] = self.measures!
        }
        if self.metric != nil {
            map["Metric"] = self.metric!
        }
        if self.order != nil {
            map["Order"] = self.order!
        }
        if self.orderBy != nil {
            map["OrderBy"] = self.orderBy!
        }
        if self.queryType != nil {
            map["QueryType"] = self.queryType!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AdvancedFilters"] as? [Any?] {
            var tmp : [QueryCommercialUsageRequest.AdvancedFilters] = []
            for v in value {
                if v != nil {
                    var model = QueryCommercialUsageRequest.AdvancedFilters()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.advancedFilters = tmp
        }
        if let value = dict["Dimensions"] as? [String] {
            self.dimensions = value
        }
        if let value = dict["EndTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["IntervalInSec"] as? Int32 {
            self.intervalInSec = value
        }
        if let value = dict["Measures"] as? [String] {
            self.measures = value
        }
        if let value = dict["Metric"] as? String {
            self.metric = value
        }
        if let value = dict["Order"] as? String {
            self.order = value
        }
        if let value = dict["OrderBy"] as? String {
            self.orderBy = value
        }
        if let value = dict["QueryType"] as? String {
            self.queryType = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
    }
}

public class QueryCommercialUsageResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var complete: Bool?

        public var items: [[String: Any]]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.complete != nil {
                map["Complete"] = self.complete!
            }
            if self.items != nil {
                map["Items"] = self.items!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Complete"] as? Bool {
                self.complete = value
            }
            if let value = dict["Items"] as? [[String: Any]] {
                self.items = value
            }
        }
    }
    public var code: Int32?

    public var data: QueryCommercialUsageResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = QueryCommercialUsageResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class QueryCommercialUsageResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryCommercialUsageResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryCommercialUsageResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryMetricByPageRequest : Tea.TeaModel {
    public class Filters : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var currentPage: Int32?

    public var customFilters: [String]?

    public var dimensions: [String]?

    public var endTime: Int64?

    public var filters: [QueryMetricByPageRequest.Filters]?

    public var intervalInSec: Int32?

    public var measures: [String]?

    public var metric: String?

    public var order: String?

    public var orderBy: String?

    public var pageSize: Int32?

    public var startTime: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.currentPage != nil {
            map["CurrentPage"] = self.currentPage!
        }
        if self.customFilters != nil {
            map["CustomFilters"] = self.customFilters!
        }
        if self.dimensions != nil {
            map["Dimensions"] = self.dimensions!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.filters != nil {
            var tmp : [Any] = []
            for k in self.filters! {
                tmp.append(k.toMap())
            }
            map["Filters"] = tmp
        }
        if self.intervalInSec != nil {
            map["IntervalInSec"] = self.intervalInSec!
        }
        if self.measures != nil {
            map["Measures"] = self.measures!
        }
        if self.metric != nil {
            map["Metric"] = self.metric!
        }
        if self.order != nil {
            map["Order"] = self.order!
        }
        if self.orderBy != nil {
            map["OrderBy"] = self.orderBy!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CurrentPage"] as? Int32 {
            self.currentPage = value
        }
        if let value = dict["CustomFilters"] as? [String] {
            self.customFilters = value
        }
        if let value = dict["Dimensions"] as? [String] {
            self.dimensions = value
        }
        if let value = dict["EndTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["Filters"] as? [Any?] {
            var tmp : [QueryMetricByPageRequest.Filters] = []
            for v in value {
                if v != nil {
                    var model = QueryMetricByPageRequest.Filters()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.filters = tmp
        }
        if let value = dict["IntervalInSec"] as? Int32 {
            self.intervalInSec = value
        }
        if let value = dict["Measures"] as? [String] {
            self.measures = value
        }
        if let value = dict["Metric"] as? String {
            self.metric = value
        }
        if let value = dict["Order"] as? String {
            self.order = value
        }
        if let value = dict["OrderBy"] as? String {
            self.orderBy = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
    }
}

public class QueryMetricByPageResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var completed: Bool?

        public var items: [[String: Any]]?

        public var page: Int32?

        public var pageSize: Int32?

        public var total: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.completed != nil {
                map["Completed"] = self.completed!
            }
            if self.items != nil {
                map["Items"] = self.items!
            }
            if self.page != nil {
                map["Page"] = self.page!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.total != nil {
                map["Total"] = self.total!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Completed"] as? Bool {
                self.completed = value
            }
            if let value = dict["Items"] as? [[String: Any]] {
                self.items = value
            }
            if let value = dict["Page"] as? Int32 {
                self.page = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
            if let value = dict["Total"] as? Int32 {
                self.total = value
            }
        }
    }
    public var code: String?

    public var data: QueryMetricByPageResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = QueryMetricByPageResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class QueryMetricByPageResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryMetricByPageResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryMetricByPageResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryPromInstallStatusRequest : Tea.TeaModel {
    public var clusterId: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClusterId"] as? String {
            self.clusterId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class QueryPromInstallStatusResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var isControllerInstalled: Bool?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.isControllerInstalled != nil {
                map["isControllerInstalled"] = self.isControllerInstalled!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["isControllerInstalled"] as? Bool {
                self.isControllerInstalled = value
            }
        }
    }
    public var data: QueryPromInstallStatusResponseBody.Data?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Data"] as? [String: Any?] {
            var model = QueryPromInstallStatusResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class QueryPromInstallStatusResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryPromInstallStatusResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryPromInstallStatusResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryReleaseMetricRequest : Tea.TeaModel {
    public var changeOrderId: String?

    public var createTime: Int64?

    public var metricType: String?

    public var pid: String?

    public var proxyUserId: String?

    public var releaseEndTime: Int64?

    public var releaseStartTime: Int64?

    public var service: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.changeOrderId != nil {
            map["ChangeOrderId"] = self.changeOrderId!
        }
        if self.createTime != nil {
            map["CreateTime"] = self.createTime!
        }
        if self.metricType != nil {
            map["MetricType"] = self.metricType!
        }
        if self.pid != nil {
            map["Pid"] = self.pid!
        }
        if self.proxyUserId != nil {
            map["ProxyUserId"] = self.proxyUserId!
        }
        if self.releaseEndTime != nil {
            map["ReleaseEndTime"] = self.releaseEndTime!
        }
        if self.releaseStartTime != nil {
            map["ReleaseStartTime"] = self.releaseStartTime!
        }
        if self.service != nil {
            map["Service"] = self.service!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ChangeOrderId"] as? String {
            self.changeOrderId = value
        }
        if let value = dict["CreateTime"] as? Int64 {
            self.createTime = value
        }
        if let value = dict["MetricType"] as? String {
            self.metricType = value
        }
        if let value = dict["Pid"] as? String {
            self.pid = value
        }
        if let value = dict["ProxyUserId"] as? String {
            self.proxyUserId = value
        }
        if let value = dict["ReleaseEndTime"] as? Int64 {
            self.releaseEndTime = value
        }
        if let value = dict["ReleaseStartTime"] as? Int64 {
            self.releaseStartTime = value
        }
        if let value = dict["Service"] as? String {
            self.service = value
        }
    }
}

public class QueryReleaseMetricResponseBody : Tea.TeaModel {
    public var data: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class QueryReleaseMetricResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryReleaseMetricResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryReleaseMetricResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RemoveAliClusterIdsFromPrometheusGlobalViewRequest : Tea.TeaModel {
    public var clusterIds: String?

    public var globalViewClusterId: String?

    public var groupName: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clusterIds != nil {
            map["ClusterIds"] = self.clusterIds!
        }
        if self.globalViewClusterId != nil {
            map["GlobalViewClusterId"] = self.globalViewClusterId!
        }
        if self.groupName != nil {
            map["GroupName"] = self.groupName!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClusterIds"] as? String {
            self.clusterIds = value
        }
        if let value = dict["GlobalViewClusterId"] as? String {
            self.globalViewClusterId = value
        }
        if let value = dict["GroupName"] as? String {
            self.groupName = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class RemoveAliClusterIdsFromPrometheusGlobalViewResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var info: String?

        public var msg: String?

        public var success: Bool?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.info != nil {
                map["Info"] = self.info!
            }
            if self.msg != nil {
                map["Msg"] = self.msg!
            }
            if self.success != nil {
                map["Success"] = self.success!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Info"] as? String {
                self.info = value
            }
            if let value = dict["Msg"] as? String {
                self.msg = value
            }
            if let value = dict["Success"] as? Bool {
                self.success = value
            }
        }
    }
    public var code: Int32?

    public var data: RemoveAliClusterIdsFromPrometheusGlobalViewResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = RemoveAliClusterIdsFromPrometheusGlobalViewResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class RemoveAliClusterIdsFromPrometheusGlobalViewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RemoveAliClusterIdsFromPrometheusGlobalViewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RemoveAliClusterIdsFromPrometheusGlobalViewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RemoveSourcesFromPrometheusGlobalViewRequest : Tea.TeaModel {
    public var globalViewClusterId: String?

    public var groupName: String?

    public var regionId: String?

    public var sourceNames: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.globalViewClusterId != nil {
            map["GlobalViewClusterId"] = self.globalViewClusterId!
        }
        if self.groupName != nil {
            map["GroupName"] = self.groupName!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.sourceNames != nil {
            map["SourceNames"] = self.sourceNames!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["GlobalViewClusterId"] as? String {
            self.globalViewClusterId = value
        }
        if let value = dict["GroupName"] as? String {
            self.groupName = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["SourceNames"] as? String {
            self.sourceNames = value
        }
    }
}

public class RemoveSourcesFromPrometheusGlobalViewResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var info: String?

        public var msg: String?

        public var success: Bool?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.info != nil {
                map["Info"] = self.info!
            }
            if self.msg != nil {
                map["Msg"] = self.msg!
            }
            if self.success != nil {
                map["Success"] = self.success!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Info"] as? String {
                self.info = value
            }
            if let value = dict["Msg"] as? String {
                self.msg = value
            }
            if let value = dict["Success"] as? Bool {
                self.success = value
            }
        }
    }
    public var code: Int32?

    public var data: RemoveSourcesFromPrometheusGlobalViewResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = RemoveSourcesFromPrometheusGlobalViewResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class RemoveSourcesFromPrometheusGlobalViewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RemoveSourcesFromPrometheusGlobalViewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RemoveSourcesFromPrometheusGlobalViewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RestartEnvironmentFeatureRequest : Tea.TeaModel {
    public var environmentId: String?

    public var featureName: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.environmentId != nil {
            map["EnvironmentId"] = self.environmentId!
        }
        if self.featureName != nil {
            map["FeatureName"] = self.featureName!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EnvironmentId"] as? String {
            self.environmentId = value
        }
        if let value = dict["FeatureName"] as? String {
            self.featureName = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class RestartEnvironmentFeatureResponseBody : Tea.TeaModel {
    public var code: Int32?

    public var data: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class RestartEnvironmentFeatureResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RestartEnvironmentFeatureResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RestartEnvironmentFeatureResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SaveTraceAppConfigRequest : Tea.TeaModel {
    public class Settings : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var pid: String?

    public var settings: [SaveTraceAppConfigRequest.Settings]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pid != nil {
            map["Pid"] = self.pid!
        }
        if self.settings != nil {
            var tmp : [Any] = []
            for k in self.settings! {
                tmp.append(k.toMap())
            }
            map["Settings"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Pid"] as? String {
            self.pid = value
        }
        if let value = dict["Settings"] as? [Any?] {
            var tmp : [SaveTraceAppConfigRequest.Settings] = []
            for v in value {
                if v != nil {
                    var model = SaveTraceAppConfigRequest.Settings()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.settings = tmp
        }
    }
}

public class SaveTraceAppConfigResponseBody : Tea.TeaModel {
    public var code: Int64?

    public var data: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int64 {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class SaveTraceAppConfigResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SaveTraceAppConfigResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SaveTraceAppConfigResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SearchAlertContactRequest : Tea.TeaModel {
    public var contactIds: String?

    public var contactName: String?

    public var currentPage: String?

    public var email: String?

    public var pageSize: String?

    public var phone: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.contactIds != nil {
            map["ContactIds"] = self.contactIds!
        }
        if self.contactName != nil {
            map["ContactName"] = self.contactName!
        }
        if self.currentPage != nil {
            map["CurrentPage"] = self.currentPage!
        }
        if self.email != nil {
            map["Email"] = self.email!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.phone != nil {
            map["Phone"] = self.phone!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ContactIds"] as? String {
            self.contactIds = value
        }
        if let value = dict["ContactName"] as? String {
            self.contactName = value
        }
        if let value = dict["CurrentPage"] as? String {
            self.currentPage = value
        }
        if let value = dict["Email"] as? String {
            self.email = value
        }
        if let value = dict["PageSize"] as? String {
            self.pageSize = value
        }
        if let value = dict["Phone"] as? String {
            self.phone = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class SearchAlertContactResponseBody : Tea.TeaModel {
    public class PageBean : Tea.TeaModel {
        public class Contacts : Tea.TeaModel {
            public var contactId: Int64?

            public var contactName: String?

            public var content: String?

            public var createTime: Int64?

            public var dingRobot: String?

            public var email: String?

            public var phone: String?

            public var resourceGroupId: String?

            public var systemNoc: Bool?

            public var updateTime: Int64?

            public var userId: String?

            public var webhook: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.contactId != nil {
                    map["ContactId"] = self.contactId!
                }
                if self.contactName != nil {
                    map["ContactName"] = self.contactName!
                }
                if self.content != nil {
                    map["Content"] = self.content!
                }
                if self.createTime != nil {
                    map["CreateTime"] = self.createTime!
                }
                if self.dingRobot != nil {
                    map["DingRobot"] = self.dingRobot!
                }
                if self.email != nil {
                    map["Email"] = self.email!
                }
                if self.phone != nil {
                    map["Phone"] = self.phone!
                }
                if self.resourceGroupId != nil {
                    map["ResourceGroupId"] = self.resourceGroupId!
                }
                if self.systemNoc != nil {
                    map["SystemNoc"] = self.systemNoc!
                }
                if self.updateTime != nil {
                    map["UpdateTime"] = self.updateTime!
                }
                if self.userId != nil {
                    map["UserId"] = self.userId!
                }
                if self.webhook != nil {
                    map["Webhook"] = self.webhook!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ContactId"] as? Int64 {
                    self.contactId = value
                }
                if let value = dict["ContactName"] as? String {
                    self.contactName = value
                }
                if let value = dict["Content"] as? String {
                    self.content = value
                }
                if let value = dict["CreateTime"] as? Int64 {
                    self.createTime = value
                }
                if let value = dict["DingRobot"] as? String {
                    self.dingRobot = value
                }
                if let value = dict["Email"] as? String {
                    self.email = value
                }
                if let value = dict["Phone"] as? String {
                    self.phone = value
                }
                if let value = dict["ResourceGroupId"] as? String {
                    self.resourceGroupId = value
                }
                if let value = dict["SystemNoc"] as? Bool {
                    self.systemNoc = value
                }
                if let value = dict["UpdateTime"] as? Int64 {
                    self.updateTime = value
                }
                if let value = dict["UserId"] as? String {
                    self.userId = value
                }
                if let value = dict["Webhook"] as? String {
                    self.webhook = value
                }
            }
        }
        public var contacts: [SearchAlertContactResponseBody.PageBean.Contacts]?

        public var pageNumber: Int32?

        public var pageSize: Int32?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.contacts != nil {
                var tmp : [Any] = []
                for k in self.contacts! {
                    tmp.append(k.toMap())
                }
                map["Contacts"] = tmp
            }
            if self.pageNumber != nil {
                map["PageNumber"] = self.pageNumber!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Contacts"] as? [Any?] {
                var tmp : [SearchAlertContactResponseBody.PageBean.Contacts] = []
                for v in value {
                    if v != nil {
                        var model = SearchAlertContactResponseBody.PageBean.Contacts()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.contacts = tmp
            }
            if let value = dict["PageNumber"] as? Int32 {
                self.pageNumber = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var pageBean: SearchAlertContactResponseBody.PageBean?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.pageBean?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageBean != nil {
            map["PageBean"] = self.pageBean?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageBean"] as? [String: Any?] {
            var model = SearchAlertContactResponseBody.PageBean()
            model.fromMap(value)
            self.pageBean = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class SearchAlertContactResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SearchAlertContactResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SearchAlertContactResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SearchAlertContactGroupRequest : Tea.TeaModel {
    public var contactGroupIds: String?

    public var contactGroupName: String?

    public var contactId: Int64?

    public var contactName: String?

    public var isDetail: Bool?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.contactGroupIds != nil {
            map["ContactGroupIds"] = self.contactGroupIds!
        }
        if self.contactGroupName != nil {
            map["ContactGroupName"] = self.contactGroupName!
        }
        if self.contactId != nil {
            map["ContactId"] = self.contactId!
        }
        if self.contactName != nil {
            map["ContactName"] = self.contactName!
        }
        if self.isDetail != nil {
            map["IsDetail"] = self.isDetail!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ContactGroupIds"] as? String {
            self.contactGroupIds = value
        }
        if let value = dict["ContactGroupName"] as? String {
            self.contactGroupName = value
        }
        if let value = dict["ContactId"] as? Int64 {
            self.contactId = value
        }
        if let value = dict["ContactName"] as? String {
            self.contactName = value
        }
        if let value = dict["IsDetail"] as? Bool {
            self.isDetail = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class SearchAlertContactGroupResponseBody : Tea.TeaModel {
    public class ContactGroups : Tea.TeaModel {
        public class Contacts : Tea.TeaModel {
            public var contactId: Int64?

            public var contactName: String?

            public var createTime: Int64?

            public var dingRobot: String?

            public var email: String?

            public var phone: String?

            public var systemNoc: Bool?

            public var updateTime: Int64?

            public var userId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.contactId != nil {
                    map["ContactId"] = self.contactId!
                }
                if self.contactName != nil {
                    map["ContactName"] = self.contactName!
                }
                if self.createTime != nil {
                    map["CreateTime"] = self.createTime!
                }
                if self.dingRobot != nil {
                    map["DingRobot"] = self.dingRobot!
                }
                if self.email != nil {
                    map["Email"] = self.email!
                }
                if self.phone != nil {
                    map["Phone"] = self.phone!
                }
                if self.systemNoc != nil {
                    map["SystemNoc"] = self.systemNoc!
                }
                if self.updateTime != nil {
                    map["UpdateTime"] = self.updateTime!
                }
                if self.userId != nil {
                    map["UserId"] = self.userId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ContactId"] as? Int64 {
                    self.contactId = value
                }
                if let value = dict["ContactName"] as? String {
                    self.contactName = value
                }
                if let value = dict["CreateTime"] as? Int64 {
                    self.createTime = value
                }
                if let value = dict["DingRobot"] as? String {
                    self.dingRobot = value
                }
                if let value = dict["Email"] as? String {
                    self.email = value
                }
                if let value = dict["Phone"] as? String {
                    self.phone = value
                }
                if let value = dict["SystemNoc"] as? Bool {
                    self.systemNoc = value
                }
                if let value = dict["UpdateTime"] as? Int64 {
                    self.updateTime = value
                }
                if let value = dict["UserId"] as? String {
                    self.userId = value
                }
            }
        }
        public var contactGroupId: Int64?

        public var contactGroupName: String?

        public var contacts: [SearchAlertContactGroupResponseBody.ContactGroups.Contacts]?

        public var createTime: Int64?

        public var updateTime: Int64?

        public var userId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.contactGroupId != nil {
                map["ContactGroupId"] = self.contactGroupId!
            }
            if self.contactGroupName != nil {
                map["ContactGroupName"] = self.contactGroupName!
            }
            if self.contacts != nil {
                var tmp : [Any] = []
                for k in self.contacts! {
                    tmp.append(k.toMap())
                }
                map["Contacts"] = tmp
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.updateTime != nil {
                map["UpdateTime"] = self.updateTime!
            }
            if self.userId != nil {
                map["UserId"] = self.userId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ContactGroupId"] as? Int64 {
                self.contactGroupId = value
            }
            if let value = dict["ContactGroupName"] as? String {
                self.contactGroupName = value
            }
            if let value = dict["Contacts"] as? [Any?] {
                var tmp : [SearchAlertContactGroupResponseBody.ContactGroups.Contacts] = []
                for v in value {
                    if v != nil {
                        var model = SearchAlertContactGroupResponseBody.ContactGroups.Contacts()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.contacts = tmp
            }
            if let value = dict["CreateTime"] as? Int64 {
                self.createTime = value
            }
            if let value = dict["UpdateTime"] as? Int64 {
                self.updateTime = value
            }
            if let value = dict["UserId"] as? String {
                self.userId = value
            }
        }
    }
    public var contactGroups: [SearchAlertContactGroupResponseBody.ContactGroups]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.contactGroups != nil {
            var tmp : [Any] = []
            for k in self.contactGroups! {
                tmp.append(k.toMap())
            }
            map["ContactGroups"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ContactGroups"] as? [Any?] {
            var tmp : [SearchAlertContactGroupResponseBody.ContactGroups] = []
            for v in value {
                if v != nil {
                    var model = SearchAlertContactGroupResponseBody.ContactGroups()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.contactGroups = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class SearchAlertContactGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SearchAlertContactGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SearchAlertContactGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SearchAlertHistoriesRequest : Tea.TeaModel {
    public var alertId: Int64?

    public var alertType: Int32?

    public var currentPage: Int32?

    public var endTime: Int64?

    public var pageSize: Int32?

    public var regionId: String?

    public var startTime: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.alertId != nil {
            map["AlertId"] = self.alertId!
        }
        if self.alertType != nil {
            map["AlertType"] = self.alertType!
        }
        if self.currentPage != nil {
            map["CurrentPage"] = self.currentPage!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AlertId"] as? Int64 {
            self.alertId = value
        }
        if let value = dict["AlertType"] as? Int32 {
            self.alertType = value
        }
        if let value = dict["CurrentPage"] as? Int32 {
            self.currentPage = value
        }
        if let value = dict["EndTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
    }
}

public class SearchAlertHistoriesResponseBody : Tea.TeaModel {
    public class PageBean : Tea.TeaModel {
        public class AlarmHistories : Tea.TeaModel {
            public var alarmContent: String?

            public var alarmResponseCode: Int32?

            public var alarmSources: String?

            public var alarmTime: Int64?

            public var alarmType: Int32?

            public var emails: String?

            public var id: Int64?

            public var phones: String?

            public var strategyId: String?

            public var target: String?

            public var userId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.alarmContent != nil {
                    map["AlarmContent"] = self.alarmContent!
                }
                if self.alarmResponseCode != nil {
                    map["AlarmResponseCode"] = self.alarmResponseCode!
                }
                if self.alarmSources != nil {
                    map["AlarmSources"] = self.alarmSources!
                }
                if self.alarmTime != nil {
                    map["AlarmTime"] = self.alarmTime!
                }
                if self.alarmType != nil {
                    map["AlarmType"] = self.alarmType!
                }
                if self.emails != nil {
                    map["Emails"] = self.emails!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.phones != nil {
                    map["Phones"] = self.phones!
                }
                if self.strategyId != nil {
                    map["StrategyId"] = self.strategyId!
                }
                if self.target != nil {
                    map["Target"] = self.target!
                }
                if self.userId != nil {
                    map["UserId"] = self.userId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AlarmContent"] as? String {
                    self.alarmContent = value
                }
                if let value = dict["AlarmResponseCode"] as? Int32 {
                    self.alarmResponseCode = value
                }
                if let value = dict["AlarmSources"] as? String {
                    self.alarmSources = value
                }
                if let value = dict["AlarmTime"] as? Int64 {
                    self.alarmTime = value
                }
                if let value = dict["AlarmType"] as? Int32 {
                    self.alarmType = value
                }
                if let value = dict["Emails"] as? String {
                    self.emails = value
                }
                if let value = dict["Id"] as? Int64 {
                    self.id = value
                }
                if let value = dict["Phones"] as? String {
                    self.phones = value
                }
                if let value = dict["StrategyId"] as? String {
                    self.strategyId = value
                }
                if let value = dict["Target"] as? String {
                    self.target = value
                }
                if let value = dict["UserId"] as? String {
                    self.userId = value
                }
            }
        }
        public var alarmHistories: [SearchAlertHistoriesResponseBody.PageBean.AlarmHistories]?

        public var pageNumber: Int32?

        public var pageSize: Int32?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.alarmHistories != nil {
                var tmp : [Any] = []
                for k in self.alarmHistories! {
                    tmp.append(k.toMap())
                }
                map["AlarmHistories"] = tmp
            }
            if self.pageNumber != nil {
                map["PageNumber"] = self.pageNumber!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AlarmHistories"] as? [Any?] {
                var tmp : [SearchAlertHistoriesResponseBody.PageBean.AlarmHistories] = []
                for v in value {
                    if v != nil {
                        var model = SearchAlertHistoriesResponseBody.PageBean.AlarmHistories()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.alarmHistories = tmp
            }
            if let value = dict["PageNumber"] as? Int32 {
                self.pageNumber = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var pageBean: SearchAlertHistoriesResponseBody.PageBean?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.pageBean?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageBean != nil {
            map["PageBean"] = self.pageBean?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageBean"] as? [String: Any?] {
            var model = SearchAlertHistoriesResponseBody.PageBean()
            model.fromMap(value)
            self.pageBean = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class SearchAlertHistoriesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SearchAlertHistoriesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SearchAlertHistoriesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SearchAlertRulesRequest : Tea.TeaModel {
    public class Tags : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var alertRuleId: String?

    public var appType: String?

    public var currentPage: Int32?

    public var pageSize: Int32?

    public var pid: String?

    public var regionId: String?

    public var resourceGroupId: String?

    public var systemRegionId: String?

    public var tags: [SearchAlertRulesRequest.Tags]?

    public var title: String?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.alertRuleId != nil {
            map["AlertRuleId"] = self.alertRuleId!
        }
        if self.appType != nil {
            map["AppType"] = self.appType!
        }
        if self.currentPage != nil {
            map["CurrentPage"] = self.currentPage!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.pid != nil {
            map["Pid"] = self.pid!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceGroupId != nil {
            map["ResourceGroupId"] = self.resourceGroupId!
        }
        if self.systemRegionId != nil {
            map["SystemRegionId"] = self.systemRegionId!
        }
        if self.tags != nil {
            var tmp : [Any] = []
            for k in self.tags! {
                tmp.append(k.toMap())
            }
            map["Tags"] = tmp
        }
        if self.title != nil {
            map["Title"] = self.title!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AlertRuleId"] as? String {
            self.alertRuleId = value
        }
        if let value = dict["AppType"] as? String {
            self.appType = value
        }
        if let value = dict["CurrentPage"] as? Int32 {
            self.currentPage = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["Pid"] as? String {
            self.pid = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceGroupId"] as? String {
            self.resourceGroupId = value
        }
        if let value = dict["SystemRegionId"] as? String {
            self.systemRegionId = value
        }
        if let value = dict["Tags"] as? [Any?] {
            var tmp : [SearchAlertRulesRequest.Tags] = []
            for v in value {
                if v != nil {
                    var model = SearchAlertRulesRequest.Tags()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tags = tmp
        }
        if let value = dict["Title"] as? String {
            self.title = value
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
    }
}

public class SearchAlertRulesResponseBody : Tea.TeaModel {
    public class PageBean : Tea.TeaModel {
        public class AlertRules : Tea.TeaModel {
            public class AlarmContext : Tea.TeaModel {
                public var alarmContentSubTitle: String?

                public var alarmContentTemplate: String?

                public var content: String?

                public var subTitle: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.alarmContentSubTitle != nil {
                        map["AlarmContentSubTitle"] = self.alarmContentSubTitle!
                    }
                    if self.alarmContentTemplate != nil {
                        map["AlarmContentTemplate"] = self.alarmContentTemplate!
                    }
                    if self.content != nil {
                        map["Content"] = self.content!
                    }
                    if self.subTitle != nil {
                        map["SubTitle"] = self.subTitle!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["AlarmContentSubTitle"] as? String {
                        self.alarmContentSubTitle = value
                    }
                    if let value = dict["AlarmContentTemplate"] as? String {
                        self.alarmContentTemplate = value
                    }
                    if let value = dict["Content"] as? String {
                        self.content = value
                    }
                    if let value = dict["SubTitle"] as? String {
                        self.subTitle = value
                    }
                }
            }
            public class AlertRule : Tea.TeaModel {
                public class Rules : Tea.TeaModel {
                    public var aggregates: String?

                    public var alias: String?

                    public var measure: String?

                    public var NValue: Int32?

                    public var operator_: String?

                    public var value: Double?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.aggregates != nil {
                            map["Aggregates"] = self.aggregates!
                        }
                        if self.alias != nil {
                            map["Alias"] = self.alias!
                        }
                        if self.measure != nil {
                            map["Measure"] = self.measure!
                        }
                        if self.NValue != nil {
                            map["NValue"] = self.NValue!
                        }
                        if self.operator_ != nil {
                            map["Operator"] = self.operator_!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Aggregates"] as? String {
                            self.aggregates = value
                        }
                        if let value = dict["Alias"] as? String {
                            self.alias = value
                        }
                        if let value = dict["Measure"] as? String {
                            self.measure = value
                        }
                        if let value = dict["NValue"] as? Int32 {
                            self.NValue = value
                        }
                        if let value = dict["Operator"] as? String {
                            self.operator_ = value
                        }
                        if let value = dict["Value"] as? Double {
                            self.value = value
                        }
                    }
                }
                public var operator_: String?

                public var rules: [SearchAlertRulesResponseBody.PageBean.AlertRules.AlertRule.Rules]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.operator_ != nil {
                        map["Operator"] = self.operator_!
                    }
                    if self.rules != nil {
                        var tmp : [Any] = []
                        for k in self.rules! {
                            tmp.append(k.toMap())
                        }
                        map["Rules"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Operator"] as? String {
                        self.operator_ = value
                    }
                    if let value = dict["Rules"] as? [Any?] {
                        var tmp : [SearchAlertRulesResponseBody.PageBean.AlertRules.AlertRule.Rules] = []
                        for v in value {
                            if v != nil {
                                var model = SearchAlertRulesResponseBody.PageBean.AlertRules.AlertRule.Rules()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.rules = tmp
                    }
                }
            }
            public class MetricParam : Tea.TeaModel {
                public class Dimensions : Tea.TeaModel {
                    public var key: String?

                    public var type: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.key != nil {
                            map["Key"] = self.key!
                        }
                        if self.type != nil {
                            map["Type"] = self.type!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Key"] as? String {
                            self.key = value
                        }
                        if let value = dict["Type"] as? String {
                            self.type = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public var appGroupId: String?

                public var appId: String?

                public var dimensions: [SearchAlertRulesResponseBody.PageBean.AlertRules.MetricParam.Dimensions]?

                public var pid: String?

                public var type: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.appGroupId != nil {
                        map["AppGroupId"] = self.appGroupId!
                    }
                    if self.appId != nil {
                        map["AppId"] = self.appId!
                    }
                    if self.dimensions != nil {
                        var tmp : [Any] = []
                        for k in self.dimensions! {
                            tmp.append(k.toMap())
                        }
                        map["Dimensions"] = tmp
                    }
                    if self.pid != nil {
                        map["Pid"] = self.pid!
                    }
                    if self.type != nil {
                        map["Type"] = self.type!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["AppGroupId"] as? String {
                        self.appGroupId = value
                    }
                    if let value = dict["AppId"] as? String {
                        self.appId = value
                    }
                    if let value = dict["Dimensions"] as? [Any?] {
                        var tmp : [SearchAlertRulesResponseBody.PageBean.AlertRules.MetricParam.Dimensions] = []
                        for v in value {
                            if v != nil {
                                var model = SearchAlertRulesResponseBody.PageBean.AlertRules.MetricParam.Dimensions()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.dimensions = tmp
                    }
                    if let value = dict["Pid"] as? String {
                        self.pid = value
                    }
                    if let value = dict["Type"] as? String {
                        self.type = value
                    }
                }
            }
            public class Notice : Tea.TeaModel {
                public var endTime: Int64?

                public var noticeEndTime: Int64?

                public var noticeStartTime: Int64?

                public var startTime: Int64?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.endTime != nil {
                        map["EndTime"] = self.endTime!
                    }
                    if self.noticeEndTime != nil {
                        map["NoticeEndTime"] = self.noticeEndTime!
                    }
                    if self.noticeStartTime != nil {
                        map["NoticeStartTime"] = self.noticeStartTime!
                    }
                    if self.startTime != nil {
                        map["StartTime"] = self.startTime!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["EndTime"] as? Int64 {
                        self.endTime = value
                    }
                    if let value = dict["NoticeEndTime"] as? Int64 {
                        self.noticeEndTime = value
                    }
                    if let value = dict["NoticeStartTime"] as? Int64 {
                        self.noticeStartTime = value
                    }
                    if let value = dict["StartTime"] as? Int64 {
                        self.startTime = value
                    }
                }
            }
            public var alarmContext: SearchAlertRulesResponseBody.PageBean.AlertRules.AlarmContext?

            public var alertLevel: String?

            public var alertRule: SearchAlertRulesResponseBody.PageBean.AlertRules.AlertRule?

            public var alertTitle: String?

            public var alertType: Int32?

            public var alertVersion: Int32?

            public var alertWays: [String]?

            public var config: String?

            public var contactGroupIdList: String?

            public var contactGroupIds: String?

            public var createTime: Int64?

            public var hostByAlertManager: Bool?

            public var id: Int64?

            public var metricParam: SearchAlertRulesResponseBody.PageBean.AlertRules.MetricParam?

            public var notice: SearchAlertRulesResponseBody.PageBean.AlertRules.Notice?

            public var regionId: String?

            public var resourceGroupId: String?

            public var status: String?

            public var taskId: Int64?

            public var taskStatus: String?

            public var title: String?

            public var updateTime: Int64?

            public var userId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.alarmContext?.validate()
                try self.alertRule?.validate()
                try self.metricParam?.validate()
                try self.notice?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.alarmContext != nil {
                    map["AlarmContext"] = self.alarmContext?.toMap()
                }
                if self.alertLevel != nil {
                    map["AlertLevel"] = self.alertLevel!
                }
                if self.alertRule != nil {
                    map["AlertRule"] = self.alertRule?.toMap()
                }
                if self.alertTitle != nil {
                    map["AlertTitle"] = self.alertTitle!
                }
                if self.alertType != nil {
                    map["AlertType"] = self.alertType!
                }
                if self.alertVersion != nil {
                    map["AlertVersion"] = self.alertVersion!
                }
                if self.alertWays != nil {
                    map["AlertWays"] = self.alertWays!
                }
                if self.config != nil {
                    map["Config"] = self.config!
                }
                if self.contactGroupIdList != nil {
                    map["ContactGroupIdList"] = self.contactGroupIdList!
                }
                if self.contactGroupIds != nil {
                    map["ContactGroupIds"] = self.contactGroupIds!
                }
                if self.createTime != nil {
                    map["CreateTime"] = self.createTime!
                }
                if self.hostByAlertManager != nil {
                    map["HostByAlertManager"] = self.hostByAlertManager!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.metricParam != nil {
                    map["MetricParam"] = self.metricParam?.toMap()
                }
                if self.notice != nil {
                    map["Notice"] = self.notice?.toMap()
                }
                if self.regionId != nil {
                    map["RegionId"] = self.regionId!
                }
                if self.resourceGroupId != nil {
                    map["ResourceGroupId"] = self.resourceGroupId!
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                if self.taskId != nil {
                    map["TaskId"] = self.taskId!
                }
                if self.taskStatus != nil {
                    map["TaskStatus"] = self.taskStatus!
                }
                if self.title != nil {
                    map["Title"] = self.title!
                }
                if self.updateTime != nil {
                    map["UpdateTime"] = self.updateTime!
                }
                if self.userId != nil {
                    map["UserId"] = self.userId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AlarmContext"] as? [String: Any?] {
                    var model = SearchAlertRulesResponseBody.PageBean.AlertRules.AlarmContext()
                    model.fromMap(value)
                    self.alarmContext = model
                }
                if let value = dict["AlertLevel"] as? String {
                    self.alertLevel = value
                }
                if let value = dict["AlertRule"] as? [String: Any?] {
                    var model = SearchAlertRulesResponseBody.PageBean.AlertRules.AlertRule()
                    model.fromMap(value)
                    self.alertRule = model
                }
                if let value = dict["AlertTitle"] as? String {
                    self.alertTitle = value
                }
                if let value = dict["AlertType"] as? Int32 {
                    self.alertType = value
                }
                if let value = dict["AlertVersion"] as? Int32 {
                    self.alertVersion = value
                }
                if let value = dict["AlertWays"] as? [String] {
                    self.alertWays = value
                }
                if let value = dict["Config"] as? String {
                    self.config = value
                }
                if let value = dict["ContactGroupIdList"] as? String {
                    self.contactGroupIdList = value
                }
                if let value = dict["ContactGroupIds"] as? String {
                    self.contactGroupIds = value
                }
                if let value = dict["CreateTime"] as? Int64 {
                    self.createTime = value
                }
                if let value = dict["HostByAlertManager"] as? Bool {
                    self.hostByAlertManager = value
                }
                if let value = dict["Id"] as? Int64 {
                    self.id = value
                }
                if let value = dict["MetricParam"] as? [String: Any?] {
                    var model = SearchAlertRulesResponseBody.PageBean.AlertRules.MetricParam()
                    model.fromMap(value)
                    self.metricParam = model
                }
                if let value = dict["Notice"] as? [String: Any?] {
                    var model = SearchAlertRulesResponseBody.PageBean.AlertRules.Notice()
                    model.fromMap(value)
                    self.notice = model
                }
                if let value = dict["RegionId"] as? String {
                    self.regionId = value
                }
                if let value = dict["ResourceGroupId"] as? String {
                    self.resourceGroupId = value
                }
                if let value = dict["Status"] as? String {
                    self.status = value
                }
                if let value = dict["TaskId"] as? Int64 {
                    self.taskId = value
                }
                if let value = dict["TaskStatus"] as? String {
                    self.taskStatus = value
                }
                if let value = dict["Title"] as? String {
                    self.title = value
                }
                if let value = dict["UpdateTime"] as? Int64 {
                    self.updateTime = value
                }
                if let value = dict["UserId"] as? String {
                    self.userId = value
                }
            }
        }
        public var alertRules: [SearchAlertRulesResponseBody.PageBean.AlertRules]?

        public var pageNumber: Int32?

        public var pageSize: Int32?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.alertRules != nil {
                var tmp : [Any] = []
                for k in self.alertRules! {
                    tmp.append(k.toMap())
                }
                map["AlertRules"] = tmp
            }
            if self.pageNumber != nil {
                map["PageNumber"] = self.pageNumber!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AlertRules"] as? [Any?] {
                var tmp : [SearchAlertRulesResponseBody.PageBean.AlertRules] = []
                for v in value {
                    if v != nil {
                        var model = SearchAlertRulesResponseBody.PageBean.AlertRules()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.alertRules = tmp
            }
            if let value = dict["PageNumber"] as? Int32 {
                self.pageNumber = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var pageBean: SearchAlertRulesResponseBody.PageBean?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.pageBean?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageBean != nil {
            map["PageBean"] = self.pageBean?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageBean"] as? [String: Any?] {
            var model = SearchAlertRulesResponseBody.PageBean()
            model.fromMap(value)
            self.pageBean = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class SearchAlertRulesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SearchAlertRulesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SearchAlertRulesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SearchEventsRequest : Tea.TeaModel {
    public var alertId: Int64?

    public var alertType: Int32?

    public var appType: String?

    public var currentPage: Int32?

    public var endTime: Int64?

    public var isTrigger: Int32?

    public var pageSize: Int32?

    public var pid: String?

    public var regionId: String?

    public var startTime: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.alertId != nil {
            map["AlertId"] = self.alertId!
        }
        if self.alertType != nil {
            map["AlertType"] = self.alertType!
        }
        if self.appType != nil {
            map["AppType"] = self.appType!
        }
        if self.currentPage != nil {
            map["CurrentPage"] = self.currentPage!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.isTrigger != nil {
            map["IsTrigger"] = self.isTrigger!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.pid != nil {
            map["Pid"] = self.pid!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AlertId"] as? Int64 {
            self.alertId = value
        }
        if let value = dict["AlertType"] as? Int32 {
            self.alertType = value
        }
        if let value = dict["AppType"] as? String {
            self.appType = value
        }
        if let value = dict["CurrentPage"] as? Int32 {
            self.currentPage = value
        }
        if let value = dict["EndTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["IsTrigger"] as? Int32 {
            self.isTrigger = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["Pid"] as? String {
            self.pid = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
    }
}

public class SearchEventsResponseBody : Tea.TeaModel {
    public class PageBean : Tea.TeaModel {
        public class Event : Tea.TeaModel {
            public var alertId: Int64?

            public var alertName: String?

            public var alertRule: String?

            public var alertType: Int32?

            public var eventLevel: String?

            public var eventTime: Int64?

            public var id: Int64?

            public var links: [String]?

            public var message: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.alertId != nil {
                    map["AlertId"] = self.alertId!
                }
                if self.alertName != nil {
                    map["AlertName"] = self.alertName!
                }
                if self.alertRule != nil {
                    map["AlertRule"] = self.alertRule!
                }
                if self.alertType != nil {
                    map["AlertType"] = self.alertType!
                }
                if self.eventLevel != nil {
                    map["EventLevel"] = self.eventLevel!
                }
                if self.eventTime != nil {
                    map["EventTime"] = self.eventTime!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.links != nil {
                    map["Links"] = self.links!
                }
                if self.message != nil {
                    map["Message"] = self.message!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AlertId"] as? Int64 {
                    self.alertId = value
                }
                if let value = dict["AlertName"] as? String {
                    self.alertName = value
                }
                if let value = dict["AlertRule"] as? String {
                    self.alertRule = value
                }
                if let value = dict["AlertType"] as? Int32 {
                    self.alertType = value
                }
                if let value = dict["EventLevel"] as? String {
                    self.eventLevel = value
                }
                if let value = dict["EventTime"] as? Int64 {
                    self.eventTime = value
                }
                if let value = dict["Id"] as? Int64 {
                    self.id = value
                }
                if let value = dict["Links"] as? [String] {
                    self.links = value
                }
                if let value = dict["Message"] as? String {
                    self.message = value
                }
            }
        }
        public var event: [SearchEventsResponseBody.PageBean.Event]?

        public var pageNumber: Int32?

        public var pageSize: Int32?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.event != nil {
                var tmp : [Any] = []
                for k in self.event! {
                    tmp.append(k.toMap())
                }
                map["Event"] = tmp
            }
            if self.pageNumber != nil {
                map["PageNumber"] = self.pageNumber!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Event"] as? [Any?] {
                var tmp : [SearchEventsResponseBody.PageBean.Event] = []
                for v in value {
                    if v != nil {
                        var model = SearchEventsResponseBody.PageBean.Event()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.event = tmp
            }
            if let value = dict["PageNumber"] as? Int32 {
                self.pageNumber = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var isTrigger: Int32?

    public var pageBean: SearchEventsResponseBody.PageBean?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.pageBean?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.isTrigger != nil {
            map["IsTrigger"] = self.isTrigger!
        }
        if self.pageBean != nil {
            map["PageBean"] = self.pageBean?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["IsTrigger"] as? Int32 {
            self.isTrigger = value
        }
        if let value = dict["PageBean"] as? [String: Any?] {
            var model = SearchEventsResponseBody.PageBean()
            model.fromMap(value)
            self.pageBean = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class SearchEventsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SearchEventsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SearchEventsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SearchRetcodeAppByPageRequest : Tea.TeaModel {
    public class Tags : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var regionId: String?

    public var resourceGroupId: String?

    public var retcodeAppId: String?

    public var retcodeAppName: String?

    public var tags: [SearchRetcodeAppByPageRequest.Tags]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceGroupId != nil {
            map["ResourceGroupId"] = self.resourceGroupId!
        }
        if self.retcodeAppId != nil {
            map["RetcodeAppId"] = self.retcodeAppId!
        }
        if self.retcodeAppName != nil {
            map["RetcodeAppName"] = self.retcodeAppName!
        }
        if self.tags != nil {
            var tmp : [Any] = []
            for k in self.tags! {
                tmp.append(k.toMap())
            }
            map["Tags"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceGroupId"] as? String {
            self.resourceGroupId = value
        }
        if let value = dict["RetcodeAppId"] as? String {
            self.retcodeAppId = value
        }
        if let value = dict["RetcodeAppName"] as? String {
            self.retcodeAppName = value
        }
        if let value = dict["Tags"] as? [Any?] {
            var tmp : [SearchRetcodeAppByPageRequest.Tags] = []
            for v in value {
                if v != nil {
                    var model = SearchRetcodeAppByPageRequest.Tags()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tags = tmp
        }
    }
}

public class SearchRetcodeAppByPageResponseBody : Tea.TeaModel {
    public class PageBean : Tea.TeaModel {
        public class RetcodeApps : Tea.TeaModel {
            public class Tags : Tea.TeaModel {
                public var key: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.key != nil {
                        map["Key"] = self.key!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Key"] as? String {
                        self.key = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public var appId: Int64?

            public var appName: String?

            public var createTime: Int64?

            public var nickName: String?

            public var pid: String?

            public var regionId: String?

            public var resourceGroupId: String?

            public var retcodeAppType: String?

            public var tags: [SearchRetcodeAppByPageResponseBody.PageBean.RetcodeApps.Tags]?

            public var type: String?

            public var updateTime: Int64?

            public var userId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.appId != nil {
                    map["AppId"] = self.appId!
                }
                if self.appName != nil {
                    map["AppName"] = self.appName!
                }
                if self.createTime != nil {
                    map["CreateTime"] = self.createTime!
                }
                if self.nickName != nil {
                    map["NickName"] = self.nickName!
                }
                if self.pid != nil {
                    map["Pid"] = self.pid!
                }
                if self.regionId != nil {
                    map["RegionId"] = self.regionId!
                }
                if self.resourceGroupId != nil {
                    map["ResourceGroupId"] = self.resourceGroupId!
                }
                if self.retcodeAppType != nil {
                    map["RetcodeAppType"] = self.retcodeAppType!
                }
                if self.tags != nil {
                    var tmp : [Any] = []
                    for k in self.tags! {
                        tmp.append(k.toMap())
                    }
                    map["Tags"] = tmp
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                if self.updateTime != nil {
                    map["UpdateTime"] = self.updateTime!
                }
                if self.userId != nil {
                    map["UserId"] = self.userId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AppId"] as? Int64 {
                    self.appId = value
                }
                if let value = dict["AppName"] as? String {
                    self.appName = value
                }
                if let value = dict["CreateTime"] as? Int64 {
                    self.createTime = value
                }
                if let value = dict["NickName"] as? String {
                    self.nickName = value
                }
                if let value = dict["Pid"] as? String {
                    self.pid = value
                }
                if let value = dict["RegionId"] as? String {
                    self.regionId = value
                }
                if let value = dict["ResourceGroupId"] as? String {
                    self.resourceGroupId = value
                }
                if let value = dict["RetcodeAppType"] as? String {
                    self.retcodeAppType = value
                }
                if let value = dict["Tags"] as? [Any?] {
                    var tmp : [SearchRetcodeAppByPageResponseBody.PageBean.RetcodeApps.Tags] = []
                    for v in value {
                        if v != nil {
                            var model = SearchRetcodeAppByPageResponseBody.PageBean.RetcodeApps.Tags()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.tags = tmp
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
                if let value = dict["UpdateTime"] as? Int64 {
                    self.updateTime = value
                }
                if let value = dict["UserId"] as? String {
                    self.userId = value
                }
            }
        }
        public var pageNumber: Int32?

        public var pageSize: Int32?

        public var retcodeApps: [SearchRetcodeAppByPageResponseBody.PageBean.RetcodeApps]?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.pageNumber != nil {
                map["PageNumber"] = self.pageNumber!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.retcodeApps != nil {
                var tmp : [Any] = []
                for k in self.retcodeApps! {
                    tmp.append(k.toMap())
                }
                map["RetcodeApps"] = tmp
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["PageNumber"] as? Int32 {
                self.pageNumber = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
            if let value = dict["RetcodeApps"] as? [Any?] {
                var tmp : [SearchRetcodeAppByPageResponseBody.PageBean.RetcodeApps] = []
                for v in value {
                    if v != nil {
                        var model = SearchRetcodeAppByPageResponseBody.PageBean.RetcodeApps()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.retcodeApps = tmp
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var pageBean: SearchRetcodeAppByPageResponseBody.PageBean?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.pageBean?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageBean != nil {
            map["PageBean"] = self.pageBean?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageBean"] as? [String: Any?] {
            var model = SearchRetcodeAppByPageResponseBody.PageBean()
            model.fromMap(value)
            self.pageBean = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class SearchRetcodeAppByPageResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SearchRetcodeAppByPageResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SearchRetcodeAppByPageResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SearchTraceAppByNameRequest : Tea.TeaModel {
    public class Tags : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var regionId: String?

    public var tags: [SearchTraceAppByNameRequest.Tags]?

    public var traceAppName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.tags != nil {
            var tmp : [Any] = []
            for k in self.tags! {
                tmp.append(k.toMap())
            }
            map["Tags"] = tmp
        }
        if self.traceAppName != nil {
            map["TraceAppName"] = self.traceAppName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Tags"] as? [Any?] {
            var tmp : [SearchTraceAppByNameRequest.Tags] = []
            for v in value {
                if v != nil {
                    var model = SearchTraceAppByNameRequest.Tags()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tags = tmp
        }
        if let value = dict["TraceAppName"] as? String {
            self.traceAppName = value
        }
    }
}

public class SearchTraceAppByNameResponseBody : Tea.TeaModel {
    public class TraceApps : Tea.TeaModel {
        public class Tags : Tea.TeaModel {
            public var key: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.key != nil {
                    map["Key"] = self.key!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Key"] as? String {
                    self.key = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public var appId: Int64?

        public var appName: String?

        public var createTime: Int64?

        public var labels: [String]?

        public var pid: String?

        public var regionId: String?

        public var resourceGroupId: String?

        public var show: Bool?

        public var tags: [SearchTraceAppByNameResponseBody.TraceApps.Tags]?

        public var type: String?

        public var updateTime: Int64?

        public var userId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.appId != nil {
                map["AppId"] = self.appId!
            }
            if self.appName != nil {
                map["AppName"] = self.appName!
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.labels != nil {
                map["Labels"] = self.labels!
            }
            if self.pid != nil {
                map["Pid"] = self.pid!
            }
            if self.regionId != nil {
                map["RegionId"] = self.regionId!
            }
            if self.resourceGroupId != nil {
                map["ResourceGroupId"] = self.resourceGroupId!
            }
            if self.show != nil {
                map["Show"] = self.show!
            }
            if self.tags != nil {
                var tmp : [Any] = []
                for k in self.tags! {
                    tmp.append(k.toMap())
                }
                map["Tags"] = tmp
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            if self.updateTime != nil {
                map["UpdateTime"] = self.updateTime!
            }
            if self.userId != nil {
                map["UserId"] = self.userId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AppId"] as? Int64 {
                self.appId = value
            }
            if let value = dict["AppName"] as? String {
                self.appName = value
            }
            if let value = dict["CreateTime"] as? Int64 {
                self.createTime = value
            }
            if let value = dict["Labels"] as? [String] {
                self.labels = value
            }
            if let value = dict["Pid"] as? String {
                self.pid = value
            }
            if let value = dict["RegionId"] as? String {
                self.regionId = value
            }
            if let value = dict["ResourceGroupId"] as? String {
                self.resourceGroupId = value
            }
            if let value = dict["Show"] as? Bool {
                self.show = value
            }
            if let value = dict["Tags"] as? [Any?] {
                var tmp : [SearchTraceAppByNameResponseBody.TraceApps.Tags] = []
                for v in value {
                    if v != nil {
                        var model = SearchTraceAppByNameResponseBody.TraceApps.Tags()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.tags = tmp
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
            if let value = dict["UpdateTime"] as? Int64 {
                self.updateTime = value
            }
            if let value = dict["UserId"] as? String {
                self.userId = value
            }
        }
    }
    public var requestId: String?

    public var traceApps: [SearchTraceAppByNameResponseBody.TraceApps]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.traceApps != nil {
            var tmp : [Any] = []
            for k in self.traceApps! {
                tmp.append(k.toMap())
            }
            map["TraceApps"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TraceApps"] as? [Any?] {
            var tmp : [SearchTraceAppByNameResponseBody.TraceApps] = []
            for v in value {
                if v != nil {
                    var model = SearchTraceAppByNameResponseBody.TraceApps()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.traceApps = tmp
        }
    }
}

public class SearchTraceAppByNameResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SearchTraceAppByNameResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SearchTraceAppByNameResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SearchTraceAppByPageRequest : Tea.TeaModel {
    public class Tags : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var regionId: String?

    public var resourceGroupId: String?

    public var tags: [SearchTraceAppByPageRequest.Tags]?

    public var traceAppName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceGroupId != nil {
            map["ResourceGroupId"] = self.resourceGroupId!
        }
        if self.tags != nil {
            var tmp : [Any] = []
            for k in self.tags! {
                tmp.append(k.toMap())
            }
            map["Tags"] = tmp
        }
        if self.traceAppName != nil {
            map["TraceAppName"] = self.traceAppName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceGroupId"] as? String {
            self.resourceGroupId = value
        }
        if let value = dict["Tags"] as? [Any?] {
            var tmp : [SearchTraceAppByPageRequest.Tags] = []
            for v in value {
                if v != nil {
                    var model = SearchTraceAppByPageRequest.Tags()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tags = tmp
        }
        if let value = dict["TraceAppName"] as? String {
            self.traceAppName = value
        }
    }
}

public class SearchTraceAppByPageResponseBody : Tea.TeaModel {
    public class PageBean : Tea.TeaModel {
        public class TraceApps : Tea.TeaModel {
            public class Tags : Tea.TeaModel {
                public var key: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.key != nil {
                        map["Key"] = self.key!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Key"] as? String {
                        self.key = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public var appId: Int64?

            public var appName: String?

            public var createTime: Int64?

            public var labels: [String]?

            public var pid: String?

            public var regionId: String?

            public var resourceGroupId: String?

            public var show: Bool?

            public var tags: [SearchTraceAppByPageResponseBody.PageBean.TraceApps.Tags]?

            public var type: String?

            public var updateTime: Int64?

            public var userId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.appId != nil {
                    map["AppId"] = self.appId!
                }
                if self.appName != nil {
                    map["AppName"] = self.appName!
                }
                if self.createTime != nil {
                    map["CreateTime"] = self.createTime!
                }
                if self.labels != nil {
                    map["Labels"] = self.labels!
                }
                if self.pid != nil {
                    map["Pid"] = self.pid!
                }
                if self.regionId != nil {
                    map["RegionId"] = self.regionId!
                }
                if self.resourceGroupId != nil {
                    map["ResourceGroupId"] = self.resourceGroupId!
                }
                if self.show != nil {
                    map["Show"] = self.show!
                }
                if self.tags != nil {
                    var tmp : [Any] = []
                    for k in self.tags! {
                        tmp.append(k.toMap())
                    }
                    map["Tags"] = tmp
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                if self.updateTime != nil {
                    map["UpdateTime"] = self.updateTime!
                }
                if self.userId != nil {
                    map["UserId"] = self.userId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AppId"] as? Int64 {
                    self.appId = value
                }
                if let value = dict["AppName"] as? String {
                    self.appName = value
                }
                if let value = dict["CreateTime"] as? Int64 {
                    self.createTime = value
                }
                if let value = dict["Labels"] as? [String] {
                    self.labels = value
                }
                if let value = dict["Pid"] as? String {
                    self.pid = value
                }
                if let value = dict["RegionId"] as? String {
                    self.regionId = value
                }
                if let value = dict["ResourceGroupId"] as? String {
                    self.resourceGroupId = value
                }
                if let value = dict["Show"] as? Bool {
                    self.show = value
                }
                if let value = dict["Tags"] as? [Any?] {
                    var tmp : [SearchTraceAppByPageResponseBody.PageBean.TraceApps.Tags] = []
                    for v in value {
                        if v != nil {
                            var model = SearchTraceAppByPageResponseBody.PageBean.TraceApps.Tags()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.tags = tmp
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
                if let value = dict["UpdateTime"] as? Int64 {
                    self.updateTime = value
                }
                if let value = dict["UserId"] as? String {
                    self.userId = value
                }
            }
        }
        public var pageNumber: Int32?

        public var pageSize: Int32?

        public var totalCount: Int32?

        public var traceApps: [SearchTraceAppByPageResponseBody.PageBean.TraceApps]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.pageNumber != nil {
                map["PageNumber"] = self.pageNumber!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            if self.traceApps != nil {
                var tmp : [Any] = []
                for k in self.traceApps! {
                    tmp.append(k.toMap())
                }
                map["TraceApps"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["PageNumber"] as? Int32 {
                self.pageNumber = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
            if let value = dict["TraceApps"] as? [Any?] {
                var tmp : [SearchTraceAppByPageResponseBody.PageBean.TraceApps] = []
                for v in value {
                    if v != nil {
                        var model = SearchTraceAppByPageResponseBody.PageBean.TraceApps()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.traceApps = tmp
            }
        }
    }
    public var pageBean: SearchTraceAppByPageResponseBody.PageBean?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.pageBean?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageBean != nil {
            map["PageBean"] = self.pageBean?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageBean"] as? [String: Any?] {
            var model = SearchTraceAppByPageResponseBody.PageBean()
            model.fromMap(value)
            self.pageBean = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class SearchTraceAppByPageResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SearchTraceAppByPageResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SearchTraceAppByPageResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SearchTracesRequest : Tea.TeaModel {
    public class ExclusionFilters : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public class Tag : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var endTime: Int64?

    public var exclusionFilters: [SearchTracesRequest.ExclusionFilters]?

    public var minDuration: Int64?

    public var operationName: String?

    public var pid: String?

    public var regionId: String?

    public var reverse: Bool?

    public var serviceIp: String?

    public var serviceName: String?

    public var startTime: Int64?

    public var tag: [SearchTracesRequest.Tag]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.exclusionFilters != nil {
            var tmp : [Any] = []
            for k in self.exclusionFilters! {
                tmp.append(k.toMap())
            }
            map["ExclusionFilters"] = tmp
        }
        if self.minDuration != nil {
            map["MinDuration"] = self.minDuration!
        }
        if self.operationName != nil {
            map["OperationName"] = self.operationName!
        }
        if self.pid != nil {
            map["Pid"] = self.pid!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.reverse != nil {
            map["Reverse"] = self.reverse!
        }
        if self.serviceIp != nil {
            map["ServiceIp"] = self.serviceIp!
        }
        if self.serviceName != nil {
            map["ServiceName"] = self.serviceName!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.tag != nil {
            var tmp : [Any] = []
            for k in self.tag! {
                tmp.append(k.toMap())
            }
            map["Tag"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["ExclusionFilters"] as? [Any?] {
            var tmp : [SearchTracesRequest.ExclusionFilters] = []
            for v in value {
                if v != nil {
                    var model = SearchTracesRequest.ExclusionFilters()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.exclusionFilters = tmp
        }
        if let value = dict["MinDuration"] as? Int64 {
            self.minDuration = value
        }
        if let value = dict["OperationName"] as? String {
            self.operationName = value
        }
        if let value = dict["Pid"] as? String {
            self.pid = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Reverse"] as? Bool {
            self.reverse = value
        }
        if let value = dict["ServiceIp"] as? String {
            self.serviceIp = value
        }
        if let value = dict["ServiceName"] as? String {
            self.serviceName = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
        if let value = dict["Tag"] as? [Any?] {
            var tmp : [SearchTracesRequest.Tag] = []
            for v in value {
                if v != nil {
                    var model = SearchTracesRequest.Tag()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tag = tmp
        }
    }
}

public class SearchTracesResponseBody : Tea.TeaModel {
    public class TraceInfos : Tea.TeaModel {
        public var duration: Int64?

        public var operationName: String?

        public var serviceIp: String?

        public var serviceName: String?

        public var spanID: String?

        public var timestamp: Int64?

        public var traceID: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.duration != nil {
                map["Duration"] = self.duration!
            }
            if self.operationName != nil {
                map["OperationName"] = self.operationName!
            }
            if self.serviceIp != nil {
                map["ServiceIp"] = self.serviceIp!
            }
            if self.serviceName != nil {
                map["ServiceName"] = self.serviceName!
            }
            if self.spanID != nil {
                map["SpanID"] = self.spanID!
            }
            if self.timestamp != nil {
                map["Timestamp"] = self.timestamp!
            }
            if self.traceID != nil {
                map["TraceID"] = self.traceID!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Duration"] as? Int64 {
                self.duration = value
            }
            if let value = dict["OperationName"] as? String {
                self.operationName = value
            }
            if let value = dict["ServiceIp"] as? String {
                self.serviceIp = value
            }
            if let value = dict["ServiceName"] as? String {
                self.serviceName = value
            }
            if let value = dict["SpanID"] as? String {
                self.spanID = value
            }
            if let value = dict["Timestamp"] as? Int64 {
                self.timestamp = value
            }
            if let value = dict["TraceID"] as? String {
                self.traceID = value
            }
        }
    }
    public var requestId: String?

    public var traceInfos: [SearchTracesResponseBody.TraceInfos]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.traceInfos != nil {
            var tmp : [Any] = []
            for k in self.traceInfos! {
                tmp.append(k.toMap())
            }
            map["TraceInfos"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TraceInfos"] as? [Any?] {
            var tmp : [SearchTracesResponseBody.TraceInfos] = []
            for v in value {
                if v != nil {
                    var model = SearchTracesResponseBody.TraceInfos()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.traceInfos = tmp
        }
    }
}

public class SearchTracesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SearchTracesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SearchTracesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SearchTracesByPageRequest : Tea.TeaModel {
    public class ExclusionFilters : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public class Tags : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var endTime: Int64?

    public var exclusionFilters: [SearchTracesByPageRequest.ExclusionFilters]?

    public var isError: Bool?

    public var minDuration: Int64?

    public var operationName: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var pid: String?

    public var regionId: String?

    public var reverse: Bool?

    public var serviceIp: String?

    public var serviceName: String?

    public var startTime: Int64?

    public var tags: [SearchTracesByPageRequest.Tags]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.exclusionFilters != nil {
            var tmp : [Any] = []
            for k in self.exclusionFilters! {
                tmp.append(k.toMap())
            }
            map["ExclusionFilters"] = tmp
        }
        if self.isError != nil {
            map["IsError"] = self.isError!
        }
        if self.minDuration != nil {
            map["MinDuration"] = self.minDuration!
        }
        if self.operationName != nil {
            map["OperationName"] = self.operationName!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.pid != nil {
            map["Pid"] = self.pid!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.reverse != nil {
            map["Reverse"] = self.reverse!
        }
        if self.serviceIp != nil {
            map["ServiceIp"] = self.serviceIp!
        }
        if self.serviceName != nil {
            map["ServiceName"] = self.serviceName!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.tags != nil {
            var tmp : [Any] = []
            for k in self.tags! {
                tmp.append(k.toMap())
            }
            map["Tags"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["ExclusionFilters"] as? [Any?] {
            var tmp : [SearchTracesByPageRequest.ExclusionFilters] = []
            for v in value {
                if v != nil {
                    var model = SearchTracesByPageRequest.ExclusionFilters()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.exclusionFilters = tmp
        }
        if let value = dict["IsError"] as? Bool {
            self.isError = value
        }
        if let value = dict["MinDuration"] as? Int64 {
            self.minDuration = value
        }
        if let value = dict["OperationName"] as? String {
            self.operationName = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["Pid"] as? String {
            self.pid = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Reverse"] as? Bool {
            self.reverse = value
        }
        if let value = dict["ServiceIp"] as? String {
            self.serviceIp = value
        }
        if let value = dict["ServiceName"] as? String {
            self.serviceName = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
        if let value = dict["Tags"] as? [Any?] {
            var tmp : [SearchTracesByPageRequest.Tags] = []
            for v in value {
                if v != nil {
                    var model = SearchTracesByPageRequest.Tags()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tags = tmp
        }
    }
}

public class SearchTracesByPageResponseBody : Tea.TeaModel {
    public class PageBean : Tea.TeaModel {
        public class TraceInfos : Tea.TeaModel {
            public var duration: Int64?

            public var operationName: String?

            public var serviceIp: String?

            public var serviceName: String?

            public var spanID: String?

            public var timestamp: Int64?

            public var traceID: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.duration != nil {
                    map["Duration"] = self.duration!
                }
                if self.operationName != nil {
                    map["OperationName"] = self.operationName!
                }
                if self.serviceIp != nil {
                    map["ServiceIp"] = self.serviceIp!
                }
                if self.serviceName != nil {
                    map["ServiceName"] = self.serviceName!
                }
                if self.spanID != nil {
                    map["SpanID"] = self.spanID!
                }
                if self.timestamp != nil {
                    map["Timestamp"] = self.timestamp!
                }
                if self.traceID != nil {
                    map["TraceID"] = self.traceID!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Duration"] as? Int64 {
                    self.duration = value
                }
                if let value = dict["OperationName"] as? String {
                    self.operationName = value
                }
                if let value = dict["ServiceIp"] as? String {
                    self.serviceIp = value
                }
                if let value = dict["ServiceName"] as? String {
                    self.serviceName = value
                }
                if let value = dict["SpanID"] as? String {
                    self.spanID = value
                }
                if let value = dict["Timestamp"] as? Int64 {
                    self.timestamp = value
                }
                if let value = dict["TraceID"] as? String {
                    self.traceID = value
                }
            }
        }
        public var pageNumber: Int32?

        public var pageSize: Int32?

        public var total: Int32?

        public var traceInfos: [SearchTracesByPageResponseBody.PageBean.TraceInfos]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.pageNumber != nil {
                map["PageNumber"] = self.pageNumber!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.total != nil {
                map["Total"] = self.total!
            }
            if self.traceInfos != nil {
                var tmp : [Any] = []
                for k in self.traceInfos! {
                    tmp.append(k.toMap())
                }
                map["TraceInfos"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["PageNumber"] as? Int32 {
                self.pageNumber = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
            if let value = dict["Total"] as? Int32 {
                self.total = value
            }
            if let value = dict["TraceInfos"] as? [Any?] {
                var tmp : [SearchTracesByPageResponseBody.PageBean.TraceInfos] = []
                for v in value {
                    if v != nil {
                        var model = SearchTracesByPageResponseBody.PageBean.TraceInfos()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.traceInfos = tmp
            }
        }
    }
    public var pageBean: SearchTracesByPageResponseBody.PageBean?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.pageBean?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageBean != nil {
            map["PageBean"] = self.pageBean?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageBean"] as? [String: Any?] {
            var model = SearchTracesByPageResponseBody.PageBean()
            model.fromMap(value)
            self.pageBean = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class SearchTracesByPageResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SearchTracesByPageResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SearchTracesByPageResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SendTTSVerifyLinkRequest : Tea.TeaModel {
    public var contactId: Int64?

    public var phone: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.contactId != nil {
            map["ContactId"] = self.contactId!
        }
        if self.phone != nil {
            map["Phone"] = self.phone!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ContactId"] as? Int64 {
            self.contactId = value
        }
        if let value = dict["Phone"] as? String {
            self.phone = value
        }
    }
}

public class SendTTSVerifyLinkResponseBody : Tea.TeaModel {
    public var isSuccess: Bool?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.isSuccess != nil {
            map["IsSuccess"] = self.isSuccess!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["IsSuccess"] as? Bool {
            self.isSuccess = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class SendTTSVerifyLinkResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SendTTSVerifyLinkResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SendTTSVerifyLinkResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SetRetcodeShareStatusRequest : Tea.TeaModel {
    public var appName: String?

    public var pid: String?

    public var status: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appName != nil {
            map["AppName"] = self.appName!
        }
        if self.pid != nil {
            map["Pid"] = self.pid!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppName"] as? String {
            self.appName = value
        }
        if let value = dict["Pid"] as? String {
            self.pid = value
        }
        if let value = dict["Status"] as? Bool {
            self.status = value
        }
    }
}

public class SetRetcodeShareStatusResponseBody : Tea.TeaModel {
    public var isSuccess: Bool?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.isSuccess != nil {
            map["IsSuccess"] = self.isSuccess!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["IsSuccess"] as? Bool {
            self.isSuccess = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class SetRetcodeShareStatusResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SetRetcodeShareStatusResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SetRetcodeShareStatusResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class StartAlertRequest : Tea.TeaModel {
    public var alertId: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.alertId != nil {
            map["AlertId"] = self.alertId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AlertId"] as? String {
            self.alertId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class StartAlertResponseBody : Tea.TeaModel {
    public var isSuccess: Bool?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.isSuccess != nil {
            map["IsSuccess"] = self.isSuccess!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["IsSuccess"] as? Bool {
            self.isSuccess = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class StartAlertResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: StartAlertResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = StartAlertResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class StartTimingSyntheticTaskRequest : Tea.TeaModel {
    public var regionId: String?

    public var taskIds: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.taskIds != nil {
            map["TaskIds"] = self.taskIds!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["TaskIds"] as? [String] {
            self.taskIds = value
        }
    }
}

public class StartTimingSyntheticTaskShrinkRequest : Tea.TeaModel {
    public var regionId: String?

    public var taskIdsShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.taskIdsShrink != nil {
            map["TaskIds"] = self.taskIdsShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["TaskIds"] as? String {
            self.taskIdsShrink = value
        }
    }
}

public class StartTimingSyntheticTaskResponseBody : Tea.TeaModel {
    public var code: Int64?

    public var data: Bool?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int64 {
            self.code = value
        }
        if let value = dict["Data"] as? Bool {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class StartTimingSyntheticTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: StartTimingSyntheticTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = StartTimingSyntheticTaskResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class StopAlertRequest : Tea.TeaModel {
    public var alertId: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.alertId != nil {
            map["AlertId"] = self.alertId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AlertId"] as? String {
            self.alertId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class StopAlertResponseBody : Tea.TeaModel {
    public var isSuccess: Bool?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.isSuccess != nil {
            map["IsSuccess"] = self.isSuccess!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["IsSuccess"] as? Bool {
            self.isSuccess = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class StopAlertResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: StopAlertResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = StopAlertResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class StopTimingSyntheticTaskRequest : Tea.TeaModel {
    public var regionId: String?

    public var taskIds: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.taskIds != nil {
            map["TaskIds"] = self.taskIds!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["TaskIds"] as? [String] {
            self.taskIds = value
        }
    }
}

public class StopTimingSyntheticTaskShrinkRequest : Tea.TeaModel {
    public var regionId: String?

    public var taskIdsShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.taskIdsShrink != nil {
            map["TaskIds"] = self.taskIdsShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["TaskIds"] as? String {
            self.taskIdsShrink = value
        }
    }
}

public class StopTimingSyntheticTaskResponseBody : Tea.TeaModel {
    public var code: Int64?

    public var data: Bool?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int64 {
            self.code = value
        }
        if let value = dict["Data"] as? Bool {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class StopTimingSyntheticTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: StopTimingSyntheticTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = StopTimingSyntheticTaskResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SwitchSyntheticTaskStatusRequest : Tea.TeaModel {
    public var switchStatus: Int64?

    public var taskIds: [Int64]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.switchStatus != nil {
            map["SwitchStatus"] = self.switchStatus!
        }
        if self.taskIds != nil {
            map["TaskIds"] = self.taskIds!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["SwitchStatus"] as? Int64 {
            self.switchStatus = value
        }
        if let value = dict["TaskIds"] as? [Int64] {
            self.taskIds = value
        }
    }
}

public class SwitchSyntheticTaskStatusResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var result: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.result != nil {
            map["Result"] = self.result!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Result"] as? String {
            self.result = value
        }
    }
}

public class SwitchSyntheticTaskStatusResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SwitchSyntheticTaskStatusResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SwitchSyntheticTaskStatusResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SyncRecordingRulesRequest : Tea.TeaModel {
    public var clusterId: String?

    public var regionId: String?

    public var targetClusters: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.targetClusters != nil {
            map["TargetClusters"] = self.targetClusters!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClusterId"] as? String {
            self.clusterId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["TargetClusters"] as? String {
            self.targetClusters = value
        }
    }
}

public class SyncRecordingRulesResponseBody : Tea.TeaModel {
    public var code: Int32?

    public var data: String?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class SyncRecordingRulesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SyncRecordingRulesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SyncRecordingRulesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class TagResourcesRequest : Tea.TeaModel {
    public class Tag : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var resourceId: [String]?

    public var resourceType: String?

    public var tag: [TagResourcesRequest.Tag]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.resourceId != nil {
            map["ResourceId"] = self.resourceId!
        }
        if self.resourceType != nil {
            map["ResourceType"] = self.resourceType!
        }
        if self.tag != nil {
            var tmp : [Any] = []
            for k in self.tag! {
                tmp.append(k.toMap())
            }
            map["Tag"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ResourceId"] as? [String] {
            self.resourceId = value
        }
        if let value = dict["ResourceType"] as? String {
            self.resourceType = value
        }
        if let value = dict["Tag"] as? [Any?] {
            var tmp : [TagResourcesRequest.Tag] = []
            for v in value {
                if v != nil {
                    var model = TagResourcesRequest.Tag()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tag = tmp
        }
    }
}

public class TagResourcesResponseBody : Tea.TeaModel {
    public var data: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class TagResourcesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: TagResourcesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = TagResourcesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UninstallManagedPrometheusRequest : Tea.TeaModel {
    public var clusterId: String?

    public var clusterType: String?

    public var regionId: String?

    public var resourceGroupId: String?

    public var vpcId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.clusterType != nil {
            map["ClusterType"] = self.clusterType!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceGroupId != nil {
            map["ResourceGroupId"] = self.resourceGroupId!
        }
        if self.vpcId != nil {
            map["VpcId"] = self.vpcId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClusterId"] as? String {
            self.clusterId = value
        }
        if let value = dict["ClusterType"] as? String {
            self.clusterType = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceGroupId"] as? String {
            self.resourceGroupId = value
        }
        if let value = dict["VpcId"] as? String {
            self.vpcId = value
        }
    }
}

public class UninstallManagedPrometheusResponseBody : Tea.TeaModel {
    public var code: Int32?

    public var data: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class UninstallManagedPrometheusResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UninstallManagedPrometheusResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UninstallManagedPrometheusResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UninstallPromClusterRequest : Tea.TeaModel {
    public var aliyunLang: String?

    public var clusterId: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.aliyunLang != nil {
            map["AliyunLang"] = self.aliyunLang!
        }
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AliyunLang"] as? String {
            self.aliyunLang = value
        }
        if let value = dict["ClusterId"] as? String {
            self.clusterId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class UninstallPromClusterResponseBody : Tea.TeaModel {
    public var code: Int32?

    public var data: String?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UninstallPromClusterResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UninstallPromClusterResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UninstallPromClusterResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UntagResourcesRequest : Tea.TeaModel {
    public class Tags : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var all: Bool?

    public var resourceId: [String]?

    public var resourceType: String?

    public var tagKey: [String]?

    public var tags: [UntagResourcesRequest.Tags]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.all != nil {
            map["All"] = self.all!
        }
        if self.resourceId != nil {
            map["ResourceId"] = self.resourceId!
        }
        if self.resourceType != nil {
            map["ResourceType"] = self.resourceType!
        }
        if self.tagKey != nil {
            map["TagKey"] = self.tagKey!
        }
        if self.tags != nil {
            var tmp : [Any] = []
            for k in self.tags! {
                tmp.append(k.toMap())
            }
            map["Tags"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["All"] as? Bool {
            self.all = value
        }
        if let value = dict["ResourceId"] as? [String] {
            self.resourceId = value
        }
        if let value = dict["ResourceType"] as? String {
            self.resourceType = value
        }
        if let value = dict["TagKey"] as? [String] {
            self.tagKey = value
        }
        if let value = dict["Tags"] as? [Any?] {
            var tmp : [UntagResourcesRequest.Tags] = []
            for v in value {
                if v != nil {
                    var model = UntagResourcesRequest.Tags()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tags = tmp
        }
    }
}

public class UntagResourcesResponseBody : Tea.TeaModel {
    public var data: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UntagResourcesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UntagResourcesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UntagResourcesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateAlertContactRequest : Tea.TeaModel {
    public var contactId: Int64?

    public var contactName: String?

    public var dingRobotWebhookUrl: String?

    public var email: String?

    public var phoneNum: String?

    public var regionId: String?

    public var systemNoc: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.contactId != nil {
            map["ContactId"] = self.contactId!
        }
        if self.contactName != nil {
            map["ContactName"] = self.contactName!
        }
        if self.dingRobotWebhookUrl != nil {
            map["DingRobotWebhookUrl"] = self.dingRobotWebhookUrl!
        }
        if self.email != nil {
            map["Email"] = self.email!
        }
        if self.phoneNum != nil {
            map["PhoneNum"] = self.phoneNum!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.systemNoc != nil {
            map["SystemNoc"] = self.systemNoc!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ContactId"] as? Int64 {
            self.contactId = value
        }
        if let value = dict["ContactName"] as? String {
            self.contactName = value
        }
        if let value = dict["DingRobotWebhookUrl"] as? String {
            self.dingRobotWebhookUrl = value
        }
        if let value = dict["Email"] as? String {
            self.email = value
        }
        if let value = dict["PhoneNum"] as? String {
            self.phoneNum = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["SystemNoc"] as? Bool {
            self.systemNoc = value
        }
    }
}

public class UpdateAlertContactResponseBody : Tea.TeaModel {
    public var isSuccess: Bool?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.isSuccess != nil {
            map["IsSuccess"] = self.isSuccess!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["IsSuccess"] as? Bool {
            self.isSuccess = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdateAlertContactResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateAlertContactResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateAlertContactResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateAlertContactGroupRequest : Tea.TeaModel {
    public var contactGroupId: Int64?

    public var contactGroupName: String?

    public var contactIds: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.contactGroupId != nil {
            map["ContactGroupId"] = self.contactGroupId!
        }
        if self.contactGroupName != nil {
            map["ContactGroupName"] = self.contactGroupName!
        }
        if self.contactIds != nil {
            map["ContactIds"] = self.contactIds!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ContactGroupId"] as? Int64 {
            self.contactGroupId = value
        }
        if let value = dict["ContactGroupName"] as? String {
            self.contactGroupName = value
        }
        if let value = dict["ContactIds"] as? String {
            self.contactIds = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class UpdateAlertContactGroupResponseBody : Tea.TeaModel {
    public var isSuccess: Bool?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.isSuccess != nil {
            map["IsSuccess"] = self.isSuccess!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["IsSuccess"] as? Bool {
            self.isSuccess = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdateAlertContactGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateAlertContactGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateAlertContactGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateAlertRuleRequest : Tea.TeaModel {
    public var alertId: Int64?

    public var contactGroupIds: String?

    public var isAutoStart: Bool?

    public var regionId: String?

    public var templageAlertConfig: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.alertId != nil {
            map["AlertId"] = self.alertId!
        }
        if self.contactGroupIds != nil {
            map["ContactGroupIds"] = self.contactGroupIds!
        }
        if self.isAutoStart != nil {
            map["IsAutoStart"] = self.isAutoStart!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.templageAlertConfig != nil {
            map["TemplageAlertConfig"] = self.templageAlertConfig!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AlertId"] as? Int64 {
            self.alertId = value
        }
        if let value = dict["ContactGroupIds"] as? String {
            self.contactGroupIds = value
        }
        if let value = dict["IsAutoStart"] as? Bool {
            self.isAutoStart = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["TemplageAlertConfig"] as? String {
            self.templageAlertConfig = value
        }
    }
}

public class UpdateAlertRuleResponseBody : Tea.TeaModel {
    public var alertId: Int64?

    public var data: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.alertId != nil {
            map["AlertId"] = self.alertId!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AlertId"] as? Int64 {
            self.alertId = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdateAlertRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateAlertRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateAlertRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateDispatchRuleRequest : Tea.TeaModel {
    public var dispatchRule: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dispatchRule != nil {
            map["DispatchRule"] = self.dispatchRule!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DispatchRule"] as? String {
            self.dispatchRule = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class UpdateDispatchRuleResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class UpdateDispatchRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateDispatchRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateDispatchRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateEnvCustomJobRequest : Tea.TeaModel {
    public var aliyunLang: String?

    public var configYaml: String?

    public var customJobName: String?

    public var environmentId: String?

    public var regionId: String?

    public var status: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.aliyunLang != nil {
            map["AliyunLang"] = self.aliyunLang!
        }
        if self.configYaml != nil {
            map["ConfigYaml"] = self.configYaml!
        }
        if self.customJobName != nil {
            map["CustomJobName"] = self.customJobName!
        }
        if self.environmentId != nil {
            map["EnvironmentId"] = self.environmentId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AliyunLang"] as? String {
            self.aliyunLang = value
        }
        if let value = dict["ConfigYaml"] as? String {
            self.configYaml = value
        }
        if let value = dict["CustomJobName"] as? String {
            self.customJobName = value
        }
        if let value = dict["EnvironmentId"] as? String {
            self.environmentId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
    }
}

public class UpdateEnvCustomJobResponseBody : Tea.TeaModel {
    public var code: Int32?

    public var data: String?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdateEnvCustomJobResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateEnvCustomJobResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateEnvCustomJobResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateEnvDropMetricsRuleRequest : Tea.TeaModel {
    public var aliyunLang: String?

    public var dropMetrics: String?

    public var environmentId: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.aliyunLang != nil {
            map["AliyunLang"] = self.aliyunLang!
        }
        if self.dropMetrics != nil {
            map["DropMetrics"] = self.dropMetrics!
        }
        if self.environmentId != nil {
            map["EnvironmentId"] = self.environmentId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AliyunLang"] as? String {
            self.aliyunLang = value
        }
        if let value = dict["DropMetrics"] as? String {
            self.dropMetrics = value
        }
        if let value = dict["EnvironmentId"] as? String {
            self.environmentId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class UpdateEnvDropMetricsRuleResponseBody : Tea.TeaModel {
    public var code: Int32?

    public var data: String?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdateEnvDropMetricsRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateEnvDropMetricsRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateEnvDropMetricsRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateEnvPodMonitorRequest : Tea.TeaModel {
    public var aliyunLang: String?

    public var configYaml: String?

    public var dryRun: Bool?

    public var environmentId: String?

    public var namespace: String?

    public var podMonitorName: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.aliyunLang != nil {
            map["AliyunLang"] = self.aliyunLang!
        }
        if self.configYaml != nil {
            map["ConfigYaml"] = self.configYaml!
        }
        if self.dryRun != nil {
            map["DryRun"] = self.dryRun!
        }
        if self.environmentId != nil {
            map["EnvironmentId"] = self.environmentId!
        }
        if self.namespace != nil {
            map["Namespace"] = self.namespace!
        }
        if self.podMonitorName != nil {
            map["PodMonitorName"] = self.podMonitorName!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AliyunLang"] as? String {
            self.aliyunLang = value
        }
        if let value = dict["ConfigYaml"] as? String {
            self.configYaml = value
        }
        if let value = dict["DryRun"] as? Bool {
            self.dryRun = value
        }
        if let value = dict["EnvironmentId"] as? String {
            self.environmentId = value
        }
        if let value = dict["Namespace"] as? String {
            self.namespace = value
        }
        if let value = dict["PodMonitorName"] as? String {
            self.podMonitorName = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class UpdateEnvPodMonitorResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var matchedMsg: String?

        public var matchedTargetCount: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.matchedMsg != nil {
                map["MatchedMsg"] = self.matchedMsg!
            }
            if self.matchedTargetCount != nil {
                map["MatchedTargetCount"] = self.matchedTargetCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["MatchedMsg"] as? String {
                self.matchedMsg = value
            }
            if let value = dict["MatchedTargetCount"] as? String {
                self.matchedTargetCount = value
            }
        }
    }
    public var code: Int32?

    public var data: UpdateEnvPodMonitorResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = UpdateEnvPodMonitorResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdateEnvPodMonitorResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateEnvPodMonitorResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateEnvPodMonitorResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateEnvServiceMonitorRequest : Tea.TeaModel {
    public var aliyunLang: String?

    public var configYaml: String?

    public var dryRun: Bool?

    public var environmentId: String?

    public var namespace: String?

    public var regionId: String?

    public var serviceMonitorName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.aliyunLang != nil {
            map["AliyunLang"] = self.aliyunLang!
        }
        if self.configYaml != nil {
            map["ConfigYaml"] = self.configYaml!
        }
        if self.dryRun != nil {
            map["DryRun"] = self.dryRun!
        }
        if self.environmentId != nil {
            map["EnvironmentId"] = self.environmentId!
        }
        if self.namespace != nil {
            map["Namespace"] = self.namespace!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.serviceMonitorName != nil {
            map["ServiceMonitorName"] = self.serviceMonitorName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AliyunLang"] as? String {
            self.aliyunLang = value
        }
        if let value = dict["ConfigYaml"] as? String {
            self.configYaml = value
        }
        if let value = dict["DryRun"] as? Bool {
            self.dryRun = value
        }
        if let value = dict["EnvironmentId"] as? String {
            self.environmentId = value
        }
        if let value = dict["Namespace"] as? String {
            self.namespace = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ServiceMonitorName"] as? String {
            self.serviceMonitorName = value
        }
    }
}

public class UpdateEnvServiceMonitorResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var matchedMsg: String?

        public var matchedTargetCount: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.matchedMsg != nil {
                map["MatchedMsg"] = self.matchedMsg!
            }
            if self.matchedTargetCount != nil {
                map["MatchedTargetCount"] = self.matchedTargetCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["MatchedMsg"] as? String {
                self.matchedMsg = value
            }
            if let value = dict["MatchedTargetCount"] as? String {
                self.matchedTargetCount = value
            }
        }
    }
    public var code: Int32?

    public var data: UpdateEnvServiceMonitorResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = UpdateEnvServiceMonitorResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdateEnvServiceMonitorResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateEnvServiceMonitorResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateEnvServiceMonitorResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateEnvironmentRequest : Tea.TeaModel {
    public var aliyunLang: String?

    public var environmentId: String?

    public var environmentName: String?

    public var feePackage: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.aliyunLang != nil {
            map["AliyunLang"] = self.aliyunLang!
        }
        if self.environmentId != nil {
            map["EnvironmentId"] = self.environmentId!
        }
        if self.environmentName != nil {
            map["EnvironmentName"] = self.environmentName!
        }
        if self.feePackage != nil {
            map["FeePackage"] = self.feePackage!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AliyunLang"] as? String {
            self.aliyunLang = value
        }
        if let value = dict["EnvironmentId"] as? String {
            self.environmentId = value
        }
        if let value = dict["EnvironmentName"] as? String {
            self.environmentName = value
        }
        if let value = dict["FeePackage"] as? String {
            self.feePackage = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class UpdateEnvironmentResponseBody : Tea.TeaModel {
    public var code: Int32?

    public var data: String?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdateEnvironmentResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateEnvironmentResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateEnvironmentResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateGrafanaWorkspaceRequest : Tea.TeaModel {
    public var aliyunLang: String?

    public var description_: String?

    public var grafanaWorkspaceId: String?

    public var grafanaWorkspaceName: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.aliyunLang != nil {
            map["AliyunLang"] = self.aliyunLang!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.grafanaWorkspaceId != nil {
            map["GrafanaWorkspaceId"] = self.grafanaWorkspaceId!
        }
        if self.grafanaWorkspaceName != nil {
            map["GrafanaWorkspaceName"] = self.grafanaWorkspaceName!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AliyunLang"] as? String {
            self.aliyunLang = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["GrafanaWorkspaceId"] as? String {
            self.grafanaWorkspaceId = value
        }
        if let value = dict["GrafanaWorkspaceName"] as? String {
            self.grafanaWorkspaceName = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class UpdateGrafanaWorkspaceResponseBody : Tea.TeaModel {
    public var code: Int32?

    public var data: Bool?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.traceId != nil {
            map["TraceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? Bool {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
        if let value = dict["TraceId"] as? String {
            self.traceId = value
        }
    }
}

public class UpdateGrafanaWorkspaceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateGrafanaWorkspaceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateGrafanaWorkspaceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateGrafanaWorkspaceVersionRequest : Tea.TeaModel {
    public var aliyunLang: String?

    public var grafanaVersion: String?

    public var grafanaWorkspaceId: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.aliyunLang != nil {
            map["AliyunLang"] = self.aliyunLang!
        }
        if self.grafanaVersion != nil {
            map["GrafanaVersion"] = self.grafanaVersion!
        }
        if self.grafanaWorkspaceId != nil {
            map["GrafanaWorkspaceId"] = self.grafanaWorkspaceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AliyunLang"] as? String {
            self.aliyunLang = value
        }
        if let value = dict["GrafanaVersion"] as? String {
            self.grafanaVersion = value
        }
        if let value = dict["GrafanaWorkspaceId"] as? String {
            self.grafanaWorkspaceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class UpdateGrafanaWorkspaceVersionResponseBody : Tea.TeaModel {
    public var code: Int32?

    public var data: Bool?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.traceId != nil {
            map["TraceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? Bool {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
        if let value = dict["TraceId"] as? String {
            self.traceId = value
        }
    }
}

public class UpdateGrafanaWorkspaceVersionResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateGrafanaWorkspaceVersionResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateGrafanaWorkspaceVersionResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateIntegrationRequest : Tea.TeaModel {
    public var autoRecover: Bool?

    public var description_: String?

    public var duplicateKey: String?

    public var extendedFieldRedefineRules: String?

    public var fieldRedefineRules: String?

    public var initiativeRecoverField: String?

    public var initiativeRecoverValue: String?

    public var integrationId: Int64?

    public var integrationName: String?

    public var integrationProductType: String?

    public var liveness: String?

    public var recoverTime: Int64?

    public var stat: String?

    public var state: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.autoRecover != nil {
            map["AutoRecover"] = self.autoRecover!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.duplicateKey != nil {
            map["DuplicateKey"] = self.duplicateKey!
        }
        if self.extendedFieldRedefineRules != nil {
            map["ExtendedFieldRedefineRules"] = self.extendedFieldRedefineRules!
        }
        if self.fieldRedefineRules != nil {
            map["FieldRedefineRules"] = self.fieldRedefineRules!
        }
        if self.initiativeRecoverField != nil {
            map["InitiativeRecoverField"] = self.initiativeRecoverField!
        }
        if self.initiativeRecoverValue != nil {
            map["InitiativeRecoverValue"] = self.initiativeRecoverValue!
        }
        if self.integrationId != nil {
            map["IntegrationId"] = self.integrationId!
        }
        if self.integrationName != nil {
            map["IntegrationName"] = self.integrationName!
        }
        if self.integrationProductType != nil {
            map["IntegrationProductType"] = self.integrationProductType!
        }
        if self.liveness != nil {
            map["Liveness"] = self.liveness!
        }
        if self.recoverTime != nil {
            map["RecoverTime"] = self.recoverTime!
        }
        if self.stat != nil {
            map["Stat"] = self.stat!
        }
        if self.state != nil {
            map["State"] = self.state!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AutoRecover"] as? Bool {
            self.autoRecover = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["DuplicateKey"] as? String {
            self.duplicateKey = value
        }
        if let value = dict["ExtendedFieldRedefineRules"] as? String {
            self.extendedFieldRedefineRules = value
        }
        if let value = dict["FieldRedefineRules"] as? String {
            self.fieldRedefineRules = value
        }
        if let value = dict["InitiativeRecoverField"] as? String {
            self.initiativeRecoverField = value
        }
        if let value = dict["InitiativeRecoverValue"] as? String {
            self.initiativeRecoverValue = value
        }
        if let value = dict["IntegrationId"] as? Int64 {
            self.integrationId = value
        }
        if let value = dict["IntegrationName"] as? String {
            self.integrationName = value
        }
        if let value = dict["IntegrationProductType"] as? String {
            self.integrationProductType = value
        }
        if let value = dict["Liveness"] as? String {
            self.liveness = value
        }
        if let value = dict["RecoverTime"] as? Int64 {
            self.recoverTime = value
        }
        if let value = dict["Stat"] as? String {
            self.stat = value
        }
        if let value = dict["State"] as? Bool {
            self.state = value
        }
    }
}

public class UpdateIntegrationResponseBody : Tea.TeaModel {
    public class Integration : Tea.TeaModel {
        public var apiEndpoint: String?

        public var autoRecover: Bool?

        public var description_: String?

        public var duplicateKey: String?

        public var extendedFieldRedefineRules: [[String: Any]]?

        public var fieldRedefineRules: [[String: Any]]?

        public var initiativeRecoverField: String?

        public var initiativeRecoverValue: String?

        public var integrationId: Int64?

        public var integrationName: String?

        public var integrationProductType: String?

        public var liveness: String?

        public var recoverTime: Int64?

        public var shortToken: String?

        public var stat: [Int64]?

        public var state: Bool?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.apiEndpoint != nil {
                map["ApiEndpoint"] = self.apiEndpoint!
            }
            if self.autoRecover != nil {
                map["AutoRecover"] = self.autoRecover!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.duplicateKey != nil {
                map["DuplicateKey"] = self.duplicateKey!
            }
            if self.extendedFieldRedefineRules != nil {
                map["ExtendedFieldRedefineRules"] = self.extendedFieldRedefineRules!
            }
            if self.fieldRedefineRules != nil {
                map["FieldRedefineRules"] = self.fieldRedefineRules!
            }
            if self.initiativeRecoverField != nil {
                map["InitiativeRecoverField"] = self.initiativeRecoverField!
            }
            if self.initiativeRecoverValue != nil {
                map["InitiativeRecoverValue"] = self.initiativeRecoverValue!
            }
            if self.integrationId != nil {
                map["IntegrationId"] = self.integrationId!
            }
            if self.integrationName != nil {
                map["IntegrationName"] = self.integrationName!
            }
            if self.integrationProductType != nil {
                map["IntegrationProductType"] = self.integrationProductType!
            }
            if self.liveness != nil {
                map["Liveness"] = self.liveness!
            }
            if self.recoverTime != nil {
                map["RecoverTime"] = self.recoverTime!
            }
            if self.shortToken != nil {
                map["ShortToken"] = self.shortToken!
            }
            if self.stat != nil {
                map["Stat"] = self.stat!
            }
            if self.state != nil {
                map["State"] = self.state!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ApiEndpoint"] as? String {
                self.apiEndpoint = value
            }
            if let value = dict["AutoRecover"] as? Bool {
                self.autoRecover = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["DuplicateKey"] as? String {
                self.duplicateKey = value
            }
            if let value = dict["ExtendedFieldRedefineRules"] as? [[String: Any]] {
                self.extendedFieldRedefineRules = value
            }
            if let value = dict["FieldRedefineRules"] as? [[String: Any]] {
                self.fieldRedefineRules = value
            }
            if let value = dict["InitiativeRecoverField"] as? String {
                self.initiativeRecoverField = value
            }
            if let value = dict["InitiativeRecoverValue"] as? String {
                self.initiativeRecoverValue = value
            }
            if let value = dict["IntegrationId"] as? Int64 {
                self.integrationId = value
            }
            if let value = dict["IntegrationName"] as? String {
                self.integrationName = value
            }
            if let value = dict["IntegrationProductType"] as? String {
                self.integrationProductType = value
            }
            if let value = dict["Liveness"] as? String {
                self.liveness = value
            }
            if let value = dict["RecoverTime"] as? Int64 {
                self.recoverTime = value
            }
            if let value = dict["ShortToken"] as? String {
                self.shortToken = value
            }
            if let value = dict["Stat"] as? [Int64] {
                self.stat = value
            }
            if let value = dict["State"] as? Bool {
                self.state = value
            }
        }
    }
    public var integration: UpdateIntegrationResponseBody.Integration?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.integration?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.integration != nil {
            map["Integration"] = self.integration?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Integration"] as? [String: Any?] {
            var model = UpdateIntegrationResponseBody.Integration()
            model.fromMap(value)
            self.integration = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdateIntegrationResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateIntegrationResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateIntegrationResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateMetricDropRequest : Tea.TeaModel {
    public var clusterId: String?

    public var metricDrop: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.metricDrop != nil {
            map["MetricDrop"] = self.metricDrop!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClusterId"] as? String {
            self.clusterId = value
        }
        if let value = dict["MetricDrop"] as? String {
            self.metricDrop = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class UpdateMetricDropResponseBody : Tea.TeaModel {
    public var code: Int64?

    public var data: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int64 {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class UpdateMetricDropResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateMetricDropResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateMetricDropResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdatePrometheusAlertRuleRequest : Tea.TeaModel {
    public class Tags : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var alertId: Int64?

    public var alertName: String?

    public var annotations: String?

    public var clusterId: String?

    public var dispatchRuleId: Int64?

    public var duration: String?

    public var expression: String?

    public var labels: String?

    public var message: String?

    public var notifyType: String?

    public var regionId: String?

    public var tags: [UpdatePrometheusAlertRuleRequest.Tags]?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.alertId != nil {
            map["AlertId"] = self.alertId!
        }
        if self.alertName != nil {
            map["AlertName"] = self.alertName!
        }
        if self.annotations != nil {
            map["Annotations"] = self.annotations!
        }
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.dispatchRuleId != nil {
            map["DispatchRuleId"] = self.dispatchRuleId!
        }
        if self.duration != nil {
            map["Duration"] = self.duration!
        }
        if self.expression != nil {
            map["Expression"] = self.expression!
        }
        if self.labels != nil {
            map["Labels"] = self.labels!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.notifyType != nil {
            map["NotifyType"] = self.notifyType!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.tags != nil {
            var tmp : [Any] = []
            for k in self.tags! {
                tmp.append(k.toMap())
            }
            map["Tags"] = tmp
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AlertId"] as? Int64 {
            self.alertId = value
        }
        if let value = dict["AlertName"] as? String {
            self.alertName = value
        }
        if let value = dict["Annotations"] as? String {
            self.annotations = value
        }
        if let value = dict["ClusterId"] as? String {
            self.clusterId = value
        }
        if let value = dict["DispatchRuleId"] as? Int64 {
            self.dispatchRuleId = value
        }
        if let value = dict["Duration"] as? String {
            self.duration = value
        }
        if let value = dict["Expression"] as? String {
            self.expression = value
        }
        if let value = dict["Labels"] as? String {
            self.labels = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["NotifyType"] as? String {
            self.notifyType = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Tags"] as? [Any?] {
            var tmp : [UpdatePrometheusAlertRuleRequest.Tags] = []
            for v in value {
                if v != nil {
                    var model = UpdatePrometheusAlertRuleRequest.Tags()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tags = tmp
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
    }
}

public class UpdatePrometheusAlertRuleResponseBody : Tea.TeaModel {
    public class PrometheusAlertRule : Tea.TeaModel {
        public class Annotations : Tea.TeaModel {
            public var name: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public class Labels : Tea.TeaModel {
            public var name: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public var alertId: Int64?

        public var alertName: String?

        public var annotations: [UpdatePrometheusAlertRuleResponseBody.PrometheusAlertRule.Annotations]?

        public var clusterId: String?

        public var dispatchRuleId: Int64?

        public var duration: String?

        public var expression: String?

        public var labels: [UpdatePrometheusAlertRuleResponseBody.PrometheusAlertRule.Labels]?

        public var message: String?

        public var notifyType: String?

        public var status: Int32?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.alertId != nil {
                map["AlertId"] = self.alertId!
            }
            if self.alertName != nil {
                map["AlertName"] = self.alertName!
            }
            if self.annotations != nil {
                var tmp : [Any] = []
                for k in self.annotations! {
                    tmp.append(k.toMap())
                }
                map["Annotations"] = tmp
            }
            if self.clusterId != nil {
                map["ClusterId"] = self.clusterId!
            }
            if self.dispatchRuleId != nil {
                map["DispatchRuleId"] = self.dispatchRuleId!
            }
            if self.duration != nil {
                map["Duration"] = self.duration!
            }
            if self.expression != nil {
                map["Expression"] = self.expression!
            }
            if self.labels != nil {
                var tmp : [Any] = []
                for k in self.labels! {
                    tmp.append(k.toMap())
                }
                map["Labels"] = tmp
            }
            if self.message != nil {
                map["Message"] = self.message!
            }
            if self.notifyType != nil {
                map["NotifyType"] = self.notifyType!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AlertId"] as? Int64 {
                self.alertId = value
            }
            if let value = dict["AlertName"] as? String {
                self.alertName = value
            }
            if let value = dict["Annotations"] as? [Any?] {
                var tmp : [UpdatePrometheusAlertRuleResponseBody.PrometheusAlertRule.Annotations] = []
                for v in value {
                    if v != nil {
                        var model = UpdatePrometheusAlertRuleResponseBody.PrometheusAlertRule.Annotations()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.annotations = tmp
            }
            if let value = dict["ClusterId"] as? String {
                self.clusterId = value
            }
            if let value = dict["DispatchRuleId"] as? Int64 {
                self.dispatchRuleId = value
            }
            if let value = dict["Duration"] as? String {
                self.duration = value
            }
            if let value = dict["Expression"] as? String {
                self.expression = value
            }
            if let value = dict["Labels"] as? [Any?] {
                var tmp : [UpdatePrometheusAlertRuleResponseBody.PrometheusAlertRule.Labels] = []
                for v in value {
                    if v != nil {
                        var model = UpdatePrometheusAlertRuleResponseBody.PrometheusAlertRule.Labels()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.labels = tmp
            }
            if let value = dict["Message"] as? String {
                self.message = value
            }
            if let value = dict["NotifyType"] as? String {
                self.notifyType = value
            }
            if let value = dict["Status"] as? Int32 {
                self.status = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
        }
    }
    public var code: Int64?

    public var message: String?

    public var prometheusAlertRule: UpdatePrometheusAlertRuleResponseBody.PrometheusAlertRule?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.prometheusAlertRule?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.prometheusAlertRule != nil {
            map["PrometheusAlertRule"] = self.prometheusAlertRule?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int64 {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["PrometheusAlertRule"] as? [String: Any?] {
            var model = UpdatePrometheusAlertRuleResponseBody.PrometheusAlertRule()
            model.fromMap(value)
            self.prometheusAlertRule = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class UpdatePrometheusAlertRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdatePrometheusAlertRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdatePrometheusAlertRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdatePrometheusGlobalViewRequest : Tea.TeaModel {
    public var allSubClustersSuccess: Bool?

    public var clusterId: String?

    public var groupName: String?

    public var mostRegionId: String?

    public var regionId: String?

    public var resourceGroupId: String?

    public var subClustersJson: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.allSubClustersSuccess != nil {
            map["AllSubClustersSuccess"] = self.allSubClustersSuccess!
        }
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.groupName != nil {
            map["GroupName"] = self.groupName!
        }
        if self.mostRegionId != nil {
            map["MostRegionId"] = self.mostRegionId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceGroupId != nil {
            map["ResourceGroupId"] = self.resourceGroupId!
        }
        if self.subClustersJson != nil {
            map["SubClustersJson"] = self.subClustersJson!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AllSubClustersSuccess"] as? Bool {
            self.allSubClustersSuccess = value
        }
        if let value = dict["ClusterId"] as? String {
            self.clusterId = value
        }
        if let value = dict["GroupName"] as? String {
            self.groupName = value
        }
        if let value = dict["MostRegionId"] as? String {
            self.mostRegionId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceGroupId"] as? String {
            self.resourceGroupId = value
        }
        if let value = dict["SubClustersJson"] as? String {
            self.subClustersJson = value
        }
    }
}

public class UpdatePrometheusGlobalViewResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class FailedInstances : Tea.TeaModel {
            public var clusterId: String?

            public var sourceName: String?

            public var sourceType: String?

            public var userId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.clusterId != nil {
                    map["ClusterId"] = self.clusterId!
                }
                if self.sourceName != nil {
                    map["SourceName"] = self.sourceName!
                }
                if self.sourceType != nil {
                    map["SourceType"] = self.sourceType!
                }
                if self.userId != nil {
                    map["UserId"] = self.userId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ClusterId"] as? String {
                    self.clusterId = value
                }
                if let value = dict["SourceName"] as? String {
                    self.sourceName = value
                }
                if let value = dict["SourceType"] as? String {
                    self.sourceType = value
                }
                if let value = dict["UserId"] as? String {
                    self.userId = value
                }
            }
        }
        public var failedInstances: [UpdatePrometheusGlobalViewResponseBody.Data.FailedInstances]?

        public var success: Bool?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.failedInstances != nil {
                var tmp : [Any] = []
                for k in self.failedInstances! {
                    tmp.append(k.toMap())
                }
                map["FailedInstances"] = tmp
            }
            if self.success != nil {
                map["Success"] = self.success!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["FailedInstances"] as? [Any?] {
                var tmp : [UpdatePrometheusGlobalViewResponseBody.Data.FailedInstances] = []
                for v in value {
                    if v != nil {
                        var model = UpdatePrometheusGlobalViewResponseBody.Data.FailedInstances()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.failedInstances = tmp
            }
            if let value = dict["Success"] as? Bool {
                self.success = value
            }
        }
    }
    public var code: Int32?

    public var data: UpdatePrometheusGlobalViewResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = UpdatePrometheusGlobalViewResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdatePrometheusGlobalViewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdatePrometheusGlobalViewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdatePrometheusGlobalViewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdatePrometheusInstanceRequest : Tea.TeaModel {
    public var archiveDuration: Int32?

    public var authFreeReadPolicy: String?

    public var authFreeWritePolicy: String?

    public var clusterId: String?

    public var enableAuthFreeRead: Bool?

    public var enableAuthFreeWrite: Bool?

    public var enableAuthToken: Bool?

    public var paymentType: String?

    public var regionId: String?

    public var resourceGroupId: String?

    public var storageDuration: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.archiveDuration != nil {
            map["ArchiveDuration"] = self.archiveDuration!
        }
        if self.authFreeReadPolicy != nil {
            map["AuthFreeReadPolicy"] = self.authFreeReadPolicy!
        }
        if self.authFreeWritePolicy != nil {
            map["AuthFreeWritePolicy"] = self.authFreeWritePolicy!
        }
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.enableAuthFreeRead != nil {
            map["EnableAuthFreeRead"] = self.enableAuthFreeRead!
        }
        if self.enableAuthFreeWrite != nil {
            map["EnableAuthFreeWrite"] = self.enableAuthFreeWrite!
        }
        if self.enableAuthToken != nil {
            map["EnableAuthToken"] = self.enableAuthToken!
        }
        if self.paymentType != nil {
            map["PaymentType"] = self.paymentType!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceGroupId != nil {
            map["ResourceGroupId"] = self.resourceGroupId!
        }
        if self.storageDuration != nil {
            map["StorageDuration"] = self.storageDuration!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ArchiveDuration"] as? Int32 {
            self.archiveDuration = value
        }
        if let value = dict["AuthFreeReadPolicy"] as? String {
            self.authFreeReadPolicy = value
        }
        if let value = dict["AuthFreeWritePolicy"] as? String {
            self.authFreeWritePolicy = value
        }
        if let value = dict["ClusterId"] as? String {
            self.clusterId = value
        }
        if let value = dict["EnableAuthFreeRead"] as? Bool {
            self.enableAuthFreeRead = value
        }
        if let value = dict["EnableAuthFreeWrite"] as? Bool {
            self.enableAuthFreeWrite = value
        }
        if let value = dict["EnableAuthToken"] as? Bool {
            self.enableAuthToken = value
        }
        if let value = dict["PaymentType"] as? String {
            self.paymentType = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceGroupId"] as? String {
            self.resourceGroupId = value
        }
        if let value = dict["StorageDuration"] as? Int32 {
            self.storageDuration = value
        }
    }
}

public class UpdatePrometheusInstanceResponseBody : Tea.TeaModel {
    public var code: Int32?

    public var data: String?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdatePrometheusInstanceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdatePrometheusInstanceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdatePrometheusInstanceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdatePrometheusIntegrationRequest : Tea.TeaModel {
    public var clusterId: String?

    public var instanceId: Int64?

    public var integrationType: String?

    public var param: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.integrationType != nil {
            map["IntegrationType"] = self.integrationType!
        }
        if self.param != nil {
            map["Param"] = self.param!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClusterId"] as? String {
            self.clusterId = value
        }
        if let value = dict["InstanceId"] as? Int64 {
            self.instanceId = value
        }
        if let value = dict["IntegrationType"] as? String {
            self.integrationType = value
        }
        if let value = dict["Param"] as? String {
            self.param = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class UpdatePrometheusIntegrationResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var instanceId: Int64?

        public var instanceName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.instanceId != nil {
                map["InstanceId"] = self.instanceId!
            }
            if self.instanceName != nil {
                map["InstanceName"] = self.instanceName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["InstanceId"] as? Int64 {
                self.instanceId = value
            }
            if let value = dict["InstanceName"] as? String {
                self.instanceName = value
            }
        }
    }
    public var code: Int32?

    public var data: UpdatePrometheusIntegrationResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = UpdatePrometheusIntegrationResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdatePrometheusIntegrationResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdatePrometheusIntegrationResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdatePrometheusIntegrationResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdatePrometheusMonitoringRequest : Tea.TeaModel {
    public var clusterId: String?

    public var configYaml: String?

    public var monitoringName: String?

    public var regionId: String?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.configYaml != nil {
            map["ConfigYaml"] = self.configYaml!
        }
        if self.monitoringName != nil {
            map["MonitoringName"] = self.monitoringName!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClusterId"] as? String {
            self.clusterId = value
        }
        if let value = dict["ConfigYaml"] as? String {
            self.configYaml = value
        }
        if let value = dict["MonitoringName"] as? String {
            self.monitoringName = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
    }
}

public class UpdatePrometheusMonitoringResponseBody : Tea.TeaModel {
    public var code: Int32?

    public var data: String?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdatePrometheusMonitoringResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdatePrometheusMonitoringResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdatePrometheusMonitoringResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdatePrometheusMonitoringStatusRequest : Tea.TeaModel {
    public var clusterId: String?

    public var monitoringName: String?

    public var regionId: String?

    public var status: String?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.monitoringName != nil {
            map["MonitoringName"] = self.monitoringName!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClusterId"] as? String {
            self.clusterId = value
        }
        if let value = dict["MonitoringName"] as? String {
            self.monitoringName = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
    }
}

public class UpdatePrometheusMonitoringStatusResponseBody : Tea.TeaModel {
    public var code: Int32?

    public var data: String?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdatePrometheusMonitoringStatusResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdatePrometheusMonitoringStatusResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdatePrometheusMonitoringStatusResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateRumAppRequest : Tea.TeaModel {
    public var appConfig: String?

    public var autoRestart: Bool?

    public var backendServiceTraceRegion: String?

    public var bonreeSDKConfigJson: String?

    public var description_: String?

    public var isSubscribe: Bool?

    public var nickname: String?

    public var pid: String?

    public var realRegionId: String?

    public var regionId: String?

    public var restart: Bool?

    public var serviceDomainOperationJson: String?

    public var stop: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appConfig != nil {
            map["AppConfig"] = self.appConfig!
        }
        if self.autoRestart != nil {
            map["AutoRestart"] = self.autoRestart!
        }
        if self.backendServiceTraceRegion != nil {
            map["BackendServiceTraceRegion"] = self.backendServiceTraceRegion!
        }
        if self.bonreeSDKConfigJson != nil {
            map["BonreeSDKConfigJson"] = self.bonreeSDKConfigJson!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.isSubscribe != nil {
            map["IsSubscribe"] = self.isSubscribe!
        }
        if self.nickname != nil {
            map["Nickname"] = self.nickname!
        }
        if self.pid != nil {
            map["Pid"] = self.pid!
        }
        if self.realRegionId != nil {
            map["RealRegionId"] = self.realRegionId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.restart != nil {
            map["Restart"] = self.restart!
        }
        if self.serviceDomainOperationJson != nil {
            map["ServiceDomainOperationJson"] = self.serviceDomainOperationJson!
        }
        if self.stop != nil {
            map["Stop"] = self.stop!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppConfig"] as? String {
            self.appConfig = value
        }
        if let value = dict["AutoRestart"] as? Bool {
            self.autoRestart = value
        }
        if let value = dict["BackendServiceTraceRegion"] as? String {
            self.backendServiceTraceRegion = value
        }
        if let value = dict["BonreeSDKConfigJson"] as? String {
            self.bonreeSDKConfigJson = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["IsSubscribe"] as? Bool {
            self.isSubscribe = value
        }
        if let value = dict["Nickname"] as? String {
            self.nickname = value
        }
        if let value = dict["Pid"] as? String {
            self.pid = value
        }
        if let value = dict["RealRegionId"] as? String {
            self.realRegionId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Restart"] as? Bool {
            self.restart = value
        }
        if let value = dict["ServiceDomainOperationJson"] as? String {
            self.serviceDomainOperationJson = value
        }
        if let value = dict["Stop"] as? Bool {
            self.stop = value
        }
    }
}

public class UpdateRumAppResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var config: String?

        public var limit: Int32?

        public var limited: Bool?

        public var usage: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.config != nil {
                map["Config"] = self.config!
            }
            if self.limit != nil {
                map["Limit"] = self.limit!
            }
            if self.limited != nil {
                map["Limited"] = self.limited!
            }
            if self.usage != nil {
                map["Usage"] = self.usage!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Config"] as? String {
                self.config = value
            }
            if let value = dict["Limit"] as? Int32 {
                self.limit = value
            }
            if let value = dict["Limited"] as? Bool {
                self.limited = value
            }
            if let value = dict["Usage"] as? Int32 {
                self.usage = value
            }
        }
    }
    public var code: String?

    public var data: UpdateRumAppResponseBody.Data?

    public var httpStatusCode: String?

    public var message: String?

    public var requestId: String?

    public var success: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = UpdateRumAppResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? String {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? String {
            self.success = value
        }
    }
}

public class UpdateRumAppResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateRumAppResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateRumAppResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateRumFileStatusRequest : Tea.TeaModel {
    public var fileName: String?

    public var pid: String?

    public var regionId: String?

    public var size: String?

    public var status: String?

    public var uuid: String?

    public var versionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.fileName != nil {
            map["FileName"] = self.fileName!
        }
        if self.pid != nil {
            map["Pid"] = self.pid!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.size != nil {
            map["Size"] = self.size!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        if self.uuid != nil {
            map["Uuid"] = self.uuid!
        }
        if self.versionId != nil {
            map["VersionId"] = self.versionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["FileName"] as? String {
            self.fileName = value
        }
        if let value = dict["Pid"] as? String {
            self.pid = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Size"] as? String {
            self.size = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
        if let value = dict["Uuid"] as? String {
            self.uuid = value
        }
        if let value = dict["VersionId"] as? String {
            self.versionId = value
        }
    }
}

public class UpdateRumFileStatusResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdateRumFileStatusResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateRumFileStatusResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateRumFileStatusResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateTimingSyntheticTaskRequest : Tea.TeaModel {
    public class AvailableAssertions : Tea.TeaModel {
        public var expect: String?

        public var operator_: String?

        public var target: String?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.expect != nil {
                map["Expect"] = self.expect!
            }
            if self.operator_ != nil {
                map["Operator"] = self.operator_!
            }
            if self.target != nil {
                map["Target"] = self.target!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Expect"] as? String {
                self.expect = value
            }
            if let value = dict["Operator"] as? String {
                self.operator_ = value
            }
            if let value = dict["Target"] as? String {
                self.target = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
        }
    }
    public class CommonSetting : Tea.TeaModel {
        public class CustomHost : Tea.TeaModel {
            public class Hosts : Tea.TeaModel {
                public var domain: String?

                public var ipType: Int32?

                public var ips: [String]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.domain != nil {
                        map["Domain"] = self.domain!
                    }
                    if self.ipType != nil {
                        map["IpType"] = self.ipType!
                    }
                    if self.ips != nil {
                        map["Ips"] = self.ips!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Domain"] as? String {
                        self.domain = value
                    }
                    if let value = dict["IpType"] as? Int32 {
                        self.ipType = value
                    }
                    if let value = dict["Ips"] as? [String] {
                        self.ips = value
                    }
                }
            }
            public var hosts: [UpdateTimingSyntheticTaskRequest.CommonSetting.CustomHost.Hosts]?

            public var selectType: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.hosts != nil {
                    var tmp : [Any] = []
                    for k in self.hosts! {
                        tmp.append(k.toMap())
                    }
                    map["Hosts"] = tmp
                }
                if self.selectType != nil {
                    map["SelectType"] = self.selectType!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Hosts"] as? [Any?] {
                    var tmp : [UpdateTimingSyntheticTaskRequest.CommonSetting.CustomHost.Hosts] = []
                    for v in value {
                        if v != nil {
                            var model = UpdateTimingSyntheticTaskRequest.CommonSetting.CustomHost.Hosts()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.hosts = tmp
                }
                if let value = dict["SelectType"] as? Int32 {
                    self.selectType = value
                }
            }
        }
        public class CustomPrometheusSetting : Tea.TeaModel {
            public var prometheusClusterId: String?

            public var prometheusClusterRegion: String?

            public var prometheusLabels: [String: String]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.prometheusClusterId != nil {
                    map["PrometheusClusterId"] = self.prometheusClusterId!
                }
                if self.prometheusClusterRegion != nil {
                    map["PrometheusClusterRegion"] = self.prometheusClusterRegion!
                }
                if self.prometheusLabels != nil {
                    map["PrometheusLabels"] = self.prometheusLabels!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["PrometheusClusterId"] as? String {
                    self.prometheusClusterId = value
                }
                if let value = dict["PrometheusClusterRegion"] as? String {
                    self.prometheusClusterRegion = value
                }
                if let value = dict["PrometheusLabels"] as? [String: String] {
                    self.prometheusLabels = value
                }
            }
        }
        public class CustomVPCSetting : Tea.TeaModel {
            public var regionId: String?

            public var secureGroupId: String?

            public var vSwitchId: String?

            public var vpcId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.regionId != nil {
                    map["RegionId"] = self.regionId!
                }
                if self.secureGroupId != nil {
                    map["SecureGroupId"] = self.secureGroupId!
                }
                if self.vSwitchId != nil {
                    map["VSwitchId"] = self.vSwitchId!
                }
                if self.vpcId != nil {
                    map["VpcId"] = self.vpcId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["RegionId"] as? String {
                    self.regionId = value
                }
                if let value = dict["SecureGroupId"] as? String {
                    self.secureGroupId = value
                }
                if let value = dict["VSwitchId"] as? String {
                    self.vSwitchId = value
                }
                if let value = dict["VpcId"] as? String {
                    self.vpcId = value
                }
            }
        }
        public var customHost: UpdateTimingSyntheticTaskRequest.CommonSetting.CustomHost?

        public var customPrometheusSetting: UpdateTimingSyntheticTaskRequest.CommonSetting.CustomPrometheusSetting?

        public var customVPCSetting: UpdateTimingSyntheticTaskRequest.CommonSetting.CustomVPCSetting?

        public var ipType: Int32?

        public var isOpenTrace: Bool?

        public var monitorSamples: Int32?

        public var traceClientType: Int32?

        public var xtraceRegion: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.customHost?.validate()
            try self.customPrometheusSetting?.validate()
            try self.customVPCSetting?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.customHost != nil {
                map["CustomHost"] = self.customHost?.toMap()
            }
            if self.customPrometheusSetting != nil {
                map["CustomPrometheusSetting"] = self.customPrometheusSetting?.toMap()
            }
            if self.customVPCSetting != nil {
                map["CustomVPCSetting"] = self.customVPCSetting?.toMap()
            }
            if self.ipType != nil {
                map["IpType"] = self.ipType!
            }
            if self.isOpenTrace != nil {
                map["IsOpenTrace"] = self.isOpenTrace!
            }
            if self.monitorSamples != nil {
                map["MonitorSamples"] = self.monitorSamples!
            }
            if self.traceClientType != nil {
                map["TraceClientType"] = self.traceClientType!
            }
            if self.xtraceRegion != nil {
                map["XtraceRegion"] = self.xtraceRegion!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CustomHost"] as? [String: Any?] {
                var model = UpdateTimingSyntheticTaskRequest.CommonSetting.CustomHost()
                model.fromMap(value)
                self.customHost = model
            }
            if let value = dict["CustomPrometheusSetting"] as? [String: Any?] {
                var model = UpdateTimingSyntheticTaskRequest.CommonSetting.CustomPrometheusSetting()
                model.fromMap(value)
                self.customPrometheusSetting = model
            }
            if let value = dict["CustomVPCSetting"] as? [String: Any?] {
                var model = UpdateTimingSyntheticTaskRequest.CommonSetting.CustomVPCSetting()
                model.fromMap(value)
                self.customVPCSetting = model
            }
            if let value = dict["IpType"] as? Int32 {
                self.ipType = value
            }
            if let value = dict["IsOpenTrace"] as? Bool {
                self.isOpenTrace = value
            }
            if let value = dict["MonitorSamples"] as? Int32 {
                self.monitorSamples = value
            }
            if let value = dict["TraceClientType"] as? Int32 {
                self.traceClientType = value
            }
            if let value = dict["XtraceRegion"] as? String {
                self.xtraceRegion = value
            }
        }
    }
    public class CustomPeriod : Tea.TeaModel {
        public var endHour: Int32?

        public var startHour: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.endHour != nil {
                map["EndHour"] = self.endHour!
            }
            if self.startHour != nil {
                map["StartHour"] = self.startHour!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["EndHour"] as? Int32 {
                self.endHour = value
            }
            if let value = dict["StartHour"] as? Int32 {
                self.startHour = value
            }
        }
    }
    public class MonitorConf : Tea.TeaModel {
        public class ApiHTTP : Tea.TeaModel {
            public class RequestBody : Tea.TeaModel {
                public var content: String?

                public var type: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.content != nil {
                        map["Content"] = self.content!
                    }
                    if self.type != nil {
                        map["Type"] = self.type!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Content"] as? String {
                        self.content = value
                    }
                    if let value = dict["Type"] as? String {
                        self.type = value
                    }
                }
            }
            public var checkCert: Bool?

            public var connectTimeout: Int64?

            public var method: String?

            public var protocolAlpnProtocol: Int32?

            public var requestBody: UpdateTimingSyntheticTaskRequest.MonitorConf.ApiHTTP.RequestBody?

            public var requestHeaders: [String: String]?

            public var targetUrl: String?

            public var timeout: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.requestBody?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.checkCert != nil {
                    map["CheckCert"] = self.checkCert!
                }
                if self.connectTimeout != nil {
                    map["ConnectTimeout"] = self.connectTimeout!
                }
                if self.method != nil {
                    map["Method"] = self.method!
                }
                if self.protocolAlpnProtocol != nil {
                    map["ProtocolAlpnProtocol"] = self.protocolAlpnProtocol!
                }
                if self.requestBody != nil {
                    map["RequestBody"] = self.requestBody?.toMap()
                }
                if self.requestHeaders != nil {
                    map["RequestHeaders"] = self.requestHeaders!
                }
                if self.targetUrl != nil {
                    map["TargetUrl"] = self.targetUrl!
                }
                if self.timeout != nil {
                    map["Timeout"] = self.timeout!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CheckCert"] as? Bool {
                    self.checkCert = value
                }
                if let value = dict["ConnectTimeout"] as? Int64 {
                    self.connectTimeout = value
                }
                if let value = dict["Method"] as? String {
                    self.method = value
                }
                if let value = dict["ProtocolAlpnProtocol"] as? Int32 {
                    self.protocolAlpnProtocol = value
                }
                if let value = dict["RequestBody"] as? [String: Any?] {
                    var model = UpdateTimingSyntheticTaskRequest.MonitorConf.ApiHTTP.RequestBody()
                    model.fromMap(value)
                    self.requestBody = model
                }
                if let value = dict["RequestHeaders"] as? [String: String] {
                    self.requestHeaders = value
                }
                if let value = dict["TargetUrl"] as? String {
                    self.targetUrl = value
                }
                if let value = dict["Timeout"] as? Int64 {
                    self.timeout = value
                }
            }
        }
        public class FileDownload : Tea.TeaModel {
            public var connectionTimeout: Int64?

            public var customHeaderContent: [String: String]?

            public var downloadKernel: Int32?

            public var ignoreCertificateAuthError: Int32?

            public var ignoreCertificateCanceledError: Int32?

            public var ignoreCertificateOutOfDateError: Int32?

            public var ignoreCertificateStatusError: Int32?

            public var ignoreCertificateUntrustworthyError: Int32?

            public var ignoreCertificateUsingError: Int32?

            public var ignoreInvalidHostError: Int32?

            public var monitorTimeout: Int64?

            public var quickProtocol: Int32?

            public var redirection: Int32?

            public var targetUrl: String?

            public var transmissionSize: Int64?

            public var validateKeywords: String?

            public var verifyWay: Int32?

            public var whiteList: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.connectionTimeout != nil {
                    map["ConnectionTimeout"] = self.connectionTimeout!
                }
                if self.customHeaderContent != nil {
                    map["CustomHeaderContent"] = self.customHeaderContent!
                }
                if self.downloadKernel != nil {
                    map["DownloadKernel"] = self.downloadKernel!
                }
                if self.ignoreCertificateAuthError != nil {
                    map["IgnoreCertificateAuthError"] = self.ignoreCertificateAuthError!
                }
                if self.ignoreCertificateCanceledError != nil {
                    map["IgnoreCertificateCanceledError"] = self.ignoreCertificateCanceledError!
                }
                if self.ignoreCertificateOutOfDateError != nil {
                    map["IgnoreCertificateOutOfDateError"] = self.ignoreCertificateOutOfDateError!
                }
                if self.ignoreCertificateStatusError != nil {
                    map["IgnoreCertificateStatusError"] = self.ignoreCertificateStatusError!
                }
                if self.ignoreCertificateUntrustworthyError != nil {
                    map["IgnoreCertificateUntrustworthyError"] = self.ignoreCertificateUntrustworthyError!
                }
                if self.ignoreCertificateUsingError != nil {
                    map["IgnoreCertificateUsingError"] = self.ignoreCertificateUsingError!
                }
                if self.ignoreInvalidHostError != nil {
                    map["IgnoreInvalidHostError"] = self.ignoreInvalidHostError!
                }
                if self.monitorTimeout != nil {
                    map["MonitorTimeout"] = self.monitorTimeout!
                }
                if self.quickProtocol != nil {
                    map["QuickProtocol"] = self.quickProtocol!
                }
                if self.redirection != nil {
                    map["Redirection"] = self.redirection!
                }
                if self.targetUrl != nil {
                    map["TargetUrl"] = self.targetUrl!
                }
                if self.transmissionSize != nil {
                    map["TransmissionSize"] = self.transmissionSize!
                }
                if self.validateKeywords != nil {
                    map["ValidateKeywords"] = self.validateKeywords!
                }
                if self.verifyWay != nil {
                    map["VerifyWay"] = self.verifyWay!
                }
                if self.whiteList != nil {
                    map["WhiteList"] = self.whiteList!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ConnectionTimeout"] as? Int64 {
                    self.connectionTimeout = value
                }
                if let value = dict["CustomHeaderContent"] as? [String: String] {
                    self.customHeaderContent = value
                }
                if let value = dict["DownloadKernel"] as? Int32 {
                    self.downloadKernel = value
                }
                if let value = dict["IgnoreCertificateAuthError"] as? Int32 {
                    self.ignoreCertificateAuthError = value
                }
                if let value = dict["IgnoreCertificateCanceledError"] as? Int32 {
                    self.ignoreCertificateCanceledError = value
                }
                if let value = dict["IgnoreCertificateOutOfDateError"] as? Int32 {
                    self.ignoreCertificateOutOfDateError = value
                }
                if let value = dict["IgnoreCertificateStatusError"] as? Int32 {
                    self.ignoreCertificateStatusError = value
                }
                if let value = dict["IgnoreCertificateUntrustworthyError"] as? Int32 {
                    self.ignoreCertificateUntrustworthyError = value
                }
                if let value = dict["IgnoreCertificateUsingError"] as? Int32 {
                    self.ignoreCertificateUsingError = value
                }
                if let value = dict["IgnoreInvalidHostError"] as? Int32 {
                    self.ignoreInvalidHostError = value
                }
                if let value = dict["MonitorTimeout"] as? Int64 {
                    self.monitorTimeout = value
                }
                if let value = dict["QuickProtocol"] as? Int32 {
                    self.quickProtocol = value
                }
                if let value = dict["Redirection"] as? Int32 {
                    self.redirection = value
                }
                if let value = dict["TargetUrl"] as? String {
                    self.targetUrl = value
                }
                if let value = dict["TransmissionSize"] as? Int64 {
                    self.transmissionSize = value
                }
                if let value = dict["ValidateKeywords"] as? String {
                    self.validateKeywords = value
                }
                if let value = dict["VerifyWay"] as? Int32 {
                    self.verifyWay = value
                }
                if let value = dict["WhiteList"] as? String {
                    self.whiteList = value
                }
            }
        }
        public class NetDNS : Tea.TeaModel {
            public var dig: Int32?

            public var dnsServerIpType: Int32?

            public var nsServer: String?

            public var queryMethod: Int32?

            public var targetUrl: String?

            public var timeout: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.dig != nil {
                    map["Dig"] = self.dig!
                }
                if self.dnsServerIpType != nil {
                    map["DnsServerIpType"] = self.dnsServerIpType!
                }
                if self.nsServer != nil {
                    map["NsServer"] = self.nsServer!
                }
                if self.queryMethod != nil {
                    map["QueryMethod"] = self.queryMethod!
                }
                if self.targetUrl != nil {
                    map["TargetUrl"] = self.targetUrl!
                }
                if self.timeout != nil {
                    map["Timeout"] = self.timeout!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Dig"] as? Int32 {
                    self.dig = value
                }
                if let value = dict["DnsServerIpType"] as? Int32 {
                    self.dnsServerIpType = value
                }
                if let value = dict["NsServer"] as? String {
                    self.nsServer = value
                }
                if let value = dict["QueryMethod"] as? Int32 {
                    self.queryMethod = value
                }
                if let value = dict["TargetUrl"] as? String {
                    self.targetUrl = value
                }
                if let value = dict["Timeout"] as? Int64 {
                    self.timeout = value
                }
            }
        }
        public class NetICMP : Tea.TeaModel {
            public var interval: Int64?

            public var packageNum: Int32?

            public var packageSize: Int32?

            public var splitPackage: Bool?

            public var targetUrl: String?

            public var timeout: Int64?

            public var tracertEnable: Bool?

            public var tracertNumMax: Int32?

            public var tracertTimeout: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.interval != nil {
                    map["Interval"] = self.interval!
                }
                if self.packageNum != nil {
                    map["PackageNum"] = self.packageNum!
                }
                if self.packageSize != nil {
                    map["PackageSize"] = self.packageSize!
                }
                if self.splitPackage != nil {
                    map["SplitPackage"] = self.splitPackage!
                }
                if self.targetUrl != nil {
                    map["TargetUrl"] = self.targetUrl!
                }
                if self.timeout != nil {
                    map["Timeout"] = self.timeout!
                }
                if self.tracertEnable != nil {
                    map["TracertEnable"] = self.tracertEnable!
                }
                if self.tracertNumMax != nil {
                    map["TracertNumMax"] = self.tracertNumMax!
                }
                if self.tracertTimeout != nil {
                    map["TracertTimeout"] = self.tracertTimeout!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Interval"] as? Int64 {
                    self.interval = value
                }
                if let value = dict["PackageNum"] as? Int32 {
                    self.packageNum = value
                }
                if let value = dict["PackageSize"] as? Int32 {
                    self.packageSize = value
                }
                if let value = dict["SplitPackage"] as? Bool {
                    self.splitPackage = value
                }
                if let value = dict["TargetUrl"] as? String {
                    self.targetUrl = value
                }
                if let value = dict["Timeout"] as? Int64 {
                    self.timeout = value
                }
                if let value = dict["TracertEnable"] as? Bool {
                    self.tracertEnable = value
                }
                if let value = dict["TracertNumMax"] as? Int32 {
                    self.tracertNumMax = value
                }
                if let value = dict["TracertTimeout"] as? Int64 {
                    self.tracertTimeout = value
                }
            }
        }
        public class NetTCP : Tea.TeaModel {
            public var connectTimes: Int32?

            public var interval: Int64?

            public var targetUrl: String?

            public var timeout: Int64?

            public var tracertEnable: Bool?

            public var tracertNumMax: Int32?

            public var tracertTimeout: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.connectTimes != nil {
                    map["ConnectTimes"] = self.connectTimes!
                }
                if self.interval != nil {
                    map["Interval"] = self.interval!
                }
                if self.targetUrl != nil {
                    map["TargetUrl"] = self.targetUrl!
                }
                if self.timeout != nil {
                    map["Timeout"] = self.timeout!
                }
                if self.tracertEnable != nil {
                    map["TracertEnable"] = self.tracertEnable!
                }
                if self.tracertNumMax != nil {
                    map["TracertNumMax"] = self.tracertNumMax!
                }
                if self.tracertTimeout != nil {
                    map["TracertTimeout"] = self.tracertTimeout!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ConnectTimes"] as? Int32 {
                    self.connectTimes = value
                }
                if let value = dict["Interval"] as? Int64 {
                    self.interval = value
                }
                if let value = dict["TargetUrl"] as? String {
                    self.targetUrl = value
                }
                if let value = dict["Timeout"] as? Int64 {
                    self.timeout = value
                }
                if let value = dict["TracertEnable"] as? Bool {
                    self.tracertEnable = value
                }
                if let value = dict["TracertNumMax"] as? Int32 {
                    self.tracertNumMax = value
                }
                if let value = dict["TracertTimeout"] as? Int64 {
                    self.tracertTimeout = value
                }
            }
        }
        public class Stream : Tea.TeaModel {
            public var customHeaderContent: [String: String]?

            public var playerType: Int32?

            public var streamAddressType: Int32?

            public var streamMonitorTimeout: Int32?

            public var streamType: Int32?

            public var targetUrl: String?

            public var whiteList: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.customHeaderContent != nil {
                    map["CustomHeaderContent"] = self.customHeaderContent!
                }
                if self.playerType != nil {
                    map["PlayerType"] = self.playerType!
                }
                if self.streamAddressType != nil {
                    map["StreamAddressType"] = self.streamAddressType!
                }
                if self.streamMonitorTimeout != nil {
                    map["StreamMonitorTimeout"] = self.streamMonitorTimeout!
                }
                if self.streamType != nil {
                    map["StreamType"] = self.streamType!
                }
                if self.targetUrl != nil {
                    map["TargetUrl"] = self.targetUrl!
                }
                if self.whiteList != nil {
                    map["WhiteList"] = self.whiteList!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CustomHeaderContent"] as? [String: String] {
                    self.customHeaderContent = value
                }
                if let value = dict["PlayerType"] as? Int32 {
                    self.playerType = value
                }
                if let value = dict["StreamAddressType"] as? Int32 {
                    self.streamAddressType = value
                }
                if let value = dict["StreamMonitorTimeout"] as? Int32 {
                    self.streamMonitorTimeout = value
                }
                if let value = dict["StreamType"] as? Int32 {
                    self.streamType = value
                }
                if let value = dict["TargetUrl"] as? String {
                    self.targetUrl = value
                }
                if let value = dict["WhiteList"] as? String {
                    self.whiteList = value
                }
            }
        }
        public class Website : Tea.TeaModel {
            public var automaticScrolling: Int32?

            public var customHeader: Int32?

            public var customHeaderContent: [String: String]?

            public var DNSHijackWhitelist: String?

            public var disableCache: Int32?

            public var disableCompression: Int32?

            public var elementBlacklist: String?

            public var filterInvalidIP: Int32?

            public var flowHijackJumpTimes: Int32?

            public var flowHijackLogo: String?

            public var ignoreCertificateError: Int32?

            public var monitorTimeout: Int64?

            public var pageTamper: String?

            public var redirection: Int32?

            public var slowElementThreshold: Int64?

            public var targetUrl: String?

            public var verifyStringBlacklist: String?

            public var verifyStringWhitelist: String?

            public var waitCompletionTime: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.automaticScrolling != nil {
                    map["AutomaticScrolling"] = self.automaticScrolling!
                }
                if self.customHeader != nil {
                    map["CustomHeader"] = self.customHeader!
                }
                if self.customHeaderContent != nil {
                    map["CustomHeaderContent"] = self.customHeaderContent!
                }
                if self.DNSHijackWhitelist != nil {
                    map["DNSHijackWhitelist"] = self.DNSHijackWhitelist!
                }
                if self.disableCache != nil {
                    map["DisableCache"] = self.disableCache!
                }
                if self.disableCompression != nil {
                    map["DisableCompression"] = self.disableCompression!
                }
                if self.elementBlacklist != nil {
                    map["ElementBlacklist"] = self.elementBlacklist!
                }
                if self.filterInvalidIP != nil {
                    map["FilterInvalidIP"] = self.filterInvalidIP!
                }
                if self.flowHijackJumpTimes != nil {
                    map["FlowHijackJumpTimes"] = self.flowHijackJumpTimes!
                }
                if self.flowHijackLogo != nil {
                    map["FlowHijackLogo"] = self.flowHijackLogo!
                }
                if self.ignoreCertificateError != nil {
                    map["IgnoreCertificateError"] = self.ignoreCertificateError!
                }
                if self.monitorTimeout != nil {
                    map["MonitorTimeout"] = self.monitorTimeout!
                }
                if self.pageTamper != nil {
                    map["PageTamper"] = self.pageTamper!
                }
                if self.redirection != nil {
                    map["Redirection"] = self.redirection!
                }
                if self.slowElementThreshold != nil {
                    map["SlowElementThreshold"] = self.slowElementThreshold!
                }
                if self.targetUrl != nil {
                    map["TargetUrl"] = self.targetUrl!
                }
                if self.verifyStringBlacklist != nil {
                    map["VerifyStringBlacklist"] = self.verifyStringBlacklist!
                }
                if self.verifyStringWhitelist != nil {
                    map["VerifyStringWhitelist"] = self.verifyStringWhitelist!
                }
                if self.waitCompletionTime != nil {
                    map["WaitCompletionTime"] = self.waitCompletionTime!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AutomaticScrolling"] as? Int32 {
                    self.automaticScrolling = value
                }
                if let value = dict["CustomHeader"] as? Int32 {
                    self.customHeader = value
                }
                if let value = dict["CustomHeaderContent"] as? [String: String] {
                    self.customHeaderContent = value
                }
                if let value = dict["DNSHijackWhitelist"] as? String {
                    self.DNSHijackWhitelist = value
                }
                if let value = dict["DisableCache"] as? Int32 {
                    self.disableCache = value
                }
                if let value = dict["DisableCompression"] as? Int32 {
                    self.disableCompression = value
                }
                if let value = dict["ElementBlacklist"] as? String {
                    self.elementBlacklist = value
                }
                if let value = dict["FilterInvalidIP"] as? Int32 {
                    self.filterInvalidIP = value
                }
                if let value = dict["FlowHijackJumpTimes"] as? Int32 {
                    self.flowHijackJumpTimes = value
                }
                if let value = dict["FlowHijackLogo"] as? String {
                    self.flowHijackLogo = value
                }
                if let value = dict["IgnoreCertificateError"] as? Int32 {
                    self.ignoreCertificateError = value
                }
                if let value = dict["MonitorTimeout"] as? Int64 {
                    self.monitorTimeout = value
                }
                if let value = dict["PageTamper"] as? String {
                    self.pageTamper = value
                }
                if let value = dict["Redirection"] as? Int32 {
                    self.redirection = value
                }
                if let value = dict["SlowElementThreshold"] as? Int64 {
                    self.slowElementThreshold = value
                }
                if let value = dict["TargetUrl"] as? String {
                    self.targetUrl = value
                }
                if let value = dict["VerifyStringBlacklist"] as? String {
                    self.verifyStringBlacklist = value
                }
                if let value = dict["VerifyStringWhitelist"] as? String {
                    self.verifyStringWhitelist = value
                }
                if let value = dict["WaitCompletionTime"] as? Int64 {
                    self.waitCompletionTime = value
                }
            }
        }
        public var apiHTTP: UpdateTimingSyntheticTaskRequest.MonitorConf.ApiHTTP?

        public var fileDownload: UpdateTimingSyntheticTaskRequest.MonitorConf.FileDownload?

        public var netDNS: UpdateTimingSyntheticTaskRequest.MonitorConf.NetDNS?

        public var netICMP: UpdateTimingSyntheticTaskRequest.MonitorConf.NetICMP?

        public var netTCP: UpdateTimingSyntheticTaskRequest.MonitorConf.NetTCP?

        public var stream: UpdateTimingSyntheticTaskRequest.MonitorConf.Stream?

        public var website: UpdateTimingSyntheticTaskRequest.MonitorConf.Website?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.apiHTTP?.validate()
            try self.fileDownload?.validate()
            try self.netDNS?.validate()
            try self.netICMP?.validate()
            try self.netTCP?.validate()
            try self.stream?.validate()
            try self.website?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.apiHTTP != nil {
                map["ApiHTTP"] = self.apiHTTP?.toMap()
            }
            if self.fileDownload != nil {
                map["FileDownload"] = self.fileDownload?.toMap()
            }
            if self.netDNS != nil {
                map["NetDNS"] = self.netDNS?.toMap()
            }
            if self.netICMP != nil {
                map["NetICMP"] = self.netICMP?.toMap()
            }
            if self.netTCP != nil {
                map["NetTCP"] = self.netTCP?.toMap()
            }
            if self.stream != nil {
                map["Stream"] = self.stream?.toMap()
            }
            if self.website != nil {
                map["Website"] = self.website?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ApiHTTP"] as? [String: Any?] {
                var model = UpdateTimingSyntheticTaskRequest.MonitorConf.ApiHTTP()
                model.fromMap(value)
                self.apiHTTP = model
            }
            if let value = dict["FileDownload"] as? [String: Any?] {
                var model = UpdateTimingSyntheticTaskRequest.MonitorConf.FileDownload()
                model.fromMap(value)
                self.fileDownload = model
            }
            if let value = dict["NetDNS"] as? [String: Any?] {
                var model = UpdateTimingSyntheticTaskRequest.MonitorConf.NetDNS()
                model.fromMap(value)
                self.netDNS = model
            }
            if let value = dict["NetICMP"] as? [String: Any?] {
                var model = UpdateTimingSyntheticTaskRequest.MonitorConf.NetICMP()
                model.fromMap(value)
                self.netICMP = model
            }
            if let value = dict["NetTCP"] as? [String: Any?] {
                var model = UpdateTimingSyntheticTaskRequest.MonitorConf.NetTCP()
                model.fromMap(value)
                self.netTCP = model
            }
            if let value = dict["Stream"] as? [String: Any?] {
                var model = UpdateTimingSyntheticTaskRequest.MonitorConf.Stream()
                model.fromMap(value)
                self.stream = model
            }
            if let value = dict["Website"] as? [String: Any?] {
                var model = UpdateTimingSyntheticTaskRequest.MonitorConf.Website()
                model.fromMap(value)
                self.website = model
            }
        }
    }
    public class Monitors : Tea.TeaModel {
        public var cityCode: String?

        public var clientType: Int32?

        public var operatorCode: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.cityCode != nil {
                map["CityCode"] = self.cityCode!
            }
            if self.clientType != nil {
                map["ClientType"] = self.clientType!
            }
            if self.operatorCode != nil {
                map["OperatorCode"] = self.operatorCode!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CityCode"] as? String {
                self.cityCode = value
            }
            if let value = dict["ClientType"] as? Int32 {
                self.clientType = value
            }
            if let value = dict["OperatorCode"] as? String {
                self.operatorCode = value
            }
        }
    }
    public class Tags : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var availableAssertions: [UpdateTimingSyntheticTaskRequest.AvailableAssertions]?

    public var commonSetting: UpdateTimingSyntheticTaskRequest.CommonSetting?

    public var customPeriod: UpdateTimingSyntheticTaskRequest.CustomPeriod?

    public var frequency: String?

    public var monitorConf: UpdateTimingSyntheticTaskRequest.MonitorConf?

    public var monitors: [UpdateTimingSyntheticTaskRequest.Monitors]?

    public var name: String?

    public var regionId: String?

    public var resourceGroupId: String?

    public var tags: [UpdateTimingSyntheticTaskRequest.Tags]?

    public var taskId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.commonSetting?.validate()
        try self.customPeriod?.validate()
        try self.monitorConf?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.availableAssertions != nil {
            var tmp : [Any] = []
            for k in self.availableAssertions! {
                tmp.append(k.toMap())
            }
            map["AvailableAssertions"] = tmp
        }
        if self.commonSetting != nil {
            map["CommonSetting"] = self.commonSetting?.toMap()
        }
        if self.customPeriod != nil {
            map["CustomPeriod"] = self.customPeriod?.toMap()
        }
        if self.frequency != nil {
            map["Frequency"] = self.frequency!
        }
        if self.monitorConf != nil {
            map["MonitorConf"] = self.monitorConf?.toMap()
        }
        if self.monitors != nil {
            var tmp : [Any] = []
            for k in self.monitors! {
                tmp.append(k.toMap())
            }
            map["Monitors"] = tmp
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceGroupId != nil {
            map["ResourceGroupId"] = self.resourceGroupId!
        }
        if self.tags != nil {
            var tmp : [Any] = []
            for k in self.tags! {
                tmp.append(k.toMap())
            }
            map["Tags"] = tmp
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AvailableAssertions"] as? [Any?] {
            var tmp : [UpdateTimingSyntheticTaskRequest.AvailableAssertions] = []
            for v in value {
                if v != nil {
                    var model = UpdateTimingSyntheticTaskRequest.AvailableAssertions()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.availableAssertions = tmp
        }
        if let value = dict["CommonSetting"] as? [String: Any?] {
            var model = UpdateTimingSyntheticTaskRequest.CommonSetting()
            model.fromMap(value)
            self.commonSetting = model
        }
        if let value = dict["CustomPeriod"] as? [String: Any?] {
            var model = UpdateTimingSyntheticTaskRequest.CustomPeriod()
            model.fromMap(value)
            self.customPeriod = model
        }
        if let value = dict["Frequency"] as? String {
            self.frequency = value
        }
        if let value = dict["MonitorConf"] as? [String: Any?] {
            var model = UpdateTimingSyntheticTaskRequest.MonitorConf()
            model.fromMap(value)
            self.monitorConf = model
        }
        if let value = dict["Monitors"] as? [Any?] {
            var tmp : [UpdateTimingSyntheticTaskRequest.Monitors] = []
            for v in value {
                if v != nil {
                    var model = UpdateTimingSyntheticTaskRequest.Monitors()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.monitors = tmp
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceGroupId"] as? String {
            self.resourceGroupId = value
        }
        if let value = dict["Tags"] as? [Any?] {
            var tmp : [UpdateTimingSyntheticTaskRequest.Tags] = []
            for v in value {
                if v != nil {
                    var model = UpdateTimingSyntheticTaskRequest.Tags()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tags = tmp
        }
        if let value = dict["TaskId"] as? String {
            self.taskId = value
        }
    }
}

public class UpdateTimingSyntheticTaskShrinkRequest : Tea.TeaModel {
    public var availableAssertionsShrink: String?

    public var commonSettingShrink: String?

    public var customPeriodShrink: String?

    public var frequency: String?

    public var monitorConfShrink: String?

    public var monitorsShrink: String?

    public var name: String?

    public var regionId: String?

    public var resourceGroupId: String?

    public var tagsShrink: String?

    public var taskId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.availableAssertionsShrink != nil {
            map["AvailableAssertions"] = self.availableAssertionsShrink!
        }
        if self.commonSettingShrink != nil {
            map["CommonSetting"] = self.commonSettingShrink!
        }
        if self.customPeriodShrink != nil {
            map["CustomPeriod"] = self.customPeriodShrink!
        }
        if self.frequency != nil {
            map["Frequency"] = self.frequency!
        }
        if self.monitorConfShrink != nil {
            map["MonitorConf"] = self.monitorConfShrink!
        }
        if self.monitorsShrink != nil {
            map["Monitors"] = self.monitorsShrink!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceGroupId != nil {
            map["ResourceGroupId"] = self.resourceGroupId!
        }
        if self.tagsShrink != nil {
            map["Tags"] = self.tagsShrink!
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AvailableAssertions"] as? String {
            self.availableAssertionsShrink = value
        }
        if let value = dict["CommonSetting"] as? String {
            self.commonSettingShrink = value
        }
        if let value = dict["CustomPeriod"] as? String {
            self.customPeriodShrink = value
        }
        if let value = dict["Frequency"] as? String {
            self.frequency = value
        }
        if let value = dict["MonitorConf"] as? String {
            self.monitorConfShrink = value
        }
        if let value = dict["Monitors"] as? String {
            self.monitorsShrink = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceGroupId"] as? String {
            self.resourceGroupId = value
        }
        if let value = dict["Tags"] as? String {
            self.tagsShrink = value
        }
        if let value = dict["TaskId"] as? String {
            self.taskId = value
        }
    }
}

public class UpdateTimingSyntheticTaskResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var taskId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["TaskId"] as? String {
                self.taskId = value
            }
        }
    }
    public var code: Int64?

    public var data: UpdateTimingSyntheticTaskResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int64 {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = UpdateTimingSyntheticTaskResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class UpdateTimingSyntheticTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateTimingSyntheticTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateTimingSyntheticTaskResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateWebhookRequest : Tea.TeaModel {
    public var body: String?

    public var contactId: Int64?

    public var contactName: String?

    public var httpHeaders: String?

    public var httpParams: String?

    public var method: String?

    public var recoverBody: String?

    public var regionId: String?

    public var url: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.body != nil {
            map["Body"] = self.body!
        }
        if self.contactId != nil {
            map["ContactId"] = self.contactId!
        }
        if self.contactName != nil {
            map["ContactName"] = self.contactName!
        }
        if self.httpHeaders != nil {
            map["HttpHeaders"] = self.httpHeaders!
        }
        if self.httpParams != nil {
            map["HttpParams"] = self.httpParams!
        }
        if self.method != nil {
            map["Method"] = self.method!
        }
        if self.recoverBody != nil {
            map["RecoverBody"] = self.recoverBody!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.url != nil {
            map["Url"] = self.url!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Body"] as? String {
            self.body = value
        }
        if let value = dict["ContactId"] as? Int64 {
            self.contactId = value
        }
        if let value = dict["ContactName"] as? String {
            self.contactName = value
        }
        if let value = dict["HttpHeaders"] as? String {
            self.httpHeaders = value
        }
        if let value = dict["HttpParams"] as? String {
            self.httpParams = value
        }
        if let value = dict["Method"] as? String {
            self.method = value
        }
        if let value = dict["RecoverBody"] as? String {
            self.recoverBody = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Url"] as? String {
            self.url = value
        }
    }
}

public class UpdateWebhookResponseBody : Tea.TeaModel {
    public var isSuccess: Bool?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.isSuccess != nil {
            map["IsSuccess"] = self.isSuccess!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["IsSuccess"] as? Bool {
            self.isSuccess = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdateWebhookResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateWebhookResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateWebhookResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpgradeAddonReleaseRequest : Tea.TeaModel {
    public var addonVersion: String?

    public var dryRun: Bool?

    public var environmentId: String?

    public var regionId: String?

    public var releaseName: String?

    public var values: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.addonVersion != nil {
            map["AddonVersion"] = self.addonVersion!
        }
        if self.dryRun != nil {
            map["DryRun"] = self.dryRun!
        }
        if self.environmentId != nil {
            map["EnvironmentId"] = self.environmentId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.releaseName != nil {
            map["ReleaseName"] = self.releaseName!
        }
        if self.values != nil {
            map["Values"] = self.values!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AddonVersion"] as? String {
            self.addonVersion = value
        }
        if let value = dict["DryRun"] as? Bool {
            self.dryRun = value
        }
        if let value = dict["EnvironmentId"] as? String {
            self.environmentId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ReleaseName"] as? String {
            self.releaseName = value
        }
        if let value = dict["Values"] as? String {
            self.values = value
        }
    }
}

public class UpgradeAddonReleaseResponseBody : Tea.TeaModel {
    public var code: Int32?

    public var data: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class UpgradeAddonReleaseResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpgradeAddonReleaseResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpgradeAddonReleaseResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpgradeEnvironmentFeatureRequest : Tea.TeaModel {
    public var aliyunLang: String?

    public var environmentId: String?

    public var featureName: String?

    public var featureVersion: String?

    public var regionId: String?

    public var values: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.aliyunLang != nil {
            map["AliyunLang"] = self.aliyunLang!
        }
        if self.environmentId != nil {
            map["EnvironmentId"] = self.environmentId!
        }
        if self.featureName != nil {
            map["FeatureName"] = self.featureName!
        }
        if self.featureVersion != nil {
            map["FeatureVersion"] = self.featureVersion!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.values != nil {
            map["Values"] = self.values!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AliyunLang"] as? String {
            self.aliyunLang = value
        }
        if let value = dict["EnvironmentId"] as? String {
            self.environmentId = value
        }
        if let value = dict["FeatureName"] as? String {
            self.featureName = value
        }
        if let value = dict["FeatureVersion"] as? String {
            self.featureVersion = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Values"] as? String {
            self.values = value
        }
    }
}

public class UpgradeEnvironmentFeatureResponseBody : Tea.TeaModel {
    public var code: Int32?

    public var data: [String: String]?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? [String: String] {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class UpgradeEnvironmentFeatureResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpgradeEnvironmentFeatureResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpgradeEnvironmentFeatureResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UploadRequest : Tea.TeaModel {
    public var edition: String?

    public var file: String?

    public var fileName: String?

    public var pid: String?

    public var regionId: String?

    public var version: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.edition != nil {
            map["Edition"] = self.edition!
        }
        if self.file != nil {
            map["File"] = self.file!
        }
        if self.fileName != nil {
            map["FileName"] = self.fileName!
        }
        if self.pid != nil {
            map["Pid"] = self.pid!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.version != nil {
            map["Version"] = self.version!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Edition"] as? String {
            self.edition = value
        }
        if let value = dict["File"] as? String {
            self.file = value
        }
        if let value = dict["FileName"] as? String {
            self.fileName = value
        }
        if let value = dict["Pid"] as? String {
            self.pid = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Version"] as? String {
            self.version = value
        }
    }
}

public class UploadResponseBody : Tea.TeaModel {
    public class UploadResult : Tea.TeaModel {
        public var fid: String?

        public var fileName: String?

        public var uploadTime: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.fid != nil {
                map["Fid"] = self.fid!
            }
            if self.fileName != nil {
                map["FileName"] = self.fileName!
            }
            if self.uploadTime != nil {
                map["UploadTime"] = self.uploadTime!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Fid"] as? String {
                self.fid = value
            }
            if let value = dict["FileName"] as? String {
                self.fileName = value
            }
            if let value = dict["UploadTime"] as? String {
                self.uploadTime = value
            }
        }
    }
    public var requestId: String?

    public var uploadResult: UploadResponseBody.UploadResult?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.uploadResult?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.uploadResult != nil {
            map["UploadResult"] = self.uploadResult?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["UploadResult"] as? [String: Any?] {
            var model = UploadResponseBody.UploadResult()
            model.fromMap(value)
            self.uploadResult = model
        }
    }
}

public class UploadResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UploadResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UploadResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}
