import Foundation
import Tea
import TeaUtils
import AlibabacloudOpenApi
import AlibabaCloudOpenApiUtil
import AlibabacloudEndpointUtil

public class AddSampleDataByCsvRequest : Tea.TeaModel {
    public var lang: String?

    public var ossFileName: String?

    public var regId: String?

    public var sampleBatchUuid: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.ossFileName != nil {
            map["ossFileName"] = self.ossFileName!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.sampleBatchUuid != nil {
            map["sampleBatchUuid"] = self.sampleBatchUuid!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["ossFileName"] as? String {
            self.ossFileName = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["sampleBatchUuid"] as? String {
            self.sampleBatchUuid = value
        }
    }
}

public class AddSampleDataByCsvResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class AddSampleDataByCsvResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AddSampleDataByCsvResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = AddSampleDataByCsvResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class AddSampleDataByTextRequest : Tea.TeaModel {
    public var lang: String?

    public var dataValue: String?

    public var regId: String?

    public var sampleBatchUuid: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.dataValue != nil {
            map["dataValue"] = self.dataValue!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.sampleBatchUuid != nil {
            map["sampleBatchUuid"] = self.sampleBatchUuid!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["dataValue"] as? String {
            self.dataValue = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["sampleBatchUuid"] as? String {
            self.sampleBatchUuid = value
        }
    }
}

public class AddSampleDataByTextResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class AddSampleDataByTextResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AddSampleDataByTextResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = AddSampleDataByTextResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class BatchDeleteSampleDataRequest : Tea.TeaModel {
    public var lang: String?

    public var regId: String?

    public var uuids: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.uuids != nil {
            map["uuids"] = self.uuids!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["uuids"] as? String {
            self.uuids = value
        }
    }
}

public class BatchDeleteSampleDataResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class BatchDeleteSampleDataResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: BatchDeleteSampleDataResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = BatchDeleteSampleDataResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class BindVariableRequest : Tea.TeaModel {
    public var lang: String?

    public var apiRegionId: String?

    public var apiType: String?

    public var createType: String?

    public var defineId: String?

    public var defineIds: String?

    public var description_: String?

    public var eventCode: String?

    public var exceptionValue: String?

    public var id: Int64?

    public var outputField: String?

    public var outputType: String?

    public var params: String?

    public var paramsList: String?

    public var regId: String?

    public var sourceType: String?

    public var title: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.apiRegionId != nil {
            map["apiRegionId"] = self.apiRegionId!
        }
        if self.apiType != nil {
            map["apiType"] = self.apiType!
        }
        if self.createType != nil {
            map["createType"] = self.createType!
        }
        if self.defineId != nil {
            map["defineId"] = self.defineId!
        }
        if self.defineIds != nil {
            map["defineIds"] = self.defineIds!
        }
        if self.description_ != nil {
            map["description"] = self.description_!
        }
        if self.eventCode != nil {
            map["eventCode"] = self.eventCode!
        }
        if self.exceptionValue != nil {
            map["exceptionValue"] = self.exceptionValue!
        }
        if self.id != nil {
            map["id"] = self.id!
        }
        if self.outputField != nil {
            map["outputField"] = self.outputField!
        }
        if self.outputType != nil {
            map["outputType"] = self.outputType!
        }
        if self.params != nil {
            map["params"] = self.params!
        }
        if self.paramsList != nil {
            map["paramsList"] = self.paramsList!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.sourceType != nil {
            map["sourceType"] = self.sourceType!
        }
        if self.title != nil {
            map["title"] = self.title!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["apiRegionId"] as? String {
            self.apiRegionId = value
        }
        if let value = dict["apiType"] as? String {
            self.apiType = value
        }
        if let value = dict["createType"] as? String {
            self.createType = value
        }
        if let value = dict["defineId"] as? String {
            self.defineId = value
        }
        if let value = dict["defineIds"] as? String {
            self.defineIds = value
        }
        if let value = dict["description"] as? String {
            self.description_ = value
        }
        if let value = dict["eventCode"] as? String {
            self.eventCode = value
        }
        if let value = dict["exceptionValue"] as? String {
            self.exceptionValue = value
        }
        if let value = dict["id"] as? Int64 {
            self.id = value
        }
        if let value = dict["outputField"] as? String {
            self.outputField = value
        }
        if let value = dict["outputType"] as? String {
            self.outputType = value
        }
        if let value = dict["params"] as? String {
            self.params = value
        }
        if let value = dict["paramsList"] as? String {
            self.paramsList = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["sourceType"] as? String {
            self.sourceType = value
        }
        if let value = dict["title"] as? String {
            self.title = value
        }
    }
}

public class BindVariableResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
    }
}

public class BindVariableResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: BindVariableResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = BindVariableResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CheckCopyRuleVariableRequest : Tea.TeaModel {
    public var createType: String?

    public var lang: String?

    public var regId: String?

    public var sourceRuleId: String?

    public var sourceRuleIds: String?

    public var targetEventCode: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.createType != nil {
            map["CreateType"] = self.createType!
        }
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.regId != nil {
            map["RegId"] = self.regId!
        }
        if self.sourceRuleId != nil {
            map["SourceRuleId"] = self.sourceRuleId!
        }
        if self.sourceRuleIds != nil {
            map["SourceRuleIds"] = self.sourceRuleIds!
        }
        if self.targetEventCode != nil {
            map["TargetEventCode"] = self.targetEventCode!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CreateType"] as? String {
            self.createType = value
        }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["RegId"] as? String {
            self.regId = value
        }
        if let value = dict["SourceRuleId"] as? String {
            self.sourceRuleId = value
        }
        if let value = dict["SourceRuleIds"] as? String {
            self.sourceRuleIds = value
        }
        if let value = dict["TargetEventCode"] as? String {
            self.targetEventCode = value
        }
    }
}

public class CheckCopyRuleVariableResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public class Message : Tea.TeaModel {
            public var id: Int64?

            public var name: String?

            public var title: String?

            public var type: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.title != nil {
                    map["Title"] = self.title!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Id"] as? Int64 {
                    self.id = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["Title"] as? String {
                    self.title = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
            }
        }
        public var message: [CheckCopyRuleVariableResponseBody.ResultObject.Message]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.message != nil {
                var tmp : [Any] = []
                for k in self.message! {
                    tmp.append(k.toMap())
                }
                map["Message"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Message"] as? [Any?] {
                var tmp : [CheckCopyRuleVariableResponseBody.ResultObject.Message] = []
                for v in value {
                    if v != nil {
                        var model = CheckCopyRuleVariableResponseBody.ResultObject.Message()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.message = tmp
            }
        }
    }
    public var requestId: String?

    public var resultObject: CheckCopyRuleVariableResponseBody.ResultObject?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.resultObject?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["ResultObject"] = self.resultObject?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["ResultObject"] as? [String: Any?] {
            var model = CheckCopyRuleVariableResponseBody.ResultObject()
            model.fromMap(value)
            self.resultObject = model
        }
    }
}

public class CheckCopyRuleVariableResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CheckCopyRuleVariableResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CheckCopyRuleVariableResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CheckCustVariableLimitRequest : Tea.TeaModel {
    public var lang: String?

    public var createType: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.createType != nil {
            map["createType"] = self.createType!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["createType"] as? String {
            self.createType = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class CheckCustVariableLimitResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
    }
}

public class CheckCustVariableLimitResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CheckCustVariableLimitResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CheckCustVariableLimitResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CheckExpressionVariableLimitRequest : Tea.TeaModel {
    public var lang: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class CheckExpressionVariableLimitResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
    }
}

public class CheckExpressionVariableLimitResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CheckExpressionVariableLimitResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CheckExpressionVariableLimitResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CheckFieldLimitRequest : Tea.TeaModel {
    public var lang: String?

    public var regId: String?

    public var source: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.source != nil {
            map["source"] = self.source!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["source"] as? String {
            self.source = value
        }
    }
}

public class CheckFieldLimitResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
    }
}

public class CheckFieldLimitResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CheckFieldLimitResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CheckFieldLimitResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CheckUsageVariableRequest : Tea.TeaModel {
    public var lang: String?

    public var id: Int64?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.id != nil {
            map["id"] = self.id!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["id"] as? Int64 {
            self.id = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class CheckUsageVariableResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
    }
}

public class CheckUsageVariableResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CheckUsageVariableResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CheckUsageVariableResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CompareCopyRuleVariableRequest : Tea.TeaModel {
    public var createType: String?

    public var lang: String?

    public var regId: String?

    public var sourceRuleId: String?

    public var sourceRuleIds: String?

    public var targetEventCode: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.createType != nil {
            map["CreateType"] = self.createType!
        }
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.regId != nil {
            map["RegId"] = self.regId!
        }
        if self.sourceRuleId != nil {
            map["SourceRuleId"] = self.sourceRuleId!
        }
        if self.sourceRuleIds != nil {
            map["SourceRuleIds"] = self.sourceRuleIds!
        }
        if self.targetEventCode != nil {
            map["TargetEventCode"] = self.targetEventCode!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CreateType"] as? String {
            self.createType = value
        }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["RegId"] as? String {
            self.regId = value
        }
        if let value = dict["SourceRuleId"] as? String {
            self.sourceRuleId = value
        }
        if let value = dict["SourceRuleIds"] as? String {
            self.sourceRuleIds = value
        }
        if let value = dict["TargetEventCode"] as? String {
            self.targetEventCode = value
        }
    }
}

public class CompareCopyRuleVariableResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public class CustVariableList : Tea.TeaModel {
            public var description_: String?

            public var id: Int64?

            public var name: String?

            public var outType: String?

            public var title: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.outType != nil {
                    map["OutType"] = self.outType!
                }
                if self.title != nil {
                    map["Title"] = self.title!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["Id"] as? Int64 {
                    self.id = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["OutType"] as? String {
                    self.outType = value
                }
                if let value = dict["Title"] as? String {
                    self.title = value
                }
            }
        }
        public class EventVariableList : Tea.TeaModel {
            public var description_: String?

            public var id: Int64?

            public var name: String?

            public var outType: String?

            public var title: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.outType != nil {
                    map["OutType"] = self.outType!
                }
                if self.title != nil {
                    map["Title"] = self.title!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["Id"] as? Int64 {
                    self.id = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["OutType"] as? String {
                    self.outType = value
                }
                if let value = dict["Title"] as? String {
                    self.title = value
                }
            }
        }
        public class ExpressionVariableList : Tea.TeaModel {
            public var description_: String?

            public var id: Int64?

            public var name: String?

            public var outType: String?

            public var title: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.outType != nil {
                    map["OutType"] = self.outType!
                }
                if self.title != nil {
                    map["Title"] = self.title!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["Id"] as? Int64 {
                    self.id = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["OutType"] as? String {
                    self.outType = value
                }
                if let value = dict["Title"] as? String {
                    self.title = value
                }
            }
        }
        public class NameListVariableList : Tea.TeaModel {
            public var description_: String?

            public var id: Int64?

            public var name: String?

            public var outType: String?

            public var title: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.outType != nil {
                    map["OutType"] = self.outType!
                }
                if self.title != nil {
                    map["Title"] = self.title!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["Id"] as? Int64 {
                    self.id = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["OutType"] as? String {
                    self.outType = value
                }
                if let value = dict["Title"] as? String {
                    self.title = value
                }
            }
        }
        public class QueryExpressionVariableList : Tea.TeaModel {
            public var description_: String?

            public var id: Int64?

            public var name: String?

            public var outType: String?

            public var title: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.outType != nil {
                    map["OutType"] = self.outType!
                }
                if self.title != nil {
                    map["Title"] = self.title!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["Id"] as? Int64 {
                    self.id = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["OutType"] as? String {
                    self.outType = value
                }
                if let value = dict["Title"] as? String {
                    self.title = value
                }
            }
        }
        public class SystemVariableList : Tea.TeaModel {
            public var description_: String?

            public var id: Int64?

            public var name: String?

            public var outType: String?

            public var title: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.outType != nil {
                    map["OutType"] = self.outType!
                }
                if self.title != nil {
                    map["Title"] = self.title!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["Id"] as? Int64 {
                    self.id = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["OutType"] as? String {
                    self.outType = value
                }
                if let value = dict["Title"] as? String {
                    self.title = value
                }
            }
        }
        public var custVariableList: [CompareCopyRuleVariableResponseBody.ResultObject.CustVariableList]?

        public var eventVariableList: [CompareCopyRuleVariableResponseBody.ResultObject.EventVariableList]?

        public var expressionVariableList: [CompareCopyRuleVariableResponseBody.ResultObject.ExpressionVariableList]?

        public var nameListVariableList: [CompareCopyRuleVariableResponseBody.ResultObject.NameListVariableList]?

        public var queryExpressionVariableList: [CompareCopyRuleVariableResponseBody.ResultObject.QueryExpressionVariableList]?

        public var systemVariableList: [CompareCopyRuleVariableResponseBody.ResultObject.SystemVariableList]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.custVariableList != nil {
                var tmp : [Any] = []
                for k in self.custVariableList! {
                    tmp.append(k.toMap())
                }
                map["CustVariableList"] = tmp
            }
            if self.eventVariableList != nil {
                var tmp : [Any] = []
                for k in self.eventVariableList! {
                    tmp.append(k.toMap())
                }
                map["EventVariableList"] = tmp
            }
            if self.expressionVariableList != nil {
                var tmp : [Any] = []
                for k in self.expressionVariableList! {
                    tmp.append(k.toMap())
                }
                map["ExpressionVariableList"] = tmp
            }
            if self.nameListVariableList != nil {
                var tmp : [Any] = []
                for k in self.nameListVariableList! {
                    tmp.append(k.toMap())
                }
                map["NameListVariableList"] = tmp
            }
            if self.queryExpressionVariableList != nil {
                var tmp : [Any] = []
                for k in self.queryExpressionVariableList! {
                    tmp.append(k.toMap())
                }
                map["QueryExpressionVariableList"] = tmp
            }
            if self.systemVariableList != nil {
                var tmp : [Any] = []
                for k in self.systemVariableList! {
                    tmp.append(k.toMap())
                }
                map["SystemVariableList"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CustVariableList"] as? [Any?] {
                var tmp : [CompareCopyRuleVariableResponseBody.ResultObject.CustVariableList] = []
                for v in value {
                    if v != nil {
                        var model = CompareCopyRuleVariableResponseBody.ResultObject.CustVariableList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.custVariableList = tmp
            }
            if let value = dict["EventVariableList"] as? [Any?] {
                var tmp : [CompareCopyRuleVariableResponseBody.ResultObject.EventVariableList] = []
                for v in value {
                    if v != nil {
                        var model = CompareCopyRuleVariableResponseBody.ResultObject.EventVariableList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.eventVariableList = tmp
            }
            if let value = dict["ExpressionVariableList"] as? [Any?] {
                var tmp : [CompareCopyRuleVariableResponseBody.ResultObject.ExpressionVariableList] = []
                for v in value {
                    if v != nil {
                        var model = CompareCopyRuleVariableResponseBody.ResultObject.ExpressionVariableList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.expressionVariableList = tmp
            }
            if let value = dict["NameListVariableList"] as? [Any?] {
                var tmp : [CompareCopyRuleVariableResponseBody.ResultObject.NameListVariableList] = []
                for v in value {
                    if v != nil {
                        var model = CompareCopyRuleVariableResponseBody.ResultObject.NameListVariableList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.nameListVariableList = tmp
            }
            if let value = dict["QueryExpressionVariableList"] as? [Any?] {
                var tmp : [CompareCopyRuleVariableResponseBody.ResultObject.QueryExpressionVariableList] = []
                for v in value {
                    if v != nil {
                        var model = CompareCopyRuleVariableResponseBody.ResultObject.QueryExpressionVariableList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.queryExpressionVariableList = tmp
            }
            if let value = dict["SystemVariableList"] as? [Any?] {
                var tmp : [CompareCopyRuleVariableResponseBody.ResultObject.SystemVariableList] = []
                for v in value {
                    if v != nil {
                        var model = CompareCopyRuleVariableResponseBody.ResultObject.SystemVariableList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.systemVariableList = tmp
            }
        }
    }
    public var requestId: String?

    public var resultObject: CompareCopyRuleVariableResponseBody.ResultObject?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.resultObject?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["ResultObject"] = self.resultObject?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["ResultObject"] as? [String: Any?] {
            var model = CompareCopyRuleVariableResponseBody.ResultObject()
            model.fromMap(value)
            self.resultObject = model
        }
    }
}

public class CompareCopyRuleVariableResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CompareCopyRuleVariableResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CompareCopyRuleVariableResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateAnalysisConditionFavoriteRequest : Tea.TeaModel {
    public var lang: String?

    public var condition: String?

    public var eventBeginTime: Int64?

    public var eventCodes: String?

    public var eventEndTime: Int64?

    public var fieldName: String?

    public var fieldValue: String?

    public var name: String?

    public var regId: String?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.condition != nil {
            map["condition"] = self.condition!
        }
        if self.eventBeginTime != nil {
            map["eventBeginTime"] = self.eventBeginTime!
        }
        if self.eventCodes != nil {
            map["eventCodes"] = self.eventCodes!
        }
        if self.eventEndTime != nil {
            map["eventEndTime"] = self.eventEndTime!
        }
        if self.fieldName != nil {
            map["fieldName"] = self.fieldName!
        }
        if self.fieldValue != nil {
            map["fieldValue"] = self.fieldValue!
        }
        if self.name != nil {
            map["name"] = self.name!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.type != nil {
            map["type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["condition"] as? String {
            self.condition = value
        }
        if let value = dict["eventBeginTime"] as? Int64 {
            self.eventBeginTime = value
        }
        if let value = dict["eventCodes"] as? String {
            self.eventCodes = value
        }
        if let value = dict["eventEndTime"] as? Int64 {
            self.eventEndTime = value
        }
        if let value = dict["fieldName"] as? String {
            self.fieldName = value
        }
        if let value = dict["fieldValue"] as? String {
            self.fieldValue = value
        }
        if let value = dict["name"] as? String {
            self.name = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["type"] as? String {
            self.type = value
        }
    }
}

public class CreateAnalysisConditionFavoriteResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
    }
}

public class CreateAnalysisConditionFavoriteResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateAnalysisConditionFavoriteResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateAnalysisConditionFavoriteResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateAnalysisExportTaskRequest : Tea.TeaModel {
    public var lang: String?

    public var columns: String?

    public var conditions: String?

    public var eventBeginTime: Int64?

    public var eventCodes: String?

    public var eventEndTime: Int64?

    public var fieldName: String?

    public var fieldValue: String?

    public var fileFormat: String?

    public var regId: String?

    public var scope: String?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.columns != nil {
            map["columns"] = self.columns!
        }
        if self.conditions != nil {
            map["conditions"] = self.conditions!
        }
        if self.eventBeginTime != nil {
            map["eventBeginTime"] = self.eventBeginTime!
        }
        if self.eventCodes != nil {
            map["eventCodes"] = self.eventCodes!
        }
        if self.eventEndTime != nil {
            map["eventEndTime"] = self.eventEndTime!
        }
        if self.fieldName != nil {
            map["fieldName"] = self.fieldName!
        }
        if self.fieldValue != nil {
            map["fieldValue"] = self.fieldValue!
        }
        if self.fileFormat != nil {
            map["fileFormat"] = self.fileFormat!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.scope != nil {
            map["scope"] = self.scope!
        }
        if self.type != nil {
            map["type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["columns"] as? String {
            self.columns = value
        }
        if let value = dict["conditions"] as? String {
            self.conditions = value
        }
        if let value = dict["eventBeginTime"] as? Int64 {
            self.eventBeginTime = value
        }
        if let value = dict["eventCodes"] as? String {
            self.eventCodes = value
        }
        if let value = dict["eventEndTime"] as? Int64 {
            self.eventEndTime = value
        }
        if let value = dict["fieldName"] as? String {
            self.fieldName = value
        }
        if let value = dict["fieldValue"] as? String {
            self.fieldValue = value
        }
        if let value = dict["fileFormat"] as? String {
            self.fileFormat = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["scope"] as? String {
            self.scope = value
        }
        if let value = dict["type"] as? String {
            self.type = value
        }
    }
}

public class CreateAnalysisExportTaskResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public var columns: String?

        public var conditions: String?

        public var eventBeginTime: Int64?

        public var eventCodes: String?

        public var eventEndTime: Int64?

        public var fileFormat: String?

        public var ossKey: String?

        public var scope: String?

        public var status: String?

        public var type: String?

        public var userId: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.columns != nil {
                map["columns"] = self.columns!
            }
            if self.conditions != nil {
                map["conditions"] = self.conditions!
            }
            if self.eventBeginTime != nil {
                map["eventBeginTime"] = self.eventBeginTime!
            }
            if self.eventCodes != nil {
                map["eventCodes"] = self.eventCodes!
            }
            if self.eventEndTime != nil {
                map["eventEndTime"] = self.eventEndTime!
            }
            if self.fileFormat != nil {
                map["fileFormat"] = self.fileFormat!
            }
            if self.ossKey != nil {
                map["ossKey"] = self.ossKey!
            }
            if self.scope != nil {
                map["scope"] = self.scope!
            }
            if self.status != nil {
                map["status"] = self.status!
            }
            if self.type != nil {
                map["type"] = self.type!
            }
            if self.userId != nil {
                map["userId"] = self.userId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["columns"] as? String {
                self.columns = value
            }
            if let value = dict["conditions"] as? String {
                self.conditions = value
            }
            if let value = dict["eventBeginTime"] as? Int64 {
                self.eventBeginTime = value
            }
            if let value = dict["eventCodes"] as? String {
                self.eventCodes = value
            }
            if let value = dict["eventEndTime"] as? Int64 {
                self.eventEndTime = value
            }
            if let value = dict["fileFormat"] as? String {
                self.fileFormat = value
            }
            if let value = dict["ossKey"] as? String {
                self.ossKey = value
            }
            if let value = dict["scope"] as? String {
                self.scope = value
            }
            if let value = dict["status"] as? String {
                self.status = value
            }
            if let value = dict["type"] as? String {
                self.type = value
            }
            if let value = dict["userId"] as? Int64 {
                self.userId = value
            }
        }
    }
    public var requestId: String?

    public var resultObject: CreateAnalysisExportTaskResponseBody.ResultObject?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.resultObject?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? [String: Any?] {
            var model = CreateAnalysisExportTaskResponseBody.ResultObject()
            model.fromMap(value)
            self.resultObject = model
        }
    }
}

public class CreateAnalysisExportTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateAnalysisExportTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateAnalysisExportTaskResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateAppKeyRequest : Tea.TeaModel {
    public var lang: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class CreateAppKeyResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var data: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.data != nil {
            map["data"] = self.data!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["data"] as? Bool {
            self.data = value
        }
    }
}

public class CreateAppKeyResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateAppKeyResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateAppKeyResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateCustVariableRequest : Tea.TeaModel {
    public var lang: String?

    public var condition: String?

    public var createType: String?

    public var description_: String?

    public var eventCodes: String?

    public var historyValueType: String?

    public var object: String?

    public var outputs: String?

    public var regId: String?

    public var subject: String?

    public var timeType: String?

    public var title: String?

    public var twCount: Int32?

    public var velocityFC: String?

    public var velocityTW: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.condition != nil {
            map["condition"] = self.condition!
        }
        if self.createType != nil {
            map["createType"] = self.createType!
        }
        if self.description_ != nil {
            map["description"] = self.description_!
        }
        if self.eventCodes != nil {
            map["eventCodes"] = self.eventCodes!
        }
        if self.historyValueType != nil {
            map["historyValueType"] = self.historyValueType!
        }
        if self.object != nil {
            map["object"] = self.object!
        }
        if self.outputs != nil {
            map["outputs"] = self.outputs!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.subject != nil {
            map["subject"] = self.subject!
        }
        if self.timeType != nil {
            map["timeType"] = self.timeType!
        }
        if self.title != nil {
            map["title"] = self.title!
        }
        if self.twCount != nil {
            map["twCount"] = self.twCount!
        }
        if self.velocityFC != nil {
            map["velocityFC"] = self.velocityFC!
        }
        if self.velocityTW != nil {
            map["velocityTW"] = self.velocityTW!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["condition"] as? String {
            self.condition = value
        }
        if let value = dict["createType"] as? String {
            self.createType = value
        }
        if let value = dict["description"] as? String {
            self.description_ = value
        }
        if let value = dict["eventCodes"] as? String {
            self.eventCodes = value
        }
        if let value = dict["historyValueType"] as? String {
            self.historyValueType = value
        }
        if let value = dict["object"] as? String {
            self.object = value
        }
        if let value = dict["outputs"] as? String {
            self.outputs = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["subject"] as? String {
            self.subject = value
        }
        if let value = dict["timeType"] as? String {
            self.timeType = value
        }
        if let value = dict["title"] as? String {
            self.title = value
        }
        if let value = dict["twCount"] as? Int32 {
            self.twCount = value
        }
        if let value = dict["velocityFC"] as? String {
            self.velocityFC = value
        }
        if let value = dict["velocityTW"] as? String {
            self.velocityTW = value
        }
    }
}

public class CreateCustVariableResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
    }
}

public class CreateCustVariableResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateCustVariableResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateCustVariableResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateDataSourceRequest : Tea.TeaModel {
    public var lang: String?

    public var description_: String?

    public var name: String?

    public var ossKey: String?

    public var regId: String?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.description_ != nil {
            map["description"] = self.description_!
        }
        if self.name != nil {
            map["name"] = self.name!
        }
        if self.ossKey != nil {
            map["ossKey"] = self.ossKey!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.type != nil {
            map["type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["description"] as? String {
            self.description_ = value
        }
        if let value = dict["name"] as? String {
            self.name = value
        }
        if let value = dict["ossKey"] as? String {
            self.ossKey = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["type"] as? String {
            self.type = value
        }
    }
}

public class CreateDataSourceResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
    }
}

public class CreateDataSourceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateDataSourceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateDataSourceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateEventRequest : Tea.TeaModel {
    public var lang: String?

    public var createType: String?

    public var eventName: String?

    public var inputFieldsStr: String?

    public var memo: String?

    public var regId: String?

    public var templateCode: String?

    public var templateName: String?

    public var templateType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.createType != nil {
            map["createType"] = self.createType!
        }
        if self.eventName != nil {
            map["eventName"] = self.eventName!
        }
        if self.inputFieldsStr != nil {
            map["inputFieldsStr"] = self.inputFieldsStr!
        }
        if self.memo != nil {
            map["memo"] = self.memo!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.templateCode != nil {
            map["templateCode"] = self.templateCode!
        }
        if self.templateName != nil {
            map["templateName"] = self.templateName!
        }
        if self.templateType != nil {
            map["templateType"] = self.templateType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["createType"] as? String {
            self.createType = value
        }
        if let value = dict["eventName"] as? String {
            self.eventName = value
        }
        if let value = dict["inputFieldsStr"] as? String {
            self.inputFieldsStr = value
        }
        if let value = dict["memo"] as? String {
            self.memo = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["templateCode"] as? String {
            self.templateCode = value
        }
        if let value = dict["templateName"] as? String {
            self.templateName = value
        }
        if let value = dict["templateType"] as? String {
            self.templateType = value
        }
    }
}

public class CreateEventResponseBody : Tea.TeaModel {
    public var data: Bool?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            map["data"] = self.data!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["data"] as? Bool {
            self.data = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateEventResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateEventResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateEventResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateExpressionVariableRequest : Tea.TeaModel {
    public var lang: String?

    public var description_: String?

    public var eventCode: String?

    public var expression: String?

    public var expressionTitle: String?

    public var expressionVariable: String?

    public var outlier: String?

    public var outputs: String?

    public var regId: String?

    public var title: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.description_ != nil {
            map["description"] = self.description_!
        }
        if self.eventCode != nil {
            map["eventCode"] = self.eventCode!
        }
        if self.expression != nil {
            map["expression"] = self.expression!
        }
        if self.expressionTitle != nil {
            map["expressionTitle"] = self.expressionTitle!
        }
        if self.expressionVariable != nil {
            map["expressionVariable"] = self.expressionVariable!
        }
        if self.outlier != nil {
            map["outlier"] = self.outlier!
        }
        if self.outputs != nil {
            map["outputs"] = self.outputs!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.title != nil {
            map["title"] = self.title!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["description"] as? String {
            self.description_ = value
        }
        if let value = dict["eventCode"] as? String {
            self.eventCode = value
        }
        if let value = dict["expression"] as? String {
            self.expression = value
        }
        if let value = dict["expressionTitle"] as? String {
            self.expressionTitle = value
        }
        if let value = dict["expressionVariable"] as? String {
            self.expressionVariable = value
        }
        if let value = dict["outlier"] as? String {
            self.outlier = value
        }
        if let value = dict["outputs"] as? String {
            self.outputs = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["title"] as? String {
            self.title = value
        }
    }
}

public class CreateExpressionVariableResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
    }
}

public class CreateExpressionVariableResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateExpressionVariableResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateExpressionVariableResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateFieldRequest : Tea.TeaModel {
    public var lang: String?

    public var classify: String?

    public var description_: String?

    public var enumData: String?

    public var name: String?

    public var regId: String?

    public var source: String?

    public var title: String?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.classify != nil {
            map["classify"] = self.classify!
        }
        if self.description_ != nil {
            map["description"] = self.description_!
        }
        if self.enumData != nil {
            map["enumData"] = self.enumData!
        }
        if self.name != nil {
            map["name"] = self.name!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.source != nil {
            map["source"] = self.source!
        }
        if self.title != nil {
            map["title"] = self.title!
        }
        if self.type != nil {
            map["type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["classify"] as? String {
            self.classify = value
        }
        if let value = dict["description"] as? String {
            self.description_ = value
        }
        if let value = dict["enumData"] as? String {
            self.enumData = value
        }
        if let value = dict["name"] as? String {
            self.name = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["source"] as? String {
            self.source = value
        }
        if let value = dict["title"] as? String {
            self.title = value
        }
        if let value = dict["type"] as? String {
            self.type = value
        }
    }
}

public class CreateFieldResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
    }
}

public class CreateFieldResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateFieldResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateFieldResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateModelRequest : Tea.TeaModel {
    public var bucId: String?

    public var counts: String?

    public var fileMD5: String?

    public var filePath: String?

    public var modelName: String?

    public var modelScene: String?

    public var parameterNum: String?

    public var regId: String?

    public var userLocalFileName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.bucId != nil {
            map["BucId"] = self.bucId!
        }
        if self.counts != nil {
            map["Counts"] = self.counts!
        }
        if self.fileMD5 != nil {
            map["FileMD5"] = self.fileMD5!
        }
        if self.filePath != nil {
            map["FilePath"] = self.filePath!
        }
        if self.modelName != nil {
            map["ModelName"] = self.modelName!
        }
        if self.modelScene != nil {
            map["ModelScene"] = self.modelScene!
        }
        if self.parameterNum != nil {
            map["ParameterNum"] = self.parameterNum!
        }
        if self.regId != nil {
            map["RegId"] = self.regId!
        }
        if self.userLocalFileName != nil {
            map["UserLocalFileName"] = self.userLocalFileName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BucId"] as? String {
            self.bucId = value
        }
        if let value = dict["Counts"] as? String {
            self.counts = value
        }
        if let value = dict["FileMD5"] as? String {
            self.fileMD5 = value
        }
        if let value = dict["FilePath"] as? String {
            self.filePath = value
        }
        if let value = dict["ModelName"] as? String {
            self.modelName = value
        }
        if let value = dict["ModelScene"] as? String {
            self.modelScene = value
        }
        if let value = dict["ParameterNum"] as? String {
            self.parameterNum = value
        }
        if let value = dict["RegId"] as? String {
            self.regId = value
        }
        if let value = dict["UserLocalFileName"] as? String {
            self.userLocalFileName = value
        }
    }
}

public class CreateModelResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["ResultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["ResultObject"] as? Bool {
            self.resultObject = value
        }
    }
}

public class CreateModelResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateModelResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateModelResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreatePocEvRequest : Tea.TeaModel {
    public var dateFormat: String?

    public var fileName: String?

    public var fileType: String?

    public var fileUrl: String?

    public var lang: String?

    public var regId: String?

    public var serviceCode: String?

    public var serviceName: String?

    public var tab: String?

    public var taskName: String?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dateFormat != nil {
            map["DateFormat"] = self.dateFormat!
        }
        if self.fileName != nil {
            map["FileName"] = self.fileName!
        }
        if self.fileType != nil {
            map["FileType"] = self.fileType!
        }
        if self.fileUrl != nil {
            map["FileUrl"] = self.fileUrl!
        }
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.regId != nil {
            map["RegId"] = self.regId!
        }
        if self.serviceCode != nil {
            map["ServiceCode"] = self.serviceCode!
        }
        if self.serviceName != nil {
            map["ServiceName"] = self.serviceName!
        }
        if self.tab != nil {
            map["Tab"] = self.tab!
        }
        if self.taskName != nil {
            map["TaskName"] = self.taskName!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DateFormat"] as? String {
            self.dateFormat = value
        }
        if let value = dict["FileName"] as? String {
            self.fileName = value
        }
        if let value = dict["FileType"] as? String {
            self.fileType = value
        }
        if let value = dict["FileUrl"] as? String {
            self.fileUrl = value
        }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["RegId"] as? String {
            self.regId = value
        }
        if let value = dict["ServiceCode"] as? String {
            self.serviceCode = value
        }
        if let value = dict["ServiceName"] as? String {
            self.serviceName = value
        }
        if let value = dict["Tab"] as? String {
            self.tab = value
        }
        if let value = dict["TaskName"] as? String {
            self.taskName = value
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
    }
}

public class CreatePocEvResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: String?

    public var message: String?

    public var requestId: String?

    public var resultObject: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["ResultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? String {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["ResultObject"] as? String {
            self.resultObject = value
        }
    }
}

public class CreatePocEvResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreatePocEvResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreatePocEvResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateQueryVariableRequest : Tea.TeaModel {
    public var lang: String?

    public var dataSourceCode: String?

    public var description_: String?

    public var eventCode: String?

    public var expression: String?

    public var expressionTitle: String?

    public var expressionVariable: String?

    public var outlier: String?

    public var outputs: String?

    public var regId: String?

    public var title: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.dataSourceCode != nil {
            map["dataSourceCode"] = self.dataSourceCode!
        }
        if self.description_ != nil {
            map["description"] = self.description_!
        }
        if self.eventCode != nil {
            map["eventCode"] = self.eventCode!
        }
        if self.expression != nil {
            map["expression"] = self.expression!
        }
        if self.expressionTitle != nil {
            map["expressionTitle"] = self.expressionTitle!
        }
        if self.expressionVariable != nil {
            map["expressionVariable"] = self.expressionVariable!
        }
        if self.outlier != nil {
            map["outlier"] = self.outlier!
        }
        if self.outputs != nil {
            map["outputs"] = self.outputs!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.title != nil {
            map["title"] = self.title!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["dataSourceCode"] as? String {
            self.dataSourceCode = value
        }
        if let value = dict["description"] as? String {
            self.description_ = value
        }
        if let value = dict["eventCode"] as? String {
            self.eventCode = value
        }
        if let value = dict["expression"] as? String {
            self.expression = value
        }
        if let value = dict["expressionTitle"] as? String {
            self.expressionTitle = value
        }
        if let value = dict["expressionVariable"] as? String {
            self.expressionVariable = value
        }
        if let value = dict["outlier"] as? String {
            self.outlier = value
        }
        if let value = dict["outputs"] as? String {
            self.outputs = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["title"] as? String {
            self.title = value
        }
    }
}

public class CreateQueryVariableResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
    }
}

public class CreateQueryVariableResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateQueryVariableResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateQueryVariableResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateRecommendEventRuleRequest : Tea.TeaModel {
    public var lang: String?

    public var eventCode: String?

    public var eventName: String?

    public var recommendRuleIdsStr: String?

    public var regId: String?

    public var taskId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.eventCode != nil {
            map["eventCode"] = self.eventCode!
        }
        if self.eventName != nil {
            map["eventName"] = self.eventName!
        }
        if self.recommendRuleIdsStr != nil {
            map["recommendRuleIdsStr"] = self.recommendRuleIdsStr!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.taskId != nil {
            map["taskId"] = self.taskId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["eventCode"] as? String {
            self.eventCode = value
        }
        if let value = dict["eventName"] as? String {
            self.eventName = value
        }
        if let value = dict["recommendRuleIdsStr"] as? String {
            self.recommendRuleIdsStr = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["taskId"] as? Int64 {
            self.taskId = value
        }
    }
}

public class CreateRecommendEventRuleResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
    }
}

public class CreateRecommendEventRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateRecommendEventRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateRecommendEventRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateRecommendTaskRequest : Tea.TeaModel {
    public var lang: String?

    public var name: String?

    public var regId: String?

    public var sampleId: Int64?

    public var variablesStr: String?

    public var velocitiesStr: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.name != nil {
            map["name"] = self.name!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.sampleId != nil {
            map["sampleId"] = self.sampleId!
        }
        if self.variablesStr != nil {
            map["variablesStr"] = self.variablesStr!
        }
        if self.velocitiesStr != nil {
            map["velocitiesStr"] = self.velocitiesStr!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["name"] as? String {
            self.name = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["sampleId"] as? Int64 {
            self.sampleId = value
        }
        if let value = dict["variablesStr"] as? String {
            self.variablesStr = value
        }
        if let value = dict["velocitiesStr"] as? String {
            self.velocitiesStr = value
        }
    }
}

public class CreateRecommendTaskResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
    }
}

public class CreateRecommendTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateRecommendTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateRecommendTaskResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateRuleRequest : Tea.TeaModel {
    public var lang: String?

    public var consoleRuleId: Int64?

    public var createType: String?

    public var eventCode: String?

    public var eventName: String?

    public var logicExpression: String?

    public var memo: String?

    public var regId: String?

    public var ruleActions: String?

    public var ruleBody: String?

    public var ruleExpressions: String?

    public var ruleName: String?

    public var ruleStatus: String?

    public var ruleType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.consoleRuleId != nil {
            map["consoleRuleId"] = self.consoleRuleId!
        }
        if self.createType != nil {
            map["createType"] = self.createType!
        }
        if self.eventCode != nil {
            map["eventCode"] = self.eventCode!
        }
        if self.eventName != nil {
            map["eventName"] = self.eventName!
        }
        if self.logicExpression != nil {
            map["logicExpression"] = self.logicExpression!
        }
        if self.memo != nil {
            map["memo"] = self.memo!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.ruleActions != nil {
            map["ruleActions"] = self.ruleActions!
        }
        if self.ruleBody != nil {
            map["ruleBody"] = self.ruleBody!
        }
        if self.ruleExpressions != nil {
            map["ruleExpressions"] = self.ruleExpressions!
        }
        if self.ruleName != nil {
            map["ruleName"] = self.ruleName!
        }
        if self.ruleStatus != nil {
            map["ruleStatus"] = self.ruleStatus!
        }
        if self.ruleType != nil {
            map["ruleType"] = self.ruleType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["consoleRuleId"] as? Int64 {
            self.consoleRuleId = value
        }
        if let value = dict["createType"] as? String {
            self.createType = value
        }
        if let value = dict["eventCode"] as? String {
            self.eventCode = value
        }
        if let value = dict["eventName"] as? String {
            self.eventName = value
        }
        if let value = dict["logicExpression"] as? String {
            self.logicExpression = value
        }
        if let value = dict["memo"] as? String {
            self.memo = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["ruleActions"] as? String {
            self.ruleActions = value
        }
        if let value = dict["ruleBody"] as? String {
            self.ruleBody = value
        }
        if let value = dict["ruleExpressions"] as? String {
            self.ruleExpressions = value
        }
        if let value = dict["ruleName"] as? String {
            self.ruleName = value
        }
        if let value = dict["ruleStatus"] as? String {
            self.ruleStatus = value
        }
        if let value = dict["ruleType"] as? String {
            self.ruleType = value
        }
    }
}

public class CreateRuleResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
    }
}

public class CreateRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateSampleRequest : Tea.TeaModel {
    public var lang: String?

    public var clientFileName: String?

    public var clientPath: String?

    public var fileType: String?

    public var regId: String?

    public var sampleTag: String?

    public var sampleType: String?

    public var sampleValues: String?

    public var uploadType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.clientFileName != nil {
            map["clientFileName"] = self.clientFileName!
        }
        if self.clientPath != nil {
            map["clientPath"] = self.clientPath!
        }
        if self.fileType != nil {
            map["fileType"] = self.fileType!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.sampleTag != nil {
            map["sampleTag"] = self.sampleTag!
        }
        if self.sampleType != nil {
            map["sampleType"] = self.sampleType!
        }
        if self.sampleValues != nil {
            map["sampleValues"] = self.sampleValues!
        }
        if self.uploadType != nil {
            map["uploadType"] = self.uploadType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["clientFileName"] as? String {
            self.clientFileName = value
        }
        if let value = dict["clientPath"] as? String {
            self.clientPath = value
        }
        if let value = dict["fileType"] as? String {
            self.fileType = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["sampleTag"] as? String {
            self.sampleTag = value
        }
        if let value = dict["sampleType"] as? String {
            self.sampleType = value
        }
        if let value = dict["sampleValues"] as? String {
            self.sampleValues = value
        }
        if let value = dict["uploadType"] as? String {
            self.uploadType = value
        }
    }
}

public class CreateSampleResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public var communityCount: Int32?

        public var failCount: Int32?

        public var recallProbability: String?

        public var riskDensity: String?

        public var sampleCount: Int32?

        public var successCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.communityCount != nil {
                map["communityCount"] = self.communityCount!
            }
            if self.failCount != nil {
                map["failCount"] = self.failCount!
            }
            if self.recallProbability != nil {
                map["recallProbability"] = self.recallProbability!
            }
            if self.riskDensity != nil {
                map["riskDensity"] = self.riskDensity!
            }
            if self.sampleCount != nil {
                map["sampleCount"] = self.sampleCount!
            }
            if self.successCount != nil {
                map["successCount"] = self.successCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["communityCount"] as? Int32 {
                self.communityCount = value
            }
            if let value = dict["failCount"] as? Int32 {
                self.failCount = value
            }
            if let value = dict["recallProbability"] as? String {
                self.recallProbability = value
            }
            if let value = dict["riskDensity"] as? String {
                self.riskDensity = value
            }
            if let value = dict["sampleCount"] as? Int32 {
                self.sampleCount = value
            }
            if let value = dict["successCount"] as? Int32 {
                self.successCount = value
            }
        }
    }
    public var requestId: String?

    public var resultObject: CreateSampleResponseBody.ResultObject?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.resultObject?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? [String: Any?] {
            var model = CreateSampleResponseBody.ResultObject()
            model.fromMap(value)
            self.resultObject = model
        }
    }
}

public class CreateSampleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateSampleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateSampleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateSampleApiRequest : Tea.TeaModel {
    public var dataType: String?

    public var dataValue: String?

    public var lang: String?

    public var regId: String?

    public var sampleBatchType: String?

    public var serviceList: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dataType != nil {
            map["DataType"] = self.dataType!
        }
        if self.dataValue != nil {
            map["DataValue"] = self.dataValue!
        }
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.regId != nil {
            map["RegId"] = self.regId!
        }
        if self.sampleBatchType != nil {
            map["SampleBatchType"] = self.sampleBatchType!
        }
        if self.serviceList != nil {
            map["ServiceList"] = self.serviceList!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DataType"] as? String {
            self.dataType = value
        }
        if let value = dict["DataValue"] as? String {
            self.dataValue = value
        }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["RegId"] as? String {
            self.regId = value
        }
        if let value = dict["SampleBatchType"] as? String {
            self.sampleBatchType = value
        }
        if let value = dict["ServiceList"] as? String {
            self.serviceList = value
        }
    }
}

public class CreateSampleApiResponseBody : Tea.TeaModel {
    public var code: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateSampleApiResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateSampleApiResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateSampleApiResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateSampleBatchRequest : Tea.TeaModel {
    public var lang: String?

    public var batchName: String?

    public var dataType: String?

    public var dataValue: String?

    public var description_: String?

    public var ossFileName: String?

    public var regId: String?

    public var sampleBatchType: String?

    public var serviceList: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.batchName != nil {
            map["batchName"] = self.batchName!
        }
        if self.dataType != nil {
            map["dataType"] = self.dataType!
        }
        if self.dataValue != nil {
            map["dataValue"] = self.dataValue!
        }
        if self.description_ != nil {
            map["description"] = self.description_!
        }
        if self.ossFileName != nil {
            map["ossFileName"] = self.ossFileName!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.sampleBatchType != nil {
            map["sampleBatchType"] = self.sampleBatchType!
        }
        if self.serviceList != nil {
            map["serviceList"] = self.serviceList!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["batchName"] as? String {
            self.batchName = value
        }
        if let value = dict["dataType"] as? String {
            self.dataType = value
        }
        if let value = dict["dataValue"] as? String {
            self.dataValue = value
        }
        if let value = dict["description"] as? String {
            self.description_ = value
        }
        if let value = dict["ossFileName"] as? String {
            self.ossFileName = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["sampleBatchType"] as? String {
            self.sampleBatchType = value
        }
        if let value = dict["serviceList"] as? String {
            self.serviceList = value
        }
    }
}

public class CreateSampleBatchResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateSampleBatchResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateSampleBatchResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateSampleBatchResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateSampleDataRequest : Tea.TeaModel {
    public var lang: String?

    public var description_: String?

    public var encryptType: String?

    public var name: String?

    public var regId: String?

    public var riskValue: String?

    public var scene: String?

    public var storePath: String?

    public var storeType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.description_ != nil {
            map["description"] = self.description_!
        }
        if self.encryptType != nil {
            map["encryptType"] = self.encryptType!
        }
        if self.name != nil {
            map["name"] = self.name!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.riskValue != nil {
            map["riskValue"] = self.riskValue!
        }
        if self.scene != nil {
            map["scene"] = self.scene!
        }
        if self.storePath != nil {
            map["storePath"] = self.storePath!
        }
        if self.storeType != nil {
            map["storeType"] = self.storeType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["description"] as? String {
            self.description_ = value
        }
        if let value = dict["encryptType"] as? String {
            self.encryptType = value
        }
        if let value = dict["name"] as? String {
            self.name = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["riskValue"] as? String {
            self.riskValue = value
        }
        if let value = dict["scene"] as? String {
            self.scene = value
        }
        if let value = dict["storePath"] as? String {
            self.storePath = value
        }
        if let value = dict["storeType"] as? String {
            self.storeType = value
        }
    }
}

public class CreateSampleDataResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
    }
}

public class CreateSampleDataResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateSampleDataResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateSampleDataResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateSimulationTaskRequest : Tea.TeaModel {
    public var lang: String?

    public var dataSourceConfig: String?

    public var dataSourceType: String?

    public var endTime: Int64?

    public var eventCode: String?

    public var filtersStr: String?

    public var regId: String?

    public var rulesStr: String?

    public var runTask: Bool?

    public var startTime: Int64?

    public var taskName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.dataSourceConfig != nil {
            map["dataSourceConfig"] = self.dataSourceConfig!
        }
        if self.dataSourceType != nil {
            map["dataSourceType"] = self.dataSourceType!
        }
        if self.endTime != nil {
            map["endTime"] = self.endTime!
        }
        if self.eventCode != nil {
            map["eventCode"] = self.eventCode!
        }
        if self.filtersStr != nil {
            map["filtersStr"] = self.filtersStr!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.rulesStr != nil {
            map["rulesStr"] = self.rulesStr!
        }
        if self.runTask != nil {
            map["runTask"] = self.runTask!
        }
        if self.startTime != nil {
            map["startTime"] = self.startTime!
        }
        if self.taskName != nil {
            map["taskName"] = self.taskName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["dataSourceConfig"] as? String {
            self.dataSourceConfig = value
        }
        if let value = dict["dataSourceType"] as? String {
            self.dataSourceType = value
        }
        if let value = dict["endTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["eventCode"] as? String {
            self.eventCode = value
        }
        if let value = dict["filtersStr"] as? String {
            self.filtersStr = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["rulesStr"] as? String {
            self.rulesStr = value
        }
        if let value = dict["runTask"] as? Bool {
            self.runTask = value
        }
        if let value = dict["startTime"] as? Int64 {
            self.startTime = value
        }
        if let value = dict["taskName"] as? String {
            self.taskName = value
        }
    }
}

public class CreateSimulationTaskResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
    }
}

public class CreateSimulationTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateSimulationTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateSimulationTaskResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeepCopyRuleRequest : Tea.TeaModel {
    public var createType: String?

    public var custInsertInfo: String?

    public var custWriteInfo: String?

    public var expressionVariableInfo: String?

    public var lang: String?

    public var queryExpressionVariableInfo: String?

    public var regId: String?

    public var sourceRuleId: String?

    public var sourceRuleIds: String?

    public var targetEventCode: String?

    public var targetEventName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.createType != nil {
            map["CreateType"] = self.createType!
        }
        if self.custInsertInfo != nil {
            map["CustInsertInfo"] = self.custInsertInfo!
        }
        if self.custWriteInfo != nil {
            map["CustWriteInfo"] = self.custWriteInfo!
        }
        if self.expressionVariableInfo != nil {
            map["ExpressionVariableInfo"] = self.expressionVariableInfo!
        }
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.queryExpressionVariableInfo != nil {
            map["QueryExpressionVariableInfo"] = self.queryExpressionVariableInfo!
        }
        if self.regId != nil {
            map["RegId"] = self.regId!
        }
        if self.sourceRuleId != nil {
            map["SourceRuleId"] = self.sourceRuleId!
        }
        if self.sourceRuleIds != nil {
            map["SourceRuleIds"] = self.sourceRuleIds!
        }
        if self.targetEventCode != nil {
            map["TargetEventCode"] = self.targetEventCode!
        }
        if self.targetEventName != nil {
            map["TargetEventName"] = self.targetEventName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CreateType"] as? String {
            self.createType = value
        }
        if let value = dict["CustInsertInfo"] as? String {
            self.custInsertInfo = value
        }
        if let value = dict["CustWriteInfo"] as? String {
            self.custWriteInfo = value
        }
        if let value = dict["ExpressionVariableInfo"] as? String {
            self.expressionVariableInfo = value
        }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["QueryExpressionVariableInfo"] as? String {
            self.queryExpressionVariableInfo = value
        }
        if let value = dict["RegId"] as? String {
            self.regId = value
        }
        if let value = dict["SourceRuleId"] as? String {
            self.sourceRuleId = value
        }
        if let value = dict["SourceRuleIds"] as? String {
            self.sourceRuleIds = value
        }
        if let value = dict["TargetEventCode"] as? String {
            self.targetEventCode = value
        }
        if let value = dict["TargetEventName"] as? String {
            self.targetEventName = value
        }
    }
}

public class DeepCopyRuleResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public var batchCopyFlag: Bool?

        public var consoleRuleId: Int64?

        public var ruleId: String?

        public var ruleVersionId: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.batchCopyFlag != nil {
                map["BatchCopyFlag"] = self.batchCopyFlag!
            }
            if self.consoleRuleId != nil {
                map["ConsoleRuleId"] = self.consoleRuleId!
            }
            if self.ruleId != nil {
                map["RuleId"] = self.ruleId!
            }
            if self.ruleVersionId != nil {
                map["RuleVersionId"] = self.ruleVersionId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["BatchCopyFlag"] as? Bool {
                self.batchCopyFlag = value
            }
            if let value = dict["ConsoleRuleId"] as? Int64 {
                self.consoleRuleId = value
            }
            if let value = dict["RuleId"] as? String {
                self.ruleId = value
            }
            if let value = dict["RuleVersionId"] as? Int64 {
                self.ruleVersionId = value
            }
        }
    }
    public var requestId: String?

    public var resultObject: DeepCopyRuleResponseBody.ResultObject?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.resultObject?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["ResultObject"] = self.resultObject?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["ResultObject"] as? [String: Any?] {
            var model = DeepCopyRuleResponseBody.ResultObject()
            model.fromMap(value)
            self.resultObject = model
        }
    }
}

public class DeepCopyRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeepCopyRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeepCopyRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteAnalysisConditionFavoriteRequest : Tea.TeaModel {
    public var lang: String?

    public var id: Int64?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.id != nil {
            map["id"] = self.id!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["id"] as? Int64 {
            self.id = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DeleteAnalysisConditionFavoriteResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
    }
}

public class DeleteAnalysisConditionFavoriteResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteAnalysisConditionFavoriteResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteAnalysisConditionFavoriteResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteByPassShuntEventRequest : Tea.TeaModel {
    public var lang: String?

    public var eventId: Int64?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.eventId != nil {
            map["eventId"] = self.eventId!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["eventId"] as? Int64 {
            self.eventId = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DeleteByPassShuntEventResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: String?

    public var message: String?

    public var requestId: String?

    public var resultObject: Bool?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["httpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["httpStatusCode"] as? String {
            self.httpStatusCode = value
        }
        if let value = dict["message"] as? String {
            self.message = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
        if let value = dict["success"] as? Bool {
            self.success = value
        }
    }
}

public class DeleteByPassShuntEventResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteByPassShuntEventResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteByPassShuntEventResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteCustVariableRequest : Tea.TeaModel {
    public var lang: String?

    public var createType: String?

    public var dataVersion: Int64?

    public var regId: String?

    public var variableId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.createType != nil {
            map["createType"] = self.createType!
        }
        if self.dataVersion != nil {
            map["dataVersion"] = self.dataVersion!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.variableId != nil {
            map["variableId"] = self.variableId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["createType"] as? String {
            self.createType = value
        }
        if let value = dict["dataVersion"] as? Int64 {
            self.dataVersion = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["variableId"] as? String {
            self.variableId = value
        }
    }
}

public class DeleteCustVariableResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
    }
}

public class DeleteCustVariableResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteCustVariableResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteCustVariableResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteDataSourceRequest : Tea.TeaModel {
    public var lang: String?

    public var id: Int64?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.id != nil {
            map["id"] = self.id!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["id"] as? Int64 {
            self.id = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DeleteDataSourceResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
    }
}

public class DeleteDataSourceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteDataSourceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteDataSourceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteEventFieldRequest : Tea.TeaModel {
    public var lang: String?

    public var eventCode: String?

    public var fieldName: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.eventCode != nil {
            map["eventCode"] = self.eventCode!
        }
        if self.fieldName != nil {
            map["fieldName"] = self.fieldName!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["eventCode"] as? String {
            self.eventCode = value
        }
        if let value = dict["fieldName"] as? String {
            self.fieldName = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DeleteEventFieldResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resuleObject: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resuleObject != nil {
            map["resuleObject"] = self.resuleObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resuleObject"] as? Bool {
            self.resuleObject = value
        }
    }
}

public class DeleteEventFieldResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteEventFieldResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteEventFieldResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteExpressionVariableRequest : Tea.TeaModel {
    public var lang: String?

    public var dataVersion: Int64?

    public var id: Int64?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.dataVersion != nil {
            map["dataVersion"] = self.dataVersion!
        }
        if self.id != nil {
            map["id"] = self.id!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["dataVersion"] as? Int64 {
            self.dataVersion = value
        }
        if let value = dict["id"] as? Int64 {
            self.id = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DeleteExpressionVariableResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
    }
}

public class DeleteExpressionVariableResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteExpressionVariableResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteExpressionVariableResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteFieldRequest : Tea.TeaModel {
    public var lang: String?

    public var id: Int64?

    public var name: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.id != nil {
            map["id"] = self.id!
        }
        if self.name != nil {
            map["name"] = self.name!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["id"] as? Int64 {
            self.id = value
        }
        if let value = dict["name"] as? String {
            self.name = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DeleteFieldResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
    }
}

public class DeleteFieldResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteFieldResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteFieldResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteNameListRequest : Tea.TeaModel {
    public var lang: String?

    public var ids: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.ids != nil {
            map["ids"] = self.ids!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["ids"] as? String {
            self.ids = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DeleteNameListResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
    }
}

public class DeleteNameListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteNameListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteNameListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteNameListDataRequest : Tea.TeaModel {
    public var lang: String?

    public var regId: String?

    public var variableId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.variableId != nil {
            map["variableId"] = self.variableId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["variableId"] as? String {
            self.variableId = value
        }
    }
}

public class DeleteNameListDataResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
    }
}

public class DeleteNameListDataResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteNameListDataResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteNameListDataResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteQueryVariableRequest : Tea.TeaModel {
    public var lang: String?

    public var id: Int64?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.id != nil {
            map["id"] = self.id!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["id"] as? Int64 {
            self.id = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DeleteQueryVariableResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
    }
}

public class DeleteQueryVariableResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteQueryVariableResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteQueryVariableResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteRuleRequest : Tea.TeaModel {
    public var lang: String?

    public var consoleRuleId: Int64?

    public var regId: String?

    public var ruleId: String?

    public var ruleVersionId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.consoleRuleId != nil {
            map["consoleRuleId"] = self.consoleRuleId!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.ruleId != nil {
            map["ruleId"] = self.ruleId!
        }
        if self.ruleVersionId != nil {
            map["ruleVersionId"] = self.ruleVersionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["consoleRuleId"] as? Int64 {
            self.consoleRuleId = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["ruleId"] as? String {
            self.ruleId = value
        }
        if let value = dict["ruleVersionId"] as? Int64 {
            self.ruleVersionId = value
        }
    }
}

public class DeleteRuleResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
    }
}

public class DeleteRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteSampleBatchRequest : Tea.TeaModel {
    public var lang: String?

    public var ids: String?

    public var regId: String?

    public var versions: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.ids != nil {
            map["ids"] = self.ids!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.versions != nil {
            map["versions"] = self.versions!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["ids"] as? String {
            self.ids = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["versions"] as? String {
            self.versions = value
        }
    }
}

public class DeleteSampleBatchResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var data: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.data != nil {
            map["data"] = self.data!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["data"] as? Bool {
            self.data = value
        }
    }
}

public class DeleteSampleBatchResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteSampleBatchResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteSampleBatchResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteSampleBatchMetaRequest : Tea.TeaModel {
    public var lang: String?

    public var batchUuid: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.batchUuid != nil {
            map["batchUuid"] = self.batchUuid!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["batchUuid"] as? String {
            self.batchUuid = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DeleteSampleBatchMetaResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteSampleBatchMetaResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteSampleBatchMetaResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteSampleBatchMetaResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteSampleDataRequest : Tea.TeaModel {
    public var lang: String?

    public var id: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.id != nil {
            map["id"] = self.id!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["id"] as? String {
            self.id = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DeleteSampleDataResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
    }
}

public class DeleteSampleDataResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteSampleDataResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteSampleDataResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteSelfBindVariableRequest : Tea.TeaModel {
    public var lang: String?

    public var id: Int64?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.id != nil {
            map["id"] = self.id!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["id"] as? Int64 {
            self.id = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DeleteSelfBindVariableResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
    }
}

public class DeleteSelfBindVariableResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteSelfBindVariableResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteSelfBindVariableResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeAdvanceSearchLeftVariableListRequest : Tea.TeaModel {
    public var lang: String?

    public var eventCodes: String?

    public var regId: String?

    public var scene: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.eventCodes != nil {
            map["eventCodes"] = self.eventCodes!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.scene != nil {
            map["scene"] = self.scene!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["eventCodes"] as? String {
            self.eventCodes = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["scene"] as? String {
            self.scene = value
        }
    }
}

public class DescribeAdvanceSearchLeftVariableListResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public var code: String?

        public var description_: String?

        public var displayType: String?

        public var fieldRank: Int64?

        public var fieldType: String?

        public var id: Int64?

        public var name: String?

        public var parentName: String?

        public var sourceType: String?

        public var title: String?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.code != nil {
                map["code"] = self.code!
            }
            if self.description_ != nil {
                map["description"] = self.description_!
            }
            if self.displayType != nil {
                map["displayType"] = self.displayType!
            }
            if self.fieldRank != nil {
                map["fieldRank"] = self.fieldRank!
            }
            if self.fieldType != nil {
                map["fieldType"] = self.fieldType!
            }
            if self.id != nil {
                map["id"] = self.id!
            }
            if self.name != nil {
                map["name"] = self.name!
            }
            if self.parentName != nil {
                map["parentName"] = self.parentName!
            }
            if self.sourceType != nil {
                map["sourceType"] = self.sourceType!
            }
            if self.title != nil {
                map["title"] = self.title!
            }
            if self.type != nil {
                map["type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["code"] as? String {
                self.code = value
            }
            if let value = dict["description"] as? String {
                self.description_ = value
            }
            if let value = dict["displayType"] as? String {
                self.displayType = value
            }
            if let value = dict["fieldRank"] as? Int64 {
                self.fieldRank = value
            }
            if let value = dict["fieldType"] as? String {
                self.fieldType = value
            }
            if let value = dict["id"] as? Int64 {
                self.id = value
            }
            if let value = dict["name"] as? String {
                self.name = value
            }
            if let value = dict["parentName"] as? String {
                self.parentName = value
            }
            if let value = dict["sourceType"] as? String {
                self.sourceType = value
            }
            if let value = dict["title"] as? String {
                self.title = value
            }
            if let value = dict["type"] as? String {
                self.type = value
            }
        }
    }
    public var requestId: String?

    public var resultObject: [DescribeAdvanceSearchLeftVariableListResponseBody.ResultObject]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.resultObject != nil {
            var tmp : [Any] = []
            for k in self.resultObject! {
                tmp.append(k.toMap())
            }
            map["resultObject"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? [Any?] {
            var tmp : [DescribeAdvanceSearchLeftVariableListResponseBody.ResultObject] = []
            for v in value {
                if v != nil {
                    var model = DescribeAdvanceSearchLeftVariableListResponseBody.ResultObject()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.resultObject = tmp
        }
    }
}

public class DescribeAdvanceSearchLeftVariableListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeAdvanceSearchLeftVariableListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeAdvanceSearchLeftVariableListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeAdvanceSearchPageListRequest : Tea.TeaModel {
    public var lang: String?

    public var condition: String?

    public var currentPage: Int64?

    public var eventBeginTime: Int64?

    public var eventCodes: String?

    public var eventEndTime: Int64?

    public var fieldName: String?

    public var fieldValue: String?

    public var pageSize: Int64?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.condition != nil {
            map["condition"] = self.condition!
        }
        if self.currentPage != nil {
            map["currentPage"] = self.currentPage!
        }
        if self.eventBeginTime != nil {
            map["eventBeginTime"] = self.eventBeginTime!
        }
        if self.eventCodes != nil {
            map["eventCodes"] = self.eventCodes!
        }
        if self.eventEndTime != nil {
            map["eventEndTime"] = self.eventEndTime!
        }
        if self.fieldName != nil {
            map["fieldName"] = self.fieldName!
        }
        if self.fieldValue != nil {
            map["fieldValue"] = self.fieldValue!
        }
        if self.pageSize != nil {
            map["pageSize"] = self.pageSize!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["condition"] as? String {
            self.condition = value
        }
        if let value = dict["currentPage"] as? Int64 {
            self.currentPage = value
        }
        if let value = dict["eventBeginTime"] as? Int64 {
            self.eventBeginTime = value
        }
        if let value = dict["eventCodes"] as? String {
            self.eventCodes = value
        }
        if let value = dict["eventEndTime"] as? Int64 {
            self.eventEndTime = value
        }
        if let value = dict["fieldName"] as? String {
            self.fieldName = value
        }
        if let value = dict["fieldValue"] as? String {
            self.fieldValue = value
        }
        if let value = dict["pageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeAdvanceSearchPageListResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public class Header : Tea.TeaModel {
            public var fieldName: String?

            public var fieldTitle: String?

            public var isDefault: Bool?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.fieldName != nil {
                    map["fieldName"] = self.fieldName!
                }
                if self.fieldTitle != nil {
                    map["fieldTitle"] = self.fieldTitle!
                }
                if self.isDefault != nil {
                    map["isDefault"] = self.isDefault!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["fieldName"] as? String {
                    self.fieldName = value
                }
                if let value = dict["fieldTitle"] as? String {
                    self.fieldTitle = value
                }
                if let value = dict["isDefault"] as? Bool {
                    self.isDefault = value
                }
            }
        }
        public var currentPage: Int64?

        public var data: [[String: Any]]?

        public var header: [DescribeAdvanceSearchPageListResponseBody.ResultObject.Header]?

        public var pageSize: Int64?

        public var totalItem: Int64?

        public var totalPage: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.currentPage != nil {
                map["currentPage"] = self.currentPage!
            }
            if self.data != nil {
                map["data"] = self.data!
            }
            if self.header != nil {
                var tmp : [Any] = []
                for k in self.header! {
                    tmp.append(k.toMap())
                }
                map["header"] = tmp
            }
            if self.pageSize != nil {
                map["pageSize"] = self.pageSize!
            }
            if self.totalItem != nil {
                map["totalItem"] = self.totalItem!
            }
            if self.totalPage != nil {
                map["totalPage"] = self.totalPage!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["currentPage"] as? Int64 {
                self.currentPage = value
            }
            if let value = dict["data"] as? [[String: Any]] {
                self.data = value
            }
            if let value = dict["header"] as? [Any?] {
                var tmp : [DescribeAdvanceSearchPageListResponseBody.ResultObject.Header] = []
                for v in value {
                    if v != nil {
                        var model = DescribeAdvanceSearchPageListResponseBody.ResultObject.Header()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.header = tmp
            }
            if let value = dict["pageSize"] as? Int64 {
                self.pageSize = value
            }
            if let value = dict["totalItem"] as? Int64 {
                self.totalItem = value
            }
            if let value = dict["totalPage"] as? Int64 {
                self.totalPage = value
            }
        }
    }
    public var requestId: String?

    public var resultObject: DescribeAdvanceSearchPageListResponseBody.ResultObject?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.resultObject?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? [String: Any?] {
            var model = DescribeAdvanceSearchPageListResponseBody.ResultObject()
            model.fromMap(value)
            self.resultObject = model
        }
    }
}

public class DescribeAdvanceSearchPageListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeAdvanceSearchPageListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeAdvanceSearchPageListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeAllDataSourceRequest : Tea.TeaModel {
    public var lang: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeAllDataSourceResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public var eventCode: String?

        public var eventName: String?

        public var id: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.eventCode != nil {
                map["eventCode"] = self.eventCode!
            }
            if self.eventName != nil {
                map["eventName"] = self.eventName!
            }
            if self.id != nil {
                map["id"] = self.id!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["eventCode"] as? String {
                self.eventCode = value
            }
            if let value = dict["eventName"] as? String {
                self.eventName = value
            }
            if let value = dict["id"] as? Int64 {
                self.id = value
            }
        }
    }
    public var requestId: String?

    public var resultObject: [DescribeAllDataSourceResponseBody.ResultObject]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            var tmp : [Any] = []
            for k in self.resultObject! {
                tmp.append(k.toMap())
            }
            map["resultObject"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? [Any?] {
            var tmp : [DescribeAllDataSourceResponseBody.ResultObject] = []
            for v in value {
                if v != nil {
                    var model = DescribeAllDataSourceResponseBody.ResultObject()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.resultObject = tmp
        }
    }
}

public class DescribeAllDataSourceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeAllDataSourceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeAllDataSourceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeAllEventNameAndCodeRequest : Tea.TeaModel {
    public var lang: String?

    public var createType: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.createType != nil {
            map["createType"] = self.createType!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["createType"] as? String {
            self.createType = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeAllEventNameAndCodeResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public class Children : Tea.TeaModel {
            public var createType: String?

            public var eventCode: String?

            public var eventName: String?

            public var eventType: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.createType != nil {
                    map["createType"] = self.createType!
                }
                if self.eventCode != nil {
                    map["eventCode"] = self.eventCode!
                }
                if self.eventName != nil {
                    map["eventName"] = self.eventName!
                }
                if self.eventType != nil {
                    map["eventType"] = self.eventType!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["createType"] as? String {
                    self.createType = value
                }
                if let value = dict["eventCode"] as? String {
                    self.eventCode = value
                }
                if let value = dict["eventName"] as? String {
                    self.eventName = value
                }
                if let value = dict["eventType"] as? String {
                    self.eventType = value
                }
            }
        }
        public var children: [DescribeAllEventNameAndCodeResponseBody.ResultObject.Children]?

        public var createType: String?

        public var eventCode: String?

        public var eventName: String?

        public var eventType: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.children != nil {
                var tmp : [Any] = []
                for k in self.children! {
                    tmp.append(k.toMap())
                }
                map["children"] = tmp
            }
            if self.createType != nil {
                map["createType"] = self.createType!
            }
            if self.eventCode != nil {
                map["eventCode"] = self.eventCode!
            }
            if self.eventName != nil {
                map["eventName"] = self.eventName!
            }
            if self.eventType != nil {
                map["eventType"] = self.eventType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["children"] as? [Any?] {
                var tmp : [DescribeAllEventNameAndCodeResponseBody.ResultObject.Children] = []
                for v in value {
                    if v != nil {
                        var model = DescribeAllEventNameAndCodeResponseBody.ResultObject.Children()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.children = tmp
            }
            if let value = dict["createType"] as? String {
                self.createType = value
            }
            if let value = dict["eventCode"] as? String {
                self.eventCode = value
            }
            if let value = dict["eventName"] as? String {
                self.eventName = value
            }
            if let value = dict["eventType"] as? String {
                self.eventType = value
            }
        }
    }
    public var code: String?

    public var httpStatusCode: String?

    public var message: String?

    public var requestId: String?

    public var resultObject: [DescribeAllEventNameAndCodeResponseBody.ResultObject]?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["httpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.resultObject != nil {
            var tmp : [Any] = []
            for k in self.resultObject! {
                tmp.append(k.toMap())
            }
            map["resultObject"] = tmp
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["httpStatusCode"] as? String {
            self.httpStatusCode = value
        }
        if let value = dict["message"] as? String {
            self.message = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? [Any?] {
            var tmp : [DescribeAllEventNameAndCodeResponseBody.ResultObject] = []
            for v in value {
                if v != nil {
                    var model = DescribeAllEventNameAndCodeResponseBody.ResultObject()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.resultObject = tmp
        }
        if let value = dict["success"] as? Bool {
            self.success = value
        }
    }
}

public class DescribeAllEventNameAndCodeResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeAllEventNameAndCodeResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeAllEventNameAndCodeResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeAllRootVariableRequest : Tea.TeaModel {
    public var lang: String?

    public var sourceIp: String?

    public var deviceVariableIds: String?

    public var eventCode: String?

    public var expressionVariableIds: String?

    public var id: Int64?

    public var nativeVariableIds: String?

    public var queryVariableIds: String?

    public var regId: String?

    public var velocityVariableIds: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.sourceIp != nil {
            map["SourceIp"] = self.sourceIp!
        }
        if self.deviceVariableIds != nil {
            map["deviceVariableIds"] = self.deviceVariableIds!
        }
        if self.eventCode != nil {
            map["eventCode"] = self.eventCode!
        }
        if self.expressionVariableIds != nil {
            map["expressionVariableIds"] = self.expressionVariableIds!
        }
        if self.id != nil {
            map["id"] = self.id!
        }
        if self.nativeVariableIds != nil {
            map["nativeVariableIds"] = self.nativeVariableIds!
        }
        if self.queryVariableIds != nil {
            map["queryVariableIds"] = self.queryVariableIds!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.velocityVariableIds != nil {
            map["velocityVariableIds"] = self.velocityVariableIds!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["SourceIp"] as? String {
            self.sourceIp = value
        }
        if let value = dict["deviceVariableIds"] as? String {
            self.deviceVariableIds = value
        }
        if let value = dict["eventCode"] as? String {
            self.eventCode = value
        }
        if let value = dict["expressionVariableIds"] as? String {
            self.expressionVariableIds = value
        }
        if let value = dict["id"] as? Int64 {
            self.id = value
        }
        if let value = dict["nativeVariableIds"] as? String {
            self.nativeVariableIds = value
        }
        if let value = dict["queryVariableIds"] as? String {
            self.queryVariableIds = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["velocityVariableIds"] as? String {
            self.velocityVariableIds = value
        }
    }
}

public class DescribeAllRootVariableResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public class OutputThreshold : Tea.TeaModel {
            public var maxValue: Double?

            public var minValue: Double?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.maxValue != nil {
                    map["maxValue"] = self.maxValue!
                }
                if self.minValue != nil {
                    map["minValue"] = self.minValue!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["maxValue"] as? Double {
                    self.maxValue = value
                }
                if let value = dict["minValue"] as? Double {
                    self.minValue = value
                }
            }
        }
        public var code: String?

        public var description_: String?

        public var displayType: String?

        public var favoriteFlag: Bool?

        public var fieldRank: Int64?

        public var fieldType: String?

        public var id: Int64?

        public var inputFieldType: String?

        public var inputs: String?

        public var name: String?

        public var outputThreshold: DescribeAllRootVariableResponseBody.ResultObject.OutputThreshold?

        public var sourceType: String?

        public var title: String?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.outputThreshold?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.code != nil {
                map["code"] = self.code!
            }
            if self.description_ != nil {
                map["description"] = self.description_!
            }
            if self.displayType != nil {
                map["displayType"] = self.displayType!
            }
            if self.favoriteFlag != nil {
                map["favoriteFlag"] = self.favoriteFlag!
            }
            if self.fieldRank != nil {
                map["fieldRank"] = self.fieldRank!
            }
            if self.fieldType != nil {
                map["fieldType"] = self.fieldType!
            }
            if self.id != nil {
                map["id"] = self.id!
            }
            if self.inputFieldType != nil {
                map["inputFieldType"] = self.inputFieldType!
            }
            if self.inputs != nil {
                map["inputs"] = self.inputs!
            }
            if self.name != nil {
                map["name"] = self.name!
            }
            if self.outputThreshold != nil {
                map["outputThreshold"] = self.outputThreshold?.toMap()
            }
            if self.sourceType != nil {
                map["sourceType"] = self.sourceType!
            }
            if self.title != nil {
                map["title"] = self.title!
            }
            if self.type != nil {
                map["type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["code"] as? String {
                self.code = value
            }
            if let value = dict["description"] as? String {
                self.description_ = value
            }
            if let value = dict["displayType"] as? String {
                self.displayType = value
            }
            if let value = dict["favoriteFlag"] as? Bool {
                self.favoriteFlag = value
            }
            if let value = dict["fieldRank"] as? Int64 {
                self.fieldRank = value
            }
            if let value = dict["fieldType"] as? String {
                self.fieldType = value
            }
            if let value = dict["id"] as? Int64 {
                self.id = value
            }
            if let value = dict["inputFieldType"] as? String {
                self.inputFieldType = value
            }
            if let value = dict["inputs"] as? String {
                self.inputs = value
            }
            if let value = dict["name"] as? String {
                self.name = value
            }
            if let value = dict["outputThreshold"] as? [String: Any?] {
                var model = DescribeAllRootVariableResponseBody.ResultObject.OutputThreshold()
                model.fromMap(value)
                self.outputThreshold = model
            }
            if let value = dict["sourceType"] as? String {
                self.sourceType = value
            }
            if let value = dict["title"] as? String {
                self.title = value
            }
            if let value = dict["type"] as? String {
                self.type = value
            }
        }
    }
    public var requestId: String?

    public var resultObject: [DescribeAllRootVariableResponseBody.ResultObject]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            var tmp : [Any] = []
            for k in self.resultObject! {
                tmp.append(k.toMap())
            }
            map["resultObject"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? [Any?] {
            var tmp : [DescribeAllRootVariableResponseBody.ResultObject] = []
            for v in value {
                if v != nil {
                    var model = DescribeAllRootVariableResponseBody.ResultObject()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.resultObject = tmp
        }
    }
}

public class DescribeAllRootVariableResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeAllRootVariableResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeAllRootVariableResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeAnalysisColumnFieldListRequest : Tea.TeaModel {
    public var lang: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeAnalysisColumnFieldListResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
    }
}

public class DescribeAnalysisColumnFieldListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeAnalysisColumnFieldListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeAnalysisColumnFieldListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeAnalysisColumnListRequest : Tea.TeaModel {
    public var lang: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeAnalysisColumnListResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public var eventCode: String?

        public var eventName: String?

        public var isDefault: Bool?

        public var variableName: String?

        public var variableTitle: String?

        public var variableType: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.eventCode != nil {
                map["eventCode"] = self.eventCode!
            }
            if self.eventName != nil {
                map["eventName"] = self.eventName!
            }
            if self.isDefault != nil {
                map["isDefault"] = self.isDefault!
            }
            if self.variableName != nil {
                map["variableName"] = self.variableName!
            }
            if self.variableTitle != nil {
                map["variableTitle"] = self.variableTitle!
            }
            if self.variableType != nil {
                map["variableType"] = self.variableType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["eventCode"] as? String {
                self.eventCode = value
            }
            if let value = dict["eventName"] as? String {
                self.eventName = value
            }
            if let value = dict["isDefault"] as? Bool {
                self.isDefault = value
            }
            if let value = dict["variableName"] as? String {
                self.variableName = value
            }
            if let value = dict["variableTitle"] as? String {
                self.variableTitle = value
            }
            if let value = dict["variableType"] as? String {
                self.variableType = value
            }
        }
    }
    public var requestId: String?

    public var resultObject: [DescribeAnalysisColumnListResponseBody.ResultObject]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            var tmp : [Any] = []
            for k in self.resultObject! {
                tmp.append(k.toMap())
            }
            map["resultObject"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? [Any?] {
            var tmp : [DescribeAnalysisColumnListResponseBody.ResultObject] = []
            for v in value {
                if v != nil {
                    var model = DescribeAnalysisColumnListResponseBody.ResultObject()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.resultObject = tmp
        }
    }
}

public class DescribeAnalysisColumnListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeAnalysisColumnListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeAnalysisColumnListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeAnalysisConditionFavoriteListRequest : Tea.TeaModel {
    public var lang: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeAnalysisConditionFavoriteListResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public var condition: String?

        public var eventBeginTime: Int64?

        public var eventCodes: String?

        public var eventEndTime: Int64?

        public var fieldName: String?

        public var fieldValue: String?

        public var id: Int64?

        public var name: String?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.condition != nil {
                map["condition"] = self.condition!
            }
            if self.eventBeginTime != nil {
                map["eventBeginTime"] = self.eventBeginTime!
            }
            if self.eventCodes != nil {
                map["eventCodes"] = self.eventCodes!
            }
            if self.eventEndTime != nil {
                map["eventEndTime"] = self.eventEndTime!
            }
            if self.fieldName != nil {
                map["fieldName"] = self.fieldName!
            }
            if self.fieldValue != nil {
                map["fieldValue"] = self.fieldValue!
            }
            if self.id != nil {
                map["id"] = self.id!
            }
            if self.name != nil {
                map["name"] = self.name!
            }
            if self.type != nil {
                map["type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["condition"] as? String {
                self.condition = value
            }
            if let value = dict["eventBeginTime"] as? Int64 {
                self.eventBeginTime = value
            }
            if let value = dict["eventCodes"] as? String {
                self.eventCodes = value
            }
            if let value = dict["eventEndTime"] as? Int64 {
                self.eventEndTime = value
            }
            if let value = dict["fieldName"] as? String {
                self.fieldName = value
            }
            if let value = dict["fieldValue"] as? String {
                self.fieldValue = value
            }
            if let value = dict["id"] as? Int64 {
                self.id = value
            }
            if let value = dict["name"] as? String {
                self.name = value
            }
            if let value = dict["type"] as? String {
                self.type = value
            }
        }
    }
    public var requestId: String?

    public var resultObject: [DescribeAnalysisConditionFavoriteListResponseBody.ResultObject]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            var tmp : [Any] = []
            for k in self.resultObject! {
                tmp.append(k.toMap())
            }
            map["resultObject"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? [Any?] {
            var tmp : [DescribeAnalysisConditionFavoriteListResponseBody.ResultObject] = []
            for v in value {
                if v != nil {
                    var model = DescribeAnalysisConditionFavoriteListResponseBody.ResultObject()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.resultObject = tmp
        }
    }
}

public class DescribeAnalysisConditionFavoriteListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeAnalysisConditionFavoriteListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeAnalysisConditionFavoriteListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeAnalysisExportTaskDownloadUrlRequest : Tea.TeaModel {
    public var lang: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeAnalysisExportTaskDownloadUrlResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public var downloadFileUrl: String?

        public var executeTime: Int64?

        public var status: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.downloadFileUrl != nil {
                map["downloadFileUrl"] = self.downloadFileUrl!
            }
            if self.executeTime != nil {
                map["executeTime"] = self.executeTime!
            }
            if self.status != nil {
                map["status"] = self.status!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["downloadFileUrl"] as? String {
                self.downloadFileUrl = value
            }
            if let value = dict["executeTime"] as? Int64 {
                self.executeTime = value
            }
            if let value = dict["status"] as? String {
                self.status = value
            }
        }
    }
    public var requestId: String?

    public var resultObject: DescribeAnalysisExportTaskDownloadUrlResponseBody.ResultObject?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.resultObject?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? [String: Any?] {
            var model = DescribeAnalysisExportTaskDownloadUrlResponseBody.ResultObject()
            model.fromMap(value)
            self.resultObject = model
        }
    }
}

public class DescribeAnalysisExportTaskDownloadUrlResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeAnalysisExportTaskDownloadUrlResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeAnalysisExportTaskDownloadUrlResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeApiRequest : Tea.TeaModel {
    public var lang: String?

    public var apiId: String?

    public var apiRegionId: String?

    public var apiType: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.apiId != nil {
            map["apiId"] = self.apiId!
        }
        if self.apiRegionId != nil {
            map["apiRegionId"] = self.apiRegionId!
        }
        if self.apiType != nil {
            map["apiType"] = self.apiType!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["apiId"] as? String {
            self.apiId = value
        }
        if let value = dict["apiRegionId"] as? String {
            self.apiRegionId = value
        }
        if let value = dict["apiType"] as? String {
            self.apiType = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeApiResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
    }
}

public class DescribeApiResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeApiResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeApiResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeApiGroupsRequest : Tea.TeaModel {
    public var lang: String?

    public var apiRegionId: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.apiRegionId != nil {
            map["apiRegionId"] = self.apiRegionId!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["apiRegionId"] as? String {
            self.apiRegionId = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeApiGroupsResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
    }
}

public class DescribeApiGroupsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeApiGroupsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeApiGroupsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeApiLimitRequest : Tea.TeaModel {
    public var lang: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeApiLimitResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public var limit: Bool?

        public var maxTotalItem: Int64?

        public var totalItem: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.limit != nil {
                map["limit"] = self.limit!
            }
            if self.maxTotalItem != nil {
                map["maxTotalItem"] = self.maxTotalItem!
            }
            if self.totalItem != nil {
                map["totalItem"] = self.totalItem!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["limit"] as? Bool {
                self.limit = value
            }
            if let value = dict["maxTotalItem"] as? Int64 {
                self.maxTotalItem = value
            }
            if let value = dict["totalItem"] as? Int64 {
                self.totalItem = value
            }
        }
    }
    public var requestId: String?

    public var resultObject: DescribeApiLimitResponseBody.ResultObject?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.resultObject?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? [String: Any?] {
            var model = DescribeApiLimitResponseBody.ResultObject()
            model.fromMap(value)
            self.resultObject = model
        }
    }
}

public class DescribeApiLimitResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeApiLimitResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeApiLimitResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeApiNameListRequest : Tea.TeaModel {
    public var lang: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeApiNameListResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public var apiId: String?

        public var apiName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.apiId != nil {
                map["apiId"] = self.apiId!
            }
            if self.apiName != nil {
                map["apiName"] = self.apiName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["apiId"] as? String {
                self.apiId = value
            }
            if let value = dict["apiName"] as? String {
                self.apiName = value
            }
        }
    }
    public var requestId: String?

    public var resultObject: [DescribeApiNameListResponseBody.ResultObject]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            var tmp : [Any] = []
            for k in self.resultObject! {
                tmp.append(k.toMap())
            }
            map["resultObject"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? [Any?] {
            var tmp : [DescribeApiNameListResponseBody.ResultObject] = []
            for v in value {
                if v != nil {
                    var model = DescribeApiNameListResponseBody.ResultObject()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.resultObject = tmp
        }
    }
}

public class DescribeApiNameListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeApiNameListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeApiNameListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeApiVariableRequest : Tea.TeaModel {
    public var lang: String?

    public var id: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.id != nil {
            map["id"] = self.id!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["id"] as? String {
            self.id = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeApiVariableResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
    }
}

public class DescribeApiVariableResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeApiVariableResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeApiVariableResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeApisRequest : Tea.TeaModel {
    public var lang: String?

    public var apiGroupId: String?

    public var apiRegionId: String?

    public var apiType: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.apiGroupId != nil {
            map["apiGroupId"] = self.apiGroupId!
        }
        if self.apiRegionId != nil {
            map["apiRegionId"] = self.apiRegionId!
        }
        if self.apiType != nil {
            map["apiType"] = self.apiType!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["apiGroupId"] as? String {
            self.apiGroupId = value
        }
        if let value = dict["apiRegionId"] as? String {
            self.apiRegionId = value
        }
        if let value = dict["apiType"] as? String {
            self.apiType = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeApisResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
    }
}

public class DescribeApisResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeApisResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeApisResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeAppKeyPageRequest : Tea.TeaModel {
    public var lang: String?

    public var currentPage: String?

    public var pageSize: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.currentPage != nil {
            map["currentPage"] = self.currentPage!
        }
        if self.pageSize != nil {
            map["pageSize"] = self.pageSize!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["currentPage"] as? String {
            self.currentPage = value
        }
        if let value = dict["pageSize"] as? String {
            self.pageSize = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeAppKeyPageResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public var androidSdkUrl: String?

        public var androidSdkVersion: String?

        public var appKey: String?

        public var gmtCreate: Int64?

        public var iosSdkUrl: String?

        public var iosSdkVersion: String?

        public var memo: String?

        public var sdkItems: String?

        public var used: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.androidSdkUrl != nil {
                map["androidSdkUrl"] = self.androidSdkUrl!
            }
            if self.androidSdkVersion != nil {
                map["androidSdkVersion"] = self.androidSdkVersion!
            }
            if self.appKey != nil {
                map["appKey"] = self.appKey!
            }
            if self.gmtCreate != nil {
                map["gmtCreate"] = self.gmtCreate!
            }
            if self.iosSdkUrl != nil {
                map["iosSdkUrl"] = self.iosSdkUrl!
            }
            if self.iosSdkVersion != nil {
                map["iosSdkVersion"] = self.iosSdkVersion!
            }
            if self.memo != nil {
                map["memo"] = self.memo!
            }
            if self.sdkItems != nil {
                map["sdkItems"] = self.sdkItems!
            }
            if self.used != nil {
                map["used"] = self.used!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["androidSdkUrl"] as? String {
                self.androidSdkUrl = value
            }
            if let value = dict["androidSdkVersion"] as? String {
                self.androidSdkVersion = value
            }
            if let value = dict["appKey"] as? String {
                self.appKey = value
            }
            if let value = dict["gmtCreate"] as? Int64 {
                self.gmtCreate = value
            }
            if let value = dict["iosSdkUrl"] as? String {
                self.iosSdkUrl = value
            }
            if let value = dict["iosSdkVersion"] as? String {
                self.iosSdkVersion = value
            }
            if let value = dict["memo"] as? String {
                self.memo = value
            }
            if let value = dict["sdkItems"] as? String {
                self.sdkItems = value
            }
            if let value = dict["used"] as? String {
                self.used = value
            }
        }
    }
    public var requestId: String?

    public var currentPage: Int32?

    public var pageSize: Int32?

    public var resultObject: [DescribeAppKeyPageResponseBody.ResultObject]?

    public var totalItem: Int32?

    public var totalPage: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.currentPage != nil {
            map["currentPage"] = self.currentPage!
        }
        if self.pageSize != nil {
            map["pageSize"] = self.pageSize!
        }
        if self.resultObject != nil {
            var tmp : [Any] = []
            for k in self.resultObject! {
                tmp.append(k.toMap())
            }
            map["resultObject"] = tmp
        }
        if self.totalItem != nil {
            map["totalItem"] = self.totalItem!
        }
        if self.totalPage != nil {
            map["totalPage"] = self.totalPage!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["currentPage"] as? Int32 {
            self.currentPage = value
        }
        if let value = dict["pageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["resultObject"] as? [Any?] {
            var tmp : [DescribeAppKeyPageResponseBody.ResultObject] = []
            for v in value {
                if v != nil {
                    var model = DescribeAppKeyPageResponseBody.ResultObject()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.resultObject = tmp
        }
        if let value = dict["totalItem"] as? Int32 {
            self.totalItem = value
        }
        if let value = dict["totalPage"] as? Int32 {
            self.totalPage = value
        }
    }
}

public class DescribeAppKeyPageResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeAppKeyPageResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeAppKeyPageResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeAuditConfigRequest : Tea.TeaModel {
    public var lang: String?

    public var auditRelationType: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.auditRelationType != nil {
            map["auditRelationType"] = self.auditRelationType!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["auditRelationType"] as? String {
            self.auditRelationType = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeAuditConfigResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: String?

    public var message: String?

    public var resultObject: Bool?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["httpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["httpStatusCode"] as? String {
            self.httpStatusCode = value
        }
        if let value = dict["message"] as? String {
            self.message = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
        if let value = dict["success"] as? Bool {
            self.success = value
        }
    }
}

public class DescribeAuditConfigResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeAuditConfigResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeAuditConfigResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeAuditDetailsRequest : Tea.TeaModel {
    public var lang: String?

    public var id: Int64?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.id != nil {
            map["id"] = self.id!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["id"] as? Int64 {
            self.id = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeAuditDetailsResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: String?

    public var message: String?

    public var resultObject: Bool?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["httpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["httpStatusCode"] as? String {
            self.httpStatusCode = value
        }
        if let value = dict["message"] as? String {
            self.message = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
        if let value = dict["success"] as? Bool {
            self.success = value
        }
    }
}

public class DescribeAuditDetailsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeAuditDetailsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeAuditDetailsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeAuditPageListRequest : Tea.TeaModel {
    public var lang: String?

    public var auditStatus: String?

    public var currentPage: String?

    public var eventCode: String?

    public var pageSize: String?

    public var regId: String?

    public var ruleName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.auditStatus != nil {
            map["auditStatus"] = self.auditStatus!
        }
        if self.currentPage != nil {
            map["currentPage"] = self.currentPage!
        }
        if self.eventCode != nil {
            map["eventCode"] = self.eventCode!
        }
        if self.pageSize != nil {
            map["pageSize"] = self.pageSize!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.ruleName != nil {
            map["ruleName"] = self.ruleName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["auditStatus"] as? String {
            self.auditStatus = value
        }
        if let value = dict["currentPage"] as? String {
            self.currentPage = value
        }
        if let value = dict["eventCode"] as? String {
            self.eventCode = value
        }
        if let value = dict["pageSize"] as? String {
            self.pageSize = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["ruleName"] as? String {
            self.ruleName = value
        }
    }
}

public class DescribeAuditPageListResponseBody : Tea.TeaModel {
    public var currentPage: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var resultObject: Bool?

    public var totalItem: Int32?

    public var totalPage: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.currentPage != nil {
            map["currentPage"] = self.currentPage!
        }
        if self.pageSize != nil {
            map["pageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        if self.totalItem != nil {
            map["totalItem"] = self.totalItem!
        }
        if self.totalPage != nil {
            map["totalPage"] = self.totalPage!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["currentPage"] as? Int32 {
            self.currentPage = value
        }
        if let value = dict["pageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
        if let value = dict["totalItem"] as? Int32 {
            self.totalItem = value
        }
        if let value = dict["totalPage"] as? Int64 {
            self.totalPage = value
        }
    }
}

public class DescribeAuditPageListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeAuditPageListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeAuditPageListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeAuthEventNameListRequest : Tea.TeaModel {
    public var lang: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeAuthEventNameListResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
    }
}

public class DescribeAuthEventNameListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeAuthEventNameListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeAuthEventNameListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeAuthRulePageListRequest : Tea.TeaModel {
    public var lang: String?

    public var eventCode: String?

    public var regId: String?

    public var ruleName: String?

    public var status: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.eventCode != nil {
            map["eventCode"] = self.eventCode!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.ruleName != nil {
            map["ruleName"] = self.ruleName!
        }
        if self.status != nil {
            map["status"] = self.status!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["eventCode"] as? String {
            self.eventCode = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["ruleName"] as? String {
            self.ruleName = value
        }
        if let value = dict["status"] as? String {
            self.status = value
        }
    }
}

public class DescribeAuthRulePageListResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public var consoleRuleId: Int64?

        public var createType: String?

        public var gmtModified: Int64?

        public var id: Int64?

        public var memo: String?

        public var ruleId: String?

        public var ruleName: String?

        public var ruleVersionId: Int64?

        public var status: String?

        public var version: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.consoleRuleId != nil {
                map["consoleRuleId"] = self.consoleRuleId!
            }
            if self.createType != nil {
                map["createType"] = self.createType!
            }
            if self.gmtModified != nil {
                map["gmtModified"] = self.gmtModified!
            }
            if self.id != nil {
                map["id"] = self.id!
            }
            if self.memo != nil {
                map["memo"] = self.memo!
            }
            if self.ruleId != nil {
                map["ruleId"] = self.ruleId!
            }
            if self.ruleName != nil {
                map["ruleName"] = self.ruleName!
            }
            if self.ruleVersionId != nil {
                map["ruleVersionId"] = self.ruleVersionId!
            }
            if self.status != nil {
                map["status"] = self.status!
            }
            if self.version != nil {
                map["version"] = self.version!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["consoleRuleId"] as? Int64 {
                self.consoleRuleId = value
            }
            if let value = dict["createType"] as? String {
                self.createType = value
            }
            if let value = dict["gmtModified"] as? Int64 {
                self.gmtModified = value
            }
            if let value = dict["id"] as? Int64 {
                self.id = value
            }
            if let value = dict["memo"] as? String {
                self.memo = value
            }
            if let value = dict["ruleId"] as? String {
                self.ruleId = value
            }
            if let value = dict["ruleName"] as? String {
                self.ruleName = value
            }
            if let value = dict["ruleVersionId"] as? Int64 {
                self.ruleVersionId = value
            }
            if let value = dict["status"] as? String {
                self.status = value
            }
            if let value = dict["version"] as? Int64 {
                self.version = value
            }
        }
    }
    public var requestId: String?

    public var currentPage: Int64?

    public var pageSize: Int64?

    public var resultObject: [DescribeAuthRulePageListResponseBody.ResultObject]?

    public var totalItem: Int64?

    public var totalPage: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.currentPage != nil {
            map["currentPage"] = self.currentPage!
        }
        if self.pageSize != nil {
            map["pageSize"] = self.pageSize!
        }
        if self.resultObject != nil {
            var tmp : [Any] = []
            for k in self.resultObject! {
                tmp.append(k.toMap())
            }
            map["resultObject"] = tmp
        }
        if self.totalItem != nil {
            map["totalItem"] = self.totalItem!
        }
        if self.totalPage != nil {
            map["totalPage"] = self.totalPage!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["currentPage"] as? Int64 {
            self.currentPage = value
        }
        if let value = dict["pageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["resultObject"] as? [Any?] {
            var tmp : [DescribeAuthRulePageListResponseBody.ResultObject] = []
            for v in value {
                if v != nil {
                    var model = DescribeAuthRulePageListResponseBody.ResultObject()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.resultObject = tmp
        }
        if let value = dict["totalItem"] as? Int64 {
            self.totalItem = value
        }
        if let value = dict["totalPage"] as? Int64 {
            self.totalPage = value
        }
    }
}

public class DescribeAuthRulePageListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeAuthRulePageListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeAuthRulePageListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeAuthSceneListRequest : Tea.TeaModel {
    public var lang: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeAuthSceneListResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public var serviceCode: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.serviceCode != nil {
                map["serviceCode"] = self.serviceCode!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["serviceCode"] as? String {
                self.serviceCode = value
            }
        }
    }
    public var requestId: String?

    public var resultObject: [DescribeAuthSceneListResponseBody.ResultObject]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            var tmp : [Any] = []
            for k in self.resultObject! {
                tmp.append(k.toMap())
            }
            map["resultObject"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? [Any?] {
            var tmp : [DescribeAuthSceneListResponseBody.ResultObject] = []
            for v in value {
                if v != nil {
                    var model = DescribeAuthSceneListResponseBody.ResultObject()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.resultObject = tmp
        }
    }
}

public class DescribeAuthSceneListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeAuthSceneListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeAuthSceneListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeAuthScenePageListRequest : Tea.TeaModel {
    public var lang: String?

    public var regId: String?

    public var sceneName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.sceneName != nil {
            map["sceneName"] = self.sceneName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["sceneName"] as? String {
            self.sceneName = value
        }
    }
}

public class DescribeAuthScenePageListResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public var commonRuleCount: Int64?

        public var customRuleCount: Int64?

        public var eventCode: String?

        public var sceneName: String?

        public var serverName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.commonRuleCount != nil {
                map["commonRuleCount"] = self.commonRuleCount!
            }
            if self.customRuleCount != nil {
                map["customRuleCount"] = self.customRuleCount!
            }
            if self.eventCode != nil {
                map["eventCode"] = self.eventCode!
            }
            if self.sceneName != nil {
                map["sceneName"] = self.sceneName!
            }
            if self.serverName != nil {
                map["serverName"] = self.serverName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["commonRuleCount"] as? Int64 {
                self.commonRuleCount = value
            }
            if let value = dict["customRuleCount"] as? Int64 {
                self.customRuleCount = value
            }
            if let value = dict["eventCode"] as? String {
                self.eventCode = value
            }
            if let value = dict["sceneName"] as? String {
                self.sceneName = value
            }
            if let value = dict["serverName"] as? String {
                self.serverName = value
            }
        }
    }
    public var requestId: String?

    public var currentPage: Int64?

    public var pageSize: Int64?

    public var resultObject: [DescribeAuthScenePageListResponseBody.ResultObject]?

    public var totalItem: Int64?

    public var totalPage: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.currentPage != nil {
            map["currentPage"] = self.currentPage!
        }
        if self.pageSize != nil {
            map["pageSize"] = self.pageSize!
        }
        if self.resultObject != nil {
            var tmp : [Any] = []
            for k in self.resultObject! {
                tmp.append(k.toMap())
            }
            map["resultObject"] = tmp
        }
        if self.totalItem != nil {
            map["totalItem"] = self.totalItem!
        }
        if self.totalPage != nil {
            map["totalPage"] = self.totalPage!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["currentPage"] as? Int64 {
            self.currentPage = value
        }
        if let value = dict["pageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["resultObject"] as? [Any?] {
            var tmp : [DescribeAuthScenePageListResponseBody.ResultObject] = []
            for v in value {
                if v != nil {
                    var model = DescribeAuthScenePageListResponseBody.ResultObject()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.resultObject = tmp
        }
        if let value = dict["totalItem"] as? Int64 {
            self.totalItem = value
        }
        if let value = dict["totalPage"] as? Int64 {
            self.totalPage = value
        }
    }
}

public class DescribeAuthScenePageListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeAuthScenePageListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeAuthScenePageListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeAuthStatusRequest : Tea.TeaModel {
    public var lang: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeAuthStatusResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
    }
}

public class DescribeAuthStatusResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeAuthStatusResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeAuthStatusResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeAvgExecuteCostReportRequest : Tea.TeaModel {
    public var lang: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeAvgExecuteCostReportResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public var ratio: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.ratio != nil {
                map["ratio"] = self.ratio!
            }
            if self.value != nil {
                map["value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ratio"] as? String {
                self.ratio = value
            }
            if let value = dict["value"] as? String {
                self.value = value
            }
        }
    }
    public var code: String?

    public var httpStatusCode: String?

    public var message: String?

    public var requestId: String?

    public var resultObject: [DescribeAvgExecuteCostReportResponseBody.ResultObject]?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["httpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.resultObject != nil {
            var tmp : [Any] = []
            for k in self.resultObject! {
                tmp.append(k.toMap())
            }
            map["resultObject"] = tmp
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["httpStatusCode"] as? String {
            self.httpStatusCode = value
        }
        if let value = dict["message"] as? String {
            self.message = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? [Any?] {
            var tmp : [DescribeAvgExecuteCostReportResponseBody.ResultObject] = []
            for v in value {
                if v != nil {
                    var model = DescribeAvgExecuteCostReportResponseBody.ResultObject()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.resultObject = tmp
        }
        if let value = dict["success"] as? Bool {
            self.success = value
        }
    }
}

public class DescribeAvgExecuteCostReportResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeAvgExecuteCostReportResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeAvgExecuteCostReportResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeBasicSearchPageListRequest : Tea.TeaModel {
    public var lang: String?

    public var currentPage: Int64?

    public var eventBeginTime: Int64?

    public var eventCodes: String?

    public var eventEndTime: Int64?

    public var fieldName: String?

    public var fieldValue: String?

    public var pageSize: Int64?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.currentPage != nil {
            map["currentPage"] = self.currentPage!
        }
        if self.eventBeginTime != nil {
            map["eventBeginTime"] = self.eventBeginTime!
        }
        if self.eventCodes != nil {
            map["eventCodes"] = self.eventCodes!
        }
        if self.eventEndTime != nil {
            map["eventEndTime"] = self.eventEndTime!
        }
        if self.fieldName != nil {
            map["fieldName"] = self.fieldName!
        }
        if self.fieldValue != nil {
            map["fieldValue"] = self.fieldValue!
        }
        if self.pageSize != nil {
            map["pageSize"] = self.pageSize!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["currentPage"] as? Int64 {
            self.currentPage = value
        }
        if let value = dict["eventBeginTime"] as? Int64 {
            self.eventBeginTime = value
        }
        if let value = dict["eventCodes"] as? String {
            self.eventCodes = value
        }
        if let value = dict["eventEndTime"] as? Int64 {
            self.eventEndTime = value
        }
        if let value = dict["fieldName"] as? String {
            self.fieldName = value
        }
        if let value = dict["fieldValue"] as? String {
            self.fieldValue = value
        }
        if let value = dict["pageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeBasicSearchPageListResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public class Header : Tea.TeaModel {
            public var fieldName: String?

            public var fieldTitle: String?

            public var isDefault: Bool?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.fieldName != nil {
                    map["fieldName"] = self.fieldName!
                }
                if self.fieldTitle != nil {
                    map["fieldTitle"] = self.fieldTitle!
                }
                if self.isDefault != nil {
                    map["isDefault"] = self.isDefault!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["fieldName"] as? String {
                    self.fieldName = value
                }
                if let value = dict["fieldTitle"] as? String {
                    self.fieldTitle = value
                }
                if let value = dict["isDefault"] as? Bool {
                    self.isDefault = value
                }
            }
        }
        public var currentPage: Int64?

        public var data: [[String: Any]]?

        public var header: [DescribeBasicSearchPageListResponseBody.ResultObject.Header]?

        public var pageSize: Int64?

        public var totalItem: Int64?

        public var totalPage: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.currentPage != nil {
                map["currentPage"] = self.currentPage!
            }
            if self.data != nil {
                map["data"] = self.data!
            }
            if self.header != nil {
                var tmp : [Any] = []
                for k in self.header! {
                    tmp.append(k.toMap())
                }
                map["header"] = tmp
            }
            if self.pageSize != nil {
                map["pageSize"] = self.pageSize!
            }
            if self.totalItem != nil {
                map["totalItem"] = self.totalItem!
            }
            if self.totalPage != nil {
                map["totalPage"] = self.totalPage!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["currentPage"] as? Int64 {
                self.currentPage = value
            }
            if let value = dict["data"] as? [[String: Any]] {
                self.data = value
            }
            if let value = dict["header"] as? [Any?] {
                var tmp : [DescribeBasicSearchPageListResponseBody.ResultObject.Header] = []
                for v in value {
                    if v != nil {
                        var model = DescribeBasicSearchPageListResponseBody.ResultObject.Header()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.header = tmp
            }
            if let value = dict["pageSize"] as? Int64 {
                self.pageSize = value
            }
            if let value = dict["totalItem"] as? Int64 {
                self.totalItem = value
            }
            if let value = dict["totalPage"] as? Int64 {
                self.totalPage = value
            }
        }
    }
    public var requestId: String?

    public var resultObject: DescribeBasicSearchPageListResponseBody.ResultObject?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.resultObject?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? [String: Any?] {
            var model = DescribeBasicSearchPageListResponseBody.ResultObject()
            model.fromMap(value)
            self.resultObject = model
        }
    }
}

public class DescribeBasicSearchPageListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeBasicSearchPageListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeBasicSearchPageListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeBasicStartRequest : Tea.TeaModel {
    public var appKey: String?

    public var endDs: String?

    public var regId: String?

    public var service: String?

    public var startDs: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appKey != nil {
            map["appKey"] = self.appKey!
        }
        if self.endDs != nil {
            map["endDs"] = self.endDs!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.service != nil {
            map["service"] = self.service!
        }
        if self.startDs != nil {
            map["startDs"] = self.startDs!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["appKey"] as? String {
            self.appKey = value
        }
        if let value = dict["endDs"] as? String {
            self.endDs = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["service"] as? String {
            self.service = value
        }
        if let value = dict["startDs"] as? String {
            self.startDs = value
        }
    }
}

public class DescribeBasicStartResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: String?

    public var message: String?

    public var requestId: String?

    public var resultObject: Bool?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["httpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["httpStatusCode"] as? String {
            self.httpStatusCode = value
        }
        if let value = dict["message"] as? String {
            self.message = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
        if let value = dict["success"] as? Bool {
            self.success = value
        }
    }
}

public class DescribeBasicStartResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeBasicStartResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeBasicStartResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeByPassShuntEventRequest : Tea.TeaModel {
    public var lang: String?

    public var eventId: Int64?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.eventId != nil {
            map["eventId"] = self.eventId!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["eventId"] as? Int64 {
            self.eventId = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeByPassShuntEventResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public var eventName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.eventName != nil {
                map["eventName"] = self.eventName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["eventName"] as? String {
                self.eventName = value
            }
        }
    }
    public var code: String?

    public var httpStatusCode: String?

    public var message: String?

    public var requestId: String?

    public var resultObject: DescribeByPassShuntEventResponseBody.ResultObject?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.resultObject?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["httpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject?.toMap()
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["httpStatusCode"] as? String {
            self.httpStatusCode = value
        }
        if let value = dict["message"] as? String {
            self.message = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? [String: Any?] {
            var model = DescribeByPassShuntEventResponseBody.ResultObject()
            model.fromMap(value)
            self.resultObject = model
        }
        if let value = dict["success"] as? Bool {
            self.success = value
        }
    }
}

public class DescribeByPassShuntEventResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeByPassShuntEventResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeByPassShuntEventResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeCustVariableConfigListRequest : Tea.TeaModel {
    public var lang: String?

    public var bizType: String?

    public var regId: String?

    public var timeType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.bizType != nil {
            map["bizType"] = self.bizType!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.timeType != nil {
            map["timeType"] = self.timeType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["bizType"] as? String {
            self.bizType = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["timeType"] as? String {
            self.timeType = value
        }
    }
}

public class DescribeCustVariableConfigListResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public var configKey: String?

        public var configValue: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.configKey != nil {
                map["configKey"] = self.configKey!
            }
            if self.configValue != nil {
                map["configValue"] = self.configValue!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["configKey"] as? String {
                self.configKey = value
            }
            if let value = dict["configValue"] as? String {
                self.configValue = value
            }
        }
    }
    public var requestId: String?

    public var resultObject: [DescribeCustVariableConfigListResponseBody.ResultObject]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            var tmp : [Any] = []
            for k in self.resultObject! {
                tmp.append(k.toMap())
            }
            map["resultObject"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? [Any?] {
            var tmp : [DescribeCustVariableConfigListResponseBody.ResultObject] = []
            for v in value {
                if v != nil {
                    var model = DescribeCustVariableConfigListResponseBody.ResultObject()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.resultObject = tmp
        }
    }
}

public class DescribeCustVariableConfigListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeCustVariableConfigListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeCustVariableConfigListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeCustVariableDetailRequest : Tea.TeaModel {
    public var lang: String?

    public var id: Int64?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.id != nil {
            map["id"] = self.id!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["id"] as? Int64 {
            self.id = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeCustVariableDetailResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public var condition: String?

        public var dataVersion: Int64?

        public var description_: String?

        public var eventCodes: String?

        public var historyValueType: String?

        public var id: Int64?

        public var object: String?

        public var outputs: String?

        public var subject: String?

        public var timeType: String?

        public var title: String?

        public var twCount: String?

        public var velocityFC: String?

        public var velocityTW: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.condition != nil {
                map["condition"] = self.condition!
            }
            if self.dataVersion != nil {
                map["dataVersion"] = self.dataVersion!
            }
            if self.description_ != nil {
                map["description"] = self.description_!
            }
            if self.eventCodes != nil {
                map["eventCodes"] = self.eventCodes!
            }
            if self.historyValueType != nil {
                map["historyValueType"] = self.historyValueType!
            }
            if self.id != nil {
                map["id"] = self.id!
            }
            if self.object != nil {
                map["object"] = self.object!
            }
            if self.outputs != nil {
                map["outputs"] = self.outputs!
            }
            if self.subject != nil {
                map["subject"] = self.subject!
            }
            if self.timeType != nil {
                map["timeType"] = self.timeType!
            }
            if self.title != nil {
                map["title"] = self.title!
            }
            if self.twCount != nil {
                map["twCount"] = self.twCount!
            }
            if self.velocityFC != nil {
                map["velocityFC"] = self.velocityFC!
            }
            if self.velocityTW != nil {
                map["velocityTW"] = self.velocityTW!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["condition"] as? String {
                self.condition = value
            }
            if let value = dict["dataVersion"] as? Int64 {
                self.dataVersion = value
            }
            if let value = dict["description"] as? String {
                self.description_ = value
            }
            if let value = dict["eventCodes"] as? String {
                self.eventCodes = value
            }
            if let value = dict["historyValueType"] as? String {
                self.historyValueType = value
            }
            if let value = dict["id"] as? Int64 {
                self.id = value
            }
            if let value = dict["object"] as? String {
                self.object = value
            }
            if let value = dict["outputs"] as? String {
                self.outputs = value
            }
            if let value = dict["subject"] as? String {
                self.subject = value
            }
            if let value = dict["timeType"] as? String {
                self.timeType = value
            }
            if let value = dict["title"] as? String {
                self.title = value
            }
            if let value = dict["twCount"] as? String {
                self.twCount = value
            }
            if let value = dict["velocityFC"] as? String {
                self.velocityFC = value
            }
            if let value = dict["velocityTW"] as? String {
                self.velocityTW = value
            }
        }
    }
    public var requestId: String?

    public var resultObject: [DescribeCustVariableDetailResponseBody.ResultObject]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            var tmp : [Any] = []
            for k in self.resultObject! {
                tmp.append(k.toMap())
            }
            map["resultObject"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? [Any?] {
            var tmp : [DescribeCustVariableDetailResponseBody.ResultObject] = []
            for v in value {
                if v != nil {
                    var model = DescribeCustVariableDetailResponseBody.ResultObject()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.resultObject = tmp
        }
    }
}

public class DescribeCustVariableDetailResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeCustVariableDetailResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeCustVariableDetailResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeCustVariablePageRequest : Tea.TeaModel {
    public var lang: String?

    public var createType: String?

    public var currentPage: Int32?

    public var description_: String?

    public var eventCode: String?

    public var pageSize: Int32?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.createType != nil {
            map["createType"] = self.createType!
        }
        if self.currentPage != nil {
            map["currentPage"] = self.currentPage!
        }
        if self.description_ != nil {
            map["description"] = self.description_!
        }
        if self.eventCode != nil {
            map["eventCode"] = self.eventCode!
        }
        if self.pageSize != nil {
            map["pageSize"] = self.pageSize!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["createType"] as? String {
            self.createType = value
        }
        if let value = dict["currentPage"] as? Int32 {
            self.currentPage = value
        }
        if let value = dict["description"] as? String {
            self.description_ = value
        }
        if let value = dict["eventCode"] as? String {
            self.eventCode = value
        }
        if let value = dict["pageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeCustVariablePageResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public var dataVersion: Int64?

        public var description_: String?

        public var gmtModified: Int64?

        public var id: Int64?

        public var name: String?

        public var status: String?

        public var title: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.dataVersion != nil {
                map["dataVersion"] = self.dataVersion!
            }
            if self.description_ != nil {
                map["description"] = self.description_!
            }
            if self.gmtModified != nil {
                map["gmtModified"] = self.gmtModified!
            }
            if self.id != nil {
                map["id"] = self.id!
            }
            if self.name != nil {
                map["name"] = self.name!
            }
            if self.status != nil {
                map["status"] = self.status!
            }
            if self.title != nil {
                map["title"] = self.title!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["dataVersion"] as? Int64 {
                self.dataVersion = value
            }
            if let value = dict["description"] as? String {
                self.description_ = value
            }
            if let value = dict["gmtModified"] as? Int64 {
                self.gmtModified = value
            }
            if let value = dict["id"] as? Int64 {
                self.id = value
            }
            if let value = dict["name"] as? String {
                self.name = value
            }
            if let value = dict["status"] as? String {
                self.status = value
            }
            if let value = dict["title"] as? String {
                self.title = value
            }
        }
    }
    public var requestId: String?

    public var currentPage: Int32?

    public var pageSize: Int32?

    public var resultObject: [DescribeCustVariablePageResponseBody.ResultObject]?

    public var totalItem: Int32?

    public var totalPage: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.currentPage != nil {
            map["currentPage"] = self.currentPage!
        }
        if self.pageSize != nil {
            map["pageSize"] = self.pageSize!
        }
        if self.resultObject != nil {
            var tmp : [Any] = []
            for k in self.resultObject! {
                tmp.append(k.toMap())
            }
            map["resultObject"] = tmp
        }
        if self.totalItem != nil {
            map["totalItem"] = self.totalItem!
        }
        if self.totalPage != nil {
            map["totalPage"] = self.totalPage!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["currentPage"] as? Int32 {
            self.currentPage = value
        }
        if let value = dict["pageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["resultObject"] as? [Any?] {
            var tmp : [DescribeCustVariablePageResponseBody.ResultObject] = []
            for v in value {
                if v != nil {
                    var model = DescribeCustVariablePageResponseBody.ResultObject()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.resultObject = tmp
        }
        if let value = dict["totalItem"] as? Int32 {
            self.totalItem = value
        }
        if let value = dict["totalPage"] as? Int32 {
            self.totalPage = value
        }
    }
}

public class DescribeCustVariablePageResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeCustVariablePageResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeCustVariablePageResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeDataSourceDataDownloadUrlRequest : Tea.TeaModel {
    public var lang: String?

    public var dataSourceId: Int64?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.dataSourceId != nil {
            map["dataSourceId"] = self.dataSourceId!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["dataSourceId"] as? Int64 {
            self.dataSourceId = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeDataSourceDataDownloadUrlResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public var downloadFileUrl: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.downloadFileUrl != nil {
                map["downloadFileUrl"] = self.downloadFileUrl!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["downloadFileUrl"] as? String {
                self.downloadFileUrl = value
            }
        }
    }
    public var requestId: String?

    public var resultObject: DescribeDataSourceDataDownloadUrlResponseBody.ResultObject?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.resultObject?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? [String: Any?] {
            var model = DescribeDataSourceDataDownloadUrlResponseBody.ResultObject()
            model.fromMap(value)
            self.resultObject = model
        }
    }
}

public class DescribeDataSourceDataDownloadUrlResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeDataSourceDataDownloadUrlResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeDataSourceDataDownloadUrlResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeDataSourceFieldsRequest : Tea.TeaModel {
    public var lang: String?

    public var dataSourceCode: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.dataSourceCode != nil {
            map["dataSourceCode"] = self.dataSourceCode!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["dataSourceCode"] as? String {
            self.dataSourceCode = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeDataSourceFieldsResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
    }
}

public class DescribeDataSourceFieldsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeDataSourceFieldsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeDataSourceFieldsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeDataSourcePageListRequest : Tea.TeaModel {
    public var lang: String?

    public var sourceIp: String?

    public var currentPage: Int64?

    public var name: String?

    public var pageSize: Int64?

    public var regId: String?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.sourceIp != nil {
            map["SourceIp"] = self.sourceIp!
        }
        if self.currentPage != nil {
            map["currentPage"] = self.currentPage!
        }
        if self.name != nil {
            map["name"] = self.name!
        }
        if self.pageSize != nil {
            map["pageSize"] = self.pageSize!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.type != nil {
            map["type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["SourceIp"] as? String {
            self.sourceIp = value
        }
        if let value = dict["currentPage"] as? Int64 {
            self.currentPage = value
        }
        if let value = dict["name"] as? String {
            self.name = value
        }
        if let value = dict["pageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["type"] as? String {
            self.type = value
        }
    }
}

public class DescribeDataSourcePageListResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public var creator: String?

        public var description_: String?

        public var gmtCreate: String?

        public var gmtModified: String?

        public var id: Int64?

        public var modifier: String?

        public var name: String?

        public var total: Int64?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.creator != nil {
                map["creator"] = self.creator!
            }
            if self.description_ != nil {
                map["description"] = self.description_!
            }
            if self.gmtCreate != nil {
                map["gmtCreate"] = self.gmtCreate!
            }
            if self.gmtModified != nil {
                map["gmtModified"] = self.gmtModified!
            }
            if self.id != nil {
                map["id"] = self.id!
            }
            if self.modifier != nil {
                map["modifier"] = self.modifier!
            }
            if self.name != nil {
                map["name"] = self.name!
            }
            if self.total != nil {
                map["total"] = self.total!
            }
            if self.type != nil {
                map["type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["creator"] as? String {
                self.creator = value
            }
            if let value = dict["description"] as? String {
                self.description_ = value
            }
            if let value = dict["gmtCreate"] as? String {
                self.gmtCreate = value
            }
            if let value = dict["gmtModified"] as? String {
                self.gmtModified = value
            }
            if let value = dict["id"] as? Int64 {
                self.id = value
            }
            if let value = dict["modifier"] as? String {
                self.modifier = value
            }
            if let value = dict["name"] as? String {
                self.name = value
            }
            if let value = dict["total"] as? Int64 {
                self.total = value
            }
            if let value = dict["type"] as? String {
                self.type = value
            }
        }
    }
    public var requestId: String?

    public var currentPage: Int32?

    public var pageSize: Int32?

    public var resultObject: [DescribeDataSourcePageListResponseBody.ResultObject]?

    public var totalItem: Int32?

    public var totalPage: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.currentPage != nil {
            map["currentPage"] = self.currentPage!
        }
        if self.pageSize != nil {
            map["pageSize"] = self.pageSize!
        }
        if self.resultObject != nil {
            var tmp : [Any] = []
            for k in self.resultObject! {
                tmp.append(k.toMap())
            }
            map["resultObject"] = tmp
        }
        if self.totalItem != nil {
            map["totalItem"] = self.totalItem!
        }
        if self.totalPage != nil {
            map["totalPage"] = self.totalPage!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["currentPage"] as? Int32 {
            self.currentPage = value
        }
        if let value = dict["pageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["resultObject"] as? [Any?] {
            var tmp : [DescribeDataSourcePageListResponseBody.ResultObject] = []
            for v in value {
                if v != nil {
                    var model = DescribeDataSourcePageListResponseBody.ResultObject()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.resultObject = tmp
        }
        if let value = dict["totalItem"] as? Int32 {
            self.totalItem = value
        }
        if let value = dict["totalPage"] as? Int32 {
            self.totalPage = value
        }
    }
}

public class DescribeDataSourcePageListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeDataSourcePageListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeDataSourcePageListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeDecisionResultFluctuationRequest : Tea.TeaModel {
    public var lang: String?

    public var eventCodes: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.eventCodes != nil {
            map["eventCodes"] = self.eventCodes!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["eventCodes"] as? String {
            self.eventCodes = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeDecisionResultFluctuationResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public var status: String?

        public var todayNum: Int64?

        public var withinSevenDayNum: String?

        public var withinThirtyDayNum: String?

        public var withinThreeDayNum: String?

        public var yesterdayNum: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.status != nil {
                map["status"] = self.status!
            }
            if self.todayNum != nil {
                map["todayNum"] = self.todayNum!
            }
            if self.withinSevenDayNum != nil {
                map["withinSevenDayNum"] = self.withinSevenDayNum!
            }
            if self.withinThirtyDayNum != nil {
                map["withinThirtyDayNum"] = self.withinThirtyDayNum!
            }
            if self.withinThreeDayNum != nil {
                map["withinThreeDayNum"] = self.withinThreeDayNum!
            }
            if self.yesterdayNum != nil {
                map["yesterdayNum"] = self.yesterdayNum!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["status"] as? String {
                self.status = value
            }
            if let value = dict["todayNum"] as? Int64 {
                self.todayNum = value
            }
            if let value = dict["withinSevenDayNum"] as? String {
                self.withinSevenDayNum = value
            }
            if let value = dict["withinThirtyDayNum"] as? String {
                self.withinThirtyDayNum = value
            }
            if let value = dict["withinThreeDayNum"] as? String {
                self.withinThreeDayNum = value
            }
            if let value = dict["yesterdayNum"] as? Int64 {
                self.yesterdayNum = value
            }
        }
    }
    public var code: String?

    public var httpStatusCode: String?

    public var message: String?

    public var requestId: String?

    public var resultObject: [DescribeDecisionResultFluctuationResponseBody.ResultObject]?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["httpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.resultObject != nil {
            var tmp : [Any] = []
            for k in self.resultObject! {
                tmp.append(k.toMap())
            }
            map["resultObject"] = tmp
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["httpStatusCode"] as? String {
            self.httpStatusCode = value
        }
        if let value = dict["message"] as? String {
            self.message = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? [Any?] {
            var tmp : [DescribeDecisionResultFluctuationResponseBody.ResultObject] = []
            for v in value {
                if v != nil {
                    var model = DescribeDecisionResultFluctuationResponseBody.ResultObject()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.resultObject = tmp
        }
        if let value = dict["success"] as? Bool {
            self.success = value
        }
    }
}

public class DescribeDecisionResultFluctuationResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeDecisionResultFluctuationResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeDecisionResultFluctuationResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeDecisionResultTrendRequest : Tea.TeaModel {
    public var lang: String?

    public var beginTime: Int64?

    public var endTime: Int64?

    public var eventCodes: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.beginTime != nil {
            map["beginTime"] = self.beginTime!
        }
        if self.endTime != nil {
            map["endTime"] = self.endTime!
        }
        if self.eventCodes != nil {
            map["eventCodes"] = self.eventCodes!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["beginTime"] as? Int64 {
            self.beginTime = value
        }
        if let value = dict["endTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["eventCodes"] as? String {
            self.eventCodes = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeDecisionResultTrendResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public class Series : Tea.TeaModel {
            public class Data : Tea.TeaModel {
                public var num: Int64?

                public var scale: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.num != nil {
                        map["num"] = self.num!
                    }
                    if self.scale != nil {
                        map["scale"] = self.scale!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["num"] as? Int64 {
                        self.num = value
                    }
                    if let value = dict["scale"] as? String {
                        self.scale = value
                    }
                }
            }
            public var data: [DescribeDecisionResultTrendResponseBody.ResultObject.Series.Data]?

            public var name: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.data != nil {
                    var tmp : [Any] = []
                    for k in self.data! {
                        tmp.append(k.toMap())
                    }
                    map["data"] = tmp
                }
                if self.name != nil {
                    map["name"] = self.name!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["data"] as? [Any?] {
                    var tmp : [DescribeDecisionResultTrendResponseBody.ResultObject.Series.Data] = []
                    for v in value {
                        if v != nil {
                            var model = DescribeDecisionResultTrendResponseBody.ResultObject.Series.Data()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.data = tmp
                }
                if let value = dict["name"] as? String {
                    self.name = value
                }
            }
        }
        public class Xaxis : Tea.TeaModel {
            public var data: [String]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.data != nil {
                    map["data"] = self.data!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["data"] as? [String] {
                    self.data = value
                }
            }
        }
        public var series: [DescribeDecisionResultTrendResponseBody.ResultObject.Series]?

        public var xaxis: DescribeDecisionResultTrendResponseBody.ResultObject.Xaxis?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.xaxis?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.series != nil {
                var tmp : [Any] = []
                for k in self.series! {
                    tmp.append(k.toMap())
                }
                map["series"] = tmp
            }
            if self.xaxis != nil {
                map["xaxis"] = self.xaxis?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["series"] as? [Any?] {
                var tmp : [DescribeDecisionResultTrendResponseBody.ResultObject.Series] = []
                for v in value {
                    if v != nil {
                        var model = DescribeDecisionResultTrendResponseBody.ResultObject.Series()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.series = tmp
            }
            if let value = dict["xaxis"] as? [String: Any?] {
                var model = DescribeDecisionResultTrendResponseBody.ResultObject.Xaxis()
                model.fromMap(value)
                self.xaxis = model
            }
        }
    }
    public var code: String?

    public var httpStatusCode: String?

    public var message: String?

    public var requestId: String?

    public var resultObject: DescribeDecisionResultTrendResponseBody.ResultObject?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.resultObject?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["httpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject?.toMap()
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["httpStatusCode"] as? String {
            self.httpStatusCode = value
        }
        if let value = dict["message"] as? String {
            self.message = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? [String: Any?] {
            var model = DescribeDecisionResultTrendResponseBody.ResultObject()
            model.fromMap(value)
            self.resultObject = model
        }
        if let value = dict["success"] as? Bool {
            self.success = value
        }
    }
}

public class DescribeDecisionResultTrendResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeDecisionResultTrendResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeDecisionResultTrendResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeDetailStartRequest : Tea.TeaModel {
    public var appKey: String?

    public var endDs: String?

    public var regId: String?

    public var service: String?

    public var startDs: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appKey != nil {
            map["appKey"] = self.appKey!
        }
        if self.endDs != nil {
            map["endDs"] = self.endDs!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.service != nil {
            map["service"] = self.service!
        }
        if self.startDs != nil {
            map["startDs"] = self.startDs!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["appKey"] as? String {
            self.appKey = value
        }
        if let value = dict["endDs"] as? String {
            self.endDs = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["service"] as? String {
            self.service = value
        }
        if let value = dict["startDs"] as? String {
            self.startDs = value
        }
    }
}

public class DescribeDetailStartResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: String?

    public var message: String?

    public var requestId: String?

    public var resultObject: Bool?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["httpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["httpStatusCode"] as? String {
            self.httpStatusCode = value
        }
        if let value = dict["message"] as? String {
            self.message = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
        if let value = dict["success"] as? Bool {
            self.success = value
        }
    }
}

public class DescribeDetailStartResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeDetailStartResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeDetailStartResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeDownloadUrlRequest : Tea.TeaModel {
    public var fileType: String?

    public var lang: String?

    public var regId: String?

    public var taskId: Int64?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.fileType != nil {
            map["FileType"] = self.fileType!
        }
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.regId != nil {
            map["RegId"] = self.regId!
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["FileType"] as? String {
            self.fileType = value
        }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["RegId"] as? String {
            self.regId = value
        }
        if let value = dict["TaskId"] as? Int64 {
            self.taskId = value
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
    }
}

public class DescribeDownloadUrlResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? String {
            self.resultObject = value
        }
    }
}

public class DescribeDownloadUrlResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeDownloadUrlResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeDownloadUrlResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeEventBaseInfoByEventCodeRequest : Tea.TeaModel {
    public var lang: String?

    public var createType: String?

    public var eventCode: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.createType != nil {
            map["createType"] = self.createType!
        }
        if self.eventCode != nil {
            map["eventCode"] = self.eventCode!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["createType"] as? String {
            self.createType = value
        }
        if let value = dict["eventCode"] as? String {
            self.eventCode = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeEventBaseInfoByEventCodeResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public class InputFields : Tea.TeaModel {
            public var description_: String?

            public var fieldCode: String?

            public var fieldRank: String?

            public var fieldSource: String?

            public var fieldType: String?

            public var title: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.description_ != nil {
                    map["description"] = self.description_!
                }
                if self.fieldCode != nil {
                    map["fieldCode"] = self.fieldCode!
                }
                if self.fieldRank != nil {
                    map["fieldRank"] = self.fieldRank!
                }
                if self.fieldSource != nil {
                    map["fieldSource"] = self.fieldSource!
                }
                if self.fieldType != nil {
                    map["fieldType"] = self.fieldType!
                }
                if self.title != nil {
                    map["title"] = self.title!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["description"] as? String {
                    self.description_ = value
                }
                if let value = dict["fieldCode"] as? String {
                    self.fieldCode = value
                }
                if let value = dict["fieldRank"] as? String {
                    self.fieldRank = value
                }
                if let value = dict["fieldSource"] as? String {
                    self.fieldSource = value
                }
                if let value = dict["fieldType"] as? String {
                    self.fieldType = value
                }
                if let value = dict["title"] as? String {
                    self.title = value
                }
            }
        }
        public class RuleDetails : Tea.TeaModel {
            public var logicExpression: String?

            public var memo: String?

            public var ruleActions: String?

            public var ruleAuthType: String?

            public var ruleExpressions: String?

            public var ruleId: String?

            public var ruleName: String?

            public var ruleStatus: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.logicExpression != nil {
                    map["logicExpression"] = self.logicExpression!
                }
                if self.memo != nil {
                    map["memo"] = self.memo!
                }
                if self.ruleActions != nil {
                    map["ruleActions"] = self.ruleActions!
                }
                if self.ruleAuthType != nil {
                    map["ruleAuthType"] = self.ruleAuthType!
                }
                if self.ruleExpressions != nil {
                    map["ruleExpressions"] = self.ruleExpressions!
                }
                if self.ruleId != nil {
                    map["ruleId"] = self.ruleId!
                }
                if self.ruleName != nil {
                    map["ruleName"] = self.ruleName!
                }
                if self.ruleStatus != nil {
                    map["ruleStatus"] = self.ruleStatus!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["logicExpression"] as? String {
                    self.logicExpression = value
                }
                if let value = dict["memo"] as? String {
                    self.memo = value
                }
                if let value = dict["ruleActions"] as? String {
                    self.ruleActions = value
                }
                if let value = dict["ruleAuthType"] as? String {
                    self.ruleAuthType = value
                }
                if let value = dict["ruleExpressions"] as? String {
                    self.ruleExpressions = value
                }
                if let value = dict["ruleId"] as? String {
                    self.ruleId = value
                }
                if let value = dict["ruleName"] as? String {
                    self.ruleName = value
                }
                if let value = dict["ruleStatus"] as? String {
                    self.ruleStatus = value
                }
            }
        }
        public var bizVersion: Int32?

        public var eventCode: String?

        public var eventName: String?

        public var eventStauts: String?

        public var inputFields: [DescribeEventBaseInfoByEventCodeResponseBody.ResultObject.InputFields]?

        public var memo: String?

        public var ruleDetails: [DescribeEventBaseInfoByEventCodeResponseBody.ResultObject.RuleDetails]?

        public var templateCode: String?

        public var templateName: String?

        public var templateType: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.bizVersion != nil {
                map["bizVersion"] = self.bizVersion!
            }
            if self.eventCode != nil {
                map["eventCode"] = self.eventCode!
            }
            if self.eventName != nil {
                map["eventName"] = self.eventName!
            }
            if self.eventStauts != nil {
                map["eventStauts"] = self.eventStauts!
            }
            if self.inputFields != nil {
                var tmp : [Any] = []
                for k in self.inputFields! {
                    tmp.append(k.toMap())
                }
                map["inputFields"] = tmp
            }
            if self.memo != nil {
                map["memo"] = self.memo!
            }
            if self.ruleDetails != nil {
                var tmp : [Any] = []
                for k in self.ruleDetails! {
                    tmp.append(k.toMap())
                }
                map["ruleDetails"] = tmp
            }
            if self.templateCode != nil {
                map["templateCode"] = self.templateCode!
            }
            if self.templateName != nil {
                map["templateName"] = self.templateName!
            }
            if self.templateType != nil {
                map["templateType"] = self.templateType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["bizVersion"] as? Int32 {
                self.bizVersion = value
            }
            if let value = dict["eventCode"] as? String {
                self.eventCode = value
            }
            if let value = dict["eventName"] as? String {
                self.eventName = value
            }
            if let value = dict["eventStauts"] as? String {
                self.eventStauts = value
            }
            if let value = dict["inputFields"] as? [Any?] {
                var tmp : [DescribeEventBaseInfoByEventCodeResponseBody.ResultObject.InputFields] = []
                for v in value {
                    if v != nil {
                        var model = DescribeEventBaseInfoByEventCodeResponseBody.ResultObject.InputFields()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.inputFields = tmp
            }
            if let value = dict["memo"] as? String {
                self.memo = value
            }
            if let value = dict["ruleDetails"] as? [Any?] {
                var tmp : [DescribeEventBaseInfoByEventCodeResponseBody.ResultObject.RuleDetails] = []
                for v in value {
                    if v != nil {
                        var model = DescribeEventBaseInfoByEventCodeResponseBody.ResultObject.RuleDetails()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.ruleDetails = tmp
            }
            if let value = dict["templateCode"] as? String {
                self.templateCode = value
            }
            if let value = dict["templateName"] as? String {
                self.templateName = value
            }
            if let value = dict["templateType"] as? String {
                self.templateType = value
            }
        }
    }
    public var requestId: String?

    public var resultObject: DescribeEventBaseInfoByEventCodeResponseBody.ResultObject?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.resultObject?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? [String: Any?] {
            var model = DescribeEventBaseInfoByEventCodeResponseBody.ResultObject()
            model.fromMap(value)
            self.resultObject = model
        }
    }
}

public class DescribeEventBaseInfoByEventCodeResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeEventBaseInfoByEventCodeResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeEventBaseInfoByEventCodeResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeEventCountRequest : Tea.TeaModel {
    public var lang: String?

    public var createType: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.createType != nil {
            map["createType"] = self.createType!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["createType"] as? String {
            self.createType = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeEventCountResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public var limit: Bool?

        public var maxTotalItem: Int32?

        public var totalItem: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.limit != nil {
                map["limit"] = self.limit!
            }
            if self.maxTotalItem != nil {
                map["maxTotalItem"] = self.maxTotalItem!
            }
            if self.totalItem != nil {
                map["totalItem"] = self.totalItem!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["limit"] as? Bool {
                self.limit = value
            }
            if let value = dict["maxTotalItem"] as? Int32 {
                self.maxTotalItem = value
            }
            if let value = dict["totalItem"] as? Int32 {
                self.totalItem = value
            }
        }
    }
    public var code: String?

    public var httpStatusCode: String?

    public var message: String?

    public var requestId: String?

    public var resultObject: DescribeEventCountResponseBody.ResultObject?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.resultObject?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["httpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject?.toMap()
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["httpStatusCode"] as? String {
            self.httpStatusCode = value
        }
        if let value = dict["message"] as? String {
            self.message = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? [String: Any?] {
            var model = DescribeEventCountResponseBody.ResultObject()
            model.fromMap(value)
            self.resultObject = model
        }
        if let value = dict["success"] as? Bool {
            self.success = value
        }
    }
}

public class DescribeEventCountResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeEventCountResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeEventCountResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeEventDetailByRequestIdRequest : Tea.TeaModel {
    public var lang: String?

    public var eventCode: String?

    public var eventTime: Int64?

    public var regId: String?

    public var sRequestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.eventCode != nil {
            map["eventCode"] = self.eventCode!
        }
        if self.eventTime != nil {
            map["eventTime"] = self.eventTime!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.sRequestId != nil {
            map["sRequestId"] = self.sRequestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["eventCode"] as? String {
            self.eventCode = value
        }
        if let value = dict["eventTime"] as? Int64 {
            self.eventTime = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["sRequestId"] as? String {
            self.sRequestId = value
        }
    }
}

public class DescribeEventDetailByRequestIdResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
    }
}

public class DescribeEventDetailByRequestIdResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeEventDetailByRequestIdResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeEventDetailByRequestIdResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeEventLogDetailRequest : Tea.TeaModel {
    public var lang: String?

    public var regId: String?

    public var reqIdByLog: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.reqIdByLog != nil {
            map["reqIdByLog"] = self.reqIdByLog!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["reqIdByLog"] as? String {
            self.reqIdByLog = value
        }
    }
}

public class DescribeEventLogDetailResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
    }
}

public class DescribeEventLogDetailResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeEventLogDetailResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeEventLogDetailResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeEventLogPageRequest : Tea.TeaModel {
    public var lang: String?

    public var accountIdPRP: String?

    public var beginTime: Int64?

    public var condition1AL: String?

    public var condition2AL: String?

    public var condition3AL: String?

    public var currentPage: Int32?

    public var deviceTypeLRP: String?

    public var emailPRP: String?

    public var endTime: Int64?

    public var failReasonLRP: String?

    public var ipPRP: String?

    public var loginResultARP: String?

    public var loginTypeLRP: String?

    public var macPRP: String?

    public var mobilePRP: String?

    public var nickNamePRP: String?

    public var operateSourceLRP: String?

    public var pageSize: Int32?

    public var referPRP: String?

    public var regId: String?

    public var registerIpPRP: String?

    public var reqIdPBS: String?

    public var scoreEBS: Int32?

    public var scoreSBS: Int32?

    public var serviceABS: String?

    public var tagsLBS: String?

    public var umidPDI: String?

    public var userAgentPRP: String?

    public var userNameTypeLRP: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.accountIdPRP != nil {
            map["accountIdPRP"] = self.accountIdPRP!
        }
        if self.beginTime != nil {
            map["beginTime"] = self.beginTime!
        }
        if self.condition1AL != nil {
            map["condition1AL"] = self.condition1AL!
        }
        if self.condition2AL != nil {
            map["condition2AL"] = self.condition2AL!
        }
        if self.condition3AL != nil {
            map["condition3AL"] = self.condition3AL!
        }
        if self.currentPage != nil {
            map["currentPage"] = self.currentPage!
        }
        if self.deviceTypeLRP != nil {
            map["deviceTypeLRP"] = self.deviceTypeLRP!
        }
        if self.emailPRP != nil {
            map["emailPRP"] = self.emailPRP!
        }
        if self.endTime != nil {
            map["endTime"] = self.endTime!
        }
        if self.failReasonLRP != nil {
            map["failReasonLRP"] = self.failReasonLRP!
        }
        if self.ipPRP != nil {
            map["ipPRP"] = self.ipPRP!
        }
        if self.loginResultARP != nil {
            map["loginResultARP"] = self.loginResultARP!
        }
        if self.loginTypeLRP != nil {
            map["loginTypeLRP"] = self.loginTypeLRP!
        }
        if self.macPRP != nil {
            map["macPRP"] = self.macPRP!
        }
        if self.mobilePRP != nil {
            map["mobilePRP"] = self.mobilePRP!
        }
        if self.nickNamePRP != nil {
            map["nickNamePRP"] = self.nickNamePRP!
        }
        if self.operateSourceLRP != nil {
            map["operateSourceLRP"] = self.operateSourceLRP!
        }
        if self.pageSize != nil {
            map["pageSize"] = self.pageSize!
        }
        if self.referPRP != nil {
            map["referPRP"] = self.referPRP!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.registerIpPRP != nil {
            map["registerIpPRP"] = self.registerIpPRP!
        }
        if self.reqIdPBS != nil {
            map["reqIdPBS"] = self.reqIdPBS!
        }
        if self.scoreEBS != nil {
            map["scoreEBS"] = self.scoreEBS!
        }
        if self.scoreSBS != nil {
            map["scoreSBS"] = self.scoreSBS!
        }
        if self.serviceABS != nil {
            map["serviceABS"] = self.serviceABS!
        }
        if self.tagsLBS != nil {
            map["tagsLBS"] = self.tagsLBS!
        }
        if self.umidPDI != nil {
            map["umidPDI"] = self.umidPDI!
        }
        if self.userAgentPRP != nil {
            map["userAgentPRP"] = self.userAgentPRP!
        }
        if self.userNameTypeLRP != nil {
            map["userNameTypeLRP"] = self.userNameTypeLRP!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["accountIdPRP"] as? String {
            self.accountIdPRP = value
        }
        if let value = dict["beginTime"] as? Int64 {
            self.beginTime = value
        }
        if let value = dict["condition1AL"] as? String {
            self.condition1AL = value
        }
        if let value = dict["condition2AL"] as? String {
            self.condition2AL = value
        }
        if let value = dict["condition3AL"] as? String {
            self.condition3AL = value
        }
        if let value = dict["currentPage"] as? Int32 {
            self.currentPage = value
        }
        if let value = dict["deviceTypeLRP"] as? String {
            self.deviceTypeLRP = value
        }
        if let value = dict["emailPRP"] as? String {
            self.emailPRP = value
        }
        if let value = dict["endTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["failReasonLRP"] as? String {
            self.failReasonLRP = value
        }
        if let value = dict["ipPRP"] as? String {
            self.ipPRP = value
        }
        if let value = dict["loginResultARP"] as? String {
            self.loginResultARP = value
        }
        if let value = dict["loginTypeLRP"] as? String {
            self.loginTypeLRP = value
        }
        if let value = dict["macPRP"] as? String {
            self.macPRP = value
        }
        if let value = dict["mobilePRP"] as? String {
            self.mobilePRP = value
        }
        if let value = dict["nickNamePRP"] as? String {
            self.nickNamePRP = value
        }
        if let value = dict["operateSourceLRP"] as? String {
            self.operateSourceLRP = value
        }
        if let value = dict["pageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["referPRP"] as? String {
            self.referPRP = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["registerIpPRP"] as? String {
            self.registerIpPRP = value
        }
        if let value = dict["reqIdPBS"] as? String {
            self.reqIdPBS = value
        }
        if let value = dict["scoreEBS"] as? Int32 {
            self.scoreEBS = value
        }
        if let value = dict["scoreSBS"] as? Int32 {
            self.scoreSBS = value
        }
        if let value = dict["serviceABS"] as? String {
            self.serviceABS = value
        }
        if let value = dict["tagsLBS"] as? String {
            self.tagsLBS = value
        }
        if let value = dict["umidPDI"] as? String {
            self.umidPDI = value
        }
        if let value = dict["userAgentPRP"] as? String {
            self.userAgentPRP = value
        }
        if let value = dict["userNameTypeLRP"] as? String {
            self.userNameTypeLRP = value
        }
    }
}

public class DescribeEventLogPageResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public var accountId: String?

        public var email: String?

        public var ip: String?

        public var mobile: String?

        public var nickName: String?

        public var requestId: String?

        public var score: String?

        public var service: String?

        public var tags: String?

        public var timestamp: String?

        public var umid: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            if self.email != nil {
                map["email"] = self.email!
            }
            if self.ip != nil {
                map["ip"] = self.ip!
            }
            if self.mobile != nil {
                map["mobile"] = self.mobile!
            }
            if self.nickName != nil {
                map["nickName"] = self.nickName!
            }
            if self.requestId != nil {
                map["requestId"] = self.requestId!
            }
            if self.score != nil {
                map["score"] = self.score!
            }
            if self.service != nil {
                map["service"] = self.service!
            }
            if self.tags != nil {
                map["tags"] = self.tags!
            }
            if self.timestamp != nil {
                map["timestamp"] = self.timestamp!
            }
            if self.umid != nil {
                map["umid"] = self.umid!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
            if let value = dict["email"] as? String {
                self.email = value
            }
            if let value = dict["ip"] as? String {
                self.ip = value
            }
            if let value = dict["mobile"] as? String {
                self.mobile = value
            }
            if let value = dict["nickName"] as? String {
                self.nickName = value
            }
            if let value = dict["requestId"] as? String {
                self.requestId = value
            }
            if let value = dict["score"] as? String {
                self.score = value
            }
            if let value = dict["service"] as? String {
                self.service = value
            }
            if let value = dict["tags"] as? String {
                self.tags = value
            }
            if let value = dict["timestamp"] as? String {
                self.timestamp = value
            }
            if let value = dict["umid"] as? String {
                self.umid = value
            }
        }
    }
    public var requestId: String?

    public var currentPage: Int32?

    public var pageSize: Int32?

    public var resultObject: [DescribeEventLogPageResponseBody.ResultObject]?

    public var totalItem: Int32?

    public var totalPage: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.currentPage != nil {
            map["currentPage"] = self.currentPage!
        }
        if self.pageSize != nil {
            map["pageSize"] = self.pageSize!
        }
        if self.resultObject != nil {
            var tmp : [Any] = []
            for k in self.resultObject! {
                tmp.append(k.toMap())
            }
            map["resultObject"] = tmp
        }
        if self.totalItem != nil {
            map["totalItem"] = self.totalItem!
        }
        if self.totalPage != nil {
            map["totalPage"] = self.totalPage!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["currentPage"] as? Int32 {
            self.currentPage = value
        }
        if let value = dict["pageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["resultObject"] as? [Any?] {
            var tmp : [DescribeEventLogPageResponseBody.ResultObject] = []
            for v in value {
                if v != nil {
                    var model = DescribeEventLogPageResponseBody.ResultObject()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.resultObject = tmp
        }
        if let value = dict["totalItem"] as? Int32 {
            self.totalItem = value
        }
        if let value = dict["totalPage"] as? Int32 {
            self.totalPage = value
        }
    }
}

public class DescribeEventLogPageResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeEventLogPageResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeEventLogPageResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeEventPageListRequest : Tea.TeaModel {
    public var lang: String?

    public var createType: String?

    public var currentPage: Int32?

    public var eventCode: String?

    public var eventName: String?

    public var eventStatus: String?

    public var pageSize: Int32?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.createType != nil {
            map["createType"] = self.createType!
        }
        if self.currentPage != nil {
            map["currentPage"] = self.currentPage!
        }
        if self.eventCode != nil {
            map["eventCode"] = self.eventCode!
        }
        if self.eventName != nil {
            map["eventName"] = self.eventName!
        }
        if self.eventStatus != nil {
            map["eventStatus"] = self.eventStatus!
        }
        if self.pageSize != nil {
            map["pageSize"] = self.pageSize!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["createType"] as? String {
            self.createType = value
        }
        if let value = dict["currentPage"] as? Int32 {
            self.currentPage = value
        }
        if let value = dict["eventCode"] as? String {
            self.eventCode = value
        }
        if let value = dict["eventName"] as? String {
            self.eventName = value
        }
        if let value = dict["eventStatus"] as? String {
            self.eventStatus = value
        }
        if let value = dict["pageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeEventPageListResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public class Children : Tea.TeaModel {
            public var eventCode: String?

            public var eventName: String?

            public var eventStatus: String?

            public var eventType: String?

            public var gmtCreate: Int64?

            public var gmtModified: Int64?

            public var id: Int64?

            public var ruleCount: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.eventCode != nil {
                    map["eventCode"] = self.eventCode!
                }
                if self.eventName != nil {
                    map["eventName"] = self.eventName!
                }
                if self.eventStatus != nil {
                    map["eventStatus"] = self.eventStatus!
                }
                if self.eventType != nil {
                    map["eventType"] = self.eventType!
                }
                if self.gmtCreate != nil {
                    map["gmtCreate"] = self.gmtCreate!
                }
                if self.gmtModified != nil {
                    map["gmtModified"] = self.gmtModified!
                }
                if self.id != nil {
                    map["id"] = self.id!
                }
                if self.ruleCount != nil {
                    map["ruleCount"] = self.ruleCount!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["eventCode"] as? String {
                    self.eventCode = value
                }
                if let value = dict["eventName"] as? String {
                    self.eventName = value
                }
                if let value = dict["eventStatus"] as? String {
                    self.eventStatus = value
                }
                if let value = dict["eventType"] as? String {
                    self.eventType = value
                }
                if let value = dict["gmtCreate"] as? Int64 {
                    self.gmtCreate = value
                }
                if let value = dict["gmtModified"] as? Int64 {
                    self.gmtModified = value
                }
                if let value = dict["id"] as? Int64 {
                    self.id = value
                }
                if let value = dict["ruleCount"] as? Int64 {
                    self.ruleCount = value
                }
            }
        }
        public var children: [DescribeEventPageListResponseBody.ResultObject.Children]?

        public var eventCode: String?

        public var eventName: String?

        public var eventStatus: String?

        public var eventType: String?

        public var gmtCreate: Int64?

        public var gmtModified: Int64?

        public var id: Int64?

        public var ruleCount: Int32?

        public var templateCode: String?

        public var templateName: String?

        public var templateType: String?

        public var userCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.children != nil {
                var tmp : [Any] = []
                for k in self.children! {
                    tmp.append(k.toMap())
                }
                map["children"] = tmp
            }
            if self.eventCode != nil {
                map["eventCode"] = self.eventCode!
            }
            if self.eventName != nil {
                map["eventName"] = self.eventName!
            }
            if self.eventStatus != nil {
                map["eventStatus"] = self.eventStatus!
            }
            if self.eventType != nil {
                map["eventType"] = self.eventType!
            }
            if self.gmtCreate != nil {
                map["gmtCreate"] = self.gmtCreate!
            }
            if self.gmtModified != nil {
                map["gmtModified"] = self.gmtModified!
            }
            if self.id != nil {
                map["id"] = self.id!
            }
            if self.ruleCount != nil {
                map["ruleCount"] = self.ruleCount!
            }
            if self.templateCode != nil {
                map["templateCode"] = self.templateCode!
            }
            if self.templateName != nil {
                map["templateName"] = self.templateName!
            }
            if self.templateType != nil {
                map["templateType"] = self.templateType!
            }
            if self.userCount != nil {
                map["userCount"] = self.userCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["children"] as? [Any?] {
                var tmp : [DescribeEventPageListResponseBody.ResultObject.Children] = []
                for v in value {
                    if v != nil {
                        var model = DescribeEventPageListResponseBody.ResultObject.Children()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.children = tmp
            }
            if let value = dict["eventCode"] as? String {
                self.eventCode = value
            }
            if let value = dict["eventName"] as? String {
                self.eventName = value
            }
            if let value = dict["eventStatus"] as? String {
                self.eventStatus = value
            }
            if let value = dict["eventType"] as? String {
                self.eventType = value
            }
            if let value = dict["gmtCreate"] as? Int64 {
                self.gmtCreate = value
            }
            if let value = dict["gmtModified"] as? Int64 {
                self.gmtModified = value
            }
            if let value = dict["id"] as? Int64 {
                self.id = value
            }
            if let value = dict["ruleCount"] as? Int32 {
                self.ruleCount = value
            }
            if let value = dict["templateCode"] as? String {
                self.templateCode = value
            }
            if let value = dict["templateName"] as? String {
                self.templateName = value
            }
            if let value = dict["templateType"] as? String {
                self.templateType = value
            }
            if let value = dict["userCount"] as? Int32 {
                self.userCount = value
            }
        }
    }
    public var requestId: String?

    public var currentPage: Int32?

    public var pageSize: Int32?

    public var resultObject: [DescribeEventPageListResponseBody.ResultObject]?

    public var totalItem: Int32?

    public var totalPage: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.currentPage != nil {
            map["currentPage"] = self.currentPage!
        }
        if self.pageSize != nil {
            map["pageSize"] = self.pageSize!
        }
        if self.resultObject != nil {
            var tmp : [Any] = []
            for k in self.resultObject! {
                tmp.append(k.toMap())
            }
            map["resultObject"] = tmp
        }
        if self.totalItem != nil {
            map["totalItem"] = self.totalItem!
        }
        if self.totalPage != nil {
            map["totalPage"] = self.totalPage!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["currentPage"] as? Int32 {
            self.currentPage = value
        }
        if let value = dict["pageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["resultObject"] as? [Any?] {
            var tmp : [DescribeEventPageListResponseBody.ResultObject] = []
            for v in value {
                if v != nil {
                    var model = DescribeEventPageListResponseBody.ResultObject()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.resultObject = tmp
        }
        if let value = dict["totalItem"] as? Int32 {
            self.totalItem = value
        }
        if let value = dict["totalPage"] as? Int32 {
            self.totalPage = value
        }
    }
}

public class DescribeEventPageListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeEventPageListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeEventPageListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeEventResultBarChartRequest : Tea.TeaModel {
    public var lang: String?

    public var beginTime: Int64?

    public var endTime: Int64?

    public var eventCodes: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.beginTime != nil {
            map["beginTime"] = self.beginTime!
        }
        if self.endTime != nil {
            map["endTime"] = self.endTime!
        }
        if self.eventCodes != nil {
            map["eventCodes"] = self.eventCodes!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["beginTime"] as? Int64 {
            self.beginTime = value
        }
        if let value = dict["endTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["eventCodes"] as? String {
            self.eventCodes = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeEventResultBarChartResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public class Series : Tea.TeaModel {
            public class Data : Tea.TeaModel {
                public var num: Int64?

                public var scale: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.num != nil {
                        map["num"] = self.num!
                    }
                    if self.scale != nil {
                        map["scale"] = self.scale!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["num"] as? Int64 {
                        self.num = value
                    }
                    if let value = dict["scale"] as? String {
                        self.scale = value
                    }
                }
            }
            public var data: [DescribeEventResultBarChartResponseBody.ResultObject.Series.Data]?

            public var name: String?

            public var stack: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.data != nil {
                    var tmp : [Any] = []
                    for k in self.data! {
                        tmp.append(k.toMap())
                    }
                    map["data"] = tmp
                }
                if self.name != nil {
                    map["name"] = self.name!
                }
                if self.stack != nil {
                    map["stack"] = self.stack!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["data"] as? [Any?] {
                    var tmp : [DescribeEventResultBarChartResponseBody.ResultObject.Series.Data] = []
                    for v in value {
                        if v != nil {
                            var model = DescribeEventResultBarChartResponseBody.ResultObject.Series.Data()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.data = tmp
                }
                if let value = dict["name"] as? String {
                    self.name = value
                }
                if let value = dict["stack"] as? String {
                    self.stack = value
                }
            }
        }
        public class Xaxis : Tea.TeaModel {
            public var data: [String]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.data != nil {
                    map["data"] = self.data!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["data"] as? [String] {
                    self.data = value
                }
            }
        }
        public var series: [DescribeEventResultBarChartResponseBody.ResultObject.Series]?

        public var xaxis: DescribeEventResultBarChartResponseBody.ResultObject.Xaxis?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.xaxis?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.series != nil {
                var tmp : [Any] = []
                for k in self.series! {
                    tmp.append(k.toMap())
                }
                map["series"] = tmp
            }
            if self.xaxis != nil {
                map["xaxis"] = self.xaxis?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["series"] as? [Any?] {
                var tmp : [DescribeEventResultBarChartResponseBody.ResultObject.Series] = []
                for v in value {
                    if v != nil {
                        var model = DescribeEventResultBarChartResponseBody.ResultObject.Series()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.series = tmp
            }
            if let value = dict["xaxis"] as? [String: Any?] {
                var model = DescribeEventResultBarChartResponseBody.ResultObject.Xaxis()
                model.fromMap(value)
                self.xaxis = model
            }
        }
    }
    public var code: String?

    public var httpStatusCode: String?

    public var message: String?

    public var requestId: String?

    public var resultObject: DescribeEventResultBarChartResponseBody.ResultObject?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.resultObject?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["httpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject?.toMap()
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["httpStatusCode"] as? String {
            self.httpStatusCode = value
        }
        if let value = dict["message"] as? String {
            self.message = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? [String: Any?] {
            var model = DescribeEventResultBarChartResponseBody.ResultObject()
            model.fromMap(value)
            self.resultObject = model
        }
        if let value = dict["success"] as? Bool {
            self.success = value
        }
    }
}

public class DescribeEventResultBarChartResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeEventResultBarChartResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeEventResultBarChartResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeEventResultListRequest : Tea.TeaModel {
    public var lang: String?

    public var beginTime: Int64?

    public var currentPage: Int64?

    public var endTime: Int64?

    public var pageSize: Int64?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.beginTime != nil {
            map["beginTime"] = self.beginTime!
        }
        if self.currentPage != nil {
            map["currentPage"] = self.currentPage!
        }
        if self.endTime != nil {
            map["endTime"] = self.endTime!
        }
        if self.pageSize != nil {
            map["pageSize"] = self.pageSize!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["beginTime"] as? Int64 {
            self.beginTime = value
        }
        if let value = dict["currentPage"] as? Int64 {
            self.currentPage = value
        }
        if let value = dict["endTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["pageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeEventResultListResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public var eventCode: String?

        public var eventName: String?

        public var passNum: Int64?

        public var pendingNum: Int64?

        public var rejectNum: Int64?

        public var totalNum: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.eventCode != nil {
                map["eventCode"] = self.eventCode!
            }
            if self.eventName != nil {
                map["eventName"] = self.eventName!
            }
            if self.passNum != nil {
                map["passNum"] = self.passNum!
            }
            if self.pendingNum != nil {
                map["pendingNum"] = self.pendingNum!
            }
            if self.rejectNum != nil {
                map["rejectNum"] = self.rejectNum!
            }
            if self.totalNum != nil {
                map["totalNum"] = self.totalNum!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["eventCode"] as? String {
                self.eventCode = value
            }
            if let value = dict["eventName"] as? String {
                self.eventName = value
            }
            if let value = dict["passNum"] as? Int64 {
                self.passNum = value
            }
            if let value = dict["pendingNum"] as? Int64 {
                self.pendingNum = value
            }
            if let value = dict["rejectNum"] as? Int64 {
                self.rejectNum = value
            }
            if let value = dict["totalNum"] as? Int64 {
                self.totalNum = value
            }
        }
    }
    public var code: String?

    public var currentPage: Int64?

    public var httpStatusCode: String?

    public var message: String?

    public var pageSize: Int64?

    public var requestId: String?

    public var resultObject: [DescribeEventResultListResponseBody.ResultObject]?

    public var success: Bool?

    public var totalItem: Int64?

    public var totalPage: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.currentPage != nil {
            map["currentPage"] = self.currentPage!
        }
        if self.httpStatusCode != nil {
            map["httpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.pageSize != nil {
            map["pageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.resultObject != nil {
            var tmp : [Any] = []
            for k in self.resultObject! {
                tmp.append(k.toMap())
            }
            map["resultObject"] = tmp
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.totalItem != nil {
            map["totalItem"] = self.totalItem!
        }
        if self.totalPage != nil {
            map["totalPage"] = self.totalPage!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["currentPage"] as? Int64 {
            self.currentPage = value
        }
        if let value = dict["httpStatusCode"] as? String {
            self.httpStatusCode = value
        }
        if let value = dict["message"] as? String {
            self.message = value
        }
        if let value = dict["pageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? [Any?] {
            var tmp : [DescribeEventResultListResponseBody.ResultObject] = []
            for v in value {
                if v != nil {
                    var model = DescribeEventResultListResponseBody.ResultObject()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.resultObject = tmp
        }
        if let value = dict["success"] as? Bool {
            self.success = value
        }
        if let value = dict["totalItem"] as? Int64 {
            self.totalItem = value
        }
        if let value = dict["totalPage"] as? Int64 {
            self.totalPage = value
        }
    }
}

public class DescribeEventResultListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeEventResultListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeEventResultListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeEventTaskHistoryRequest : Tea.TeaModel {
    public var lang: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeEventTaskHistoryResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public var taskCode: String?

        public var taskName: String?

        public var taskStatus: String?

        public var url: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.taskCode != nil {
                map["taskCode"] = self.taskCode!
            }
            if self.taskName != nil {
                map["taskName"] = self.taskName!
            }
            if self.taskStatus != nil {
                map["taskStatus"] = self.taskStatus!
            }
            if self.url != nil {
                map["url"] = self.url!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["taskCode"] as? String {
                self.taskCode = value
            }
            if let value = dict["taskName"] as? String {
                self.taskName = value
            }
            if let value = dict["taskStatus"] as? String {
                self.taskStatus = value
            }
            if let value = dict["url"] as? String {
                self.url = value
            }
        }
    }
    public var requestId: String?

    public var resultObject: [DescribeEventTaskHistoryResponseBody.ResultObject]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            var tmp : [Any] = []
            for k in self.resultObject! {
                tmp.append(k.toMap())
            }
            map["resultObject"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? [Any?] {
            var tmp : [DescribeEventTaskHistoryResponseBody.ResultObject] = []
            for v in value {
                if v != nil {
                    var model = DescribeEventTaskHistoryResponseBody.ResultObject()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.resultObject = tmp
        }
    }
}

public class DescribeEventTaskHistoryResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeEventTaskHistoryResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeEventTaskHistoryResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeEventTotalCountReportRequest : Tea.TeaModel {
    public var lang: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeEventTotalCountReportResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public var ratio: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.ratio != nil {
                map["ratio"] = self.ratio!
            }
            if self.value != nil {
                map["value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ratio"] as? String {
                self.ratio = value
            }
            if let value = dict["value"] as? String {
                self.value = value
            }
        }
    }
    public var code: String?

    public var httpStatusCode: String?

    public var message: String?

    public var requestId: String?

    public var resultObject: DescribeEventTotalCountReportResponseBody.ResultObject?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.resultObject?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["httpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject?.toMap()
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["httpStatusCode"] as? String {
            self.httpStatusCode = value
        }
        if let value = dict["message"] as? String {
            self.message = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? [String: Any?] {
            var model = DescribeEventTotalCountReportResponseBody.ResultObject()
            model.fromMap(value)
            self.resultObject = model
        }
        if let value = dict["success"] as? Bool {
            self.success = value
        }
    }
}

public class DescribeEventTotalCountReportResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeEventTotalCountReportResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeEventTotalCountReportResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeEventUploadPolicyRequest : Tea.TeaModel {
    public var lang: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeEventUploadPolicyResponseBody : Tea.TeaModel {
    public var accessId: String?

    public var host: String?

    public var key: String?

    public var policy: String?

    public var requestId: String?

    public var signature: String?

    public var stsToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.accessId != nil {
            map["AccessId"] = self.accessId!
        }
        if self.host != nil {
            map["Host"] = self.host!
        }
        if self.key != nil {
            map["Key"] = self.key!
        }
        if self.policy != nil {
            map["Policy"] = self.policy!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.signature != nil {
            map["Signature"] = self.signature!
        }
        if self.stsToken != nil {
            map["StsToken"] = self.stsToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AccessId"] as? String {
            self.accessId = value
        }
        if let value = dict["Host"] as? String {
            self.host = value
        }
        if let value = dict["Key"] as? String {
            self.key = value
        }
        if let value = dict["Policy"] as? String {
            self.policy = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Signature"] as? String {
            self.signature = value
        }
        if let value = dict["StsToken"] as? String {
            self.stsToken = value
        }
    }
}

public class DescribeEventUploadPolicyResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeEventUploadPolicyResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeEventUploadPolicyResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeEventVariableListRequest : Tea.TeaModel {
    public var lang: String?

    public var createType: String?

    public var filterDTO: String?

    public var refObjId: String?

    public var refObjType: String?

    public var regId: String?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.createType != nil {
            map["createType"] = self.createType!
        }
        if self.filterDTO != nil {
            map["filterDTO"] = self.filterDTO!
        }
        if self.refObjId != nil {
            map["refObjId"] = self.refObjId!
        }
        if self.refObjType != nil {
            map["refObjType"] = self.refObjType!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.type != nil {
            map["type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["createType"] as? String {
            self.createType = value
        }
        if let value = dict["filterDTO"] as? String {
            self.filterDTO = value
        }
        if let value = dict["refObjId"] as? String {
            self.refObjId = value
        }
        if let value = dict["refObjType"] as? String {
            self.refObjType = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["type"] as? String {
            self.type = value
        }
    }
}

public class DescribeEventVariableListResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public class Actions : Tea.TeaModel {
            public class OutputThreshold : Tea.TeaModel {
                public var maxValue: Double?

                public var minValue: Double?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.maxValue != nil {
                        map["maxValue"] = self.maxValue!
                    }
                    if self.minValue != nil {
                        map["minValue"] = self.minValue!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["maxValue"] as? Double {
                        self.maxValue = value
                    }
                    if let value = dict["minValue"] as? Double {
                        self.minValue = value
                    }
                }
            }
            public class VariableVelocity : Tea.TeaModel {
                public var iv: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.iv != nil {
                        map["iv"] = self.iv!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["iv"] as? String {
                        self.iv = value
                    }
                }
            }
            public var code: String?

            public var dataDisplay: String?

            public var defineId: String?

            public var description_: String?

            public var displayType: String?

            public var expressionTitle: String?

            public var favoriteFlag: Bool?

            public var fieldDetail: String?

            public var fieldRank: Int32?

            public var fieldSource: String?

            public var fieldType: String?

            public var id: Int64?

            public var inputFieldType: String?

            public var inputRequired: String?

            public var inputs: String?

            public var name: String?

            public var outlier: String?

            public var outputThreshold: DescribeEventVariableListResponseBody.ResultObject.Actions.OutputThreshold?

            public var parentName: String?

            public var sourceType: String?

            public var title: String?

            public var type: String?

            public var variableVelocity: DescribeEventVariableListResponseBody.ResultObject.Actions.VariableVelocity?

            public var xLabel: String?

            public var yLabel: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.outputThreshold?.validate()
                try self.variableVelocity?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.code != nil {
                    map["code"] = self.code!
                }
                if self.dataDisplay != nil {
                    map["dataDisplay"] = self.dataDisplay!
                }
                if self.defineId != nil {
                    map["defineId"] = self.defineId!
                }
                if self.description_ != nil {
                    map["description"] = self.description_!
                }
                if self.displayType != nil {
                    map["displayType"] = self.displayType!
                }
                if self.expressionTitle != nil {
                    map["expressionTitle"] = self.expressionTitle!
                }
                if self.favoriteFlag != nil {
                    map["favoriteFlag"] = self.favoriteFlag!
                }
                if self.fieldDetail != nil {
                    map["fieldDetail"] = self.fieldDetail!
                }
                if self.fieldRank != nil {
                    map["fieldRank"] = self.fieldRank!
                }
                if self.fieldSource != nil {
                    map["fieldSource"] = self.fieldSource!
                }
                if self.fieldType != nil {
                    map["fieldType"] = self.fieldType!
                }
                if self.id != nil {
                    map["id"] = self.id!
                }
                if self.inputFieldType != nil {
                    map["inputFieldType"] = self.inputFieldType!
                }
                if self.inputRequired != nil {
                    map["inputRequired"] = self.inputRequired!
                }
                if self.inputs != nil {
                    map["inputs"] = self.inputs!
                }
                if self.name != nil {
                    map["name"] = self.name!
                }
                if self.outlier != nil {
                    map["outlier"] = self.outlier!
                }
                if self.outputThreshold != nil {
                    map["outputThreshold"] = self.outputThreshold?.toMap()
                }
                if self.parentName != nil {
                    map["parentName"] = self.parentName!
                }
                if self.sourceType != nil {
                    map["sourceType"] = self.sourceType!
                }
                if self.title != nil {
                    map["title"] = self.title!
                }
                if self.type != nil {
                    map["type"] = self.type!
                }
                if self.variableVelocity != nil {
                    map["variableVelocity"] = self.variableVelocity?.toMap()
                }
                if self.xLabel != nil {
                    map["xLabel"] = self.xLabel!
                }
                if self.yLabel != nil {
                    map["yLabel"] = self.yLabel!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["code"] as? String {
                    self.code = value
                }
                if let value = dict["dataDisplay"] as? String {
                    self.dataDisplay = value
                }
                if let value = dict["defineId"] as? String {
                    self.defineId = value
                }
                if let value = dict["description"] as? String {
                    self.description_ = value
                }
                if let value = dict["displayType"] as? String {
                    self.displayType = value
                }
                if let value = dict["expressionTitle"] as? String {
                    self.expressionTitle = value
                }
                if let value = dict["favoriteFlag"] as? Bool {
                    self.favoriteFlag = value
                }
                if let value = dict["fieldDetail"] as? String {
                    self.fieldDetail = value
                }
                if let value = dict["fieldRank"] as? Int32 {
                    self.fieldRank = value
                }
                if let value = dict["fieldSource"] as? String {
                    self.fieldSource = value
                }
                if let value = dict["fieldType"] as? String {
                    self.fieldType = value
                }
                if let value = dict["id"] as? Int64 {
                    self.id = value
                }
                if let value = dict["inputFieldType"] as? String {
                    self.inputFieldType = value
                }
                if let value = dict["inputRequired"] as? String {
                    self.inputRequired = value
                }
                if let value = dict["inputs"] as? String {
                    self.inputs = value
                }
                if let value = dict["name"] as? String {
                    self.name = value
                }
                if let value = dict["outlier"] as? String {
                    self.outlier = value
                }
                if let value = dict["outputThreshold"] as? [String: Any?] {
                    var model = DescribeEventVariableListResponseBody.ResultObject.Actions.OutputThreshold()
                    model.fromMap(value)
                    self.outputThreshold = model
                }
                if let value = dict["parentName"] as? String {
                    self.parentName = value
                }
                if let value = dict["sourceType"] as? String {
                    self.sourceType = value
                }
                if let value = dict["title"] as? String {
                    self.title = value
                }
                if let value = dict["type"] as? String {
                    self.type = value
                }
                if let value = dict["variableVelocity"] as? [String: Any?] {
                    var model = DescribeEventVariableListResponseBody.ResultObject.Actions.VariableVelocity()
                    model.fromMap(value)
                    self.variableVelocity = model
                }
                if let value = dict["xLabel"] as? String {
                    self.xLabel = value
                }
                if let value = dict["yLabel"] as? String {
                    self.yLabel = value
                }
            }
        }
        public class DeviceVariables : Tea.TeaModel {
            public class OutputThreshold : Tea.TeaModel {
                public var maxValue: Double?

                public var minValue: Double?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.maxValue != nil {
                        map["maxValue"] = self.maxValue!
                    }
                    if self.minValue != nil {
                        map["minValue"] = self.minValue!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["maxValue"] as? Double {
                        self.maxValue = value
                    }
                    if let value = dict["minValue"] as? Double {
                        self.minValue = value
                    }
                }
            }
            public class VariableVelocity : Tea.TeaModel {
                public var iv: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.iv != nil {
                        map["iv"] = self.iv!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["iv"] as? String {
                        self.iv = value
                    }
                }
            }
            public var code: String?

            public var dataDisplay: String?

            public var defineId: String?

            public var description_: String?

            public var displayType: String?

            public var expressionTitle: String?

            public var favoriteFlag: Bool?

            public var fieldDetail: String?

            public var fieldRank: Int32?

            public var fieldSource: String?

            public var fieldType: String?

            public var id: Int64?

            public var inputFieldType: String?

            public var inputRequired: String?

            public var inputs: String?

            public var name: String?

            public var outlier: String?

            public var outputThreshold: DescribeEventVariableListResponseBody.ResultObject.DeviceVariables.OutputThreshold?

            public var parentName: String?

            public var sourceType: String?

            public var title: String?

            public var type: String?

            public var variableVelocity: DescribeEventVariableListResponseBody.ResultObject.DeviceVariables.VariableVelocity?

            public var xLabel: String?

            public var yLabel: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.outputThreshold?.validate()
                try self.variableVelocity?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.code != nil {
                    map["code"] = self.code!
                }
                if self.dataDisplay != nil {
                    map["dataDisplay"] = self.dataDisplay!
                }
                if self.defineId != nil {
                    map["defineId"] = self.defineId!
                }
                if self.description_ != nil {
                    map["description"] = self.description_!
                }
                if self.displayType != nil {
                    map["displayType"] = self.displayType!
                }
                if self.expressionTitle != nil {
                    map["expressionTitle"] = self.expressionTitle!
                }
                if self.favoriteFlag != nil {
                    map["favoriteFlag"] = self.favoriteFlag!
                }
                if self.fieldDetail != nil {
                    map["fieldDetail"] = self.fieldDetail!
                }
                if self.fieldRank != nil {
                    map["fieldRank"] = self.fieldRank!
                }
                if self.fieldSource != nil {
                    map["fieldSource"] = self.fieldSource!
                }
                if self.fieldType != nil {
                    map["fieldType"] = self.fieldType!
                }
                if self.id != nil {
                    map["id"] = self.id!
                }
                if self.inputFieldType != nil {
                    map["inputFieldType"] = self.inputFieldType!
                }
                if self.inputRequired != nil {
                    map["inputRequired"] = self.inputRequired!
                }
                if self.inputs != nil {
                    map["inputs"] = self.inputs!
                }
                if self.name != nil {
                    map["name"] = self.name!
                }
                if self.outlier != nil {
                    map["outlier"] = self.outlier!
                }
                if self.outputThreshold != nil {
                    map["outputThreshold"] = self.outputThreshold?.toMap()
                }
                if self.parentName != nil {
                    map["parentName"] = self.parentName!
                }
                if self.sourceType != nil {
                    map["sourceType"] = self.sourceType!
                }
                if self.title != nil {
                    map["title"] = self.title!
                }
                if self.type != nil {
                    map["type"] = self.type!
                }
                if self.variableVelocity != nil {
                    map["variableVelocity"] = self.variableVelocity?.toMap()
                }
                if self.xLabel != nil {
                    map["xLabel"] = self.xLabel!
                }
                if self.yLabel != nil {
                    map["yLabel"] = self.yLabel!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["code"] as? String {
                    self.code = value
                }
                if let value = dict["dataDisplay"] as? String {
                    self.dataDisplay = value
                }
                if let value = dict["defineId"] as? String {
                    self.defineId = value
                }
                if let value = dict["description"] as? String {
                    self.description_ = value
                }
                if let value = dict["displayType"] as? String {
                    self.displayType = value
                }
                if let value = dict["expressionTitle"] as? String {
                    self.expressionTitle = value
                }
                if let value = dict["favoriteFlag"] as? Bool {
                    self.favoriteFlag = value
                }
                if let value = dict["fieldDetail"] as? String {
                    self.fieldDetail = value
                }
                if let value = dict["fieldRank"] as? Int32 {
                    self.fieldRank = value
                }
                if let value = dict["fieldSource"] as? String {
                    self.fieldSource = value
                }
                if let value = dict["fieldType"] as? String {
                    self.fieldType = value
                }
                if let value = dict["id"] as? Int64 {
                    self.id = value
                }
                if let value = dict["inputFieldType"] as? String {
                    self.inputFieldType = value
                }
                if let value = dict["inputRequired"] as? String {
                    self.inputRequired = value
                }
                if let value = dict["inputs"] as? String {
                    self.inputs = value
                }
                if let value = dict["name"] as? String {
                    self.name = value
                }
                if let value = dict["outlier"] as? String {
                    self.outlier = value
                }
                if let value = dict["outputThreshold"] as? [String: Any?] {
                    var model = DescribeEventVariableListResponseBody.ResultObject.DeviceVariables.OutputThreshold()
                    model.fromMap(value)
                    self.outputThreshold = model
                }
                if let value = dict["parentName"] as? String {
                    self.parentName = value
                }
                if let value = dict["sourceType"] as? String {
                    self.sourceType = value
                }
                if let value = dict["title"] as? String {
                    self.title = value
                }
                if let value = dict["type"] as? String {
                    self.type = value
                }
                if let value = dict["variableVelocity"] as? [String: Any?] {
                    var model = DescribeEventVariableListResponseBody.ResultObject.DeviceVariables.VariableVelocity()
                    model.fromMap(value)
                    self.variableVelocity = model
                }
                if let value = dict["xLabel"] as? String {
                    self.xLabel = value
                }
                if let value = dict["yLabel"] as? String {
                    self.yLabel = value
                }
            }
        }
        public class ExpressionVariables : Tea.TeaModel {
            public class OutputThreshold : Tea.TeaModel {
                public var maxValue: Double?

                public var minValue: Double?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.maxValue != nil {
                        map["maxValue"] = self.maxValue!
                    }
                    if self.minValue != nil {
                        map["minValue"] = self.minValue!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["maxValue"] as? Double {
                        self.maxValue = value
                    }
                    if let value = dict["minValue"] as? Double {
                        self.minValue = value
                    }
                }
            }
            public class VariableVelocity : Tea.TeaModel {
                public var iv: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.iv != nil {
                        map["iv"] = self.iv!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["iv"] as? String {
                        self.iv = value
                    }
                }
            }
            public var code: String?

            public var dataDisplay: String?

            public var defineId: String?

            public var description_: String?

            public var displayType: String?

            public var expressionTitle: String?

            public var favoriteFlag: Bool?

            public var fieldDetail: String?

            public var fieldRank: Int32?

            public var fieldSource: String?

            public var fieldType: String?

            public var id: Int64?

            public var inputFieldType: String?

            public var inputRequired: String?

            public var inputs: String?

            public var name: String?

            public var outlier: String?

            public var outputThreshold: DescribeEventVariableListResponseBody.ResultObject.ExpressionVariables.OutputThreshold?

            public var parentName: String?

            public var sourceType: String?

            public var title: String?

            public var type: String?

            public var variableVelocity: DescribeEventVariableListResponseBody.ResultObject.ExpressionVariables.VariableVelocity?

            public var xLabel: String?

            public var yLabel: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.outputThreshold?.validate()
                try self.variableVelocity?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.code != nil {
                    map["code"] = self.code!
                }
                if self.dataDisplay != nil {
                    map["dataDisplay"] = self.dataDisplay!
                }
                if self.defineId != nil {
                    map["defineId"] = self.defineId!
                }
                if self.description_ != nil {
                    map["description"] = self.description_!
                }
                if self.displayType != nil {
                    map["displayType"] = self.displayType!
                }
                if self.expressionTitle != nil {
                    map["expressionTitle"] = self.expressionTitle!
                }
                if self.favoriteFlag != nil {
                    map["favoriteFlag"] = self.favoriteFlag!
                }
                if self.fieldDetail != nil {
                    map["fieldDetail"] = self.fieldDetail!
                }
                if self.fieldRank != nil {
                    map["fieldRank"] = self.fieldRank!
                }
                if self.fieldSource != nil {
                    map["fieldSource"] = self.fieldSource!
                }
                if self.fieldType != nil {
                    map["fieldType"] = self.fieldType!
                }
                if self.id != nil {
                    map["id"] = self.id!
                }
                if self.inputFieldType != nil {
                    map["inputFieldType"] = self.inputFieldType!
                }
                if self.inputRequired != nil {
                    map["inputRequired"] = self.inputRequired!
                }
                if self.inputs != nil {
                    map["inputs"] = self.inputs!
                }
                if self.name != nil {
                    map["name"] = self.name!
                }
                if self.outlier != nil {
                    map["outlier"] = self.outlier!
                }
                if self.outputThreshold != nil {
                    map["outputThreshold"] = self.outputThreshold?.toMap()
                }
                if self.parentName != nil {
                    map["parentName"] = self.parentName!
                }
                if self.sourceType != nil {
                    map["sourceType"] = self.sourceType!
                }
                if self.title != nil {
                    map["title"] = self.title!
                }
                if self.type != nil {
                    map["type"] = self.type!
                }
                if self.variableVelocity != nil {
                    map["variableVelocity"] = self.variableVelocity?.toMap()
                }
                if self.xLabel != nil {
                    map["xLabel"] = self.xLabel!
                }
                if self.yLabel != nil {
                    map["yLabel"] = self.yLabel!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["code"] as? String {
                    self.code = value
                }
                if let value = dict["dataDisplay"] as? String {
                    self.dataDisplay = value
                }
                if let value = dict["defineId"] as? String {
                    self.defineId = value
                }
                if let value = dict["description"] as? String {
                    self.description_ = value
                }
                if let value = dict["displayType"] as? String {
                    self.displayType = value
                }
                if let value = dict["expressionTitle"] as? String {
                    self.expressionTitle = value
                }
                if let value = dict["favoriteFlag"] as? Bool {
                    self.favoriteFlag = value
                }
                if let value = dict["fieldDetail"] as? String {
                    self.fieldDetail = value
                }
                if let value = dict["fieldRank"] as? Int32 {
                    self.fieldRank = value
                }
                if let value = dict["fieldSource"] as? String {
                    self.fieldSource = value
                }
                if let value = dict["fieldType"] as? String {
                    self.fieldType = value
                }
                if let value = dict["id"] as? Int64 {
                    self.id = value
                }
                if let value = dict["inputFieldType"] as? String {
                    self.inputFieldType = value
                }
                if let value = dict["inputRequired"] as? String {
                    self.inputRequired = value
                }
                if let value = dict["inputs"] as? String {
                    self.inputs = value
                }
                if let value = dict["name"] as? String {
                    self.name = value
                }
                if let value = dict["outlier"] as? String {
                    self.outlier = value
                }
                if let value = dict["outputThreshold"] as? [String: Any?] {
                    var model = DescribeEventVariableListResponseBody.ResultObject.ExpressionVariables.OutputThreshold()
                    model.fromMap(value)
                    self.outputThreshold = model
                }
                if let value = dict["parentName"] as? String {
                    self.parentName = value
                }
                if let value = dict["sourceType"] as? String {
                    self.sourceType = value
                }
                if let value = dict["title"] as? String {
                    self.title = value
                }
                if let value = dict["type"] as? String {
                    self.type = value
                }
                if let value = dict["variableVelocity"] as? [String: Any?] {
                    var model = DescribeEventVariableListResponseBody.ResultObject.ExpressionVariables.VariableVelocity()
                    model.fromMap(value)
                    self.variableVelocity = model
                }
                if let value = dict["xLabel"] as? String {
                    self.xLabel = value
                }
                if let value = dict["yLabel"] as? String {
                    self.yLabel = value
                }
            }
        }
        public class FavoriteVariables : Tea.TeaModel {
            public class OutputThreshold : Tea.TeaModel {
                public var maxValue: Double?

                public var minValue: Double?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.maxValue != nil {
                        map["maxValue"] = self.maxValue!
                    }
                    if self.minValue != nil {
                        map["minValue"] = self.minValue!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["maxValue"] as? Double {
                        self.maxValue = value
                    }
                    if let value = dict["minValue"] as? Double {
                        self.minValue = value
                    }
                }
            }
            public class VariableVelocity : Tea.TeaModel {
                public var iv: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.iv != nil {
                        map["iv"] = self.iv!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["iv"] as? String {
                        self.iv = value
                    }
                }
            }
            public var code: String?

            public var dataDisplay: String?

            public var defineId: String?

            public var description_: String?

            public var displayType: String?

            public var expressionTitle: String?

            public var favoriteFlag: Bool?

            public var fieldDetail: String?

            public var fieldRank: Int32?

            public var fieldSource: String?

            public var fieldType: String?

            public var id: Int64?

            public var inputFieldType: String?

            public var inputRequired: String?

            public var inputs: String?

            public var name: String?

            public var outlier: String?

            public var outputThreshold: DescribeEventVariableListResponseBody.ResultObject.FavoriteVariables.OutputThreshold?

            public var parentName: String?

            public var sourceType: String?

            public var title: String?

            public var type: String?

            public var variableVelocity: DescribeEventVariableListResponseBody.ResultObject.FavoriteVariables.VariableVelocity?

            public var xLabel: String?

            public var yLabel: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.outputThreshold?.validate()
                try self.variableVelocity?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.code != nil {
                    map["code"] = self.code!
                }
                if self.dataDisplay != nil {
                    map["dataDisplay"] = self.dataDisplay!
                }
                if self.defineId != nil {
                    map["defineId"] = self.defineId!
                }
                if self.description_ != nil {
                    map["description"] = self.description_!
                }
                if self.displayType != nil {
                    map["displayType"] = self.displayType!
                }
                if self.expressionTitle != nil {
                    map["expressionTitle"] = self.expressionTitle!
                }
                if self.favoriteFlag != nil {
                    map["favoriteFlag"] = self.favoriteFlag!
                }
                if self.fieldDetail != nil {
                    map["fieldDetail"] = self.fieldDetail!
                }
                if self.fieldRank != nil {
                    map["fieldRank"] = self.fieldRank!
                }
                if self.fieldSource != nil {
                    map["fieldSource"] = self.fieldSource!
                }
                if self.fieldType != nil {
                    map["fieldType"] = self.fieldType!
                }
                if self.id != nil {
                    map["id"] = self.id!
                }
                if self.inputFieldType != nil {
                    map["inputFieldType"] = self.inputFieldType!
                }
                if self.inputRequired != nil {
                    map["inputRequired"] = self.inputRequired!
                }
                if self.inputs != nil {
                    map["inputs"] = self.inputs!
                }
                if self.name != nil {
                    map["name"] = self.name!
                }
                if self.outlier != nil {
                    map["outlier"] = self.outlier!
                }
                if self.outputThreshold != nil {
                    map["outputThreshold"] = self.outputThreshold?.toMap()
                }
                if self.parentName != nil {
                    map["parentName"] = self.parentName!
                }
                if self.sourceType != nil {
                    map["sourceType"] = self.sourceType!
                }
                if self.title != nil {
                    map["title"] = self.title!
                }
                if self.type != nil {
                    map["type"] = self.type!
                }
                if self.variableVelocity != nil {
                    map["variableVelocity"] = self.variableVelocity?.toMap()
                }
                if self.xLabel != nil {
                    map["xLabel"] = self.xLabel!
                }
                if self.yLabel != nil {
                    map["yLabel"] = self.yLabel!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["code"] as? String {
                    self.code = value
                }
                if let value = dict["dataDisplay"] as? String {
                    self.dataDisplay = value
                }
                if let value = dict["defineId"] as? String {
                    self.defineId = value
                }
                if let value = dict["description"] as? String {
                    self.description_ = value
                }
                if let value = dict["displayType"] as? String {
                    self.displayType = value
                }
                if let value = dict["expressionTitle"] as? String {
                    self.expressionTitle = value
                }
                if let value = dict["favoriteFlag"] as? Bool {
                    self.favoriteFlag = value
                }
                if let value = dict["fieldDetail"] as? String {
                    self.fieldDetail = value
                }
                if let value = dict["fieldRank"] as? Int32 {
                    self.fieldRank = value
                }
                if let value = dict["fieldSource"] as? String {
                    self.fieldSource = value
                }
                if let value = dict["fieldType"] as? String {
                    self.fieldType = value
                }
                if let value = dict["id"] as? Int64 {
                    self.id = value
                }
                if let value = dict["inputFieldType"] as? String {
                    self.inputFieldType = value
                }
                if let value = dict["inputRequired"] as? String {
                    self.inputRequired = value
                }
                if let value = dict["inputs"] as? String {
                    self.inputs = value
                }
                if let value = dict["name"] as? String {
                    self.name = value
                }
                if let value = dict["outlier"] as? String {
                    self.outlier = value
                }
                if let value = dict["outputThreshold"] as? [String: Any?] {
                    var model = DescribeEventVariableListResponseBody.ResultObject.FavoriteVariables.OutputThreshold()
                    model.fromMap(value)
                    self.outputThreshold = model
                }
                if let value = dict["parentName"] as? String {
                    self.parentName = value
                }
                if let value = dict["sourceType"] as? String {
                    self.sourceType = value
                }
                if let value = dict["title"] as? String {
                    self.title = value
                }
                if let value = dict["type"] as? String {
                    self.type = value
                }
                if let value = dict["variableVelocity"] as? [String: Any?] {
                    var model = DescribeEventVariableListResponseBody.ResultObject.FavoriteVariables.VariableVelocity()
                    model.fromMap(value)
                    self.variableVelocity = model
                }
                if let value = dict["xLabel"] as? String {
                    self.xLabel = value
                }
                if let value = dict["yLabel"] as? String {
                    self.yLabel = value
                }
            }
        }
        public class MiddleVariables : Tea.TeaModel {
            public class OutputThreshold : Tea.TeaModel {
                public var maxValue: Double?

                public var minValue: Double?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.maxValue != nil {
                        map["maxValue"] = self.maxValue!
                    }
                    if self.minValue != nil {
                        map["minValue"] = self.minValue!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["maxValue"] as? Double {
                        self.maxValue = value
                    }
                    if let value = dict["minValue"] as? Double {
                        self.minValue = value
                    }
                }
            }
            public class VariableVelocity : Tea.TeaModel {
                public var iv: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.iv != nil {
                        map["iv"] = self.iv!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["iv"] as? String {
                        self.iv = value
                    }
                }
            }
            public var code: String?

            public var dataDisplay: String?

            public var defineId: String?

            public var description_: String?

            public var displayType: String?

            public var expressionTitle: String?

            public var favoriteFlag: Bool?

            public var fieldDetail: String?

            public var fieldRank: Int32?

            public var fieldSource: String?

            public var fieldType: String?

            public var id: Int64?

            public var inputFieldType: String?

            public var inputRequired: String?

            public var inputs: String?

            public var name: String?

            public var outlier: String?

            public var outputThreshold: DescribeEventVariableListResponseBody.ResultObject.MiddleVariables.OutputThreshold?

            public var parentName: String?

            public var sourceType: String?

            public var title: String?

            public var type: String?

            public var variableVelocity: DescribeEventVariableListResponseBody.ResultObject.MiddleVariables.VariableVelocity?

            public var xLabel: String?

            public var yLabel: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.outputThreshold?.validate()
                try self.variableVelocity?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.code != nil {
                    map["code"] = self.code!
                }
                if self.dataDisplay != nil {
                    map["dataDisplay"] = self.dataDisplay!
                }
                if self.defineId != nil {
                    map["defineId"] = self.defineId!
                }
                if self.description_ != nil {
                    map["description"] = self.description_!
                }
                if self.displayType != nil {
                    map["displayType"] = self.displayType!
                }
                if self.expressionTitle != nil {
                    map["expressionTitle"] = self.expressionTitle!
                }
                if self.favoriteFlag != nil {
                    map["favoriteFlag"] = self.favoriteFlag!
                }
                if self.fieldDetail != nil {
                    map["fieldDetail"] = self.fieldDetail!
                }
                if self.fieldRank != nil {
                    map["fieldRank"] = self.fieldRank!
                }
                if self.fieldSource != nil {
                    map["fieldSource"] = self.fieldSource!
                }
                if self.fieldType != nil {
                    map["fieldType"] = self.fieldType!
                }
                if self.id != nil {
                    map["id"] = self.id!
                }
                if self.inputFieldType != nil {
                    map["inputFieldType"] = self.inputFieldType!
                }
                if self.inputRequired != nil {
                    map["inputRequired"] = self.inputRequired!
                }
                if self.inputs != nil {
                    map["inputs"] = self.inputs!
                }
                if self.name != nil {
                    map["name"] = self.name!
                }
                if self.outlier != nil {
                    map["outlier"] = self.outlier!
                }
                if self.outputThreshold != nil {
                    map["outputThreshold"] = self.outputThreshold?.toMap()
                }
                if self.parentName != nil {
                    map["parentName"] = self.parentName!
                }
                if self.sourceType != nil {
                    map["sourceType"] = self.sourceType!
                }
                if self.title != nil {
                    map["title"] = self.title!
                }
                if self.type != nil {
                    map["type"] = self.type!
                }
                if self.variableVelocity != nil {
                    map["variableVelocity"] = self.variableVelocity?.toMap()
                }
                if self.xLabel != nil {
                    map["xLabel"] = self.xLabel!
                }
                if self.yLabel != nil {
                    map["yLabel"] = self.yLabel!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["code"] as? String {
                    self.code = value
                }
                if let value = dict["dataDisplay"] as? String {
                    self.dataDisplay = value
                }
                if let value = dict["defineId"] as? String {
                    self.defineId = value
                }
                if let value = dict["description"] as? String {
                    self.description_ = value
                }
                if let value = dict["displayType"] as? String {
                    self.displayType = value
                }
                if let value = dict["expressionTitle"] as? String {
                    self.expressionTitle = value
                }
                if let value = dict["favoriteFlag"] as? Bool {
                    self.favoriteFlag = value
                }
                if let value = dict["fieldDetail"] as? String {
                    self.fieldDetail = value
                }
                if let value = dict["fieldRank"] as? Int32 {
                    self.fieldRank = value
                }
                if let value = dict["fieldSource"] as? String {
                    self.fieldSource = value
                }
                if let value = dict["fieldType"] as? String {
                    self.fieldType = value
                }
                if let value = dict["id"] as? Int64 {
                    self.id = value
                }
                if let value = dict["inputFieldType"] as? String {
                    self.inputFieldType = value
                }
                if let value = dict["inputRequired"] as? String {
                    self.inputRequired = value
                }
                if let value = dict["inputs"] as? String {
                    self.inputs = value
                }
                if let value = dict["name"] as? String {
                    self.name = value
                }
                if let value = dict["outlier"] as? String {
                    self.outlier = value
                }
                if let value = dict["outputThreshold"] as? [String: Any?] {
                    var model = DescribeEventVariableListResponseBody.ResultObject.MiddleVariables.OutputThreshold()
                    model.fromMap(value)
                    self.outputThreshold = model
                }
                if let value = dict["parentName"] as? String {
                    self.parentName = value
                }
                if let value = dict["sourceType"] as? String {
                    self.sourceType = value
                }
                if let value = dict["title"] as? String {
                    self.title = value
                }
                if let value = dict["type"] as? String {
                    self.type = value
                }
                if let value = dict["variableVelocity"] as? [String: Any?] {
                    var model = DescribeEventVariableListResponseBody.ResultObject.MiddleVariables.VariableVelocity()
                    model.fromMap(value)
                    self.variableVelocity = model
                }
                if let value = dict["xLabel"] as? String {
                    self.xLabel = value
                }
                if let value = dict["yLabel"] as? String {
                    self.yLabel = value
                }
            }
        }
        public class ModelVariables : Tea.TeaModel {
            public class OutputThreshold : Tea.TeaModel {
                public var maxValue: Double?

                public var minValue: Double?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.maxValue != nil {
                        map["maxValue"] = self.maxValue!
                    }
                    if self.minValue != nil {
                        map["minValue"] = self.minValue!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["maxValue"] as? Double {
                        self.maxValue = value
                    }
                    if let value = dict["minValue"] as? Double {
                        self.minValue = value
                    }
                }
            }
            public class VariableVelocity : Tea.TeaModel {
                public var iv: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.iv != nil {
                        map["iv"] = self.iv!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["iv"] as? String {
                        self.iv = value
                    }
                }
            }
            public var code: String?

            public var dataDisplay: String?

            public var defineId: String?

            public var description_: String?

            public var displayType: String?

            public var expressionTitle: String?

            public var favoriteFlag: Bool?

            public var fieldDetail: String?

            public var fieldRank: Int32?

            public var fieldSource: String?

            public var fieldType: String?

            public var id: Int64?

            public var inputFieldType: String?

            public var inputRequired: String?

            public var inputs: String?

            public var name: String?

            public var outlier: String?

            public var outputThreshold: DescribeEventVariableListResponseBody.ResultObject.ModelVariables.OutputThreshold?

            public var parentName: String?

            public var sourceType: String?

            public var title: String?

            public var type: String?

            public var variableVelocity: DescribeEventVariableListResponseBody.ResultObject.ModelVariables.VariableVelocity?

            public var xLabel: String?

            public var yLabel: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.outputThreshold?.validate()
                try self.variableVelocity?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.code != nil {
                    map["code"] = self.code!
                }
                if self.dataDisplay != nil {
                    map["dataDisplay"] = self.dataDisplay!
                }
                if self.defineId != nil {
                    map["defineId"] = self.defineId!
                }
                if self.description_ != nil {
                    map["description"] = self.description_!
                }
                if self.displayType != nil {
                    map["displayType"] = self.displayType!
                }
                if self.expressionTitle != nil {
                    map["expressionTitle"] = self.expressionTitle!
                }
                if self.favoriteFlag != nil {
                    map["favoriteFlag"] = self.favoriteFlag!
                }
                if self.fieldDetail != nil {
                    map["fieldDetail"] = self.fieldDetail!
                }
                if self.fieldRank != nil {
                    map["fieldRank"] = self.fieldRank!
                }
                if self.fieldSource != nil {
                    map["fieldSource"] = self.fieldSource!
                }
                if self.fieldType != nil {
                    map["fieldType"] = self.fieldType!
                }
                if self.id != nil {
                    map["id"] = self.id!
                }
                if self.inputFieldType != nil {
                    map["inputFieldType"] = self.inputFieldType!
                }
                if self.inputRequired != nil {
                    map["inputRequired"] = self.inputRequired!
                }
                if self.inputs != nil {
                    map["inputs"] = self.inputs!
                }
                if self.name != nil {
                    map["name"] = self.name!
                }
                if self.outlier != nil {
                    map["outlier"] = self.outlier!
                }
                if self.outputThreshold != nil {
                    map["outputThreshold"] = self.outputThreshold?.toMap()
                }
                if self.parentName != nil {
                    map["parentName"] = self.parentName!
                }
                if self.sourceType != nil {
                    map["sourceType"] = self.sourceType!
                }
                if self.title != nil {
                    map["title"] = self.title!
                }
                if self.type != nil {
                    map["type"] = self.type!
                }
                if self.variableVelocity != nil {
                    map["variableVelocity"] = self.variableVelocity?.toMap()
                }
                if self.xLabel != nil {
                    map["xLabel"] = self.xLabel!
                }
                if self.yLabel != nil {
                    map["yLabel"] = self.yLabel!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["code"] as? String {
                    self.code = value
                }
                if let value = dict["dataDisplay"] as? String {
                    self.dataDisplay = value
                }
                if let value = dict["defineId"] as? String {
                    self.defineId = value
                }
                if let value = dict["description"] as? String {
                    self.description_ = value
                }
                if let value = dict["displayType"] as? String {
                    self.displayType = value
                }
                if let value = dict["expressionTitle"] as? String {
                    self.expressionTitle = value
                }
                if let value = dict["favoriteFlag"] as? Bool {
                    self.favoriteFlag = value
                }
                if let value = dict["fieldDetail"] as? String {
                    self.fieldDetail = value
                }
                if let value = dict["fieldRank"] as? Int32 {
                    self.fieldRank = value
                }
                if let value = dict["fieldSource"] as? String {
                    self.fieldSource = value
                }
                if let value = dict["fieldType"] as? String {
                    self.fieldType = value
                }
                if let value = dict["id"] as? Int64 {
                    self.id = value
                }
                if let value = dict["inputFieldType"] as? String {
                    self.inputFieldType = value
                }
                if let value = dict["inputRequired"] as? String {
                    self.inputRequired = value
                }
                if let value = dict["inputs"] as? String {
                    self.inputs = value
                }
                if let value = dict["name"] as? String {
                    self.name = value
                }
                if let value = dict["outlier"] as? String {
                    self.outlier = value
                }
                if let value = dict["outputThreshold"] as? [String: Any?] {
                    var model = DescribeEventVariableListResponseBody.ResultObject.ModelVariables.OutputThreshold()
                    model.fromMap(value)
                    self.outputThreshold = model
                }
                if let value = dict["parentName"] as? String {
                    self.parentName = value
                }
                if let value = dict["sourceType"] as? String {
                    self.sourceType = value
                }
                if let value = dict["title"] as? String {
                    self.title = value
                }
                if let value = dict["type"] as? String {
                    self.type = value
                }
                if let value = dict["variableVelocity"] as? [String: Any?] {
                    var model = DescribeEventVariableListResponseBody.ResultObject.ModelVariables.VariableVelocity()
                    model.fromMap(value)
                    self.variableVelocity = model
                }
                if let value = dict["xLabel"] as? String {
                    self.xLabel = value
                }
                if let value = dict["yLabel"] as? String {
                    self.yLabel = value
                }
            }
        }
        public class NameList : Tea.TeaModel {
            public class OutputThreshold : Tea.TeaModel {
                public var maxValue: Double?

                public var minValue: Double?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.maxValue != nil {
                        map["maxValue"] = self.maxValue!
                    }
                    if self.minValue != nil {
                        map["minValue"] = self.minValue!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["maxValue"] as? Double {
                        self.maxValue = value
                    }
                    if let value = dict["minValue"] as? Double {
                        self.minValue = value
                    }
                }
            }
            public class VariableVelocity : Tea.TeaModel {
                public var iv: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.iv != nil {
                        map["iv"] = self.iv!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["iv"] as? String {
                        self.iv = value
                    }
                }
            }
            public var code: String?

            public var dataDisplay: String?

            public var defineId: String?

            public var description_: String?

            public var displayType: String?

            public var expressionTitle: String?

            public var favoriteFlag: Bool?

            public var fieldDetail: String?

            public var fieldRank: Int32?

            public var fieldSource: String?

            public var fieldType: String?

            public var id: Int64?

            public var inputFieldType: String?

            public var inputRequired: String?

            public var inputs: String?

            public var name: String?

            public var outlier: String?

            public var outputThreshold: DescribeEventVariableListResponseBody.ResultObject.NameList.OutputThreshold?

            public var parentName: String?

            public var sourceType: String?

            public var title: String?

            public var type: String?

            public var variableVelocity: DescribeEventVariableListResponseBody.ResultObject.NameList.VariableVelocity?

            public var xLabel: String?

            public var yLabel: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.outputThreshold?.validate()
                try self.variableVelocity?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.code != nil {
                    map["code"] = self.code!
                }
                if self.dataDisplay != nil {
                    map["dataDisplay"] = self.dataDisplay!
                }
                if self.defineId != nil {
                    map["defineId"] = self.defineId!
                }
                if self.description_ != nil {
                    map["description"] = self.description_!
                }
                if self.displayType != nil {
                    map["displayType"] = self.displayType!
                }
                if self.expressionTitle != nil {
                    map["expressionTitle"] = self.expressionTitle!
                }
                if self.favoriteFlag != nil {
                    map["favoriteFlag"] = self.favoriteFlag!
                }
                if self.fieldDetail != nil {
                    map["fieldDetail"] = self.fieldDetail!
                }
                if self.fieldRank != nil {
                    map["fieldRank"] = self.fieldRank!
                }
                if self.fieldSource != nil {
                    map["fieldSource"] = self.fieldSource!
                }
                if self.fieldType != nil {
                    map["fieldType"] = self.fieldType!
                }
                if self.id != nil {
                    map["id"] = self.id!
                }
                if self.inputFieldType != nil {
                    map["inputFieldType"] = self.inputFieldType!
                }
                if self.inputRequired != nil {
                    map["inputRequired"] = self.inputRequired!
                }
                if self.inputs != nil {
                    map["inputs"] = self.inputs!
                }
                if self.name != nil {
                    map["name"] = self.name!
                }
                if self.outlier != nil {
                    map["outlier"] = self.outlier!
                }
                if self.outputThreshold != nil {
                    map["outputThreshold"] = self.outputThreshold?.toMap()
                }
                if self.parentName != nil {
                    map["parentName"] = self.parentName!
                }
                if self.sourceType != nil {
                    map["sourceType"] = self.sourceType!
                }
                if self.title != nil {
                    map["title"] = self.title!
                }
                if self.type != nil {
                    map["type"] = self.type!
                }
                if self.variableVelocity != nil {
                    map["variableVelocity"] = self.variableVelocity?.toMap()
                }
                if self.xLabel != nil {
                    map["xLabel"] = self.xLabel!
                }
                if self.yLabel != nil {
                    map["yLabel"] = self.yLabel!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["code"] as? String {
                    self.code = value
                }
                if let value = dict["dataDisplay"] as? String {
                    self.dataDisplay = value
                }
                if let value = dict["defineId"] as? String {
                    self.defineId = value
                }
                if let value = dict["description"] as? String {
                    self.description_ = value
                }
                if let value = dict["displayType"] as? String {
                    self.displayType = value
                }
                if let value = dict["expressionTitle"] as? String {
                    self.expressionTitle = value
                }
                if let value = dict["favoriteFlag"] as? Bool {
                    self.favoriteFlag = value
                }
                if let value = dict["fieldDetail"] as? String {
                    self.fieldDetail = value
                }
                if let value = dict["fieldRank"] as? Int32 {
                    self.fieldRank = value
                }
                if let value = dict["fieldSource"] as? String {
                    self.fieldSource = value
                }
                if let value = dict["fieldType"] as? String {
                    self.fieldType = value
                }
                if let value = dict["id"] as? Int64 {
                    self.id = value
                }
                if let value = dict["inputFieldType"] as? String {
                    self.inputFieldType = value
                }
                if let value = dict["inputRequired"] as? String {
                    self.inputRequired = value
                }
                if let value = dict["inputs"] as? String {
                    self.inputs = value
                }
                if let value = dict["name"] as? String {
                    self.name = value
                }
                if let value = dict["outlier"] as? String {
                    self.outlier = value
                }
                if let value = dict["outputThreshold"] as? [String: Any?] {
                    var model = DescribeEventVariableListResponseBody.ResultObject.NameList.OutputThreshold()
                    model.fromMap(value)
                    self.outputThreshold = model
                }
                if let value = dict["parentName"] as? String {
                    self.parentName = value
                }
                if let value = dict["sourceType"] as? String {
                    self.sourceType = value
                }
                if let value = dict["title"] as? String {
                    self.title = value
                }
                if let value = dict["type"] as? String {
                    self.type = value
                }
                if let value = dict["variableVelocity"] as? [String: Any?] {
                    var model = DescribeEventVariableListResponseBody.ResultObject.NameList.VariableVelocity()
                    model.fromMap(value)
                    self.variableVelocity = model
                }
                if let value = dict["xLabel"] as? String {
                    self.xLabel = value
                }
                if let value = dict["yLabel"] as? String {
                    self.yLabel = value
                }
            }
        }
        public class NativeVariableFunctions : Tea.TeaModel {
            public class OutputThreshold : Tea.TeaModel {
                public var maxValue: Double?

                public var minValue: Double?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.maxValue != nil {
                        map["maxValue"] = self.maxValue!
                    }
                    if self.minValue != nil {
                        map["minValue"] = self.minValue!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["maxValue"] as? Double {
                        self.maxValue = value
                    }
                    if let value = dict["minValue"] as? Double {
                        self.minValue = value
                    }
                }
            }
            public class VariableVelocity : Tea.TeaModel {
                public var iv: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.iv != nil {
                        map["iv"] = self.iv!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["iv"] as? String {
                        self.iv = value
                    }
                }
            }
            public var code: String?

            public var dataDisplay: String?

            public var defineId: String?

            public var description_: String?

            public var displayType: String?

            public var expressionTitle: String?

            public var favoriteFlag: Bool?

            public var fieldDetail: String?

            public var fieldRank: Int32?

            public var fieldSource: String?

            public var fieldType: String?

            public var id: Int64?

            public var inputFieldType: String?

            public var inputRequired: String?

            public var inputs: String?

            public var name: String?

            public var outlier: String?

            public var outputThreshold: DescribeEventVariableListResponseBody.ResultObject.NativeVariableFunctions.OutputThreshold?

            public var parentName: String?

            public var sourceType: String?

            public var title: String?

            public var type: String?

            public var variableVelocity: DescribeEventVariableListResponseBody.ResultObject.NativeVariableFunctions.VariableVelocity?

            public var xLabel: String?

            public var yLabel: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.outputThreshold?.validate()
                try self.variableVelocity?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.code != nil {
                    map["code"] = self.code!
                }
                if self.dataDisplay != nil {
                    map["dataDisplay"] = self.dataDisplay!
                }
                if self.defineId != nil {
                    map["defineId"] = self.defineId!
                }
                if self.description_ != nil {
                    map["description"] = self.description_!
                }
                if self.displayType != nil {
                    map["displayType"] = self.displayType!
                }
                if self.expressionTitle != nil {
                    map["expressionTitle"] = self.expressionTitle!
                }
                if self.favoriteFlag != nil {
                    map["favoriteFlag"] = self.favoriteFlag!
                }
                if self.fieldDetail != nil {
                    map["fieldDetail"] = self.fieldDetail!
                }
                if self.fieldRank != nil {
                    map["fieldRank"] = self.fieldRank!
                }
                if self.fieldSource != nil {
                    map["fieldSource"] = self.fieldSource!
                }
                if self.fieldType != nil {
                    map["fieldType"] = self.fieldType!
                }
                if self.id != nil {
                    map["id"] = self.id!
                }
                if self.inputFieldType != nil {
                    map["inputFieldType"] = self.inputFieldType!
                }
                if self.inputRequired != nil {
                    map["inputRequired"] = self.inputRequired!
                }
                if self.inputs != nil {
                    map["inputs"] = self.inputs!
                }
                if self.name != nil {
                    map["name"] = self.name!
                }
                if self.outlier != nil {
                    map["outlier"] = self.outlier!
                }
                if self.outputThreshold != nil {
                    map["outputThreshold"] = self.outputThreshold?.toMap()
                }
                if self.parentName != nil {
                    map["parentName"] = self.parentName!
                }
                if self.sourceType != nil {
                    map["sourceType"] = self.sourceType!
                }
                if self.title != nil {
                    map["title"] = self.title!
                }
                if self.type != nil {
                    map["type"] = self.type!
                }
                if self.variableVelocity != nil {
                    map["variableVelocity"] = self.variableVelocity?.toMap()
                }
                if self.xLabel != nil {
                    map["xLabel"] = self.xLabel!
                }
                if self.yLabel != nil {
                    map["yLabel"] = self.yLabel!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["code"] as? String {
                    self.code = value
                }
                if let value = dict["dataDisplay"] as? String {
                    self.dataDisplay = value
                }
                if let value = dict["defineId"] as? String {
                    self.defineId = value
                }
                if let value = dict["description"] as? String {
                    self.description_ = value
                }
                if let value = dict["displayType"] as? String {
                    self.displayType = value
                }
                if let value = dict["expressionTitle"] as? String {
                    self.expressionTitle = value
                }
                if let value = dict["favoriteFlag"] as? Bool {
                    self.favoriteFlag = value
                }
                if let value = dict["fieldDetail"] as? String {
                    self.fieldDetail = value
                }
                if let value = dict["fieldRank"] as? Int32 {
                    self.fieldRank = value
                }
                if let value = dict["fieldSource"] as? String {
                    self.fieldSource = value
                }
                if let value = dict["fieldType"] as? String {
                    self.fieldType = value
                }
                if let value = dict["id"] as? Int64 {
                    self.id = value
                }
                if let value = dict["inputFieldType"] as? String {
                    self.inputFieldType = value
                }
                if let value = dict["inputRequired"] as? String {
                    self.inputRequired = value
                }
                if let value = dict["inputs"] as? String {
                    self.inputs = value
                }
                if let value = dict["name"] as? String {
                    self.name = value
                }
                if let value = dict["outlier"] as? String {
                    self.outlier = value
                }
                if let value = dict["outputThreshold"] as? [String: Any?] {
                    var model = DescribeEventVariableListResponseBody.ResultObject.NativeVariableFunctions.OutputThreshold()
                    model.fromMap(value)
                    self.outputThreshold = model
                }
                if let value = dict["parentName"] as? String {
                    self.parentName = value
                }
                if let value = dict["sourceType"] as? String {
                    self.sourceType = value
                }
                if let value = dict["title"] as? String {
                    self.title = value
                }
                if let value = dict["type"] as? String {
                    self.type = value
                }
                if let value = dict["variableVelocity"] as? [String: Any?] {
                    var model = DescribeEventVariableListResponseBody.ResultObject.NativeVariableFunctions.VariableVelocity()
                    model.fromMap(value)
                    self.variableVelocity = model
                }
                if let value = dict["xLabel"] as? String {
                    self.xLabel = value
                }
                if let value = dict["yLabel"] as? String {
                    self.yLabel = value
                }
            }
        }
        public class NativeVariables : Tea.TeaModel {
            public class OutputThreshold : Tea.TeaModel {
                public var maxValue: Double?

                public var minValue: Double?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.maxValue != nil {
                        map["maxValue"] = self.maxValue!
                    }
                    if self.minValue != nil {
                        map["minValue"] = self.minValue!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["maxValue"] as? Double {
                        self.maxValue = value
                    }
                    if let value = dict["minValue"] as? Double {
                        self.minValue = value
                    }
                }
            }
            public class VariableVelocity : Tea.TeaModel {
                public var iv: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.iv != nil {
                        map["iv"] = self.iv!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["iv"] as? String {
                        self.iv = value
                    }
                }
            }
            public var code: String?

            public var dataDisplay: String?

            public var defineId: String?

            public var description_: String?

            public var displayType: String?

            public var expressionTitle: String?

            public var favoriteFlag: Bool?

            public var fieldDetail: String?

            public var fieldRank: Int32?

            public var fieldSource: String?

            public var fieldType: String?

            public var id: Int64?

            public var inputFieldType: String?

            public var inputRequired: String?

            public var inputs: String?

            public var name: String?

            public var outlier: String?

            public var outputThreshold: DescribeEventVariableListResponseBody.ResultObject.NativeVariables.OutputThreshold?

            public var parentName: String?

            public var sourceType: String?

            public var title: String?

            public var type: String?

            public var variableVelocity: DescribeEventVariableListResponseBody.ResultObject.NativeVariables.VariableVelocity?

            public var xLabel: String?

            public var yLabel: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.outputThreshold?.validate()
                try self.variableVelocity?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.code != nil {
                    map["code"] = self.code!
                }
                if self.dataDisplay != nil {
                    map["dataDisplay"] = self.dataDisplay!
                }
                if self.defineId != nil {
                    map["defineId"] = self.defineId!
                }
                if self.description_ != nil {
                    map["description"] = self.description_!
                }
                if self.displayType != nil {
                    map["displayType"] = self.displayType!
                }
                if self.expressionTitle != nil {
                    map["expressionTitle"] = self.expressionTitle!
                }
                if self.favoriteFlag != nil {
                    map["favoriteFlag"] = self.favoriteFlag!
                }
                if self.fieldDetail != nil {
                    map["fieldDetail"] = self.fieldDetail!
                }
                if self.fieldRank != nil {
                    map["fieldRank"] = self.fieldRank!
                }
                if self.fieldSource != nil {
                    map["fieldSource"] = self.fieldSource!
                }
                if self.fieldType != nil {
                    map["fieldType"] = self.fieldType!
                }
                if self.id != nil {
                    map["id"] = self.id!
                }
                if self.inputFieldType != nil {
                    map["inputFieldType"] = self.inputFieldType!
                }
                if self.inputRequired != nil {
                    map["inputRequired"] = self.inputRequired!
                }
                if self.inputs != nil {
                    map["inputs"] = self.inputs!
                }
                if self.name != nil {
                    map["name"] = self.name!
                }
                if self.outlier != nil {
                    map["outlier"] = self.outlier!
                }
                if self.outputThreshold != nil {
                    map["outputThreshold"] = self.outputThreshold?.toMap()
                }
                if self.parentName != nil {
                    map["parentName"] = self.parentName!
                }
                if self.sourceType != nil {
                    map["sourceType"] = self.sourceType!
                }
                if self.title != nil {
                    map["title"] = self.title!
                }
                if self.type != nil {
                    map["type"] = self.type!
                }
                if self.variableVelocity != nil {
                    map["variableVelocity"] = self.variableVelocity?.toMap()
                }
                if self.xLabel != nil {
                    map["xLabel"] = self.xLabel!
                }
                if self.yLabel != nil {
                    map["yLabel"] = self.yLabel!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["code"] as? String {
                    self.code = value
                }
                if let value = dict["dataDisplay"] as? String {
                    self.dataDisplay = value
                }
                if let value = dict["defineId"] as? String {
                    self.defineId = value
                }
                if let value = dict["description"] as? String {
                    self.description_ = value
                }
                if let value = dict["displayType"] as? String {
                    self.displayType = value
                }
                if let value = dict["expressionTitle"] as? String {
                    self.expressionTitle = value
                }
                if let value = dict["favoriteFlag"] as? Bool {
                    self.favoriteFlag = value
                }
                if let value = dict["fieldDetail"] as? String {
                    self.fieldDetail = value
                }
                if let value = dict["fieldRank"] as? Int32 {
                    self.fieldRank = value
                }
                if let value = dict["fieldSource"] as? String {
                    self.fieldSource = value
                }
                if let value = dict["fieldType"] as? String {
                    self.fieldType = value
                }
                if let value = dict["id"] as? Int64 {
                    self.id = value
                }
                if let value = dict["inputFieldType"] as? String {
                    self.inputFieldType = value
                }
                if let value = dict["inputRequired"] as? String {
                    self.inputRequired = value
                }
                if let value = dict["inputs"] as? String {
                    self.inputs = value
                }
                if let value = dict["name"] as? String {
                    self.name = value
                }
                if let value = dict["outlier"] as? String {
                    self.outlier = value
                }
                if let value = dict["outputThreshold"] as? [String: Any?] {
                    var model = DescribeEventVariableListResponseBody.ResultObject.NativeVariables.OutputThreshold()
                    model.fromMap(value)
                    self.outputThreshold = model
                }
                if let value = dict["parentName"] as? String {
                    self.parentName = value
                }
                if let value = dict["sourceType"] as? String {
                    self.sourceType = value
                }
                if let value = dict["title"] as? String {
                    self.title = value
                }
                if let value = dict["type"] as? String {
                    self.type = value
                }
                if let value = dict["variableVelocity"] as? [String: Any?] {
                    var model = DescribeEventVariableListResponseBody.ResultObject.NativeVariables.VariableVelocity()
                    model.fromMap(value)
                    self.variableVelocity = model
                }
                if let value = dict["xLabel"] as? String {
                    self.xLabel = value
                }
                if let value = dict["yLabel"] as? String {
                    self.yLabel = value
                }
            }
        }
        public class QueryVariables : Tea.TeaModel {
            public class OutputThreshold : Tea.TeaModel {
                public var maxValue: Double?

                public var minValue: Double?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.maxValue != nil {
                        map["maxValue"] = self.maxValue!
                    }
                    if self.minValue != nil {
                        map["minValue"] = self.minValue!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["maxValue"] as? Double {
                        self.maxValue = value
                    }
                    if let value = dict["minValue"] as? Double {
                        self.minValue = value
                    }
                }
            }
            public class VariableVelocity : Tea.TeaModel {
                public var iv: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.iv != nil {
                        map["iv"] = self.iv!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["iv"] as? String {
                        self.iv = value
                    }
                }
            }
            public var code: String?

            public var dataDisplay: String?

            public var defineId: String?

            public var description_: String?

            public var displayType: String?

            public var expressionTitle: String?

            public var favoriteFlag: Bool?

            public var fieldDetail: String?

            public var fieldRank: Int32?

            public var fieldSource: String?

            public var fieldType: String?

            public var id: Int64?

            public var inputFieldType: String?

            public var inputRequired: String?

            public var inputs: String?

            public var name: String?

            public var outlier: String?

            public var outputThreshold: DescribeEventVariableListResponseBody.ResultObject.QueryVariables.OutputThreshold?

            public var parentName: String?

            public var sourceType: String?

            public var title: String?

            public var type: String?

            public var variableVelocity: DescribeEventVariableListResponseBody.ResultObject.QueryVariables.VariableVelocity?

            public var xLabel: String?

            public var yLabel: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.outputThreshold?.validate()
                try self.variableVelocity?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.code != nil {
                    map["code"] = self.code!
                }
                if self.dataDisplay != nil {
                    map["dataDisplay"] = self.dataDisplay!
                }
                if self.defineId != nil {
                    map["defineId"] = self.defineId!
                }
                if self.description_ != nil {
                    map["description"] = self.description_!
                }
                if self.displayType != nil {
                    map["displayType"] = self.displayType!
                }
                if self.expressionTitle != nil {
                    map["expressionTitle"] = self.expressionTitle!
                }
                if self.favoriteFlag != nil {
                    map["favoriteFlag"] = self.favoriteFlag!
                }
                if self.fieldDetail != nil {
                    map["fieldDetail"] = self.fieldDetail!
                }
                if self.fieldRank != nil {
                    map["fieldRank"] = self.fieldRank!
                }
                if self.fieldSource != nil {
                    map["fieldSource"] = self.fieldSource!
                }
                if self.fieldType != nil {
                    map["fieldType"] = self.fieldType!
                }
                if self.id != nil {
                    map["id"] = self.id!
                }
                if self.inputFieldType != nil {
                    map["inputFieldType"] = self.inputFieldType!
                }
                if self.inputRequired != nil {
                    map["inputRequired"] = self.inputRequired!
                }
                if self.inputs != nil {
                    map["inputs"] = self.inputs!
                }
                if self.name != nil {
                    map["name"] = self.name!
                }
                if self.outlier != nil {
                    map["outlier"] = self.outlier!
                }
                if self.outputThreshold != nil {
                    map["outputThreshold"] = self.outputThreshold?.toMap()
                }
                if self.parentName != nil {
                    map["parentName"] = self.parentName!
                }
                if self.sourceType != nil {
                    map["sourceType"] = self.sourceType!
                }
                if self.title != nil {
                    map["title"] = self.title!
                }
                if self.type != nil {
                    map["type"] = self.type!
                }
                if self.variableVelocity != nil {
                    map["variableVelocity"] = self.variableVelocity?.toMap()
                }
                if self.xLabel != nil {
                    map["xLabel"] = self.xLabel!
                }
                if self.yLabel != nil {
                    map["yLabel"] = self.yLabel!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["code"] as? String {
                    self.code = value
                }
                if let value = dict["dataDisplay"] as? String {
                    self.dataDisplay = value
                }
                if let value = dict["defineId"] as? String {
                    self.defineId = value
                }
                if let value = dict["description"] as? String {
                    self.description_ = value
                }
                if let value = dict["displayType"] as? String {
                    self.displayType = value
                }
                if let value = dict["expressionTitle"] as? String {
                    self.expressionTitle = value
                }
                if let value = dict["favoriteFlag"] as? Bool {
                    self.favoriteFlag = value
                }
                if let value = dict["fieldDetail"] as? String {
                    self.fieldDetail = value
                }
                if let value = dict["fieldRank"] as? Int32 {
                    self.fieldRank = value
                }
                if let value = dict["fieldSource"] as? String {
                    self.fieldSource = value
                }
                if let value = dict["fieldType"] as? String {
                    self.fieldType = value
                }
                if let value = dict["id"] as? Int64 {
                    self.id = value
                }
                if let value = dict["inputFieldType"] as? String {
                    self.inputFieldType = value
                }
                if let value = dict["inputRequired"] as? String {
                    self.inputRequired = value
                }
                if let value = dict["inputs"] as? String {
                    self.inputs = value
                }
                if let value = dict["name"] as? String {
                    self.name = value
                }
                if let value = dict["outlier"] as? String {
                    self.outlier = value
                }
                if let value = dict["outputThreshold"] as? [String: Any?] {
                    var model = DescribeEventVariableListResponseBody.ResultObject.QueryVariables.OutputThreshold()
                    model.fromMap(value)
                    self.outputThreshold = model
                }
                if let value = dict["parentName"] as? String {
                    self.parentName = value
                }
                if let value = dict["sourceType"] as? String {
                    self.sourceType = value
                }
                if let value = dict["title"] as? String {
                    self.title = value
                }
                if let value = dict["type"] as? String {
                    self.type = value
                }
                if let value = dict["variableVelocity"] as? [String: Any?] {
                    var model = DescribeEventVariableListResponseBody.ResultObject.QueryVariables.VariableVelocity()
                    model.fromMap(value)
                    self.variableVelocity = model
                }
                if let value = dict["xLabel"] as? String {
                    self.xLabel = value
                }
                if let value = dict["yLabel"] as? String {
                    self.yLabel = value
                }
            }
        }
        public class SelfVariables : Tea.TeaModel {
            public class OutputThreshold : Tea.TeaModel {
                public var maxValue: Double?

                public var minValue: Double?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.maxValue != nil {
                        map["maxValue"] = self.maxValue!
                    }
                    if self.minValue != nil {
                        map["minValue"] = self.minValue!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["maxValue"] as? Double {
                        self.maxValue = value
                    }
                    if let value = dict["minValue"] as? Double {
                        self.minValue = value
                    }
                }
            }
            public class VariableVelocity : Tea.TeaModel {
                public var iv: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.iv != nil {
                        map["iv"] = self.iv!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["iv"] as? String {
                        self.iv = value
                    }
                }
            }
            public var code: String?

            public var dataDisplay: String?

            public var defineId: String?

            public var description_: String?

            public var displayType: String?

            public var expressionTitle: String?

            public var favoriteFlag: Bool?

            public var fieldDetail: String?

            public var fieldRank: Int32?

            public var fieldSource: String?

            public var fieldType: String?

            public var id: Int64?

            public var inputFieldType: String?

            public var inputRequired: String?

            public var inputs: String?

            public var name: String?

            public var outlier: String?

            public var outputThreshold: DescribeEventVariableListResponseBody.ResultObject.SelfVariables.OutputThreshold?

            public var parentName: String?

            public var sourceType: String?

            public var title: String?

            public var type: String?

            public var variableVelocity: DescribeEventVariableListResponseBody.ResultObject.SelfVariables.VariableVelocity?

            public var xLabel: String?

            public var yLabel: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.outputThreshold?.validate()
                try self.variableVelocity?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.code != nil {
                    map["code"] = self.code!
                }
                if self.dataDisplay != nil {
                    map["dataDisplay"] = self.dataDisplay!
                }
                if self.defineId != nil {
                    map["defineId"] = self.defineId!
                }
                if self.description_ != nil {
                    map["description"] = self.description_!
                }
                if self.displayType != nil {
                    map["displayType"] = self.displayType!
                }
                if self.expressionTitle != nil {
                    map["expressionTitle"] = self.expressionTitle!
                }
                if self.favoriteFlag != nil {
                    map["favoriteFlag"] = self.favoriteFlag!
                }
                if self.fieldDetail != nil {
                    map["fieldDetail"] = self.fieldDetail!
                }
                if self.fieldRank != nil {
                    map["fieldRank"] = self.fieldRank!
                }
                if self.fieldSource != nil {
                    map["fieldSource"] = self.fieldSource!
                }
                if self.fieldType != nil {
                    map["fieldType"] = self.fieldType!
                }
                if self.id != nil {
                    map["id"] = self.id!
                }
                if self.inputFieldType != nil {
                    map["inputFieldType"] = self.inputFieldType!
                }
                if self.inputRequired != nil {
                    map["inputRequired"] = self.inputRequired!
                }
                if self.inputs != nil {
                    map["inputs"] = self.inputs!
                }
                if self.name != nil {
                    map["name"] = self.name!
                }
                if self.outlier != nil {
                    map["outlier"] = self.outlier!
                }
                if self.outputThreshold != nil {
                    map["outputThreshold"] = self.outputThreshold?.toMap()
                }
                if self.parentName != nil {
                    map["parentName"] = self.parentName!
                }
                if self.sourceType != nil {
                    map["sourceType"] = self.sourceType!
                }
                if self.title != nil {
                    map["title"] = self.title!
                }
                if self.type != nil {
                    map["type"] = self.type!
                }
                if self.variableVelocity != nil {
                    map["variableVelocity"] = self.variableVelocity?.toMap()
                }
                if self.xLabel != nil {
                    map["xLabel"] = self.xLabel!
                }
                if self.yLabel != nil {
                    map["yLabel"] = self.yLabel!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["code"] as? String {
                    self.code = value
                }
                if let value = dict["dataDisplay"] as? String {
                    self.dataDisplay = value
                }
                if let value = dict["defineId"] as? String {
                    self.defineId = value
                }
                if let value = dict["description"] as? String {
                    self.description_ = value
                }
                if let value = dict["displayType"] as? String {
                    self.displayType = value
                }
                if let value = dict["expressionTitle"] as? String {
                    self.expressionTitle = value
                }
                if let value = dict["favoriteFlag"] as? Bool {
                    self.favoriteFlag = value
                }
                if let value = dict["fieldDetail"] as? String {
                    self.fieldDetail = value
                }
                if let value = dict["fieldRank"] as? Int32 {
                    self.fieldRank = value
                }
                if let value = dict["fieldSource"] as? String {
                    self.fieldSource = value
                }
                if let value = dict["fieldType"] as? String {
                    self.fieldType = value
                }
                if let value = dict["id"] as? Int64 {
                    self.id = value
                }
                if let value = dict["inputFieldType"] as? String {
                    self.inputFieldType = value
                }
                if let value = dict["inputRequired"] as? String {
                    self.inputRequired = value
                }
                if let value = dict["inputs"] as? String {
                    self.inputs = value
                }
                if let value = dict["name"] as? String {
                    self.name = value
                }
                if let value = dict["outlier"] as? String {
                    self.outlier = value
                }
                if let value = dict["outputThreshold"] as? [String: Any?] {
                    var model = DescribeEventVariableListResponseBody.ResultObject.SelfVariables.OutputThreshold()
                    model.fromMap(value)
                    self.outputThreshold = model
                }
                if let value = dict["parentName"] as? String {
                    self.parentName = value
                }
                if let value = dict["sourceType"] as? String {
                    self.sourceType = value
                }
                if let value = dict["title"] as? String {
                    self.title = value
                }
                if let value = dict["type"] as? String {
                    self.type = value
                }
                if let value = dict["variableVelocity"] as? [String: Any?] {
                    var model = DescribeEventVariableListResponseBody.ResultObject.SelfVariables.VariableVelocity()
                    model.fromMap(value)
                    self.variableVelocity = model
                }
                if let value = dict["xLabel"] as? String {
                    self.xLabel = value
                }
                if let value = dict["yLabel"] as? String {
                    self.yLabel = value
                }
            }
        }
        public class SysVariables : Tea.TeaModel {
            public class OutputThreshold : Tea.TeaModel {
                public var maxValue: Double?

                public var minValue: Double?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.maxValue != nil {
                        map["maxValue"] = self.maxValue!
                    }
                    if self.minValue != nil {
                        map["minValue"] = self.minValue!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["maxValue"] as? Double {
                        self.maxValue = value
                    }
                    if let value = dict["minValue"] as? Double {
                        self.minValue = value
                    }
                }
            }
            public class VariableVelocity : Tea.TeaModel {
                public var iv: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.iv != nil {
                        map["iv"] = self.iv!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["iv"] as? String {
                        self.iv = value
                    }
                }
            }
            public var code: String?

            public var dataDisplay: String?

            public var defineId: String?

            public var description_: String?

            public var displayType: String?

            public var expressionTitle: String?

            public var favoriteFlag: Bool?

            public var fieldDetail: String?

            public var fieldRank: Int32?

            public var fieldSource: String?

            public var fieldType: String?

            public var id: Int64?

            public var inputFieldType: String?

            public var inputRequired: String?

            public var inputs: String?

            public var name: String?

            public var outlier: String?

            public var outputThreshold: DescribeEventVariableListResponseBody.ResultObject.SysVariables.OutputThreshold?

            public var parentName: String?

            public var sourceType: String?

            public var title: String?

            public var type: String?

            public var variableVelocity: DescribeEventVariableListResponseBody.ResultObject.SysVariables.VariableVelocity?

            public var xLabel: String?

            public var yLabel: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.outputThreshold?.validate()
                try self.variableVelocity?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.code != nil {
                    map["code"] = self.code!
                }
                if self.dataDisplay != nil {
                    map["dataDisplay"] = self.dataDisplay!
                }
                if self.defineId != nil {
                    map["defineId"] = self.defineId!
                }
                if self.description_ != nil {
                    map["description"] = self.description_!
                }
                if self.displayType != nil {
                    map["displayType"] = self.displayType!
                }
                if self.expressionTitle != nil {
                    map["expressionTitle"] = self.expressionTitle!
                }
                if self.favoriteFlag != nil {
                    map["favoriteFlag"] = self.favoriteFlag!
                }
                if self.fieldDetail != nil {
                    map["fieldDetail"] = self.fieldDetail!
                }
                if self.fieldRank != nil {
                    map["fieldRank"] = self.fieldRank!
                }
                if self.fieldSource != nil {
                    map["fieldSource"] = self.fieldSource!
                }
                if self.fieldType != nil {
                    map["fieldType"] = self.fieldType!
                }
                if self.id != nil {
                    map["id"] = self.id!
                }
                if self.inputFieldType != nil {
                    map["inputFieldType"] = self.inputFieldType!
                }
                if self.inputRequired != nil {
                    map["inputRequired"] = self.inputRequired!
                }
                if self.inputs != nil {
                    map["inputs"] = self.inputs!
                }
                if self.name != nil {
                    map["name"] = self.name!
                }
                if self.outlier != nil {
                    map["outlier"] = self.outlier!
                }
                if self.outputThreshold != nil {
                    map["outputThreshold"] = self.outputThreshold?.toMap()
                }
                if self.parentName != nil {
                    map["parentName"] = self.parentName!
                }
                if self.sourceType != nil {
                    map["sourceType"] = self.sourceType!
                }
                if self.title != nil {
                    map["title"] = self.title!
                }
                if self.type != nil {
                    map["type"] = self.type!
                }
                if self.variableVelocity != nil {
                    map["variableVelocity"] = self.variableVelocity?.toMap()
                }
                if self.xLabel != nil {
                    map["xLabel"] = self.xLabel!
                }
                if self.yLabel != nil {
                    map["yLabel"] = self.yLabel!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["code"] as? String {
                    self.code = value
                }
                if let value = dict["dataDisplay"] as? String {
                    self.dataDisplay = value
                }
                if let value = dict["defineId"] as? String {
                    self.defineId = value
                }
                if let value = dict["description"] as? String {
                    self.description_ = value
                }
                if let value = dict["displayType"] as? String {
                    self.displayType = value
                }
                if let value = dict["expressionTitle"] as? String {
                    self.expressionTitle = value
                }
                if let value = dict["favoriteFlag"] as? Bool {
                    self.favoriteFlag = value
                }
                if let value = dict["fieldDetail"] as? String {
                    self.fieldDetail = value
                }
                if let value = dict["fieldRank"] as? Int32 {
                    self.fieldRank = value
                }
                if let value = dict["fieldSource"] as? String {
                    self.fieldSource = value
                }
                if let value = dict["fieldType"] as? String {
                    self.fieldType = value
                }
                if let value = dict["id"] as? Int64 {
                    self.id = value
                }
                if let value = dict["inputFieldType"] as? String {
                    self.inputFieldType = value
                }
                if let value = dict["inputRequired"] as? String {
                    self.inputRequired = value
                }
                if let value = dict["inputs"] as? String {
                    self.inputs = value
                }
                if let value = dict["name"] as? String {
                    self.name = value
                }
                if let value = dict["outlier"] as? String {
                    self.outlier = value
                }
                if let value = dict["outputThreshold"] as? [String: Any?] {
                    var model = DescribeEventVariableListResponseBody.ResultObject.SysVariables.OutputThreshold()
                    model.fromMap(value)
                    self.outputThreshold = model
                }
                if let value = dict["parentName"] as? String {
                    self.parentName = value
                }
                if let value = dict["sourceType"] as? String {
                    self.sourceType = value
                }
                if let value = dict["title"] as? String {
                    self.title = value
                }
                if let value = dict["type"] as? String {
                    self.type = value
                }
                if let value = dict["variableVelocity"] as? [String: Any?] {
                    var model = DescribeEventVariableListResponseBody.ResultObject.SysVariables.VariableVelocity()
                    model.fromMap(value)
                    self.variableVelocity = model
                }
                if let value = dict["xLabel"] as? String {
                    self.xLabel = value
                }
                if let value = dict["yLabel"] as? String {
                    self.yLabel = value
                }
            }
        }
        public class VelocityVariables : Tea.TeaModel {
            public class OutputThreshold : Tea.TeaModel {
                public var maxValue: Double?

                public var minValue: Double?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.maxValue != nil {
                        map["maxValue"] = self.maxValue!
                    }
                    if self.minValue != nil {
                        map["minValue"] = self.minValue!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["maxValue"] as? Double {
                        self.maxValue = value
                    }
                    if let value = dict["minValue"] as? Double {
                        self.minValue = value
                    }
                }
            }
            public class VariableVelocity : Tea.TeaModel {
                public var iv: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.iv != nil {
                        map["iv"] = self.iv!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["iv"] as? String {
                        self.iv = value
                    }
                }
            }
            public var code: String?

            public var dataDisplay: String?

            public var defineId: String?

            public var description_: String?

            public var displayType: String?

            public var expressionTitle: String?

            public var favoriteFlag: Bool?

            public var fieldDetail: String?

            public var fieldRank: Int32?

            public var fieldSource: String?

            public var fieldType: String?

            public var id: Int64?

            public var inputFieldType: String?

            public var inputRequired: String?

            public var inputs: String?

            public var name: String?

            public var outlier: String?

            public var outputThreshold: DescribeEventVariableListResponseBody.ResultObject.VelocityVariables.OutputThreshold?

            public var parentName: String?

            public var sourceType: String?

            public var title: String?

            public var type: String?

            public var variableVelocity: DescribeEventVariableListResponseBody.ResultObject.VelocityVariables.VariableVelocity?

            public var xLabel: String?

            public var yLabel: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.outputThreshold?.validate()
                try self.variableVelocity?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.code != nil {
                    map["code"] = self.code!
                }
                if self.dataDisplay != nil {
                    map["dataDisplay"] = self.dataDisplay!
                }
                if self.defineId != nil {
                    map["defineId"] = self.defineId!
                }
                if self.description_ != nil {
                    map["description"] = self.description_!
                }
                if self.displayType != nil {
                    map["displayType"] = self.displayType!
                }
                if self.expressionTitle != nil {
                    map["expressionTitle"] = self.expressionTitle!
                }
                if self.favoriteFlag != nil {
                    map["favoriteFlag"] = self.favoriteFlag!
                }
                if self.fieldDetail != nil {
                    map["fieldDetail"] = self.fieldDetail!
                }
                if self.fieldRank != nil {
                    map["fieldRank"] = self.fieldRank!
                }
                if self.fieldSource != nil {
                    map["fieldSource"] = self.fieldSource!
                }
                if self.fieldType != nil {
                    map["fieldType"] = self.fieldType!
                }
                if self.id != nil {
                    map["id"] = self.id!
                }
                if self.inputFieldType != nil {
                    map["inputFieldType"] = self.inputFieldType!
                }
                if self.inputRequired != nil {
                    map["inputRequired"] = self.inputRequired!
                }
                if self.inputs != nil {
                    map["inputs"] = self.inputs!
                }
                if self.name != nil {
                    map["name"] = self.name!
                }
                if self.outlier != nil {
                    map["outlier"] = self.outlier!
                }
                if self.outputThreshold != nil {
                    map["outputThreshold"] = self.outputThreshold?.toMap()
                }
                if self.parentName != nil {
                    map["parentName"] = self.parentName!
                }
                if self.sourceType != nil {
                    map["sourceType"] = self.sourceType!
                }
                if self.title != nil {
                    map["title"] = self.title!
                }
                if self.type != nil {
                    map["type"] = self.type!
                }
                if self.variableVelocity != nil {
                    map["variableVelocity"] = self.variableVelocity?.toMap()
                }
                if self.xLabel != nil {
                    map["xLabel"] = self.xLabel!
                }
                if self.yLabel != nil {
                    map["yLabel"] = self.yLabel!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["code"] as? String {
                    self.code = value
                }
                if let value = dict["dataDisplay"] as? String {
                    self.dataDisplay = value
                }
                if let value = dict["defineId"] as? String {
                    self.defineId = value
                }
                if let value = dict["description"] as? String {
                    self.description_ = value
                }
                if let value = dict["displayType"] as? String {
                    self.displayType = value
                }
                if let value = dict["expressionTitle"] as? String {
                    self.expressionTitle = value
                }
                if let value = dict["favoriteFlag"] as? Bool {
                    self.favoriteFlag = value
                }
                if let value = dict["fieldDetail"] as? String {
                    self.fieldDetail = value
                }
                if let value = dict["fieldRank"] as? Int32 {
                    self.fieldRank = value
                }
                if let value = dict["fieldSource"] as? String {
                    self.fieldSource = value
                }
                if let value = dict["fieldType"] as? String {
                    self.fieldType = value
                }
                if let value = dict["id"] as? Int64 {
                    self.id = value
                }
                if let value = dict["inputFieldType"] as? String {
                    self.inputFieldType = value
                }
                if let value = dict["inputRequired"] as? String {
                    self.inputRequired = value
                }
                if let value = dict["inputs"] as? String {
                    self.inputs = value
                }
                if let value = dict["name"] as? String {
                    self.name = value
                }
                if let value = dict["outlier"] as? String {
                    self.outlier = value
                }
                if let value = dict["outputThreshold"] as? [String: Any?] {
                    var model = DescribeEventVariableListResponseBody.ResultObject.VelocityVariables.OutputThreshold()
                    model.fromMap(value)
                    self.outputThreshold = model
                }
                if let value = dict["parentName"] as? String {
                    self.parentName = value
                }
                if let value = dict["sourceType"] as? String {
                    self.sourceType = value
                }
                if let value = dict["title"] as? String {
                    self.title = value
                }
                if let value = dict["type"] as? String {
                    self.type = value
                }
                if let value = dict["variableVelocity"] as? [String: Any?] {
                    var model = DescribeEventVariableListResponseBody.ResultObject.VelocityVariables.VariableVelocity()
                    model.fromMap(value)
                    self.variableVelocity = model
                }
                if let value = dict["xLabel"] as? String {
                    self.xLabel = value
                }
                if let value = dict["yLabel"] as? String {
                    self.yLabel = value
                }
            }
        }
        public var actions: [DescribeEventVariableListResponseBody.ResultObject.Actions]?

        public var deviceVariables: [DescribeEventVariableListResponseBody.ResultObject.DeviceVariables]?

        public var expressionVariables: [DescribeEventVariableListResponseBody.ResultObject.ExpressionVariables]?

        public var favoriteVariables: [DescribeEventVariableListResponseBody.ResultObject.FavoriteVariables]?

        public var middleVariables: [DescribeEventVariableListResponseBody.ResultObject.MiddleVariables]?

        public var modelVariables: [DescribeEventVariableListResponseBody.ResultObject.ModelVariables]?

        public var nameList: [DescribeEventVariableListResponseBody.ResultObject.NameList]?

        public var nativeVariableFunctions: [DescribeEventVariableListResponseBody.ResultObject.NativeVariableFunctions]?

        public var nativeVariables: [DescribeEventVariableListResponseBody.ResultObject.NativeVariables]?

        public var queryVariables: [DescribeEventVariableListResponseBody.ResultObject.QueryVariables]?

        public var selfVariables: [DescribeEventVariableListResponseBody.ResultObject.SelfVariables]?

        public var sysVariables: [DescribeEventVariableListResponseBody.ResultObject.SysVariables]?

        public var thirdVariables: [String: Any]?

        public var velocityVariables: [DescribeEventVariableListResponseBody.ResultObject.VelocityVariables]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.actions != nil {
                var tmp : [Any] = []
                for k in self.actions! {
                    tmp.append(k.toMap())
                }
                map["actions"] = tmp
            }
            if self.deviceVariables != nil {
                var tmp : [Any] = []
                for k in self.deviceVariables! {
                    tmp.append(k.toMap())
                }
                map["deviceVariables"] = tmp
            }
            if self.expressionVariables != nil {
                var tmp : [Any] = []
                for k in self.expressionVariables! {
                    tmp.append(k.toMap())
                }
                map["expressionVariables"] = tmp
            }
            if self.favoriteVariables != nil {
                var tmp : [Any] = []
                for k in self.favoriteVariables! {
                    tmp.append(k.toMap())
                }
                map["favoriteVariables"] = tmp
            }
            if self.middleVariables != nil {
                var tmp : [Any] = []
                for k in self.middleVariables! {
                    tmp.append(k.toMap())
                }
                map["middleVariables"] = tmp
            }
            if self.modelVariables != nil {
                var tmp : [Any] = []
                for k in self.modelVariables! {
                    tmp.append(k.toMap())
                }
                map["modelVariables"] = tmp
            }
            if self.nameList != nil {
                var tmp : [Any] = []
                for k in self.nameList! {
                    tmp.append(k.toMap())
                }
                map["nameList"] = tmp
            }
            if self.nativeVariableFunctions != nil {
                var tmp : [Any] = []
                for k in self.nativeVariableFunctions! {
                    tmp.append(k.toMap())
                }
                map["nativeVariableFunctions"] = tmp
            }
            if self.nativeVariables != nil {
                var tmp : [Any] = []
                for k in self.nativeVariables! {
                    tmp.append(k.toMap())
                }
                map["nativeVariables"] = tmp
            }
            if self.queryVariables != nil {
                var tmp : [Any] = []
                for k in self.queryVariables! {
                    tmp.append(k.toMap())
                }
                map["queryVariables"] = tmp
            }
            if self.selfVariables != nil {
                var tmp : [Any] = []
                for k in self.selfVariables! {
                    tmp.append(k.toMap())
                }
                map["selfVariables"] = tmp
            }
            if self.sysVariables != nil {
                var tmp : [Any] = []
                for k in self.sysVariables! {
                    tmp.append(k.toMap())
                }
                map["sysVariables"] = tmp
            }
            if self.thirdVariables != nil {
                map["thirdVariables"] = self.thirdVariables!
            }
            if self.velocityVariables != nil {
                var tmp : [Any] = []
                for k in self.velocityVariables! {
                    tmp.append(k.toMap())
                }
                map["velocityVariables"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["actions"] as? [Any?] {
                var tmp : [DescribeEventVariableListResponseBody.ResultObject.Actions] = []
                for v in value {
                    if v != nil {
                        var model = DescribeEventVariableListResponseBody.ResultObject.Actions()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.actions = tmp
            }
            if let value = dict["deviceVariables"] as? [Any?] {
                var tmp : [DescribeEventVariableListResponseBody.ResultObject.DeviceVariables] = []
                for v in value {
                    if v != nil {
                        var model = DescribeEventVariableListResponseBody.ResultObject.DeviceVariables()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.deviceVariables = tmp
            }
            if let value = dict["expressionVariables"] as? [Any?] {
                var tmp : [DescribeEventVariableListResponseBody.ResultObject.ExpressionVariables] = []
                for v in value {
                    if v != nil {
                        var model = DescribeEventVariableListResponseBody.ResultObject.ExpressionVariables()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.expressionVariables = tmp
            }
            if let value = dict["favoriteVariables"] as? [Any?] {
                var tmp : [DescribeEventVariableListResponseBody.ResultObject.FavoriteVariables] = []
                for v in value {
                    if v != nil {
                        var model = DescribeEventVariableListResponseBody.ResultObject.FavoriteVariables()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.favoriteVariables = tmp
            }
            if let value = dict["middleVariables"] as? [Any?] {
                var tmp : [DescribeEventVariableListResponseBody.ResultObject.MiddleVariables] = []
                for v in value {
                    if v != nil {
                        var model = DescribeEventVariableListResponseBody.ResultObject.MiddleVariables()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.middleVariables = tmp
            }
            if let value = dict["modelVariables"] as? [Any?] {
                var tmp : [DescribeEventVariableListResponseBody.ResultObject.ModelVariables] = []
                for v in value {
                    if v != nil {
                        var model = DescribeEventVariableListResponseBody.ResultObject.ModelVariables()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.modelVariables = tmp
            }
            if let value = dict["nameList"] as? [Any?] {
                var tmp : [DescribeEventVariableListResponseBody.ResultObject.NameList] = []
                for v in value {
                    if v != nil {
                        var model = DescribeEventVariableListResponseBody.ResultObject.NameList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.nameList = tmp
            }
            if let value = dict["nativeVariableFunctions"] as? [Any?] {
                var tmp : [DescribeEventVariableListResponseBody.ResultObject.NativeVariableFunctions] = []
                for v in value {
                    if v != nil {
                        var model = DescribeEventVariableListResponseBody.ResultObject.NativeVariableFunctions()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.nativeVariableFunctions = tmp
            }
            if let value = dict["nativeVariables"] as? [Any?] {
                var tmp : [DescribeEventVariableListResponseBody.ResultObject.NativeVariables] = []
                for v in value {
                    if v != nil {
                        var model = DescribeEventVariableListResponseBody.ResultObject.NativeVariables()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.nativeVariables = tmp
            }
            if let value = dict["queryVariables"] as? [Any?] {
                var tmp : [DescribeEventVariableListResponseBody.ResultObject.QueryVariables] = []
                for v in value {
                    if v != nil {
                        var model = DescribeEventVariableListResponseBody.ResultObject.QueryVariables()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.queryVariables = tmp
            }
            if let value = dict["selfVariables"] as? [Any?] {
                var tmp : [DescribeEventVariableListResponseBody.ResultObject.SelfVariables] = []
                for v in value {
                    if v != nil {
                        var model = DescribeEventVariableListResponseBody.ResultObject.SelfVariables()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.selfVariables = tmp
            }
            if let value = dict["sysVariables"] as? [Any?] {
                var tmp : [DescribeEventVariableListResponseBody.ResultObject.SysVariables] = []
                for v in value {
                    if v != nil {
                        var model = DescribeEventVariableListResponseBody.ResultObject.SysVariables()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.sysVariables = tmp
            }
            if let value = dict["thirdVariables"] as? [String: Any] {
                self.thirdVariables = value
            }
            if let value = dict["velocityVariables"] as? [Any?] {
                var tmp : [DescribeEventVariableListResponseBody.ResultObject.VelocityVariables] = []
                for v in value {
                    if v != nil {
                        var model = DescribeEventVariableListResponseBody.ResultObject.VelocityVariables()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.velocityVariables = tmp
            }
        }
    }
    public var requestId: String?

    public var resultObject: DescribeEventVariableListResponseBody.ResultObject?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.resultObject?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? [String: Any?] {
            var model = DescribeEventVariableListResponseBody.ResultObject()
            model.fromMap(value)
            self.resultObject = model
        }
    }
}

public class DescribeEventVariableListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeEventVariableListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeEventVariableListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeEventVariableTemplateBindRequest : Tea.TeaModel {
    public var lang: String?

    public var inputs: String?

    public var regId: String?

    public var templateCode: String?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.inputs != nil {
            map["inputs"] = self.inputs!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.templateCode != nil {
            map["templateCode"] = self.templateCode!
        }
        if self.type != nil {
            map["type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["inputs"] as? String {
            self.inputs = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["templateCode"] as? String {
            self.templateCode = value
        }
        if let value = dict["type"] as? String {
            self.type = value
        }
    }
}

public class DescribeEventVariableTemplateBindResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public class ChargeVariables : Tea.TeaModel {
            public var code: String?

            public var description_: String?

            public var fieldType: String?

            public var id: Int64?

            public var name: String?

            public var title: String?

            public var type: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.code != nil {
                    map["code"] = self.code!
                }
                if self.description_ != nil {
                    map["description"] = self.description_!
                }
                if self.fieldType != nil {
                    map["fieldType"] = self.fieldType!
                }
                if self.id != nil {
                    map["id"] = self.id!
                }
                if self.name != nil {
                    map["name"] = self.name!
                }
                if self.title != nil {
                    map["title"] = self.title!
                }
                if self.type != nil {
                    map["type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["code"] as? String {
                    self.code = value
                }
                if let value = dict["description"] as? String {
                    self.description_ = value
                }
                if let value = dict["fieldType"] as? String {
                    self.fieldType = value
                }
                if let value = dict["id"] as? Int64 {
                    self.id = value
                }
                if let value = dict["name"] as? String {
                    self.name = value
                }
                if let value = dict["title"] as? String {
                    self.title = value
                }
                if let value = dict["type"] as? String {
                    self.type = value
                }
            }
        }
        public class FreeVariables : Tea.TeaModel {
            public var code: String?

            public var description_: String?

            public var fieldType: String?

            public var id: Int64?

            public var name: String?

            public var title: String?

            public var type: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.code != nil {
                    map["code"] = self.code!
                }
                if self.description_ != nil {
                    map["description"] = self.description_!
                }
                if self.fieldType != nil {
                    map["fieldType"] = self.fieldType!
                }
                if self.id != nil {
                    map["id"] = self.id!
                }
                if self.name != nil {
                    map["name"] = self.name!
                }
                if self.title != nil {
                    map["title"] = self.title!
                }
                if self.type != nil {
                    map["type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["code"] as? String {
                    self.code = value
                }
                if let value = dict["description"] as? String {
                    self.description_ = value
                }
                if let value = dict["fieldType"] as? String {
                    self.fieldType = value
                }
                if let value = dict["id"] as? Int64 {
                    self.id = value
                }
                if let value = dict["name"] as? String {
                    self.name = value
                }
                if let value = dict["title"] as? String {
                    self.title = value
                }
                if let value = dict["type"] as? String {
                    self.type = value
                }
            }
        }
        public var chargeVariables: [DescribeEventVariableTemplateBindResponseBody.ResultObject.ChargeVariables]?

        public var freeVariables: [DescribeEventVariableTemplateBindResponseBody.ResultObject.FreeVariables]?

        public var templateCode: String?

        public var totalCount: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.chargeVariables != nil {
                var tmp : [Any] = []
                for k in self.chargeVariables! {
                    tmp.append(k.toMap())
                }
                map["chargeVariables"] = tmp
            }
            if self.freeVariables != nil {
                var tmp : [Any] = []
                for k in self.freeVariables! {
                    tmp.append(k.toMap())
                }
                map["freeVariables"] = tmp
            }
            if self.templateCode != nil {
                map["templateCode"] = self.templateCode!
            }
            if self.totalCount != nil {
                map["totalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["chargeVariables"] as? [Any?] {
                var tmp : [DescribeEventVariableTemplateBindResponseBody.ResultObject.ChargeVariables] = []
                for v in value {
                    if v != nil {
                        var model = DescribeEventVariableTemplateBindResponseBody.ResultObject.ChargeVariables()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.chargeVariables = tmp
            }
            if let value = dict["freeVariables"] as? [Any?] {
                var tmp : [DescribeEventVariableTemplateBindResponseBody.ResultObject.FreeVariables] = []
                for v in value {
                    if v != nil {
                        var model = DescribeEventVariableTemplateBindResponseBody.ResultObject.FreeVariables()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.freeVariables = tmp
            }
            if let value = dict["templateCode"] as? String {
                self.templateCode = value
            }
            if let value = dict["totalCount"] as? String {
                self.totalCount = value
            }
        }
    }
    public var requestId: String?

    public var resultObject: DescribeEventVariableTemplateBindResponseBody.ResultObject?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.resultObject?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? [String: Any?] {
            var model = DescribeEventVariableTemplateBindResponseBody.ResultObject()
            model.fromMap(value)
            self.resultObject = model
        }
    }
}

public class DescribeEventVariableTemplateBindResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeEventVariableTemplateBindResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeEventVariableTemplateBindResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeEventVariableTemplateListRequest : Tea.TeaModel {
    public var lang: String?

    public var inputs: String?

    public var regId: String?

    public var templateCode: String?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.inputs != nil {
            map["inputs"] = self.inputs!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.templateCode != nil {
            map["templateCode"] = self.templateCode!
        }
        if self.type != nil {
            map["type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["inputs"] as? String {
            self.inputs = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["templateCode"] as? String {
            self.templateCode = value
        }
        if let value = dict["type"] as? String {
            self.type = value
        }
    }
}

public class DescribeEventVariableTemplateListResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public class Variables : Tea.TeaModel {
            public var code: String?

            public var description_: String?

            public var fieldType: String?

            public var id: Int64?

            public var name: String?

            public var title: String?

            public var type: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.code != nil {
                    map["code"] = self.code!
                }
                if self.description_ != nil {
                    map["description"] = self.description_!
                }
                if self.fieldType != nil {
                    map["fieldType"] = self.fieldType!
                }
                if self.id != nil {
                    map["id"] = self.id!
                }
                if self.name != nil {
                    map["name"] = self.name!
                }
                if self.title != nil {
                    map["title"] = self.title!
                }
                if self.type != nil {
                    map["type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["code"] as? String {
                    self.code = value
                }
                if let value = dict["description"] as? String {
                    self.description_ = value
                }
                if let value = dict["fieldType"] as? String {
                    self.fieldType = value
                }
                if let value = dict["id"] as? Int64 {
                    self.id = value
                }
                if let value = dict["name"] as? String {
                    self.name = value
                }
                if let value = dict["title"] as? String {
                    self.title = value
                }
                if let value = dict["type"] as? String {
                    self.type = value
                }
            }
        }
        public var templateCode: String?

        public var templateName: String?

        public var variables: [DescribeEventVariableTemplateListResponseBody.ResultObject.Variables]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.templateCode != nil {
                map["templateCode"] = self.templateCode!
            }
            if self.templateName != nil {
                map["templateName"] = self.templateName!
            }
            if self.variables != nil {
                var tmp : [Any] = []
                for k in self.variables! {
                    tmp.append(k.toMap())
                }
                map["variables"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["templateCode"] as? String {
                self.templateCode = value
            }
            if let value = dict["templateName"] as? String {
                self.templateName = value
            }
            if let value = dict["variables"] as? [Any?] {
                var tmp : [DescribeEventVariableTemplateListResponseBody.ResultObject.Variables] = []
                for v in value {
                    if v != nil {
                        var model = DescribeEventVariableTemplateListResponseBody.ResultObject.Variables()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.variables = tmp
            }
        }
    }
    public var requestId: String?

    public var resultObject: [DescribeEventVariableTemplateListResponseBody.ResultObject]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            var tmp : [Any] = []
            for k in self.resultObject! {
                tmp.append(k.toMap())
            }
            map["resultObject"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? [Any?] {
            var tmp : [DescribeEventVariableTemplateListResponseBody.ResultObject] = []
            for v in value {
                if v != nil {
                    var model = DescribeEventVariableTemplateListResponseBody.ResultObject()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.resultObject = tmp
        }
    }
}

public class DescribeEventVariableTemplateListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeEventVariableTemplateListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeEventVariableTemplateListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeEventsVariableListRequest : Tea.TeaModel {
    public var lang: String?

    public var createType: String?

    public var eventCodes: String?

    public var filterDTO: String?

    public var regId: String?

    public var scene: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.createType != nil {
            map["createType"] = self.createType!
        }
        if self.eventCodes != nil {
            map["eventCodes"] = self.eventCodes!
        }
        if self.filterDTO != nil {
            map["filterDTO"] = self.filterDTO!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.scene != nil {
            map["scene"] = self.scene!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["createType"] as? String {
            self.createType = value
        }
        if let value = dict["eventCodes"] as? String {
            self.eventCodes = value
        }
        if let value = dict["filterDTO"] as? String {
            self.filterDTO = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["scene"] as? String {
            self.scene = value
        }
    }
}

public class DescribeEventsVariableListResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
    }
}

public class DescribeEventsVariableListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeEventsVariableListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeEventsVariableListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeExcuteNumRequest : Tea.TeaModel {
    public var code: String?

    public var degree: String?

    public var endDate: String?

    public var lang: String?

    public var sourceIp: String?

    public var startDate: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.degree != nil {
            map["Degree"] = self.degree!
        }
        if self.endDate != nil {
            map["EndDate"] = self.endDate!
        }
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.sourceIp != nil {
            map["SourceIp"] = self.sourceIp!
        }
        if self.startDate != nil {
            map["StartDate"] = self.startDate!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Degree"] as? String {
            self.degree = value
        }
        if let value = dict["EndDate"] as? String {
            self.endDate = value
        }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["SourceIp"] as? String {
            self.sourceIp = value
        }
        if let value = dict["StartDate"] as? String {
            self.startDate = value
        }
    }
}

public class DescribeExcuteNumResponseBody : Tea.TeaModel {
    public var categories: [String]?

    public var data: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.categories != nil {
            map["Categories"] = self.categories!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Categories"] as? [String] {
            self.categories = value
        }
        if let value = dict["Data"] as? [String] {
            self.data = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeExcuteNumResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeExcuteNumResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeExcuteNumResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeExistNameRequest : Tea.TeaModel {
    public var lang: String?

    public var name: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.name != nil {
            map["name"] = self.name!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["name"] as? String {
            self.name = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeExistNameResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
    }
}

public class DescribeExistNameResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeExistNameResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeExistNameResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeExistSceneRequest : Tea.TeaModel {
    public var lang: String?

    public var sceneName: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.sceneName != nil {
            map["SceneName"] = self.sceneName!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["SceneName"] as? String {
            self.sceneName = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeExistSceneResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var data: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.data != nil {
            map["data"] = self.data!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["data"] as? Bool {
            self.data = value
        }
    }
}

public class DescribeExistSceneResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeExistSceneResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeExistSceneResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeExpressionVariableDetailRequest : Tea.TeaModel {
    public var lang: String?

    public var id: Int64?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.id != nil {
            map["id"] = self.id!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["id"] as? Int64 {
            self.id = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeExpressionVariableDetailResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: [String: Any]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? [String: Any] {
            self.resultObject = value
        }
    }
}

public class DescribeExpressionVariableDetailResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeExpressionVariableDetailResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeExpressionVariableDetailResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeExpressionVariableFunctionListRequest : Tea.TeaModel {
    public var lang: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeExpressionVariableFunctionListResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public var description_: String?

        public var key: String?

        public var maxParamSize: Int64?

        public var minParamSize: Int64?

        public var paramTypes: String?

        public var redirect: Bool?

        public var returnTypes: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.description_ != nil {
                map["description"] = self.description_!
            }
            if self.key != nil {
                map["key"] = self.key!
            }
            if self.maxParamSize != nil {
                map["maxParamSize"] = self.maxParamSize!
            }
            if self.minParamSize != nil {
                map["minParamSize"] = self.minParamSize!
            }
            if self.paramTypes != nil {
                map["paramTypes"] = self.paramTypes!
            }
            if self.redirect != nil {
                map["redirect"] = self.redirect!
            }
            if self.returnTypes != nil {
                map["returnTypes"] = self.returnTypes!
            }
            if self.value != nil {
                map["value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["description"] as? String {
                self.description_ = value
            }
            if let value = dict["key"] as? String {
                self.key = value
            }
            if let value = dict["maxParamSize"] as? Int64 {
                self.maxParamSize = value
            }
            if let value = dict["minParamSize"] as? Int64 {
                self.minParamSize = value
            }
            if let value = dict["paramTypes"] as? String {
                self.paramTypes = value
            }
            if let value = dict["redirect"] as? Bool {
                self.redirect = value
            }
            if let value = dict["returnTypes"] as? String {
                self.returnTypes = value
            }
            if let value = dict["value"] as? String {
                self.value = value
            }
        }
    }
    public var requestId: String?

    public var resultObject: [DescribeExpressionVariableFunctionListResponseBody.ResultObject]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            var tmp : [Any] = []
            for k in self.resultObject! {
                tmp.append(k.toMap())
            }
            map["resultObject"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? [Any?] {
            var tmp : [DescribeExpressionVariableFunctionListResponseBody.ResultObject] = []
            for v in value {
                if v != nil {
                    var model = DescribeExpressionVariableFunctionListResponseBody.ResultObject()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.resultObject = tmp
        }
    }
}

public class DescribeExpressionVariableFunctionListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeExpressionVariableFunctionListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeExpressionVariableFunctionListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeExpressionVariablePageRequest : Tea.TeaModel {
    public var lang: String?

    public var currentPage: String?

    public var eventCode: String?

    public var outputs: String?

    public var pageSize: String?

    public var regId: String?

    public var status: String?

    public var value: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.currentPage != nil {
            map["currentPage"] = self.currentPage!
        }
        if self.eventCode != nil {
            map["eventCode"] = self.eventCode!
        }
        if self.outputs != nil {
            map["outputs"] = self.outputs!
        }
        if self.pageSize != nil {
            map["pageSize"] = self.pageSize!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.status != nil {
            map["status"] = self.status!
        }
        if self.value != nil {
            map["value"] = self.value!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["currentPage"] as? String {
            self.currentPage = value
        }
        if let value = dict["eventCode"] as? String {
            self.eventCode = value
        }
        if let value = dict["outputs"] as? String {
            self.outputs = value
        }
        if let value = dict["pageSize"] as? String {
            self.pageSize = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["status"] as? String {
            self.status = value
        }
        if let value = dict["value"] as? String {
            self.value = value
        }
    }
}

public class DescribeExpressionVariablePageResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public var description_: String?

        public var eventName: String?

        public var gmtModified: Int64?

        public var id: Int64?

        public var outputs: String?

        public var status: String?

        public var title: String?

        public var version: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.description_ != nil {
                map["description"] = self.description_!
            }
            if self.eventName != nil {
                map["eventName"] = self.eventName!
            }
            if self.gmtModified != nil {
                map["gmtModified"] = self.gmtModified!
            }
            if self.id != nil {
                map["id"] = self.id!
            }
            if self.outputs != nil {
                map["outputs"] = self.outputs!
            }
            if self.status != nil {
                map["status"] = self.status!
            }
            if self.title != nil {
                map["title"] = self.title!
            }
            if self.version != nil {
                map["version"] = self.version!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["description"] as? String {
                self.description_ = value
            }
            if let value = dict["eventName"] as? String {
                self.eventName = value
            }
            if let value = dict["gmtModified"] as? Int64 {
                self.gmtModified = value
            }
            if let value = dict["id"] as? Int64 {
                self.id = value
            }
            if let value = dict["outputs"] as? String {
                self.outputs = value
            }
            if let value = dict["status"] as? String {
                self.status = value
            }
            if let value = dict["title"] as? String {
                self.title = value
            }
            if let value = dict["version"] as? Int64 {
                self.version = value
            }
        }
    }
    public var requestId: String?

    public var currentPage: Int32?

    public var pageSize: Int32?

    public var resultObject: [DescribeExpressionVariablePageResponseBody.ResultObject]?

    public var totalItem: Int32?

    public var totalPage: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.currentPage != nil {
            map["currentPage"] = self.currentPage!
        }
        if self.pageSize != nil {
            map["pageSize"] = self.pageSize!
        }
        if self.resultObject != nil {
            var tmp : [Any] = []
            for k in self.resultObject! {
                tmp.append(k.toMap())
            }
            map["resultObject"] = tmp
        }
        if self.totalItem != nil {
            map["totalItem"] = self.totalItem!
        }
        if self.totalPage != nil {
            map["totalPage"] = self.totalPage!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["currentPage"] as? Int32 {
            self.currentPage = value
        }
        if let value = dict["pageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["resultObject"] as? [Any?] {
            var tmp : [DescribeExpressionVariablePageResponseBody.ResultObject] = []
            for v in value {
                if v != nil {
                    var model = DescribeExpressionVariablePageResponseBody.ResultObject()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.resultObject = tmp
        }
        if let value = dict["totalItem"] as? Int32 {
            self.totalItem = value
        }
        if let value = dict["totalPage"] as? Int32 {
            self.totalPage = value
        }
    }
}

public class DescribeExpressionVariablePageResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeExpressionVariablePageResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeExpressionVariablePageResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeFieldByIdRequest : Tea.TeaModel {
    public var lang: String?

    public var id: Int64?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.id != nil {
            map["id"] = self.id!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["id"] as? Int64 {
            self.id = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeFieldByIdResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
    }
}

public class DescribeFieldByIdResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeFieldByIdResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeFieldByIdResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeFieldListRequest : Tea.TeaModel {
    public var lang: String?

    public var condition: String?

    public var inputs: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.condition != nil {
            map["condition"] = self.condition!
        }
        if self.inputs != nil {
            map["inputs"] = self.inputs!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["condition"] as? String {
            self.condition = value
        }
        if let value = dict["inputs"] as? String {
            self.inputs = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeFieldListResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public var classify: String?

        public var description_: String?

        public var enumData: String?

        public var id: Int64?

        public var name: String?

        public var source: String?

        public var status: String?

        public var title: String?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.classify != nil {
                map["classify"] = self.classify!
            }
            if self.description_ != nil {
                map["description"] = self.description_!
            }
            if self.enumData != nil {
                map["enumData"] = self.enumData!
            }
            if self.id != nil {
                map["id"] = self.id!
            }
            if self.name != nil {
                map["name"] = self.name!
            }
            if self.source != nil {
                map["source"] = self.source!
            }
            if self.status != nil {
                map["status"] = self.status!
            }
            if self.title != nil {
                map["title"] = self.title!
            }
            if self.type != nil {
                map["type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["classify"] as? String {
                self.classify = value
            }
            if let value = dict["description"] as? String {
                self.description_ = value
            }
            if let value = dict["enumData"] as? String {
                self.enumData = value
            }
            if let value = dict["id"] as? Int64 {
                self.id = value
            }
            if let value = dict["name"] as? String {
                self.name = value
            }
            if let value = dict["source"] as? String {
                self.source = value
            }
            if let value = dict["status"] as? String {
                self.status = value
            }
            if let value = dict["title"] as? String {
                self.title = value
            }
            if let value = dict["type"] as? String {
                self.type = value
            }
        }
    }
    public var requestId: String?

    public var currentPage: Int32?

    public var pageSize: Int32?

    public var resultObject: [DescribeFieldListResponseBody.ResultObject]?

    public var totalItem: Int32?

    public var totalPage: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.currentPage != nil {
            map["currentPage"] = self.currentPage!
        }
        if self.pageSize != nil {
            map["pageSize"] = self.pageSize!
        }
        if self.resultObject != nil {
            var tmp : [Any] = []
            for k in self.resultObject! {
                tmp.append(k.toMap())
            }
            map["resultObject"] = tmp
        }
        if self.totalItem != nil {
            map["totalItem"] = self.totalItem!
        }
        if self.totalPage != nil {
            map["totalPage"] = self.totalPage!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["currentPage"] as? Int32 {
            self.currentPage = value
        }
        if let value = dict["pageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["resultObject"] as? [Any?] {
            var tmp : [DescribeFieldListResponseBody.ResultObject] = []
            for v in value {
                if v != nil {
                    var model = DescribeFieldListResponseBody.ResultObject()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.resultObject = tmp
        }
        if let value = dict["totalItem"] as? Int32 {
            self.totalItem = value
        }
        if let value = dict["totalPage"] as? Int32 {
            self.totalPage = value
        }
    }
}

public class DescribeFieldListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeFieldListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeFieldListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeFieldPageRequest : Tea.TeaModel {
    public var lang: String?

    public var classify: String?

    public var condition: String?

    public var currentPage: String?

    public var name: String?

    public var pageSize: String?

    public var regId: String?

    public var source: String?

    public var status: String?

    public var title: String?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.classify != nil {
            map["classify"] = self.classify!
        }
        if self.condition != nil {
            map["condition"] = self.condition!
        }
        if self.currentPage != nil {
            map["currentPage"] = self.currentPage!
        }
        if self.name != nil {
            map["name"] = self.name!
        }
        if self.pageSize != nil {
            map["pageSize"] = self.pageSize!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.source != nil {
            map["source"] = self.source!
        }
        if self.status != nil {
            map["status"] = self.status!
        }
        if self.title != nil {
            map["title"] = self.title!
        }
        if self.type != nil {
            map["type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["classify"] as? String {
            self.classify = value
        }
        if let value = dict["condition"] as? String {
            self.condition = value
        }
        if let value = dict["currentPage"] as? String {
            self.currentPage = value
        }
        if let value = dict["name"] as? String {
            self.name = value
        }
        if let value = dict["pageSize"] as? String {
            self.pageSize = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["source"] as? String {
            self.source = value
        }
        if let value = dict["status"] as? String {
            self.status = value
        }
        if let value = dict["title"] as? String {
            self.title = value
        }
        if let value = dict["type"] as? String {
            self.type = value
        }
    }
}

public class DescribeFieldPageResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public var classify: String?

        public var description_: String?

        public var enumData: String?

        public var id: Int64?

        public var name: String?

        public var source: String?

        public var status: String?

        public var title: String?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.classify != nil {
                map["classify"] = self.classify!
            }
            if self.description_ != nil {
                map["description"] = self.description_!
            }
            if self.enumData != nil {
                map["enumData"] = self.enumData!
            }
            if self.id != nil {
                map["id"] = self.id!
            }
            if self.name != nil {
                map["name"] = self.name!
            }
            if self.source != nil {
                map["source"] = self.source!
            }
            if self.status != nil {
                map["status"] = self.status!
            }
            if self.title != nil {
                map["title"] = self.title!
            }
            if self.type != nil {
                map["type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["classify"] as? String {
                self.classify = value
            }
            if let value = dict["description"] as? String {
                self.description_ = value
            }
            if let value = dict["enumData"] as? String {
                self.enumData = value
            }
            if let value = dict["id"] as? Int64 {
                self.id = value
            }
            if let value = dict["name"] as? String {
                self.name = value
            }
            if let value = dict["source"] as? String {
                self.source = value
            }
            if let value = dict["status"] as? String {
                self.status = value
            }
            if let value = dict["title"] as? String {
                self.title = value
            }
            if let value = dict["type"] as? String {
                self.type = value
            }
        }
    }
    public var requestId: String?

    public var currentPage: Int32?

    public var pageSize: Int32?

    public var resultObject: [DescribeFieldPageResponseBody.ResultObject]?

    public var totalItem: Int32?

    public var totalPage: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.currentPage != nil {
            map["currentPage"] = self.currentPage!
        }
        if self.pageSize != nil {
            map["pageSize"] = self.pageSize!
        }
        if self.resultObject != nil {
            var tmp : [Any] = []
            for k in self.resultObject! {
                tmp.append(k.toMap())
            }
            map["resultObject"] = tmp
        }
        if self.totalItem != nil {
            map["totalItem"] = self.totalItem!
        }
        if self.totalPage != nil {
            map["totalPage"] = self.totalPage!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["currentPage"] as? Int32 {
            self.currentPage = value
        }
        if let value = dict["pageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["resultObject"] as? [Any?] {
            var tmp : [DescribeFieldPageResponseBody.ResultObject] = []
            for v in value {
                if v != nil {
                    var model = DescribeFieldPageResponseBody.ResultObject()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.resultObject = tmp
        }
        if let value = dict["totalItem"] as? Int32 {
            self.totalItem = value
        }
        if let value = dict["totalPage"] as? Int32 {
            self.totalPage = value
        }
    }
}

public class DescribeFieldPageResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeFieldPageResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeFieldPageResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeGroupAccountPageRequest : Tea.TeaModel {
    public var lang: String?

    public var communityNo: String?

    public var currentPage: String?

    public var direction: String?

    public var fieldKey: String?

    public var fieldVal: String?

    public var isPage: Bool?

    public var order: String?

    public var pageSize: String?

    public var regId: String?

    public var taskId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.communityNo != nil {
            map["communityNo"] = self.communityNo!
        }
        if self.currentPage != nil {
            map["currentPage"] = self.currentPage!
        }
        if self.direction != nil {
            map["direction"] = self.direction!
        }
        if self.fieldKey != nil {
            map["fieldKey"] = self.fieldKey!
        }
        if self.fieldVal != nil {
            map["fieldVal"] = self.fieldVal!
        }
        if self.isPage != nil {
            map["isPage"] = self.isPage!
        }
        if self.order != nil {
            map["order"] = self.order!
        }
        if self.pageSize != nil {
            map["pageSize"] = self.pageSize!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.taskId != nil {
            map["taskId"] = self.taskId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["communityNo"] as? String {
            self.communityNo = value
        }
        if let value = dict["currentPage"] as? String {
            self.currentPage = value
        }
        if let value = dict["direction"] as? String {
            self.direction = value
        }
        if let value = dict["fieldKey"] as? String {
            self.fieldKey = value
        }
        if let value = dict["fieldVal"] as? String {
            self.fieldVal = value
        }
        if let value = dict["isPage"] as? Bool {
            self.isPage = value
        }
        if let value = dict["order"] as? String {
            self.order = value
        }
        if let value = dict["pageSize"] as? String {
            self.pageSize = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["taskId"] as? String {
            self.taskId = value
        }
    }
}

public class DescribeGroupAccountPageResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var currentPage: Int32?

    public var data: Bool?

    public var pageSize: Int32?

    public var totalItem: Int32?

    public var totalPage: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.currentPage != nil {
            map["currentPage"] = self.currentPage!
        }
        if self.data != nil {
            map["data"] = self.data!
        }
        if self.pageSize != nil {
            map["pageSize"] = self.pageSize!
        }
        if self.totalItem != nil {
            map["totalItem"] = self.totalItem!
        }
        if self.totalPage != nil {
            map["totalPage"] = self.totalPage!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["currentPage"] as? Int32 {
            self.currentPage = value
        }
        if let value = dict["data"] as? Bool {
            self.data = value
        }
        if let value = dict["pageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["totalItem"] as? Int32 {
            self.totalItem = value
        }
        if let value = dict["totalPage"] as? Int32 {
            self.totalPage = value
        }
    }
}

public class DescribeGroupAccountPageResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeGroupAccountPageResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeGroupAccountPageResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeGroupConditionListRequest : Tea.TeaModel {
    public var lang: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeGroupConditionListResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public var fieldKey: String?

        public var fieldValue: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.fieldKey != nil {
                map["fieldKey"] = self.fieldKey!
            }
            if self.fieldValue != nil {
                map["fieldValue"] = self.fieldValue!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["fieldKey"] as? String {
                self.fieldKey = value
            }
            if let value = dict["fieldValue"] as? String {
                self.fieldValue = value
            }
        }
    }
    public var requestId: String?

    public var resultObject: [DescribeGroupConditionListResponseBody.ResultObject]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            var tmp : [Any] = []
            for k in self.resultObject! {
                tmp.append(k.toMap())
            }
            map["resultObject"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? [Any?] {
            var tmp : [DescribeGroupConditionListResponseBody.ResultObject] = []
            for v in value {
                if v != nil {
                    var model = DescribeGroupConditionListResponseBody.ResultObject()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.resultObject = tmp
        }
    }
}

public class DescribeGroupConditionListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeGroupConditionListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeGroupConditionListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeGroupPageRequest : Tea.TeaModel {
    public var lang: String?

    public var currentPage: String?

    public var direction: String?

    public var order: String?

    public var pageSize: String?

    public var regId: String?

    public var taskId: String?

    public var timeType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.currentPage != nil {
            map["currentPage"] = self.currentPage!
        }
        if self.direction != nil {
            map["direction"] = self.direction!
        }
        if self.order != nil {
            map["order"] = self.order!
        }
        if self.pageSize != nil {
            map["pageSize"] = self.pageSize!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.taskId != nil {
            map["taskId"] = self.taskId!
        }
        if self.timeType != nil {
            map["timeType"] = self.timeType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["currentPage"] as? String {
            self.currentPage = value
        }
        if let value = dict["direction"] as? String {
            self.direction = value
        }
        if let value = dict["order"] as? String {
            self.order = value
        }
        if let value = dict["pageSize"] as? String {
            self.pageSize = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["taskId"] as? String {
            self.taskId = value
        }
        if let value = dict["timeType"] as? String {
            self.timeType = value
        }
    }
}

public class DescribeGroupPageResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public var communityNo: String?

        public var createTime: Int64?

        public var groupRisk: String?

        public var groupScale: String?

        public var id: Int64?

        public var sceneName: String?

        public var taskId: Int64?

        public var userId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.communityNo != nil {
                map["communityNo"] = self.communityNo!
            }
            if self.createTime != nil {
                map["createTime"] = self.createTime!
            }
            if self.groupRisk != nil {
                map["groupRisk"] = self.groupRisk!
            }
            if self.groupScale != nil {
                map["groupScale"] = self.groupScale!
            }
            if self.id != nil {
                map["id"] = self.id!
            }
            if self.sceneName != nil {
                map["sceneName"] = self.sceneName!
            }
            if self.taskId != nil {
                map["taskId"] = self.taskId!
            }
            if self.userId != nil {
                map["userId"] = self.userId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["communityNo"] as? String {
                self.communityNo = value
            }
            if let value = dict["createTime"] as? Int64 {
                self.createTime = value
            }
            if let value = dict["groupRisk"] as? String {
                self.groupRisk = value
            }
            if let value = dict["groupScale"] as? String {
                self.groupScale = value
            }
            if let value = dict["id"] as? Int64 {
                self.id = value
            }
            if let value = dict["sceneName"] as? String {
                self.sceneName = value
            }
            if let value = dict["taskId"] as? Int64 {
                self.taskId = value
            }
            if let value = dict["userId"] as? String {
                self.userId = value
            }
        }
    }
    public var requestId: String?

    public var currentPage: Int32?

    public var pageSize: Int32?

    public var resultObject: [DescribeGroupPageResponseBody.ResultObject]?

    public var totalItem: Int32?

    public var totalPage: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.currentPage != nil {
            map["currentPage"] = self.currentPage!
        }
        if self.pageSize != nil {
            map["pageSize"] = self.pageSize!
        }
        if self.resultObject != nil {
            var tmp : [Any] = []
            for k in self.resultObject! {
                tmp.append(k.toMap())
            }
            map["resultObject"] = tmp
        }
        if self.totalItem != nil {
            map["totalItem"] = self.totalItem!
        }
        if self.totalPage != nil {
            map["totalPage"] = self.totalPage!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["currentPage"] as? Int32 {
            self.currentPage = value
        }
        if let value = dict["pageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["resultObject"] as? [Any?] {
            var tmp : [DescribeGroupPageResponseBody.ResultObject] = []
            for v in value {
                if v != nil {
                    var model = DescribeGroupPageResponseBody.ResultObject()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.resultObject = tmp
        }
        if let value = dict["totalItem"] as? Int32 {
            self.totalItem = value
        }
        if let value = dict["totalPage"] as? Int32 {
            self.totalPage = value
        }
    }
}

public class DescribeGroupPageResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeGroupPageResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeGroupPageResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeGroupStatisticsByTodayRequest : Tea.TeaModel {
    public var lang: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeGroupStatisticsByTodayResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var data: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.data != nil {
            map["data"] = self.data!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["data"] as? Bool {
            self.data = value
        }
    }
}

public class DescribeGroupStatisticsByTodayResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeGroupStatisticsByTodayResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeGroupStatisticsByTodayResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeGroupTrendRequest : Tea.TeaModel {
    public var lang: String?

    public var day: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.day != nil {
            map["day"] = self.day!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["day"] as? String {
            self.day = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeGroupTrendResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var data: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.data != nil {
            map["data"] = self.data!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["data"] as? Bool {
            self.data = value
        }
    }
}

public class DescribeGroupTrendResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeGroupTrendResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeGroupTrendResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeHasRuleNameByEventCodeRequest : Tea.TeaModel {
    public var lang: String?

    public var eventCode: String?

    public var excludeRuleId: String?

    public var regId: String?

    public var ruleName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.eventCode != nil {
            map["eventCode"] = self.eventCode!
        }
        if self.excludeRuleId != nil {
            map["excludeRuleId"] = self.excludeRuleId!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.ruleName != nil {
            map["ruleName"] = self.ruleName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["eventCode"] as? String {
            self.eventCode = value
        }
        if let value = dict["excludeRuleId"] as? String {
            self.excludeRuleId = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["ruleName"] as? String {
            self.ruleName = value
        }
    }
}

public class DescribeHasRuleNameByEventCodeResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
    }
}

public class DescribeHasRuleNameByEventCodeResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeHasRuleNameByEventCodeResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeHasRuleNameByEventCodeResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeHighRiskPieChartRequest : Tea.TeaModel {
    public var lang: String?

    public var beginTime: Int64?

    public var endTime: Int64?

    public var eventCodes: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.beginTime != nil {
            map["beginTime"] = self.beginTime!
        }
        if self.endTime != nil {
            map["endTime"] = self.endTime!
        }
        if self.eventCodes != nil {
            map["eventCodes"] = self.eventCodes!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["beginTime"] as? Int64 {
            self.beginTime = value
        }
        if let value = dict["endTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["eventCodes"] as? String {
            self.eventCodes = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeHighRiskPieChartResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public class HighRiskIPCity : Tea.TeaModel {
            public class Grid : Tea.TeaModel {
                public var show: Bool?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.show != nil {
                        map["show"] = self.show!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["show"] as? Bool {
                        self.show = value
                    }
                }
            }
            public class Series : Tea.TeaModel {
                public class Data : Tea.TeaModel {
                    public var name: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.name != nil {
                            map["name"] = self.name!
                        }
                        if self.value != nil {
                            map["value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["name"] as? String {
                            self.name = value
                        }
                        if let value = dict["value"] as? String {
                            self.value = value
                        }
                    }
                }
                public var data: [DescribeHighRiskPieChartResponseBody.ResultObject.HighRiskIPCity.Series.Data]?

                public var name: String?

                public var roseType: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.data != nil {
                        var tmp : [Any] = []
                        for k in self.data! {
                            tmp.append(k.toMap())
                        }
                        map["data"] = tmp
                    }
                    if self.name != nil {
                        map["name"] = self.name!
                    }
                    if self.roseType != nil {
                        map["roseType"] = self.roseType!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["data"] as? [Any?] {
                        var tmp : [DescribeHighRiskPieChartResponseBody.ResultObject.HighRiskIPCity.Series.Data] = []
                        for v in value {
                            if v != nil {
                                var model = DescribeHighRiskPieChartResponseBody.ResultObject.HighRiskIPCity.Series.Data()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.data = tmp
                    }
                    if let value = dict["name"] as? String {
                        self.name = value
                    }
                    if let value = dict["roseType"] as? String {
                        self.roseType = value
                    }
                }
            }
            public var animation: Bool?

            public var grid: DescribeHighRiskPieChartResponseBody.ResultObject.HighRiskIPCity.Grid?

            public var series: [DescribeHighRiskPieChartResponseBody.ResultObject.HighRiskIPCity.Series]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.grid?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.animation != nil {
                    map["animation"] = self.animation!
                }
                if self.grid != nil {
                    map["grid"] = self.grid?.toMap()
                }
                if self.series != nil {
                    var tmp : [Any] = []
                    for k in self.series! {
                        tmp.append(k.toMap())
                    }
                    map["series"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["animation"] as? Bool {
                    self.animation = value
                }
                if let value = dict["grid"] as? [String: Any?] {
                    var model = DescribeHighRiskPieChartResponseBody.ResultObject.HighRiskIPCity.Grid()
                    model.fromMap(value)
                    self.grid = model
                }
                if let value = dict["series"] as? [Any?] {
                    var tmp : [DescribeHighRiskPieChartResponseBody.ResultObject.HighRiskIPCity.Series] = []
                    for v in value {
                        if v != nil {
                            var model = DescribeHighRiskPieChartResponseBody.ResultObject.HighRiskIPCity.Series()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.series = tmp
                }
            }
        }
        public class HighRiskIPProvince : Tea.TeaModel {
            public class Grid : Tea.TeaModel {
                public var show: Bool?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.show != nil {
                        map["show"] = self.show!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["show"] as? Bool {
                        self.show = value
                    }
                }
            }
            public class Series : Tea.TeaModel {
                public class Data : Tea.TeaModel {
                    public var name: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.name != nil {
                            map["name"] = self.name!
                        }
                        if self.value != nil {
                            map["value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["name"] as? String {
                            self.name = value
                        }
                        if let value = dict["value"] as? String {
                            self.value = value
                        }
                    }
                }
                public var data: [DescribeHighRiskPieChartResponseBody.ResultObject.HighRiskIPProvince.Series.Data]?

                public var name: String?

                public var roseType: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.data != nil {
                        var tmp : [Any] = []
                        for k in self.data! {
                            tmp.append(k.toMap())
                        }
                        map["data"] = tmp
                    }
                    if self.name != nil {
                        map["name"] = self.name!
                    }
                    if self.roseType != nil {
                        map["roseType"] = self.roseType!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["data"] as? [Any?] {
                        var tmp : [DescribeHighRiskPieChartResponseBody.ResultObject.HighRiskIPProvince.Series.Data] = []
                        for v in value {
                            if v != nil {
                                var model = DescribeHighRiskPieChartResponseBody.ResultObject.HighRiskIPProvince.Series.Data()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.data = tmp
                    }
                    if let value = dict["name"] as? String {
                        self.name = value
                    }
                    if let value = dict["roseType"] as? String {
                        self.roseType = value
                    }
                }
            }
            public var animation: Bool?

            public var grid: DescribeHighRiskPieChartResponseBody.ResultObject.HighRiskIPProvince.Grid?

            public var series: [DescribeHighRiskPieChartResponseBody.ResultObject.HighRiskIPProvince.Series]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.grid?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.animation != nil {
                    map["animation"] = self.animation!
                }
                if self.grid != nil {
                    map["grid"] = self.grid?.toMap()
                }
                if self.series != nil {
                    var tmp : [Any] = []
                    for k in self.series! {
                        tmp.append(k.toMap())
                    }
                    map["series"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["animation"] as? Bool {
                    self.animation = value
                }
                if let value = dict["grid"] as? [String: Any?] {
                    var model = DescribeHighRiskPieChartResponseBody.ResultObject.HighRiskIPProvince.Grid()
                    model.fromMap(value)
                    self.grid = model
                }
                if let value = dict["series"] as? [Any?] {
                    var tmp : [DescribeHighRiskPieChartResponseBody.ResultObject.HighRiskIPProvince.Series] = []
                    for v in value {
                        if v != nil {
                            var model = DescribeHighRiskPieChartResponseBody.ResultObject.HighRiskIPProvince.Series()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.series = tmp
                }
            }
        }
        public class HighRiskMobileCity : Tea.TeaModel {
            public class Grid : Tea.TeaModel {
                public var show: Bool?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.show != nil {
                        map["show"] = self.show!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["show"] as? Bool {
                        self.show = value
                    }
                }
            }
            public class Series : Tea.TeaModel {
                public class Data : Tea.TeaModel {
                    public var name: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.name != nil {
                            map["name"] = self.name!
                        }
                        if self.value != nil {
                            map["value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["name"] as? String {
                            self.name = value
                        }
                        if let value = dict["value"] as? String {
                            self.value = value
                        }
                    }
                }
                public var data: [DescribeHighRiskPieChartResponseBody.ResultObject.HighRiskMobileCity.Series.Data]?

                public var name: String?

                public var roseType: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.data != nil {
                        var tmp : [Any] = []
                        for k in self.data! {
                            tmp.append(k.toMap())
                        }
                        map["data"] = tmp
                    }
                    if self.name != nil {
                        map["name"] = self.name!
                    }
                    if self.roseType != nil {
                        map["roseType"] = self.roseType!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["data"] as? [Any?] {
                        var tmp : [DescribeHighRiskPieChartResponseBody.ResultObject.HighRiskMobileCity.Series.Data] = []
                        for v in value {
                            if v != nil {
                                var model = DescribeHighRiskPieChartResponseBody.ResultObject.HighRiskMobileCity.Series.Data()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.data = tmp
                    }
                    if let value = dict["name"] as? String {
                        self.name = value
                    }
                    if let value = dict["roseType"] as? String {
                        self.roseType = value
                    }
                }
            }
            public var animation: Bool?

            public var grid: DescribeHighRiskPieChartResponseBody.ResultObject.HighRiskMobileCity.Grid?

            public var series: [DescribeHighRiskPieChartResponseBody.ResultObject.HighRiskMobileCity.Series]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.grid?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.animation != nil {
                    map["animation"] = self.animation!
                }
                if self.grid != nil {
                    map["grid"] = self.grid?.toMap()
                }
                if self.series != nil {
                    var tmp : [Any] = []
                    for k in self.series! {
                        tmp.append(k.toMap())
                    }
                    map["series"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["animation"] as? Bool {
                    self.animation = value
                }
                if let value = dict["grid"] as? [String: Any?] {
                    var model = DescribeHighRiskPieChartResponseBody.ResultObject.HighRiskMobileCity.Grid()
                    model.fromMap(value)
                    self.grid = model
                }
                if let value = dict["series"] as? [Any?] {
                    var tmp : [DescribeHighRiskPieChartResponseBody.ResultObject.HighRiskMobileCity.Series] = []
                    for v in value {
                        if v != nil {
                            var model = DescribeHighRiskPieChartResponseBody.ResultObject.HighRiskMobileCity.Series()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.series = tmp
                }
            }
        }
        public class HighRiskMobileProvince : Tea.TeaModel {
            public class Grid : Tea.TeaModel {
                public var show: Bool?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.show != nil {
                        map["show"] = self.show!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["show"] as? Bool {
                        self.show = value
                    }
                }
            }
            public class Series : Tea.TeaModel {
                public class Data : Tea.TeaModel {
                    public var name: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.name != nil {
                            map["name"] = self.name!
                        }
                        if self.value != nil {
                            map["value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["name"] as? String {
                            self.name = value
                        }
                        if let value = dict["value"] as? String {
                            self.value = value
                        }
                    }
                }
                public var data: [DescribeHighRiskPieChartResponseBody.ResultObject.HighRiskMobileProvince.Series.Data]?

                public var name: String?

                public var roseType: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.data != nil {
                        var tmp : [Any] = []
                        for k in self.data! {
                            tmp.append(k.toMap())
                        }
                        map["data"] = tmp
                    }
                    if self.name != nil {
                        map["name"] = self.name!
                    }
                    if self.roseType != nil {
                        map["roseType"] = self.roseType!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["data"] as? [Any?] {
                        var tmp : [DescribeHighRiskPieChartResponseBody.ResultObject.HighRiskMobileProvince.Series.Data] = []
                        for v in value {
                            if v != nil {
                                var model = DescribeHighRiskPieChartResponseBody.ResultObject.HighRiskMobileProvince.Series.Data()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.data = tmp
                    }
                    if let value = dict["name"] as? String {
                        self.name = value
                    }
                    if let value = dict["roseType"] as? String {
                        self.roseType = value
                    }
                }
            }
            public var animation: Bool?

            public var grid: DescribeHighRiskPieChartResponseBody.ResultObject.HighRiskMobileProvince.Grid?

            public var series: [DescribeHighRiskPieChartResponseBody.ResultObject.HighRiskMobileProvince.Series]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.grid?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.animation != nil {
                    map["animation"] = self.animation!
                }
                if self.grid != nil {
                    map["grid"] = self.grid?.toMap()
                }
                if self.series != nil {
                    var tmp : [Any] = []
                    for k in self.series! {
                        tmp.append(k.toMap())
                    }
                    map["series"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["animation"] as? Bool {
                    self.animation = value
                }
                if let value = dict["grid"] as? [String: Any?] {
                    var model = DescribeHighRiskPieChartResponseBody.ResultObject.HighRiskMobileProvince.Grid()
                    model.fromMap(value)
                    self.grid = model
                }
                if let value = dict["series"] as? [Any?] {
                    var tmp : [DescribeHighRiskPieChartResponseBody.ResultObject.HighRiskMobileProvince.Series] = []
                    for v in value {
                        if v != nil {
                            var model = DescribeHighRiskPieChartResponseBody.ResultObject.HighRiskMobileProvince.Series()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.series = tmp
                }
            }
        }
        public var highRiskIPCity: DescribeHighRiskPieChartResponseBody.ResultObject.HighRiskIPCity?

        public var highRiskIPProvince: DescribeHighRiskPieChartResponseBody.ResultObject.HighRiskIPProvince?

        public var highRiskMobileCity: DescribeHighRiskPieChartResponseBody.ResultObject.HighRiskMobileCity?

        public var highRiskMobileProvince: DescribeHighRiskPieChartResponseBody.ResultObject.HighRiskMobileProvince?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.highRiskIPCity?.validate()
            try self.highRiskIPProvince?.validate()
            try self.highRiskMobileCity?.validate()
            try self.highRiskMobileProvince?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.highRiskIPCity != nil {
                map["highRiskIPCity"] = self.highRiskIPCity?.toMap()
            }
            if self.highRiskIPProvince != nil {
                map["highRiskIPProvince"] = self.highRiskIPProvince?.toMap()
            }
            if self.highRiskMobileCity != nil {
                map["highRiskMobileCity"] = self.highRiskMobileCity?.toMap()
            }
            if self.highRiskMobileProvince != nil {
                map["highRiskMobileProvince"] = self.highRiskMobileProvince?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["highRiskIPCity"] as? [String: Any?] {
                var model = DescribeHighRiskPieChartResponseBody.ResultObject.HighRiskIPCity()
                model.fromMap(value)
                self.highRiskIPCity = model
            }
            if let value = dict["highRiskIPProvince"] as? [String: Any?] {
                var model = DescribeHighRiskPieChartResponseBody.ResultObject.HighRiskIPProvince()
                model.fromMap(value)
                self.highRiskIPProvince = model
            }
            if let value = dict["highRiskMobileCity"] as? [String: Any?] {
                var model = DescribeHighRiskPieChartResponseBody.ResultObject.HighRiskMobileCity()
                model.fromMap(value)
                self.highRiskMobileCity = model
            }
            if let value = dict["highRiskMobileProvince"] as? [String: Any?] {
                var model = DescribeHighRiskPieChartResponseBody.ResultObject.HighRiskMobileProvince()
                model.fromMap(value)
                self.highRiskMobileProvince = model
            }
        }
    }
    public var code: String?

    public var httpStatusCode: String?

    public var message: String?

    public var requestId: String?

    public var resultObject: DescribeHighRiskPieChartResponseBody.ResultObject?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.resultObject?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["httpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject?.toMap()
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["httpStatusCode"] as? String {
            self.httpStatusCode = value
        }
        if let value = dict["message"] as? String {
            self.message = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? [String: Any?] {
            var model = DescribeHighRiskPieChartResponseBody.ResultObject()
            model.fromMap(value)
            self.resultObject = model
        }
        if let value = dict["success"] as? Bool {
            self.success = value
        }
    }
}

public class DescribeHighRiskPieChartResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeHighRiskPieChartResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeHighRiskPieChartResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeHitRuleFluctuationRequest : Tea.TeaModel {
    public var lang: String?

    public var eventCodes: String?

    public var regId: String?

    public var ruleStatus: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.eventCodes != nil {
            map["eventCodes"] = self.eventCodes!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.ruleStatus != nil {
            map["ruleStatus"] = self.ruleStatus!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["eventCodes"] as? String {
            self.eventCodes = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["ruleStatus"] as? String {
            self.ruleStatus = value
        }
    }
}

public class DescribeHitRuleFluctuationResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public var ruleId: String?

        public var ruleName: String?

        public var todayNum: Int64?

        public var withinSevenDayNum: String?

        public var withinThirtyDayNum: String?

        public var withinThreeDayNum: String?

        public var yesterdayNum: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.ruleId != nil {
                map["ruleId"] = self.ruleId!
            }
            if self.ruleName != nil {
                map["ruleName"] = self.ruleName!
            }
            if self.todayNum != nil {
                map["todayNum"] = self.todayNum!
            }
            if self.withinSevenDayNum != nil {
                map["withinSevenDayNum"] = self.withinSevenDayNum!
            }
            if self.withinThirtyDayNum != nil {
                map["withinThirtyDayNum"] = self.withinThirtyDayNum!
            }
            if self.withinThreeDayNum != nil {
                map["withinThreeDayNum"] = self.withinThreeDayNum!
            }
            if self.yesterdayNum != nil {
                map["yesterdayNum"] = self.yesterdayNum!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ruleId"] as? String {
                self.ruleId = value
            }
            if let value = dict["ruleName"] as? String {
                self.ruleName = value
            }
            if let value = dict["todayNum"] as? Int64 {
                self.todayNum = value
            }
            if let value = dict["withinSevenDayNum"] as? String {
                self.withinSevenDayNum = value
            }
            if let value = dict["withinThirtyDayNum"] as? String {
                self.withinThirtyDayNum = value
            }
            if let value = dict["withinThreeDayNum"] as? String {
                self.withinThreeDayNum = value
            }
            if let value = dict["yesterdayNum"] as? Int64 {
                self.yesterdayNum = value
            }
        }
    }
    public var code: String?

    public var httpStatusCode: String?

    public var message: String?

    public var requestId: String?

    public var resultObject: [DescribeHitRuleFluctuationResponseBody.ResultObject]?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["httpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.resultObject != nil {
            var tmp : [Any] = []
            for k in self.resultObject! {
                tmp.append(k.toMap())
            }
            map["resultObject"] = tmp
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["httpStatusCode"] as? String {
            self.httpStatusCode = value
        }
        if let value = dict["message"] as? String {
            self.message = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? [Any?] {
            var tmp : [DescribeHitRuleFluctuationResponseBody.ResultObject] = []
            for v in value {
                if v != nil {
                    var model = DescribeHitRuleFluctuationResponseBody.ResultObject()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.resultObject = tmp
        }
        if let value = dict["success"] as? Bool {
            self.success = value
        }
    }
}

public class DescribeHitRuleFluctuationResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeHitRuleFluctuationResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeHitRuleFluctuationResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeHitRuleListRequest : Tea.TeaModel {
    public var lang: String?

    public var beginTime: Int64?

    public var endTime: Int64?

    public var eventCodes: String?

    public var eventType: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.beginTime != nil {
            map["beginTime"] = self.beginTime!
        }
        if self.endTime != nil {
            map["endTime"] = self.endTime!
        }
        if self.eventCodes != nil {
            map["eventCodes"] = self.eventCodes!
        }
        if self.eventType != nil {
            map["eventType"] = self.eventType!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["beginTime"] as? Int64 {
            self.beginTime = value
        }
        if let value = dict["endTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["eventCodes"] as? String {
            self.eventCodes = value
        }
        if let value = dict["eventType"] as? String {
            self.eventType = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeHitRuleListResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public var hitCount: Int32?

        public var ruleName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.hitCount != nil {
                map["hitCount"] = self.hitCount!
            }
            if self.ruleName != nil {
                map["ruleName"] = self.ruleName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["hitCount"] as? Int32 {
                self.hitCount = value
            }
            if let value = dict["ruleName"] as? String {
                self.ruleName = value
            }
        }
    }
    public var requestId: String?

    public var resultObject: [DescribeHitRuleListResponseBody.ResultObject]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.resultObject != nil {
            var tmp : [Any] = []
            for k in self.resultObject! {
                tmp.append(k.toMap())
            }
            map["resultObject"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? [Any?] {
            var tmp : [DescribeHitRuleListResponseBody.ResultObject] = []
            for v in value {
                if v != nil {
                    var model = DescribeHitRuleListResponseBody.ResultObject()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.resultObject = tmp
        }
    }
}

public class DescribeHitRuleListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeHitRuleListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeHitRuleListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeHitRuleTrendRequest : Tea.TeaModel {
    public var lang: String?

    public var beginTime: Int64?

    public var endTime: Int64?

    public var eventCodes: String?

    public var regId: String?

    public var ruleStatus: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.beginTime != nil {
            map["beginTime"] = self.beginTime!
        }
        if self.endTime != nil {
            map["endTime"] = self.endTime!
        }
        if self.eventCodes != nil {
            map["eventCodes"] = self.eventCodes!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.ruleStatus != nil {
            map["ruleStatus"] = self.ruleStatus!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["beginTime"] as? Int64 {
            self.beginTime = value
        }
        if let value = dict["endTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["eventCodes"] as? String {
            self.eventCodes = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["ruleStatus"] as? String {
            self.ruleStatus = value
        }
    }
}

public class DescribeHitRuleTrendResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public class Series : Tea.TeaModel {
            public class Data : Tea.TeaModel {
                public var num: Int64?

                public var scale: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.num != nil {
                        map["num"] = self.num!
                    }
                    if self.scale != nil {
                        map["scale"] = self.scale!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["num"] as? Int64 {
                        self.num = value
                    }
                    if let value = dict["scale"] as? String {
                        self.scale = value
                    }
                }
            }
            public var data: [DescribeHitRuleTrendResponseBody.ResultObject.Series.Data]?

            public var name: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.data != nil {
                    var tmp : [Any] = []
                    for k in self.data! {
                        tmp.append(k.toMap())
                    }
                    map["data"] = tmp
                }
                if self.name != nil {
                    map["name"] = self.name!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["data"] as? [Any?] {
                    var tmp : [DescribeHitRuleTrendResponseBody.ResultObject.Series.Data] = []
                    for v in value {
                        if v != nil {
                            var model = DescribeHitRuleTrendResponseBody.ResultObject.Series.Data()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.data = tmp
                }
                if let value = dict["name"] as? String {
                    self.name = value
                }
            }
        }
        public class Xaxis : Tea.TeaModel {
            public var data: [String]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.data != nil {
                    map["data"] = self.data!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["data"] as? [String] {
                    self.data = value
                }
            }
        }
        public var series: [DescribeHitRuleTrendResponseBody.ResultObject.Series]?

        public var xaxis: DescribeHitRuleTrendResponseBody.ResultObject.Xaxis?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.xaxis?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.series != nil {
                var tmp : [Any] = []
                for k in self.series! {
                    tmp.append(k.toMap())
                }
                map["series"] = tmp
            }
            if self.xaxis != nil {
                map["xaxis"] = self.xaxis?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["series"] as? [Any?] {
                var tmp : [DescribeHitRuleTrendResponseBody.ResultObject.Series] = []
                for v in value {
                    if v != nil {
                        var model = DescribeHitRuleTrendResponseBody.ResultObject.Series()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.series = tmp
            }
            if let value = dict["xaxis"] as? [String: Any?] {
                var model = DescribeHitRuleTrendResponseBody.ResultObject.Xaxis()
                model.fromMap(value)
                self.xaxis = model
            }
        }
    }
    public var code: String?

    public var httpStatusCode: String?

    public var message: String?

    public var requestId: String?

    public var resultObject: DescribeHitRuleTrendResponseBody.ResultObject?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.resultObject?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["httpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject?.toMap()
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["httpStatusCode"] as? String {
            self.httpStatusCode = value
        }
        if let value = dict["message"] as? String {
            self.message = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? [String: Any?] {
            var model = DescribeHitRuleTrendResponseBody.ResultObject()
            model.fromMap(value)
            self.resultObject = model
        }
        if let value = dict["success"] as? Bool {
            self.success = value
        }
    }
}

public class DescribeHitRuleTrendResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeHitRuleTrendResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeHitRuleTrendResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeInitDigRequest : Tea.TeaModel {
    public var lang: String?

    public var regId: String?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.regId != nil {
            map["RegId"] = self.regId!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["RegId"] as? String {
            self.regId = value
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
    }
}

public class DescribeInitDigResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public var tipInfo: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tipInfo != nil {
                map["TipInfo"] = self.tipInfo!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["TipInfo"] as? String {
                self.tipInfo = value
            }
        }
    }
    public var requestId: String?

    public var resultObject: DescribeInitDigResponseBody.ResultObject?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.resultObject?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["ResultObject"] = self.resultObject?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["ResultObject"] as? [String: Any?] {
            var model = DescribeInitDigResponseBody.ResultObject()
            model.fromMap(value)
            self.resultObject = model
        }
    }
}

public class DescribeInitDigResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeInitDigResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeInitDigResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeInputFeildCountByEventCodeRequest : Tea.TeaModel {
    public var lang: String?

    public var createType: String?

    public var eventCode: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.createType != nil {
            map["createType"] = self.createType!
        }
        if self.eventCode != nil {
            map["eventCode"] = self.eventCode!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["createType"] as? String {
            self.createType = value
        }
        if let value = dict["eventCode"] as? String {
            self.eventCode = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeInputFeildCountByEventCodeResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public var limit: Bool?

        public var maxTotalItem: Int32?

        public var totalItem: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.limit != nil {
                map["limit"] = self.limit!
            }
            if self.maxTotalItem != nil {
                map["maxTotalItem"] = self.maxTotalItem!
            }
            if self.totalItem != nil {
                map["totalItem"] = self.totalItem!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["limit"] as? Bool {
                self.limit = value
            }
            if let value = dict["maxTotalItem"] as? Int32 {
                self.maxTotalItem = value
            }
            if let value = dict["totalItem"] as? Int32 {
                self.totalItem = value
            }
        }
    }
    public var requestId: String?

    public var resultObject: DescribeInputFeildCountByEventCodeResponseBody.ResultObject?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.resultObject?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? [String: Any?] {
            var model = DescribeInputFeildCountByEventCodeResponseBody.ResultObject()
            model.fromMap(value)
            self.resultObject = model
        }
    }
}

public class DescribeInputFeildCountByEventCodeResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeInputFeildCountByEventCodeResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeInputFeildCountByEventCodeResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeListModelRequest : Tea.TeaModel {
    public var currentPage: Int64?

    public var pageSize: Int64?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.currentPage != nil {
            map["CurrentPage"] = self.currentPage!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.regId != nil {
            map["RegId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CurrentPage"] as? Int64 {
            self.currentPage = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["RegId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeListModelResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public var bucId: String?

        public var createTime: String?

        public var modelCode: String?

        public var modelId: String?

        public var modelName: String?

        public var modelScene: String?

        public var modelStatus: String?

        public var taskId: String?

        public var updateTime: String?

        public var userId: String?

        public var userLocalFileName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.bucId != nil {
                map["bucId"] = self.bucId!
            }
            if self.createTime != nil {
                map["createTime"] = self.createTime!
            }
            if self.modelCode != nil {
                map["modelCode"] = self.modelCode!
            }
            if self.modelId != nil {
                map["modelId"] = self.modelId!
            }
            if self.modelName != nil {
                map["modelName"] = self.modelName!
            }
            if self.modelScene != nil {
                map["modelScene"] = self.modelScene!
            }
            if self.modelStatus != nil {
                map["modelStatus"] = self.modelStatus!
            }
            if self.taskId != nil {
                map["taskId"] = self.taskId!
            }
            if self.updateTime != nil {
                map["updateTime"] = self.updateTime!
            }
            if self.userId != nil {
                map["userId"] = self.userId!
            }
            if self.userLocalFileName != nil {
                map["userLocalFileName"] = self.userLocalFileName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["bucId"] as? String {
                self.bucId = value
            }
            if let value = dict["createTime"] as? String {
                self.createTime = value
            }
            if let value = dict["modelCode"] as? String {
                self.modelCode = value
            }
            if let value = dict["modelId"] as? String {
                self.modelId = value
            }
            if let value = dict["modelName"] as? String {
                self.modelName = value
            }
            if let value = dict["modelScene"] as? String {
                self.modelScene = value
            }
            if let value = dict["modelStatus"] as? String {
                self.modelStatus = value
            }
            if let value = dict["taskId"] as? String {
                self.taskId = value
            }
            if let value = dict["updateTime"] as? String {
                self.updateTime = value
            }
            if let value = dict["userId"] as? String {
                self.userId = value
            }
            if let value = dict["userLocalFileName"] as? String {
                self.userLocalFileName = value
            }
        }
    }
    public var currentPage: String?

    public var pageSize: String?

    public var requestId: String?

    public var resultObject: [DescribeListModelResponseBody.ResultObject]?

    public var totalItem: String?

    public var totalPage: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.currentPage != nil {
            map["CurrentPage"] = self.currentPage!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            var tmp : [Any] = []
            for k in self.resultObject! {
                tmp.append(k.toMap())
            }
            map["ResultObject"] = tmp
        }
        if self.totalItem != nil {
            map["TotalItem"] = self.totalItem!
        }
        if self.totalPage != nil {
            map["TotalPage"] = self.totalPage!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CurrentPage"] as? String {
            self.currentPage = value
        }
        if let value = dict["PageSize"] as? String {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["ResultObject"] as? [Any?] {
            var tmp : [DescribeListModelResponseBody.ResultObject] = []
            for v in value {
                if v != nil {
                    var model = DescribeListModelResponseBody.ResultObject()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.resultObject = tmp
        }
        if let value = dict["TotalItem"] as? String {
            self.totalItem = value
        }
        if let value = dict["TotalPage"] as? String {
            self.totalPage = value
        }
    }
}

public class DescribeListModelResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeListModelResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeListModelResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeListPocRequest : Tea.TeaModel {
    public var currentPage: Int64?

    public var lang: String?

    public var pageSize: Int64?

    public var regId: String?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.currentPage != nil {
            map["CurrentPage"] = self.currentPage!
        }
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.regId != nil {
            map["RegId"] = self.regId!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CurrentPage"] as? Int64 {
            self.currentPage = value
        }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["RegId"] as? String {
            self.regId = value
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
    }
}

public class DescribeListPocResponseBody : Tea.TeaModel {
    public var code: String?

    public var currentPage: String?

    public var httpStatusCode: String?

    public var message: String?

    public var pageSize: String?

    public var requestId: String?

    public var resultObject: Bool?

    public var totalItem: String?

    public var totalPage: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.currentPage != nil {
            map["CurrentPage"] = self.currentPage!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["ResultObject"] = self.resultObject!
        }
        if self.totalItem != nil {
            map["TotalItem"] = self.totalItem!
        }
        if self.totalPage != nil {
            map["TotalPage"] = self.totalPage!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["CurrentPage"] as? String {
            self.currentPage = value
        }
        if let value = dict["HttpStatusCode"] as? String {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["PageSize"] as? String {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["ResultObject"] as? Bool {
            self.resultObject = value
        }
        if let value = dict["TotalItem"] as? String {
            self.totalItem = value
        }
        if let value = dict["TotalPage"] as? String {
            self.totalPage = value
        }
    }
}

public class DescribeListPocResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeListPocResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeListPocResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeLoanExecListRequest : Tea.TeaModel {
    public var lang: String?

    public var batchNo: String?

    public var currentPage: String?

    public var monitorObj: String?

    public var monitorStatus: String?

    public var pageSize: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.batchNo != nil {
            map["batchNo"] = self.batchNo!
        }
        if self.currentPage != nil {
            map["currentPage"] = self.currentPage!
        }
        if self.monitorObj != nil {
            map["monitorObj"] = self.monitorObj!
        }
        if self.monitorStatus != nil {
            map["monitorStatus"] = self.monitorStatus!
        }
        if self.pageSize != nil {
            map["pageSize"] = self.pageSize!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["batchNo"] as? String {
            self.batchNo = value
        }
        if let value = dict["currentPage"] as? String {
            self.currentPage = value
        }
        if let value = dict["monitorObj"] as? String {
            self.monitorObj = value
        }
        if let value = dict["monitorStatus"] as? String {
            self.monitorStatus = value
        }
        if let value = dict["pageSize"] as? String {
            self.pageSize = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeLoanExecListResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var currentPage: Int32?

    public var pageSize: Int32?

    public var resultObject: Bool?

    public var totalItem: Int32?

    public var totalPage: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.currentPage != nil {
            map["currentPage"] = self.currentPage!
        }
        if self.pageSize != nil {
            map["pageSize"] = self.pageSize!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        if self.totalItem != nil {
            map["totalItem"] = self.totalItem!
        }
        if self.totalPage != nil {
            map["totalPage"] = self.totalPage!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["currentPage"] as? Int32 {
            self.currentPage = value
        }
        if let value = dict["pageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
        if let value = dict["totalItem"] as? Int32 {
            self.totalItem = value
        }
        if let value = dict["totalPage"] as? Int32 {
            self.totalPage = value
        }
    }
}

public class DescribeLoanExecListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeLoanExecListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeLoanExecListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeLoanTaskListRequest : Tea.TeaModel {
    public var lang: String?

    public var batchNo: String?

    public var currentPage: String?

    public var monitorStatus: String?

    public var pageSize: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.batchNo != nil {
            map["batchNo"] = self.batchNo!
        }
        if self.currentPage != nil {
            map["currentPage"] = self.currentPage!
        }
        if self.monitorStatus != nil {
            map["monitorStatus"] = self.monitorStatus!
        }
        if self.pageSize != nil {
            map["pageSize"] = self.pageSize!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["batchNo"] as? String {
            self.batchNo = value
        }
        if let value = dict["currentPage"] as? String {
            self.currentPage = value
        }
        if let value = dict["monitorStatus"] as? String {
            self.monitorStatus = value
        }
        if let value = dict["pageSize"] as? String {
            self.pageSize = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeLoanTaskListResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var currentPage: Int32?

    public var pageSize: Int32?

    public var resultObject: Bool?

    public var totalItem: Int32?

    public var totalPage: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.currentPage != nil {
            map["currentPage"] = self.currentPage!
        }
        if self.pageSize != nil {
            map["pageSize"] = self.pageSize!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        if self.totalItem != nil {
            map["totalItem"] = self.totalItem!
        }
        if self.totalPage != nil {
            map["totalPage"] = self.totalPage!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["currentPage"] as? Int32 {
            self.currentPage = value
        }
        if let value = dict["pageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
        if let value = dict["totalItem"] as? Int32 {
            self.totalItem = value
        }
        if let value = dict["totalPage"] as? Int32 {
            self.totalPage = value
        }
    }
}

public class DescribeLoanTaskListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeLoanTaskListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeLoanTaskListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeMarkPageRequest : Tea.TeaModel {
    public var lang: String?

    public var currentPage: String?

    public var direction: String?

    public var isPage: Bool?

    public var order: String?

    public var pageSize: String?

    public var regId: String?

    public var taskLogId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.currentPage != nil {
            map["currentPage"] = self.currentPage!
        }
        if self.direction != nil {
            map["direction"] = self.direction!
        }
        if self.isPage != nil {
            map["isPage"] = self.isPage!
        }
        if self.order != nil {
            map["order"] = self.order!
        }
        if self.pageSize != nil {
            map["pageSize"] = self.pageSize!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.taskLogId != nil {
            map["taskLogId"] = self.taskLogId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["currentPage"] as? String {
            self.currentPage = value
        }
        if let value = dict["direction"] as? String {
            self.direction = value
        }
        if let value = dict["isPage"] as? Bool {
            self.isPage = value
        }
        if let value = dict["order"] as? String {
            self.order = value
        }
        if let value = dict["pageSize"] as? String {
            self.pageSize = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["taskLogId"] as? String {
            self.taskLogId = value
        }
    }
}

public class DescribeMarkPageResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public var fieldName: String?

        public var fieldValue: String?

        public var id: Int64?

        public var markType: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.fieldName != nil {
                map["fieldName"] = self.fieldName!
            }
            if self.fieldValue != nil {
                map["fieldValue"] = self.fieldValue!
            }
            if self.id != nil {
                map["id"] = self.id!
            }
            if self.markType != nil {
                map["markType"] = self.markType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["fieldName"] as? String {
                self.fieldName = value
            }
            if let value = dict["fieldValue"] as? String {
                self.fieldValue = value
            }
            if let value = dict["id"] as? Int64 {
                self.id = value
            }
            if let value = dict["markType"] as? String {
                self.markType = value
            }
        }
    }
    public var requestId: String?

    public var currentPage: Int32?

    public var pageSize: Int32?

    public var resultObject: [DescribeMarkPageResponseBody.ResultObject]?

    public var totalItem: Int32?

    public var totalPage: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.currentPage != nil {
            map["currentPage"] = self.currentPage!
        }
        if self.pageSize != nil {
            map["pageSize"] = self.pageSize!
        }
        if self.resultObject != nil {
            var tmp : [Any] = []
            for k in self.resultObject! {
                tmp.append(k.toMap())
            }
            map["resultObject"] = tmp
        }
        if self.totalItem != nil {
            map["totalItem"] = self.totalItem!
        }
        if self.totalPage != nil {
            map["totalPage"] = self.totalPage!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["currentPage"] as? Int32 {
            self.currentPage = value
        }
        if let value = dict["pageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["resultObject"] as? [Any?] {
            var tmp : [DescribeMarkPageResponseBody.ResultObject] = []
            for v in value {
                if v != nil {
                    var model = DescribeMarkPageResponseBody.ResultObject()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.resultObject = tmp
        }
        if let value = dict["totalItem"] as? Int32 {
            self.totalItem = value
        }
        if let value = dict["totalPage"] as? Int32 {
            self.totalPage = value
        }
    }
}

public class DescribeMarkPageResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeMarkPageResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeMarkPageResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeMenuPermissionRequest : Tea.TeaModel {
    public var lang: String?

    public var permissionType: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.permissionType != nil {
            map["permissionType"] = self.permissionType!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["permissionType"] as? String {
            self.permissionType = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeMenuPermissionResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
    }
}

public class DescribeMenuPermissionResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeMenuPermissionResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeMenuPermissionResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeModelDetailsByIdRequest : Tea.TeaModel {
    public var modelId: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.modelId != nil {
            map["ModelId"] = self.modelId!
        }
        if self.regId != nil {
            map["RegId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ModelId"] as? String {
            self.modelId = value
        }
        if let value = dict["RegId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeModelDetailsByIdResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public var modelEffectEvaluation: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.modelEffectEvaluation != nil {
                map["modelEffectEvaluation"] = self.modelEffectEvaluation!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["modelEffectEvaluation"] as? String {
                self.modelEffectEvaluation = value
            }
        }
    }
    public var requestId: String?

    public var resultObject: [DescribeModelDetailsByIdResponseBody.ResultObject]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            var tmp : [Any] = []
            for k in self.resultObject! {
                tmp.append(k.toMap())
            }
            map["ResultObject"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["ResultObject"] as? [Any?] {
            var tmp : [DescribeModelDetailsByIdResponseBody.ResultObject] = []
            for v in value {
                if v != nil {
                    var model = DescribeModelDetailsByIdResponseBody.ResultObject()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.resultObject = tmp
        }
    }
}

public class DescribeModelDetailsByIdResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeModelDetailsByIdResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeModelDetailsByIdResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeModelOssPolicyRequest : Tea.TeaModel {
    public var lang: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeModelOssPolicyResponseBody : Tea.TeaModel {
    public var accessId: String?

    public var host: String?

    public var key: String?

    public var message: String?

    public var policy: String?

    public var requestId: String?

    public var signature: String?

    public var resultObject: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.accessId != nil {
            map["AccessId"] = self.accessId!
        }
        if self.host != nil {
            map["Host"] = self.host!
        }
        if self.key != nil {
            map["Key"] = self.key!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.policy != nil {
            map["Policy"] = self.policy!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.signature != nil {
            map["Signature"] = self.signature!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AccessId"] as? String {
            self.accessId = value
        }
        if let value = dict["Host"] as? String {
            self.host = value
        }
        if let value = dict["Key"] as? String {
            self.key = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Policy"] as? String {
            self.policy = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Signature"] as? String {
            self.signature = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
    }
}

public class DescribeModelOssPolicyResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeModelOssPolicyResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeModelOssPolicyResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeMonitorTaskLimitRequest : Tea.TeaModel {
    public var lang: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeMonitorTaskLimitResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public var limit: Bool?

        public var maxTotalItem: Int32?

        public var totalItem: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.limit != nil {
                map["limit"] = self.limit!
            }
            if self.maxTotalItem != nil {
                map["maxTotalItem"] = self.maxTotalItem!
            }
            if self.totalItem != nil {
                map["totalItem"] = self.totalItem!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["limit"] as? Bool {
                self.limit = value
            }
            if let value = dict["maxTotalItem"] as? Int32 {
                self.maxTotalItem = value
            }
            if let value = dict["totalItem"] as? Int32 {
                self.totalItem = value
            }
        }
    }
    public var requestId: String?

    public var resultObject: DescribeMonitorTaskLimitResponseBody.ResultObject?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.resultObject?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? [String: Any?] {
            var model = DescribeMonitorTaskLimitResponseBody.ResultObject()
            model.fromMap(value)
            self.resultObject = model
        }
    }
}

public class DescribeMonitorTaskLimitResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeMonitorTaskLimitResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeMonitorTaskLimitResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeNameListRequest : Tea.TeaModel {
    public var lang: String?

    public var createType: String?

    public var currentPage: String?

    public var pageSize: String?

    public var regId: String?

    public var value: String?

    public var variableId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.createType != nil {
            map["createType"] = self.createType!
        }
        if self.currentPage != nil {
            map["currentPage"] = self.currentPage!
        }
        if self.pageSize != nil {
            map["pageSize"] = self.pageSize!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.value != nil {
            map["value"] = self.value!
        }
        if self.variableId != nil {
            map["variableId"] = self.variableId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["createType"] as? String {
            self.createType = value
        }
        if let value = dict["currentPage"] as? String {
            self.currentPage = value
        }
        if let value = dict["pageSize"] as? String {
            self.pageSize = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["value"] as? String {
            self.value = value
        }
        if let value = dict["variableId"] as? String {
            self.variableId = value
        }
    }
}

public class DescribeNameListResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public var gmtCreate: Int64?

        public var gmtModified: Int64?

        public var id: Int64?

        public var identifier: String?

        public var title: String?

        public var value: String?

        public var variableId: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.gmtCreate != nil {
                map["gmtCreate"] = self.gmtCreate!
            }
            if self.gmtModified != nil {
                map["gmtModified"] = self.gmtModified!
            }
            if self.id != nil {
                map["id"] = self.id!
            }
            if self.identifier != nil {
                map["identifier"] = self.identifier!
            }
            if self.title != nil {
                map["title"] = self.title!
            }
            if self.value != nil {
                map["value"] = self.value!
            }
            if self.variableId != nil {
                map["variableId"] = self.variableId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["gmtCreate"] as? Int64 {
                self.gmtCreate = value
            }
            if let value = dict["gmtModified"] as? Int64 {
                self.gmtModified = value
            }
            if let value = dict["id"] as? Int64 {
                self.id = value
            }
            if let value = dict["identifier"] as? String {
                self.identifier = value
            }
            if let value = dict["title"] as? String {
                self.title = value
            }
            if let value = dict["value"] as? String {
                self.value = value
            }
            if let value = dict["variableId"] as? Int64 {
                self.variableId = value
            }
        }
    }
    public var requestId: String?

    public var currentPage: Int32?

    public var pageSize: Int32?

    public var resultObject: [DescribeNameListResponseBody.ResultObject]?

    public var totalItem: Int32?

    public var totalPage: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.currentPage != nil {
            map["currentPage"] = self.currentPage!
        }
        if self.pageSize != nil {
            map["pageSize"] = self.pageSize!
        }
        if self.resultObject != nil {
            var tmp : [Any] = []
            for k in self.resultObject! {
                tmp.append(k.toMap())
            }
            map["resultObject"] = tmp
        }
        if self.totalItem != nil {
            map["totalItem"] = self.totalItem!
        }
        if self.totalPage != nil {
            map["totalPage"] = self.totalPage!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["currentPage"] as? Int32 {
            self.currentPage = value
        }
        if let value = dict["pageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["resultObject"] as? [Any?] {
            var tmp : [DescribeNameListResponseBody.ResultObject] = []
            for v in value {
                if v != nil {
                    var model = DescribeNameListResponseBody.ResultObject()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.resultObject = tmp
        }
        if let value = dict["totalItem"] as? Int32 {
            self.totalItem = value
        }
        if let value = dict["totalPage"] as? Int32 {
            self.totalPage = value
        }
    }
}

public class DescribeNameListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeNameListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeNameListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeNameListDownloadUrlRequest : Tea.TeaModel {
    public var lang: String?

    public var regId: String?

    public var variableId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.variableId != nil {
            map["variableId"] = self.variableId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["variableId"] as? Int64 {
            self.variableId = value
        }
    }
}

public class DescribeNameListDownloadUrlResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public var downloadFileUrl: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.downloadFileUrl != nil {
                map["downloadFileUrl"] = self.downloadFileUrl!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["downloadFileUrl"] as? String {
                self.downloadFileUrl = value
            }
        }
    }
    public var requestId: String?

    public var resultObject: DescribeNameListDownloadUrlResponseBody.ResultObject?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.resultObject?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? [String: Any?] {
            var model = DescribeNameListDownloadUrlResponseBody.ResultObject()
            model.fromMap(value)
            self.resultObject = model
        }
    }
}

public class DescribeNameListDownloadUrlResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeNameListDownloadUrlResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeNameListDownloadUrlResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeNameListLimitRequest : Tea.TeaModel {
    public var lang: String?

    public var createType: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.createType != nil {
            map["createType"] = self.createType!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["createType"] as? String {
            self.createType = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeNameListLimitResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public var limit: Bool?

        public var maxTotalItem: Int64?

        public var totalItem: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.limit != nil {
                map["limit"] = self.limit!
            }
            if self.maxTotalItem != nil {
                map["maxTotalItem"] = self.maxTotalItem!
            }
            if self.totalItem != nil {
                map["totalItem"] = self.totalItem!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["limit"] as? Bool {
                self.limit = value
            }
            if let value = dict["maxTotalItem"] as? Int64 {
                self.maxTotalItem = value
            }
            if let value = dict["totalItem"] as? Int64 {
                self.totalItem = value
            }
        }
    }
    public var requestId: String?

    public var resultObject: DescribeNameListLimitResponseBody.ResultObject?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.resultObject?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? [String: Any?] {
            var model = DescribeNameListLimitResponseBody.ResultObject()
            model.fromMap(value)
            self.resultObject = model
        }
    }
}

public class DescribeNameListLimitResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeNameListLimitResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeNameListLimitResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeNameListPageListRequest : Tea.TeaModel {
    public var lang: String?

    public var currentPage: Int32?

    public var pageSize: Int32?

    public var regId: String?

    public var updateBeginTime: Int64?

    public var updateEndTime: Int64?

    public var value: String?

    public var variableId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.currentPage != nil {
            map["currentPage"] = self.currentPage!
        }
        if self.pageSize != nil {
            map["pageSize"] = self.pageSize!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.updateBeginTime != nil {
            map["updateBeginTime"] = self.updateBeginTime!
        }
        if self.updateEndTime != nil {
            map["updateEndTime"] = self.updateEndTime!
        }
        if self.value != nil {
            map["value"] = self.value!
        }
        if self.variableId != nil {
            map["variableId"] = self.variableId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["currentPage"] as? Int32 {
            self.currentPage = value
        }
        if let value = dict["pageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["updateBeginTime"] as? Int64 {
            self.updateBeginTime = value
        }
        if let value = dict["updateEndTime"] as? Int64 {
            self.updateEndTime = value
        }
        if let value = dict["value"] as? String {
            self.value = value
        }
        if let value = dict["variableId"] as? Int64 {
            self.variableId = value
        }
    }
}

public class DescribeNameListPageListResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public var gmtCreate: Int64?

        public var gmtModified: Int64?

        public var id: Int64?

        public var memo: String?

        public var name: String?

        public var nameListType: String?

        public var title: String?

        public var userId: String?

        public var value: String?

        public var variableId: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.gmtCreate != nil {
                map["gmtCreate"] = self.gmtCreate!
            }
            if self.gmtModified != nil {
                map["gmtModified"] = self.gmtModified!
            }
            if self.id != nil {
                map["id"] = self.id!
            }
            if self.memo != nil {
                map["memo"] = self.memo!
            }
            if self.name != nil {
                map["name"] = self.name!
            }
            if self.nameListType != nil {
                map["nameListType"] = self.nameListType!
            }
            if self.title != nil {
                map["title"] = self.title!
            }
            if self.userId != nil {
                map["userId"] = self.userId!
            }
            if self.value != nil {
                map["value"] = self.value!
            }
            if self.variableId != nil {
                map["variableId"] = self.variableId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["gmtCreate"] as? Int64 {
                self.gmtCreate = value
            }
            if let value = dict["gmtModified"] as? Int64 {
                self.gmtModified = value
            }
            if let value = dict["id"] as? Int64 {
                self.id = value
            }
            if let value = dict["memo"] as? String {
                self.memo = value
            }
            if let value = dict["name"] as? String {
                self.name = value
            }
            if let value = dict["nameListType"] as? String {
                self.nameListType = value
            }
            if let value = dict["title"] as? String {
                self.title = value
            }
            if let value = dict["userId"] as? String {
                self.userId = value
            }
            if let value = dict["value"] as? String {
                self.value = value
            }
            if let value = dict["variableId"] as? Int64 {
                self.variableId = value
            }
        }
    }
    public var currentPage: String?

    public var pageSize: String?

    public var requestId: String?

    public var resultObject: [DescribeNameListPageListResponseBody.ResultObject]?

    public var totalItem: String?

    public var totalPage: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.currentPage != nil {
            map["currentPage"] = self.currentPage!
        }
        if self.pageSize != nil {
            map["pageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.resultObject != nil {
            var tmp : [Any] = []
            for k in self.resultObject! {
                tmp.append(k.toMap())
            }
            map["resultObject"] = tmp
        }
        if self.totalItem != nil {
            map["totalItem"] = self.totalItem!
        }
        if self.totalPage != nil {
            map["totalPage"] = self.totalPage!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["currentPage"] as? String {
            self.currentPage = value
        }
        if let value = dict["pageSize"] as? String {
            self.pageSize = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? [Any?] {
            var tmp : [DescribeNameListPageListResponseBody.ResultObject] = []
            for v in value {
                if v != nil {
                    var model = DescribeNameListPageListResponseBody.ResultObject()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.resultObject = tmp
        }
        if let value = dict["totalItem"] as? String {
            self.totalItem = value
        }
        if let value = dict["totalPage"] as? String {
            self.totalPage = value
        }
    }
}

public class DescribeNameListPageListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeNameListPageListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeNameListPageListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeNameListTypeListRequest : Tea.TeaModel {
    public var lang: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeNameListTypeListResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["key"] = self.key!
            }
            if self.value != nil {
                map["value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["key"] as? String {
                self.key = value
            }
            if let value = dict["value"] as? String {
                self.value = value
            }
        }
    }
    public var requestId: String?

    public var resultObject: [DescribeNameListTypeListResponseBody.ResultObject]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.resultObject != nil {
            var tmp : [Any] = []
            for k in self.resultObject! {
                tmp.append(k.toMap())
            }
            map["resultObject"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? [Any?] {
            var tmp : [DescribeNameListTypeListResponseBody.ResultObject] = []
            for v in value {
                if v != nil {
                    var model = DescribeNameListTypeListResponseBody.ResultObject()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.resultObject = tmp
        }
    }
}

public class DescribeNameListTypeListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeNameListTypeListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeNameListTypeListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeNameListVariablePageListRequest : Tea.TeaModel {
    public var lang: String?

    public var currentPage: Int32?

    public var name: String?

    public var nameListType: String?

    public var pageSize: Int32?

    public var regId: String?

    public var value: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.currentPage != nil {
            map["currentPage"] = self.currentPage!
        }
        if self.name != nil {
            map["name"] = self.name!
        }
        if self.nameListType != nil {
            map["nameListType"] = self.nameListType!
        }
        if self.pageSize != nil {
            map["pageSize"] = self.pageSize!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.value != nil {
            map["value"] = self.value!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["currentPage"] as? Int32 {
            self.currentPage = value
        }
        if let value = dict["name"] as? String {
            self.name = value
        }
        if let value = dict["nameListType"] as? String {
            self.nameListType = value
        }
        if let value = dict["pageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["value"] as? String {
            self.value = value
        }
    }
}

public class DescribeNameListVariablePageListResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public var capacity: Int64?

        public var description_: String?

        public var gmtCreate: Int64?

        public var gmtModified: Int64?

        public var id: Int64?

        public var leftCapacity: Int64?

        public var name: String?

        public var nameListType: String?

        public var refObjId: String?

        public var refObjType: Int64?

        public var sourceType: String?

        public var title: String?

        public var type: String?

        public var userId: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.capacity != nil {
                map["capacity"] = self.capacity!
            }
            if self.description_ != nil {
                map["description"] = self.description_!
            }
            if self.gmtCreate != nil {
                map["gmtCreate"] = self.gmtCreate!
            }
            if self.gmtModified != nil {
                map["gmtModified"] = self.gmtModified!
            }
            if self.id != nil {
                map["id"] = self.id!
            }
            if self.leftCapacity != nil {
                map["leftCapacity"] = self.leftCapacity!
            }
            if self.name != nil {
                map["name"] = self.name!
            }
            if self.nameListType != nil {
                map["nameListType"] = self.nameListType!
            }
            if self.refObjId != nil {
                map["refObjId"] = self.refObjId!
            }
            if self.refObjType != nil {
                map["refObjType"] = self.refObjType!
            }
            if self.sourceType != nil {
                map["sourceType"] = self.sourceType!
            }
            if self.title != nil {
                map["title"] = self.title!
            }
            if self.type != nil {
                map["type"] = self.type!
            }
            if self.userId != nil {
                map["userId"] = self.userId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["capacity"] as? Int64 {
                self.capacity = value
            }
            if let value = dict["description"] as? String {
                self.description_ = value
            }
            if let value = dict["gmtCreate"] as? Int64 {
                self.gmtCreate = value
            }
            if let value = dict["gmtModified"] as? Int64 {
                self.gmtModified = value
            }
            if let value = dict["id"] as? Int64 {
                self.id = value
            }
            if let value = dict["leftCapacity"] as? Int64 {
                self.leftCapacity = value
            }
            if let value = dict["name"] as? String {
                self.name = value
            }
            if let value = dict["nameListType"] as? String {
                self.nameListType = value
            }
            if let value = dict["refObjId"] as? String {
                self.refObjId = value
            }
            if let value = dict["refObjType"] as? Int64 {
                self.refObjType = value
            }
            if let value = dict["sourceType"] as? String {
                self.sourceType = value
            }
            if let value = dict["title"] as? String {
                self.title = value
            }
            if let value = dict["type"] as? String {
                self.type = value
            }
            if let value = dict["userId"] as? Int64 {
                self.userId = value
            }
        }
    }
    public var currentPage: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var resultObject: [DescribeNameListVariablePageListResponseBody.ResultObject]?

    public var totalItem: Int32?

    public var totalPage: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.currentPage != nil {
            map["currentPage"] = self.currentPage!
        }
        if self.pageSize != nil {
            map["pageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.resultObject != nil {
            var tmp : [Any] = []
            for k in self.resultObject! {
                tmp.append(k.toMap())
            }
            map["resultObject"] = tmp
        }
        if self.totalItem != nil {
            map["totalItem"] = self.totalItem!
        }
        if self.totalPage != nil {
            map["totalPage"] = self.totalPage!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["currentPage"] as? Int32 {
            self.currentPage = value
        }
        if let value = dict["pageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? [Any?] {
            var tmp : [DescribeNameListVariablePageListResponseBody.ResultObject] = []
            for v in value {
                if v != nil {
                    var model = DescribeNameListVariablePageListResponseBody.ResultObject()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.resultObject = tmp
        }
        if let value = dict["totalItem"] as? Int32 {
            self.totalItem = value
        }
        if let value = dict["totalPage"] as? Int32 {
            self.totalPage = value
        }
    }
}

public class DescribeNameListVariablePageListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeNameListVariablePageListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeNameListVariablePageListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeOperationLogPageListRequest : Tea.TeaModel {
    public var lang: String?

    public var currentPage: Int32?

    public var endDate: Int64?

    public var pageSize: Int32?

    public var regId: String?

    public var startDate: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.currentPage != nil {
            map["currentPage"] = self.currentPage!
        }
        if self.endDate != nil {
            map["endDate"] = self.endDate!
        }
        if self.pageSize != nil {
            map["pageSize"] = self.pageSize!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.startDate != nil {
            map["startDate"] = self.startDate!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["currentPage"] as? Int32 {
            self.currentPage = value
        }
        if let value = dict["endDate"] as? Int64 {
            self.endDate = value
        }
        if let value = dict["pageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["startDate"] as? Int64 {
            self.startDate = value
        }
    }
}

public class DescribeOperationLogPageListResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public var clientIp: String?

        public var gmtCreate: Int64?

        public var newContent: String?

        public var oldContent: String?

        public var operationSummary: String?

        public var operationType: String?

        public var userName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.clientIp != nil {
                map["clientIp"] = self.clientIp!
            }
            if self.gmtCreate != nil {
                map["gmtCreate"] = self.gmtCreate!
            }
            if self.newContent != nil {
                map["newContent"] = self.newContent!
            }
            if self.oldContent != nil {
                map["oldContent"] = self.oldContent!
            }
            if self.operationSummary != nil {
                map["operationSummary"] = self.operationSummary!
            }
            if self.operationType != nil {
                map["operationType"] = self.operationType!
            }
            if self.userName != nil {
                map["userName"] = self.userName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["clientIp"] as? String {
                self.clientIp = value
            }
            if let value = dict["gmtCreate"] as? Int64 {
                self.gmtCreate = value
            }
            if let value = dict["newContent"] as? String {
                self.newContent = value
            }
            if let value = dict["oldContent"] as? String {
                self.oldContent = value
            }
            if let value = dict["operationSummary"] as? String {
                self.operationSummary = value
            }
            if let value = dict["operationType"] as? String {
                self.operationType = value
            }
            if let value = dict["userName"] as? String {
                self.userName = value
            }
        }
    }
    public var requestId: String?

    public var currentPage: Int32?

    public var pageSize: Int32?

    public var resultObject: [DescribeOperationLogPageListResponseBody.ResultObject]?

    public var totalItem: Int32?

    public var totalPage: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.currentPage != nil {
            map["currentPage"] = self.currentPage!
        }
        if self.pageSize != nil {
            map["pageSize"] = self.pageSize!
        }
        if self.resultObject != nil {
            var tmp : [Any] = []
            for k in self.resultObject! {
                tmp.append(k.toMap())
            }
            map["resultObject"] = tmp
        }
        if self.totalItem != nil {
            map["totalItem"] = self.totalItem!
        }
        if self.totalPage != nil {
            map["totalPage"] = self.totalPage!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["currentPage"] as? Int32 {
            self.currentPage = value
        }
        if let value = dict["pageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["resultObject"] as? [Any?] {
            var tmp : [DescribeOperationLogPageListResponseBody.ResultObject] = []
            for v in value {
                if v != nil {
                    var model = DescribeOperationLogPageListResponseBody.ResultObject()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.resultObject = tmp
        }
        if let value = dict["totalItem"] as? Int32 {
            self.totalItem = value
        }
        if let value = dict["totalPage"] as? Int32 {
            self.totalPage = value
        }
    }
}

public class DescribeOperationLogPageListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeOperationLogPageListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeOperationLogPageListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeOperatorListRequest : Tea.TeaModel {
    public var lang: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeOperatorListResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public class Operators : Tea.TeaModel {
            public class RightVariables : Tea.TeaModel {
                public var fieldName: String?

                public var fieldType: String?

                public var fieldValue: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.fieldName != nil {
                        map["fieldName"] = self.fieldName!
                    }
                    if self.fieldType != nil {
                        map["fieldType"] = self.fieldType!
                    }
                    if self.fieldValue != nil {
                        map["fieldValue"] = self.fieldValue!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["fieldName"] as? String {
                        self.fieldName = value
                    }
                    if let value = dict["fieldType"] as? String {
                        self.fieldType = value
                    }
                    if let value = dict["fieldValue"] as? String {
                        self.fieldValue = value
                    }
                }
            }
            public var code: String?

            public var hasRightVariable: Bool?

            public var memo: String?

            public var name: String?

            public var rightVariables: [DescribeOperatorListResponseBody.ResultObject.Operators.RightVariables]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.code != nil {
                    map["code"] = self.code!
                }
                if self.hasRightVariable != nil {
                    map["hasRightVariable"] = self.hasRightVariable!
                }
                if self.memo != nil {
                    map["memo"] = self.memo!
                }
                if self.name != nil {
                    map["name"] = self.name!
                }
                if self.rightVariables != nil {
                    var tmp : [Any] = []
                    for k in self.rightVariables! {
                        tmp.append(k.toMap())
                    }
                    map["rightVariables"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["code"] as? String {
                    self.code = value
                }
                if let value = dict["hasRightVariable"] as? Bool {
                    self.hasRightVariable = value
                }
                if let value = dict["memo"] as? String {
                    self.memo = value
                }
                if let value = dict["name"] as? String {
                    self.name = value
                }
                if let value = dict["rightVariables"] as? [Any?] {
                    var tmp : [DescribeOperatorListResponseBody.ResultObject.Operators.RightVariables] = []
                    for v in value {
                        if v != nil {
                            var model = DescribeOperatorListResponseBody.ResultObject.Operators.RightVariables()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.rightVariables = tmp
                }
            }
        }
        public var fieldType: String?

        public var operators: [DescribeOperatorListResponseBody.ResultObject.Operators]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.fieldType != nil {
                map["fieldType"] = self.fieldType!
            }
            if self.operators != nil {
                var tmp : [Any] = []
                for k in self.operators! {
                    tmp.append(k.toMap())
                }
                map["operators"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["fieldType"] as? String {
                self.fieldType = value
            }
            if let value = dict["operators"] as? [Any?] {
                var tmp : [DescribeOperatorListResponseBody.ResultObject.Operators] = []
                for v in value {
                    if v != nil {
                        var model = DescribeOperatorListResponseBody.ResultObject.Operators()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.operators = tmp
            }
        }
    }
    public var requestId: String?

    public var resultObject: [DescribeOperatorListResponseBody.ResultObject]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            var tmp : [Any] = []
            for k in self.resultObject! {
                tmp.append(k.toMap())
            }
            map["resultObject"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? [Any?] {
            var tmp : [DescribeOperatorListResponseBody.ResultObject] = []
            for v in value {
                if v != nil {
                    var model = DescribeOperatorListResponseBody.ResultObject()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.resultObject = tmp
        }
    }
}

public class DescribeOperatorListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeOperatorListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeOperatorListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeOperatorListBySceneRequest : Tea.TeaModel {
    public var lang: String?

    public var regId: String?

    public var scene: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.scene != nil {
            map["scene"] = self.scene!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["scene"] as? String {
            self.scene = value
        }
    }
}

public class DescribeOperatorListBySceneResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public class Operators : Tea.TeaModel {
            public class RightVariables : Tea.TeaModel {
                public var fieldName: String?

                public var fieldType: String?

                public var fieldValue: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.fieldName != nil {
                        map["fieldName"] = self.fieldName!
                    }
                    if self.fieldType != nil {
                        map["fieldType"] = self.fieldType!
                    }
                    if self.fieldValue != nil {
                        map["fieldValue"] = self.fieldValue!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["fieldName"] as? String {
                        self.fieldName = value
                    }
                    if let value = dict["fieldType"] as? String {
                        self.fieldType = value
                    }
                    if let value = dict["fieldValue"] as? String {
                        self.fieldValue = value
                    }
                }
            }
            public var code: String?

            public var hasRightVariable: Bool?

            public var memo: String?

            public var name: String?

            public var rightVariables: [DescribeOperatorListBySceneResponseBody.ResultObject.Operators.RightVariables]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.code != nil {
                    map["code"] = self.code!
                }
                if self.hasRightVariable != nil {
                    map["hasRightVariable"] = self.hasRightVariable!
                }
                if self.memo != nil {
                    map["memo"] = self.memo!
                }
                if self.name != nil {
                    map["name"] = self.name!
                }
                if self.rightVariables != nil {
                    var tmp : [Any] = []
                    for k in self.rightVariables! {
                        tmp.append(k.toMap())
                    }
                    map["rightVariables"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["code"] as? String {
                    self.code = value
                }
                if let value = dict["hasRightVariable"] as? Bool {
                    self.hasRightVariable = value
                }
                if let value = dict["memo"] as? String {
                    self.memo = value
                }
                if let value = dict["name"] as? String {
                    self.name = value
                }
                if let value = dict["rightVariables"] as? [Any?] {
                    var tmp : [DescribeOperatorListBySceneResponseBody.ResultObject.Operators.RightVariables] = []
                    for v in value {
                        if v != nil {
                            var model = DescribeOperatorListBySceneResponseBody.ResultObject.Operators.RightVariables()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.rightVariables = tmp
                }
            }
        }
        public var fieldType: String?

        public var operators: [DescribeOperatorListBySceneResponseBody.ResultObject.Operators]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.fieldType != nil {
                map["fieldType"] = self.fieldType!
            }
            if self.operators != nil {
                var tmp : [Any] = []
                for k in self.operators! {
                    tmp.append(k.toMap())
                }
                map["operators"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["fieldType"] as? String {
                self.fieldType = value
            }
            if let value = dict["operators"] as? [Any?] {
                var tmp : [DescribeOperatorListBySceneResponseBody.ResultObject.Operators] = []
                for v in value {
                    if v != nil {
                        var model = DescribeOperatorListBySceneResponseBody.ResultObject.Operators()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.operators = tmp
            }
        }
    }
    public var requestId: String?

    public var resultObject: [DescribeOperatorListBySceneResponseBody.ResultObject]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.resultObject != nil {
            var tmp : [Any] = []
            for k in self.resultObject! {
                tmp.append(k.toMap())
            }
            map["resultObject"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? [Any?] {
            var tmp : [DescribeOperatorListBySceneResponseBody.ResultObject] = []
            for v in value {
                if v != nil {
                    var model = DescribeOperatorListBySceneResponseBody.ResultObject()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.resultObject = tmp
        }
    }
}

public class DescribeOperatorListBySceneResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeOperatorListBySceneResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeOperatorListBySceneResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeOperatorListByTypeRequest : Tea.TeaModel {
    public var lang: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeOperatorListByTypeResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public class Operators : Tea.TeaModel {
            public var code: String?

            public var hasRightVariable: Bool?

            public var name: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.code != nil {
                    map["code"] = self.code!
                }
                if self.hasRightVariable != nil {
                    map["hasRightVariable"] = self.hasRightVariable!
                }
                if self.name != nil {
                    map["name"] = self.name!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["code"] as? String {
                    self.code = value
                }
                if let value = dict["hasRightVariable"] as? Bool {
                    self.hasRightVariable = value
                }
                if let value = dict["name"] as? String {
                    self.name = value
                }
            }
        }
        public var fieldType: String?

        public var operators: [DescribeOperatorListByTypeResponseBody.ResultObject.Operators]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.fieldType != nil {
                map["fieldType"] = self.fieldType!
            }
            if self.operators != nil {
                var tmp : [Any] = []
                for k in self.operators! {
                    tmp.append(k.toMap())
                }
                map["operators"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["fieldType"] as? String {
                self.fieldType = value
            }
            if let value = dict["operators"] as? [Any?] {
                var tmp : [DescribeOperatorListByTypeResponseBody.ResultObject.Operators] = []
                for v in value {
                    if v != nil {
                        var model = DescribeOperatorListByTypeResponseBody.ResultObject.Operators()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.operators = tmp
            }
        }
    }
    public var requestId: String?

    public var resultObject: [DescribeOperatorListByTypeResponseBody.ResultObject]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            var tmp : [Any] = []
            for k in self.resultObject! {
                tmp.append(k.toMap())
            }
            map["resultObject"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? [Any?] {
            var tmp : [DescribeOperatorListByTypeResponseBody.ResultObject] = []
            for v in value {
                if v != nil {
                    var model = DescribeOperatorListByTypeResponseBody.ResultObject()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.resultObject = tmp
        }
    }
}

public class DescribeOperatorListByTypeResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeOperatorListByTypeResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeOperatorListByTypeResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeOssAuthStatusRequest : Tea.TeaModel {
    public var lang: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeOssAuthStatusResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? String {
            self.resultObject = value
        }
    }
}

public class DescribeOssAuthStatusResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeOssAuthStatusResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeOssAuthStatusResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeOssPolicyRequest : Tea.TeaModel {
    public var lang: String?

    public var regId: String?

    public var scene: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.scene != nil {
            map["scene"] = self.scene!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["scene"] as? String {
            self.scene = value
        }
    }
}

public class DescribeOssPolicyResponseBody : Tea.TeaModel {
    public var accessId: String?

    public var host: String?

    public var key: String?

    public var policy: String?

    public var signature: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.accessId != nil {
            map["AccessId"] = self.accessId!
        }
        if self.host != nil {
            map["Host"] = self.host!
        }
        if self.key != nil {
            map["Key"] = self.key!
        }
        if self.policy != nil {
            map["Policy"] = self.policy!
        }
        if self.signature != nil {
            map["Signature"] = self.signature!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AccessId"] as? String {
            self.accessId = value
        }
        if let value = dict["Host"] as? String {
            self.host = value
        }
        if let value = dict["Key"] as? String {
            self.key = value
        }
        if let value = dict["Policy"] as? String {
            self.policy = value
        }
        if let value = dict["Signature"] as? String {
            self.signature = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeOssPolicyResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeOssPolicyResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeOssPolicyResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeOssTokenRequest : Tea.TeaModel {
    public var lang: String?

    public var fileName: String?

    public var regId: String?

    public var uploadType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.fileName != nil {
            map["fileName"] = self.fileName!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.uploadType != nil {
            map["uploadType"] = self.uploadType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["fileName"] as? String {
            self.fileName = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["uploadType"] as? String {
            self.uploadType = value
        }
    }
}

public class DescribeOssTokenResponseBody : Tea.TeaModel {
    public var accessId: String?

    public var host: String?

    public var key: String?

    public var policy: String?

    public var requestId: String?

    public var signature: String?

    public var stsToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.accessId != nil {
            map["AccessId"] = self.accessId!
        }
        if self.host != nil {
            map["Host"] = self.host!
        }
        if self.key != nil {
            map["Key"] = self.key!
        }
        if self.policy != nil {
            map["Policy"] = self.policy!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.signature != nil {
            map["Signature"] = self.signature!
        }
        if self.stsToken != nil {
            map["StsToken"] = self.stsToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AccessId"] as? String {
            self.accessId = value
        }
        if let value = dict["Host"] as? String {
            self.host = value
        }
        if let value = dict["Key"] as? String {
            self.key = value
        }
        if let value = dict["Policy"] as? String {
            self.policy = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Signature"] as? String {
            self.signature = value
        }
        if let value = dict["StsToken"] as? String {
            self.stsToken = value
        }
    }
}

public class DescribeOssTokenResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeOssTokenResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeOssTokenResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeParamByEventCodesRequest : Tea.TeaModel {
    public var lang: String?

    public var eventCodes: String?

    public var parma: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.eventCodes != nil {
            map["eventCodes"] = self.eventCodes!
        }
        if self.parma != nil {
            map["parma"] = self.parma!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["eventCodes"] as? String {
            self.eventCodes = value
        }
        if let value = dict["parma"] as? String {
            self.parma = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeParamByEventCodesResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public var code: String?

        public var name: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.code != nil {
                map["code"] = self.code!
            }
            if self.name != nil {
                map["name"] = self.name!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["code"] as? String {
                self.code = value
            }
            if let value = dict["name"] as? String {
                self.name = value
            }
        }
    }
    public var requestId: String?

    public var resultObject: [DescribeParamByEventCodesResponseBody.ResultObject]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            var tmp : [Any] = []
            for k in self.resultObject! {
                tmp.append(k.toMap())
            }
            map["resultObject"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? [Any?] {
            var tmp : [DescribeParamByEventCodesResponseBody.ResultObject] = []
            for v in value {
                if v != nil {
                    var model = DescribeParamByEventCodesResponseBody.ResultObject()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.resultObject = tmp
        }
    }
}

public class DescribeParamByEventCodesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeParamByEventCodesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeParamByEventCodesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribePocOssTokenRequest : Tea.TeaModel {
    public var lang: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribePocOssTokenResponseBody : Tea.TeaModel {
    public var accessId: String?

    public var host: String?

    public var key: String?

    public var policy: String?

    public var requestId: String?

    public var signature: String?

    public var resultObject: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.accessId != nil {
            map["AccessId"] = self.accessId!
        }
        if self.host != nil {
            map["Host"] = self.host!
        }
        if self.key != nil {
            map["Key"] = self.key!
        }
        if self.policy != nil {
            map["Policy"] = self.policy!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.signature != nil {
            map["Signature"] = self.signature!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AccessId"] as? String {
            self.accessId = value
        }
        if let value = dict["Host"] as? String {
            self.host = value
        }
        if let value = dict["Key"] as? String {
            self.key = value
        }
        if let value = dict["Policy"] as? String {
            self.policy = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Signature"] as? String {
            self.signature = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
    }
}

public class DescribePocOssTokenResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribePocOssTokenResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribePocOssTokenResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribePocTaskListRequest : Tea.TeaModel {
    public var lang: String?

    public var currentPage: Int32?

    public var pageSize: Int32?

    public var regId: String?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.currentPage != nil {
            map["currentPage"] = self.currentPage!
        }
        if self.pageSize != nil {
            map["pageSize"] = self.pageSize!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.type != nil {
            map["type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["currentPage"] as? Int32 {
            self.currentPage = value
        }
        if let value = dict["pageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["type"] as? String {
            self.type = value
        }
    }
}

public class DescribePocTaskListResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public var createTime: String?

        public var downloadUrl: String?

        public var fileType: String?

        public var serviceName: String?

        public var status: String?

        public var taskId: String?

        public var taskName: String?

        public var updateTime: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.createTime != nil {
                map["createTime"] = self.createTime!
            }
            if self.downloadUrl != nil {
                map["downloadUrl"] = self.downloadUrl!
            }
            if self.fileType != nil {
                map["fileType"] = self.fileType!
            }
            if self.serviceName != nil {
                map["serviceName"] = self.serviceName!
            }
            if self.status != nil {
                map["status"] = self.status!
            }
            if self.taskId != nil {
                map["taskId"] = self.taskId!
            }
            if self.taskName != nil {
                map["taskName"] = self.taskName!
            }
            if self.updateTime != nil {
                map["updateTime"] = self.updateTime!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["createTime"] as? String {
                self.createTime = value
            }
            if let value = dict["downloadUrl"] as? String {
                self.downloadUrl = value
            }
            if let value = dict["fileType"] as? String {
                self.fileType = value
            }
            if let value = dict["serviceName"] as? String {
                self.serviceName = value
            }
            if let value = dict["status"] as? String {
                self.status = value
            }
            if let value = dict["taskId"] as? String {
                self.taskId = value
            }
            if let value = dict["taskName"] as? String {
                self.taskName = value
            }
            if let value = dict["updateTime"] as? String {
                self.updateTime = value
            }
        }
    }
    public var requestId: String?

    public var currentPage: Int32?

    public var pageSize: Int32?

    public var resultObject: [DescribePocTaskListResponseBody.ResultObject]?

    public var totalItem: Int32?

    public var totalPage: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.currentPage != nil {
            map["currentPage"] = self.currentPage!
        }
        if self.pageSize != nil {
            map["pageSize"] = self.pageSize!
        }
        if self.resultObject != nil {
            var tmp : [Any] = []
            for k in self.resultObject! {
                tmp.append(k.toMap())
            }
            map["resultObject"] = tmp
        }
        if self.totalItem != nil {
            map["totalItem"] = self.totalItem!
        }
        if self.totalPage != nil {
            map["totalPage"] = self.totalPage!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["currentPage"] as? Int32 {
            self.currentPage = value
        }
        if let value = dict["pageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["resultObject"] as? [Any?] {
            var tmp : [DescribePocTaskListResponseBody.ResultObject] = []
            for v in value {
                if v != nil {
                    var model = DescribePocTaskListResponseBody.ResultObject()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.resultObject = tmp
        }
        if let value = dict["totalItem"] as? Int32 {
            self.totalItem = value
        }
        if let value = dict["totalPage"] as? Int32 {
            self.totalPage = value
        }
    }
}

public class DescribePocTaskListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribePocTaskListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribePocTaskListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribePrivateStackRequest : Tea.TeaModel {
    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribePrivateStackResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
    }
}

public class DescribePrivateStackResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribePrivateStackResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribePrivateStackResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeQueryVariableDetailRequest : Tea.TeaModel {
    public var lang: String?

    public var id: Int64?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.id != nil {
            map["id"] = self.id!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["id"] as? Int64 {
            self.id = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeQueryVariableDetailResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public var dataSourceCode: Int64?

        public var dataSourceName: String?

        public var description_: String?

        public var eventCode: String?

        public var expression: String?

        public var expressionTitle: String?

        public var expressionVariable: String?

        public var id: Int64?

        public var outlier: String?

        public var outputs: String?

        public var title: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.dataSourceCode != nil {
                map["dataSourceCode"] = self.dataSourceCode!
            }
            if self.dataSourceName != nil {
                map["dataSourceName"] = self.dataSourceName!
            }
            if self.description_ != nil {
                map["description"] = self.description_!
            }
            if self.eventCode != nil {
                map["eventCode"] = self.eventCode!
            }
            if self.expression != nil {
                map["expression"] = self.expression!
            }
            if self.expressionTitle != nil {
                map["expressionTitle"] = self.expressionTitle!
            }
            if self.expressionVariable != nil {
                map["expressionVariable"] = self.expressionVariable!
            }
            if self.id != nil {
                map["id"] = self.id!
            }
            if self.outlier != nil {
                map["outlier"] = self.outlier!
            }
            if self.outputs != nil {
                map["outputs"] = self.outputs!
            }
            if self.title != nil {
                map["title"] = self.title!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["dataSourceCode"] as? Int64 {
                self.dataSourceCode = value
            }
            if let value = dict["dataSourceName"] as? String {
                self.dataSourceName = value
            }
            if let value = dict["description"] as? String {
                self.description_ = value
            }
            if let value = dict["eventCode"] as? String {
                self.eventCode = value
            }
            if let value = dict["expression"] as? String {
                self.expression = value
            }
            if let value = dict["expressionTitle"] as? String {
                self.expressionTitle = value
            }
            if let value = dict["expressionVariable"] as? String {
                self.expressionVariable = value
            }
            if let value = dict["id"] as? Int64 {
                self.id = value
            }
            if let value = dict["outlier"] as? String {
                self.outlier = value
            }
            if let value = dict["outputs"] as? String {
                self.outputs = value
            }
            if let value = dict["title"] as? String {
                self.title = value
            }
        }
    }
    public var requestId: String?

    public var resultObject: DescribeQueryVariableDetailResponseBody.ResultObject?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.resultObject?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? [String: Any?] {
            var model = DescribeQueryVariableDetailResponseBody.ResultObject()
            model.fromMap(value)
            self.resultObject = model
        }
    }
}

public class DescribeQueryVariableDetailResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeQueryVariableDetailResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeQueryVariableDetailResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeQueryVariablePageListRequest : Tea.TeaModel {
    public var lang: String?

    public var currentPage: Int64?

    public var dataSourceCode: String?

    public var eventCode: String?

    public var name: String?

    public var pageSize: Int64?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.currentPage != nil {
            map["currentPage"] = self.currentPage!
        }
        if self.dataSourceCode != nil {
            map["dataSourceCode"] = self.dataSourceCode!
        }
        if self.eventCode != nil {
            map["eventCode"] = self.eventCode!
        }
        if self.name != nil {
            map["name"] = self.name!
        }
        if self.pageSize != nil {
            map["pageSize"] = self.pageSize!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["currentPage"] as? Int64 {
            self.currentPage = value
        }
        if let value = dict["dataSourceCode"] as? String {
            self.dataSourceCode = value
        }
        if let value = dict["eventCode"] as? String {
            self.eventCode = value
        }
        if let value = dict["name"] as? String {
            self.name = value
        }
        if let value = dict["pageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeQueryVariablePageListResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public var dataSourceCode: Int64?

        public var dataSourceName: String?

        public var description_: String?

        public var eventName: String?

        public var fieldType: String?

        public var gmtCreate: Int64?

        public var gmtModified: Int64?

        public var id: Int64?

        public var name: String?

        public var status: String?

        public var total: Int64?

        public var version: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.dataSourceCode != nil {
                map["dataSourceCode"] = self.dataSourceCode!
            }
            if self.dataSourceName != nil {
                map["dataSourceName"] = self.dataSourceName!
            }
            if self.description_ != nil {
                map["description"] = self.description_!
            }
            if self.eventName != nil {
                map["eventName"] = self.eventName!
            }
            if self.fieldType != nil {
                map["fieldType"] = self.fieldType!
            }
            if self.gmtCreate != nil {
                map["gmtCreate"] = self.gmtCreate!
            }
            if self.gmtModified != nil {
                map["gmtModified"] = self.gmtModified!
            }
            if self.id != nil {
                map["id"] = self.id!
            }
            if self.name != nil {
                map["name"] = self.name!
            }
            if self.status != nil {
                map["status"] = self.status!
            }
            if self.total != nil {
                map["total"] = self.total!
            }
            if self.version != nil {
                map["version"] = self.version!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["dataSourceCode"] as? Int64 {
                self.dataSourceCode = value
            }
            if let value = dict["dataSourceName"] as? String {
                self.dataSourceName = value
            }
            if let value = dict["description"] as? String {
                self.description_ = value
            }
            if let value = dict["eventName"] as? String {
                self.eventName = value
            }
            if let value = dict["fieldType"] as? String {
                self.fieldType = value
            }
            if let value = dict["gmtCreate"] as? Int64 {
                self.gmtCreate = value
            }
            if let value = dict["gmtModified"] as? Int64 {
                self.gmtModified = value
            }
            if let value = dict["id"] as? Int64 {
                self.id = value
            }
            if let value = dict["name"] as? String {
                self.name = value
            }
            if let value = dict["status"] as? String {
                self.status = value
            }
            if let value = dict["total"] as? Int64 {
                self.total = value
            }
            if let value = dict["version"] as? Int64 {
                self.version = value
            }
        }
    }
    public var requestId: String?

    public var currentPage: Int64?

    public var pageSize: Int64?

    public var resultObject: [DescribeQueryVariablePageListResponseBody.ResultObject]?

    public var totalItem: Int64?

    public var totalPage: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.currentPage != nil {
            map["currentPage"] = self.currentPage!
        }
        if self.pageSize != nil {
            map["pageSize"] = self.pageSize!
        }
        if self.resultObject != nil {
            var tmp : [Any] = []
            for k in self.resultObject! {
                tmp.append(k.toMap())
            }
            map["resultObject"] = tmp
        }
        if self.totalItem != nil {
            map["totalItem"] = self.totalItem!
        }
        if self.totalPage != nil {
            map["totalPage"] = self.totalPage!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["currentPage"] as? Int64 {
            self.currentPage = value
        }
        if let value = dict["pageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["resultObject"] as? [Any?] {
            var tmp : [DescribeQueryVariablePageListResponseBody.ResultObject] = []
            for v in value {
                if v != nil {
                    var model = DescribeQueryVariablePageListResponseBody.ResultObject()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.resultObject = tmp
        }
        if let value = dict["totalItem"] as? Int64 {
            self.totalItem = value
        }
        if let value = dict["totalPage"] as? Int64 {
            self.totalPage = value
        }
    }
}

public class DescribeQueryVariablePageListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeQueryVariablePageListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeQueryVariablePageListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeRecommendSceneVariablesRequest : Tea.TeaModel {
    public var lang: String?

    public var regId: String?

    public var sampleId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.sampleId != nil {
            map["sampleId"] = self.sampleId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["sampleId"] as? Int64 {
            self.sampleId = value
        }
    }
}

public class DescribeRecommendSceneVariablesResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
    }
}

public class DescribeRecommendSceneVariablesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeRecommendSceneVariablesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeRecommendSceneVariablesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeRecommendTaskDetailRequest : Tea.TeaModel {
    public var lang: String?

    public var regId: String?

    public var taskId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.taskId != nil {
            map["taskId"] = self.taskId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["taskId"] as? Int64 {
            self.taskId = value
        }
    }
}

public class DescribeRecommendTaskDetailResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public class RecommendRuleDTOs : Tea.TeaModel {
            public class RecommendRules : Tea.TeaModel {
                public var left_: String?

                public var operator_: String?

                public var right_: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.left_ != nil {
                        map["left"] = self.left_!
                    }
                    if self.operator_ != nil {
                        map["operator"] = self.operator_!
                    }
                    if self.right_ != nil {
                        map["right"] = self.right_!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["left"] as? String {
                        self.left_ = value
                    }
                    if let value = dict["operator"] as? String {
                        self.operator_ = value
                    }
                    if let value = dict["right"] as? String {
                        self.right_ = value
                    }
                }
            }
            public var computeExpression: String?

            public var hitSample: Int64?

            public var id: Int64?

            public var notHitSample: Int64?

            public var recommendRules: [DescribeRecommendTaskDetailResponseBody.ResultObject.RecommendRuleDTOs.RecommendRules]?

            public var ruleId: String?

            public var ruleName: String?

            public var status: String?

            public var velocities: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.computeExpression != nil {
                    map["computeExpression"] = self.computeExpression!
                }
                if self.hitSample != nil {
                    map["hitSample"] = self.hitSample!
                }
                if self.id != nil {
                    map["id"] = self.id!
                }
                if self.notHitSample != nil {
                    map["notHitSample"] = self.notHitSample!
                }
                if self.recommendRules != nil {
                    var tmp : [Any] = []
                    for k in self.recommendRules! {
                        tmp.append(k.toMap())
                    }
                    map["recommendRules"] = tmp
                }
                if self.ruleId != nil {
                    map["ruleId"] = self.ruleId!
                }
                if self.ruleName != nil {
                    map["ruleName"] = self.ruleName!
                }
                if self.status != nil {
                    map["status"] = self.status!
                }
                if self.velocities != nil {
                    map["velocities"] = self.velocities!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["computeExpression"] as? String {
                    self.computeExpression = value
                }
                if let value = dict["hitSample"] as? Int64 {
                    self.hitSample = value
                }
                if let value = dict["id"] as? Int64 {
                    self.id = value
                }
                if let value = dict["notHitSample"] as? Int64 {
                    self.notHitSample = value
                }
                if let value = dict["recommendRules"] as? [Any?] {
                    var tmp : [DescribeRecommendTaskDetailResponseBody.ResultObject.RecommendRuleDTOs.RecommendRules] = []
                    for v in value {
                        if v != nil {
                            var model = DescribeRecommendTaskDetailResponseBody.ResultObject.RecommendRuleDTOs.RecommendRules()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.recommendRules = tmp
                }
                if let value = dict["ruleId"] as? String {
                    self.ruleId = value
                }
                if let value = dict["ruleName"] as? String {
                    self.ruleName = value
                }
                if let value = dict["status"] as? String {
                    self.status = value
                }
                if let value = dict["velocities"] as? String {
                    self.velocities = value
                }
            }
        }
        public class RecommendVariableDTOs : Tea.TeaModel {
            public var id: Int64?

            public var title: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.id != nil {
                    map["id"] = self.id!
                }
                if self.title != nil {
                    map["title"] = self.title!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["id"] as? Int64 {
                    self.id = value
                }
                if let value = dict["title"] as? String {
                    self.title = value
                }
            }
        }
        public var eventCode: String?

        public var eventName: String?

        public var expectVelocities: [String]?

        public var gmtCreate: Int64?

        public var normalSize: Int64?

        public var recommendRuleDTOs: [DescribeRecommendTaskDetailResponseBody.ResultObject.RecommendRuleDTOs]?

        public var recommendVariableDTOs: [DescribeRecommendTaskDetailResponseBody.ResultObject.RecommendVariableDTOs]?

        public var riskSize: Int64?

        public var sampleName: String?

        public var sampleScene: String?

        public var sampleSceneName: String?

        public var taskId: Int64?

        public var taskName: String?

        public var taskStatus: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.eventCode != nil {
                map["eventCode"] = self.eventCode!
            }
            if self.eventName != nil {
                map["eventName"] = self.eventName!
            }
            if self.expectVelocities != nil {
                map["expectVelocities"] = self.expectVelocities!
            }
            if self.gmtCreate != nil {
                map["gmtCreate"] = self.gmtCreate!
            }
            if self.normalSize != nil {
                map["normalSize"] = self.normalSize!
            }
            if self.recommendRuleDTOs != nil {
                var tmp : [Any] = []
                for k in self.recommendRuleDTOs! {
                    tmp.append(k.toMap())
                }
                map["recommendRuleDTOs"] = tmp
            }
            if self.recommendVariableDTOs != nil {
                var tmp : [Any] = []
                for k in self.recommendVariableDTOs! {
                    tmp.append(k.toMap())
                }
                map["recommendVariableDTOs"] = tmp
            }
            if self.riskSize != nil {
                map["riskSize"] = self.riskSize!
            }
            if self.sampleName != nil {
                map["sampleName"] = self.sampleName!
            }
            if self.sampleScene != nil {
                map["sampleScene"] = self.sampleScene!
            }
            if self.sampleSceneName != nil {
                map["sampleSceneName"] = self.sampleSceneName!
            }
            if self.taskId != nil {
                map["taskId"] = self.taskId!
            }
            if self.taskName != nil {
                map["taskName"] = self.taskName!
            }
            if self.taskStatus != nil {
                map["taskStatus"] = self.taskStatus!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["eventCode"] as? String {
                self.eventCode = value
            }
            if let value = dict["eventName"] as? String {
                self.eventName = value
            }
            if let value = dict["expectVelocities"] as? [String] {
                self.expectVelocities = value
            }
            if let value = dict["gmtCreate"] as? Int64 {
                self.gmtCreate = value
            }
            if let value = dict["normalSize"] as? Int64 {
                self.normalSize = value
            }
            if let value = dict["recommendRuleDTOs"] as? [Any?] {
                var tmp : [DescribeRecommendTaskDetailResponseBody.ResultObject.RecommendRuleDTOs] = []
                for v in value {
                    if v != nil {
                        var model = DescribeRecommendTaskDetailResponseBody.ResultObject.RecommendRuleDTOs()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.recommendRuleDTOs = tmp
            }
            if let value = dict["recommendVariableDTOs"] as? [Any?] {
                var tmp : [DescribeRecommendTaskDetailResponseBody.ResultObject.RecommendVariableDTOs] = []
                for v in value {
                    if v != nil {
                        var model = DescribeRecommendTaskDetailResponseBody.ResultObject.RecommendVariableDTOs()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.recommendVariableDTOs = tmp
            }
            if let value = dict["riskSize"] as? Int64 {
                self.riskSize = value
            }
            if let value = dict["sampleName"] as? String {
                self.sampleName = value
            }
            if let value = dict["sampleScene"] as? String {
                self.sampleScene = value
            }
            if let value = dict["sampleSceneName"] as? String {
                self.sampleSceneName = value
            }
            if let value = dict["taskId"] as? Int64 {
                self.taskId = value
            }
            if let value = dict["taskName"] as? String {
                self.taskName = value
            }
            if let value = dict["taskStatus"] as? String {
                self.taskStatus = value
            }
        }
    }
    public var requestId: String?

    public var resultObject: DescribeRecommendTaskDetailResponseBody.ResultObject?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.resultObject?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? [String: Any?] {
            var model = DescribeRecommendTaskDetailResponseBody.ResultObject()
            model.fromMap(value)
            self.resultObject = model
        }
    }
}

public class DescribeRecommendTaskDetailResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeRecommendTaskDetailResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeRecommendTaskDetailResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeRecommendTaskPageListRequest : Tea.TeaModel {
    public var lang: String?

    public var currentPage: String?

    public var pageSize: String?

    public var regId: String?

    public var taskName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.currentPage != nil {
            map["currentPage"] = self.currentPage!
        }
        if self.pageSize != nil {
            map["pageSize"] = self.pageSize!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.taskName != nil {
            map["taskName"] = self.taskName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["currentPage"] as? String {
            self.currentPage = value
        }
        if let value = dict["pageSize"] as? String {
            self.pageSize = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["taskName"] as? String {
            self.taskName = value
        }
    }
}

public class DescribeRecommendTaskPageListResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public var expectVelocities: [String]?

        public var gmtCreate: Int64?

        public var normalCount: Int64?

        public var normalSize: Int64?

        public var riskCount: Int64?

        public var riskSize: Int64?

        public var sampleName: String?

        public var sampleScene: String?

        public var taskId: Int64?

        public var taskName: String?

        public var taskStatus: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.expectVelocities != nil {
                map["expectVelocities"] = self.expectVelocities!
            }
            if self.gmtCreate != nil {
                map["gmtCreate"] = self.gmtCreate!
            }
            if self.normalCount != nil {
                map["normalCount"] = self.normalCount!
            }
            if self.normalSize != nil {
                map["normalSize"] = self.normalSize!
            }
            if self.riskCount != nil {
                map["riskCount"] = self.riskCount!
            }
            if self.riskSize != nil {
                map["riskSize"] = self.riskSize!
            }
            if self.sampleName != nil {
                map["sampleName"] = self.sampleName!
            }
            if self.sampleScene != nil {
                map["sampleScene"] = self.sampleScene!
            }
            if self.taskId != nil {
                map["taskId"] = self.taskId!
            }
            if self.taskName != nil {
                map["taskName"] = self.taskName!
            }
            if self.taskStatus != nil {
                map["taskStatus"] = self.taskStatus!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["expectVelocities"] as? [String] {
                self.expectVelocities = value
            }
            if let value = dict["gmtCreate"] as? Int64 {
                self.gmtCreate = value
            }
            if let value = dict["normalCount"] as? Int64 {
                self.normalCount = value
            }
            if let value = dict["normalSize"] as? Int64 {
                self.normalSize = value
            }
            if let value = dict["riskCount"] as? Int64 {
                self.riskCount = value
            }
            if let value = dict["riskSize"] as? Int64 {
                self.riskSize = value
            }
            if let value = dict["sampleName"] as? String {
                self.sampleName = value
            }
            if let value = dict["sampleScene"] as? String {
                self.sampleScene = value
            }
            if let value = dict["taskId"] as? Int64 {
                self.taskId = value
            }
            if let value = dict["taskName"] as? String {
                self.taskName = value
            }
            if let value = dict["taskStatus"] as? String {
                self.taskStatus = value
            }
        }
    }
    public var requestId: String?

    public var currentPage: Int32?

    public var pageSize: Int32?

    public var resultObject: [DescribeRecommendTaskPageListResponseBody.ResultObject]?

    public var totalItem: Int32?

    public var totalPage: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.currentPage != nil {
            map["currentPage"] = self.currentPage!
        }
        if self.pageSize != nil {
            map["pageSize"] = self.pageSize!
        }
        if self.resultObject != nil {
            var tmp : [Any] = []
            for k in self.resultObject! {
                tmp.append(k.toMap())
            }
            map["resultObject"] = tmp
        }
        if self.totalItem != nil {
            map["totalItem"] = self.totalItem!
        }
        if self.totalPage != nil {
            map["totalPage"] = self.totalPage!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["currentPage"] as? Int32 {
            self.currentPage = value
        }
        if let value = dict["pageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["resultObject"] as? [Any?] {
            var tmp : [DescribeRecommendTaskPageListResponseBody.ResultObject] = []
            for v in value {
                if v != nil {
                    var model = DescribeRecommendTaskPageListResponseBody.ResultObject()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.resultObject = tmp
        }
        if let value = dict["totalItem"] as? Int32 {
            self.totalItem = value
        }
        if let value = dict["totalPage"] as? Int32 {
            self.totalPage = value
        }
    }
}

public class DescribeRecommendTaskPageListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeRecommendTaskPageListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeRecommendTaskPageListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeRecommendVariablesVelocityRequest : Tea.TeaModel {
    public var lang: String?

    public var regId: String?

    public var taskId: Int64?

    public var variableIdsStr: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.taskId != nil {
            map["taskId"] = self.taskId!
        }
        if self.variableIdsStr != nil {
            map["variableIdsStr"] = self.variableIdsStr!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["taskId"] as? Int64 {
            self.taskId = value
        }
        if let value = dict["variableIdsStr"] as? String {
            self.variableIdsStr = value
        }
    }
}

public class DescribeRecommendVariablesVelocityResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
    }
}

public class DescribeRecommendVariablesVelocityResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeRecommendVariablesVelocityResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeRecommendVariablesVelocityResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeRecommendVelocitiesRequest : Tea.TeaModel {
    public var lang: String?

    public var code: String?

    public var regId: String?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.type != nil {
            map["type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["type"] as? String {
            self.type = value
        }
    }
}

public class DescribeRecommendVelocitiesResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
    }
}

public class DescribeRecommendVelocitiesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeRecommendVelocitiesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeRecommendVelocitiesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeRegionsRequest : Tea.TeaModel {
    public var lang: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeRegionsResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
    }
}

public class DescribeRegionsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeRegionsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeRegionsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeRequestHitRequest : Tea.TeaModel {
    public var lang: String?

    public var regId: String?

    public var sRequestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.sRequestId != nil {
            map["sRequestId"] = self.sRequestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["sRequestId"] as? String {
            self.sRequestId = value
        }
    }
}

public class DescribeRequestHitResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public class RuleHitRecords : Tea.TeaModel {
            public var cost: Int32?

            public var hitSuccessful: Bool?

            public var isShowDetail: Bool?

            public var order: Int32?

            public var ruleId: String?

            public var ruleName: String?

            public var ruleSnapshotId: String?

            public var ruleStatus: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.cost != nil {
                    map["cost"] = self.cost!
                }
                if self.hitSuccessful != nil {
                    map["hitSuccessful"] = self.hitSuccessful!
                }
                if self.isShowDetail != nil {
                    map["isShowDetail"] = self.isShowDetail!
                }
                if self.order != nil {
                    map["order"] = self.order!
                }
                if self.ruleId != nil {
                    map["ruleId"] = self.ruleId!
                }
                if self.ruleName != nil {
                    map["ruleName"] = self.ruleName!
                }
                if self.ruleSnapshotId != nil {
                    map["ruleSnapshotId"] = self.ruleSnapshotId!
                }
                if self.ruleStatus != nil {
                    map["ruleStatus"] = self.ruleStatus!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["cost"] as? Int32 {
                    self.cost = value
                }
                if let value = dict["hitSuccessful"] as? Bool {
                    self.hitSuccessful = value
                }
                if let value = dict["isShowDetail"] as? Bool {
                    self.isShowDetail = value
                }
                if let value = dict["order"] as? Int32 {
                    self.order = value
                }
                if let value = dict["ruleId"] as? String {
                    self.ruleId = value
                }
                if let value = dict["ruleName"] as? String {
                    self.ruleName = value
                }
                if let value = dict["ruleSnapshotId"] as? String {
                    self.ruleSnapshotId = value
                }
                if let value = dict["ruleStatus"] as? String {
                    self.ruleStatus = value
                }
            }
        }
        public var eventCode: String?

        public var eventName: String?

        public var inputs: String?

        public var outputs: String?

        public var requestTime: Int64?

        public var ruleHitRecords: [DescribeRequestHitResponseBody.ResultObject.RuleHitRecords]?

        public var sRequestId: String?

        public var totalCost: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.eventCode != nil {
                map["eventCode"] = self.eventCode!
            }
            if self.eventName != nil {
                map["eventName"] = self.eventName!
            }
            if self.inputs != nil {
                map["inputs"] = self.inputs!
            }
            if self.outputs != nil {
                map["outputs"] = self.outputs!
            }
            if self.requestTime != nil {
                map["requestTime"] = self.requestTime!
            }
            if self.ruleHitRecords != nil {
                var tmp : [Any] = []
                for k in self.ruleHitRecords! {
                    tmp.append(k.toMap())
                }
                map["ruleHitRecords"] = tmp
            }
            if self.sRequestId != nil {
                map["sRequestId"] = self.sRequestId!
            }
            if self.totalCost != nil {
                map["totalCost"] = self.totalCost!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["eventCode"] as? String {
                self.eventCode = value
            }
            if let value = dict["eventName"] as? String {
                self.eventName = value
            }
            if let value = dict["inputs"] as? String {
                self.inputs = value
            }
            if let value = dict["outputs"] as? String {
                self.outputs = value
            }
            if let value = dict["requestTime"] as? Int64 {
                self.requestTime = value
            }
            if let value = dict["ruleHitRecords"] as? [Any?] {
                var tmp : [DescribeRequestHitResponseBody.ResultObject.RuleHitRecords] = []
                for v in value {
                    if v != nil {
                        var model = DescribeRequestHitResponseBody.ResultObject.RuleHitRecords()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.ruleHitRecords = tmp
            }
            if let value = dict["sRequestId"] as? String {
                self.sRequestId = value
            }
            if let value = dict["totalCost"] as? Int64 {
                self.totalCost = value
            }
        }
    }
    public var requestId: String?

    public var resultObject: DescribeRequestHitResponseBody.ResultObject?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.resultObject?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? [String: Any?] {
            var model = DescribeRequestHitResponseBody.ResultObject()
            model.fromMap(value)
            self.resultObject = model
        }
    }
}

public class DescribeRequestHitResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeRequestHitResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeRequestHitResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeRequestPeakReportRequest : Tea.TeaModel {
    public var lang: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeRequestPeakReportResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public var ratio: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.ratio != nil {
                map["ratio"] = self.ratio!
            }
            if self.value != nil {
                map["value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ratio"] as? String {
                self.ratio = value
            }
            if let value = dict["value"] as? String {
                self.value = value
            }
        }
    }
    public var code: String?

    public var httpStatusCode: String?

    public var message: String?

    public var requestId: String?

    public var resultObject: [DescribeRequestPeakReportResponseBody.ResultObject]?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["httpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.resultObject != nil {
            var tmp : [Any] = []
            for k in self.resultObject! {
                tmp.append(k.toMap())
            }
            map["resultObject"] = tmp
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["httpStatusCode"] as? String {
            self.httpStatusCode = value
        }
        if let value = dict["message"] as? String {
            self.message = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? [Any?] {
            var tmp : [DescribeRequestPeakReportResponseBody.ResultObject] = []
            for v in value {
                if v != nil {
                    var model = DescribeRequestPeakReportResponseBody.ResultObject()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.resultObject = tmp
        }
        if let value = dict["success"] as? Bool {
            self.success = value
        }
    }
}

public class DescribeRequestPeakReportResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeRequestPeakReportResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeRequestPeakReportResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeResultCountRequest : Tea.TeaModel {
    public var lang: String?

    public var beginTime: Int64?

    public var endTime: Int64?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.beginTime != nil {
            map["beginTime"] = self.beginTime!
        }
        if self.endTime != nil {
            map["endTime"] = self.endTime!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["beginTime"] as? Int64 {
            self.beginTime = value
        }
        if let value = dict["endTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeResultCountResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public var result: String?

        public var total: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.result != nil {
                map["result"] = self.result!
            }
            if self.total != nil {
                map["total"] = self.total!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["result"] as? String {
                self.result = value
            }
            if let value = dict["total"] as? String {
                self.total = value
            }
        }
    }
    public var code: String?

    public var httpStatusCode: String?

    public var message: String?

    public var requestId: String?

    public var resultObject: [DescribeResultCountResponseBody.ResultObject]?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["httpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.resultObject != nil {
            var tmp : [Any] = []
            for k in self.resultObject! {
                tmp.append(k.toMap())
            }
            map["resultObject"] = tmp
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["httpStatusCode"] as? String {
            self.httpStatusCode = value
        }
        if let value = dict["message"] as? String {
            self.message = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? [Any?] {
            var tmp : [DescribeResultCountResponseBody.ResultObject] = []
            for v in value {
                if v != nil {
                    var model = DescribeResultCountResponseBody.ResultObject()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.resultObject = tmp
        }
        if let value = dict["success"] as? Bool {
            self.success = value
        }
    }
}

public class DescribeResultCountResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeResultCountResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeResultCountResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeRiskLineChartRequest : Tea.TeaModel {
    public var lang: String?

    public var beginTime: Int64?

    public var endTime: Int64?

    public var eventCodes: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.beginTime != nil {
            map["beginTime"] = self.beginTime!
        }
        if self.endTime != nil {
            map["endTime"] = self.endTime!
        }
        if self.eventCodes != nil {
            map["eventCodes"] = self.eventCodes!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["beginTime"] as? Int64 {
            self.beginTime = value
        }
        if let value = dict["endTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["eventCodes"] as? String {
            self.eventCodes = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeRiskLineChartResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public class Series : Tea.TeaModel {
            public var data: [String]?

            public var name: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.data != nil {
                    map["data"] = self.data!
                }
                if self.name != nil {
                    map["name"] = self.name!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["data"] as? [String] {
                    self.data = value
                }
                if let value = dict["name"] as? String {
                    self.name = value
                }
            }
        }
        public class Xaxis : Tea.TeaModel {
            public var data: [String]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.data != nil {
                    map["data"] = self.data!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["data"] as? [String] {
                    self.data = value
                }
            }
        }
        public var series: [DescribeRiskLineChartResponseBody.ResultObject.Series]?

        public var xaxis: DescribeRiskLineChartResponseBody.ResultObject.Xaxis?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.xaxis?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.series != nil {
                var tmp : [Any] = []
                for k in self.series! {
                    tmp.append(k.toMap())
                }
                map["series"] = tmp
            }
            if self.xaxis != nil {
                map["xaxis"] = self.xaxis?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["series"] as? [Any?] {
                var tmp : [DescribeRiskLineChartResponseBody.ResultObject.Series] = []
                for v in value {
                    if v != nil {
                        var model = DescribeRiskLineChartResponseBody.ResultObject.Series()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.series = tmp
            }
            if let value = dict["xaxis"] as? [String: Any?] {
                var model = DescribeRiskLineChartResponseBody.ResultObject.Xaxis()
                model.fromMap(value)
                self.xaxis = model
            }
        }
    }
    public var code: String?

    public var httpStatusCode: String?

    public var message: String?

    public var requestId: String?

    public var resultObject: DescribeRiskLineChartResponseBody.ResultObject?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.resultObject?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["httpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject?.toMap()
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["httpStatusCode"] as? String {
            self.httpStatusCode = value
        }
        if let value = dict["message"] as? String {
            self.message = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? [String: Any?] {
            var model = DescribeRiskLineChartResponseBody.ResultObject()
            model.fromMap(value)
            self.resultObject = model
        }
        if let value = dict["success"] as? Bool {
            self.success = value
        }
    }
}

public class DescribeRiskLineChartResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeRiskLineChartResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeRiskLineChartResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeRiskTagsLineChartRequest : Tea.TeaModel {
    public var beginTime: Int64?

    public var endTime: Int64?

    public var eventCodes: String?

    public var lang: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.beginTime != nil {
            map["BeginTime"] = self.beginTime!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.eventCodes != nil {
            map["EventCodes"] = self.eventCodes!
        }
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.regId != nil {
            map["RegId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BeginTime"] as? Int64 {
            self.beginTime = value
        }
        if let value = dict["EndTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["EventCodes"] as? String {
            self.eventCodes = value
        }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["RegId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeRiskTagsLineChartResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public class Series : Tea.TeaModel {
            public var data: Double?

            public var name: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.data != nil {
                    map["Data"] = self.data!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Data"] as? Double {
                    self.data = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
            }
        }
        public class Xaxis : Tea.TeaModel {
            public var data: [String]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.data != nil {
                    map["Data"] = self.data!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Data"] as? [String] {
                    self.data = value
                }
            }
        }
        public var percent: [Double]?

        public var series: [DescribeRiskTagsLineChartResponseBody.ResultObject.Series]?

        public var total: [Int64]?

        public var xaxis: DescribeRiskTagsLineChartResponseBody.ResultObject.Xaxis?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.xaxis?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.percent != nil {
                map["Percent"] = self.percent!
            }
            if self.series != nil {
                var tmp : [Any] = []
                for k in self.series! {
                    tmp.append(k.toMap())
                }
                map["Series"] = tmp
            }
            if self.total != nil {
                map["Total"] = self.total!
            }
            if self.xaxis != nil {
                map["Xaxis"] = self.xaxis?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Percent"] as? [Double] {
                self.percent = value
            }
            if let value = dict["Series"] as? [Any?] {
                var tmp : [DescribeRiskTagsLineChartResponseBody.ResultObject.Series] = []
                for v in value {
                    if v != nil {
                        var model = DescribeRiskTagsLineChartResponseBody.ResultObject.Series()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.series = tmp
            }
            if let value = dict["Total"] as? [Int64] {
                self.total = value
            }
            if let value = dict["Xaxis"] as? [String: Any?] {
                var model = DescribeRiskTagsLineChartResponseBody.ResultObject.Xaxis()
                model.fromMap(value)
                self.xaxis = model
            }
        }
    }
    public var code: String?

    public var httpStatusCode: String?

    public var message: String?

    public var requestId: String?

    public var resultObject: DescribeRiskTagsLineChartResponseBody.ResultObject?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.resultObject?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["ResultObject"] = self.resultObject?.toMap()
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? String {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["ResultObject"] as? [String: Any?] {
            var model = DescribeRiskTagsLineChartResponseBody.ResultObject()
            model.fromMap(value)
            self.resultObject = model
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DescribeRiskTagsLineChartResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeRiskTagsLineChartResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeRiskTagsLineChartResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeRuleBarChartRequest : Tea.TeaModel {
    public var lang: String?

    public var beginTime: Int64?

    public var endTime: Int64?

    public var eventCodes: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.beginTime != nil {
            map["beginTime"] = self.beginTime!
        }
        if self.endTime != nil {
            map["endTime"] = self.endTime!
        }
        if self.eventCodes != nil {
            map["eventCodes"] = self.eventCodes!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["beginTime"] as? Int64 {
            self.beginTime = value
        }
        if let value = dict["endTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["eventCodes"] as? String {
            self.eventCodes = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeRuleBarChartResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public class Series : Tea.TeaModel {
            public class Data : Tea.TeaModel {
                public var eventName: String?

                public var num: Int64?

                public var ruleName: String?

                public var status: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.eventName != nil {
                        map["eventName"] = self.eventName!
                    }
                    if self.num != nil {
                        map["num"] = self.num!
                    }
                    if self.ruleName != nil {
                        map["ruleName"] = self.ruleName!
                    }
                    if self.status != nil {
                        map["status"] = self.status!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["eventName"] as? String {
                        self.eventName = value
                    }
                    if let value = dict["num"] as? Int64 {
                        self.num = value
                    }
                    if let value = dict["ruleName"] as? String {
                        self.ruleName = value
                    }
                    if let value = dict["status"] as? String {
                        self.status = value
                    }
                }
            }
            public var data: [DescribeRuleBarChartResponseBody.ResultObject.Series.Data]?

            public var type: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.data != nil {
                    var tmp : [Any] = []
                    for k in self.data! {
                        tmp.append(k.toMap())
                    }
                    map["data"] = tmp
                }
                if self.type != nil {
                    map["type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["data"] as? [Any?] {
                    var tmp : [DescribeRuleBarChartResponseBody.ResultObject.Series.Data] = []
                    for v in value {
                        if v != nil {
                            var model = DescribeRuleBarChartResponseBody.ResultObject.Series.Data()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.data = tmp
                }
                if let value = dict["type"] as? String {
                    self.type = value
                }
            }
        }
        public class Yaxis : Tea.TeaModel {
            public var data: [String]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.data != nil {
                    map["data"] = self.data!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["data"] as? [String] {
                    self.data = value
                }
            }
        }
        public var series: [DescribeRuleBarChartResponseBody.ResultObject.Series]?

        public var yaxis: DescribeRuleBarChartResponseBody.ResultObject.Yaxis?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.yaxis?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.series != nil {
                var tmp : [Any] = []
                for k in self.series! {
                    tmp.append(k.toMap())
                }
                map["series"] = tmp
            }
            if self.yaxis != nil {
                map["yaxis"] = self.yaxis?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["series"] as? [Any?] {
                var tmp : [DescribeRuleBarChartResponseBody.ResultObject.Series] = []
                for v in value {
                    if v != nil {
                        var model = DescribeRuleBarChartResponseBody.ResultObject.Series()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.series = tmp
            }
            if let value = dict["yaxis"] as? [String: Any?] {
                var model = DescribeRuleBarChartResponseBody.ResultObject.Yaxis()
                model.fromMap(value)
                self.yaxis = model
            }
        }
    }
    public var code: String?

    public var httpStatusCode: String?

    public var message: String?

    public var requestId: String?

    public var resultObject: DescribeRuleBarChartResponseBody.ResultObject?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.resultObject?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["httpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject?.toMap()
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["httpStatusCode"] as? String {
            self.httpStatusCode = value
        }
        if let value = dict["message"] as? String {
            self.message = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? [String: Any?] {
            var model = DescribeRuleBarChartResponseBody.ResultObject()
            model.fromMap(value)
            self.resultObject = model
        }
        if let value = dict["success"] as? Bool {
            self.success = value
        }
    }
}

public class DescribeRuleBarChartResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeRuleBarChartResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeRuleBarChartResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeRuleCountByUserIdRequest : Tea.TeaModel {
    public var lang: String?

    public var createType: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.createType != nil {
            map["createType"] = self.createType!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["createType"] as? String {
            self.createType = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeRuleCountByUserIdResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public var limit: Bool?

        public var maxTotalItem: Int32?

        public var totalItem: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.limit != nil {
                map["limit"] = self.limit!
            }
            if self.maxTotalItem != nil {
                map["maxTotalItem"] = self.maxTotalItem!
            }
            if self.totalItem != nil {
                map["totalItem"] = self.totalItem!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["limit"] as? Bool {
                self.limit = value
            }
            if let value = dict["maxTotalItem"] as? Int32 {
                self.maxTotalItem = value
            }
            if let value = dict["totalItem"] as? Int32 {
                self.totalItem = value
            }
        }
    }
    public var requestId: String?

    public var resultObject: DescribeRuleCountByUserIdResponseBody.ResultObject?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.resultObject?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? [String: Any?] {
            var model = DescribeRuleCountByUserIdResponseBody.ResultObject()
            model.fromMap(value)
            self.resultObject = model
        }
    }
}

public class DescribeRuleCountByUserIdResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeRuleCountByUserIdResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeRuleCountByUserIdResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeRuleDetailByRuleIdRequest : Tea.TeaModel {
    public var lang: String?

    public var consoleRuleId: Int64?

    public var regId: String?

    public var ruleId: String?

    public var ruleVersionId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.consoleRuleId != nil {
            map["consoleRuleId"] = self.consoleRuleId!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.ruleId != nil {
            map["ruleId"] = self.ruleId!
        }
        if self.ruleVersionId != nil {
            map["ruleVersionId"] = self.ruleVersionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["consoleRuleId"] as? Int64 {
            self.consoleRuleId = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["ruleId"] as? String {
            self.ruleId = value
        }
        if let value = dict["ruleVersionId"] as? Int64 {
            self.ruleVersionId = value
        }
    }
}

public class DescribeRuleDetailByRuleIdResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public var authType: String?

        public var bizVersion: String?

        public var consoleRuleId: Int64?

        public var createType: String?

        public var eventCode: String?

        public var eventName: String?

        public var gmtCreate: Int64?

        public var gmtModified: Int64?

        public var logicExpression: String?

        public var mainEventCode: String?

        public var memo: String?

        public var ruleActionMap: [String: Any]?

        public var ruleActions: String?

        public var ruleAuthType: String?

        public var ruleBody: String?

        public var ruleExpressions: String?

        public var ruleId: String?

        public var ruleName: String?

        public var ruleStatus: String?

        public var ruleType: String?

        public var ruleVersionId: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.authType != nil {
                map["authType"] = self.authType!
            }
            if self.bizVersion != nil {
                map["bizVersion"] = self.bizVersion!
            }
            if self.consoleRuleId != nil {
                map["consoleRuleId"] = self.consoleRuleId!
            }
            if self.createType != nil {
                map["createType"] = self.createType!
            }
            if self.eventCode != nil {
                map["eventCode"] = self.eventCode!
            }
            if self.eventName != nil {
                map["eventName"] = self.eventName!
            }
            if self.gmtCreate != nil {
                map["gmtCreate"] = self.gmtCreate!
            }
            if self.gmtModified != nil {
                map["gmtModified"] = self.gmtModified!
            }
            if self.logicExpression != nil {
                map["logicExpression"] = self.logicExpression!
            }
            if self.mainEventCode != nil {
                map["mainEventCode"] = self.mainEventCode!
            }
            if self.memo != nil {
                map["memo"] = self.memo!
            }
            if self.ruleActionMap != nil {
                map["ruleActionMap"] = self.ruleActionMap!
            }
            if self.ruleActions != nil {
                map["ruleActions"] = self.ruleActions!
            }
            if self.ruleAuthType != nil {
                map["ruleAuthType"] = self.ruleAuthType!
            }
            if self.ruleBody != nil {
                map["ruleBody"] = self.ruleBody!
            }
            if self.ruleExpressions != nil {
                map["ruleExpressions"] = self.ruleExpressions!
            }
            if self.ruleId != nil {
                map["ruleId"] = self.ruleId!
            }
            if self.ruleName != nil {
                map["ruleName"] = self.ruleName!
            }
            if self.ruleStatus != nil {
                map["ruleStatus"] = self.ruleStatus!
            }
            if self.ruleType != nil {
                map["ruleType"] = self.ruleType!
            }
            if self.ruleVersionId != nil {
                map["ruleVersionId"] = self.ruleVersionId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["authType"] as? String {
                self.authType = value
            }
            if let value = dict["bizVersion"] as? String {
                self.bizVersion = value
            }
            if let value = dict["consoleRuleId"] as? Int64 {
                self.consoleRuleId = value
            }
            if let value = dict["createType"] as? String {
                self.createType = value
            }
            if let value = dict["eventCode"] as? String {
                self.eventCode = value
            }
            if let value = dict["eventName"] as? String {
                self.eventName = value
            }
            if let value = dict["gmtCreate"] as? Int64 {
                self.gmtCreate = value
            }
            if let value = dict["gmtModified"] as? Int64 {
                self.gmtModified = value
            }
            if let value = dict["logicExpression"] as? String {
                self.logicExpression = value
            }
            if let value = dict["mainEventCode"] as? String {
                self.mainEventCode = value
            }
            if let value = dict["memo"] as? String {
                self.memo = value
            }
            if let value = dict["ruleActionMap"] as? [String: Any] {
                self.ruleActionMap = value
            }
            if let value = dict["ruleActions"] as? String {
                self.ruleActions = value
            }
            if let value = dict["ruleAuthType"] as? String {
                self.ruleAuthType = value
            }
            if let value = dict["ruleBody"] as? String {
                self.ruleBody = value
            }
            if let value = dict["ruleExpressions"] as? String {
                self.ruleExpressions = value
            }
            if let value = dict["ruleId"] as? String {
                self.ruleId = value
            }
            if let value = dict["ruleName"] as? String {
                self.ruleName = value
            }
            if let value = dict["ruleStatus"] as? String {
                self.ruleStatus = value
            }
            if let value = dict["ruleType"] as? String {
                self.ruleType = value
            }
            if let value = dict["ruleVersionId"] as? Int64 {
                self.ruleVersionId = value
            }
        }
    }
    public var requestId: String?

    public var resultObject: DescribeRuleDetailByRuleIdResponseBody.ResultObject?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.resultObject?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? [String: Any?] {
            var model = DescribeRuleDetailByRuleIdResponseBody.ResultObject()
            model.fromMap(value)
            self.resultObject = model
        }
    }
}

public class DescribeRuleDetailByRuleIdResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeRuleDetailByRuleIdResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeRuleDetailByRuleIdResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeRuleHitRequest : Tea.TeaModel {
    public var lang: String?

    public var regId: String?

    public var requestTime: Int64?

    public var ruleId: String?

    public var ruleSnapshotId: String?

    public var sRequestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.requestTime != nil {
            map["requestTime"] = self.requestTime!
        }
        if self.ruleId != nil {
            map["ruleId"] = self.ruleId!
        }
        if self.ruleSnapshotId != nil {
            map["ruleSnapshotId"] = self.ruleSnapshotId!
        }
        if self.sRequestId != nil {
            map["sRequestId"] = self.sRequestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["requestTime"] as? Int64 {
            self.requestTime = value
        }
        if let value = dict["ruleId"] as? String {
            self.ruleId = value
        }
        if let value = dict["ruleSnapshotId"] as? String {
            self.ruleSnapshotId = value
        }
        if let value = dict["sRequestId"] as? String {
            self.sRequestId = value
        }
    }
}

public class DescribeRuleHitResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: [String: Any]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? [String: Any] {
            self.resultObject = value
        }
    }
}

public class DescribeRuleHitResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeRuleHitResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeRuleHitResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeRuleListByEventCodesListRequest : Tea.TeaModel {
    public var lang: String?

    public var eventCodes: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.eventCodes != nil {
            map["eventCodes"] = self.eventCodes!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["eventCodes"] as? String {
            self.eventCodes = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeRuleListByEventCodesListResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public var ruleId: String?

        public var ruleName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.ruleId != nil {
                map["ruleId"] = self.ruleId!
            }
            if self.ruleName != nil {
                map["ruleName"] = self.ruleName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ruleId"] as? String {
                self.ruleId = value
            }
            if let value = dict["ruleName"] as? String {
                self.ruleName = value
            }
        }
    }
    public var requestId: String?

    public var resultObject: [DescribeRuleListByEventCodesListResponseBody.ResultObject]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            var tmp : [Any] = []
            for k in self.resultObject! {
                tmp.append(k.toMap())
            }
            map["resultObject"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? [Any?] {
            var tmp : [DescribeRuleListByEventCodesListResponseBody.ResultObject] = []
            for v in value {
                if v != nil {
                    var model = DescribeRuleListByEventCodesListResponseBody.ResultObject()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.resultObject = tmp
        }
    }
}

public class DescribeRuleListByEventCodesListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeRuleListByEventCodesListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeRuleListByEventCodesListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeRulePageListRequest : Tea.TeaModel {
    public var lang: String?

    public var createType: String?

    public var currentPage: String?

    public var eventCode: String?

    public var pageSize: String?

    public var regId: String?

    public var ruleAuthType: String?

    public var ruleName: String?

    public var ruleStatus: String?

    public var sort: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.createType != nil {
            map["createType"] = self.createType!
        }
        if self.currentPage != nil {
            map["currentPage"] = self.currentPage!
        }
        if self.eventCode != nil {
            map["eventCode"] = self.eventCode!
        }
        if self.pageSize != nil {
            map["pageSize"] = self.pageSize!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.ruleAuthType != nil {
            map["ruleAuthType"] = self.ruleAuthType!
        }
        if self.ruleName != nil {
            map["ruleName"] = self.ruleName!
        }
        if self.ruleStatus != nil {
            map["ruleStatus"] = self.ruleStatus!
        }
        if self.sort != nil {
            map["sort"] = self.sort!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["createType"] as? String {
            self.createType = value
        }
        if let value = dict["currentPage"] as? String {
            self.currentPage = value
        }
        if let value = dict["eventCode"] as? String {
            self.eventCode = value
        }
        if let value = dict["pageSize"] as? String {
            self.pageSize = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["ruleAuthType"] as? String {
            self.ruleAuthType = value
        }
        if let value = dict["ruleName"] as? String {
            self.ruleName = value
        }
        if let value = dict["ruleStatus"] as? String {
            self.ruleStatus = value
        }
        if let value = dict["sort"] as? String {
            self.sort = value
        }
    }
}

public class DescribeRulePageListResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public class ConsoleAudit : Tea.TeaModel {
            public var applyUserId: String?

            public var applyUserName: String?

            public var auditMsg: String?

            public var auditRealUserId: String?

            public var auditRealUserName: String?

            public var auditRemark: String?

            public var auditStatus: String?

            public var auditTime: Int64?

            public var auditUserId: String?

            public var auditUserName: String?

            public var gmtCreate: Int64?

            public var id: Int64?

            public var relationExt: String?

            public var relationId: Int64?

            public var relationName: String?

            public var relationType: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.applyUserId != nil {
                    map["applyUserId"] = self.applyUserId!
                }
                if self.applyUserName != nil {
                    map["applyUserName"] = self.applyUserName!
                }
                if self.auditMsg != nil {
                    map["auditMsg"] = self.auditMsg!
                }
                if self.auditRealUserId != nil {
                    map["auditRealUserId"] = self.auditRealUserId!
                }
                if self.auditRealUserName != nil {
                    map["auditRealUserName"] = self.auditRealUserName!
                }
                if self.auditRemark != nil {
                    map["auditRemark"] = self.auditRemark!
                }
                if self.auditStatus != nil {
                    map["auditStatus"] = self.auditStatus!
                }
                if self.auditTime != nil {
                    map["auditTime"] = self.auditTime!
                }
                if self.auditUserId != nil {
                    map["auditUserId"] = self.auditUserId!
                }
                if self.auditUserName != nil {
                    map["auditUserName"] = self.auditUserName!
                }
                if self.gmtCreate != nil {
                    map["gmtCreate"] = self.gmtCreate!
                }
                if self.id != nil {
                    map["id"] = self.id!
                }
                if self.relationExt != nil {
                    map["relationExt"] = self.relationExt!
                }
                if self.relationId != nil {
                    map["relationId"] = self.relationId!
                }
                if self.relationName != nil {
                    map["relationName"] = self.relationName!
                }
                if self.relationType != nil {
                    map["relationType"] = self.relationType!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["applyUserId"] as? String {
                    self.applyUserId = value
                }
                if let value = dict["applyUserName"] as? String {
                    self.applyUserName = value
                }
                if let value = dict["auditMsg"] as? String {
                    self.auditMsg = value
                }
                if let value = dict["auditRealUserId"] as? String {
                    self.auditRealUserId = value
                }
                if let value = dict["auditRealUserName"] as? String {
                    self.auditRealUserName = value
                }
                if let value = dict["auditRemark"] as? String {
                    self.auditRemark = value
                }
                if let value = dict["auditStatus"] as? String {
                    self.auditStatus = value
                }
                if let value = dict["auditTime"] as? Int64 {
                    self.auditTime = value
                }
                if let value = dict["auditUserId"] as? String {
                    self.auditUserId = value
                }
                if let value = dict["auditUserName"] as? String {
                    self.auditUserName = value
                }
                if let value = dict["gmtCreate"] as? Int64 {
                    self.gmtCreate = value
                }
                if let value = dict["id"] as? Int64 {
                    self.id = value
                }
                if let value = dict["relationExt"] as? String {
                    self.relationExt = value
                }
                if let value = dict["relationId"] as? Int64 {
                    self.relationId = value
                }
                if let value = dict["relationName"] as? String {
                    self.relationName = value
                }
                if let value = dict["relationType"] as? String {
                    self.relationType = value
                }
            }
        }
        public var authType: String?

        public var consoleAudit: DescribeRulePageListResponseBody.ResultObject.ConsoleAudit?

        public var eventCode: String?

        public var eventName: String?

        public var eventType: String?

        public var externalRuleName: String?

        public var gmtCreate: Int64?

        public var gmtModified: Int64?

        public var hasNewVersion: Bool?

        public var id: Int64?

        public var mainRuleId: String?

        public var priority: Int64?

        public var ruleAuthType: String?

        public var ruleId: String?

        public var ruleMemo: String?

        public var ruleName: String?

        public var ruleStatus: String?

        public var ruleType: String?

        public var ruleVersionId: Int64?

        public var templateId: Int64?

        public var version: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.consoleAudit?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.authType != nil {
                map["authType"] = self.authType!
            }
            if self.consoleAudit != nil {
                map["consoleAudit"] = self.consoleAudit?.toMap()
            }
            if self.eventCode != nil {
                map["eventCode"] = self.eventCode!
            }
            if self.eventName != nil {
                map["eventName"] = self.eventName!
            }
            if self.eventType != nil {
                map["eventType"] = self.eventType!
            }
            if self.externalRuleName != nil {
                map["externalRuleName"] = self.externalRuleName!
            }
            if self.gmtCreate != nil {
                map["gmtCreate"] = self.gmtCreate!
            }
            if self.gmtModified != nil {
                map["gmtModified"] = self.gmtModified!
            }
            if self.hasNewVersion != nil {
                map["hasNewVersion"] = self.hasNewVersion!
            }
            if self.id != nil {
                map["id"] = self.id!
            }
            if self.mainRuleId != nil {
                map["mainRuleId"] = self.mainRuleId!
            }
            if self.priority != nil {
                map["priority"] = self.priority!
            }
            if self.ruleAuthType != nil {
                map["ruleAuthType"] = self.ruleAuthType!
            }
            if self.ruleId != nil {
                map["ruleId"] = self.ruleId!
            }
            if self.ruleMemo != nil {
                map["ruleMemo"] = self.ruleMemo!
            }
            if self.ruleName != nil {
                map["ruleName"] = self.ruleName!
            }
            if self.ruleStatus != nil {
                map["ruleStatus"] = self.ruleStatus!
            }
            if self.ruleType != nil {
                map["ruleType"] = self.ruleType!
            }
            if self.ruleVersionId != nil {
                map["ruleVersionId"] = self.ruleVersionId!
            }
            if self.templateId != nil {
                map["templateId"] = self.templateId!
            }
            if self.version != nil {
                map["version"] = self.version!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["authType"] as? String {
                self.authType = value
            }
            if let value = dict["consoleAudit"] as? [String: Any?] {
                var model = DescribeRulePageListResponseBody.ResultObject.ConsoleAudit()
                model.fromMap(value)
                self.consoleAudit = model
            }
            if let value = dict["eventCode"] as? String {
                self.eventCode = value
            }
            if let value = dict["eventName"] as? String {
                self.eventName = value
            }
            if let value = dict["eventType"] as? String {
                self.eventType = value
            }
            if let value = dict["externalRuleName"] as? String {
                self.externalRuleName = value
            }
            if let value = dict["gmtCreate"] as? Int64 {
                self.gmtCreate = value
            }
            if let value = dict["gmtModified"] as? Int64 {
                self.gmtModified = value
            }
            if let value = dict["hasNewVersion"] as? Bool {
                self.hasNewVersion = value
            }
            if let value = dict["id"] as? Int64 {
                self.id = value
            }
            if let value = dict["mainRuleId"] as? String {
                self.mainRuleId = value
            }
            if let value = dict["priority"] as? Int64 {
                self.priority = value
            }
            if let value = dict["ruleAuthType"] as? String {
                self.ruleAuthType = value
            }
            if let value = dict["ruleId"] as? String {
                self.ruleId = value
            }
            if let value = dict["ruleMemo"] as? String {
                self.ruleMemo = value
            }
            if let value = dict["ruleName"] as? String {
                self.ruleName = value
            }
            if let value = dict["ruleStatus"] as? String {
                self.ruleStatus = value
            }
            if let value = dict["ruleType"] as? String {
                self.ruleType = value
            }
            if let value = dict["ruleVersionId"] as? Int64 {
                self.ruleVersionId = value
            }
            if let value = dict["templateId"] as? Int64 {
                self.templateId = value
            }
            if let value = dict["version"] as? Int32 {
                self.version = value
            }
        }
    }
    public var currentPage: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var resultObject: [DescribeRulePageListResponseBody.ResultObject]?

    public var totalItem: Int32?

    public var totalPage: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.currentPage != nil {
            map["currentPage"] = self.currentPage!
        }
        if self.pageSize != nil {
            map["pageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.resultObject != nil {
            var tmp : [Any] = []
            for k in self.resultObject! {
                tmp.append(k.toMap())
            }
            map["resultObject"] = tmp
        }
        if self.totalItem != nil {
            map["totalItem"] = self.totalItem!
        }
        if self.totalPage != nil {
            map["totalPage"] = self.totalPage!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["currentPage"] as? Int32 {
            self.currentPage = value
        }
        if let value = dict["pageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? [Any?] {
            var tmp : [DescribeRulePageListResponseBody.ResultObject] = []
            for v in value {
                if v != nil {
                    var model = DescribeRulePageListResponseBody.ResultObject()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.resultObject = tmp
        }
        if let value = dict["totalItem"] as? Int32 {
            self.totalItem = value
        }
        if let value = dict["totalPage"] as? Int32 {
            self.totalPage = value
        }
    }
}

public class DescribeRulePageListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeRulePageListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeRulePageListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeRuleSnapshotRequest : Tea.TeaModel {
    public var lang: String?

    public var regId: String?

    public var ruleId: String?

    public var snapshotVersion: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.ruleId != nil {
            map["ruleId"] = self.ruleId!
        }
        if self.snapshotVersion != nil {
            map["snapshotVersion"] = self.snapshotVersion!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["ruleId"] as? String {
            self.ruleId = value
        }
        if let value = dict["snapshotVersion"] as? String {
            self.snapshotVersion = value
        }
    }
}

public class DescribeRuleSnapshotResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public var bizVersion: String?

        public var eventCode: String?

        public var eventName: String?

        public var gmtCreate: Int64?

        public var gmtModified: Int64?

        public var logicExpression: String?

        public var memo: String?

        public var ruleActions: String?

        public var ruleExpressions: String?

        public var ruleId: String?

        public var ruleName: String?

        public var ruleStatus: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.bizVersion != nil {
                map["bizVersion"] = self.bizVersion!
            }
            if self.eventCode != nil {
                map["eventCode"] = self.eventCode!
            }
            if self.eventName != nil {
                map["eventName"] = self.eventName!
            }
            if self.gmtCreate != nil {
                map["gmtCreate"] = self.gmtCreate!
            }
            if self.gmtModified != nil {
                map["gmtModified"] = self.gmtModified!
            }
            if self.logicExpression != nil {
                map["logicExpression"] = self.logicExpression!
            }
            if self.memo != nil {
                map["memo"] = self.memo!
            }
            if self.ruleActions != nil {
                map["ruleActions"] = self.ruleActions!
            }
            if self.ruleExpressions != nil {
                map["ruleExpressions"] = self.ruleExpressions!
            }
            if self.ruleId != nil {
                map["ruleId"] = self.ruleId!
            }
            if self.ruleName != nil {
                map["ruleName"] = self.ruleName!
            }
            if self.ruleStatus != nil {
                map["ruleStatus"] = self.ruleStatus!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["bizVersion"] as? String {
                self.bizVersion = value
            }
            if let value = dict["eventCode"] as? String {
                self.eventCode = value
            }
            if let value = dict["eventName"] as? String {
                self.eventName = value
            }
            if let value = dict["gmtCreate"] as? Int64 {
                self.gmtCreate = value
            }
            if let value = dict["gmtModified"] as? Int64 {
                self.gmtModified = value
            }
            if let value = dict["logicExpression"] as? String {
                self.logicExpression = value
            }
            if let value = dict["memo"] as? String {
                self.memo = value
            }
            if let value = dict["ruleActions"] as? String {
                self.ruleActions = value
            }
            if let value = dict["ruleExpressions"] as? String {
                self.ruleExpressions = value
            }
            if let value = dict["ruleId"] as? String {
                self.ruleId = value
            }
            if let value = dict["ruleName"] as? String {
                self.ruleName = value
            }
            if let value = dict["ruleStatus"] as? String {
                self.ruleStatus = value
            }
        }
    }
    public var requestId: String?

    public var resultObject: DescribeRuleSnapshotResponseBody.ResultObject?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.resultObject?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? [String: Any?] {
            var model = DescribeRuleSnapshotResponseBody.ResultObject()
            model.fromMap(value)
            self.resultObject = model
        }
    }
}

public class DescribeRuleSnapshotResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeRuleSnapshotResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeRuleSnapshotResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeRuleVersionListRequest : Tea.TeaModel {
    public var lang: String?

    public var consoleRuleId: Int64?

    public var currentPage: Int32?

    public var pageSize: Int32?

    public var regId: String?

    public var ruleId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.consoleRuleId != nil {
            map["consoleRuleId"] = self.consoleRuleId!
        }
        if self.currentPage != nil {
            map["currentPage"] = self.currentPage!
        }
        if self.pageSize != nil {
            map["pageSize"] = self.pageSize!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.ruleId != nil {
            map["ruleId"] = self.ruleId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["consoleRuleId"] as? Int64 {
            self.consoleRuleId = value
        }
        if let value = dict["currentPage"] as? Int32 {
            self.currentPage = value
        }
        if let value = dict["pageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["ruleId"] as? String {
            self.ruleId = value
        }
    }
}

public class DescribeRuleVersionListResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public class ConsoleAudit : Tea.TeaModel {
            public var applyUserId: String?

            public var applyUserName: String?

            public var auditMsg: String?

            public var auditRealUserId: String?

            public var auditRealUserName: String?

            public var auditRemark: String?

            public var auditStatus: String?

            public var auditTime: Int64?

            public var auditUserId: String?

            public var auditUserName: String?

            public var gmtCreate: Int64?

            public var id: Int64?

            public var relationExt: String?

            public var relationId: Int64?

            public var relationName: String?

            public var relationType: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.applyUserId != nil {
                    map["applyUserId"] = self.applyUserId!
                }
                if self.applyUserName != nil {
                    map["applyUserName"] = self.applyUserName!
                }
                if self.auditMsg != nil {
                    map["auditMsg"] = self.auditMsg!
                }
                if self.auditRealUserId != nil {
                    map["auditRealUserId"] = self.auditRealUserId!
                }
                if self.auditRealUserName != nil {
                    map["auditRealUserName"] = self.auditRealUserName!
                }
                if self.auditRemark != nil {
                    map["auditRemark"] = self.auditRemark!
                }
                if self.auditStatus != nil {
                    map["auditStatus"] = self.auditStatus!
                }
                if self.auditTime != nil {
                    map["auditTime"] = self.auditTime!
                }
                if self.auditUserId != nil {
                    map["auditUserId"] = self.auditUserId!
                }
                if self.auditUserName != nil {
                    map["auditUserName"] = self.auditUserName!
                }
                if self.gmtCreate != nil {
                    map["gmtCreate"] = self.gmtCreate!
                }
                if self.id != nil {
                    map["id"] = self.id!
                }
                if self.relationExt != nil {
                    map["relationExt"] = self.relationExt!
                }
                if self.relationId != nil {
                    map["relationId"] = self.relationId!
                }
                if self.relationName != nil {
                    map["relationName"] = self.relationName!
                }
                if self.relationType != nil {
                    map["relationType"] = self.relationType!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["applyUserId"] as? String {
                    self.applyUserId = value
                }
                if let value = dict["applyUserName"] as? String {
                    self.applyUserName = value
                }
                if let value = dict["auditMsg"] as? String {
                    self.auditMsg = value
                }
                if let value = dict["auditRealUserId"] as? String {
                    self.auditRealUserId = value
                }
                if let value = dict["auditRealUserName"] as? String {
                    self.auditRealUserName = value
                }
                if let value = dict["auditRemark"] as? String {
                    self.auditRemark = value
                }
                if let value = dict["auditStatus"] as? String {
                    self.auditStatus = value
                }
                if let value = dict["auditTime"] as? Int64 {
                    self.auditTime = value
                }
                if let value = dict["auditUserId"] as? String {
                    self.auditUserId = value
                }
                if let value = dict["auditUserName"] as? String {
                    self.auditUserName = value
                }
                if let value = dict["gmtCreate"] as? Int64 {
                    self.gmtCreate = value
                }
                if let value = dict["id"] as? Int64 {
                    self.id = value
                }
                if let value = dict["relationExt"] as? String {
                    self.relationExt = value
                }
                if let value = dict["relationId"] as? Int64 {
                    self.relationId = value
                }
                if let value = dict["relationName"] as? String {
                    self.relationName = value
                }
                if let value = dict["relationType"] as? String {
                    self.relationType = value
                }
            }
        }
        public var consoleAudit: DescribeRuleVersionListResponseBody.ResultObject.ConsoleAudit?

        public var consoleRuleId: Int64?

        public var consoleRuleMemo: String?

        public var consoleRuleName: String?

        public var eventCode: String?

        public var eventType: String?

        public var gmtCreate: Int64?

        public var gmtModified: Int64?

        public var id: Int64?

        public var lastOperator: String?

        public var priority: Int64?

        public var ruleId: String?

        public var ruleStatus: String?

        public var ruleType: String?

        public var version: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.consoleAudit?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.consoleAudit != nil {
                map["consoleAudit"] = self.consoleAudit?.toMap()
            }
            if self.consoleRuleId != nil {
                map["consoleRuleId"] = self.consoleRuleId!
            }
            if self.consoleRuleMemo != nil {
                map["consoleRuleMemo"] = self.consoleRuleMemo!
            }
            if self.consoleRuleName != nil {
                map["consoleRuleName"] = self.consoleRuleName!
            }
            if self.eventCode != nil {
                map["eventCode"] = self.eventCode!
            }
            if self.eventType != nil {
                map["eventType"] = self.eventType!
            }
            if self.gmtCreate != nil {
                map["gmtCreate"] = self.gmtCreate!
            }
            if self.gmtModified != nil {
                map["gmtModified"] = self.gmtModified!
            }
            if self.id != nil {
                map["id"] = self.id!
            }
            if self.lastOperator != nil {
                map["lastOperator"] = self.lastOperator!
            }
            if self.priority != nil {
                map["priority"] = self.priority!
            }
            if self.ruleId != nil {
                map["ruleId"] = self.ruleId!
            }
            if self.ruleStatus != nil {
                map["ruleStatus"] = self.ruleStatus!
            }
            if self.ruleType != nil {
                map["ruleType"] = self.ruleType!
            }
            if self.version != nil {
                map["version"] = self.version!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["consoleAudit"] as? [String: Any?] {
                var model = DescribeRuleVersionListResponseBody.ResultObject.ConsoleAudit()
                model.fromMap(value)
                self.consoleAudit = model
            }
            if let value = dict["consoleRuleId"] as? Int64 {
                self.consoleRuleId = value
            }
            if let value = dict["consoleRuleMemo"] as? String {
                self.consoleRuleMemo = value
            }
            if let value = dict["consoleRuleName"] as? String {
                self.consoleRuleName = value
            }
            if let value = dict["eventCode"] as? String {
                self.eventCode = value
            }
            if let value = dict["eventType"] as? String {
                self.eventType = value
            }
            if let value = dict["gmtCreate"] as? Int64 {
                self.gmtCreate = value
            }
            if let value = dict["gmtModified"] as? Int64 {
                self.gmtModified = value
            }
            if let value = dict["id"] as? Int64 {
                self.id = value
            }
            if let value = dict["lastOperator"] as? String {
                self.lastOperator = value
            }
            if let value = dict["priority"] as? Int64 {
                self.priority = value
            }
            if let value = dict["ruleId"] as? String {
                self.ruleId = value
            }
            if let value = dict["ruleStatus"] as? String {
                self.ruleStatus = value
            }
            if let value = dict["ruleType"] as? String {
                self.ruleType = value
            }
            if let value = dict["version"] as? Int64 {
                self.version = value
            }
        }
    }
    public var currentPage: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var resultObject: [DescribeRuleVersionListResponseBody.ResultObject]?

    public var totalItem: Int32?

    public var totalPage: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.currentPage != nil {
            map["currentPage"] = self.currentPage!
        }
        if self.pageSize != nil {
            map["pageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.resultObject != nil {
            var tmp : [Any] = []
            for k in self.resultObject! {
                tmp.append(k.toMap())
            }
            map["resultObject"] = tmp
        }
        if self.totalItem != nil {
            map["totalItem"] = self.totalItem!
        }
        if self.totalPage != nil {
            map["totalPage"] = self.totalPage!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["currentPage"] as? Int32 {
            self.currentPage = value
        }
        if let value = dict["pageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? [Any?] {
            var tmp : [DescribeRuleVersionListResponseBody.ResultObject] = []
            for v in value {
                if v != nil {
                    var model = DescribeRuleVersionListResponseBody.ResultObject()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.resultObject = tmp
        }
        if let value = dict["totalItem"] as? Int32 {
            self.totalItem = value
        }
        if let value = dict["totalPage"] as? Int32 {
            self.totalPage = value
        }
    }
}

public class DescribeRuleVersionListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeRuleVersionListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeRuleVersionListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeSDKDownloadListRequest : Tea.TeaModel {
    public var lang: String?

    public var deviceType: String?

    public var listType: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.deviceType != nil {
            map["deviceType"] = self.deviceType!
        }
        if self.listType != nil {
            map["listType"] = self.listType!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["deviceType"] as? String {
            self.deviceType = value
        }
        if let value = dict["listType"] as? String {
            self.listType = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeSDKDownloadListResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public var description_: String?

        public var developer: String?

        public var deviceType: String?

        public var downloadUrl: String?

        public var md5: String?

        public var packageName: String?

        public var privacyLink: String?

        public var pushTime: String?

        public var sdkVersion: String?

        public var size: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.description_ != nil {
                map["description"] = self.description_!
            }
            if self.developer != nil {
                map["developer"] = self.developer!
            }
            if self.deviceType != nil {
                map["deviceType"] = self.deviceType!
            }
            if self.downloadUrl != nil {
                map["downloadUrl"] = self.downloadUrl!
            }
            if self.md5 != nil {
                map["md5"] = self.md5!
            }
            if self.packageName != nil {
                map["packageName"] = self.packageName!
            }
            if self.privacyLink != nil {
                map["privacyLink"] = self.privacyLink!
            }
            if self.pushTime != nil {
                map["pushTime"] = self.pushTime!
            }
            if self.sdkVersion != nil {
                map["sdkVersion"] = self.sdkVersion!
            }
            if self.size != nil {
                map["size"] = self.size!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["description"] as? String {
                self.description_ = value
            }
            if let value = dict["developer"] as? String {
                self.developer = value
            }
            if let value = dict["deviceType"] as? String {
                self.deviceType = value
            }
            if let value = dict["downloadUrl"] as? String {
                self.downloadUrl = value
            }
            if let value = dict["md5"] as? String {
                self.md5 = value
            }
            if let value = dict["packageName"] as? String {
                self.packageName = value
            }
            if let value = dict["privacyLink"] as? String {
                self.privacyLink = value
            }
            if let value = dict["pushTime"] as? String {
                self.pushTime = value
            }
            if let value = dict["sdkVersion"] as? String {
                self.sdkVersion = value
            }
            if let value = dict["size"] as? String {
                self.size = value
            }
        }
    }
    public var requestId: String?

    public var resultObject: [DescribeSDKDownloadListResponseBody.ResultObject]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            var tmp : [Any] = []
            for k in self.resultObject! {
                tmp.append(k.toMap())
            }
            map["resultObject"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? [Any?] {
            var tmp : [DescribeSDKDownloadListResponseBody.ResultObject] = []
            for v in value {
                if v != nil {
                    var model = DescribeSDKDownloadListResponseBody.ResultObject()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.resultObject = tmp
        }
    }
}

public class DescribeSDKDownloadListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeSDKDownloadListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeSDKDownloadListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeSafConsoleRequest : Tea.TeaModel {
    public var lang: String?

    public var content: String?

    public var service: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.content != nil {
            map["content"] = self.content!
        }
        if self.service != nil {
            map["service"] = self.service!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["content"] as? String {
            self.content = value
        }
        if let value = dict["service"] as? String {
            self.service = value
        }
    }
}

public class DescribeSafConsoleResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var bizData: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.bizData != nil {
            map["bizData"] = self.bizData!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["bizData"] as? [String] {
            self.bizData = value
        }
    }
}

public class DescribeSafConsoleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeSafConsoleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeSafConsoleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeSafDeOrderRequest : Tea.TeaModel {
    public var lang: String?

    public var currentPage: Int32?

    public var endDate: String?

    public var pageSize: Int32?

    public var regId: String?

    public var startDate: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.currentPage != nil {
            map["currentPage"] = self.currentPage!
        }
        if self.endDate != nil {
            map["endDate"] = self.endDate!
        }
        if self.pageSize != nil {
            map["pageSize"] = self.pageSize!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.startDate != nil {
            map["startDate"] = self.startDate!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["currentPage"] as? Int32 {
            self.currentPage = value
        }
        if let value = dict["endDate"] as? String {
            self.endDate = value
        }
        if let value = dict["pageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["startDate"] as? String {
            self.startDate = value
        }
    }
}

public class DescribeSafDeOrderResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public var expirationDate: Int64?

        public var openUserType: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.expirationDate != nil {
                map["expirationDate"] = self.expirationDate!
            }
            if self.openUserType != nil {
                map["openUserType"] = self.openUserType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["expirationDate"] as? Int64 {
                self.expirationDate = value
            }
            if let value = dict["openUserType"] as? Int32 {
                self.openUserType = value
            }
        }
    }
    public var requestId: String?

    public var resultObject: DescribeSafDeOrderResponseBody.ResultObject?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.resultObject?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? [String: Any?] {
            var model = DescribeSafDeOrderResponseBody.ResultObject()
            model.fromMap(value)
            self.resultObject = model
        }
    }
}

public class DescribeSafDeOrderResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeSafDeOrderResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeSafDeOrderResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeSafOrderRequest : Tea.TeaModel {
    public var lang: String?

    public var currentPage: Int32?

    public var endDate: String?

    public var exactProductCode: String?

    public var pageSize: Int32?

    public var regId: String?

    public var startDate: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.currentPage != nil {
            map["currentPage"] = self.currentPage!
        }
        if self.endDate != nil {
            map["endDate"] = self.endDate!
        }
        if self.exactProductCode != nil {
            map["exactProductCode"] = self.exactProductCode!
        }
        if self.pageSize != nil {
            map["pageSize"] = self.pageSize!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.startDate != nil {
            map["startDate"] = self.startDate!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["currentPage"] as? Int32 {
            self.currentPage = value
        }
        if let value = dict["endDate"] as? String {
            self.endDate = value
        }
        if let value = dict["exactProductCode"] as? String {
            self.exactProductCode = value
        }
        if let value = dict["pageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["startDate"] as? String {
            self.startDate = value
        }
    }
}

public class DescribeSafOrderResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public var expirationDate: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.expirationDate != nil {
                map["expirationDate"] = self.expirationDate!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["expirationDate"] as? Int64 {
                self.expirationDate = value
            }
        }
    }
    public var requestId: String?

    public var resultObject: DescribeSafOrderResponseBody.ResultObject?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.resultObject?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? [String: Any?] {
            var model = DescribeSafOrderResponseBody.ResultObject()
            model.fromMap(value)
            self.resultObject = model
        }
    }
}

public class DescribeSafOrderResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeSafOrderResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeSafOrderResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeSafStartConfigRequest : Tea.TeaModel {
    public var lang: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeSafStartConfigResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public var deviceTypes: [String]?

        public var eventCodes: [String]?

        public var languages: [String]?

        public var serverRegions: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.deviceTypes != nil {
                map["deviceTypes"] = self.deviceTypes!
            }
            if self.eventCodes != nil {
                map["eventCodes"] = self.eventCodes!
            }
            if self.languages != nil {
                map["languages"] = self.languages!
            }
            if self.serverRegions != nil {
                map["serverRegions"] = self.serverRegions!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["deviceTypes"] as? [String] {
                self.deviceTypes = value
            }
            if let value = dict["eventCodes"] as? [String] {
                self.eventCodes = value
            }
            if let value = dict["languages"] as? [String] {
                self.languages = value
            }
            if let value = dict["serverRegions"] as? [String] {
                self.serverRegions = value
            }
        }
    }
    public var requestId: String?

    public var resultObject: DescribeSafStartConfigResponseBody.ResultObject?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.resultObject?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? [String: Any?] {
            var model = DescribeSafStartConfigResponseBody.ResultObject()
            model.fromMap(value)
            self.resultObject = model
        }
    }
}

public class DescribeSafStartConfigResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeSafStartConfigResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeSafStartConfigResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeSafStartStepsRequest : Tea.TeaModel {
    public var lang: String?

    public var aliyunServer: Bool?

    public var deviceTypesStr: String?

    public var eventCode: String?

    public var language: String?

    public var regId: String?

    public var serverRegion: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.aliyunServer != nil {
            map["aliyunServer"] = self.aliyunServer!
        }
        if self.deviceTypesStr != nil {
            map["deviceTypesStr"] = self.deviceTypesStr!
        }
        if self.eventCode != nil {
            map["eventCode"] = self.eventCode!
        }
        if self.language != nil {
            map["language"] = self.language!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.serverRegion != nil {
            map["serverRegion"] = self.serverRegion!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["aliyunServer"] as? Bool {
            self.aliyunServer = value
        }
        if let value = dict["deviceTypesStr"] as? String {
            self.deviceTypesStr = value
        }
        if let value = dict["eventCode"] as? String {
            self.eventCode = value
        }
        if let value = dict["language"] as? String {
            self.language = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["serverRegion"] as? String {
            self.serverRegion = value
        }
    }
}

public class DescribeSafStartStepsResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public var content: String?

        public var id: String?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.content != nil {
                map["content"] = self.content!
            }
            if self.id != nil {
                map["id"] = self.id!
            }
            if self.type != nil {
                map["type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["content"] as? String {
                self.content = value
            }
            if let value = dict["id"] as? String {
                self.id = value
            }
            if let value = dict["type"] as? String {
                self.type = value
            }
        }
    }
    public var requestId: String?

    public var resultObject: [DescribeSafStartStepsResponseBody.ResultObject]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            var tmp : [Any] = []
            for k in self.resultObject! {
                tmp.append(k.toMap())
            }
            map["resultObject"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? [Any?] {
            var tmp : [DescribeSafStartStepsResponseBody.ResultObject] = []
            for v in value {
                if v != nil {
                    var model = DescribeSafStartStepsResponseBody.ResultObject()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.resultObject = tmp
        }
    }
}

public class DescribeSafStartStepsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeSafStartStepsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeSafStartStepsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeSafTagListRequest : Tea.TeaModel {
    public var lang: String?

    public var tagName: String?

    public var apiId: String?

    public var currentPage: String?

    public var pageSize: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.tagName != nil {
            map["TagName"] = self.tagName!
        }
        if self.apiId != nil {
            map["apiId"] = self.apiId!
        }
        if self.currentPage != nil {
            map["currentPage"] = self.currentPage!
        }
        if self.pageSize != nil {
            map["pageSize"] = self.pageSize!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["TagName"] as? String {
            self.tagName = value
        }
        if let value = dict["apiId"] as? String {
            self.apiId = value
        }
        if let value = dict["currentPage"] as? String {
            self.currentPage = value
        }
        if let value = dict["pageSize"] as? String {
            self.pageSize = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeSafTagListResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public var tagDesc: String?

        public var tagMean: String?

        public var tagName: String?

        public var tagState: String?

        public var tagType: String?

        public var tagUid: String?

        public var updateTime: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tagDesc != nil {
                map["tagDesc"] = self.tagDesc!
            }
            if self.tagMean != nil {
                map["tagMean"] = self.tagMean!
            }
            if self.tagName != nil {
                map["tagName"] = self.tagName!
            }
            if self.tagState != nil {
                map["tagState"] = self.tagState!
            }
            if self.tagType != nil {
                map["tagType"] = self.tagType!
            }
            if self.tagUid != nil {
                map["tagUid"] = self.tagUid!
            }
            if self.updateTime != nil {
                map["updateTime"] = self.updateTime!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tagDesc"] as? String {
                self.tagDesc = value
            }
            if let value = dict["tagMean"] as? String {
                self.tagMean = value
            }
            if let value = dict["tagName"] as? String {
                self.tagName = value
            }
            if let value = dict["tagState"] as? String {
                self.tagState = value
            }
            if let value = dict["tagType"] as? String {
                self.tagType = value
            }
            if let value = dict["tagUid"] as? String {
                self.tagUid = value
            }
            if let value = dict["updateTime"] as? String {
                self.updateTime = value
            }
        }
    }
    public var requestId: String?

    public var currentPage: Int32?

    public var pageSize: Int32?

    public var resultObject: [DescribeSafTagListResponseBody.ResultObject]?

    public var totalItem: Int32?

    public var totalPage: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.currentPage != nil {
            map["currentPage"] = self.currentPage!
        }
        if self.pageSize != nil {
            map["pageSize"] = self.pageSize!
        }
        if self.resultObject != nil {
            var tmp : [Any] = []
            for k in self.resultObject! {
                tmp.append(k.toMap())
            }
            map["resultObject"] = tmp
        }
        if self.totalItem != nil {
            map["totalItem"] = self.totalItem!
        }
        if self.totalPage != nil {
            map["totalPage"] = self.totalPage!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["currentPage"] as? Int32 {
            self.currentPage = value
        }
        if let value = dict["pageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["resultObject"] as? [Any?] {
            var tmp : [DescribeSafTagListResponseBody.ResultObject] = []
            for v in value {
                if v != nil {
                    var model = DescribeSafTagListResponseBody.ResultObject()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.resultObject = tmp
        }
        if let value = dict["totalItem"] as? Int32 {
            self.totalItem = value
        }
        if let value = dict["totalPage"] as? Int32 {
            self.totalPage = value
        }
    }
}

public class DescribeSafTagListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeSafTagListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeSafTagListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeSampleBatchOssPolicyRequest : Tea.TeaModel {
    public var lang: String?

    public var batchName: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.batchName != nil {
            map["batchName"] = self.batchName!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["batchName"] as? String {
            self.batchName = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeSampleBatchOssPolicyResponseBody : Tea.TeaModel {
    public var accessId: String?

    public var host: String?

    public var key: String?

    public var policy: String?

    public var requestId: String?

    public var signature: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.accessId != nil {
            map["AccessId"] = self.accessId!
        }
        if self.host != nil {
            map["Host"] = self.host!
        }
        if self.key != nil {
            map["Key"] = self.key!
        }
        if self.policy != nil {
            map["Policy"] = self.policy!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.signature != nil {
            map["Signature"] = self.signature!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AccessId"] as? String {
            self.accessId = value
        }
        if let value = dict["Host"] as? String {
            self.host = value
        }
        if let value = dict["Key"] as? String {
            self.key = value
        }
        if let value = dict["Policy"] as? String {
            self.policy = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Signature"] as? String {
            self.signature = value
        }
    }
}

public class DescribeSampleBatchOssPolicyResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeSampleBatchOssPolicyResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeSampleBatchOssPolicyResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeSampleDataByBatchUUidPageRequest : Tea.TeaModel {
    public var lang: String?

    public var batchUuid: String?

    public var currentPage: Int32?

    public var dataValue: String?

    public var pageSize: Int32?

    public var regId: String?

    public var updateBeginTime: Int64?

    public var updateEndTime: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.batchUuid != nil {
            map["batchUuid"] = self.batchUuid!
        }
        if self.currentPage != nil {
            map["currentPage"] = self.currentPage!
        }
        if self.dataValue != nil {
            map["dataValue"] = self.dataValue!
        }
        if self.pageSize != nil {
            map["pageSize"] = self.pageSize!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.updateBeginTime != nil {
            map["updateBeginTime"] = self.updateBeginTime!
        }
        if self.updateEndTime != nil {
            map["updateEndTime"] = self.updateEndTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["batchUuid"] as? String {
            self.batchUuid = value
        }
        if let value = dict["currentPage"] as? Int32 {
            self.currentPage = value
        }
        if let value = dict["dataValue"] as? String {
            self.dataValue = value
        }
        if let value = dict["pageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["updateBeginTime"] as? Int64 {
            self.updateBeginTime = value
        }
        if let value = dict["updateEndTime"] as? Int64 {
            self.updateEndTime = value
        }
    }
}

public class DescribeSampleDataByBatchUUidPageResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public var batchName: String?

        public var creator: String?

        public var dataTagType: String?

        public var dataValue: String?

        public var gmtCreate: Int64?

        public var gmtModified: Int64?

        public var lastSourceType: String?

        public var uuid: String?

        public var version: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.batchName != nil {
                map["batchName"] = self.batchName!
            }
            if self.creator != nil {
                map["creator"] = self.creator!
            }
            if self.dataTagType != nil {
                map["dataTagType"] = self.dataTagType!
            }
            if self.dataValue != nil {
                map["dataValue"] = self.dataValue!
            }
            if self.gmtCreate != nil {
                map["gmtCreate"] = self.gmtCreate!
            }
            if self.gmtModified != nil {
                map["gmtModified"] = self.gmtModified!
            }
            if self.lastSourceType != nil {
                map["lastSourceType"] = self.lastSourceType!
            }
            if self.uuid != nil {
                map["uuid"] = self.uuid!
            }
            if self.version != nil {
                map["version"] = self.version!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["batchName"] as? String {
                self.batchName = value
            }
            if let value = dict["creator"] as? String {
                self.creator = value
            }
            if let value = dict["dataTagType"] as? String {
                self.dataTagType = value
            }
            if let value = dict["dataValue"] as? String {
                self.dataValue = value
            }
            if let value = dict["gmtCreate"] as? Int64 {
                self.gmtCreate = value
            }
            if let value = dict["gmtModified"] as? Int64 {
                self.gmtModified = value
            }
            if let value = dict["lastSourceType"] as? String {
                self.lastSourceType = value
            }
            if let value = dict["uuid"] as? String {
                self.uuid = value
            }
            if let value = dict["version"] as? Int32 {
                self.version = value
            }
        }
    }
    public var requestId: String?

    public var currentPage: Int32?

    public var pageSize: Int32?

    public var resultObject: [DescribeSampleDataByBatchUUidPageResponseBody.ResultObject]?

    public var totalItem: Int32?

    public var totalPage: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.currentPage != nil {
            map["currentPage"] = self.currentPage!
        }
        if self.pageSize != nil {
            map["pageSize"] = self.pageSize!
        }
        if self.resultObject != nil {
            var tmp : [Any] = []
            for k in self.resultObject! {
                tmp.append(k.toMap())
            }
            map["resultObject"] = tmp
        }
        if self.totalItem != nil {
            map["totalItem"] = self.totalItem!
        }
        if self.totalPage != nil {
            map["totalPage"] = self.totalPage!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["currentPage"] as? Int32 {
            self.currentPage = value
        }
        if let value = dict["pageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["resultObject"] as? [Any?] {
            var tmp : [DescribeSampleDataByBatchUUidPageResponseBody.ResultObject] = []
            for v in value {
                if v != nil {
                    var model = DescribeSampleDataByBatchUUidPageResponseBody.ResultObject()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.resultObject = tmp
        }
        if let value = dict["totalItem"] as? Int32 {
            self.totalItem = value
        }
        if let value = dict["totalPage"] as? Int32 {
            self.totalPage = value
        }
    }
}

public class DescribeSampleDataByBatchUUidPageResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeSampleDataByBatchUUidPageResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeSampleDataByBatchUUidPageResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeSampleDataListRequest : Tea.TeaModel {
    public var lang: String?

    public var currentPage: String?

    public var deleteTag: String?

    public var pageSize: String?

    public var queryContent: String?

    public var regId: String?

    public var sampleId: Int64?

    public var scene: String?

    public var status: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.currentPage != nil {
            map["currentPage"] = self.currentPage!
        }
        if self.deleteTag != nil {
            map["deleteTag"] = self.deleteTag!
        }
        if self.pageSize != nil {
            map["pageSize"] = self.pageSize!
        }
        if self.queryContent != nil {
            map["queryContent"] = self.queryContent!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.sampleId != nil {
            map["sampleId"] = self.sampleId!
        }
        if self.scene != nil {
            map["scene"] = self.scene!
        }
        if self.status != nil {
            map["status"] = self.status!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["currentPage"] as? String {
            self.currentPage = value
        }
        if let value = dict["deleteTag"] as? String {
            self.deleteTag = value
        }
        if let value = dict["pageSize"] as? String {
            self.pageSize = value
        }
        if let value = dict["queryContent"] as? String {
            self.queryContent = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["sampleId"] as? Int64 {
            self.sampleId = value
        }
        if let value = dict["scene"] as? String {
            self.scene = value
        }
        if let value = dict["status"] as? String {
            self.status = value
        }
    }
}

public class DescribeSampleDataListResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public var classificationType: String?

        public var dataDistributed: String?

        public var dataTitle: String?

        public var deleteTag: String?

        public var description_: String?

        public var gmtCreate: Int64?

        public var gmtModified: Int64?

        public var id: Int64?

        public var name: String?

        public var normalSize: Int64?

        public var recallConfig: String?

        public var riskSize: Int64?

        public var riskValue: String?

        public var sampleLabelDetail: String?

        public var sampleSize: Int64?

        public var scene: String?

        public var status: String?

        public var storePath: String?

        public var storeType: String?

        public var supportRecall: String?

        public var userId: Int64?

        public var version: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.classificationType != nil {
                map["classificationType"] = self.classificationType!
            }
            if self.dataDistributed != nil {
                map["dataDistributed"] = self.dataDistributed!
            }
            if self.dataTitle != nil {
                map["dataTitle"] = self.dataTitle!
            }
            if self.deleteTag != nil {
                map["deleteTag"] = self.deleteTag!
            }
            if self.description_ != nil {
                map["description"] = self.description_!
            }
            if self.gmtCreate != nil {
                map["gmtCreate"] = self.gmtCreate!
            }
            if self.gmtModified != nil {
                map["gmtModified"] = self.gmtModified!
            }
            if self.id != nil {
                map["id"] = self.id!
            }
            if self.name != nil {
                map["name"] = self.name!
            }
            if self.normalSize != nil {
                map["normalSize"] = self.normalSize!
            }
            if self.recallConfig != nil {
                map["recallConfig"] = self.recallConfig!
            }
            if self.riskSize != nil {
                map["riskSize"] = self.riskSize!
            }
            if self.riskValue != nil {
                map["riskValue"] = self.riskValue!
            }
            if self.sampleLabelDetail != nil {
                map["sampleLabelDetail"] = self.sampleLabelDetail!
            }
            if self.sampleSize != nil {
                map["sampleSize"] = self.sampleSize!
            }
            if self.scene != nil {
                map["scene"] = self.scene!
            }
            if self.status != nil {
                map["status"] = self.status!
            }
            if self.storePath != nil {
                map["storePath"] = self.storePath!
            }
            if self.storeType != nil {
                map["storeType"] = self.storeType!
            }
            if self.supportRecall != nil {
                map["supportRecall"] = self.supportRecall!
            }
            if self.userId != nil {
                map["userId"] = self.userId!
            }
            if self.version != nil {
                map["version"] = self.version!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["classificationType"] as? String {
                self.classificationType = value
            }
            if let value = dict["dataDistributed"] as? String {
                self.dataDistributed = value
            }
            if let value = dict["dataTitle"] as? String {
                self.dataTitle = value
            }
            if let value = dict["deleteTag"] as? String {
                self.deleteTag = value
            }
            if let value = dict["description"] as? String {
                self.description_ = value
            }
            if let value = dict["gmtCreate"] as? Int64 {
                self.gmtCreate = value
            }
            if let value = dict["gmtModified"] as? Int64 {
                self.gmtModified = value
            }
            if let value = dict["id"] as? Int64 {
                self.id = value
            }
            if let value = dict["name"] as? String {
                self.name = value
            }
            if let value = dict["normalSize"] as? Int64 {
                self.normalSize = value
            }
            if let value = dict["recallConfig"] as? String {
                self.recallConfig = value
            }
            if let value = dict["riskSize"] as? Int64 {
                self.riskSize = value
            }
            if let value = dict["riskValue"] as? String {
                self.riskValue = value
            }
            if let value = dict["sampleLabelDetail"] as? String {
                self.sampleLabelDetail = value
            }
            if let value = dict["sampleSize"] as? Int64 {
                self.sampleSize = value
            }
            if let value = dict["scene"] as? String {
                self.scene = value
            }
            if let value = dict["status"] as? String {
                self.status = value
            }
            if let value = dict["storePath"] as? String {
                self.storePath = value
            }
            if let value = dict["storeType"] as? String {
                self.storeType = value
            }
            if let value = dict["supportRecall"] as? String {
                self.supportRecall = value
            }
            if let value = dict["userId"] as? Int64 {
                self.userId = value
            }
            if let value = dict["version"] as? Int32 {
                self.version = value
            }
        }
    }
    public var requestId: String?

    public var currentPage: Int32?

    public var pageSize: Int32?

    public var resultObject: [DescribeSampleDataListResponseBody.ResultObject]?

    public var totalItem: Int32?

    public var totalPage: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.currentPage != nil {
            map["currentPage"] = self.currentPage!
        }
        if self.pageSize != nil {
            map["pageSize"] = self.pageSize!
        }
        if self.resultObject != nil {
            var tmp : [Any] = []
            for k in self.resultObject! {
                tmp.append(k.toMap())
            }
            map["resultObject"] = tmp
        }
        if self.totalItem != nil {
            map["totalItem"] = self.totalItem!
        }
        if self.totalPage != nil {
            map["totalPage"] = self.totalPage!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["currentPage"] as? Int32 {
            self.currentPage = value
        }
        if let value = dict["pageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["resultObject"] as? [Any?] {
            var tmp : [DescribeSampleDataListResponseBody.ResultObject] = []
            for v in value {
                if v != nil {
                    var model = DescribeSampleDataListResponseBody.ResultObject()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.resultObject = tmp
        }
        if let value = dict["totalItem"] as? Int32 {
            self.totalItem = value
        }
        if let value = dict["totalPage"] as? Int32 {
            self.totalPage = value
        }
    }
}

public class DescribeSampleDataListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeSampleDataListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeSampleDataListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeSampleDataPageRequest : Tea.TeaModel {
    public var lang: String?

    public var currentPage: Int32?

    public var dataValue: String?

    public var pageSize: Int32?

    public var regId: String?

    public var updateBeginTime: Int64?

    public var updateEndTime: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.currentPage != nil {
            map["currentPage"] = self.currentPage!
        }
        if self.dataValue != nil {
            map["dataValue"] = self.dataValue!
        }
        if self.pageSize != nil {
            map["pageSize"] = self.pageSize!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.updateBeginTime != nil {
            map["updateBeginTime"] = self.updateBeginTime!
        }
        if self.updateEndTime != nil {
            map["updateEndTime"] = self.updateEndTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["currentPage"] as? Int32 {
            self.currentPage = value
        }
        if let value = dict["dataValue"] as? String {
            self.dataValue = value
        }
        if let value = dict["pageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["updateBeginTime"] as? Int64 {
            self.updateBeginTime = value
        }
        if let value = dict["updateEndTime"] as? Int64 {
            self.updateEndTime = value
        }
    }
}

public class DescribeSampleDataPageResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public var creator: String?

        public var dataTagType: String?

        public var dataValue: String?

        public var gmtCreate: Int64?

        public var gmtModified: Int64?

        public var lastSourceType: String?

        public var updator: String?

        public var uuid: String?

        public var version: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.creator != nil {
                map["creator"] = self.creator!
            }
            if self.dataTagType != nil {
                map["dataTagType"] = self.dataTagType!
            }
            if self.dataValue != nil {
                map["dataValue"] = self.dataValue!
            }
            if self.gmtCreate != nil {
                map["gmtCreate"] = self.gmtCreate!
            }
            if self.gmtModified != nil {
                map["gmtModified"] = self.gmtModified!
            }
            if self.lastSourceType != nil {
                map["lastSourceType"] = self.lastSourceType!
            }
            if self.updator != nil {
                map["updator"] = self.updator!
            }
            if self.uuid != nil {
                map["uuid"] = self.uuid!
            }
            if self.version != nil {
                map["version"] = self.version!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["creator"] as? String {
                self.creator = value
            }
            if let value = dict["dataTagType"] as? String {
                self.dataTagType = value
            }
            if let value = dict["dataValue"] as? String {
                self.dataValue = value
            }
            if let value = dict["gmtCreate"] as? Int64 {
                self.gmtCreate = value
            }
            if let value = dict["gmtModified"] as? Int64 {
                self.gmtModified = value
            }
            if let value = dict["lastSourceType"] as? String {
                self.lastSourceType = value
            }
            if let value = dict["updator"] as? String {
                self.updator = value
            }
            if let value = dict["uuid"] as? String {
                self.uuid = value
            }
            if let value = dict["version"] as? Int32 {
                self.version = value
            }
        }
    }
    public var requestId: String?

    public var currentPage: Int32?

    public var pageSize: Int32?

    public var resultObject: [DescribeSampleDataPageResponseBody.ResultObject]?

    public var totalItem: Int32?

    public var totalPage: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.currentPage != nil {
            map["currentPage"] = self.currentPage!
        }
        if self.pageSize != nil {
            map["pageSize"] = self.pageSize!
        }
        if self.resultObject != nil {
            var tmp : [Any] = []
            for k in self.resultObject! {
                tmp.append(k.toMap())
            }
            map["resultObject"] = tmp
        }
        if self.totalItem != nil {
            map["totalItem"] = self.totalItem!
        }
        if self.totalPage != nil {
            map["totalPage"] = self.totalPage!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["currentPage"] as? Int32 {
            self.currentPage = value
        }
        if let value = dict["pageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["resultObject"] as? [Any?] {
            var tmp : [DescribeSampleDataPageResponseBody.ResultObject] = []
            for v in value {
                if v != nil {
                    var model = DescribeSampleDataPageResponseBody.ResultObject()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.resultObject = tmp
        }
        if let value = dict["totalItem"] as? Int32 {
            self.totalItem = value
        }
        if let value = dict["totalPage"] as? Int32 {
            self.totalPage = value
        }
    }
}

public class DescribeSampleDataPageResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeSampleDataPageResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeSampleDataPageResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeSampleDemoDownloadUrlRequest : Tea.TeaModel {
    public var lang: String?

    public var regId: String?

    public var scene: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.scene != nil {
            map["scene"] = self.scene!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["scene"] as? String {
            self.scene = value
        }
    }
}

public class DescribeSampleDemoDownloadUrlResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
    }
}

public class DescribeSampleDemoDownloadUrlResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeSampleDemoDownloadUrlResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeSampleDemoDownloadUrlResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeSampleDownloadUrlRequest : Tea.TeaModel {
    public var lang: String?

    public var regId: String?

    public var sampleId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.sampleId != nil {
            map["sampleId"] = self.sampleId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["sampleId"] as? Int64 {
            self.sampleId = value
        }
    }
}

public class DescribeSampleDownloadUrlResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
    }
}

public class DescribeSampleDownloadUrlResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeSampleDownloadUrlResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeSampleDownloadUrlResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeSampleInfoRequest : Tea.TeaModel {
    public var lang: String?

    public var id: Int64?

    public var regId: String?

    public var versions: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.id != nil {
            map["id"] = self.id!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.versions != nil {
            map["versions"] = self.versions!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["id"] as? Int64 {
            self.id = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["versions"] as? Int32 {
            self.versions = value
        }
    }
}

public class DescribeSampleInfoResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public var id: Int64?

        public var sampleTags: String?

        public var sampleType: String?

        public var sampleValue: String?

        public var updateTime: String?

        public var version: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.id != nil {
                map["id"] = self.id!
            }
            if self.sampleTags != nil {
                map["sampleTags"] = self.sampleTags!
            }
            if self.sampleType != nil {
                map["sampleType"] = self.sampleType!
            }
            if self.sampleValue != nil {
                map["sampleValue"] = self.sampleValue!
            }
            if self.updateTime != nil {
                map["updateTime"] = self.updateTime!
            }
            if self.version != nil {
                map["version"] = self.version!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["id"] as? Int64 {
                self.id = value
            }
            if let value = dict["sampleTags"] as? String {
                self.sampleTags = value
            }
            if let value = dict["sampleType"] as? String {
                self.sampleType = value
            }
            if let value = dict["sampleValue"] as? String {
                self.sampleValue = value
            }
            if let value = dict["updateTime"] as? String {
                self.updateTime = value
            }
            if let value = dict["version"] as? Int32 {
                self.version = value
            }
        }
    }
    public var requestId: String?

    public var resultObject: DescribeSampleInfoResponseBody.ResultObject?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.resultObject?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? [String: Any?] {
            var model = DescribeSampleInfoResponseBody.ResultObject()
            model.fromMap(value)
            self.resultObject = model
        }
    }
}

public class DescribeSampleInfoResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeSampleInfoResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeSampleInfoResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeSampleListRequest : Tea.TeaModel {
    public var lang: String?

    public var currentPage: Int32?

    public var pageSize: Int32?

    public var regId: String?

    public var sampleType: String?

    public var sampleValue: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.currentPage != nil {
            map["currentPage"] = self.currentPage!
        }
        if self.pageSize != nil {
            map["pageSize"] = self.pageSize!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.sampleType != nil {
            map["sampleType"] = self.sampleType!
        }
        if self.sampleValue != nil {
            map["sampleValue"] = self.sampleValue!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["currentPage"] as? Int32 {
            self.currentPage = value
        }
        if let value = dict["pageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["sampleType"] as? String {
            self.sampleType = value
        }
        if let value = dict["sampleValue"] as? String {
            self.sampleValue = value
        }
    }
}

public class DescribeSampleListResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public var id: Int64?

        public var sampleTags: String?

        public var sampleType: Int32?

        public var sampleValue: String?

        public var updateTime: Int64?

        public var version: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.id != nil {
                map["id"] = self.id!
            }
            if self.sampleTags != nil {
                map["sampleTags"] = self.sampleTags!
            }
            if self.sampleType != nil {
                map["sampleType"] = self.sampleType!
            }
            if self.sampleValue != nil {
                map["sampleValue"] = self.sampleValue!
            }
            if self.updateTime != nil {
                map["updateTime"] = self.updateTime!
            }
            if self.version != nil {
                map["version"] = self.version!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["id"] as? Int64 {
                self.id = value
            }
            if let value = dict["sampleTags"] as? String {
                self.sampleTags = value
            }
            if let value = dict["sampleType"] as? Int32 {
                self.sampleType = value
            }
            if let value = dict["sampleValue"] as? String {
                self.sampleValue = value
            }
            if let value = dict["updateTime"] as? Int64 {
                self.updateTime = value
            }
            if let value = dict["version"] as? Int32 {
                self.version = value
            }
        }
    }
    public var requestId: String?

    public var currentPage: Int32?

    public var pageSize: Int32?

    public var resultObject: [DescribeSampleListResponseBody.ResultObject]?

    public var totalItem: Int32?

    public var totalPage: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.currentPage != nil {
            map["currentPage"] = self.currentPage!
        }
        if self.pageSize != nil {
            map["pageSize"] = self.pageSize!
        }
        if self.resultObject != nil {
            var tmp : [Any] = []
            for k in self.resultObject! {
                tmp.append(k.toMap())
            }
            map["resultObject"] = tmp
        }
        if self.totalItem != nil {
            map["totalItem"] = self.totalItem!
        }
        if self.totalPage != nil {
            map["totalPage"] = self.totalPage!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["currentPage"] as? Int32 {
            self.currentPage = value
        }
        if let value = dict["pageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["resultObject"] as? [Any?] {
            var tmp : [DescribeSampleListResponseBody.ResultObject] = []
            for v in value {
                if v != nil {
                    var model = DescribeSampleListResponseBody.ResultObject()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.resultObject = tmp
        }
        if let value = dict["totalItem"] as? Int32 {
            self.totalItem = value
        }
        if let value = dict["totalPage"] as? Int32 {
            self.totalPage = value
        }
    }
}

public class DescribeSampleListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeSampleListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeSampleListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeSampleSceneListRequest : Tea.TeaModel {
    public var lang: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeSampleSceneListResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public var bizType: String?

        public var configKey: String?

        public var configValue: String?

        public var creator: String?

        public var description_: String?

        public var gmtCreate: Int64?

        public var gmtModified: Int64?

        public var id: Int64?

        public var lastModifiedOperator: String?

        public var status: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.bizType != nil {
                map["bizType"] = self.bizType!
            }
            if self.configKey != nil {
                map["configKey"] = self.configKey!
            }
            if self.configValue != nil {
                map["configValue"] = self.configValue!
            }
            if self.creator != nil {
                map["creator"] = self.creator!
            }
            if self.description_ != nil {
                map["description"] = self.description_!
            }
            if self.gmtCreate != nil {
                map["gmtCreate"] = self.gmtCreate!
            }
            if self.gmtModified != nil {
                map["gmtModified"] = self.gmtModified!
            }
            if self.id != nil {
                map["id"] = self.id!
            }
            if self.lastModifiedOperator != nil {
                map["lastModifiedOperator"] = self.lastModifiedOperator!
            }
            if self.status != nil {
                map["status"] = self.status!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["bizType"] as? String {
                self.bizType = value
            }
            if let value = dict["configKey"] as? String {
                self.configKey = value
            }
            if let value = dict["configValue"] as? String {
                self.configValue = value
            }
            if let value = dict["creator"] as? String {
                self.creator = value
            }
            if let value = dict["description"] as? String {
                self.description_ = value
            }
            if let value = dict["gmtCreate"] as? Int64 {
                self.gmtCreate = value
            }
            if let value = dict["gmtModified"] as? Int64 {
                self.gmtModified = value
            }
            if let value = dict["id"] as? Int64 {
                self.id = value
            }
            if let value = dict["lastModifiedOperator"] as? String {
                self.lastModifiedOperator = value
            }
            if let value = dict["status"] as? String {
                self.status = value
            }
        }
    }
    public var requestId: String?

    public var currentPage: Int32?

    public var pageSize: Int32?

    public var resultObject: [DescribeSampleSceneListResponseBody.ResultObject]?

    public var totalItem: Int32?

    public var totalPage: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.currentPage != nil {
            map["currentPage"] = self.currentPage!
        }
        if self.pageSize != nil {
            map["pageSize"] = self.pageSize!
        }
        if self.resultObject != nil {
            var tmp : [Any] = []
            for k in self.resultObject! {
                tmp.append(k.toMap())
            }
            map["resultObject"] = tmp
        }
        if self.totalItem != nil {
            map["totalItem"] = self.totalItem!
        }
        if self.totalPage != nil {
            map["totalPage"] = self.totalPage!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["currentPage"] as? Int32 {
            self.currentPage = value
        }
        if let value = dict["pageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["resultObject"] as? [Any?] {
            var tmp : [DescribeSampleSceneListResponseBody.ResultObject] = []
            for v in value {
                if v != nil {
                    var model = DescribeSampleSceneListResponseBody.ResultObject()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.resultObject = tmp
        }
        if let value = dict["totalItem"] as? Int32 {
            self.totalItem = value
        }
        if let value = dict["totalPage"] as? Int32 {
            self.totalPage = value
        }
    }
}

public class DescribeSampleSceneListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeSampleSceneListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeSampleSceneListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeSampleTagListRequest : Tea.TeaModel {
    public var lang: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeSampleTagListResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
    }
}

public class DescribeSampleTagListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeSampleTagListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeSampleTagListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeSampleUploadPolicyRequest : Tea.TeaModel {
    public var lang: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeSampleUploadPolicyResponseBody : Tea.TeaModel {
    public var accessId: String?

    public var host: String?

    public var key: String?

    public var policy: String?

    public var requestId: String?

    public var signature: String?

    public var stsToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.accessId != nil {
            map["AccessId"] = self.accessId!
        }
        if self.host != nil {
            map["Host"] = self.host!
        }
        if self.key != nil {
            map["Key"] = self.key!
        }
        if self.policy != nil {
            map["Policy"] = self.policy!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.signature != nil {
            map["Signature"] = self.signature!
        }
        if self.stsToken != nil {
            map["StsToken"] = self.stsToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AccessId"] as? String {
            self.accessId = value
        }
        if let value = dict["Host"] as? String {
            self.host = value
        }
        if let value = dict["Key"] as? String {
            self.key = value
        }
        if let value = dict["Policy"] as? String {
            self.policy = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Signature"] as? String {
            self.signature = value
        }
        if let value = dict["StsToken"] as? String {
            self.stsToken = value
        }
    }
}

public class DescribeSampleUploadPolicyResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeSampleUploadPolicyResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeSampleUploadPolicyResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeSamplebatchPageRequest : Tea.TeaModel {
    public var lang: String?

    public var currentPage: Int32?

    public var dataValue: String?

    public var pageSize: Int32?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.currentPage != nil {
            map["currentPage"] = self.currentPage!
        }
        if self.dataValue != nil {
            map["dataValue"] = self.dataValue!
        }
        if self.pageSize != nil {
            map["pageSize"] = self.pageSize!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["currentPage"] as? Int32 {
            self.currentPage = value
        }
        if let value = dict["dataValue"] as? String {
            self.dataValue = value
        }
        if let value = dict["pageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeSamplebatchPageResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public var batchName: String?

        public var creator: String?

        public var dataType: String?

        public var description_: String?

        public var gmtCreate: Int64?

        public var gmtModified: Int64?

        public var initValidFileRow: Int64?

        public var sampleBatchType: String?

        public var services: String?

        public var updator: String?

        public var uuid: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.batchName != nil {
                map["batchName"] = self.batchName!
            }
            if self.creator != nil {
                map["creator"] = self.creator!
            }
            if self.dataType != nil {
                map["dataType"] = self.dataType!
            }
            if self.description_ != nil {
                map["description"] = self.description_!
            }
            if self.gmtCreate != nil {
                map["gmtCreate"] = self.gmtCreate!
            }
            if self.gmtModified != nil {
                map["gmtModified"] = self.gmtModified!
            }
            if self.initValidFileRow != nil {
                map["initValidFileRow"] = self.initValidFileRow!
            }
            if self.sampleBatchType != nil {
                map["sampleBatchType"] = self.sampleBatchType!
            }
            if self.services != nil {
                map["services"] = self.services!
            }
            if self.updator != nil {
                map["updator"] = self.updator!
            }
            if self.uuid != nil {
                map["uuid"] = self.uuid!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["batchName"] as? String {
                self.batchName = value
            }
            if let value = dict["creator"] as? String {
                self.creator = value
            }
            if let value = dict["dataType"] as? String {
                self.dataType = value
            }
            if let value = dict["description"] as? String {
                self.description_ = value
            }
            if let value = dict["gmtCreate"] as? Int64 {
                self.gmtCreate = value
            }
            if let value = dict["gmtModified"] as? Int64 {
                self.gmtModified = value
            }
            if let value = dict["initValidFileRow"] as? Int64 {
                self.initValidFileRow = value
            }
            if let value = dict["sampleBatchType"] as? String {
                self.sampleBatchType = value
            }
            if let value = dict["services"] as? String {
                self.services = value
            }
            if let value = dict["updator"] as? String {
                self.updator = value
            }
            if let value = dict["uuid"] as? String {
                self.uuid = value
            }
        }
    }
    public var requestId: String?

    public var currentPage: Int32?

    public var pageSize: Int32?

    public var resultObject: [DescribeSamplebatchPageResponseBody.ResultObject]?

    public var totalItem: Int32?

    public var totalPage: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.currentPage != nil {
            map["currentPage"] = self.currentPage!
        }
        if self.pageSize != nil {
            map["pageSize"] = self.pageSize!
        }
        if self.resultObject != nil {
            var tmp : [Any] = []
            for k in self.resultObject! {
                tmp.append(k.toMap())
            }
            map["resultObject"] = tmp
        }
        if self.totalItem != nil {
            map["totalItem"] = self.totalItem!
        }
        if self.totalPage != nil {
            map["totalPage"] = self.totalPage!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["currentPage"] as? Int32 {
            self.currentPage = value
        }
        if let value = dict["pageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["resultObject"] as? [Any?] {
            var tmp : [DescribeSamplebatchPageResponseBody.ResultObject] = []
            for v in value {
                if v != nil {
                    var model = DescribeSamplebatchPageResponseBody.ResultObject()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.resultObject = tmp
        }
        if let value = dict["totalItem"] as? Int32 {
            self.totalItem = value
        }
        if let value = dict["totalPage"] as? Int32 {
            self.totalPage = value
        }
    }
}

public class DescribeSamplebatchPageResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeSamplebatchPageResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeSamplebatchPageResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeSceneAllEventNameCodeListRequest : Tea.TeaModel {
    public var lang: String?

    public var createType: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.createType != nil {
            map["createType"] = self.createType!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["createType"] as? String {
            self.createType = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeSceneAllEventNameCodeListResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public class Children : Tea.TeaModel {
            public var createType: String?

            public var eventCode: String?

            public var eventName: String?

            public var eventType: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.createType != nil {
                    map["createType"] = self.createType!
                }
                if self.eventCode != nil {
                    map["eventCode"] = self.eventCode!
                }
                if self.eventName != nil {
                    map["eventName"] = self.eventName!
                }
                if self.eventType != nil {
                    map["eventType"] = self.eventType!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["createType"] as? String {
                    self.createType = value
                }
                if let value = dict["eventCode"] as? String {
                    self.eventCode = value
                }
                if let value = dict["eventName"] as? String {
                    self.eventName = value
                }
                if let value = dict["eventType"] as? String {
                    self.eventType = value
                }
            }
        }
        public var children: [DescribeSceneAllEventNameCodeListResponseBody.ResultObject.Children]?

        public var createType: String?

        public var eventCode: String?

        public var eventName: String?

        public var eventType: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.children != nil {
                var tmp : [Any] = []
                for k in self.children! {
                    tmp.append(k.toMap())
                }
                map["children"] = tmp
            }
            if self.createType != nil {
                map["createType"] = self.createType!
            }
            if self.eventCode != nil {
                map["eventCode"] = self.eventCode!
            }
            if self.eventName != nil {
                map["eventName"] = self.eventName!
            }
            if self.eventType != nil {
                map["eventType"] = self.eventType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["children"] as? [Any?] {
                var tmp : [DescribeSceneAllEventNameCodeListResponseBody.ResultObject.Children] = []
                for v in value {
                    if v != nil {
                        var model = DescribeSceneAllEventNameCodeListResponseBody.ResultObject.Children()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.children = tmp
            }
            if let value = dict["createType"] as? String {
                self.createType = value
            }
            if let value = dict["eventCode"] as? String {
                self.eventCode = value
            }
            if let value = dict["eventName"] as? String {
                self.eventName = value
            }
            if let value = dict["eventType"] as? String {
                self.eventType = value
            }
        }
    }
    public var code: String?

    public var httpStatusCode: String?

    public var message: String?

    public var requestId: String?

    public var resultObject: [DescribeSceneAllEventNameCodeListResponseBody.ResultObject]?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["httpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.resultObject != nil {
            var tmp : [Any] = []
            for k in self.resultObject! {
                tmp.append(k.toMap())
            }
            map["resultObject"] = tmp
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["httpStatusCode"] as? String {
            self.httpStatusCode = value
        }
        if let value = dict["message"] as? String {
            self.message = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? [Any?] {
            var tmp : [DescribeSceneAllEventNameCodeListResponseBody.ResultObject] = []
            for v in value {
                if v != nil {
                    var model = DescribeSceneAllEventNameCodeListResponseBody.ResultObject()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.resultObject = tmp
        }
        if let value = dict["success"] as? Bool {
            self.success = value
        }
    }
}

public class DescribeSceneAllEventNameCodeListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeSceneAllEventNameCodeListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeSceneAllEventNameCodeListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeSceneEventPageListRequest : Tea.TeaModel {
    public var lang: String?

    public var currentPage: String?

    public var nameOrCode: String?

    public var pageSize: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.currentPage != nil {
            map["currentPage"] = self.currentPage!
        }
        if self.nameOrCode != nil {
            map["nameOrCode"] = self.nameOrCode!
        }
        if self.pageSize != nil {
            map["pageSize"] = self.pageSize!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["currentPage"] as? String {
            self.currentPage = value
        }
        if let value = dict["nameOrCode"] as? String {
            self.nameOrCode = value
        }
        if let value = dict["pageSize"] as? String {
            self.pageSize = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeSceneEventPageListResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public var commonRuleCount: String?

        public var customRuleCount: String?

        public var eventCode: String?

        public var eventName: String?

        public var gmtModified: String?

        public var modifier: String?

        public var normalRuleCount: String?

        public var service: String?

        public var useStatus: String?

        public var whiteBoxRuleCount: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.commonRuleCount != nil {
                map["commonRuleCount"] = self.commonRuleCount!
            }
            if self.customRuleCount != nil {
                map["customRuleCount"] = self.customRuleCount!
            }
            if self.eventCode != nil {
                map["eventCode"] = self.eventCode!
            }
            if self.eventName != nil {
                map["eventName"] = self.eventName!
            }
            if self.gmtModified != nil {
                map["gmtModified"] = self.gmtModified!
            }
            if self.modifier != nil {
                map["modifier"] = self.modifier!
            }
            if self.normalRuleCount != nil {
                map["normalRuleCount"] = self.normalRuleCount!
            }
            if self.service != nil {
                map["service"] = self.service!
            }
            if self.useStatus != nil {
                map["useStatus"] = self.useStatus!
            }
            if self.whiteBoxRuleCount != nil {
                map["whiteBoxRuleCount"] = self.whiteBoxRuleCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["commonRuleCount"] as? String {
                self.commonRuleCount = value
            }
            if let value = dict["customRuleCount"] as? String {
                self.customRuleCount = value
            }
            if let value = dict["eventCode"] as? String {
                self.eventCode = value
            }
            if let value = dict["eventName"] as? String {
                self.eventName = value
            }
            if let value = dict["gmtModified"] as? String {
                self.gmtModified = value
            }
            if let value = dict["modifier"] as? String {
                self.modifier = value
            }
            if let value = dict["normalRuleCount"] as? String {
                self.normalRuleCount = value
            }
            if let value = dict["service"] as? String {
                self.service = value
            }
            if let value = dict["useStatus"] as? String {
                self.useStatus = value
            }
            if let value = dict["whiteBoxRuleCount"] as? String {
                self.whiteBoxRuleCount = value
            }
        }
    }
    public var currentPage: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var resultObject: [DescribeSceneEventPageListResponseBody.ResultObject]?

    public var totalItem: Int32?

    public var totalPage: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.currentPage != nil {
            map["currentPage"] = self.currentPage!
        }
        if self.pageSize != nil {
            map["pageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.resultObject != nil {
            var tmp : [Any] = []
            for k in self.resultObject! {
                tmp.append(k.toMap())
            }
            map["resultObject"] = tmp
        }
        if self.totalItem != nil {
            map["totalItem"] = self.totalItem!
        }
        if self.totalPage != nil {
            map["totalPage"] = self.totalPage!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["currentPage"] as? Int32 {
            self.currentPage = value
        }
        if let value = dict["pageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? [Any?] {
            var tmp : [DescribeSceneEventPageListResponseBody.ResultObject] = []
            for v in value {
                if v != nil {
                    var model = DescribeSceneEventPageListResponseBody.ResultObject()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.resultObject = tmp
        }
        if let value = dict["totalItem"] as? Int32 {
            self.totalItem = value
        }
        if let value = dict["totalPage"] as? Int32 {
            self.totalPage = value
        }
    }
}

public class DescribeSceneEventPageListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeSceneEventPageListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeSceneEventPageListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeSceneRulePageListRequest : Tea.TeaModel {
    public var lang: String?

    public var createType: String?

    public var currentPage: String?

    public var eventCode: String?

    public var pageSize: String?

    public var regId: String?

    public var ruleAuthType: String?

    public var ruleName: String?

    public var ruleStatus: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.createType != nil {
            map["createType"] = self.createType!
        }
        if self.currentPage != nil {
            map["currentPage"] = self.currentPage!
        }
        if self.eventCode != nil {
            map["eventCode"] = self.eventCode!
        }
        if self.pageSize != nil {
            map["pageSize"] = self.pageSize!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.ruleAuthType != nil {
            map["ruleAuthType"] = self.ruleAuthType!
        }
        if self.ruleName != nil {
            map["ruleName"] = self.ruleName!
        }
        if self.ruleStatus != nil {
            map["ruleStatus"] = self.ruleStatus!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["createType"] as? String {
            self.createType = value
        }
        if let value = dict["currentPage"] as? String {
            self.currentPage = value
        }
        if let value = dict["eventCode"] as? String {
            self.eventCode = value
        }
        if let value = dict["pageSize"] as? String {
            self.pageSize = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["ruleAuthType"] as? String {
            self.ruleAuthType = value
        }
        if let value = dict["ruleName"] as? String {
            self.ruleName = value
        }
        if let value = dict["ruleStatus"] as? String {
            self.ruleStatus = value
        }
    }
}

public class DescribeSceneRulePageListResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public class ConsoleAudit : Tea.TeaModel {
            public var applyUserId: String?

            public var applyUserName: String?

            public var auditMsg: String?

            public var auditRealUserId: String?

            public var auditRealUserName: String?

            public var auditRemark: String?

            public var auditStatus: String?

            public var auditTime: Int64?

            public var auditUserId: String?

            public var auditUserName: String?

            public var gmtCreate: Int64?

            public var id: Int64?

            public var relationExt: String?

            public var relationId: Int64?

            public var relationName: String?

            public var relationType: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.applyUserId != nil {
                    map["applyUserId"] = self.applyUserId!
                }
                if self.applyUserName != nil {
                    map["applyUserName"] = self.applyUserName!
                }
                if self.auditMsg != nil {
                    map["auditMsg"] = self.auditMsg!
                }
                if self.auditRealUserId != nil {
                    map["auditRealUserId"] = self.auditRealUserId!
                }
                if self.auditRealUserName != nil {
                    map["auditRealUserName"] = self.auditRealUserName!
                }
                if self.auditRemark != nil {
                    map["auditRemark"] = self.auditRemark!
                }
                if self.auditStatus != nil {
                    map["auditStatus"] = self.auditStatus!
                }
                if self.auditTime != nil {
                    map["auditTime"] = self.auditTime!
                }
                if self.auditUserId != nil {
                    map["auditUserId"] = self.auditUserId!
                }
                if self.auditUserName != nil {
                    map["auditUserName"] = self.auditUserName!
                }
                if self.gmtCreate != nil {
                    map["gmtCreate"] = self.gmtCreate!
                }
                if self.id != nil {
                    map["id"] = self.id!
                }
                if self.relationExt != nil {
                    map["relationExt"] = self.relationExt!
                }
                if self.relationId != nil {
                    map["relationId"] = self.relationId!
                }
                if self.relationName != nil {
                    map["relationName"] = self.relationName!
                }
                if self.relationType != nil {
                    map["relationType"] = self.relationType!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["applyUserId"] as? String {
                    self.applyUserId = value
                }
                if let value = dict["applyUserName"] as? String {
                    self.applyUserName = value
                }
                if let value = dict["auditMsg"] as? String {
                    self.auditMsg = value
                }
                if let value = dict["auditRealUserId"] as? String {
                    self.auditRealUserId = value
                }
                if let value = dict["auditRealUserName"] as? String {
                    self.auditRealUserName = value
                }
                if let value = dict["auditRemark"] as? String {
                    self.auditRemark = value
                }
                if let value = dict["auditStatus"] as? String {
                    self.auditStatus = value
                }
                if let value = dict["auditTime"] as? Int64 {
                    self.auditTime = value
                }
                if let value = dict["auditUserId"] as? String {
                    self.auditUserId = value
                }
                if let value = dict["auditUserName"] as? String {
                    self.auditUserName = value
                }
                if let value = dict["gmtCreate"] as? Int64 {
                    self.gmtCreate = value
                }
                if let value = dict["id"] as? Int64 {
                    self.id = value
                }
                if let value = dict["relationExt"] as? String {
                    self.relationExt = value
                }
                if let value = dict["relationId"] as? Int64 {
                    self.relationId = value
                }
                if let value = dict["relationName"] as? String {
                    self.relationName = value
                }
                if let value = dict["relationType"] as? String {
                    self.relationType = value
                }
            }
        }
        public var authType: String?

        public var consoleAudit: DescribeSceneRulePageListResponseBody.ResultObject.ConsoleAudit?

        public var eventCode: String?

        public var eventName: String?

        public var eventType: String?

        public var externalRuleName: String?

        public var gmtCreate: Int64?

        public var gmtModified: Int64?

        public var id: Int64?

        public var mainRuleId: String?

        public var priority: Int64?

        public var ruleAuthType: String?

        public var ruleId: String?

        public var ruleMemo: String?

        public var ruleName: String?

        public var ruleStatus: String?

        public var ruleType: String?

        public var ruleVersionId: Int64?

        public var templateId: Int64?

        public var version: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.consoleAudit?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.authType != nil {
                map["authType"] = self.authType!
            }
            if self.consoleAudit != nil {
                map["consoleAudit"] = self.consoleAudit?.toMap()
            }
            if self.eventCode != nil {
                map["eventCode"] = self.eventCode!
            }
            if self.eventName != nil {
                map["eventName"] = self.eventName!
            }
            if self.eventType != nil {
                map["eventType"] = self.eventType!
            }
            if self.externalRuleName != nil {
                map["externalRuleName"] = self.externalRuleName!
            }
            if self.gmtCreate != nil {
                map["gmtCreate"] = self.gmtCreate!
            }
            if self.gmtModified != nil {
                map["gmtModified"] = self.gmtModified!
            }
            if self.id != nil {
                map["id"] = self.id!
            }
            if self.mainRuleId != nil {
                map["mainRuleId"] = self.mainRuleId!
            }
            if self.priority != nil {
                map["priority"] = self.priority!
            }
            if self.ruleAuthType != nil {
                map["ruleAuthType"] = self.ruleAuthType!
            }
            if self.ruleId != nil {
                map["ruleId"] = self.ruleId!
            }
            if self.ruleMemo != nil {
                map["ruleMemo"] = self.ruleMemo!
            }
            if self.ruleName != nil {
                map["ruleName"] = self.ruleName!
            }
            if self.ruleStatus != nil {
                map["ruleStatus"] = self.ruleStatus!
            }
            if self.ruleType != nil {
                map["ruleType"] = self.ruleType!
            }
            if self.ruleVersionId != nil {
                map["ruleVersionId"] = self.ruleVersionId!
            }
            if self.templateId != nil {
                map["templateId"] = self.templateId!
            }
            if self.version != nil {
                map["version"] = self.version!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["authType"] as? String {
                self.authType = value
            }
            if let value = dict["consoleAudit"] as? [String: Any?] {
                var model = DescribeSceneRulePageListResponseBody.ResultObject.ConsoleAudit()
                model.fromMap(value)
                self.consoleAudit = model
            }
            if let value = dict["eventCode"] as? String {
                self.eventCode = value
            }
            if let value = dict["eventName"] as? String {
                self.eventName = value
            }
            if let value = dict["eventType"] as? String {
                self.eventType = value
            }
            if let value = dict["externalRuleName"] as? String {
                self.externalRuleName = value
            }
            if let value = dict["gmtCreate"] as? Int64 {
                self.gmtCreate = value
            }
            if let value = dict["gmtModified"] as? Int64 {
                self.gmtModified = value
            }
            if let value = dict["id"] as? Int64 {
                self.id = value
            }
            if let value = dict["mainRuleId"] as? String {
                self.mainRuleId = value
            }
            if let value = dict["priority"] as? Int64 {
                self.priority = value
            }
            if let value = dict["ruleAuthType"] as? String {
                self.ruleAuthType = value
            }
            if let value = dict["ruleId"] as? String {
                self.ruleId = value
            }
            if let value = dict["ruleMemo"] as? String {
                self.ruleMemo = value
            }
            if let value = dict["ruleName"] as? String {
                self.ruleName = value
            }
            if let value = dict["ruleStatus"] as? String {
                self.ruleStatus = value
            }
            if let value = dict["ruleType"] as? String {
                self.ruleType = value
            }
            if let value = dict["ruleVersionId"] as? Int64 {
                self.ruleVersionId = value
            }
            if let value = dict["templateId"] as? Int64 {
                self.templateId = value
            }
            if let value = dict["version"] as? Int32 {
                self.version = value
            }
        }
    }
    public var currentPage: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var resultObject: [DescribeSceneRulePageListResponseBody.ResultObject]?

    public var totalItem: Int32?

    public var totalPage: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.currentPage != nil {
            map["currentPage"] = self.currentPage!
        }
        if self.pageSize != nil {
            map["pageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.resultObject != nil {
            var tmp : [Any] = []
            for k in self.resultObject! {
                tmp.append(k.toMap())
            }
            map["resultObject"] = tmp
        }
        if self.totalItem != nil {
            map["totalItem"] = self.totalItem!
        }
        if self.totalPage != nil {
            map["totalPage"] = self.totalPage!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["currentPage"] as? Int32 {
            self.currentPage = value
        }
        if let value = dict["pageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? [Any?] {
            var tmp : [DescribeSceneRulePageListResponseBody.ResultObject] = []
            for v in value {
                if v != nil {
                    var model = DescribeSceneRulePageListResponseBody.ResultObject()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.resultObject = tmp
        }
        if let value = dict["totalItem"] as? Int32 {
            self.totalItem = value
        }
        if let value = dict["totalPage"] as? Int32 {
            self.totalPage = value
        }
    }
}

public class DescribeSceneRulePageListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeSceneRulePageListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeSceneRulePageListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeScoreListRequest : Tea.TeaModel {
    public var id: String?

    public var lang: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? String {
            self.id = value
        }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
    }
}

public class DescribeScoreListResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: String?

    public var message: String?

    public var requestId: String?

    public var resultObject: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["ResultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? String {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["ResultObject"] as? String {
            self.resultObject = value
        }
    }
}

public class DescribeScoreListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeScoreListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeScoreListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeScoreSectionNumLineChartRequest : Tea.TeaModel {
    public var lang: String?

    public var beginTime: String?

    public var byPassEventCodes: String?

    public var endTime: String?

    public var mainEventCodes: String?

    public var regId: String?

    public var shuntEventCodes: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.beginTime != nil {
            map["beginTime"] = self.beginTime!
        }
        if self.byPassEventCodes != nil {
            map["byPassEventCodes"] = self.byPassEventCodes!
        }
        if self.endTime != nil {
            map["endTime"] = self.endTime!
        }
        if self.mainEventCodes != nil {
            map["mainEventCodes"] = self.mainEventCodes!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.shuntEventCodes != nil {
            map["shuntEventCodes"] = self.shuntEventCodes!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["beginTime"] as? String {
            self.beginTime = value
        }
        if let value = dict["byPassEventCodes"] as? String {
            self.byPassEventCodes = value
        }
        if let value = dict["endTime"] as? String {
            self.endTime = value
        }
        if let value = dict["mainEventCodes"] as? String {
            self.mainEventCodes = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["shuntEventCodes"] as? String {
            self.shuntEventCodes = value
        }
    }
}

public class DescribeScoreSectionNumLineChartResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public class Series : Tea.TeaModel {
            public var data: [String]?

            public var name: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.data != nil {
                    map["data"] = self.data!
                }
                if self.name != nil {
                    map["name"] = self.name!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["data"] as? [String] {
                    self.data = value
                }
                if let value = dict["name"] as? String {
                    self.name = value
                }
            }
        }
        public class Xaxis : Tea.TeaModel {
            public var data: [String]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.data != nil {
                    map["data"] = self.data!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["data"] as? [String] {
                    self.data = value
                }
            }
        }
        public var series: [DescribeScoreSectionNumLineChartResponseBody.ResultObject.Series]?

        public var xaxis: DescribeScoreSectionNumLineChartResponseBody.ResultObject.Xaxis?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.xaxis?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.series != nil {
                var tmp : [Any] = []
                for k in self.series! {
                    tmp.append(k.toMap())
                }
                map["series"] = tmp
            }
            if self.xaxis != nil {
                map["xaxis"] = self.xaxis?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["series"] as? [Any?] {
                var tmp : [DescribeScoreSectionNumLineChartResponseBody.ResultObject.Series] = []
                for v in value {
                    if v != nil {
                        var model = DescribeScoreSectionNumLineChartResponseBody.ResultObject.Series()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.series = tmp
            }
            if let value = dict["xaxis"] as? [String: Any?] {
                var model = DescribeScoreSectionNumLineChartResponseBody.ResultObject.Xaxis()
                model.fromMap(value)
                self.xaxis = model
            }
        }
    }
    public var requestId: String?

    public var resultObject: DescribeScoreSectionNumLineChartResponseBody.ResultObject?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.resultObject?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? [String: Any?] {
            var model = DescribeScoreSectionNumLineChartResponseBody.ResultObject()
            model.fromMap(value)
            self.resultObject = model
        }
    }
}

public class DescribeScoreSectionNumLineChartResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeScoreSectionNumLineChartResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeScoreSectionNumLineChartResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeScoreSectionPieChartRequest : Tea.TeaModel {
    public var lang: String?

    public var beginTime: Int64?

    public var endTime: Int64?

    public var eventCodes: String?

    public var eventType: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.beginTime != nil {
            map["beginTime"] = self.beginTime!
        }
        if self.endTime != nil {
            map["endTime"] = self.endTime!
        }
        if self.eventCodes != nil {
            map["eventCodes"] = self.eventCodes!
        }
        if self.eventType != nil {
            map["eventType"] = self.eventType!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["beginTime"] as? Int64 {
            self.beginTime = value
        }
        if let value = dict["endTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["eventCodes"] as? String {
            self.eventCodes = value
        }
        if let value = dict["eventType"] as? String {
            self.eventType = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeScoreSectionPieChartResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public class Grid : Tea.TeaModel {
            public var show: Bool?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.show != nil {
                    map["show"] = self.show!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["show"] as? Bool {
                    self.show = value
                }
            }
        }
        public class Series : Tea.TeaModel {
            public class Data : Tea.TeaModel {
                public var name: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.name != nil {
                        map["name"] = self.name!
                    }
                    if self.value != nil {
                        map["value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["name"] as? String {
                        self.name = value
                    }
                    if let value = dict["value"] as? String {
                        self.value = value
                    }
                }
            }
            public var data: [DescribeScoreSectionPieChartResponseBody.ResultObject.Series.Data]?

            public var name: String?

            public var roseType: Bool?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.data != nil {
                    var tmp : [Any] = []
                    for k in self.data! {
                        tmp.append(k.toMap())
                    }
                    map["data"] = tmp
                }
                if self.name != nil {
                    map["name"] = self.name!
                }
                if self.roseType != nil {
                    map["roseType"] = self.roseType!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["data"] as? [Any?] {
                    var tmp : [DescribeScoreSectionPieChartResponseBody.ResultObject.Series.Data] = []
                    for v in value {
                        if v != nil {
                            var model = DescribeScoreSectionPieChartResponseBody.ResultObject.Series.Data()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.data = tmp
                }
                if let value = dict["name"] as? String {
                    self.name = value
                }
                if let value = dict["roseType"] as? Bool {
                    self.roseType = value
                }
            }
        }
        public var animation: Bool?

        public var grid: DescribeScoreSectionPieChartResponseBody.ResultObject.Grid?

        public var series: [DescribeScoreSectionPieChartResponseBody.ResultObject.Series]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.grid?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.animation != nil {
                map["animation"] = self.animation!
            }
            if self.grid != nil {
                map["grid"] = self.grid?.toMap()
            }
            if self.series != nil {
                var tmp : [Any] = []
                for k in self.series! {
                    tmp.append(k.toMap())
                }
                map["series"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["animation"] as? Bool {
                self.animation = value
            }
            if let value = dict["grid"] as? [String: Any?] {
                var model = DescribeScoreSectionPieChartResponseBody.ResultObject.Grid()
                model.fromMap(value)
                self.grid = model
            }
            if let value = dict["series"] as? [Any?] {
                var tmp : [DescribeScoreSectionPieChartResponseBody.ResultObject.Series] = []
                for v in value {
                    if v != nil {
                        var model = DescribeScoreSectionPieChartResponseBody.ResultObject.Series()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.series = tmp
            }
        }
    }
    public var requestId: String?

    public var resultObject: DescribeScoreSectionPieChartResponseBody.ResultObject?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.resultObject?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? [String: Any?] {
            var model = DescribeScoreSectionPieChartResponseBody.ResultObject()
            model.fromMap(value)
            self.resultObject = model
        }
    }
}

public class DescribeScoreSectionPieChartResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeScoreSectionPieChartResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeScoreSectionPieChartResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeScoreSectionRatioLineChartRequest : Tea.TeaModel {
    public var lang: String?

    public var beginTime: String?

    public var byPassEventCodes: String?

    public var endTime: String?

    public var mainEventCodes: String?

    public var regId: String?

    public var shuntEventCodes: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.beginTime != nil {
            map["beginTime"] = self.beginTime!
        }
        if self.byPassEventCodes != nil {
            map["byPassEventCodes"] = self.byPassEventCodes!
        }
        if self.endTime != nil {
            map["endTime"] = self.endTime!
        }
        if self.mainEventCodes != nil {
            map["mainEventCodes"] = self.mainEventCodes!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.shuntEventCodes != nil {
            map["shuntEventCodes"] = self.shuntEventCodes!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["beginTime"] as? String {
            self.beginTime = value
        }
        if let value = dict["byPassEventCodes"] as? String {
            self.byPassEventCodes = value
        }
        if let value = dict["endTime"] as? String {
            self.endTime = value
        }
        if let value = dict["mainEventCodes"] as? String {
            self.mainEventCodes = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["shuntEventCodes"] as? String {
            self.shuntEventCodes = value
        }
    }
}

public class DescribeScoreSectionRatioLineChartResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public class Series : Tea.TeaModel {
            public var data: [String]?

            public var name: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.data != nil {
                    map["data"] = self.data!
                }
                if self.name != nil {
                    map["name"] = self.name!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["data"] as? [String] {
                    self.data = value
                }
                if let value = dict["name"] as? String {
                    self.name = value
                }
            }
        }
        public class Xaxis : Tea.TeaModel {
            public var data: [String]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.data != nil {
                    map["data"] = self.data!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["data"] as? [String] {
                    self.data = value
                }
            }
        }
        public var series: [DescribeScoreSectionRatioLineChartResponseBody.ResultObject.Series]?

        public var xaxis: DescribeScoreSectionRatioLineChartResponseBody.ResultObject.Xaxis?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.xaxis?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.series != nil {
                var tmp : [Any] = []
                for k in self.series! {
                    tmp.append(k.toMap())
                }
                map["series"] = tmp
            }
            if self.xaxis != nil {
                map["xaxis"] = self.xaxis?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["series"] as? [Any?] {
                var tmp : [DescribeScoreSectionRatioLineChartResponseBody.ResultObject.Series] = []
                for v in value {
                    if v != nil {
                        var model = DescribeScoreSectionRatioLineChartResponseBody.ResultObject.Series()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.series = tmp
            }
            if let value = dict["xaxis"] as? [String: Any?] {
                var model = DescribeScoreSectionRatioLineChartResponseBody.ResultObject.Xaxis()
                model.fromMap(value)
                self.xaxis = model
            }
        }
    }
    public var requestId: String?

    public var resultObject: DescribeScoreSectionRatioLineChartResponseBody.ResultObject?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.resultObject?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? [String: Any?] {
            var model = DescribeScoreSectionRatioLineChartResponseBody.ResultObject()
            model.fromMap(value)
            self.resultObject = model
        }
    }
}

public class DescribeScoreSectionRatioLineChartResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeScoreSectionRatioLineChartResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeScoreSectionRatioLineChartResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeSelectItemRequest : Tea.TeaModel {
    public var lang: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeSelectItemResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public var monitorStatusList: [String]?

        public var taskIdList: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.monitorStatusList != nil {
                map["monitorStatusList"] = self.monitorStatusList!
            }
            if self.taskIdList != nil {
                map["taskIdList"] = self.taskIdList!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["monitorStatusList"] as? [String] {
                self.monitorStatusList = value
            }
            if let value = dict["taskIdList"] as? [String] {
                self.taskIdList = value
            }
        }
    }
    public var requestId: String?

    public var resultObject: DescribeSelectItemResponseBody.ResultObject?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.resultObject?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? [String: Any?] {
            var model = DescribeSelectItemResponseBody.ResultObject()
            model.fromMap(value)
            self.resultObject = model
        }
    }
}

public class DescribeSelectItemResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeSelectItemResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeSelectItemResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeServiceAppKeyRequest : Tea.TeaModel {
    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeServiceAppKeyResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: String?

    public var message: String?

    public var requestId: String?

    public var resultObject: Bool?

    public var uccess: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["httpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        if self.uccess != nil {
            map["uccess"] = self.uccess!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["httpStatusCode"] as? String {
            self.httpStatusCode = value
        }
        if let value = dict["message"] as? String {
            self.message = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
        if let value = dict["uccess"] as? Bool {
            self.uccess = value
        }
    }
}

public class DescribeServiceAppKeyResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeServiceAppKeyResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeServiceAppKeyResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeServiceCodeNameRequest : Tea.TeaModel {
    public var lang: String?

    public var tab: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.tab != nil {
            map["Tab"] = self.tab!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["Tab"] as? String {
            self.tab = value
        }
    }
}

public class DescribeServiceCodeNameResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: String?

    public var message: String?

    public var requestId: String?

    public var resultObject: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["ResultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? String {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["ResultObject"] as? String {
            self.resultObject = value
        }
    }
}

public class DescribeServiceCodeNameResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeServiceCodeNameResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeServiceCodeNameResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeServiceListRequest : Tea.TeaModel {
    public var lang: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeServiceListResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public var serviceCode: String?

        public var serviceName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.serviceCode != nil {
                map["serviceCode"] = self.serviceCode!
            }
            if self.serviceName != nil {
                map["serviceName"] = self.serviceName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["serviceCode"] as? String {
                self.serviceCode = value
            }
            if let value = dict["serviceName"] as? String {
                self.serviceName = value
            }
        }
    }
    public var requestId: String?

    public var resultObject: [DescribeServiceListResponseBody.ResultObject]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            var tmp : [Any] = []
            for k in self.resultObject! {
                tmp.append(k.toMap())
            }
            map["resultObject"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? [Any?] {
            var tmp : [DescribeServiceListResponseBody.ResultObject] = []
            for v in value {
                if v != nil {
                    var model = DescribeServiceListResponseBody.ResultObject()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.resultObject = tmp
        }
    }
}

public class DescribeServiceListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeServiceListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeServiceListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeSimulationPreditInfoRequest : Tea.TeaModel {
    public var lang: String?

    public var eventCode: String?

    public var regId: String?

    public var rulesStr: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.eventCode != nil {
            map["eventCode"] = self.eventCode!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.rulesStr != nil {
            map["rulesStr"] = self.rulesStr!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["eventCode"] as? String {
            self.eventCode = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["rulesStr"] as? String {
            self.rulesStr = value
        }
    }
}

public class DescribeSimulationPreditInfoResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
    }
}

public class DescribeSimulationPreditInfoResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeSimulationPreditInfoResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeSimulationPreditInfoResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeSimulationTaskCountRequest : Tea.TeaModel {
    public var lang: String?

    public var dataSourceConfig: String?

    public var dataSourceType: String?

    public var endTime: Int64?

    public var eventCode: String?

    public var filtersStr: String?

    public var regId: String?

    public var startTime: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.dataSourceConfig != nil {
            map["dataSourceConfig"] = self.dataSourceConfig!
        }
        if self.dataSourceType != nil {
            map["dataSourceType"] = self.dataSourceType!
        }
        if self.endTime != nil {
            map["endTime"] = self.endTime!
        }
        if self.eventCode != nil {
            map["eventCode"] = self.eventCode!
        }
        if self.filtersStr != nil {
            map["filtersStr"] = self.filtersStr!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.startTime != nil {
            map["startTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["dataSourceConfig"] as? String {
            self.dataSourceConfig = value
        }
        if let value = dict["dataSourceType"] as? String {
            self.dataSourceType = value
        }
        if let value = dict["endTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["eventCode"] as? String {
            self.eventCode = value
        }
        if let value = dict["filtersStr"] as? String {
            self.filtersStr = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["startTime"] as? Int64 {
            self.startTime = value
        }
    }
}

public class DescribeSimulationTaskCountResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
    }
}

public class DescribeSimulationTaskCountResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeSimulationTaskCountResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeSimulationTaskCountResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeSimulationTaskListRequest : Tea.TeaModel {
    public var lang: String?

    public var currentPage: String?

    public var id: String?

    public var name: String?

    public var pageSize: String?

    public var regId: String?

    public var title: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.currentPage != nil {
            map["currentPage"] = self.currentPage!
        }
        if self.id != nil {
            map["id"] = self.id!
        }
        if self.name != nil {
            map["name"] = self.name!
        }
        if self.pageSize != nil {
            map["pageSize"] = self.pageSize!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.title != nil {
            map["title"] = self.title!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["currentPage"] as? String {
            self.currentPage = value
        }
        if let value = dict["id"] as? String {
            self.id = value
        }
        if let value = dict["name"] as? String {
            self.name = value
        }
        if let value = dict["pageSize"] as? String {
            self.pageSize = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["title"] as? String {
            self.title = value
        }
    }
}

public class DescribeSimulationTaskListResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var currentPage: Int32?

    public var pageSize: Int32?

    public var resultObject: Bool?

    public var totalItem: Int32?

    public var totalPage: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.currentPage != nil {
            map["currentPage"] = self.currentPage!
        }
        if self.pageSize != nil {
            map["pageSize"] = self.pageSize!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        if self.totalItem != nil {
            map["totalItem"] = self.totalItem!
        }
        if self.totalPage != nil {
            map["totalPage"] = self.totalPage!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["currentPage"] as? Int32 {
            self.currentPage = value
        }
        if let value = dict["pageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
        if let value = dict["totalItem"] as? Int32 {
            self.totalItem = value
        }
        if let value = dict["totalPage"] as? Int32 {
            self.totalPage = value
        }
    }
}

public class DescribeSimulationTaskListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeSimulationTaskListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeSimulationTaskListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeSlsUrlConfigRequest : Tea.TeaModel {
    public var lang: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeSlsUrlConfigResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? String {
            self.resultObject = value
        }
    }
}

public class DescribeSlsUrlConfigResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeSlsUrlConfigResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeSlsUrlConfigResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeSupportRuleListRequest : Tea.TeaModel {
    public var lang: String?

    public var eventCode: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.eventCode != nil {
            map["eventCode"] = self.eventCode!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["eventCode"] as? String {
            self.eventCode = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeSupportRuleListResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
    }
}

public class DescribeSupportRuleListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeSupportRuleListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeSupportRuleListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeTagListRequest : Tea.TeaModel {
    public var id: String?

    public var lang: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.regId != nil {
            map["RegId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? String {
            self.id = value
        }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["RegId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeTagListResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: String?

    public var message: String?

    public var requestId: String?

    public var resultObject: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["ResultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? String {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["ResultObject"] as? String {
            self.resultObject = value
        }
    }
}

public class DescribeTagListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeTagListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeTagListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeTagsBarChartRequest : Tea.TeaModel {
    public var lang: String?

    public var beginTime: Int64?

    public var endTime: Int64?

    public var eventCodes: String?

    public var regId: String?

    public var result: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.beginTime != nil {
            map["beginTime"] = self.beginTime!
        }
        if self.endTime != nil {
            map["endTime"] = self.endTime!
        }
        if self.eventCodes != nil {
            map["eventCodes"] = self.eventCodes!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.result != nil {
            map["result"] = self.result!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["beginTime"] as? Int64 {
            self.beginTime = value
        }
        if let value = dict["endTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["eventCodes"] as? String {
            self.eventCodes = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["result"] as? String {
            self.result = value
        }
    }
}

public class DescribeTagsBarChartResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public class Series : Tea.TeaModel {
            public class Data : Tea.TeaModel {
                public var num: Int64?

                public var scale: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.num != nil {
                        map["num"] = self.num!
                    }
                    if self.scale != nil {
                        map["scale"] = self.scale!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["num"] as? Int64 {
                        self.num = value
                    }
                    if let value = dict["scale"] as? String {
                        self.scale = value
                    }
                }
            }
            public var data: [DescribeTagsBarChartResponseBody.ResultObject.Series.Data]?

            public var name: String?

            public var stack: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.data != nil {
                    var tmp : [Any] = []
                    for k in self.data! {
                        tmp.append(k.toMap())
                    }
                    map["data"] = tmp
                }
                if self.name != nil {
                    map["name"] = self.name!
                }
                if self.stack != nil {
                    map["stack"] = self.stack!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["data"] as? [Any?] {
                    var tmp : [DescribeTagsBarChartResponseBody.ResultObject.Series.Data] = []
                    for v in value {
                        if v != nil {
                            var model = DescribeTagsBarChartResponseBody.ResultObject.Series.Data()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.data = tmp
                }
                if let value = dict["name"] as? String {
                    self.name = value
                }
                if let value = dict["stack"] as? String {
                    self.stack = value
                }
            }
        }
        public class Xaxis : Tea.TeaModel {
            public var data: [String]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.data != nil {
                    map["data"] = self.data!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["data"] as? [String] {
                    self.data = value
                }
            }
        }
        public var series: [DescribeTagsBarChartResponseBody.ResultObject.Series]?

        public var xaxis: DescribeTagsBarChartResponseBody.ResultObject.Xaxis?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.xaxis?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.series != nil {
                var tmp : [Any] = []
                for k in self.series! {
                    tmp.append(k.toMap())
                }
                map["series"] = tmp
            }
            if self.xaxis != nil {
                map["xaxis"] = self.xaxis?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["series"] as? [Any?] {
                var tmp : [DescribeTagsBarChartResponseBody.ResultObject.Series] = []
                for v in value {
                    if v != nil {
                        var model = DescribeTagsBarChartResponseBody.ResultObject.Series()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.series = tmp
            }
            if let value = dict["xaxis"] as? [String: Any?] {
                var model = DescribeTagsBarChartResponseBody.ResultObject.Xaxis()
                model.fromMap(value)
                self.xaxis = model
            }
        }
    }
    public var code: String?

    public var httpStatusCode: String?

    public var message: String?

    public var requestId: String?

    public var resultObject: DescribeTagsBarChartResponseBody.ResultObject?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.resultObject?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["httpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject?.toMap()
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["httpStatusCode"] as? String {
            self.httpStatusCode = value
        }
        if let value = dict["message"] as? String {
            self.message = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? [String: Any?] {
            var model = DescribeTagsBarChartResponseBody.ResultObject()
            model.fromMap(value)
            self.resultObject = model
        }
        if let value = dict["success"] as? Bool {
            self.success = value
        }
    }
}

public class DescribeTagsBarChartResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeTagsBarChartResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeTagsBarChartResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeTagsFluctuationRequest : Tea.TeaModel {
    public var lang: String?

    public var eventCodes: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.eventCodes != nil {
            map["eventCodes"] = self.eventCodes!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["eventCodes"] as? String {
            self.eventCodes = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeTagsFluctuationResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public var tableName: String?

        public var todayNum: Int64?

        public var withinSevenDayNum: String?

        public var withinThirtyDayNum: String?

        public var withinThreeDayNum: String?

        public var yesterdayNum: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tableName != nil {
                map["tableName"] = self.tableName!
            }
            if self.todayNum != nil {
                map["todayNum"] = self.todayNum!
            }
            if self.withinSevenDayNum != nil {
                map["withinSevenDayNum"] = self.withinSevenDayNum!
            }
            if self.withinThirtyDayNum != nil {
                map["withinThirtyDayNum"] = self.withinThirtyDayNum!
            }
            if self.withinThreeDayNum != nil {
                map["withinThreeDayNum"] = self.withinThreeDayNum!
            }
            if self.yesterdayNum != nil {
                map["yesterdayNum"] = self.yesterdayNum!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tableName"] as? String {
                self.tableName = value
            }
            if let value = dict["todayNum"] as? Int64 {
                self.todayNum = value
            }
            if let value = dict["withinSevenDayNum"] as? String {
                self.withinSevenDayNum = value
            }
            if let value = dict["withinThirtyDayNum"] as? String {
                self.withinThirtyDayNum = value
            }
            if let value = dict["withinThreeDayNum"] as? String {
                self.withinThreeDayNum = value
            }
            if let value = dict["yesterdayNum"] as? Int64 {
                self.yesterdayNum = value
            }
        }
    }
    public var code: String?

    public var httpStatusCode: String?

    public var message: String?

    public var requestId: String?

    public var resultObject: [DescribeTagsFluctuationResponseBody.ResultObject]?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["httpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.resultObject != nil {
            var tmp : [Any] = []
            for k in self.resultObject! {
                tmp.append(k.toMap())
            }
            map["resultObject"] = tmp
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["httpStatusCode"] as? String {
            self.httpStatusCode = value
        }
        if let value = dict["message"] as? String {
            self.message = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? [Any?] {
            var tmp : [DescribeTagsFluctuationResponseBody.ResultObject] = []
            for v in value {
                if v != nil {
                    var model = DescribeTagsFluctuationResponseBody.ResultObject()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.resultObject = tmp
        }
        if let value = dict["success"] as? Bool {
            self.success = value
        }
    }
}

public class DescribeTagsFluctuationResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeTagsFluctuationResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeTagsFluctuationResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeTagsListRequest : Tea.TeaModel {
    public var lang: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeTagsListResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
    }
}

public class DescribeTagsListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeTagsListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeTagsListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeTagsNumLineChartRequest : Tea.TeaModel {
    public var lang: String?

    public var beginTime: String?

    public var byPassEventCodes: String?

    public var endTime: String?

    public var mainEventCodes: String?

    public var regId: String?

    public var shuntEventCodes: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.beginTime != nil {
            map["beginTime"] = self.beginTime!
        }
        if self.byPassEventCodes != nil {
            map["byPassEventCodes"] = self.byPassEventCodes!
        }
        if self.endTime != nil {
            map["endTime"] = self.endTime!
        }
        if self.mainEventCodes != nil {
            map["mainEventCodes"] = self.mainEventCodes!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.shuntEventCodes != nil {
            map["shuntEventCodes"] = self.shuntEventCodes!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["beginTime"] as? String {
            self.beginTime = value
        }
        if let value = dict["byPassEventCodes"] as? String {
            self.byPassEventCodes = value
        }
        if let value = dict["endTime"] as? String {
            self.endTime = value
        }
        if let value = dict["mainEventCodes"] as? String {
            self.mainEventCodes = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["shuntEventCodes"] as? String {
            self.shuntEventCodes = value
        }
    }
}

public class DescribeTagsNumLineChartResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public class Series : Tea.TeaModel {
            public var data: [String]?

            public var name: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.data != nil {
                    map["data"] = self.data!
                }
                if self.name != nil {
                    map["name"] = self.name!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["data"] as? [String] {
                    self.data = value
                }
                if let value = dict["name"] as? String {
                    self.name = value
                }
            }
        }
        public class Xaxis : Tea.TeaModel {
            public var data: [String]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.data != nil {
                    map["data"] = self.data!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["data"] as? [String] {
                    self.data = value
                }
            }
        }
        public var series: [DescribeTagsNumLineChartResponseBody.ResultObject.Series]?

        public var xaxis: DescribeTagsNumLineChartResponseBody.ResultObject.Xaxis?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.xaxis?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.series != nil {
                var tmp : [Any] = []
                for k in self.series! {
                    tmp.append(k.toMap())
                }
                map["series"] = tmp
            }
            if self.xaxis != nil {
                map["xaxis"] = self.xaxis?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["series"] as? [Any?] {
                var tmp : [DescribeTagsNumLineChartResponseBody.ResultObject.Series] = []
                for v in value {
                    if v != nil {
                        var model = DescribeTagsNumLineChartResponseBody.ResultObject.Series()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.series = tmp
            }
            if let value = dict["xaxis"] as? [String: Any?] {
                var model = DescribeTagsNumLineChartResponseBody.ResultObject.Xaxis()
                model.fromMap(value)
                self.xaxis = model
            }
        }
    }
    public var requestId: String?

    public var resultObject: DescribeTagsNumLineChartResponseBody.ResultObject?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.resultObject?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? [String: Any?] {
            var model = DescribeTagsNumLineChartResponseBody.ResultObject()
            model.fromMap(value)
            self.resultObject = model
        }
    }
}

public class DescribeTagsNumLineChartResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeTagsNumLineChartResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeTagsNumLineChartResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeTagsRatioLineChartRequest : Tea.TeaModel {
    public var lang: String?

    public var beginTime: Int64?

    public var byPassEventCodes: String?

    public var endTime: Int64?

    public var mainEventCodes: String?

    public var regId: String?

    public var shuntEventCodes: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.beginTime != nil {
            map["beginTime"] = self.beginTime!
        }
        if self.byPassEventCodes != nil {
            map["byPassEventCodes"] = self.byPassEventCodes!
        }
        if self.endTime != nil {
            map["endTime"] = self.endTime!
        }
        if self.mainEventCodes != nil {
            map["mainEventCodes"] = self.mainEventCodes!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.shuntEventCodes != nil {
            map["shuntEventCodes"] = self.shuntEventCodes!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["beginTime"] as? Int64 {
            self.beginTime = value
        }
        if let value = dict["byPassEventCodes"] as? String {
            self.byPassEventCodes = value
        }
        if let value = dict["endTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["mainEventCodes"] as? String {
            self.mainEventCodes = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["shuntEventCodes"] as? String {
            self.shuntEventCodes = value
        }
    }
}

public class DescribeTagsRatioLineChartResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public class Series : Tea.TeaModel {
            public var data: [String]?

            public var name: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.data != nil {
                    map["data"] = self.data!
                }
                if self.name != nil {
                    map["name"] = self.name!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["data"] as? [String] {
                    self.data = value
                }
                if let value = dict["name"] as? String {
                    self.name = value
                }
            }
        }
        public class Xaxis : Tea.TeaModel {
            public var data: [String]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.data != nil {
                    map["data"] = self.data!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["data"] as? [String] {
                    self.data = value
                }
            }
        }
        public var series: [DescribeTagsRatioLineChartResponseBody.ResultObject.Series]?

        public var xaxis: DescribeTagsRatioLineChartResponseBody.ResultObject.Xaxis?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.xaxis?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.series != nil {
                var tmp : [Any] = []
                for k in self.series! {
                    tmp.append(k.toMap())
                }
                map["series"] = tmp
            }
            if self.xaxis != nil {
                map["xaxis"] = self.xaxis?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["series"] as? [Any?] {
                var tmp : [DescribeTagsRatioLineChartResponseBody.ResultObject.Series] = []
                for v in value {
                    if v != nil {
                        var model = DescribeTagsRatioLineChartResponseBody.ResultObject.Series()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.series = tmp
            }
            if let value = dict["xaxis"] as? [String: Any?] {
                var model = DescribeTagsRatioLineChartResponseBody.ResultObject.Xaxis()
                model.fromMap(value)
                self.xaxis = model
            }
        }
    }
    public var requestId: String?

    public var resultObject: DescribeTagsRatioLineChartResponseBody.ResultObject?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.resultObject?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? [String: Any?] {
            var model = DescribeTagsRatioLineChartResponseBody.ResultObject()
            model.fromMap(value)
            self.resultObject = model
        }
    }
}

public class DescribeTagsRatioLineChartResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeTagsRatioLineChartResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeTagsRatioLineChartResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeTagsTrendRequest : Tea.TeaModel {
    public var lang: String?

    public var beginTime: Int64?

    public var endTime: Int64?

    public var eventCodes: String?

    public var regId: String?

    public var result: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.beginTime != nil {
            map["beginTime"] = self.beginTime!
        }
        if self.endTime != nil {
            map["endTime"] = self.endTime!
        }
        if self.eventCodes != nil {
            map["eventCodes"] = self.eventCodes!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.result != nil {
            map["result"] = self.result!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["beginTime"] as? Int64 {
            self.beginTime = value
        }
        if let value = dict["endTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["eventCodes"] as? String {
            self.eventCodes = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["result"] as? String {
            self.result = value
        }
    }
}

public class DescribeTagsTrendResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public class Series : Tea.TeaModel {
            public class Data : Tea.TeaModel {
                public var num: Int64?

                public var scale: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.num != nil {
                        map["num"] = self.num!
                    }
                    if self.scale != nil {
                        map["scale"] = self.scale!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["num"] as? Int64 {
                        self.num = value
                    }
                    if let value = dict["scale"] as? String {
                        self.scale = value
                    }
                }
            }
            public var data: [DescribeTagsTrendResponseBody.ResultObject.Series.Data]?

            public var name: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.data != nil {
                    var tmp : [Any] = []
                    for k in self.data! {
                        tmp.append(k.toMap())
                    }
                    map["data"] = tmp
                }
                if self.name != nil {
                    map["name"] = self.name!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["data"] as? [Any?] {
                    var tmp : [DescribeTagsTrendResponseBody.ResultObject.Series.Data] = []
                    for v in value {
                        if v != nil {
                            var model = DescribeTagsTrendResponseBody.ResultObject.Series.Data()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.data = tmp
                }
                if let value = dict["name"] as? String {
                    self.name = value
                }
            }
        }
        public class Xaxis : Tea.TeaModel {
            public var data: [String]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.data != nil {
                    map["data"] = self.data!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["data"] as? [String] {
                    self.data = value
                }
            }
        }
        public var series: [DescribeTagsTrendResponseBody.ResultObject.Series]?

        public var xaxis: DescribeTagsTrendResponseBody.ResultObject.Xaxis?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.xaxis?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.series != nil {
                var tmp : [Any] = []
                for k in self.series! {
                    tmp.append(k.toMap())
                }
                map["series"] = tmp
            }
            if self.xaxis != nil {
                map["xaxis"] = self.xaxis?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["series"] as? [Any?] {
                var tmp : [DescribeTagsTrendResponseBody.ResultObject.Series] = []
                for v in value {
                    if v != nil {
                        var model = DescribeTagsTrendResponseBody.ResultObject.Series()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.series = tmp
            }
            if let value = dict["xaxis"] as? [String: Any?] {
                var model = DescribeTagsTrendResponseBody.ResultObject.Xaxis()
                model.fromMap(value)
                self.xaxis = model
            }
        }
    }
    public var code: String?

    public var httpStatusCode: String?

    public var message: String?

    public var requestId: String?

    public var resultObject: DescribeTagsTrendResponseBody.ResultObject?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.resultObject?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["httpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject?.toMap()
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["httpStatusCode"] as? String {
            self.httpStatusCode = value
        }
        if let value = dict["message"] as? String {
            self.message = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? [String: Any?] {
            var model = DescribeTagsTrendResponseBody.ResultObject()
            model.fromMap(value)
            self.resultObject = model
        }
        if let value = dict["success"] as? Bool {
            self.success = value
        }
    }
}

public class DescribeTagsTrendResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeTagsTrendResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeTagsTrendResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeTaskListRequest : Tea.TeaModel {
    public var currentPage: String?

    public var isPage: Bool?

    public var lang: String?

    public var pageSize: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.currentPage != nil {
            map["CurrentPage"] = self.currentPage!
        }
        if self.isPage != nil {
            map["IsPage"] = self.isPage!
        }
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CurrentPage"] as? String {
            self.currentPage = value
        }
        if let value = dict["IsPage"] as? Bool {
            self.isPage = value
        }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["PageSize"] as? String {
            self.pageSize = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeTaskListResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public var completionTime: Int64?

        public var createTime: Int64?

        public var id: Int64?

        public var mark: Int32?

        public var remark: String?

        public var sceneName: String?

        public var status: String?

        public var taskLogId: Int64?

        public var taskType: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.completionTime != nil {
                map["completionTime"] = self.completionTime!
            }
            if self.createTime != nil {
                map["createTime"] = self.createTime!
            }
            if self.id != nil {
                map["id"] = self.id!
            }
            if self.mark != nil {
                map["mark"] = self.mark!
            }
            if self.remark != nil {
                map["remark"] = self.remark!
            }
            if self.sceneName != nil {
                map["sceneName"] = self.sceneName!
            }
            if self.status != nil {
                map["status"] = self.status!
            }
            if self.taskLogId != nil {
                map["taskLogId"] = self.taskLogId!
            }
            if self.taskType != nil {
                map["taskType"] = self.taskType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["completionTime"] as? Int64 {
                self.completionTime = value
            }
            if let value = dict["createTime"] as? Int64 {
                self.createTime = value
            }
            if let value = dict["id"] as? Int64 {
                self.id = value
            }
            if let value = dict["mark"] as? Int32 {
                self.mark = value
            }
            if let value = dict["remark"] as? String {
                self.remark = value
            }
            if let value = dict["sceneName"] as? String {
                self.sceneName = value
            }
            if let value = dict["status"] as? String {
                self.status = value
            }
            if let value = dict["taskLogId"] as? Int64 {
                self.taskLogId = value
            }
            if let value = dict["taskType"] as? String {
                self.taskType = value
            }
        }
    }
    public var requestId: String?

    public var currentPage: Int32?

    public var pageSize: Int32?

    public var resultObject: [DescribeTaskListResponseBody.ResultObject]?

    public var totalItem: Int32?

    public var totalPage: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.currentPage != nil {
            map["currentPage"] = self.currentPage!
        }
        if self.pageSize != nil {
            map["pageSize"] = self.pageSize!
        }
        if self.resultObject != nil {
            var tmp : [Any] = []
            for k in self.resultObject! {
                tmp.append(k.toMap())
            }
            map["resultObject"] = tmp
        }
        if self.totalItem != nil {
            map["totalItem"] = self.totalItem!
        }
        if self.totalPage != nil {
            map["totalPage"] = self.totalPage!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["currentPage"] as? Int32 {
            self.currentPage = value
        }
        if let value = dict["pageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["resultObject"] as? [Any?] {
            var tmp : [DescribeTaskListResponseBody.ResultObject] = []
            for v in value {
                if v != nil {
                    var model = DescribeTaskListResponseBody.ResultObject()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.resultObject = tmp
        }
        if let value = dict["totalItem"] as? Int32 {
            self.totalItem = value
        }
        if let value = dict["totalPage"] as? Int32 {
            self.totalPage = value
        }
    }
}

public class DescribeTaskListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeTaskListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeTaskListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeTaskLogListRequest : Tea.TeaModel {
    public var currentPage: String?

    public var isPage: Bool?

    public var lang: String?

    public var pageSize: String?

    public var taskId: String?

    public var taskLogId: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.currentPage != nil {
            map["CurrentPage"] = self.currentPage!
        }
        if self.isPage != nil {
            map["IsPage"] = self.isPage!
        }
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        if self.taskLogId != nil {
            map["TaskLogId"] = self.taskLogId!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CurrentPage"] as? String {
            self.currentPage = value
        }
        if let value = dict["IsPage"] as? Bool {
            self.isPage = value
        }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["PageSize"] as? String {
            self.pageSize = value
        }
        if let value = dict["TaskId"] as? String {
            self.taskId = value
        }
        if let value = dict["TaskLogId"] as? String {
            self.taskLogId = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeTaskLogListResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public var completionTime: Int64?

        public var createTime: Int64?

        public var id: Int64?

        public var remark: String?

        public var sceneName: String?

        public var status: String?

        public var taskType: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.completionTime != nil {
                map["completionTime"] = self.completionTime!
            }
            if self.createTime != nil {
                map["createTime"] = self.createTime!
            }
            if self.id != nil {
                map["id"] = self.id!
            }
            if self.remark != nil {
                map["remark"] = self.remark!
            }
            if self.sceneName != nil {
                map["sceneName"] = self.sceneName!
            }
            if self.status != nil {
                map["status"] = self.status!
            }
            if self.taskType != nil {
                map["taskType"] = self.taskType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["completionTime"] as? Int64 {
                self.completionTime = value
            }
            if let value = dict["createTime"] as? Int64 {
                self.createTime = value
            }
            if let value = dict["id"] as? Int64 {
                self.id = value
            }
            if let value = dict["remark"] as? String {
                self.remark = value
            }
            if let value = dict["sceneName"] as? String {
                self.sceneName = value
            }
            if let value = dict["status"] as? String {
                self.status = value
            }
            if let value = dict["taskType"] as? String {
                self.taskType = value
            }
        }
    }
    public var requestId: String?

    public var currentPage: Int32?

    public var pageSize: Int32?

    public var resultObject: [DescribeTaskLogListResponseBody.ResultObject]?

    public var totalItem: Int32?

    public var totalPage: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.currentPage != nil {
            map["currentPage"] = self.currentPage!
        }
        if self.pageSize != nil {
            map["pageSize"] = self.pageSize!
        }
        if self.resultObject != nil {
            var tmp : [Any] = []
            for k in self.resultObject! {
                tmp.append(k.toMap())
            }
            map["resultObject"] = tmp
        }
        if self.totalItem != nil {
            map["totalItem"] = self.totalItem!
        }
        if self.totalPage != nil {
            map["totalPage"] = self.totalPage!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["currentPage"] as? Int32 {
            self.currentPage = value
        }
        if let value = dict["pageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["resultObject"] as? [Any?] {
            var tmp : [DescribeTaskLogListResponseBody.ResultObject] = []
            for v in value {
                if v != nil {
                    var model = DescribeTaskLogListResponseBody.ResultObject()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.resultObject = tmp
        }
        if let value = dict["totalItem"] as? Int32 {
            self.totalItem = value
        }
        if let value = dict["totalPage"] as? Int32 {
            self.totalPage = value
        }
    }
}

public class DescribeTaskLogListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeTaskLogListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeTaskLogListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeTemplateCountRequest : Tea.TeaModel {
    public var lang: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeTemplateCountResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public var limit: Bool?

        public var maxTotalItem: Int32?

        public var totalItem: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.limit != nil {
                map["limit"] = self.limit!
            }
            if self.maxTotalItem != nil {
                map["maxTotalItem"] = self.maxTotalItem!
            }
            if self.totalItem != nil {
                map["totalItem"] = self.totalItem!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["limit"] as? Bool {
                self.limit = value
            }
            if let value = dict["maxTotalItem"] as? Int32 {
                self.maxTotalItem = value
            }
            if let value = dict["totalItem"] as? Int32 {
                self.totalItem = value
            }
        }
    }
    public var requestId: String?

    public var resultObject: DescribeTemplateCountResponseBody.ResultObject?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.resultObject?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? [String: Any?] {
            var model = DescribeTemplateCountResponseBody.ResultObject()
            model.fromMap(value)
            self.resultObject = model
        }
    }
}

public class DescribeTemplateCountResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeTemplateCountResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeTemplateCountResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeTemplateDownloadRequest : Tea.TeaModel {
    public var lang: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeTemplateDownloadResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var data: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.data != nil {
            map["data"] = self.data!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["data"] as? Bool {
            self.data = value
        }
    }
}

public class DescribeTemplateDownloadResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeTemplateDownloadResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeTemplateDownloadResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeTemplatePageListRequest : Tea.TeaModel {
    public var lang: String?

    public var currentPage: String?

    public var eventCodes: String?

    public var pageSize: String?

    public var regId: String?

    public var templateName: String?

    public var templateSearchItem: String?

    public var templateStatus: String?

    public var templateType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.currentPage != nil {
            map["currentPage"] = self.currentPage!
        }
        if self.eventCodes != nil {
            map["eventCodes"] = self.eventCodes!
        }
        if self.pageSize != nil {
            map["pageSize"] = self.pageSize!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.templateName != nil {
            map["templateName"] = self.templateName!
        }
        if self.templateSearchItem != nil {
            map["templateSearchItem"] = self.templateSearchItem!
        }
        if self.templateStatus != nil {
            map["templateStatus"] = self.templateStatus!
        }
        if self.templateType != nil {
            map["templateType"] = self.templateType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["currentPage"] as? String {
            self.currentPage = value
        }
        if let value = dict["eventCodes"] as? String {
            self.eventCodes = value
        }
        if let value = dict["pageSize"] as? String {
            self.pageSize = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["templateName"] as? String {
            self.templateName = value
        }
        if let value = dict["templateSearchItem"] as? String {
            self.templateSearchItem = value
        }
        if let value = dict["templateStatus"] as? String {
            self.templateStatus = value
        }
        if let value = dict["templateType"] as? String {
            self.templateType = value
        }
    }
}

public class DescribeTemplatePageListResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public var description_: String?

        public var eventCode: String?

        public var eventName: String?

        public var gmtCreate: Int64?

        public var gmtModified: Int64?

        public var id: Int64?

        public var ruleCount: Int32?

        public var templateCode: String?

        public var templateName: String?

        public var templateStatus: String?

        public var templateType: String?

        public var userCount: Int32?

        public var version: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.description_ != nil {
                map["description"] = self.description_!
            }
            if self.eventCode != nil {
                map["eventCode"] = self.eventCode!
            }
            if self.eventName != nil {
                map["eventName"] = self.eventName!
            }
            if self.gmtCreate != nil {
                map["gmtCreate"] = self.gmtCreate!
            }
            if self.gmtModified != nil {
                map["gmtModified"] = self.gmtModified!
            }
            if self.id != nil {
                map["id"] = self.id!
            }
            if self.ruleCount != nil {
                map["ruleCount"] = self.ruleCount!
            }
            if self.templateCode != nil {
                map["templateCode"] = self.templateCode!
            }
            if self.templateName != nil {
                map["templateName"] = self.templateName!
            }
            if self.templateStatus != nil {
                map["templateStatus"] = self.templateStatus!
            }
            if self.templateType != nil {
                map["templateType"] = self.templateType!
            }
            if self.userCount != nil {
                map["userCount"] = self.userCount!
            }
            if self.version != nil {
                map["version"] = self.version!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["description"] as? String {
                self.description_ = value
            }
            if let value = dict["eventCode"] as? String {
                self.eventCode = value
            }
            if let value = dict["eventName"] as? String {
                self.eventName = value
            }
            if let value = dict["gmtCreate"] as? Int64 {
                self.gmtCreate = value
            }
            if let value = dict["gmtModified"] as? Int64 {
                self.gmtModified = value
            }
            if let value = dict["id"] as? Int64 {
                self.id = value
            }
            if let value = dict["ruleCount"] as? Int32 {
                self.ruleCount = value
            }
            if let value = dict["templateCode"] as? String {
                self.templateCode = value
            }
            if let value = dict["templateName"] as? String {
                self.templateName = value
            }
            if let value = dict["templateStatus"] as? String {
                self.templateStatus = value
            }
            if let value = dict["templateType"] as? String {
                self.templateType = value
            }
            if let value = dict["userCount"] as? Int32 {
                self.userCount = value
            }
            if let value = dict["version"] as? Int32 {
                self.version = value
            }
        }
    }
    public var currentPage: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var resultObject: [DescribeTemplatePageListResponseBody.ResultObject]?

    public var totalItem: Int32?

    public var totalPage: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.currentPage != nil {
            map["currentPage"] = self.currentPage!
        }
        if self.pageSize != nil {
            map["pageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.resultObject != nil {
            var tmp : [Any] = []
            for k in self.resultObject! {
                tmp.append(k.toMap())
            }
            map["resultObject"] = tmp
        }
        if self.totalItem != nil {
            map["totalItem"] = self.totalItem!
        }
        if self.totalPage != nil {
            map["totalPage"] = self.totalPage!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["currentPage"] as? Int32 {
            self.currentPage = value
        }
        if let value = dict["pageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? [Any?] {
            var tmp : [DescribeTemplatePageListResponseBody.ResultObject] = []
            for v in value {
                if v != nil {
                    var model = DescribeTemplatePageListResponseBody.ResultObject()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.resultObject = tmp
        }
        if let value = dict["totalItem"] as? Int32 {
            self.totalItem = value
        }
        if let value = dict["totalPage"] as? Int32 {
            self.totalPage = value
        }
    }
}

public class DescribeTemplatePageListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeTemplatePageListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeTemplatePageListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeUsedServiceRequest : Tea.TeaModel {
    public var lang: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeUsedServiceResponseBody : Tea.TeaModel {
    public class Records : Tea.TeaModel {
        public var enName: String?

        public var name: String?

        public var serviceCode: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.enName != nil {
                map["enName"] = self.enName!
            }
            if self.name != nil {
                map["name"] = self.name!
            }
            if self.serviceCode != nil {
                map["serviceCode"] = self.serviceCode!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["enName"] as? String {
                self.enName = value
            }
            if let value = dict["name"] as? String {
                self.name = value
            }
            if let value = dict["serviceCode"] as? String {
                self.serviceCode = value
            }
        }
    }
    public var requestId: String?

    public var records: [DescribeUsedServiceResponseBody.Records]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.records != nil {
            var tmp : [Any] = []
            for k in self.records! {
                tmp.append(k.toMap())
            }
            map["records"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["records"] as? [Any?] {
            var tmp : [DescribeUsedServiceResponseBody.Records] = []
            for v in value {
                if v != nil {
                    var model = DescribeUsedServiceResponseBody.Records()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.records = tmp
        }
    }
}

public class DescribeUsedServiceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeUsedServiceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeUsedServiceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeUserInfoRequest : Tea.TeaModel {
    public var lang: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeUserInfoResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public var clientIp: String?

        public var subId: String?

        public var userId: Int64?

        public var userName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.clientIp != nil {
                map["clientIp"] = self.clientIp!
            }
            if self.subId != nil {
                map["subId"] = self.subId!
            }
            if self.userId != nil {
                map["userId"] = self.userId!
            }
            if self.userName != nil {
                map["userName"] = self.userName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["clientIp"] as? String {
                self.clientIp = value
            }
            if let value = dict["subId"] as? String {
                self.subId = value
            }
            if let value = dict["userId"] as? Int64 {
                self.userId = value
            }
            if let value = dict["userName"] as? String {
                self.userName = value
            }
        }
    }
    public var code: String?

    public var httpStatusCode: String?

    public var message: String?

    public var resultObject: DescribeUserInfoResponseBody.ResultObject?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.resultObject?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["httpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject?.toMap()
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["httpStatusCode"] as? String {
            self.httpStatusCode = value
        }
        if let value = dict["message"] as? String {
            self.message = value
        }
        if let value = dict["resultObject"] as? [String: Any?] {
            var model = DescribeUserInfoResponseBody.ResultObject()
            model.fromMap(value)
            self.resultObject = model
        }
        if let value = dict["success"] as? Bool {
            self.success = value
        }
    }
}

public class DescribeUserInfoResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeUserInfoResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeUserInfoResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeVariableBindDetailRequest : Tea.TeaModel {
    public var lang: String?

    public var defineId: Int64?

    public var id: Int64?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.defineId != nil {
            map["defineId"] = self.defineId!
        }
        if self.id != nil {
            map["id"] = self.id!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["defineId"] as? Int64 {
            self.defineId = value
        }
        if let value = dict["id"] as? Int64 {
            self.id = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeVariableBindDetailResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public class Params : Tea.TeaModel {
            public var eventFieldName: String?

            public var required_: Bool?

            public var variableName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.eventFieldName != nil {
                    map["eventFieldName"] = self.eventFieldName!
                }
                if self.required_ != nil {
                    map["required"] = self.required_!
                }
                if self.variableName != nil {
                    map["variableName"] = self.variableName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["eventFieldName"] as? String {
                    self.eventFieldName = value
                }
                if let value = dict["required"] as? Bool {
                    self.required_ = value
                }
                if let value = dict["variableName"] as? String {
                    self.variableName = value
                }
            }
        }
        public class RelationRules : Tea.TeaModel {
            public var key: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.key != nil {
                    map["key"] = self.key!
                }
                if self.value != nil {
                    map["value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["key"] as? String {
                    self.key = value
                }
                if let value = dict["value"] as? String {
                    self.value = value
                }
            }
        }
        public var allowModify: Bool?

        public var defineId: Int64?

        public var defineTitle: String?

        public var description_: String?

        public var eventCode: String?

        public var id: Int64?

        public var params: [DescribeVariableBindDetailResponseBody.ResultObject.Params]?

        public var relationRules: [DescribeVariableBindDetailResponseBody.ResultObject.RelationRules]?

        public var title: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.allowModify != nil {
                map["allowModify"] = self.allowModify!
            }
            if self.defineId != nil {
                map["defineId"] = self.defineId!
            }
            if self.defineTitle != nil {
                map["defineTitle"] = self.defineTitle!
            }
            if self.description_ != nil {
                map["description"] = self.description_!
            }
            if self.eventCode != nil {
                map["eventCode"] = self.eventCode!
            }
            if self.id != nil {
                map["id"] = self.id!
            }
            if self.params != nil {
                var tmp : [Any] = []
                for k in self.params! {
                    tmp.append(k.toMap())
                }
                map["params"] = tmp
            }
            if self.relationRules != nil {
                var tmp : [Any] = []
                for k in self.relationRules! {
                    tmp.append(k.toMap())
                }
                map["relationRules"] = tmp
            }
            if self.title != nil {
                map["title"] = self.title!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["allowModify"] as? Bool {
                self.allowModify = value
            }
            if let value = dict["defineId"] as? Int64 {
                self.defineId = value
            }
            if let value = dict["defineTitle"] as? String {
                self.defineTitle = value
            }
            if let value = dict["description"] as? String {
                self.description_ = value
            }
            if let value = dict["eventCode"] as? String {
                self.eventCode = value
            }
            if let value = dict["id"] as? Int64 {
                self.id = value
            }
            if let value = dict["params"] as? [Any?] {
                var tmp : [DescribeVariableBindDetailResponseBody.ResultObject.Params] = []
                for v in value {
                    if v != nil {
                        var model = DescribeVariableBindDetailResponseBody.ResultObject.Params()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.params = tmp
            }
            if let value = dict["relationRules"] as? [Any?] {
                var tmp : [DescribeVariableBindDetailResponseBody.ResultObject.RelationRules] = []
                for v in value {
                    if v != nil {
                        var model = DescribeVariableBindDetailResponseBody.ResultObject.RelationRules()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.relationRules = tmp
            }
            if let value = dict["title"] as? String {
                self.title = value
            }
        }
    }
    public var requestId: String?

    public var resultObject: DescribeVariableBindDetailResponseBody.ResultObject?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.resultObject?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? [String: Any?] {
            var model = DescribeVariableBindDetailResponseBody.ResultObject()
            model.fromMap(value)
            self.resultObject = model
        }
    }
}

public class DescribeVariableBindDetailResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeVariableBindDetailResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeVariableBindDetailResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeVariableDetailRequest : Tea.TeaModel {
    public var lang: String?

    public var id: Int64?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.id != nil {
            map["id"] = self.id!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["id"] as? Int64 {
            self.id = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeVariableDetailResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public class BaseInfo : Tea.TeaModel {
            public var allowBind: String?

            public var chargingMode: String?

            public var chargingModeDesc: String?

            public var creator: String?

            public var dataDisplay: String?

            public var dataThreshold: String?

            public var deductionFactor: Int32?

            public var description_: String?

            public var frontAllowBind: String?

            public var gmtCreate: Int64?

            public var gmtModified: Int64?

            public var id: Int64?

            public var inputRequired: String?

            public var inputs: String?

            public var inputsDesc: String?

            public var invokeKey: String?

            public var invokeRt: Int32?

            public var invokeSuccessRate: String?

            public var invokeTimes: Int64?

            public var lastModifiedOperator: String?

            public var name: String?

            public var outputs: String?

            public var outputsDesc: String?

            public var scene: [String]?

            public var sceneDesc: [String]?

            public var showOrder: String?

            public var source: String?

            public var sourceDesc: String?

            public var status: String?

            public var supportRegions: [String]?

            public var title: String?

            public var type: String?

            public var typeDesc: String?

            public var xLabel: String?

            public var yLabel: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.allowBind != nil {
                    map["allowBind"] = self.allowBind!
                }
                if self.chargingMode != nil {
                    map["chargingMode"] = self.chargingMode!
                }
                if self.chargingModeDesc != nil {
                    map["chargingModeDesc"] = self.chargingModeDesc!
                }
                if self.creator != nil {
                    map["creator"] = self.creator!
                }
                if self.dataDisplay != nil {
                    map["dataDisplay"] = self.dataDisplay!
                }
                if self.dataThreshold != nil {
                    map["dataThreshold"] = self.dataThreshold!
                }
                if self.deductionFactor != nil {
                    map["deductionFactor"] = self.deductionFactor!
                }
                if self.description_ != nil {
                    map["description"] = self.description_!
                }
                if self.frontAllowBind != nil {
                    map["frontAllowBind"] = self.frontAllowBind!
                }
                if self.gmtCreate != nil {
                    map["gmtCreate"] = self.gmtCreate!
                }
                if self.gmtModified != nil {
                    map["gmtModified"] = self.gmtModified!
                }
                if self.id != nil {
                    map["id"] = self.id!
                }
                if self.inputRequired != nil {
                    map["inputRequired"] = self.inputRequired!
                }
                if self.inputs != nil {
                    map["inputs"] = self.inputs!
                }
                if self.inputsDesc != nil {
                    map["inputsDesc"] = self.inputsDesc!
                }
                if self.invokeKey != nil {
                    map["invokeKey"] = self.invokeKey!
                }
                if self.invokeRt != nil {
                    map["invokeRt"] = self.invokeRt!
                }
                if self.invokeSuccessRate != nil {
                    map["invokeSuccessRate"] = self.invokeSuccessRate!
                }
                if self.invokeTimes != nil {
                    map["invokeTimes"] = self.invokeTimes!
                }
                if self.lastModifiedOperator != nil {
                    map["lastModifiedOperator"] = self.lastModifiedOperator!
                }
                if self.name != nil {
                    map["name"] = self.name!
                }
                if self.outputs != nil {
                    map["outputs"] = self.outputs!
                }
                if self.outputsDesc != nil {
                    map["outputsDesc"] = self.outputsDesc!
                }
                if self.scene != nil {
                    map["scene"] = self.scene!
                }
                if self.sceneDesc != nil {
                    map["sceneDesc"] = self.sceneDesc!
                }
                if self.showOrder != nil {
                    map["showOrder"] = self.showOrder!
                }
                if self.source != nil {
                    map["source"] = self.source!
                }
                if self.sourceDesc != nil {
                    map["sourceDesc"] = self.sourceDesc!
                }
                if self.status != nil {
                    map["status"] = self.status!
                }
                if self.supportRegions != nil {
                    map["supportRegions"] = self.supportRegions!
                }
                if self.title != nil {
                    map["title"] = self.title!
                }
                if self.type != nil {
                    map["type"] = self.type!
                }
                if self.typeDesc != nil {
                    map["typeDesc"] = self.typeDesc!
                }
                if self.xLabel != nil {
                    map["xLabel"] = self.xLabel!
                }
                if self.yLabel != nil {
                    map["yLabel"] = self.yLabel!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["allowBind"] as? String {
                    self.allowBind = value
                }
                if let value = dict["chargingMode"] as? String {
                    self.chargingMode = value
                }
                if let value = dict["chargingModeDesc"] as? String {
                    self.chargingModeDesc = value
                }
                if let value = dict["creator"] as? String {
                    self.creator = value
                }
                if let value = dict["dataDisplay"] as? String {
                    self.dataDisplay = value
                }
                if let value = dict["dataThreshold"] as? String {
                    self.dataThreshold = value
                }
                if let value = dict["deductionFactor"] as? Int32 {
                    self.deductionFactor = value
                }
                if let value = dict["description"] as? String {
                    self.description_ = value
                }
                if let value = dict["frontAllowBind"] as? String {
                    self.frontAllowBind = value
                }
                if let value = dict["gmtCreate"] as? Int64 {
                    self.gmtCreate = value
                }
                if let value = dict["gmtModified"] as? Int64 {
                    self.gmtModified = value
                }
                if let value = dict["id"] as? Int64 {
                    self.id = value
                }
                if let value = dict["inputRequired"] as? String {
                    self.inputRequired = value
                }
                if let value = dict["inputs"] as? String {
                    self.inputs = value
                }
                if let value = dict["inputsDesc"] as? String {
                    self.inputsDesc = value
                }
                if let value = dict["invokeKey"] as? String {
                    self.invokeKey = value
                }
                if let value = dict["invokeRt"] as? Int32 {
                    self.invokeRt = value
                }
                if let value = dict["invokeSuccessRate"] as? String {
                    self.invokeSuccessRate = value
                }
                if let value = dict["invokeTimes"] as? Int64 {
                    self.invokeTimes = value
                }
                if let value = dict["lastModifiedOperator"] as? String {
                    self.lastModifiedOperator = value
                }
                if let value = dict["name"] as? String {
                    self.name = value
                }
                if let value = dict["outputs"] as? String {
                    self.outputs = value
                }
                if let value = dict["outputsDesc"] as? String {
                    self.outputsDesc = value
                }
                if let value = dict["scene"] as? [String] {
                    self.scene = value
                }
                if let value = dict["sceneDesc"] as? [String] {
                    self.sceneDesc = value
                }
                if let value = dict["showOrder"] as? String {
                    self.showOrder = value
                }
                if let value = dict["source"] as? String {
                    self.source = value
                }
                if let value = dict["sourceDesc"] as? String {
                    self.sourceDesc = value
                }
                if let value = dict["status"] as? String {
                    self.status = value
                }
                if let value = dict["supportRegions"] as? [String] {
                    self.supportRegions = value
                }
                if let value = dict["title"] as? String {
                    self.title = value
                }
                if let value = dict["type"] as? String {
                    self.type = value
                }
                if let value = dict["typeDesc"] as? String {
                    self.typeDesc = value
                }
                if let value = dict["xLabel"] as? String {
                    self.xLabel = value
                }
                if let value = dict["yLabel"] as? String {
                    self.yLabel = value
                }
            }
        }
        public var baseInfo: DescribeVariableDetailResponseBody.ResultObject.BaseInfo?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.baseInfo?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.baseInfo != nil {
                map["baseInfo"] = self.baseInfo?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["baseInfo"] as? [String: Any?] {
                var model = DescribeVariableDetailResponseBody.ResultObject.BaseInfo()
                model.fromMap(value)
                self.baseInfo = model
            }
        }
    }
    public var requestId: String?

    public var resultObject: DescribeVariableDetailResponseBody.ResultObject?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.resultObject?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? [String: Any?] {
            var model = DescribeVariableDetailResponseBody.ResultObject()
            model.fromMap(value)
            self.resultObject = model
        }
    }
}

public class DescribeVariableDetailResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeVariableDetailResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeVariableDetailResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeVariableFeeRequest : Tea.TeaModel {
    public var lang: String?

    public var ids: [Int64]?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.ids != nil {
            map["ids"] = self.ids!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["ids"] as? [Int64] {
            self.ids = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeVariableFeeResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
    }
}

public class DescribeVariableFeeResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeVariableFeeResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeVariableFeeResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeVariableListRequest : Tea.TeaModel {
    public var lang: String?

    public var createType: String?

    public var currentPage: String?

    public var pageSize: String?

    public var refObjId: String?

    public var regId: String?

    public var sourceType: String?

    public var type: String?

    public var typesStr: String?

    public var value: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.createType != nil {
            map["createType"] = self.createType!
        }
        if self.currentPage != nil {
            map["currentPage"] = self.currentPage!
        }
        if self.pageSize != nil {
            map["pageSize"] = self.pageSize!
        }
        if self.refObjId != nil {
            map["refObjId"] = self.refObjId!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.sourceType != nil {
            map["sourceType"] = self.sourceType!
        }
        if self.type != nil {
            map["type"] = self.type!
        }
        if self.typesStr != nil {
            map["typesStr"] = self.typesStr!
        }
        if self.value != nil {
            map["value"] = self.value!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["createType"] as? String {
            self.createType = value
        }
        if let value = dict["currentPage"] as? String {
            self.currentPage = value
        }
        if let value = dict["pageSize"] as? String {
            self.pageSize = value
        }
        if let value = dict["refObjId"] as? String {
            self.refObjId = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["sourceType"] as? String {
            self.sourceType = value
        }
        if let value = dict["type"] as? String {
            self.type = value
        }
        if let value = dict["typesStr"] as? String {
            self.typesStr = value
        }
        if let value = dict["value"] as? String {
            self.value = value
        }
    }
}

public class DescribeVariableListResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public var capacity: Int64?

        public var defineId: String?

        public var description_: String?

        public var extendInfo: [String: Any]?

        public var gmtCreate: Int64?

        public var gmtModified: Int64?

        public var id: Int64?

        public var leftCapacity: Int64?

        public var name: String?

        public var outputsType: String?

        public var refObjId: String?

        public var refObjName: String?

        public var refObjType: String?

        public var sourceType: String?

        public var title: String?

        public var type: String?

        public var userId: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.capacity != nil {
                map["capacity"] = self.capacity!
            }
            if self.defineId != nil {
                map["defineId"] = self.defineId!
            }
            if self.description_ != nil {
                map["description"] = self.description_!
            }
            if self.extendInfo != nil {
                map["extendInfo"] = self.extendInfo!
            }
            if self.gmtCreate != nil {
                map["gmtCreate"] = self.gmtCreate!
            }
            if self.gmtModified != nil {
                map["gmtModified"] = self.gmtModified!
            }
            if self.id != nil {
                map["id"] = self.id!
            }
            if self.leftCapacity != nil {
                map["leftCapacity"] = self.leftCapacity!
            }
            if self.name != nil {
                map["name"] = self.name!
            }
            if self.outputsType != nil {
                map["outputsType"] = self.outputsType!
            }
            if self.refObjId != nil {
                map["refObjId"] = self.refObjId!
            }
            if self.refObjName != nil {
                map["refObjName"] = self.refObjName!
            }
            if self.refObjType != nil {
                map["refObjType"] = self.refObjType!
            }
            if self.sourceType != nil {
                map["sourceType"] = self.sourceType!
            }
            if self.title != nil {
                map["title"] = self.title!
            }
            if self.type != nil {
                map["type"] = self.type!
            }
            if self.userId != nil {
                map["userId"] = self.userId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["capacity"] as? Int64 {
                self.capacity = value
            }
            if let value = dict["defineId"] as? String {
                self.defineId = value
            }
            if let value = dict["description"] as? String {
                self.description_ = value
            }
            if let value = dict["extendInfo"] as? [String: Any] {
                self.extendInfo = value
            }
            if let value = dict["gmtCreate"] as? Int64 {
                self.gmtCreate = value
            }
            if let value = dict["gmtModified"] as? Int64 {
                self.gmtModified = value
            }
            if let value = dict["id"] as? Int64 {
                self.id = value
            }
            if let value = dict["leftCapacity"] as? Int64 {
                self.leftCapacity = value
            }
            if let value = dict["name"] as? String {
                self.name = value
            }
            if let value = dict["outputsType"] as? String {
                self.outputsType = value
            }
            if let value = dict["refObjId"] as? String {
                self.refObjId = value
            }
            if let value = dict["refObjName"] as? String {
                self.refObjName = value
            }
            if let value = dict["refObjType"] as? String {
                self.refObjType = value
            }
            if let value = dict["sourceType"] as? String {
                self.sourceType = value
            }
            if let value = dict["title"] as? String {
                self.title = value
            }
            if let value = dict["type"] as? String {
                self.type = value
            }
            if let value = dict["userId"] as? Int64 {
                self.userId = value
            }
        }
    }
    public var requestId: String?

    public var currentPage: Int32?

    public var pageSize: Int32?

    public var resultObject: [DescribeVariableListResponseBody.ResultObject]?

    public var totalItem: Int32?

    public var totalPage: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.currentPage != nil {
            map["currentPage"] = self.currentPage!
        }
        if self.pageSize != nil {
            map["pageSize"] = self.pageSize!
        }
        if self.resultObject != nil {
            var tmp : [Any] = []
            for k in self.resultObject! {
                tmp.append(k.toMap())
            }
            map["resultObject"] = tmp
        }
        if self.totalItem != nil {
            map["totalItem"] = self.totalItem!
        }
        if self.totalPage != nil {
            map["totalPage"] = self.totalPage!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["currentPage"] as? Int32 {
            self.currentPage = value
        }
        if let value = dict["pageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["resultObject"] as? [Any?] {
            var tmp : [DescribeVariableListResponseBody.ResultObject] = []
            for v in value {
                if v != nil {
                    var model = DescribeVariableListResponseBody.ResultObject()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.resultObject = tmp
        }
        if let value = dict["totalItem"] as? Int32 {
            self.totalItem = value
        }
        if let value = dict["totalPage"] as? Int32 {
            self.totalPage = value
        }
    }
}

public class DescribeVariableListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeVariableListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeVariableListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeVariableMarketListRequest : Tea.TeaModel {
    public var lang: String?

    public var chargingMode: String?

    public var currentPage: Int32?

    public var pageSize: Int32?

    public var paging: String?

    public var queryContent: String?

    public var regId: String?

    public var scenesStr: String?

    public var source: String?

    public var title: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.chargingMode != nil {
            map["chargingMode"] = self.chargingMode!
        }
        if self.currentPage != nil {
            map["currentPage"] = self.currentPage!
        }
        if self.pageSize != nil {
            map["pageSize"] = self.pageSize!
        }
        if self.paging != nil {
            map["paging"] = self.paging!
        }
        if self.queryContent != nil {
            map["queryContent"] = self.queryContent!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.scenesStr != nil {
            map["scenesStr"] = self.scenesStr!
        }
        if self.source != nil {
            map["source"] = self.source!
        }
        if self.title != nil {
            map["title"] = self.title!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["chargingMode"] as? String {
            self.chargingMode = value
        }
        if let value = dict["currentPage"] as? Int32 {
            self.currentPage = value
        }
        if let value = dict["pageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["paging"] as? String {
            self.paging = value
        }
        if let value = dict["queryContent"] as? String {
            self.queryContent = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["scenesStr"] as? String {
            self.scenesStr = value
        }
        if let value = dict["source"] as? String {
            self.source = value
        }
        if let value = dict["title"] as? String {
            self.title = value
        }
    }
}

public class DescribeVariableMarketListResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var currentPage: Int32?

    public var pageSize: Int32?

    public var resultObject: Bool?

    public var totalItem: Int32?

    public var totalPage: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.currentPage != nil {
            map["currentPage"] = self.currentPage!
        }
        if self.pageSize != nil {
            map["pageSize"] = self.pageSize!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        if self.totalItem != nil {
            map["totalItem"] = self.totalItem!
        }
        if self.totalPage != nil {
            map["totalPage"] = self.totalPage!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["currentPage"] as? Int32 {
            self.currentPage = value
        }
        if let value = dict["pageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
        if let value = dict["totalItem"] as? Int32 {
            self.totalItem = value
        }
        if let value = dict["totalPage"] as? Int32 {
            self.totalPage = value
        }
    }
}

public class DescribeVariableMarketListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeVariableMarketListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeVariableMarketListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeVariableSceneListRequest : Tea.TeaModel {
    public var lang: String?

    public var bizType: String?

    public var configKey: String?

    public var currentPage: String?

    public var pageSize: String?

    public var paging: Bool?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.bizType != nil {
            map["bizType"] = self.bizType!
        }
        if self.configKey != nil {
            map["configKey"] = self.configKey!
        }
        if self.currentPage != nil {
            map["currentPage"] = self.currentPage!
        }
        if self.pageSize != nil {
            map["pageSize"] = self.pageSize!
        }
        if self.paging != nil {
            map["paging"] = self.paging!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["bizType"] as? String {
            self.bizType = value
        }
        if let value = dict["configKey"] as? String {
            self.configKey = value
        }
        if let value = dict["currentPage"] as? String {
            self.currentPage = value
        }
        if let value = dict["pageSize"] as? String {
            self.pageSize = value
        }
        if let value = dict["paging"] as? Bool {
            self.paging = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DescribeVariableSceneListResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public var bizType: String?

        public var configKey: String?

        public var configValue: String?

        public var creator: String?

        public var description_: String?

        public var gmtCreate: Int64?

        public var gmtModified: Int64?

        public var id: Int64?

        public var lastModifiedOperator: String?

        public var status: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.bizType != nil {
                map["bizType"] = self.bizType!
            }
            if self.configKey != nil {
                map["configKey"] = self.configKey!
            }
            if self.configValue != nil {
                map["configValue"] = self.configValue!
            }
            if self.creator != nil {
                map["creator"] = self.creator!
            }
            if self.description_ != nil {
                map["description"] = self.description_!
            }
            if self.gmtCreate != nil {
                map["gmtCreate"] = self.gmtCreate!
            }
            if self.gmtModified != nil {
                map["gmtModified"] = self.gmtModified!
            }
            if self.id != nil {
                map["id"] = self.id!
            }
            if self.lastModifiedOperator != nil {
                map["lastModifiedOperator"] = self.lastModifiedOperator!
            }
            if self.status != nil {
                map["status"] = self.status!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["bizType"] as? String {
                self.bizType = value
            }
            if let value = dict["configKey"] as? String {
                self.configKey = value
            }
            if let value = dict["configValue"] as? String {
                self.configValue = value
            }
            if let value = dict["creator"] as? String {
                self.creator = value
            }
            if let value = dict["description"] as? String {
                self.description_ = value
            }
            if let value = dict["gmtCreate"] as? Int64 {
                self.gmtCreate = value
            }
            if let value = dict["gmtModified"] as? Int64 {
                self.gmtModified = value
            }
            if let value = dict["id"] as? Int64 {
                self.id = value
            }
            if let value = dict["lastModifiedOperator"] as? String {
                self.lastModifiedOperator = value
            }
            if let value = dict["status"] as? String {
                self.status = value
            }
        }
    }
    public var requestId: String?

    public var currentPage: Int32?

    public var pageSize: Int32?

    public var resultObject: [DescribeVariableSceneListResponseBody.ResultObject]?

    public var totalItem: Int32?

    public var totalPage: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.currentPage != nil {
            map["currentPage"] = self.currentPage!
        }
        if self.pageSize != nil {
            map["pageSize"] = self.pageSize!
        }
        if self.resultObject != nil {
            var tmp : [Any] = []
            for k in self.resultObject! {
                tmp.append(k.toMap())
            }
            map["resultObject"] = tmp
        }
        if self.totalItem != nil {
            map["totalItem"] = self.totalItem!
        }
        if self.totalPage != nil {
            map["totalPage"] = self.totalPage!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["currentPage"] as? Int32 {
            self.currentPage = value
        }
        if let value = dict["pageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["resultObject"] as? [Any?] {
            var tmp : [DescribeVariableSceneListResponseBody.ResultObject] = []
            for v in value {
                if v != nil {
                    var model = DescribeVariableSceneListResponseBody.ResultObject()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.resultObject = tmp
        }
        if let value = dict["totalItem"] as? Int32 {
            self.totalItem = value
        }
        if let value = dict["totalPage"] as? Int32 {
            self.totalPage = value
        }
    }
}

public class DescribeVariableSceneListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeVariableSceneListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeVariableSceneListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DownloadSmapleBatchRequest : Tea.TeaModel {
    public var lang: String?

    public var batchUuid: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.batchUuid != nil {
            map["batchUuid"] = self.batchUuid!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["batchUuid"] as? String {
            self.batchUuid = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class DownloadSmapleBatchResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public var fileDownloadURL: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.fileDownloadURL != nil {
                map["fileDownloadURL"] = self.fileDownloadURL!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["fileDownloadURL"] as? String {
                self.fileDownloadURL = value
            }
        }
    }
    public var requestId: String?

    public var resultObject: DownloadSmapleBatchResponseBody.ResultObject?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.resultObject?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? [String: Any?] {
            var model = DownloadSmapleBatchResponseBody.ResultObject()
            model.fromMap(value)
            self.resultObject = model
        }
    }
}

public class DownloadSmapleBatchResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DownloadSmapleBatchResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DownloadSmapleBatchResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ExpressionTestRequest : Tea.TeaModel {
    public var lang: String?

    public var expression: String?

    public var expressionVariable: String?

    public var expressionVariableIds: String?

    public var id: Int64?

    public var regId: String?

    public var scene: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.expression != nil {
            map["expression"] = self.expression!
        }
        if self.expressionVariable != nil {
            map["expressionVariable"] = self.expressionVariable!
        }
        if self.expressionVariableIds != nil {
            map["expressionVariableIds"] = self.expressionVariableIds!
        }
        if self.id != nil {
            map["id"] = self.id!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.scene != nil {
            map["scene"] = self.scene!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["expression"] as? String {
            self.expression = value
        }
        if let value = dict["expressionVariable"] as? String {
            self.expressionVariable = value
        }
        if let value = dict["expressionVariableIds"] as? String {
            self.expressionVariableIds = value
        }
        if let value = dict["id"] as? Int64 {
            self.id = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["scene"] as? String {
            self.scene = value
        }
    }
}

public class ExpressionTestResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
    }
}

public class ExpressionTestResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ExpressionTestResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ExpressionTestResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class FileUploadRequest : Tea.TeaModel {
    public var fileName: String?

    public var fileUrl: String?

    public var lang: String?

    public var tab: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.fileName != nil {
            map["FileName"] = self.fileName!
        }
        if self.fileUrl != nil {
            map["FileUrl"] = self.fileUrl!
        }
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.tab != nil {
            map["Tab"] = self.tab!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["FileName"] as? String {
            self.fileName = value
        }
        if let value = dict["FileUrl"] as? String {
            self.fileUrl = value
        }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["Tab"] as? String {
            self.tab = value
        }
    }
}

public class FileUploadResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: String?

    public var message: String?

    public var requestId: String?

    public var resultObject: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["ResultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? String {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["ResultObject"] as? String {
            self.resultObject = value
        }
    }
}

public class FileUploadResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: FileUploadResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = FileUploadResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ImportFieldRequest : Tea.TeaModel {
    public var fileUrl: String?

    public var lang: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.fileUrl != nil {
            map["FileUrl"] = self.fileUrl!
        }
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.regId != nil {
            map["RegId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["FileUrl"] as? String {
            self.fileUrl = value
        }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["RegId"] as? String {
            self.regId = value
        }
    }
}

public class ImportFieldResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public var failFieldNames: String?

        public var successNum: Int32?

        public var totalNum: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.failFieldNames != nil {
                map["FailFieldNames"] = self.failFieldNames!
            }
            if self.successNum != nil {
                map["SuccessNum"] = self.successNum!
            }
            if self.totalNum != nil {
                map["TotalNum"] = self.totalNum!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["FailFieldNames"] as? String {
                self.failFieldNames = value
            }
            if let value = dict["SuccessNum"] as? Int32 {
                self.successNum = value
            }
            if let value = dict["TotalNum"] as? Int32 {
                self.totalNum = value
            }
        }
    }
    public var code: String?

    public var httpStatusCode: String?

    public var message: String?

    public var requestId: String?

    public var resultObject: ImportFieldResponseBody.ResultObject?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.resultObject?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["ResultObject"] = self.resultObject?.toMap()
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? String {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["ResultObject"] as? [String: Any?] {
            var model = ImportFieldResponseBody.ResultObject()
            model.fromMap(value)
            self.resultObject = model
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ImportFieldResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ImportFieldResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ImportFieldResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ImportNameListRequest : Tea.TeaModel {
    public var lang: String?

    public var createType: String?

    public var data: String?

    public var description_: String?

    public var importType: String?

    public var memo: String?

    public var nameListType: String?

    public var regId: String?

    public var title: String?

    public var variableId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.createType != nil {
            map["createType"] = self.createType!
        }
        if self.data != nil {
            map["data"] = self.data!
        }
        if self.description_ != nil {
            map["description"] = self.description_!
        }
        if self.importType != nil {
            map["importType"] = self.importType!
        }
        if self.memo != nil {
            map["memo"] = self.memo!
        }
        if self.nameListType != nil {
            map["nameListType"] = self.nameListType!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.title != nil {
            map["title"] = self.title!
        }
        if self.variableId != nil {
            map["variableId"] = self.variableId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["createType"] as? String {
            self.createType = value
        }
        if let value = dict["data"] as? String {
            self.data = value
        }
        if let value = dict["description"] as? String {
            self.description_ = value
        }
        if let value = dict["importType"] as? String {
            self.importType = value
        }
        if let value = dict["memo"] as? String {
            self.memo = value
        }
        if let value = dict["nameListType"] as? String {
            self.nameListType = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["title"] as? String {
            self.title = value
        }
        if let value = dict["variableId"] as? Int64 {
            self.variableId = value
        }
    }
}

public class ImportNameListResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
    }
}

public class ImportNameListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ImportNameListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ImportNameListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ImportTemplateEventRequest : Tea.TeaModel {
    public var lang: String?

    public var eventTemplateIds: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.eventTemplateIds != nil {
            map["eventTemplateIds"] = self.eventTemplateIds!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["eventTemplateIds"] as? String {
            self.eventTemplateIds = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class ImportTemplateEventResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var data: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.data != nil {
            map["data"] = self.data!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["data"] as? Bool {
            self.data = value
        }
    }
}

public class ImportTemplateEventResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ImportTemplateEventResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ImportTemplateEventResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListVariableDefineRequest : Tea.TeaModel {
    public var lang: String?

    public var allowBind: String?

    public var chargingMode: String?

    public var currentPage: Int32?

    public var pageSize: Int32?

    public var paging: String?

    public var queryContent: String?

    public var regId: String?

    public var roleType: String?

    public var scenesStr: String?

    public var source: String?

    public var status: String?

    public var title: String?

    public var typesStr: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.allowBind != nil {
            map["allowBind"] = self.allowBind!
        }
        if self.chargingMode != nil {
            map["chargingMode"] = self.chargingMode!
        }
        if self.currentPage != nil {
            map["currentPage"] = self.currentPage!
        }
        if self.pageSize != nil {
            map["pageSize"] = self.pageSize!
        }
        if self.paging != nil {
            map["paging"] = self.paging!
        }
        if self.queryContent != nil {
            map["queryContent"] = self.queryContent!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.roleType != nil {
            map["roleType"] = self.roleType!
        }
        if self.scenesStr != nil {
            map["scenesStr"] = self.scenesStr!
        }
        if self.source != nil {
            map["source"] = self.source!
        }
        if self.status != nil {
            map["status"] = self.status!
        }
        if self.title != nil {
            map["title"] = self.title!
        }
        if self.typesStr != nil {
            map["typesStr"] = self.typesStr!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["allowBind"] as? String {
            self.allowBind = value
        }
        if let value = dict["chargingMode"] as? String {
            self.chargingMode = value
        }
        if let value = dict["currentPage"] as? Int32 {
            self.currentPage = value
        }
        if let value = dict["pageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["paging"] as? String {
            self.paging = value
        }
        if let value = dict["queryContent"] as? String {
            self.queryContent = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["roleType"] as? String {
            self.roleType = value
        }
        if let value = dict["scenesStr"] as? String {
            self.scenesStr = value
        }
        if let value = dict["source"] as? String {
            self.source = value
        }
        if let value = dict["status"] as? String {
            self.status = value
        }
        if let value = dict["title"] as? String {
            self.title = value
        }
        if let value = dict["typesStr"] as? String {
            self.typesStr = value
        }
    }
}

public class ListVariableDefineResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var currentPage: Int32?

    public var pageSize: Int32?

    public var resultObject: Bool?

    public var totalItem: Int32?

    public var totalPage: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.currentPage != nil {
            map["currentPage"] = self.currentPage!
        }
        if self.pageSize != nil {
            map["pageSize"] = self.pageSize!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        if self.totalItem != nil {
            map["totalItem"] = self.totalItem!
        }
        if self.totalPage != nil {
            map["totalPage"] = self.totalPage!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["currentPage"] as? Int32 {
            self.currentPage = value
        }
        if let value = dict["pageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
        if let value = dict["totalItem"] as? Int32 {
            self.totalItem = value
        }
        if let value = dict["totalPage"] as? Int32 {
            self.totalPage = value
        }
    }
}

public class ListVariableDefineResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListVariableDefineResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListVariableDefineResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModelDeleteRequest : Tea.TeaModel {
    public var modelName: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.modelName != nil {
            map["ModelName"] = self.modelName!
        }
        if self.regId != nil {
            map["RegId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ModelName"] as? String {
            self.modelName = value
        }
        if let value = dict["RegId"] as? String {
            self.regId = value
        }
    }
}

public class ModelDeleteResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["ResultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["ResultObject"] as? Bool {
            self.resultObject = value
        }
    }
}

public class ModelDeleteResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModelDeleteResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModelDeleteResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModelFileUploadRequest : Tea.TeaModel {
    public var objectName: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.objectName != nil {
            map["ObjectName"] = self.objectName!
        }
        if self.regId != nil {
            map["RegId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ObjectName"] as? String {
            self.objectName = value
        }
        if let value = dict["RegId"] as? String {
            self.regId = value
        }
    }
}

public class ModelFileUploadResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["ResultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["ResultObject"] as? Bool {
            self.resultObject = value
        }
    }
}

public class ModelFileUploadResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModelFileUploadResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModelFileUploadResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModelIsUsingRequest : Tea.TeaModel {
    public var modelCode: String?

    public var modelId: String?

    public var modelName: String?

    public var regId: String?

    public var status: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.modelCode != nil {
            map["ModelCode"] = self.modelCode!
        }
        if self.modelId != nil {
            map["ModelId"] = self.modelId!
        }
        if self.modelName != nil {
            map["ModelName"] = self.modelName!
        }
        if self.regId != nil {
            map["RegId"] = self.regId!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ModelCode"] as? String {
            self.modelCode = value
        }
        if let value = dict["ModelId"] as? String {
            self.modelId = value
        }
        if let value = dict["ModelName"] as? String {
            self.modelName = value
        }
        if let value = dict["RegId"] as? String {
            self.regId = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
    }
}

public class ModelIsUsingResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["ResultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["ResultObject"] as? Bool {
            self.resultObject = value
        }
    }
}

public class ModelIsUsingResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModelIsUsingResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModelIsUsingResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModelNameIsDuplicationRequest : Tea.TeaModel {
    public var modelName: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.modelName != nil {
            map["ModelName"] = self.modelName!
        }
        if self.regId != nil {
            map["RegId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ModelName"] as? String {
            self.modelName = value
        }
        if let value = dict["RegId"] as? String {
            self.regId = value
        }
    }
}

public class ModelNameIsDuplicationResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["ResultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["ResultObject"] as? Bool {
            self.resultObject = value
        }
    }
}

public class ModelNameIsDuplicationResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModelNameIsDuplicationResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModelNameIsDuplicationResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModelSampleDownloadRequest : Tea.TeaModel {
    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.regId != nil {
            map["RegId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RegId"] as? String {
            self.regId = value
        }
    }
}

public class ModelSampleDownloadResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["ResultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["ResultObject"] as? Bool {
            self.resultObject = value
        }
    }
}

public class ModelSampleDownloadResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModelSampleDownloadResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModelSampleDownloadResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyAppKeyRequest : Tea.TeaModel {
    public var lang: String?

    public var appKey: String?

    public var memo: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.appKey != nil {
            map["appKey"] = self.appKey!
        }
        if self.memo != nil {
            map["memo"] = self.memo!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["appKey"] as? String {
            self.appKey = value
        }
        if let value = dict["memo"] as? String {
            self.memo = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class ModifyAppKeyResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var data: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.data != nil {
            map["data"] = self.data!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["data"] as? Bool {
            self.data = value
        }
    }
}

public class ModifyAppKeyResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyAppKeyResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyAppKeyResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyCustVariableRequest : Tea.TeaModel {
    public var lang: String?

    public var condition: String?

    public var dataVersion: Int64?

    public var description_: String?

    public var eventCodes: String?

    public var id: Int64?

    public var name: String?

    public var outputs: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.condition != nil {
            map["condition"] = self.condition!
        }
        if self.dataVersion != nil {
            map["dataVersion"] = self.dataVersion!
        }
        if self.description_ != nil {
            map["description"] = self.description_!
        }
        if self.eventCodes != nil {
            map["eventCodes"] = self.eventCodes!
        }
        if self.id != nil {
            map["id"] = self.id!
        }
        if self.name != nil {
            map["name"] = self.name!
        }
        if self.outputs != nil {
            map["outputs"] = self.outputs!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["condition"] as? String {
            self.condition = value
        }
        if let value = dict["dataVersion"] as? Int64 {
            self.dataVersion = value
        }
        if let value = dict["description"] as? String {
            self.description_ = value
        }
        if let value = dict["eventCodes"] as? String {
            self.eventCodes = value
        }
        if let value = dict["id"] as? Int64 {
            self.id = value
        }
        if let value = dict["name"] as? String {
            self.name = value
        }
        if let value = dict["outputs"] as? String {
            self.outputs = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class ModifyCustVariableResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public var failType: String?

        public var message: String?

        public var success: Bool?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.failType != nil {
                map["failType"] = self.failType!
            }
            if self.message != nil {
                map["message"] = self.message!
            }
            if self.success != nil {
                map["success"] = self.success!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["failType"] as? String {
                self.failType = value
            }
            if let value = dict["message"] as? String {
                self.message = value
            }
            if let value = dict["success"] as? Bool {
                self.success = value
            }
        }
    }
    public var requestId: String?

    public var resultObject: [ModifyCustVariableResponseBody.ResultObject]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            var tmp : [Any] = []
            for k in self.resultObject! {
                tmp.append(k.toMap())
            }
            map["resultObject"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? [Any?] {
            var tmp : [ModifyCustVariableResponseBody.ResultObject] = []
            for v in value {
                if v != nil {
                    var model = ModifyCustVariableResponseBody.ResultObject()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.resultObject = tmp
        }
    }
}

public class ModifyCustVariableResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyCustVariableResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyCustVariableResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyEventRequest : Tea.TeaModel {
    public var lang: String?

    public var bizVersion: Int32?

    public var createType: String?

    public var eventCode: String?

    public var eventName: String?

    public var inputFieldsStr: String?

    public var memo: String?

    public var regId: String?

    public var templateType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.bizVersion != nil {
            map["bizVersion"] = self.bizVersion!
        }
        if self.createType != nil {
            map["createType"] = self.createType!
        }
        if self.eventCode != nil {
            map["eventCode"] = self.eventCode!
        }
        if self.eventName != nil {
            map["eventName"] = self.eventName!
        }
        if self.inputFieldsStr != nil {
            map["inputFieldsStr"] = self.inputFieldsStr!
        }
        if self.memo != nil {
            map["memo"] = self.memo!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.templateType != nil {
            map["templateType"] = self.templateType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["bizVersion"] as? Int32 {
            self.bizVersion = value
        }
        if let value = dict["createType"] as? String {
            self.createType = value
        }
        if let value = dict["eventCode"] as? String {
            self.eventCode = value
        }
        if let value = dict["eventName"] as? String {
            self.eventName = value
        }
        if let value = dict["inputFieldsStr"] as? String {
            self.inputFieldsStr = value
        }
        if let value = dict["memo"] as? String {
            self.memo = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["templateType"] as? String {
            self.templateType = value
        }
    }
}

public class ModifyEventResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
    }
}

public class ModifyEventResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyEventResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyEventResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyEventStatusRequest : Tea.TeaModel {
    public var lang: String?

    public var createType: String?

    public var eventCode: String?

    public var fromEventSatus: String?

    public var regId: String?

    public var toEventSatus: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.createType != nil {
            map["createType"] = self.createType!
        }
        if self.eventCode != nil {
            map["eventCode"] = self.eventCode!
        }
        if self.fromEventSatus != nil {
            map["fromEventSatus"] = self.fromEventSatus!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.toEventSatus != nil {
            map["toEventSatus"] = self.toEventSatus!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["createType"] as? String {
            self.createType = value
        }
        if let value = dict["eventCode"] as? String {
            self.eventCode = value
        }
        if let value = dict["fromEventSatus"] as? String {
            self.fromEventSatus = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["toEventSatus"] as? String {
            self.toEventSatus = value
        }
    }
}

public class ModifyEventStatusResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
    }
}

public class ModifyEventStatusResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyEventStatusResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyEventStatusResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyExpressionVariableRequest : Tea.TeaModel {
    public var lang: String?

    public var dataVersion: Int64?

    public var description_: String?

    public var eventCode: String?

    public var expression: String?

    public var expressionTitle: String?

    public var expressionVariable: String?

    public var id: Int64?

    public var name: String?

    public var outlier: String?

    public var outputs: String?

    public var regId: String?

    public var title: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.dataVersion != nil {
            map["dataVersion"] = self.dataVersion!
        }
        if self.description_ != nil {
            map["description"] = self.description_!
        }
        if self.eventCode != nil {
            map["eventCode"] = self.eventCode!
        }
        if self.expression != nil {
            map["expression"] = self.expression!
        }
        if self.expressionTitle != nil {
            map["expressionTitle"] = self.expressionTitle!
        }
        if self.expressionVariable != nil {
            map["expressionVariable"] = self.expressionVariable!
        }
        if self.id != nil {
            map["id"] = self.id!
        }
        if self.name != nil {
            map["name"] = self.name!
        }
        if self.outlier != nil {
            map["outlier"] = self.outlier!
        }
        if self.outputs != nil {
            map["outputs"] = self.outputs!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.title != nil {
            map["title"] = self.title!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["dataVersion"] as? Int64 {
            self.dataVersion = value
        }
        if let value = dict["description"] as? String {
            self.description_ = value
        }
        if let value = dict["eventCode"] as? String {
            self.eventCode = value
        }
        if let value = dict["expression"] as? String {
            self.expression = value
        }
        if let value = dict["expressionTitle"] as? String {
            self.expressionTitle = value
        }
        if let value = dict["expressionVariable"] as? String {
            self.expressionVariable = value
        }
        if let value = dict["id"] as? Int64 {
            self.id = value
        }
        if let value = dict["name"] as? String {
            self.name = value
        }
        if let value = dict["outlier"] as? String {
            self.outlier = value
        }
        if let value = dict["outputs"] as? String {
            self.outputs = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["title"] as? String {
            self.title = value
        }
    }
}

public class ModifyExpressionVariableResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
    }
}

public class ModifyExpressionVariableResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyExpressionVariableResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyExpressionVariableResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyFieldRequest : Tea.TeaModel {
    public var lang: String?

    public var classify: String?

    public var description_: String?

    public var enumData: String?

    public var id: Int64?

    public var name: String?

    public var regId: String?

    public var title: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.classify != nil {
            map["classify"] = self.classify!
        }
        if self.description_ != nil {
            map["description"] = self.description_!
        }
        if self.enumData != nil {
            map["enumData"] = self.enumData!
        }
        if self.id != nil {
            map["id"] = self.id!
        }
        if self.name != nil {
            map["name"] = self.name!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.title != nil {
            map["title"] = self.title!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["classify"] as? String {
            self.classify = value
        }
        if let value = dict["description"] as? String {
            self.description_ = value
        }
        if let value = dict["enumData"] as? String {
            self.enumData = value
        }
        if let value = dict["id"] as? Int64 {
            self.id = value
        }
        if let value = dict["name"] as? String {
            self.name = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["title"] as? String {
            self.title = value
        }
    }
}

public class ModifyFieldResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
    }
}

public class ModifyFieldResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyFieldResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyFieldResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyRulePriorityRequest : Tea.TeaModel {
    public var lang: String?

    public var consoleRuleId: Int64?

    public var priority: Int32?

    public var regId: String?

    public var ruleId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.consoleRuleId != nil {
            map["consoleRuleId"] = self.consoleRuleId!
        }
        if self.priority != nil {
            map["priority"] = self.priority!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.ruleId != nil {
            map["ruleId"] = self.ruleId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["consoleRuleId"] as? Int64 {
            self.consoleRuleId = value
        }
        if let value = dict["priority"] as? Int32 {
            self.priority = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["ruleId"] as? Int64 {
            self.ruleId = value
        }
    }
}

public class ModifyRulePriorityResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
    }
}

public class ModifyRulePriorityResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyRulePriorityResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyRulePriorityResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyRuleStatusRequest : Tea.TeaModel {
    public var lang: String?

    public var applyUserId: String?

    public var applyUserName: String?

    public var auditRemark: String?

    public var auditUserId: String?

    public var auditUserName: String?

    public var consoleRuleId: Int64?

    public var eventType: String?

    public var regId: String?

    public var ruleAuditType: String?

    public var ruleId: String?

    public var ruleVersionId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.applyUserId != nil {
            map["applyUserId"] = self.applyUserId!
        }
        if self.applyUserName != nil {
            map["applyUserName"] = self.applyUserName!
        }
        if self.auditRemark != nil {
            map["auditRemark"] = self.auditRemark!
        }
        if self.auditUserId != nil {
            map["auditUserId"] = self.auditUserId!
        }
        if self.auditUserName != nil {
            map["auditUserName"] = self.auditUserName!
        }
        if self.consoleRuleId != nil {
            map["consoleRuleId"] = self.consoleRuleId!
        }
        if self.eventType != nil {
            map["eventType"] = self.eventType!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.ruleAuditType != nil {
            map["ruleAuditType"] = self.ruleAuditType!
        }
        if self.ruleId != nil {
            map["ruleId"] = self.ruleId!
        }
        if self.ruleVersionId != nil {
            map["ruleVersionId"] = self.ruleVersionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["applyUserId"] as? String {
            self.applyUserId = value
        }
        if let value = dict["applyUserName"] as? String {
            self.applyUserName = value
        }
        if let value = dict["auditRemark"] as? String {
            self.auditRemark = value
        }
        if let value = dict["auditUserId"] as? String {
            self.auditUserId = value
        }
        if let value = dict["auditUserName"] as? String {
            self.auditUserName = value
        }
        if let value = dict["consoleRuleId"] as? Int64 {
            self.consoleRuleId = value
        }
        if let value = dict["eventType"] as? String {
            self.eventType = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["ruleAuditType"] as? String {
            self.ruleAuditType = value
        }
        if let value = dict["ruleId"] as? String {
            self.ruleId = value
        }
        if let value = dict["ruleVersionId"] as? Int64 {
            self.ruleVersionId = value
        }
    }
}

public class ModifyRuleStatusResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
    }
}

public class ModifyRuleStatusResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyRuleStatusResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyRuleStatusResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class OpenConsoleSlsRequest : Tea.TeaModel {
    public var lang: String?

    public var regId: String?

    public var scene: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.scene != nil {
            map["scene"] = self.scene!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["scene"] as? String {
            self.scene = value
        }
    }
}

public class OpenConsoleSlsResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? String {
            self.resultObject = value
        }
    }
}

public class OpenConsoleSlsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: OpenConsoleSlsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = OpenConsoleSlsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class OperateFavoriteVariableRequest : Tea.TeaModel {
    public var lang: String?

    public var id: Int64?

    public var operate: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.id != nil {
            map["id"] = self.id!
        }
        if self.operate != nil {
            map["operate"] = self.operate!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["id"] as? Int64 {
            self.id = value
        }
        if let value = dict["operate"] as? String {
            self.operate = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class OperateFavoriteVariableResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
    }
}

public class OperateFavoriteVariableResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: OperateFavoriteVariableResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = OperateFavoriteVariableResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class PermissionCheckRequest : Tea.TeaModel {
    public var lang: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.regId != nil {
            map["RegId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["RegId"] as? String {
            self.regId = value
        }
    }
}

public class PermissionCheckResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: String?

    public var message: String?

    public var requestId: String?

    public var resultObject: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["ResultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? String {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["ResultObject"] as? String {
            self.resultObject = value
        }
    }
}

public class PermissionCheckResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: PermissionCheckResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = PermissionCheckResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class PocCreateTaskRequest : Tea.TeaModel {
    public var dateFormat: String?

    public var lang: String?

    public var regId: String?

    public var taskName: String?

    public var token: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dateFormat != nil {
            map["DateFormat"] = self.dateFormat!
        }
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.regId != nil {
            map["RegId"] = self.regId!
        }
        if self.taskName != nil {
            map["TaskName"] = self.taskName!
        }
        if self.token != nil {
            map["Token"] = self.token!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DateFormat"] as? String {
            self.dateFormat = value
        }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["RegId"] as? String {
            self.regId = value
        }
        if let value = dict["TaskName"] as? String {
            self.taskName = value
        }
        if let value = dict["Token"] as? String {
            self.token = value
        }
    }
}

public class PocCreateTaskResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: String?

    public var httpStatusCode: String?

    public var message: String?

    public var requestId: String?

    public var success: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? String {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? String {
            self.success = value
        }
    }
}

public class PocCreateTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: PocCreateTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = PocCreateTaskResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class PocGetDownloadUrlRequest : Tea.TeaModel {
    public var lang: String?

    public var token: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.token != nil {
            map["Token"] = self.token!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["Token"] as? String {
            self.token = value
        }
    }
}

public class PocGetDownloadUrlResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: String?

    public var httpStatusCode: String?

    public var message: String?

    public var requestId: String?

    public var success: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? String {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? String {
            self.success = value
        }
    }
}

public class PocGetDownloadUrlResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: PocGetDownloadUrlResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = PocGetDownloadUrlResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class PocGetTokenRequest : Tea.TeaModel {
    public var lang: String?

    public var regId: String?

    public var serviceCode: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.regId != nil {
            map["RegId"] = self.regId!
        }
        if self.serviceCode != nil {
            map["ServiceCode"] = self.serviceCode!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["RegId"] as? String {
            self.regId = value
        }
        if let value = dict["ServiceCode"] as? String {
            self.serviceCode = value
        }
    }
}

public class PocGetTokenResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: String?

    public var httpStatusCode: String?

    public var message: String?

    public var requestId: String?

    public var success: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? String {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? String {
            self.success = value
        }
    }
}

public class PocGetTokenResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: PocGetTokenResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = PocGetTokenResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class PocSendDataRequest : Tea.TeaModel {
    public var batchNo: Int64?

    public var lang: String?

    public var paramsList: String?

    public var regId: String?

    public var token: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.batchNo != nil {
            map["BatchNo"] = self.batchNo!
        }
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.paramsList != nil {
            map["ParamsList"] = self.paramsList!
        }
        if self.regId != nil {
            map["RegId"] = self.regId!
        }
        if self.token != nil {
            map["Token"] = self.token!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BatchNo"] as? Int64 {
            self.batchNo = value
        }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["ParamsList"] as? String {
            self.paramsList = value
        }
        if let value = dict["RegId"] as? String {
            self.regId = value
        }
        if let value = dict["Token"] as? String {
            self.token = value
        }
    }
}

public class PocSendDataResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: String?

    public var httpStatusCode: String?

    public var message: String?

    public var requestId: String?

    public var success: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? String {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? String {
            self.success = value
        }
    }
}

public class PocSendDataResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: PocSendDataResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = PocSendDataResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryAuthRuleDetailByRuleIdRequest : Tea.TeaModel {
    public var lang: String?

    public var consoleRuleId: Int64?

    public var regId: String?

    public var ruleId: String?

    public var ruleVersionId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.consoleRuleId != nil {
            map["consoleRuleId"] = self.consoleRuleId!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.ruleId != nil {
            map["ruleId"] = self.ruleId!
        }
        if self.ruleVersionId != nil {
            map["ruleVersionId"] = self.ruleVersionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["consoleRuleId"] as? Int64 {
            self.consoleRuleId = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["ruleId"] as? String {
            self.ruleId = value
        }
        if let value = dict["ruleVersionId"] as? Int64 {
            self.ruleVersionId = value
        }
    }
}

public class QueryAuthRuleDetailByRuleIdResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public var auditId: Int64?

        public var authType: String?

        public var authUsers: String?

        public var consoleRuleId: Int64?

        public var eventCode: String?

        public var eventName: String?

        public var gmtCreate: Int64?

        public var gmtModified: Int64?

        public var logicExpression: String?

        public var memo: String?

        public var priority: Int64?

        public var ruleActionMap: [String: String]?

        public var ruleActions: String?

        public var ruleAuthType: String?

        public var ruleExpressions: String?

        public var ruleId: String?

        public var ruleName: String?

        public var ruleStatus: String?

        public var ruleType: String?

        public var ruleVersionId: Int64?

        public var templateType: String?

        public var version: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.auditId != nil {
                map["auditId"] = self.auditId!
            }
            if self.authType != nil {
                map["authType"] = self.authType!
            }
            if self.authUsers != nil {
                map["authUsers"] = self.authUsers!
            }
            if self.consoleRuleId != nil {
                map["consoleRuleId"] = self.consoleRuleId!
            }
            if self.eventCode != nil {
                map["eventCode"] = self.eventCode!
            }
            if self.eventName != nil {
                map["eventName"] = self.eventName!
            }
            if self.gmtCreate != nil {
                map["gmtCreate"] = self.gmtCreate!
            }
            if self.gmtModified != nil {
                map["gmtModified"] = self.gmtModified!
            }
            if self.logicExpression != nil {
                map["logicExpression"] = self.logicExpression!
            }
            if self.memo != nil {
                map["memo"] = self.memo!
            }
            if self.priority != nil {
                map["priority"] = self.priority!
            }
            if self.ruleActionMap != nil {
                map["ruleActionMap"] = self.ruleActionMap!
            }
            if self.ruleActions != nil {
                map["ruleActions"] = self.ruleActions!
            }
            if self.ruleAuthType != nil {
                map["ruleAuthType"] = self.ruleAuthType!
            }
            if self.ruleExpressions != nil {
                map["ruleExpressions"] = self.ruleExpressions!
            }
            if self.ruleId != nil {
                map["ruleId"] = self.ruleId!
            }
            if self.ruleName != nil {
                map["ruleName"] = self.ruleName!
            }
            if self.ruleStatus != nil {
                map["ruleStatus"] = self.ruleStatus!
            }
            if self.ruleType != nil {
                map["ruleType"] = self.ruleType!
            }
            if self.ruleVersionId != nil {
                map["ruleVersionId"] = self.ruleVersionId!
            }
            if self.templateType != nil {
                map["templateType"] = self.templateType!
            }
            if self.version != nil {
                map["version"] = self.version!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["auditId"] as? Int64 {
                self.auditId = value
            }
            if let value = dict["authType"] as? String {
                self.authType = value
            }
            if let value = dict["authUsers"] as? String {
                self.authUsers = value
            }
            if let value = dict["consoleRuleId"] as? Int64 {
                self.consoleRuleId = value
            }
            if let value = dict["eventCode"] as? String {
                self.eventCode = value
            }
            if let value = dict["eventName"] as? String {
                self.eventName = value
            }
            if let value = dict["gmtCreate"] as? Int64 {
                self.gmtCreate = value
            }
            if let value = dict["gmtModified"] as? Int64 {
                self.gmtModified = value
            }
            if let value = dict["logicExpression"] as? String {
                self.logicExpression = value
            }
            if let value = dict["memo"] as? String {
                self.memo = value
            }
            if let value = dict["priority"] as? Int64 {
                self.priority = value
            }
            if let value = dict["ruleActionMap"] as? [String: String] {
                self.ruleActionMap = value
            }
            if let value = dict["ruleActions"] as? String {
                self.ruleActions = value
            }
            if let value = dict["ruleAuthType"] as? String {
                self.ruleAuthType = value
            }
            if let value = dict["ruleExpressions"] as? String {
                self.ruleExpressions = value
            }
            if let value = dict["ruleId"] as? String {
                self.ruleId = value
            }
            if let value = dict["ruleName"] as? String {
                self.ruleName = value
            }
            if let value = dict["ruleStatus"] as? String {
                self.ruleStatus = value
            }
            if let value = dict["ruleType"] as? String {
                self.ruleType = value
            }
            if let value = dict["ruleVersionId"] as? Int64 {
                self.ruleVersionId = value
            }
            if let value = dict["templateType"] as? String {
                self.templateType = value
            }
            if let value = dict["version"] as? Int64 {
                self.version = value
            }
        }
    }
    public var requestId: String?

    public var resultObject: QueryAuthRuleDetailByRuleIdResponseBody.ResultObject?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.resultObject?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? [String: Any?] {
            var model = QueryAuthRuleDetailByRuleIdResponseBody.ResultObject()
            model.fromMap(value)
            self.resultObject = model
        }
    }
}

public class QueryAuthRuleDetailByRuleIdResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryAuthRuleDetailByRuleIdResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryAuthRuleDetailByRuleIdResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RecallRuleAuditRequest : Tea.TeaModel {
    public var id: Int64?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["id"] = self.id!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["id"] as? Int64 {
            self.id = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class RecallRuleAuditResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
    }
}

public class RecallRuleAuditResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RecallRuleAuditResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RecallRuleAuditResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RemoveEventRequest : Tea.TeaModel {
    public var lang: String?

    public var createType: String?

    public var eventCode: String?

    public var id: Int64?

    public var regId: String?

    public var templateCode: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.createType != nil {
            map["createType"] = self.createType!
        }
        if self.eventCode != nil {
            map["eventCode"] = self.eventCode!
        }
        if self.id != nil {
            map["id"] = self.id!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.templateCode != nil {
            map["templateCode"] = self.templateCode!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["createType"] as? String {
            self.createType = value
        }
        if let value = dict["eventCode"] as? String {
            self.eventCode = value
        }
        if let value = dict["id"] as? Int64 {
            self.id = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["templateCode"] as? String {
            self.templateCode = value
        }
    }
}

public class RemoveEventResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
    }
}

public class RemoveEventResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RemoveEventResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RemoveEventResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SampleFileDownloadRequest : Tea.TeaModel {
    public var lang: String?

    public var regId: String?

    public var tab: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.regId != nil {
            map["RegId"] = self.regId!
        }
        if self.tab != nil {
            map["Tab"] = self.tab!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["RegId"] as? String {
            self.regId = value
        }
        if let value = dict["Tab"] as? String {
            self.tab = value
        }
    }
}

public class SampleFileDownloadResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: String?

    public var message: String?

    public var requestId: String?

    public var resultObject: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["ResultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? String {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["ResultObject"] as? String {
            self.resultObject = value
        }
    }
}

public class SampleFileDownloadResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SampleFileDownloadResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SampleFileDownloadResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SaveAnalysisColumnRequest : Tea.TeaModel {
    public var lang: String?

    public var columns: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.columns != nil {
            map["columns"] = self.columns!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["columns"] as? String {
            self.columns = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class SaveAnalysisColumnResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
    }
}

public class SaveAnalysisColumnResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SaveAnalysisColumnResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SaveAnalysisColumnResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SaveByPassOrShuntEventRequest : Tea.TeaModel {
    public var lang: String?

    public var eventId: Int64?

    public var eventName: String?

    public var eventType: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.eventId != nil {
            map["eventId"] = self.eventId!
        }
        if self.eventName != nil {
            map["eventName"] = self.eventName!
        }
        if self.eventType != nil {
            map["eventType"] = self.eventType!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["eventId"] as? Int64 {
            self.eventId = value
        }
        if let value = dict["eventName"] as? String {
            self.eventName = value
        }
        if let value = dict["eventType"] as? String {
            self.eventType = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class SaveByPassOrShuntEventResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: String?

    public var message: String?

    public var requestId: String?

    public var resultObject: Bool?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["httpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["httpStatusCode"] as? String {
            self.httpStatusCode = value
        }
        if let value = dict["message"] as? String {
            self.message = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
        if let value = dict["success"] as? Bool {
            self.success = value
        }
    }
}

public class SaveByPassOrShuntEventResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SaveByPassOrShuntEventResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SaveByPassOrShuntEventResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class StartOrStopByPassShuntEventRequest : Tea.TeaModel {
    public var lang: String?

    public var eventId: Int64?

    public var regId: String?

    public var status: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.eventId != nil {
            map["eventId"] = self.eventId!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.status != nil {
            map["status"] = self.status!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["eventId"] as? Int64 {
            self.eventId = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["status"] as? String {
            self.status = value
        }
    }
}

public class StartOrStopByPassShuntEventResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: String?

    public var message: String?

    public var requestId: String?

    public var resultObject: Bool?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["httpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["httpStatusCode"] as? String {
            self.httpStatusCode = value
        }
        if let value = dict["message"] as? String {
            self.message = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
        if let value = dict["success"] as? Bool {
            self.success = value
        }
    }
}

public class StartOrStopByPassShuntEventResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: StartOrStopByPassShuntEventResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = StartOrStopByPassShuntEventResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class StartSimulationTaskRequest : Tea.TeaModel {
    public var lang: String?

    public var id: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.id != nil {
            map["id"] = self.id!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["id"] as? String {
            self.id = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class StartSimulationTaskResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
    }
}

public class StartSimulationTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: StartSimulationTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = StartSimulationTaskResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class StopSimulationTaskRequest : Tea.TeaModel {
    public var lang: String?

    public var id: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.id != nil {
            map["id"] = self.id!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["id"] as? String {
            self.id = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class StopSimulationTaskResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
    }
}

public class StopSimulationTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: StopSimulationTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = StopSimulationTaskResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SwitchExpressionVariableRequest : Tea.TeaModel {
    public var lang: String?

    public var dataVersion: Int64?

    public var id: Int64?

    public var regId: String?

    public var status: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.dataVersion != nil {
            map["dataVersion"] = self.dataVersion!
        }
        if self.id != nil {
            map["id"] = self.id!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.status != nil {
            map["status"] = self.status!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["dataVersion"] as? Int64 {
            self.dataVersion = value
        }
        if let value = dict["id"] as? Int64 {
            self.id = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["status"] as? String {
            self.status = value
        }
    }
}

public class SwitchExpressionVariableResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
    }
}

public class SwitchExpressionVariableResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SwitchExpressionVariableResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SwitchExpressionVariableResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SwitchFieldRequest : Tea.TeaModel {
    public var lang: String?

    public var id: Int64?

    public var name: String?

    public var regId: String?

    public var source: String?

    public var status: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.id != nil {
            map["id"] = self.id!
        }
        if self.name != nil {
            map["name"] = self.name!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.source != nil {
            map["source"] = self.source!
        }
        if self.status != nil {
            map["status"] = self.status!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["id"] as? Int64 {
            self.id = value
        }
        if let value = dict["name"] as? String {
            self.name = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["source"] as? String {
            self.source = value
        }
        if let value = dict["status"] as? String {
            self.status = value
        }
    }
}

public class SwitchFieldResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
    }
}

public class SwitchFieldResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SwitchFieldResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SwitchFieldResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SwitchQueryVariableRequest : Tea.TeaModel {
    public var lang: String?

    public var id: Int64?

    public var regId: String?

    public var status: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.id != nil {
            map["id"] = self.id!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.status != nil {
            map["status"] = self.status!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["id"] as? Int64 {
            self.id = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["status"] as? String {
            self.status = value
        }
    }
}

public class SwitchQueryVariableResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
    }
}

public class SwitchQueryVariableResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SwitchQueryVariableResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SwitchQueryVariableResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SwitchToOnlineRequest : Tea.TeaModel {
    public var lang: String?

    public var eventId: Int64?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.eventId != nil {
            map["eventId"] = self.eventId!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["eventId"] as? Int64 {
            self.eventId = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class SwitchToOnlineResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: String?

    public var message: String?

    public var requestId: String?

    public var resultObject: Bool?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["httpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["httpStatusCode"] as? String {
            self.httpStatusCode = value
        }
        if let value = dict["message"] as? String {
            self.message = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
        if let value = dict["success"] as? Bool {
            self.success = value
        }
    }
}

public class SwitchToOnlineResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SwitchToOnlineResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SwitchToOnlineResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SwitchVariableRequest : Tea.TeaModel {
    public var lang: String?

    public var dataVersion: Int64?

    public var id: Int64?

    public var name: String?

    public var regId: String?

    public var status: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.dataVersion != nil {
            map["dataVersion"] = self.dataVersion!
        }
        if self.id != nil {
            map["id"] = self.id!
        }
        if self.name != nil {
            map["name"] = self.name!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.status != nil {
            map["status"] = self.status!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["dataVersion"] as? Int64 {
            self.dataVersion = value
        }
        if let value = dict["id"] as? Int64 {
            self.id = value
        }
        if let value = dict["name"] as? String {
            self.name = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["status"] as? String {
            self.status = value
        }
    }
}

public class SwitchVariableResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
    }
}

public class SwitchVariableResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SwitchVariableResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SwitchVariableResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class TaskNameByUserIdRequest : Tea.TeaModel {
    public var lang: String?

    public var regId: String?

    public var taskName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.regId != nil {
            map["RegId"] = self.regId!
        }
        if self.taskName != nil {
            map["TaskName"] = self.taskName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["RegId"] as? String {
            self.regId = value
        }
        if let value = dict["TaskName"] as? String {
            self.taskName = value
        }
    }
}

public class TaskNameByUserIdResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: String?

    public var message: String?

    public var requestId: String?

    public var resultObject: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["ResultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? String {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["ResultObject"] as? Bool {
            self.resultObject = value
        }
    }
}

public class TaskNameByUserIdResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: TaskNameByUserIdResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = TaskNameByUserIdResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateAnalysisConditionFavoriteRequest : Tea.TeaModel {
    public var lang: String?

    public var condition: String?

    public var eventBeginTime: Int64?

    public var eventCode: String?

    public var eventEndTime: Int64?

    public var fieldName: String?

    public var fieldValue: String?

    public var id: Int64?

    public var name: String?

    public var regId: String?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.condition != nil {
            map["condition"] = self.condition!
        }
        if self.eventBeginTime != nil {
            map["eventBeginTime"] = self.eventBeginTime!
        }
        if self.eventCode != nil {
            map["eventCode"] = self.eventCode!
        }
        if self.eventEndTime != nil {
            map["eventEndTime"] = self.eventEndTime!
        }
        if self.fieldName != nil {
            map["fieldName"] = self.fieldName!
        }
        if self.fieldValue != nil {
            map["fieldValue"] = self.fieldValue!
        }
        if self.id != nil {
            map["id"] = self.id!
        }
        if self.name != nil {
            map["name"] = self.name!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.type != nil {
            map["type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["condition"] as? String {
            self.condition = value
        }
        if let value = dict["eventBeginTime"] as? Int64 {
            self.eventBeginTime = value
        }
        if let value = dict["eventCode"] as? String {
            self.eventCode = value
        }
        if let value = dict["eventEndTime"] as? Int64 {
            self.eventEndTime = value
        }
        if let value = dict["fieldName"] as? String {
            self.fieldName = value
        }
        if let value = dict["fieldValue"] as? String {
            self.fieldValue = value
        }
        if let value = dict["id"] as? Int64 {
            self.id = value
        }
        if let value = dict["name"] as? String {
            self.name = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["type"] as? String {
            self.type = value
        }
    }
}

public class UpdateAnalysisConditionFavoriteResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
    }
}

public class UpdateAnalysisConditionFavoriteResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateAnalysisConditionFavoriteResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateAnalysisConditionFavoriteResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateAuditRequest : Tea.TeaModel {
    public var lang: String?

    public var auditMsg: String?

    public var auditRelationType: String?

    public var auditStatus: String?

    public var id: Int64?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.auditMsg != nil {
            map["auditMsg"] = self.auditMsg!
        }
        if self.auditRelationType != nil {
            map["auditRelationType"] = self.auditRelationType!
        }
        if self.auditStatus != nil {
            map["auditStatus"] = self.auditStatus!
        }
        if self.id != nil {
            map["id"] = self.id!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["auditMsg"] as? String {
            self.auditMsg = value
        }
        if let value = dict["auditRelationType"] as? String {
            self.auditRelationType = value
        }
        if let value = dict["auditStatus"] as? String {
            self.auditStatus = value
        }
        if let value = dict["id"] as? Int64 {
            self.id = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class UpdateAuditResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: String?

    public var message: String?

    public var resultObject: Bool?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["httpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["httpStatusCode"] as? String {
            self.httpStatusCode = value
        }
        if let value = dict["message"] as? String {
            self.message = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
        if let value = dict["success"] as? Bool {
            self.success = value
        }
    }
}

public class UpdateAuditResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateAuditResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateAuditResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateAuthRuleRequest : Tea.TeaModel {
    public var lang: String?

    public var consoleRuleId: Int64?

    public var eventCode: String?

    public var regId: String?

    public var ruleActions: String?

    public var ruleExpressions: String?

    public var ruleId: String?

    public var ruleVersionId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.consoleRuleId != nil {
            map["consoleRuleId"] = self.consoleRuleId!
        }
        if self.eventCode != nil {
            map["eventCode"] = self.eventCode!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.ruleActions != nil {
            map["ruleActions"] = self.ruleActions!
        }
        if self.ruleExpressions != nil {
            map["ruleExpressions"] = self.ruleExpressions!
        }
        if self.ruleId != nil {
            map["ruleId"] = self.ruleId!
        }
        if self.ruleVersionId != nil {
            map["ruleVersionId"] = self.ruleVersionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["consoleRuleId"] as? Int64 {
            self.consoleRuleId = value
        }
        if let value = dict["eventCode"] as? String {
            self.eventCode = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["ruleActions"] as? String {
            self.ruleActions = value
        }
        if let value = dict["ruleExpressions"] as? String {
            self.ruleExpressions = value
        }
        if let value = dict["ruleId"] as? String {
            self.ruleId = value
        }
        if let value = dict["ruleVersionId"] as? Int64 {
            self.ruleVersionId = value
        }
    }
}

public class UpdateAuthRuleResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
    }
}

public class UpdateAuthRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateAuthRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateAuthRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateByPassShuntEventRequest : Tea.TeaModel {
    public var lang: String?

    public var eventId: Int64?

    public var eventName: String?

    public var regId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.eventId != nil {
            map["eventId"] = self.eventId!
        }
        if self.eventName != nil {
            map["eventName"] = self.eventName!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["eventId"] as? Int64 {
            self.eventId = value
        }
        if let value = dict["eventName"] as? String {
            self.eventName = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
    }
}

public class UpdateByPassShuntEventResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: String?

    public var message: String?

    public var requestId: String?

    public var resultObject: Bool?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["httpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["httpStatusCode"] as? String {
            self.httpStatusCode = value
        }
        if let value = dict["message"] as? String {
            self.message = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
        if let value = dict["success"] as? Bool {
            self.success = value
        }
    }
}

public class UpdateByPassShuntEventResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateByPassShuntEventResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateByPassShuntEventResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateDataSourceRequest : Tea.TeaModel {
    public var lang: String?

    public var description_: String?

    public var id: Int64?

    public var name: String?

    public var ossKey: String?

    public var regId: String?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.description_ != nil {
            map["description"] = self.description_!
        }
        if self.id != nil {
            map["id"] = self.id!
        }
        if self.name != nil {
            map["name"] = self.name!
        }
        if self.ossKey != nil {
            map["ossKey"] = self.ossKey!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.type != nil {
            map["type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["description"] as? String {
            self.description_ = value
        }
        if let value = dict["id"] as? Int64 {
            self.id = value
        }
        if let value = dict["name"] as? String {
            self.name = value
        }
        if let value = dict["ossKey"] as? String {
            self.ossKey = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["type"] as? String {
            self.type = value
        }
    }
}

public class UpdateDataSourceResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
    }
}

public class UpdateDataSourceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateDataSourceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateDataSourceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateQueryVariableRequest : Tea.TeaModel {
    public var lang: String?

    public var dataSourceCode: String?

    public var description_: String?

    public var eventCode: String?

    public var expression: String?

    public var expressionTitle: String?

    public var expressionVariable: String?

    public var id: Int64?

    public var outlier: String?

    public var outputs: String?

    public var regId: String?

    public var title: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.dataSourceCode != nil {
            map["dataSourceCode"] = self.dataSourceCode!
        }
        if self.description_ != nil {
            map["description"] = self.description_!
        }
        if self.eventCode != nil {
            map["eventCode"] = self.eventCode!
        }
        if self.expression != nil {
            map["expression"] = self.expression!
        }
        if self.expressionTitle != nil {
            map["expressionTitle"] = self.expressionTitle!
        }
        if self.expressionVariable != nil {
            map["expressionVariable"] = self.expressionVariable!
        }
        if self.id != nil {
            map["id"] = self.id!
        }
        if self.outlier != nil {
            map["outlier"] = self.outlier!
        }
        if self.outputs != nil {
            map["outputs"] = self.outputs!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.title != nil {
            map["title"] = self.title!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["dataSourceCode"] as? String {
            self.dataSourceCode = value
        }
        if let value = dict["description"] as? String {
            self.description_ = value
        }
        if let value = dict["eventCode"] as? String {
            self.eventCode = value
        }
        if let value = dict["expression"] as? String {
            self.expression = value
        }
        if let value = dict["expressionTitle"] as? String {
            self.expressionTitle = value
        }
        if let value = dict["expressionVariable"] as? String {
            self.expressionVariable = value
        }
        if let value = dict["id"] as? Int64 {
            self.id = value
        }
        if let value = dict["outlier"] as? String {
            self.outlier = value
        }
        if let value = dict["outputs"] as? String {
            self.outputs = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["title"] as? String {
            self.title = value
        }
    }
}

public class UpdateQueryVariableResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
    }
}

public class UpdateQueryVariableResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateQueryVariableResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateQueryVariableResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateRuleRequest : Tea.TeaModel {
    public var lang: String?

    public var consoleRuleId: Int64?

    public var eventCode: String?

    public var logicExpression: String?

    public var memo: String?

    public var regId: String?

    public var ruleActions: String?

    public var ruleBody: String?

    public var ruleExpressions: String?

    public var ruleId: String?

    public var ruleName: String?

    public var ruleStatus: String?

    public var ruleType: String?

    public var ruleVersionId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.consoleRuleId != nil {
            map["consoleRuleId"] = self.consoleRuleId!
        }
        if self.eventCode != nil {
            map["eventCode"] = self.eventCode!
        }
        if self.logicExpression != nil {
            map["logicExpression"] = self.logicExpression!
        }
        if self.memo != nil {
            map["memo"] = self.memo!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.ruleActions != nil {
            map["ruleActions"] = self.ruleActions!
        }
        if self.ruleBody != nil {
            map["ruleBody"] = self.ruleBody!
        }
        if self.ruleExpressions != nil {
            map["ruleExpressions"] = self.ruleExpressions!
        }
        if self.ruleId != nil {
            map["ruleId"] = self.ruleId!
        }
        if self.ruleName != nil {
            map["ruleName"] = self.ruleName!
        }
        if self.ruleStatus != nil {
            map["ruleStatus"] = self.ruleStatus!
        }
        if self.ruleType != nil {
            map["ruleType"] = self.ruleType!
        }
        if self.ruleVersionId != nil {
            map["ruleVersionId"] = self.ruleVersionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["consoleRuleId"] as? Int64 {
            self.consoleRuleId = value
        }
        if let value = dict["eventCode"] as? String {
            self.eventCode = value
        }
        if let value = dict["logicExpression"] as? String {
            self.logicExpression = value
        }
        if let value = dict["memo"] as? String {
            self.memo = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["ruleActions"] as? String {
            self.ruleActions = value
        }
        if let value = dict["ruleBody"] as? String {
            self.ruleBody = value
        }
        if let value = dict["ruleExpressions"] as? String {
            self.ruleExpressions = value
        }
        if let value = dict["ruleId"] as? String {
            self.ruleId = value
        }
        if let value = dict["ruleName"] as? String {
            self.ruleName = value
        }
        if let value = dict["ruleStatus"] as? String {
            self.ruleStatus = value
        }
        if let value = dict["ruleType"] as? String {
            self.ruleType = value
        }
        if let value = dict["ruleVersionId"] as? Int64 {
            self.ruleVersionId = value
        }
    }
}

public class UpdateRuleResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
    }
}

public class UpdateRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateRuleBaseRequest : Tea.TeaModel {
    public var lang: String?

    public var consoleRuleId: Int64?

    public var eventCode: String?

    public var memo: String?

    public var regId: String?

    public var ruleId: String?

    public var ruleName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.consoleRuleId != nil {
            map["consoleRuleId"] = self.consoleRuleId!
        }
        if self.eventCode != nil {
            map["eventCode"] = self.eventCode!
        }
        if self.memo != nil {
            map["memo"] = self.memo!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.ruleId != nil {
            map["ruleId"] = self.ruleId!
        }
        if self.ruleName != nil {
            map["ruleName"] = self.ruleName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["consoleRuleId"] as? Int64 {
            self.consoleRuleId = value
        }
        if let value = dict["eventCode"] as? String {
            self.eventCode = value
        }
        if let value = dict["memo"] as? String {
            self.memo = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["ruleId"] as? String {
            self.ruleId = value
        }
        if let value = dict["ruleName"] as? String {
            self.ruleName = value
        }
    }
}

public class UpdateRuleBaseResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resultObject: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? Bool {
            self.resultObject = value
        }
    }
}

public class UpdateRuleBaseResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateRuleBaseResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateRuleBaseResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateSampleBatchRequest : Tea.TeaModel {
    public var lang: String?

    public var ids: String?

    public var regId: String?

    public var tags: String?

    public var versions: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.ids != nil {
            map["ids"] = self.ids!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.tags != nil {
            map["tags"] = self.tags!
        }
        if self.versions != nil {
            map["versions"] = self.versions!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["ids"] as? String {
            self.ids = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["tags"] as? String {
            self.tags = value
        }
        if let value = dict["versions"] as? String {
            self.versions = value
        }
    }
}

public class UpdateSampleBatchResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var data: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.data != nil {
            map["data"] = self.data!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["data"] as? Bool {
            self.data = value
        }
    }
}

public class UpdateSampleBatchResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateSampleBatchResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateSampleBatchResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UploadFileCheckRequest : Tea.TeaModel {
    public var lang: String?

    public var batchName: String?

    public var dataType: String?

    public var ossFileName: String?

    public var regId: String?

    public var sampleTagType: String?

    public var serviceList: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.batchName != nil {
            map["batchName"] = self.batchName!
        }
        if self.dataType != nil {
            map["dataType"] = self.dataType!
        }
        if self.ossFileName != nil {
            map["ossFileName"] = self.ossFileName!
        }
        if self.regId != nil {
            map["regId"] = self.regId!
        }
        if self.sampleTagType != nil {
            map["sampleTagType"] = self.sampleTagType!
        }
        if self.serviceList != nil {
            map["serviceList"] = self.serviceList!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["batchName"] as? String {
            self.batchName = value
        }
        if let value = dict["dataType"] as? String {
            self.dataType = value
        }
        if let value = dict["ossFileName"] as? String {
            self.ossFileName = value
        }
        if let value = dict["regId"] as? String {
            self.regId = value
        }
        if let value = dict["sampleTagType"] as? String {
            self.sampleTagType = value
        }
        if let value = dict["serviceList"] as? String {
            self.serviceList = value
        }
    }
}

public class UploadFileCheckResponseBody : Tea.TeaModel {
    public class ResultObject : Tea.TeaModel {
        public var effectiveNumber: Int32?

        public var resultList: [String]?

        public var totalNumber: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.effectiveNumber != nil {
                map["effectiveNumber"] = self.effectiveNumber!
            }
            if self.resultList != nil {
                map["resultList"] = self.resultList!
            }
            if self.totalNumber != nil {
                map["totalNumber"] = self.totalNumber!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["effectiveNumber"] as? Int32 {
                self.effectiveNumber = value
            }
            if let value = dict["resultList"] as? [String] {
                self.resultList = value
            }
            if let value = dict["totalNumber"] as? Int32 {
                self.totalNumber = value
            }
        }
    }
    public var requestId: String?

    public var resultObject: UploadFileCheckResponseBody.ResultObject?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.resultObject?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultObject != nil {
            map["resultObject"] = self.resultObject?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["resultObject"] as? [String: Any?] {
            var model = UploadFileCheckResponseBody.ResultObject()
            model.fromMap(value)
            self.resultObject = model
        }
    }
}

public class UploadFileCheckResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UploadFileCheckResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UploadFileCheckResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}
