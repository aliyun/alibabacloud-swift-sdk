import Foundation
import Tea
import TeaUtils
import AlibabacloudOpenApi
import AlibabaCloudOpenApiUtil
import AlibabacloudEndpointUtil

public class ChangeResourceGroupRequest : Tea.TeaModel {
    public var newResourceGroupId: String?

    public var regionId: String?

    public var resourceId: String?

    public var resourceManagerResourceGroupId: String?

    public var resourceType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.newResourceGroupId != nil {
            map["NewResourceGroupId"] = self.newResourceGroupId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceId != nil {
            map["ResourceId"] = self.resourceId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.resourceType != nil {
            map["ResourceType"] = self.resourceType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["NewResourceGroupId"] as? String {
            self.newResourceGroupId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceId"] as? String {
            self.resourceId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["ResourceType"] as? String {
            self.resourceType = value
        }
    }
}

public class ChangeResourceGroupResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ChangeResourceGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ChangeResourceGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ChangeResourceGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ClearMajorProtectionBlackIpRequest : Tea.TeaModel {
    public var instanceId: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public var ruleId: Int64?

    public var templateId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.ruleId != nil {
            map["RuleId"] = self.ruleId!
        }
        if self.templateId != nil {
            map["TemplateId"] = self.templateId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["RuleId"] as? Int64 {
            self.ruleId = value
        }
        if let value = dict["TemplateId"] as? Int64 {
            self.templateId = value
        }
    }
}

public class ClearMajorProtectionBlackIpResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ClearMajorProtectionBlackIpResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ClearMajorProtectionBlackIpResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ClearMajorProtectionBlackIpResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CopyDefenseTemplateRequest : Tea.TeaModel {
    public var instanceId: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public var templateId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.templateId != nil {
            map["TemplateId"] = self.templateId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["TemplateId"] as? Int64 {
            self.templateId = value
        }
    }
}

public class CopyDefenseTemplateResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var templateId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.templateId != nil {
            map["TemplateId"] = self.templateId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TemplateId"] as? Int64 {
            self.templateId = value
        }
    }
}

public class CopyDefenseTemplateResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CopyDefenseTemplateResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CopyDefenseTemplateResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateApiExportRequest : Tea.TeaModel {
    public var clusterId: String?

    public var instanceId: String?

    public var param: String?

    public var region: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public var type: String?

    public var zoneId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.param != nil {
            map["Param"] = self.param!
        }
        if self.region != nil {
            map["Region"] = self.region!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        if self.zoneId != nil {
            map["ZoneId"] = self.zoneId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClusterId"] as? String {
            self.clusterId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["Param"] as? String {
            self.param = value
        }
        if let value = dict["Region"] as? String {
            self.region = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
        if let value = dict["ZoneId"] as? String {
            self.zoneId = value
        }
    }
}

public class CreateApiExportResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateApiExportResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateApiExportResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateApiExportResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateCertsRequest : Tea.TeaModel {
    public var certContent: String?

    public var certKey: String?

    public var certName: String?

    public var instanceId: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.certContent != nil {
            map["CertContent"] = self.certContent!
        }
        if self.certKey != nil {
            map["CertKey"] = self.certKey!
        }
        if self.certName != nil {
            map["CertName"] = self.certName!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CertContent"] as? String {
            self.certContent = value
        }
        if let value = dict["CertKey"] as? String {
            self.certKey = value
        }
        if let value = dict["CertName"] as? String {
            self.certName = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class CreateCertsResponseBody : Tea.TeaModel {
    public var certIdentifier: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.certIdentifier != nil {
            map["CertIdentifier"] = self.certIdentifier!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CertIdentifier"] as? String {
            self.certIdentifier = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateCertsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateCertsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateCertsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateCloudResourceRequest : Tea.TeaModel {
    public class Listen : Tea.TeaModel {
        public class Certificates : Tea.TeaModel {
            public var appliedType: String?

            public var certificateId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.appliedType != nil {
                    map["AppliedType"] = self.appliedType!
                }
                if self.certificateId != nil {
                    map["CertificateId"] = self.certificateId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AppliedType"] as? String {
                    self.appliedType = value
                }
                if let value = dict["CertificateId"] as? String {
                    self.certificateId = value
                }
            }
        }
        public var certificates: [CreateCloudResourceRequest.Listen.Certificates]?

        public var cipherSuite: Int32?

        public var customCiphers: [String]?

        public var enableTLSv3: Bool?

        public var http2Enabled: Bool?

        public var port: Int32?

        public var protocol_: String?

        public var resourceInstanceId: String?

        public var resourceProduct: String?

        public var TLSVersion: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.certificates != nil {
                var tmp : [Any] = []
                for k in self.certificates! {
                    tmp.append(k.toMap())
                }
                map["Certificates"] = tmp
            }
            if self.cipherSuite != nil {
                map["CipherSuite"] = self.cipherSuite!
            }
            if self.customCiphers != nil {
                map["CustomCiphers"] = self.customCiphers!
            }
            if self.enableTLSv3 != nil {
                map["EnableTLSv3"] = self.enableTLSv3!
            }
            if self.http2Enabled != nil {
                map["Http2Enabled"] = self.http2Enabled!
            }
            if self.port != nil {
                map["Port"] = self.port!
            }
            if self.protocol_ != nil {
                map["Protocol"] = self.protocol_!
            }
            if self.resourceInstanceId != nil {
                map["ResourceInstanceId"] = self.resourceInstanceId!
            }
            if self.resourceProduct != nil {
                map["ResourceProduct"] = self.resourceProduct!
            }
            if self.TLSVersion != nil {
                map["TLSVersion"] = self.TLSVersion!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Certificates"] as? [Any?] {
                var tmp : [CreateCloudResourceRequest.Listen.Certificates] = []
                for v in value {
                    if v != nil {
                        var model = CreateCloudResourceRequest.Listen.Certificates()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.certificates = tmp
            }
            if let value = dict["CipherSuite"] as? Int32 {
                self.cipherSuite = value
            }
            if let value = dict["CustomCiphers"] as? [String] {
                self.customCiphers = value
            }
            if let value = dict["EnableTLSv3"] as? Bool {
                self.enableTLSv3 = value
            }
            if let value = dict["Http2Enabled"] as? Bool {
                self.http2Enabled = value
            }
            if let value = dict["Port"] as? Int32 {
                self.port = value
            }
            if let value = dict["Protocol"] as? String {
                self.protocol_ = value
            }
            if let value = dict["ResourceInstanceId"] as? String {
                self.resourceInstanceId = value
            }
            if let value = dict["ResourceProduct"] as? String {
                self.resourceProduct = value
            }
            if let value = dict["TLSVersion"] as? String {
                self.TLSVersion = value
            }
        }
    }
    public class Redirect : Tea.TeaModel {
        public class RequestHeaders : Tea.TeaModel {
            public var key: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.key != nil {
                    map["Key"] = self.key!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Key"] as? String {
                    self.key = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public var keepalive: Bool?

        public var keepaliveRequests: Int32?

        public var keepaliveTimeout: Int32?

        public var readTimeout: Int32?

        public var requestHeaders: [CreateCloudResourceRequest.Redirect.RequestHeaders]?

        public var writeTimeout: Int32?

        public var xffHeaderMode: Int32?

        public var xffHeaders: [String]?

        public var xffProto: Bool?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.keepalive != nil {
                map["Keepalive"] = self.keepalive!
            }
            if self.keepaliveRequests != nil {
                map["KeepaliveRequests"] = self.keepaliveRequests!
            }
            if self.keepaliveTimeout != nil {
                map["KeepaliveTimeout"] = self.keepaliveTimeout!
            }
            if self.readTimeout != nil {
                map["ReadTimeout"] = self.readTimeout!
            }
            if self.requestHeaders != nil {
                var tmp : [Any] = []
                for k in self.requestHeaders! {
                    tmp.append(k.toMap())
                }
                map["RequestHeaders"] = tmp
            }
            if self.writeTimeout != nil {
                map["WriteTimeout"] = self.writeTimeout!
            }
            if self.xffHeaderMode != nil {
                map["XffHeaderMode"] = self.xffHeaderMode!
            }
            if self.xffHeaders != nil {
                map["XffHeaders"] = self.xffHeaders!
            }
            if self.xffProto != nil {
                map["XffProto"] = self.xffProto!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Keepalive"] as? Bool {
                self.keepalive = value
            }
            if let value = dict["KeepaliveRequests"] as? Int32 {
                self.keepaliveRequests = value
            }
            if let value = dict["KeepaliveTimeout"] as? Int32 {
                self.keepaliveTimeout = value
            }
            if let value = dict["ReadTimeout"] as? Int32 {
                self.readTimeout = value
            }
            if let value = dict["RequestHeaders"] as? [Any?] {
                var tmp : [CreateCloudResourceRequest.Redirect.RequestHeaders] = []
                for v in value {
                    if v != nil {
                        var model = CreateCloudResourceRequest.Redirect.RequestHeaders()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.requestHeaders = tmp
            }
            if let value = dict["WriteTimeout"] as? Int32 {
                self.writeTimeout = value
            }
            if let value = dict["XffHeaderMode"] as? Int32 {
                self.xffHeaderMode = value
            }
            if let value = dict["XffHeaders"] as? [String] {
                self.xffHeaders = value
            }
            if let value = dict["XffProto"] as? Bool {
                self.xffProto = value
            }
        }
    }
    public class Tag : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var instanceId: String?

    public var listen: CreateCloudResourceRequest.Listen?

    public var ownerUserId: String?

    public var redirect: CreateCloudResourceRequest.Redirect?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public var tag: [CreateCloudResourceRequest.Tag]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.listen?.validate()
        try self.redirect?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.listen != nil {
            map["Listen"] = self.listen?.toMap()
        }
        if self.ownerUserId != nil {
            map["OwnerUserId"] = self.ownerUserId!
        }
        if self.redirect != nil {
            map["Redirect"] = self.redirect?.toMap()
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.tag != nil {
            var tmp : [Any] = []
            for k in self.tag! {
                tmp.append(k.toMap())
            }
            map["Tag"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["Listen"] as? [String: Any?] {
            var model = CreateCloudResourceRequest.Listen()
            model.fromMap(value)
            self.listen = model
        }
        if let value = dict["OwnerUserId"] as? String {
            self.ownerUserId = value
        }
        if let value = dict["Redirect"] as? [String: Any?] {
            var model = CreateCloudResourceRequest.Redirect()
            model.fromMap(value)
            self.redirect = model
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["Tag"] as? [Any?] {
            var tmp : [CreateCloudResourceRequest.Tag] = []
            for v in value {
                if v != nil {
                    var model = CreateCloudResourceRequest.Tag()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tag = tmp
        }
    }
}

public class CreateCloudResourceShrinkRequest : Tea.TeaModel {
    public class Tag : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var instanceId: String?

    public var listenShrink: String?

    public var ownerUserId: String?

    public var redirectShrink: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public var tag: [CreateCloudResourceShrinkRequest.Tag]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.listenShrink != nil {
            map["Listen"] = self.listenShrink!
        }
        if self.ownerUserId != nil {
            map["OwnerUserId"] = self.ownerUserId!
        }
        if self.redirectShrink != nil {
            map["Redirect"] = self.redirectShrink!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.tag != nil {
            var tmp : [Any] = []
            for k in self.tag! {
                tmp.append(k.toMap())
            }
            map["Tag"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["Listen"] as? String {
            self.listenShrink = value
        }
        if let value = dict["OwnerUserId"] as? String {
            self.ownerUserId = value
        }
        if let value = dict["Redirect"] as? String {
            self.redirectShrink = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["Tag"] as? [Any?] {
            var tmp : [CreateCloudResourceShrinkRequest.Tag] = []
            for v in value {
                if v != nil {
                    var model = CreateCloudResourceShrinkRequest.Tag()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tag = tmp
        }
    }
}

public class CreateCloudResourceResponseBody : Tea.TeaModel {
    public var cloudResourceId: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cloudResourceId != nil {
            map["CloudResourceId"] = self.cloudResourceId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CloudResourceId"] as? String {
            self.cloudResourceId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateCloudResourceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateCloudResourceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateCloudResourceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateDefenseResourceRequest : Tea.TeaModel {
    public class Tag : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var customHeaders: [String]?

    public var description_: String?

    public var detail: String?

    public var instanceId: String?

    public var ownerUserId: String?

    public var pattern: String?

    public var product: String?

    public var regionId: String?

    public var resource: String?

    public var resourceGroup: String?

    public var resourceManagerResourceGroupId: String?

    public var resourceOrigin: String?

    public var tag: [CreateDefenseResourceRequest.Tag]?

    public var xffStatus: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.customHeaders != nil {
            map["CustomHeaders"] = self.customHeaders!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.detail != nil {
            map["Detail"] = self.detail!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.ownerUserId != nil {
            map["OwnerUserId"] = self.ownerUserId!
        }
        if self.pattern != nil {
            map["Pattern"] = self.pattern!
        }
        if self.product != nil {
            map["Product"] = self.product!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resource != nil {
            map["Resource"] = self.resource!
        }
        if self.resourceGroup != nil {
            map["ResourceGroup"] = self.resourceGroup!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.resourceOrigin != nil {
            map["ResourceOrigin"] = self.resourceOrigin!
        }
        if self.tag != nil {
            var tmp : [Any] = []
            for k in self.tag! {
                tmp.append(k.toMap())
            }
            map["Tag"] = tmp
        }
        if self.xffStatus != nil {
            map["XffStatus"] = self.xffStatus!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CustomHeaders"] as? [String] {
            self.customHeaders = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["Detail"] as? String {
            self.detail = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["OwnerUserId"] as? String {
            self.ownerUserId = value
        }
        if let value = dict["Pattern"] as? String {
            self.pattern = value
        }
        if let value = dict["Product"] as? String {
            self.product = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Resource"] as? String {
            self.resource = value
        }
        if let value = dict["ResourceGroup"] as? String {
            self.resourceGroup = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["ResourceOrigin"] as? String {
            self.resourceOrigin = value
        }
        if let value = dict["Tag"] as? [Any?] {
            var tmp : [CreateDefenseResourceRequest.Tag] = []
            for v in value {
                if v != nil {
                    var model = CreateDefenseResourceRequest.Tag()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tag = tmp
        }
        if let value = dict["XffStatus"] as? Int32 {
            self.xffStatus = value
        }
    }
}

public class CreateDefenseResourceShrinkRequest : Tea.TeaModel {
    public class Tag : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var customHeadersShrink: String?

    public var description_: String?

    public var detail: String?

    public var instanceId: String?

    public var ownerUserId: String?

    public var pattern: String?

    public var product: String?

    public var regionId: String?

    public var resource: String?

    public var resourceGroup: String?

    public var resourceManagerResourceGroupId: String?

    public var resourceOrigin: String?

    public var tag: [CreateDefenseResourceShrinkRequest.Tag]?

    public var xffStatus: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.customHeadersShrink != nil {
            map["CustomHeaders"] = self.customHeadersShrink!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.detail != nil {
            map["Detail"] = self.detail!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.ownerUserId != nil {
            map["OwnerUserId"] = self.ownerUserId!
        }
        if self.pattern != nil {
            map["Pattern"] = self.pattern!
        }
        if self.product != nil {
            map["Product"] = self.product!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resource != nil {
            map["Resource"] = self.resource!
        }
        if self.resourceGroup != nil {
            map["ResourceGroup"] = self.resourceGroup!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.resourceOrigin != nil {
            map["ResourceOrigin"] = self.resourceOrigin!
        }
        if self.tag != nil {
            var tmp : [Any] = []
            for k in self.tag! {
                tmp.append(k.toMap())
            }
            map["Tag"] = tmp
        }
        if self.xffStatus != nil {
            map["XffStatus"] = self.xffStatus!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CustomHeaders"] as? String {
            self.customHeadersShrink = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["Detail"] as? String {
            self.detail = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["OwnerUserId"] as? String {
            self.ownerUserId = value
        }
        if let value = dict["Pattern"] as? String {
            self.pattern = value
        }
        if let value = dict["Product"] as? String {
            self.product = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Resource"] as? String {
            self.resource = value
        }
        if let value = dict["ResourceGroup"] as? String {
            self.resourceGroup = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["ResourceOrigin"] as? String {
            self.resourceOrigin = value
        }
        if let value = dict["Tag"] as? [Any?] {
            var tmp : [CreateDefenseResourceShrinkRequest.Tag] = []
            for v in value {
                if v != nil {
                    var model = CreateDefenseResourceShrinkRequest.Tag()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tag = tmp
        }
        if let value = dict["XffStatus"] as? Int32 {
            self.xffStatus = value
        }
    }
}

public class CreateDefenseResourceResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resource: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resource != nil {
            map["Resource"] = self.resource!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Resource"] as? String {
            self.resource = value
        }
    }
}

public class CreateDefenseResourceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateDefenseResourceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateDefenseResourceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateDefenseResourceGroupRequest : Tea.TeaModel {
    public var addList: String?

    public var description_: String?

    public var groupName: String?

    public var instanceId: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.addList != nil {
            map["AddList"] = self.addList!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.groupName != nil {
            map["GroupName"] = self.groupName!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AddList"] as? String {
            self.addList = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["GroupName"] as? String {
            self.groupName = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class CreateDefenseResourceGroupResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateDefenseResourceGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateDefenseResourceGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateDefenseResourceGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateDefenseRuleRequest : Tea.TeaModel {
    public var defenseScene: String?

    public var defenseType: String?

    public var instanceId: String?

    public var regionId: String?

    public var resource: String?

    public var resourceManagerResourceGroupId: String?

    public var rules: String?

    public var templateId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.defenseScene != nil {
            map["DefenseScene"] = self.defenseScene!
        }
        if self.defenseType != nil {
            map["DefenseType"] = self.defenseType!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resource != nil {
            map["Resource"] = self.resource!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.rules != nil {
            map["Rules"] = self.rules!
        }
        if self.templateId != nil {
            map["TemplateId"] = self.templateId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DefenseScene"] as? String {
            self.defenseScene = value
        }
        if let value = dict["DefenseType"] as? String {
            self.defenseType = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Resource"] as? String {
            self.resource = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["Rules"] as? String {
            self.rules = value
        }
        if let value = dict["TemplateId"] as? Int64 {
            self.templateId = value
        }
    }
}

public class CreateDefenseRuleResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var ruleIds: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.ruleIds != nil {
            map["RuleIds"] = self.ruleIds!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["RuleIds"] as? String {
            self.ruleIds = value
        }
    }
}

public class CreateDefenseRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateDefenseRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateDefenseRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateDefenseTemplateRequest : Tea.TeaModel {
    public var defenseScene: String?

    public var description_: String?

    public var instanceId: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public var templateName: String?

    public var templateOrigin: String?

    public var templateStatus: Int32?

    public var templateType: String?

    public var unbindResourceGroups: [String]?

    public var unbindResources: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.defenseScene != nil {
            map["DefenseScene"] = self.defenseScene!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.templateName != nil {
            map["TemplateName"] = self.templateName!
        }
        if self.templateOrigin != nil {
            map["TemplateOrigin"] = self.templateOrigin!
        }
        if self.templateStatus != nil {
            map["TemplateStatus"] = self.templateStatus!
        }
        if self.templateType != nil {
            map["TemplateType"] = self.templateType!
        }
        if self.unbindResourceGroups != nil {
            map["UnbindResourceGroups"] = self.unbindResourceGroups!
        }
        if self.unbindResources != nil {
            map["UnbindResources"] = self.unbindResources!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DefenseScene"] as? String {
            self.defenseScene = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["TemplateName"] as? String {
            self.templateName = value
        }
        if let value = dict["TemplateOrigin"] as? String {
            self.templateOrigin = value
        }
        if let value = dict["TemplateStatus"] as? Int32 {
            self.templateStatus = value
        }
        if let value = dict["TemplateType"] as? String {
            self.templateType = value
        }
        if let value = dict["UnbindResourceGroups"] as? [String] {
            self.unbindResourceGroups = value
        }
        if let value = dict["UnbindResources"] as? [String] {
            self.unbindResources = value
        }
    }
}

public class CreateDefenseTemplateResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var templateId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.templateId != nil {
            map["TemplateId"] = self.templateId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TemplateId"] as? Int64 {
            self.templateId = value
        }
    }
}

public class CreateDefenseTemplateResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateDefenseTemplateResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateDefenseTemplateResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateDomainRequest : Tea.TeaModel {
    public class Listen : Tea.TeaModel {
        public var certId: String?

        public var cipherSuite: Int32?

        public var customCiphers: [String]?

        public var enableTLSv3: Bool?

        public var exclusiveIp: Bool?

        public var focusHttps: Bool?

        public var http2Enabled: Bool?

        public var httpPorts: [Int32]?

        public var httpsPorts: [Int32]?

        public var IPv6Enabled: Bool?

        public var protectionResource: String?

        public var SM2AccessOnly: Bool?

        public var SM2CertId: String?

        public var SM2Enabled: Bool?

        public var TLSVersion: String?

        public var xffHeaderMode: Int32?

        public var xffHeaders: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.certId != nil {
                map["CertId"] = self.certId!
            }
            if self.cipherSuite != nil {
                map["CipherSuite"] = self.cipherSuite!
            }
            if self.customCiphers != nil {
                map["CustomCiphers"] = self.customCiphers!
            }
            if self.enableTLSv3 != nil {
                map["EnableTLSv3"] = self.enableTLSv3!
            }
            if self.exclusiveIp != nil {
                map["ExclusiveIp"] = self.exclusiveIp!
            }
            if self.focusHttps != nil {
                map["FocusHttps"] = self.focusHttps!
            }
            if self.http2Enabled != nil {
                map["Http2Enabled"] = self.http2Enabled!
            }
            if self.httpPorts != nil {
                map["HttpPorts"] = self.httpPorts!
            }
            if self.httpsPorts != nil {
                map["HttpsPorts"] = self.httpsPorts!
            }
            if self.IPv6Enabled != nil {
                map["IPv6Enabled"] = self.IPv6Enabled!
            }
            if self.protectionResource != nil {
                map["ProtectionResource"] = self.protectionResource!
            }
            if self.SM2AccessOnly != nil {
                map["SM2AccessOnly"] = self.SM2AccessOnly!
            }
            if self.SM2CertId != nil {
                map["SM2CertId"] = self.SM2CertId!
            }
            if self.SM2Enabled != nil {
                map["SM2Enabled"] = self.SM2Enabled!
            }
            if self.TLSVersion != nil {
                map["TLSVersion"] = self.TLSVersion!
            }
            if self.xffHeaderMode != nil {
                map["XffHeaderMode"] = self.xffHeaderMode!
            }
            if self.xffHeaders != nil {
                map["XffHeaders"] = self.xffHeaders!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CertId"] as? String {
                self.certId = value
            }
            if let value = dict["CipherSuite"] as? Int32 {
                self.cipherSuite = value
            }
            if let value = dict["CustomCiphers"] as? [String] {
                self.customCiphers = value
            }
            if let value = dict["EnableTLSv3"] as? Bool {
                self.enableTLSv3 = value
            }
            if let value = dict["ExclusiveIp"] as? Bool {
                self.exclusiveIp = value
            }
            if let value = dict["FocusHttps"] as? Bool {
                self.focusHttps = value
            }
            if let value = dict["Http2Enabled"] as? Bool {
                self.http2Enabled = value
            }
            if let value = dict["HttpPorts"] as? [Int32] {
                self.httpPorts = value
            }
            if let value = dict["HttpsPorts"] as? [Int32] {
                self.httpsPorts = value
            }
            if let value = dict["IPv6Enabled"] as? Bool {
                self.IPv6Enabled = value
            }
            if let value = dict["ProtectionResource"] as? String {
                self.protectionResource = value
            }
            if let value = dict["SM2AccessOnly"] as? Bool {
                self.SM2AccessOnly = value
            }
            if let value = dict["SM2CertId"] as? String {
                self.SM2CertId = value
            }
            if let value = dict["SM2Enabled"] as? Bool {
                self.SM2Enabled = value
            }
            if let value = dict["TLSVersion"] as? String {
                self.TLSVersion = value
            }
            if let value = dict["XffHeaderMode"] as? Int32 {
                self.xffHeaderMode = value
            }
            if let value = dict["XffHeaders"] as? [String] {
                self.xffHeaders = value
            }
        }
    }
    public class Redirect : Tea.TeaModel {
        public class BackendPorts : Tea.TeaModel {
            public var backendPort: Int32?

            public var listenPort: Int32?

            public var protocol_: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.backendPort != nil {
                    map["BackendPort"] = self.backendPort!
                }
                if self.listenPort != nil {
                    map["ListenPort"] = self.listenPort!
                }
                if self.protocol_ != nil {
                    map["Protocol"] = self.protocol_!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["BackendPort"] as? Int32 {
                    self.backendPort = value
                }
                if let value = dict["ListenPort"] as? Int32 {
                    self.listenPort = value
                }
                if let value = dict["Protocol"] as? String {
                    self.protocol_ = value
                }
            }
        }
        public class RequestHeaders : Tea.TeaModel {
            public var key: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.key != nil {
                    map["Key"] = self.key!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Key"] as? String {
                    self.key = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public var backendPorts: [CreateDomainRequest.Redirect.BackendPorts]?

        public var backends: [String]?

        public var backupBackends: [String]?

        public var cnameEnabled: Bool?

        public var connectTimeout: Int32?

        public var focusHttpBackend: Bool?

        public var keepalive: Bool?

        public var keepaliveRequests: Int32?

        public var keepaliveTimeout: Int32?

        public var loadbalance: String?

        public var readTimeout: Int32?

        public var requestHeaders: [CreateDomainRequest.Redirect.RequestHeaders]?

        public var retry: Bool?

        public var routingRules: String?

        public var sniEnabled: Bool?

        public var sniHost: String?

        public var WLProxyClientIp: Bool?

        public var webServerType: Bool?

        public var writeTimeout: Int32?

        public var XClientIp: Bool?

        public var XTrueIp: Bool?

        public var xffProto: Bool?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.backendPorts != nil {
                var tmp : [Any] = []
                for k in self.backendPorts! {
                    tmp.append(k.toMap())
                }
                map["BackendPorts"] = tmp
            }
            if self.backends != nil {
                map["Backends"] = self.backends!
            }
            if self.backupBackends != nil {
                map["BackupBackends"] = self.backupBackends!
            }
            if self.cnameEnabled != nil {
                map["CnameEnabled"] = self.cnameEnabled!
            }
            if self.connectTimeout != nil {
                map["ConnectTimeout"] = self.connectTimeout!
            }
            if self.focusHttpBackend != nil {
                map["FocusHttpBackend"] = self.focusHttpBackend!
            }
            if self.keepalive != nil {
                map["Keepalive"] = self.keepalive!
            }
            if self.keepaliveRequests != nil {
                map["KeepaliveRequests"] = self.keepaliveRequests!
            }
            if self.keepaliveTimeout != nil {
                map["KeepaliveTimeout"] = self.keepaliveTimeout!
            }
            if self.loadbalance != nil {
                map["Loadbalance"] = self.loadbalance!
            }
            if self.readTimeout != nil {
                map["ReadTimeout"] = self.readTimeout!
            }
            if self.requestHeaders != nil {
                var tmp : [Any] = []
                for k in self.requestHeaders! {
                    tmp.append(k.toMap())
                }
                map["RequestHeaders"] = tmp
            }
            if self.retry != nil {
                map["Retry"] = self.retry!
            }
            if self.routingRules != nil {
                map["RoutingRules"] = self.routingRules!
            }
            if self.sniEnabled != nil {
                map["SniEnabled"] = self.sniEnabled!
            }
            if self.sniHost != nil {
                map["SniHost"] = self.sniHost!
            }
            if self.WLProxyClientIp != nil {
                map["WLProxyClientIp"] = self.WLProxyClientIp!
            }
            if self.webServerType != nil {
                map["WebServerType"] = self.webServerType!
            }
            if self.writeTimeout != nil {
                map["WriteTimeout"] = self.writeTimeout!
            }
            if self.XClientIp != nil {
                map["XClientIp"] = self.XClientIp!
            }
            if self.XTrueIp != nil {
                map["XTrueIp"] = self.XTrueIp!
            }
            if self.xffProto != nil {
                map["XffProto"] = self.xffProto!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["BackendPorts"] as? [Any?] {
                var tmp : [CreateDomainRequest.Redirect.BackendPorts] = []
                for v in value {
                    if v != nil {
                        var model = CreateDomainRequest.Redirect.BackendPorts()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.backendPorts = tmp
            }
            if let value = dict["Backends"] as? [String] {
                self.backends = value
            }
            if let value = dict["BackupBackends"] as? [String] {
                self.backupBackends = value
            }
            if let value = dict["CnameEnabled"] as? Bool {
                self.cnameEnabled = value
            }
            if let value = dict["ConnectTimeout"] as? Int32 {
                self.connectTimeout = value
            }
            if let value = dict["FocusHttpBackend"] as? Bool {
                self.focusHttpBackend = value
            }
            if let value = dict["Keepalive"] as? Bool {
                self.keepalive = value
            }
            if let value = dict["KeepaliveRequests"] as? Int32 {
                self.keepaliveRequests = value
            }
            if let value = dict["KeepaliveTimeout"] as? Int32 {
                self.keepaliveTimeout = value
            }
            if let value = dict["Loadbalance"] as? String {
                self.loadbalance = value
            }
            if let value = dict["ReadTimeout"] as? Int32 {
                self.readTimeout = value
            }
            if let value = dict["RequestHeaders"] as? [Any?] {
                var tmp : [CreateDomainRequest.Redirect.RequestHeaders] = []
                for v in value {
                    if v != nil {
                        var model = CreateDomainRequest.Redirect.RequestHeaders()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.requestHeaders = tmp
            }
            if let value = dict["Retry"] as? Bool {
                self.retry = value
            }
            if let value = dict["RoutingRules"] as? String {
                self.routingRules = value
            }
            if let value = dict["SniEnabled"] as? Bool {
                self.sniEnabled = value
            }
            if let value = dict["SniHost"] as? String {
                self.sniHost = value
            }
            if let value = dict["WLProxyClientIp"] as? Bool {
                self.WLProxyClientIp = value
            }
            if let value = dict["WebServerType"] as? Bool {
                self.webServerType = value
            }
            if let value = dict["WriteTimeout"] as? Int32 {
                self.writeTimeout = value
            }
            if let value = dict["XClientIp"] as? Bool {
                self.XClientIp = value
            }
            if let value = dict["XTrueIp"] as? Bool {
                self.XTrueIp = value
            }
            if let value = dict["XffProto"] as? Bool {
                self.xffProto = value
            }
        }
    }
    public class Tag : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var accessType: String?

    public var domain: String?

    public var instanceId: String?

    public var listen: CreateDomainRequest.Listen?

    public var redirect: CreateDomainRequest.Redirect?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public var tag: [CreateDomainRequest.Tag]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.listen?.validate()
        try self.redirect?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.accessType != nil {
            map["AccessType"] = self.accessType!
        }
        if self.domain != nil {
            map["Domain"] = self.domain!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.listen != nil {
            map["Listen"] = self.listen?.toMap()
        }
        if self.redirect != nil {
            map["Redirect"] = self.redirect?.toMap()
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.tag != nil {
            var tmp : [Any] = []
            for k in self.tag! {
                tmp.append(k.toMap())
            }
            map["Tag"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AccessType"] as? String {
            self.accessType = value
        }
        if let value = dict["Domain"] as? String {
            self.domain = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["Listen"] as? [String: Any?] {
            var model = CreateDomainRequest.Listen()
            model.fromMap(value)
            self.listen = model
        }
        if let value = dict["Redirect"] as? [String: Any?] {
            var model = CreateDomainRequest.Redirect()
            model.fromMap(value)
            self.redirect = model
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["Tag"] as? [Any?] {
            var tmp : [CreateDomainRequest.Tag] = []
            for v in value {
                if v != nil {
                    var model = CreateDomainRequest.Tag()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tag = tmp
        }
    }
}

public class CreateDomainShrinkRequest : Tea.TeaModel {
    public class Tag : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var accessType: String?

    public var domain: String?

    public var instanceId: String?

    public var listenShrink: String?

    public var redirectShrink: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public var tag: [CreateDomainShrinkRequest.Tag]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.accessType != nil {
            map["AccessType"] = self.accessType!
        }
        if self.domain != nil {
            map["Domain"] = self.domain!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.listenShrink != nil {
            map["Listen"] = self.listenShrink!
        }
        if self.redirectShrink != nil {
            map["Redirect"] = self.redirectShrink!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.tag != nil {
            var tmp : [Any] = []
            for k in self.tag! {
                tmp.append(k.toMap())
            }
            map["Tag"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AccessType"] as? String {
            self.accessType = value
        }
        if let value = dict["Domain"] as? String {
            self.domain = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["Listen"] as? String {
            self.listenShrink = value
        }
        if let value = dict["Redirect"] as? String {
            self.redirectShrink = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["Tag"] as? [Any?] {
            var tmp : [CreateDomainShrinkRequest.Tag] = []
            for v in value {
                if v != nil {
                    var model = CreateDomainShrinkRequest.Tag()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tag = tmp
        }
    }
}

public class CreateDomainResponseBody : Tea.TeaModel {
    public class DomainInfo : Tea.TeaModel {
        public var cname: String?

        public var domain: String?

        public var domainId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.cname != nil {
                map["Cname"] = self.cname!
            }
            if self.domain != nil {
                map["Domain"] = self.domain!
            }
            if self.domainId != nil {
                map["DomainId"] = self.domainId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Cname"] as? String {
                self.cname = value
            }
            if let value = dict["Domain"] as? String {
                self.domain = value
            }
            if let value = dict["DomainId"] as? String {
                self.domainId = value
            }
        }
    }
    public var domainInfo: CreateDomainResponseBody.DomainInfo?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.domainInfo?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.domainInfo != nil {
            map["DomainInfo"] = self.domainInfo?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DomainInfo"] as? [String: Any?] {
            var model = CreateDomainResponseBody.DomainInfo()
            model.fromMap(value)
            self.domainInfo = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateDomainResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateDomainResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateDomainResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateHybridCloudClusterRequest : Tea.TeaModel {
    public var accessMode: String?

    public var accessRegion: String?

    public var clusterName: String?

    public var httpPorts: String?

    public var httpsPorts: String?

    public var instanceId: String?

    public var logFieldsNotReturned: String?

    public var protectionServerCount: Int32?

    public var proxyStatus: String?

    public var proxyType: String?

    public var regionId: String?

    public var remark: String?

    public var resourceManagerResourceGroupId: String?

    public var ruleConfig: String?

    public var ruleStatus: String?

    public var ruleType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.accessMode != nil {
            map["AccessMode"] = self.accessMode!
        }
        if self.accessRegion != nil {
            map["AccessRegion"] = self.accessRegion!
        }
        if self.clusterName != nil {
            map["ClusterName"] = self.clusterName!
        }
        if self.httpPorts != nil {
            map["HttpPorts"] = self.httpPorts!
        }
        if self.httpsPorts != nil {
            map["HttpsPorts"] = self.httpsPorts!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.logFieldsNotReturned != nil {
            map["LogFieldsNotReturned"] = self.logFieldsNotReturned!
        }
        if self.protectionServerCount != nil {
            map["ProtectionServerCount"] = self.protectionServerCount!
        }
        if self.proxyStatus != nil {
            map["ProxyStatus"] = self.proxyStatus!
        }
        if self.proxyType != nil {
            map["ProxyType"] = self.proxyType!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.remark != nil {
            map["Remark"] = self.remark!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.ruleConfig != nil {
            map["RuleConfig"] = self.ruleConfig!
        }
        if self.ruleStatus != nil {
            map["RuleStatus"] = self.ruleStatus!
        }
        if self.ruleType != nil {
            map["RuleType"] = self.ruleType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AccessMode"] as? String {
            self.accessMode = value
        }
        if let value = dict["AccessRegion"] as? String {
            self.accessRegion = value
        }
        if let value = dict["ClusterName"] as? String {
            self.clusterName = value
        }
        if let value = dict["HttpPorts"] as? String {
            self.httpPorts = value
        }
        if let value = dict["HttpsPorts"] as? String {
            self.httpsPorts = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["LogFieldsNotReturned"] as? String {
            self.logFieldsNotReturned = value
        }
        if let value = dict["ProtectionServerCount"] as? Int32 {
            self.protectionServerCount = value
        }
        if let value = dict["ProxyStatus"] as? String {
            self.proxyStatus = value
        }
        if let value = dict["ProxyType"] as? String {
            self.proxyType = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Remark"] as? String {
            self.remark = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["RuleConfig"] as? String {
            self.ruleConfig = value
        }
        if let value = dict["RuleStatus"] as? String {
            self.ruleStatus = value
        }
        if let value = dict["RuleType"] as? String {
            self.ruleType = value
        }
    }
}

public class CreateHybridCloudClusterResponseBody : Tea.TeaModel {
    public var data: Int64?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Data"] as? Int64 {
            self.data = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateHybridCloudClusterResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateHybridCloudClusterResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateHybridCloudClusterResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateHybridCloudClusterRuleRequest : Tea.TeaModel {
    public var clusterId: Int64?

    public var instanceId: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public var ruleConfig: String?

    public var ruleStatus: String?

    public var ruleType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.ruleConfig != nil {
            map["RuleConfig"] = self.ruleConfig!
        }
        if self.ruleStatus != nil {
            map["RuleStatus"] = self.ruleStatus!
        }
        if self.ruleType != nil {
            map["RuleType"] = self.ruleType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClusterId"] as? Int64 {
            self.clusterId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["RuleConfig"] as? String {
            self.ruleConfig = value
        }
        if let value = dict["RuleStatus"] as? String {
            self.ruleStatus = value
        }
        if let value = dict["RuleType"] as? String {
            self.ruleType = value
        }
    }
}

public class CreateHybridCloudClusterRuleResponseBody : Tea.TeaModel {
    public var clusterRuleResourceId: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clusterRuleResourceId != nil {
            map["ClusterRuleResourceId"] = self.clusterRuleResourceId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClusterRuleResourceId"] as? String {
            self.clusterRuleResourceId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateHybridCloudClusterRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateHybridCloudClusterRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateHybridCloudClusterRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateHybridCloudGroupRequest : Tea.TeaModel {
    public var backSourceMark: String?

    public var clusterId: Int64?

    public var groupName: String?

    public var groupType: String?

    public var instanceId: String?

    public var loadBalanceIp: String?

    public var locationCode: String?

    public var regionId: String?

    public var remark: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.backSourceMark != nil {
            map["BackSourceMark"] = self.backSourceMark!
        }
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.groupName != nil {
            map["GroupName"] = self.groupName!
        }
        if self.groupType != nil {
            map["GroupType"] = self.groupType!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.loadBalanceIp != nil {
            map["LoadBalanceIp"] = self.loadBalanceIp!
        }
        if self.locationCode != nil {
            map["LocationCode"] = self.locationCode!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.remark != nil {
            map["Remark"] = self.remark!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BackSourceMark"] as? String {
            self.backSourceMark = value
        }
        if let value = dict["ClusterId"] as? Int64 {
            self.clusterId = value
        }
        if let value = dict["GroupName"] as? String {
            self.groupName = value
        }
        if let value = dict["GroupType"] as? String {
            self.groupType = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["LoadBalanceIp"] as? String {
            self.loadBalanceIp = value
        }
        if let value = dict["LocationCode"] as? String {
            self.locationCode = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Remark"] as? String {
            self.remark = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class CreateHybridCloudGroupResponseBody : Tea.TeaModel {
    public var data: Int64?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Data"] as? Int64 {
            self.data = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateHybridCloudGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateHybridCloudGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateHybridCloudGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateLogDeliveryConfigRequest : Tea.TeaModel {
    public var deliveryDetail: String?

    public var deliveryName: String?

    public var deliveryType: String?

    public var instanceId: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.deliveryDetail != nil {
            map["DeliveryDetail"] = self.deliveryDetail!
        }
        if self.deliveryName != nil {
            map["DeliveryName"] = self.deliveryName!
        }
        if self.deliveryType != nil {
            map["DeliveryType"] = self.deliveryType!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DeliveryDetail"] as? String {
            self.deliveryDetail = value
        }
        if let value = dict["DeliveryName"] as? String {
            self.deliveryName = value
        }
        if let value = dict["DeliveryType"] as? String {
            self.deliveryType = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class CreateLogDeliveryConfigResponseBody : Tea.TeaModel {
    public var deliveryName: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.deliveryName != nil {
            map["DeliveryName"] = self.deliveryName!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DeliveryName"] as? String {
            self.deliveryName = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateLogDeliveryConfigResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateLogDeliveryConfigResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateLogDeliveryConfigResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateMajorProtectionBlackIpRequest : Tea.TeaModel {
    public var description_: String?

    public var expiredTime: Int64?

    public var instanceId: String?

    public var ipList: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public var ruleId: Int64?

    public var templateId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.expiredTime != nil {
            map["ExpiredTime"] = self.expiredTime!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.ipList != nil {
            map["IpList"] = self.ipList!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.ruleId != nil {
            map["RuleId"] = self.ruleId!
        }
        if self.templateId != nil {
            map["TemplateId"] = self.templateId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["ExpiredTime"] as? Int64 {
            self.expiredTime = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["IpList"] as? String {
            self.ipList = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["RuleId"] as? Int64 {
            self.ruleId = value
        }
        if let value = dict["TemplateId"] as? Int64 {
            self.templateId = value
        }
    }
}

public class CreateMajorProtectionBlackIpResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateMajorProtectionBlackIpResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateMajorProtectionBlackIpResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateMajorProtectionBlackIpResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateMajorProtectionBlackIpV2Request : Tea.TeaModel {
    public var description_: String?

    public var expiredTime: Int64?

    public var instanceId: String?

    public var ipList: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public var ruleId: Int64?

    public var templateId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.expiredTime != nil {
            map["ExpiredTime"] = self.expiredTime!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.ipList != nil {
            map["IpList"] = self.ipList!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.ruleId != nil {
            map["RuleId"] = self.ruleId!
        }
        if self.templateId != nil {
            map["TemplateId"] = self.templateId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["ExpiredTime"] as? Int64 {
            self.expiredTime = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["IpList"] as? String {
            self.ipList = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["RuleId"] as? Int64 {
            self.ruleId = value
        }
        if let value = dict["TemplateId"] as? Int64 {
            self.templateId = value
        }
    }
}

public class CreateMajorProtectionBlackIpV2ResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateMajorProtectionBlackIpV2Response : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateMajorProtectionBlackIpV2ResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateMajorProtectionBlackIpV2ResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateMemberAccountsRequest : Tea.TeaModel {
    public var instanceId: String?

    public var memberAccountIds: [String]?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public var sourceIp: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.memberAccountIds != nil {
            map["MemberAccountIds"] = self.memberAccountIds!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.sourceIp != nil {
            map["SourceIp"] = self.sourceIp!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["MemberAccountIds"] as? [String] {
            self.memberAccountIds = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["SourceIp"] as? String {
            self.sourceIp = value
        }
    }
}

public class CreateMemberAccountsResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateMemberAccountsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateMemberAccountsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateMemberAccountsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreatePocFunctionRequest : Tea.TeaModel {
    public var instanceId: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
    }
}

public class CreatePocFunctionResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreatePocFunctionResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreatePocFunctionResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreatePocFunctionResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreatePostpaidInstanceRequest : Tea.TeaModel {
    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class CreatePostpaidInstanceResponseBody : Tea.TeaModel {
    public var instanceId: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreatePostpaidInstanceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreatePostpaidInstanceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreatePostpaidInstanceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateSM2CertRequest : Tea.TeaModel {
    public var certName: String?

    public var encryptCertificate: String?

    public var encryptPrivateKey: String?

    public var instanceId: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public var signCertificate: String?

    public var signPrivateKey: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.certName != nil {
            map["CertName"] = self.certName!
        }
        if self.encryptCertificate != nil {
            map["EncryptCertificate"] = self.encryptCertificate!
        }
        if self.encryptPrivateKey != nil {
            map["EncryptPrivateKey"] = self.encryptPrivateKey!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.signCertificate != nil {
            map["SignCertificate"] = self.signCertificate!
        }
        if self.signPrivateKey != nil {
            map["SignPrivateKey"] = self.signPrivateKey!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CertName"] as? String {
            self.certName = value
        }
        if let value = dict["EncryptCertificate"] as? String {
            self.encryptCertificate = value
        }
        if let value = dict["EncryptPrivateKey"] as? String {
            self.encryptPrivateKey = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["SignCertificate"] as? String {
            self.signCertificate = value
        }
        if let value = dict["SignPrivateKey"] as? String {
            self.signPrivateKey = value
        }
    }
}

public class CreateSM2CertResponseBody : Tea.TeaModel {
    public var certIdentifier: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.certIdentifier != nil {
            map["CertIdentifier"] = self.certIdentifier!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CertIdentifier"] as? String {
            self.certIdentifier = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateSM2CertResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateSM2CertResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateSM2CertResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteApisecAbnormalsRequest : Tea.TeaModel {
    public var abnormalIds: [String]?

    public var clusterId: String?

    public var instanceId: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.abnormalIds != nil {
            map["AbnormalIds"] = self.abnormalIds!
        }
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AbnormalIds"] as? [String] {
            self.abnormalIds = value
        }
        if let value = dict["ClusterId"] as? String {
            self.clusterId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class DeleteApisecAbnormalsResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteApisecAbnormalsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteApisecAbnormalsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteApisecAbnormalsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteApisecEventsRequest : Tea.TeaModel {
    public var clusterId: String?

    public var eventIds: [String]?

    public var instanceId: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.eventIds != nil {
            map["EventIds"] = self.eventIds!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClusterId"] as? String {
            self.clusterId = value
        }
        if let value = dict["EventIds"] as? [String] {
            self.eventIds = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class DeleteApisecEventsResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteApisecEventsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteApisecEventsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteApisecEventsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteCloudResourceRequest : Tea.TeaModel {
    public var instanceId: String?

    public var port: Int32?

    public var regionId: String?

    public var resourceInstanceId: String?

    public var resourceManagerResourceGroupId: String?

    public var resourceProduct: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.port != nil {
            map["Port"] = self.port!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceInstanceId != nil {
            map["ResourceInstanceId"] = self.resourceInstanceId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.resourceProduct != nil {
            map["ResourceProduct"] = self.resourceProduct!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["Port"] as? Int32 {
            self.port = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceInstanceId"] as? String {
            self.resourceInstanceId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["ResourceProduct"] as? String {
            self.resourceProduct = value
        }
    }
}

public class DeleteCloudResourceResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteCloudResourceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteCloudResourceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteCloudResourceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteDefenseResourceRequest : Tea.TeaModel {
    public var instanceId: String?

    public var regionId: String?

    public var resource: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resource != nil {
            map["Resource"] = self.resource!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Resource"] as? String {
            self.resource = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class DeleteDefenseResourceResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteDefenseResourceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteDefenseResourceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteDefenseResourceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteDefenseResourceGroupRequest : Tea.TeaModel {
    public var groupName: String?

    public var instanceId: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.groupName != nil {
            map["GroupName"] = self.groupName!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["GroupName"] as? String {
            self.groupName = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class DeleteDefenseResourceGroupResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteDefenseResourceGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteDefenseResourceGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteDefenseResourceGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteDefenseRuleRequest : Tea.TeaModel {
    public var defenseType: String?

    public var instanceId: String?

    public var regionId: String?

    public var resource: String?

    public var resourceManagerResourceGroupId: String?

    public var ruleIds: String?

    public var templateId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.defenseType != nil {
            map["DefenseType"] = self.defenseType!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resource != nil {
            map["Resource"] = self.resource!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.ruleIds != nil {
            map["RuleIds"] = self.ruleIds!
        }
        if self.templateId != nil {
            map["TemplateId"] = self.templateId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DefenseType"] as? String {
            self.defenseType = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Resource"] as? String {
            self.resource = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["RuleIds"] as? String {
            self.ruleIds = value
        }
        if let value = dict["TemplateId"] as? Int64 {
            self.templateId = value
        }
    }
}

public class DeleteDefenseRuleResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteDefenseRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteDefenseRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteDefenseRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteDefenseRuleBlockIpRequest : Tea.TeaModel {
    public var instanceId: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public var ruleId: Int64?

    public var templateId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.ruleId != nil {
            map["RuleId"] = self.ruleId!
        }
        if self.templateId != nil {
            map["TemplateId"] = self.templateId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["RuleId"] as? Int64 {
            self.ruleId = value
        }
        if let value = dict["TemplateId"] as? Int64 {
            self.templateId = value
        }
    }
}

public class DeleteDefenseRuleBlockIpResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteDefenseRuleBlockIpResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteDefenseRuleBlockIpResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteDefenseRuleBlockIpResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteDefenseTemplateRequest : Tea.TeaModel {
    public var instanceId: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public var templateId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.templateId != nil {
            map["TemplateId"] = self.templateId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["TemplateId"] as? Int64 {
            self.templateId = value
        }
    }
}

public class DeleteDefenseTemplateResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteDefenseTemplateResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteDefenseTemplateResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteDefenseTemplateResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteDomainRequest : Tea.TeaModel {
    public var accessType: String?

    public var domain: String?

    public var domainId: String?

    public var instanceId: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.accessType != nil {
            map["AccessType"] = self.accessType!
        }
        if self.domain != nil {
            map["Domain"] = self.domain!
        }
        if self.domainId != nil {
            map["DomainId"] = self.domainId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AccessType"] as? String {
            self.accessType = value
        }
        if let value = dict["Domain"] as? String {
            self.domain = value
        }
        if let value = dict["DomainId"] as? String {
            self.domainId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DeleteDomainResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteDomainResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteDomainResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteDomainResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteHybridCloudClusterRuleRequest : Tea.TeaModel {
    public var clusterRuleResourceId: String?

    public var instanceId: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clusterRuleResourceId != nil {
            map["ClusterRuleResourceId"] = self.clusterRuleResourceId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClusterRuleResourceId"] as? String {
            self.clusterRuleResourceId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class DeleteHybridCloudClusterRuleResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteHybridCloudClusterRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteHybridCloudClusterRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteHybridCloudClusterRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteHybridCloudGroupRequest : Tea.TeaModel {
    public var clusterId: Int64?

    public var groupId: Int64?

    public var instanceId: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClusterId"] as? Int64 {
            self.clusterId = value
        }
        if let value = dict["GroupId"] as? Int64 {
            self.groupId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class DeleteHybridCloudGroupResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteHybridCloudGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteHybridCloudGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteHybridCloudGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteLogDeliveryConfigRequest : Tea.TeaModel {
    public var deliveryName: String?

    public var instanceId: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.deliveryName != nil {
            map["DeliveryName"] = self.deliveryName!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DeliveryName"] as? String {
            self.deliveryName = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class DeleteLogDeliveryConfigResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteLogDeliveryConfigResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteLogDeliveryConfigResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteLogDeliveryConfigResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteMajorProtectionBlackIpRequest : Tea.TeaModel {
    public var instanceId: String?

    public var ipList: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public var ruleId: Int64?

    public var templateId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.ipList != nil {
            map["IpList"] = self.ipList!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.ruleId != nil {
            map["RuleId"] = self.ruleId!
        }
        if self.templateId != nil {
            map["TemplateId"] = self.templateId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["IpList"] as? String {
            self.ipList = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["RuleId"] as? Int64 {
            self.ruleId = value
        }
        if let value = dict["TemplateId"] as? Int64 {
            self.templateId = value
        }
    }
}

public class DeleteMajorProtectionBlackIpResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteMajorProtectionBlackIpResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteMajorProtectionBlackIpResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteMajorProtectionBlackIpResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteMemberAccountRequest : Tea.TeaModel {
    public var instanceId: String?

    public var memberAccountId: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public var sourceIp: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.memberAccountId != nil {
            map["MemberAccountId"] = self.memberAccountId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.sourceIp != nil {
            map["SourceIp"] = self.sourceIp!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["MemberAccountId"] as? String {
            self.memberAccountId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["SourceIp"] as? String {
            self.sourceIp = value
        }
    }
}

public class DeleteMemberAccountResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteMemberAccountResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteMemberAccountResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteMemberAccountResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeAbnormalCloudResourcesRequest : Tea.TeaModel {
    public var instanceId: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class DescribeAbnormalCloudResourcesResponseBody : Tea.TeaModel {
    public class AbnormalCloudResources : Tea.TeaModel {
        public class Details : Tea.TeaModel {
            public var appliedType: String?

            public var certName: String?

            public var code: String?

            public var commonName: String?

            public var expireTime: Int64?

            public var productCertId: String?

            public var productCertName: String?

            public var productDomainExtension: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.appliedType != nil {
                    map["AppliedType"] = self.appliedType!
                }
                if self.certName != nil {
                    map["CertName"] = self.certName!
                }
                if self.code != nil {
                    map["Code"] = self.code!
                }
                if self.commonName != nil {
                    map["CommonName"] = self.commonName!
                }
                if self.expireTime != nil {
                    map["ExpireTime"] = self.expireTime!
                }
                if self.productCertId != nil {
                    map["ProductCertId"] = self.productCertId!
                }
                if self.productCertName != nil {
                    map["ProductCertName"] = self.productCertName!
                }
                if self.productDomainExtension != nil {
                    map["ProductDomainExtension"] = self.productDomainExtension!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AppliedType"] as? String {
                    self.appliedType = value
                }
                if let value = dict["CertName"] as? String {
                    self.certName = value
                }
                if let value = dict["Code"] as? String {
                    self.code = value
                }
                if let value = dict["CommonName"] as? String {
                    self.commonName = value
                }
                if let value = dict["ExpireTime"] as? Int64 {
                    self.expireTime = value
                }
                if let value = dict["ProductCertId"] as? String {
                    self.productCertId = value
                }
                if let value = dict["ProductCertName"] as? String {
                    self.productCertName = value
                }
                if let value = dict["ProductDomainExtension"] as? String {
                    self.productDomainExtension = value
                }
            }
        }
        public var details: [DescribeAbnormalCloudResourcesResponseBody.AbnormalCloudResources.Details]?

        public var reason: String?

        public var resourceInstanceId: String?

        public var resourceInstanceName: String?

        public var resourceInstancePort: Int32?

        public var resourceProduct: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.details != nil {
                var tmp : [Any] = []
                for k in self.details! {
                    tmp.append(k.toMap())
                }
                map["Details"] = tmp
            }
            if self.reason != nil {
                map["Reason"] = self.reason!
            }
            if self.resourceInstanceId != nil {
                map["ResourceInstanceId"] = self.resourceInstanceId!
            }
            if self.resourceInstanceName != nil {
                map["ResourceInstanceName"] = self.resourceInstanceName!
            }
            if self.resourceInstancePort != nil {
                map["ResourceInstancePort"] = self.resourceInstancePort!
            }
            if self.resourceProduct != nil {
                map["ResourceProduct"] = self.resourceProduct!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Details"] as? [Any?] {
                var tmp : [DescribeAbnormalCloudResourcesResponseBody.AbnormalCloudResources.Details] = []
                for v in value {
                    if v != nil {
                        var model = DescribeAbnormalCloudResourcesResponseBody.AbnormalCloudResources.Details()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.details = tmp
            }
            if let value = dict["Reason"] as? String {
                self.reason = value
            }
            if let value = dict["ResourceInstanceId"] as? String {
                self.resourceInstanceId = value
            }
            if let value = dict["ResourceInstanceName"] as? String {
                self.resourceInstanceName = value
            }
            if let value = dict["ResourceInstancePort"] as? Int32 {
                self.resourceInstancePort = value
            }
            if let value = dict["ResourceProduct"] as? String {
                self.resourceProduct = value
            }
        }
    }
    public var abnormalCloudResources: [DescribeAbnormalCloudResourcesResponseBody.AbnormalCloudResources]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.abnormalCloudResources != nil {
            var tmp : [Any] = []
            for k in self.abnormalCloudResources! {
                tmp.append(k.toMap())
            }
            map["AbnormalCloudResources"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AbnormalCloudResources"] as? [Any?] {
            var tmp : [DescribeAbnormalCloudResourcesResponseBody.AbnormalCloudResources] = []
            for v in value {
                if v != nil {
                    var model = DescribeAbnormalCloudResourcesResponseBody.AbnormalCloudResources()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.abnormalCloudResources = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeAbnormalCloudResourcesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeAbnormalCloudResourcesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeAbnormalCloudResourcesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeAccountDelegatedStatusRequest : Tea.TeaModel {
    public var instanceId: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class DescribeAccountDelegatedStatusResponseBody : Tea.TeaModel {
    public var accountId: String?

    public var accountName: String?

    public var delegatedStatus: Bool?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.accountId != nil {
            map["AccountId"] = self.accountId!
        }
        if self.accountName != nil {
            map["AccountName"] = self.accountName!
        }
        if self.delegatedStatus != nil {
            map["DelegatedStatus"] = self.delegatedStatus!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AccountId"] as? String {
            self.accountId = value
        }
        if let value = dict["AccountName"] as? String {
            self.accountName = value
        }
        if let value = dict["DelegatedStatus"] as? Bool {
            self.delegatedStatus = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeAccountDelegatedStatusResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeAccountDelegatedStatusResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeAccountDelegatedStatusResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeApiExportsRequest : Tea.TeaModel {
    public var instanceId: String?

    public var lang: String?

    public var pageNumber: Int64?

    public var pageSize: Int64?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["PageNumber"] as? Int64 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class DescribeApiExportsResponseBody : Tea.TeaModel {
    public class ApiExports : Tea.TeaModel {
        public var createTime: Int64?

        public var fileName: String?

        public var fileUrl: String?

        public var format: String?

        public var status: String?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.fileName != nil {
                map["FileName"] = self.fileName!
            }
            if self.fileUrl != nil {
                map["FileUrl"] = self.fileUrl!
            }
            if self.format != nil {
                map["Format"] = self.format!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CreateTime"] as? Int64 {
                self.createTime = value
            }
            if let value = dict["FileName"] as? String {
                self.fileName = value
            }
            if let value = dict["FileUrl"] as? String {
                self.fileUrl = value
            }
            if let value = dict["Format"] as? String {
                self.format = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
        }
    }
    public var apiExports: [DescribeApiExportsResponseBody.ApiExports]?

    public var requestId: String?

    public var total: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiExports != nil {
            var tmp : [Any] = []
            for k in self.apiExports! {
                tmp.append(k.toMap())
            }
            map["ApiExports"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.total != nil {
            map["Total"] = self.total!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiExports"] as? [Any?] {
            var tmp : [DescribeApiExportsResponseBody.ApiExports] = []
            for v in value {
                if v != nil {
                    var model = DescribeApiExportsResponseBody.ApiExports()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.apiExports = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Total"] as? Int64 {
            self.total = value
        }
    }
}

public class DescribeApiExportsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeApiExportsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeApiExportsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeApisecAbnormalDomainStatisticRequest : Tea.TeaModel {
    public var clusterId: String?

    public var endTime: Int64?

    public var instanceId: String?

    public var orderWay: String?

    public var pageNumber: Int64?

    public var pageSize: Int64?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public var startTime: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.orderWay != nil {
            map["OrderWay"] = self.orderWay!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClusterId"] as? String {
            self.clusterId = value
        }
        if let value = dict["EndTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["OrderWay"] as? String {
            self.orderWay = value
        }
        if let value = dict["PageNumber"] as? Int64 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
    }
}

public class DescribeApisecAbnormalDomainStatisticResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var apiCount: Int64?

        public var domain: String?

        public var high: Int64?

        public var low: Int64?

        public var medium: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.apiCount != nil {
                map["ApiCount"] = self.apiCount!
            }
            if self.domain != nil {
                map["Domain"] = self.domain!
            }
            if self.high != nil {
                map["High"] = self.high!
            }
            if self.low != nil {
                map["Low"] = self.low!
            }
            if self.medium != nil {
                map["Medium"] = self.medium!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ApiCount"] as? Int64 {
                self.apiCount = value
            }
            if let value = dict["Domain"] as? String {
                self.domain = value
            }
            if let value = dict["High"] as? Int64 {
                self.high = value
            }
            if let value = dict["Low"] as? Int64 {
                self.low = value
            }
            if let value = dict["Medium"] as? Int64 {
                self.medium = value
            }
        }
    }
    public var data: [DescribeApisecAbnormalDomainStatisticResponseBody.Data]?

    public var requestId: String?

    public var totalCount: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [DescribeApisecAbnormalDomainStatisticResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = DescribeApisecAbnormalDomainStatisticResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int64 {
            self.totalCount = value
        }
    }
}

public class DescribeApisecAbnormalDomainStatisticResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeApisecAbnormalDomainStatisticResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeApisecAbnormalDomainStatisticResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeApisecAbnormalsRequest : Tea.TeaModel {
    public var abnormalId: String?

    public var abnormalLevel: String?

    public var abnormalTag: String?

    public var apiFormat: String?

    public var apiId: String?

    public var apiTag: String?

    public var clusterId: String?

    public var endTime: String?

    public var instanceId: String?

    public var matchedHost: String?

    public var orderKey: String?

    public var orderWay: String?

    public var origin: String?

    public var pageNumber: Int64?

    public var pageSize: Int64?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public var startTime: String?

    public var userStatus: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.abnormalId != nil {
            map["AbnormalId"] = self.abnormalId!
        }
        if self.abnormalLevel != nil {
            map["AbnormalLevel"] = self.abnormalLevel!
        }
        if self.abnormalTag != nil {
            map["AbnormalTag"] = self.abnormalTag!
        }
        if self.apiFormat != nil {
            map["ApiFormat"] = self.apiFormat!
        }
        if self.apiId != nil {
            map["ApiId"] = self.apiId!
        }
        if self.apiTag != nil {
            map["ApiTag"] = self.apiTag!
        }
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.matchedHost != nil {
            map["MatchedHost"] = self.matchedHost!
        }
        if self.orderKey != nil {
            map["OrderKey"] = self.orderKey!
        }
        if self.orderWay != nil {
            map["OrderWay"] = self.orderWay!
        }
        if self.origin != nil {
            map["Origin"] = self.origin!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.userStatus != nil {
            map["UserStatus"] = self.userStatus!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AbnormalId"] as? String {
            self.abnormalId = value
        }
        if let value = dict["AbnormalLevel"] as? String {
            self.abnormalLevel = value
        }
        if let value = dict["AbnormalTag"] as? String {
            self.abnormalTag = value
        }
        if let value = dict["ApiFormat"] as? String {
            self.apiFormat = value
        }
        if let value = dict["ApiId"] as? String {
            self.apiId = value
        }
        if let value = dict["ApiTag"] as? String {
            self.apiTag = value
        }
        if let value = dict["ClusterId"] as? String {
            self.clusterId = value
        }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["MatchedHost"] as? String {
            self.matchedHost = value
        }
        if let value = dict["OrderKey"] as? String {
            self.orderKey = value
        }
        if let value = dict["OrderWay"] as? String {
            self.orderWay = value
        }
        if let value = dict["Origin"] as? String {
            self.origin = value
        }
        if let value = dict["PageNumber"] as? Int64 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
        if let value = dict["UserStatus"] as? String {
            self.userStatus = value
        }
    }
}

public class DescribeApisecAbnormalsResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var abnormalEventNumber: Int64?

        public var abnormalId: String?

        public var abnormalInfo: String?

        public var abnormalLevel: String?

        public var abnormalTag: String?

        public var abnromalStatus: String?

        public var apiFormat: String?

        public var apiId: String?

        public var apiTag: String?

        public var discoverTime: Int64?

        public var examples: [String]?

        public var firstTime: Int64?

        public var follow: Int64?

        public var ignoreTime: Int64?

        public var lastestTime: Int64?

        public var latestDiscoverTime: Int64?

        public var matchedHost: String?

        public var note: String?

        public var origin: String?

        public var userStatus: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.abnormalEventNumber != nil {
                map["AbnormalEventNumber"] = self.abnormalEventNumber!
            }
            if self.abnormalId != nil {
                map["AbnormalId"] = self.abnormalId!
            }
            if self.abnormalInfo != nil {
                map["AbnormalInfo"] = self.abnormalInfo!
            }
            if self.abnormalLevel != nil {
                map["AbnormalLevel"] = self.abnormalLevel!
            }
            if self.abnormalTag != nil {
                map["AbnormalTag"] = self.abnormalTag!
            }
            if self.abnromalStatus != nil {
                map["AbnromalStatus"] = self.abnromalStatus!
            }
            if self.apiFormat != nil {
                map["ApiFormat"] = self.apiFormat!
            }
            if self.apiId != nil {
                map["ApiId"] = self.apiId!
            }
            if self.apiTag != nil {
                map["ApiTag"] = self.apiTag!
            }
            if self.discoverTime != nil {
                map["DiscoverTime"] = self.discoverTime!
            }
            if self.examples != nil {
                map["Examples"] = self.examples!
            }
            if self.firstTime != nil {
                map["FirstTime"] = self.firstTime!
            }
            if self.follow != nil {
                map["Follow"] = self.follow!
            }
            if self.ignoreTime != nil {
                map["IgnoreTime"] = self.ignoreTime!
            }
            if self.lastestTime != nil {
                map["LastestTime"] = self.lastestTime!
            }
            if self.latestDiscoverTime != nil {
                map["LatestDiscoverTime"] = self.latestDiscoverTime!
            }
            if self.matchedHost != nil {
                map["MatchedHost"] = self.matchedHost!
            }
            if self.note != nil {
                map["Note"] = self.note!
            }
            if self.origin != nil {
                map["Origin"] = self.origin!
            }
            if self.userStatus != nil {
                map["UserStatus"] = self.userStatus!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AbnormalEventNumber"] as? Int64 {
                self.abnormalEventNumber = value
            }
            if let value = dict["AbnormalId"] as? String {
                self.abnormalId = value
            }
            if let value = dict["AbnormalInfo"] as? String {
                self.abnormalInfo = value
            }
            if let value = dict["AbnormalLevel"] as? String {
                self.abnormalLevel = value
            }
            if let value = dict["AbnormalTag"] as? String {
                self.abnormalTag = value
            }
            if let value = dict["AbnromalStatus"] as? String {
                self.abnromalStatus = value
            }
            if let value = dict["ApiFormat"] as? String {
                self.apiFormat = value
            }
            if let value = dict["ApiId"] as? String {
                self.apiId = value
            }
            if let value = dict["ApiTag"] as? String {
                self.apiTag = value
            }
            if let value = dict["DiscoverTime"] as? Int64 {
                self.discoverTime = value
            }
            if let value = dict["Examples"] as? [String] {
                self.examples = value
            }
            if let value = dict["FirstTime"] as? Int64 {
                self.firstTime = value
            }
            if let value = dict["Follow"] as? Int64 {
                self.follow = value
            }
            if let value = dict["IgnoreTime"] as? Int64 {
                self.ignoreTime = value
            }
            if let value = dict["LastestTime"] as? Int64 {
                self.lastestTime = value
            }
            if let value = dict["LatestDiscoverTime"] as? Int64 {
                self.latestDiscoverTime = value
            }
            if let value = dict["MatchedHost"] as? String {
                self.matchedHost = value
            }
            if let value = dict["Note"] as? String {
                self.note = value
            }
            if let value = dict["Origin"] as? String {
                self.origin = value
            }
            if let value = dict["UserStatus"] as? String {
                self.userStatus = value
            }
        }
    }
    public var data: [DescribeApisecAbnormalsResponseBody.Data]?

    public var requestId: String?

    public var totalCount: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [DescribeApisecAbnormalsResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = DescribeApisecAbnormalsResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int64 {
            self.totalCount = value
        }
    }
}

public class DescribeApisecAbnormalsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeApisecAbnormalsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeApisecAbnormalsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeApisecApiResourcesRequest : Tea.TeaModel {
    public var apiFormat: String?

    public var apiId: String?

    public var apiMethod: String?

    public var apiStatus: String?

    public var apiTag: String?

    public var apiType: String?

    public var authFlag: String?

    public var clusterId: String?

    public var endTime: String?

    public var follow: Int64?

    public var instanceId: String?

    public var matchedHost: String?

    public var note: String?

    public var orderKey: String?

    public var orderWay: String?

    public var pageNumber: Int64?

    public var pageSize: Int64?

    public var regionId: String?

    public var requestSensitiveType: String?

    public var resourceManagerResourceGroupId: String?

    public var sensitiveLevel: String?

    public var sensitiveType: String?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiFormat != nil {
            map["ApiFormat"] = self.apiFormat!
        }
        if self.apiId != nil {
            map["ApiId"] = self.apiId!
        }
        if self.apiMethod != nil {
            map["ApiMethod"] = self.apiMethod!
        }
        if self.apiStatus != nil {
            map["ApiStatus"] = self.apiStatus!
        }
        if self.apiTag != nil {
            map["ApiTag"] = self.apiTag!
        }
        if self.apiType != nil {
            map["ApiType"] = self.apiType!
        }
        if self.authFlag != nil {
            map["AuthFlag"] = self.authFlag!
        }
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.follow != nil {
            map["Follow"] = self.follow!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.matchedHost != nil {
            map["MatchedHost"] = self.matchedHost!
        }
        if self.note != nil {
            map["Note"] = self.note!
        }
        if self.orderKey != nil {
            map["OrderKey"] = self.orderKey!
        }
        if self.orderWay != nil {
            map["OrderWay"] = self.orderWay!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.requestSensitiveType != nil {
            map["RequestSensitiveType"] = self.requestSensitiveType!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.sensitiveLevel != nil {
            map["SensitiveLevel"] = self.sensitiveLevel!
        }
        if self.sensitiveType != nil {
            map["SensitiveType"] = self.sensitiveType!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiFormat"] as? String {
            self.apiFormat = value
        }
        if let value = dict["ApiId"] as? String {
            self.apiId = value
        }
        if let value = dict["ApiMethod"] as? String {
            self.apiMethod = value
        }
        if let value = dict["ApiStatus"] as? String {
            self.apiStatus = value
        }
        if let value = dict["ApiTag"] as? String {
            self.apiTag = value
        }
        if let value = dict["ApiType"] as? String {
            self.apiType = value
        }
        if let value = dict["AuthFlag"] as? String {
            self.authFlag = value
        }
        if let value = dict["ClusterId"] as? String {
            self.clusterId = value
        }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["Follow"] as? Int64 {
            self.follow = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["MatchedHost"] as? String {
            self.matchedHost = value
        }
        if let value = dict["Note"] as? String {
            self.note = value
        }
        if let value = dict["OrderKey"] as? String {
            self.orderKey = value
        }
        if let value = dict["OrderWay"] as? String {
            self.orderWay = value
        }
        if let value = dict["PageNumber"] as? Int64 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["RequestSensitiveType"] as? String {
            self.requestSensitiveType = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["SensitiveLevel"] as? String {
            self.sensitiveLevel = value
        }
        if let value = dict["SensitiveType"] as? String {
            self.sensitiveType = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
    }
}

public class DescribeApisecApiResourcesResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var abnormalNum: Int64?

        public var allCnt: Int64?

        public var apiFormat: String?

        public var apiId: String?

        public var apiInfo: String?

        public var apiMethod: String?

        public var apiSensitive: String?

        public var apiSensitiveRequest: String?

        public var apiSensitiveResponse: String?

        public var apiStatus: String?

        public var apiTag: String?

        public var apiType: String?

        public var authFlag: String?

        public var botCnt: Int64?

        public var crossBorderCnt: Int64?

        public var eventNum: Int64?

        public var examples: [String]?

        public var farthestTs: Int64?

        public var follow: Int32?

        public var lastestTs: Int64?

        public var matchedHost: String?

        public var note: String?

        public var resources: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.abnormalNum != nil {
                map["AbnormalNum"] = self.abnormalNum!
            }
            if self.allCnt != nil {
                map["AllCnt"] = self.allCnt!
            }
            if self.apiFormat != nil {
                map["ApiFormat"] = self.apiFormat!
            }
            if self.apiId != nil {
                map["ApiId"] = self.apiId!
            }
            if self.apiInfo != nil {
                map["ApiInfo"] = self.apiInfo!
            }
            if self.apiMethod != nil {
                map["ApiMethod"] = self.apiMethod!
            }
            if self.apiSensitive != nil {
                map["ApiSensitive"] = self.apiSensitive!
            }
            if self.apiSensitiveRequest != nil {
                map["ApiSensitiveRequest"] = self.apiSensitiveRequest!
            }
            if self.apiSensitiveResponse != nil {
                map["ApiSensitiveResponse"] = self.apiSensitiveResponse!
            }
            if self.apiStatus != nil {
                map["ApiStatus"] = self.apiStatus!
            }
            if self.apiTag != nil {
                map["ApiTag"] = self.apiTag!
            }
            if self.apiType != nil {
                map["ApiType"] = self.apiType!
            }
            if self.authFlag != nil {
                map["AuthFlag"] = self.authFlag!
            }
            if self.botCnt != nil {
                map["BotCnt"] = self.botCnt!
            }
            if self.crossBorderCnt != nil {
                map["CrossBorderCnt"] = self.crossBorderCnt!
            }
            if self.eventNum != nil {
                map["EventNum"] = self.eventNum!
            }
            if self.examples != nil {
                map["Examples"] = self.examples!
            }
            if self.farthestTs != nil {
                map["FarthestTs"] = self.farthestTs!
            }
            if self.follow != nil {
                map["Follow"] = self.follow!
            }
            if self.lastestTs != nil {
                map["LastestTs"] = self.lastestTs!
            }
            if self.matchedHost != nil {
                map["MatchedHost"] = self.matchedHost!
            }
            if self.note != nil {
                map["Note"] = self.note!
            }
            if self.resources != nil {
                map["Resources"] = self.resources!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AbnormalNum"] as? Int64 {
                self.abnormalNum = value
            }
            if let value = dict["AllCnt"] as? Int64 {
                self.allCnt = value
            }
            if let value = dict["ApiFormat"] as? String {
                self.apiFormat = value
            }
            if let value = dict["ApiId"] as? String {
                self.apiId = value
            }
            if let value = dict["ApiInfo"] as? String {
                self.apiInfo = value
            }
            if let value = dict["ApiMethod"] as? String {
                self.apiMethod = value
            }
            if let value = dict["ApiSensitive"] as? String {
                self.apiSensitive = value
            }
            if let value = dict["ApiSensitiveRequest"] as? String {
                self.apiSensitiveRequest = value
            }
            if let value = dict["ApiSensitiveResponse"] as? String {
                self.apiSensitiveResponse = value
            }
            if let value = dict["ApiStatus"] as? String {
                self.apiStatus = value
            }
            if let value = dict["ApiTag"] as? String {
                self.apiTag = value
            }
            if let value = dict["ApiType"] as? String {
                self.apiType = value
            }
            if let value = dict["AuthFlag"] as? String {
                self.authFlag = value
            }
            if let value = dict["BotCnt"] as? Int64 {
                self.botCnt = value
            }
            if let value = dict["CrossBorderCnt"] as? Int64 {
                self.crossBorderCnt = value
            }
            if let value = dict["EventNum"] as? Int64 {
                self.eventNum = value
            }
            if let value = dict["Examples"] as? [String] {
                self.examples = value
            }
            if let value = dict["FarthestTs"] as? Int64 {
                self.farthestTs = value
            }
            if let value = dict["Follow"] as? Int32 {
                self.follow = value
            }
            if let value = dict["LastestTs"] as? Int64 {
                self.lastestTs = value
            }
            if let value = dict["MatchedHost"] as? String {
                self.matchedHost = value
            }
            if let value = dict["Note"] as? String {
                self.note = value
            }
            if let value = dict["Resources"] as? [String] {
                self.resources = value
            }
        }
    }
    public var data: [DescribeApisecApiResourcesResponseBody.Data]?

    public var requestId: String?

    public var totalCount: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [DescribeApisecApiResourcesResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = DescribeApisecApiResourcesResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int64 {
            self.totalCount = value
        }
    }
}

public class DescribeApisecApiResourcesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeApisecApiResourcesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeApisecApiResourcesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeApisecAssetTrendRequest : Tea.TeaModel {
    public var clusterId: String?

    public var endTime: Int64?

    public var instanceId: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public var startTime: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClusterId"] as? String {
            self.clusterId = value
        }
        if let value = dict["EndTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
    }
}

public class DescribeApisecAssetTrendResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var assetActive: Int64?

        public var assetCount: Int64?

        public var assetOffline: Int64?

        public var timestamp: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.assetActive != nil {
                map["AssetActive"] = self.assetActive!
            }
            if self.assetCount != nil {
                map["AssetCount"] = self.assetCount!
            }
            if self.assetOffline != nil {
                map["AssetOffline"] = self.assetOffline!
            }
            if self.timestamp != nil {
                map["Timestamp"] = self.timestamp!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AssetActive"] as? Int64 {
                self.assetActive = value
            }
            if let value = dict["AssetCount"] as? Int64 {
                self.assetCount = value
            }
            if let value = dict["AssetOffline"] as? Int64 {
                self.assetOffline = value
            }
            if let value = dict["Timestamp"] as? Int64 {
                self.timestamp = value
            }
        }
    }
    public var data: [DescribeApisecAssetTrendResponseBody.Data]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [DescribeApisecAssetTrendResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = DescribeApisecAssetTrendResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeApisecAssetTrendResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeApisecAssetTrendResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeApisecAssetTrendResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeApisecEventDomainStatisticRequest : Tea.TeaModel {
    public var clusterId: String?

    public var endTime: Int64?

    public var instanceId: String?

    public var orderWay: String?

    public var pageNumber: Int64?

    public var pageSize: Int64?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public var startTime: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.orderWay != nil {
            map["OrderWay"] = self.orderWay!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClusterId"] as? String {
            self.clusterId = value
        }
        if let value = dict["EndTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["OrderWay"] as? String {
            self.orderWay = value
        }
        if let value = dict["PageNumber"] as? Int64 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
    }
}

public class DescribeApisecEventDomainStatisticResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var apiCount: Int64?

        public var domain: String?

        public var high: Int64?

        public var low: Int64?

        public var medium: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.apiCount != nil {
                map["ApiCount"] = self.apiCount!
            }
            if self.domain != nil {
                map["Domain"] = self.domain!
            }
            if self.high != nil {
                map["High"] = self.high!
            }
            if self.low != nil {
                map["Low"] = self.low!
            }
            if self.medium != nil {
                map["Medium"] = self.medium!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ApiCount"] as? Int64 {
                self.apiCount = value
            }
            if let value = dict["Domain"] as? String {
                self.domain = value
            }
            if let value = dict["High"] as? Int64 {
                self.high = value
            }
            if let value = dict["Low"] as? Int64 {
                self.low = value
            }
            if let value = dict["Medium"] as? Int64 {
                self.medium = value
            }
        }
    }
    public var data: [DescribeApisecEventDomainStatisticResponseBody.Data]?

    public var requestId: String?

    public var totalCount: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [DescribeApisecEventDomainStatisticResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = DescribeApisecEventDomainStatisticResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int64 {
            self.totalCount = value
        }
    }
}

public class DescribeApisecEventDomainStatisticResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeApisecEventDomainStatisticResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeApisecEventDomainStatisticResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeApisecEventsRequest : Tea.TeaModel {
    public var apiFormat: String?

    public var apiId: String?

    public var apiTag: String?

    public var attackIp: String?

    public var clusterId: String?

    public var endTs: Int64?

    public var eventId: String?

    public var eventLevel: String?

    public var eventTag: String?

    public var instanceId: String?

    public var matchedHost: String?

    public var orderKey: String?

    public var orderWay: String?

    public var origin: String?

    public var pageNumber: Int64?

    public var pageSize: Int64?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public var startTs: Int64?

    public var userStatus: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiFormat != nil {
            map["ApiFormat"] = self.apiFormat!
        }
        if self.apiId != nil {
            map["ApiId"] = self.apiId!
        }
        if self.apiTag != nil {
            map["ApiTag"] = self.apiTag!
        }
        if self.attackIp != nil {
            map["AttackIp"] = self.attackIp!
        }
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.endTs != nil {
            map["EndTs"] = self.endTs!
        }
        if self.eventId != nil {
            map["EventId"] = self.eventId!
        }
        if self.eventLevel != nil {
            map["EventLevel"] = self.eventLevel!
        }
        if self.eventTag != nil {
            map["EventTag"] = self.eventTag!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.matchedHost != nil {
            map["MatchedHost"] = self.matchedHost!
        }
        if self.orderKey != nil {
            map["OrderKey"] = self.orderKey!
        }
        if self.orderWay != nil {
            map["OrderWay"] = self.orderWay!
        }
        if self.origin != nil {
            map["Origin"] = self.origin!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.startTs != nil {
            map["StartTs"] = self.startTs!
        }
        if self.userStatus != nil {
            map["UserStatus"] = self.userStatus!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiFormat"] as? String {
            self.apiFormat = value
        }
        if let value = dict["ApiId"] as? String {
            self.apiId = value
        }
        if let value = dict["ApiTag"] as? String {
            self.apiTag = value
        }
        if let value = dict["AttackIp"] as? String {
            self.attackIp = value
        }
        if let value = dict["ClusterId"] as? String {
            self.clusterId = value
        }
        if let value = dict["EndTs"] as? Int64 {
            self.endTs = value
        }
        if let value = dict["EventId"] as? String {
            self.eventId = value
        }
        if let value = dict["EventLevel"] as? String {
            self.eventLevel = value
        }
        if let value = dict["EventTag"] as? String {
            self.eventTag = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["MatchedHost"] as? String {
            self.matchedHost = value
        }
        if let value = dict["OrderKey"] as? String {
            self.orderKey = value
        }
        if let value = dict["OrderWay"] as? String {
            self.orderWay = value
        }
        if let value = dict["Origin"] as? String {
            self.origin = value
        }
        if let value = dict["PageNumber"] as? Int64 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["StartTs"] as? Int64 {
            self.startTs = value
        }
        if let value = dict["UserStatus"] as? String {
            self.userStatus = value
        }
    }
}

public class DescribeApisecEventsResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var allCnt: Int64?

        public var apiFormat: String?

        public var apiId: String?

        public var apiTag: String?

        public var attackClient: String?

        public var attackCntInfo: String?

        public var attackIp: String?

        public var attackIpInfo: String?

        public var attackIps: [String]?

        public var endTs: Int64?

        public var eventId: String?

        public var eventInfo: String?

        public var eventLevel: String?

        public var eventTag: String?

        public var follow: Int32?

        public var matchedHost: String?

        public var note: String?

        public var origin: String?

        public var remoteCountry: String?

        public var remoteRegion: String?

        public var requestData: String?

        public var responseData: String?

        public var startTs: Int64?

        public var userStatus: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.allCnt != nil {
                map["AllCnt"] = self.allCnt!
            }
            if self.apiFormat != nil {
                map["ApiFormat"] = self.apiFormat!
            }
            if self.apiId != nil {
                map["ApiId"] = self.apiId!
            }
            if self.apiTag != nil {
                map["ApiTag"] = self.apiTag!
            }
            if self.attackClient != nil {
                map["AttackClient"] = self.attackClient!
            }
            if self.attackCntInfo != nil {
                map["AttackCntInfo"] = self.attackCntInfo!
            }
            if self.attackIp != nil {
                map["AttackIp"] = self.attackIp!
            }
            if self.attackIpInfo != nil {
                map["AttackIpInfo"] = self.attackIpInfo!
            }
            if self.attackIps != nil {
                map["AttackIps"] = self.attackIps!
            }
            if self.endTs != nil {
                map["EndTs"] = self.endTs!
            }
            if self.eventId != nil {
                map["EventId"] = self.eventId!
            }
            if self.eventInfo != nil {
                map["EventInfo"] = self.eventInfo!
            }
            if self.eventLevel != nil {
                map["EventLevel"] = self.eventLevel!
            }
            if self.eventTag != nil {
                map["EventTag"] = self.eventTag!
            }
            if self.follow != nil {
                map["Follow"] = self.follow!
            }
            if self.matchedHost != nil {
                map["MatchedHost"] = self.matchedHost!
            }
            if self.note != nil {
                map["Note"] = self.note!
            }
            if self.origin != nil {
                map["Origin"] = self.origin!
            }
            if self.remoteCountry != nil {
                map["RemoteCountry"] = self.remoteCountry!
            }
            if self.remoteRegion != nil {
                map["RemoteRegion"] = self.remoteRegion!
            }
            if self.requestData != nil {
                map["RequestData"] = self.requestData!
            }
            if self.responseData != nil {
                map["ResponseData"] = self.responseData!
            }
            if self.startTs != nil {
                map["StartTs"] = self.startTs!
            }
            if self.userStatus != nil {
                map["UserStatus"] = self.userStatus!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AllCnt"] as? Int64 {
                self.allCnt = value
            }
            if let value = dict["ApiFormat"] as? String {
                self.apiFormat = value
            }
            if let value = dict["ApiId"] as? String {
                self.apiId = value
            }
            if let value = dict["ApiTag"] as? String {
                self.apiTag = value
            }
            if let value = dict["AttackClient"] as? String {
                self.attackClient = value
            }
            if let value = dict["AttackCntInfo"] as? String {
                self.attackCntInfo = value
            }
            if let value = dict["AttackIp"] as? String {
                self.attackIp = value
            }
            if let value = dict["AttackIpInfo"] as? String {
                self.attackIpInfo = value
            }
            if let value = dict["AttackIps"] as? [String] {
                self.attackIps = value
            }
            if let value = dict["EndTs"] as? Int64 {
                self.endTs = value
            }
            if let value = dict["EventId"] as? String {
                self.eventId = value
            }
            if let value = dict["EventInfo"] as? String {
                self.eventInfo = value
            }
            if let value = dict["EventLevel"] as? String {
                self.eventLevel = value
            }
            if let value = dict["EventTag"] as? String {
                self.eventTag = value
            }
            if let value = dict["Follow"] as? Int32 {
                self.follow = value
            }
            if let value = dict["MatchedHost"] as? String {
                self.matchedHost = value
            }
            if let value = dict["Note"] as? String {
                self.note = value
            }
            if let value = dict["Origin"] as? String {
                self.origin = value
            }
            if let value = dict["RemoteCountry"] as? String {
                self.remoteCountry = value
            }
            if let value = dict["RemoteRegion"] as? String {
                self.remoteRegion = value
            }
            if let value = dict["RequestData"] as? String {
                self.requestData = value
            }
            if let value = dict["ResponseData"] as? String {
                self.responseData = value
            }
            if let value = dict["StartTs"] as? Int64 {
                self.startTs = value
            }
            if let value = dict["UserStatus"] as? String {
                self.userStatus = value
            }
        }
    }
    public var data: [DescribeApisecEventsResponseBody.Data]?

    public var requestId: String?

    public var totalCount: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [DescribeApisecEventsResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = DescribeApisecEventsResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int64 {
            self.totalCount = value
        }
    }
}

public class DescribeApisecEventsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeApisecEventsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeApisecEventsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeApisecLogDeliveriesRequest : Tea.TeaModel {
    public var instanceId: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class DescribeApisecLogDeliveriesResponseBody : Tea.TeaModel {
    public class DeliveryConfigs : Tea.TeaModel {
        public var assertKey: String?

        public var logRegionId: String?

        public var logStoreName: String?

        public var projectName: String?

        public var status: Bool?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.assertKey != nil {
                map["AssertKey"] = self.assertKey!
            }
            if self.logRegionId != nil {
                map["LogRegionId"] = self.logRegionId!
            }
            if self.logStoreName != nil {
                map["LogStoreName"] = self.logStoreName!
            }
            if self.projectName != nil {
                map["ProjectName"] = self.projectName!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AssertKey"] as? String {
                self.assertKey = value
            }
            if let value = dict["LogRegionId"] as? String {
                self.logRegionId = value
            }
            if let value = dict["LogStoreName"] as? String {
                self.logStoreName = value
            }
            if let value = dict["ProjectName"] as? String {
                self.projectName = value
            }
            if let value = dict["Status"] as? Bool {
                self.status = value
            }
        }
    }
    public var deliveryConfigs: [DescribeApisecLogDeliveriesResponseBody.DeliveryConfigs]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.deliveryConfigs != nil {
            var tmp : [Any] = []
            for k in self.deliveryConfigs! {
                tmp.append(k.toMap())
            }
            map["DeliveryConfigs"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DeliveryConfigs"] as? [Any?] {
            var tmp : [DescribeApisecLogDeliveriesResponseBody.DeliveryConfigs] = []
            for v in value {
                if v != nil {
                    var model = DescribeApisecLogDeliveriesResponseBody.DeliveryConfigs()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.deliveryConfigs = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeApisecLogDeliveriesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeApisecLogDeliveriesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeApisecLogDeliveriesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeApisecMatchedHostsRequest : Tea.TeaModel {
    public var clusterId: String?

    public var instanceId: String?

    public var matchedHost: String?

    public var pageNumber: String?

    public var pageSize: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.matchedHost != nil {
            map["MatchedHost"] = self.matchedHost!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClusterId"] as? String {
            self.clusterId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["MatchedHost"] as? String {
            self.matchedHost = value
        }
        if let value = dict["PageNumber"] as? String {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? String {
            self.pageSize = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
    }
}

public class DescribeApisecMatchedHostsResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var count: Int64?

        public var matchedHost: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.count != nil {
                map["Count"] = self.count!
            }
            if self.matchedHost != nil {
                map["MatchedHost"] = self.matchedHost!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Count"] as? Int64 {
                self.count = value
            }
            if let value = dict["MatchedHost"] as? String {
                self.matchedHost = value
            }
        }
    }
    public var data: [DescribeApisecMatchedHostsResponseBody.Data]?

    public var requestId: String?

    public var totalCount: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [DescribeApisecMatchedHostsResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = DescribeApisecMatchedHostsResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? String {
            self.totalCount = value
        }
    }
}

public class DescribeApisecMatchedHostsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeApisecMatchedHostsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeApisecMatchedHostsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeApisecProtectionGroupsRequest : Tea.TeaModel {
    public var apisecStatus: Int32?

    public var instanceId: String?

    public var pageNumber: Int64?

    public var pageSize: Int64?

    public var regionId: String?

    public var resourceGroup: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apisecStatus != nil {
            map["ApisecStatus"] = self.apisecStatus!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceGroup != nil {
            map["ResourceGroup"] = self.resourceGroup!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApisecStatus"] as? Int32 {
            self.apisecStatus = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["PageNumber"] as? Int64 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceGroup"] as? String {
            self.resourceGroup = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class DescribeApisecProtectionGroupsResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var apisecStatus: Int64?

        public var reportStatus: Int64?

        public var resourceGroup: String?

        public var traceStatus: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.apisecStatus != nil {
                map["ApisecStatus"] = self.apisecStatus!
            }
            if self.reportStatus != nil {
                map["ReportStatus"] = self.reportStatus!
            }
            if self.resourceGroup != nil {
                map["ResourceGroup"] = self.resourceGroup!
            }
            if self.traceStatus != nil {
                map["TraceStatus"] = self.traceStatus!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ApisecStatus"] as? Int64 {
                self.apisecStatus = value
            }
            if let value = dict["ReportStatus"] as? Int64 {
                self.reportStatus = value
            }
            if let value = dict["ResourceGroup"] as? String {
                self.resourceGroup = value
            }
            if let value = dict["TraceStatus"] as? Int64 {
                self.traceStatus = value
            }
        }
    }
    public var data: [DescribeApisecProtectionGroupsResponseBody.Data]?

    public var requestId: String?

    public var totalCount: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [DescribeApisecProtectionGroupsResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = DescribeApisecProtectionGroupsResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int64 {
            self.totalCount = value
        }
    }
}

public class DescribeApisecProtectionGroupsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeApisecProtectionGroupsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeApisecProtectionGroupsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeApisecProtectionResourcesRequest : Tea.TeaModel {
    public var apisecStatus: Int32?

    public var instanceId: String?

    public var pageNumber: Int64?

    public var pageSize: Int64?

    public var regionId: String?

    public var resource: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apisecStatus != nil {
            map["ApisecStatus"] = self.apisecStatus!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resource != nil {
            map["Resource"] = self.resource!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApisecStatus"] as? Int32 {
            self.apisecStatus = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["PageNumber"] as? Int64 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Resource"] as? String {
            self.resource = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class DescribeApisecProtectionResourcesResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var apisecStatus: Int64?

        public var reportStatus: Int64?

        public var resource: String?

        public var traceStatus: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.apisecStatus != nil {
                map["ApisecStatus"] = self.apisecStatus!
            }
            if self.reportStatus != nil {
                map["ReportStatus"] = self.reportStatus!
            }
            if self.resource != nil {
                map["Resource"] = self.resource!
            }
            if self.traceStatus != nil {
                map["TraceStatus"] = self.traceStatus!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ApisecStatus"] as? Int64 {
                self.apisecStatus = value
            }
            if let value = dict["ReportStatus"] as? Int64 {
                self.reportStatus = value
            }
            if let value = dict["Resource"] as? String {
                self.resource = value
            }
            if let value = dict["TraceStatus"] as? Int64 {
                self.traceStatus = value
            }
        }
    }
    public var data: [DescribeApisecProtectionResourcesResponseBody.Data]?

    public var requestId: String?

    public var totalCount: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [DescribeApisecProtectionResourcesResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = DescribeApisecProtectionResourcesResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int64 {
            self.totalCount = value
        }
    }
}

public class DescribeApisecProtectionResourcesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeApisecProtectionResourcesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeApisecProtectionResourcesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeApisecRulesRequest : Tea.TeaModel {
    public var instanceId: String?

    public var lang: String?

    public var level: String?

    public var name: String?

    public var origin: String?

    public var pageNumber: Int64?

    public var pageSize: Int64?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public var status: Int64?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.level != nil {
            map["Level"] = self.level!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.origin != nil {
            map["Origin"] = self.origin!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["Level"] as? String {
            self.level = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["Origin"] as? String {
            self.origin = value
        }
        if let value = dict["PageNumber"] as? Int64 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["Status"] as? Int64 {
            self.status = value
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
    }
}

public class DescribeApisecRulesResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var id: Int64?

        public var rule: String?

        public var status: Int64?

        public var type: String?

        public var updateTime: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.rule != nil {
                map["Rule"] = self.rule!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            if self.updateTime != nil {
                map["UpdateTime"] = self.updateTime!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Id"] as? Int64 {
                self.id = value
            }
            if let value = dict["Rule"] as? String {
                self.rule = value
            }
            if let value = dict["Status"] as? Int64 {
                self.status = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
            if let value = dict["UpdateTime"] as? Int64 {
                self.updateTime = value
            }
        }
    }
    public var data: [DescribeApisecRulesResponseBody.Data]?

    public var requestId: String?

    public var totalCount: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [DescribeApisecRulesResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = DescribeApisecRulesResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int64 {
            self.totalCount = value
        }
    }
}

public class DescribeApisecRulesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeApisecRulesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeApisecRulesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeApisecSensitiveDomainStatisticRequest : Tea.TeaModel {
    public var clusterId: String?

    public var endTime: Int64?

    public var instanceId: String?

    public var orderWay: String?

    public var pageNumber: Int64?

    public var pageSize: Int64?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public var startTime: Int64?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.orderWay != nil {
            map["OrderWay"] = self.orderWay!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClusterId"] as? String {
            self.clusterId = value
        }
        if let value = dict["EndTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["OrderWay"] as? String {
            self.orderWay = value
        }
        if let value = dict["PageNumber"] as? Int64 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
    }
}

public class DescribeApisecSensitiveDomainStatisticResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var apiCount: Int64?

        public var domainCount: Int64?

        public var sensitiveCode: String?

        public var sensitiveLevel: String?

        public var sensitiveName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.apiCount != nil {
                map["ApiCount"] = self.apiCount!
            }
            if self.domainCount != nil {
                map["DomainCount"] = self.domainCount!
            }
            if self.sensitiveCode != nil {
                map["SensitiveCode"] = self.sensitiveCode!
            }
            if self.sensitiveLevel != nil {
                map["SensitiveLevel"] = self.sensitiveLevel!
            }
            if self.sensitiveName != nil {
                map["SensitiveName"] = self.sensitiveName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ApiCount"] as? Int64 {
                self.apiCount = value
            }
            if let value = dict["DomainCount"] as? Int64 {
                self.domainCount = value
            }
            if let value = dict["SensitiveCode"] as? String {
                self.sensitiveCode = value
            }
            if let value = dict["SensitiveLevel"] as? String {
                self.sensitiveLevel = value
            }
            if let value = dict["SensitiveName"] as? String {
                self.sensitiveName = value
            }
        }
    }
    public var data: [DescribeApisecSensitiveDomainStatisticResponseBody.Data]?

    public var requestId: String?

    public var totalCount: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [DescribeApisecSensitiveDomainStatisticResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = DescribeApisecSensitiveDomainStatisticResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int64 {
            self.totalCount = value
        }
    }
}

public class DescribeApisecSensitiveDomainStatisticResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeApisecSensitiveDomainStatisticResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeApisecSensitiveDomainStatisticResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeApisecSlsLogStoresRequest : Tea.TeaModel {
    public var instanceId: String?

    public var logRegionId: String?

    public var projectName: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.logRegionId != nil {
            map["LogRegionId"] = self.logRegionId!
        }
        if self.projectName != nil {
            map["ProjectName"] = self.projectName!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["LogRegionId"] as? String {
            self.logRegionId = value
        }
        if let value = dict["ProjectName"] as? String {
            self.projectName = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class DescribeApisecSlsLogStoresResponseBody : Tea.TeaModel {
    public var logStores: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.logStores != nil {
            map["LogStores"] = self.logStores!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["LogStores"] as? [String] {
            self.logStores = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeApisecSlsLogStoresResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeApisecSlsLogStoresResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeApisecSlsLogStoresResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeApisecSlsProjectsRequest : Tea.TeaModel {
    public var instanceId: String?

    public var logRegionId: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.logRegionId != nil {
            map["LogRegionId"] = self.logRegionId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["LogRegionId"] as? String {
            self.logRegionId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class DescribeApisecSlsProjectsResponseBody : Tea.TeaModel {
    public var projects: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.projects != nil {
            map["Projects"] = self.projects!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Projects"] as? [String] {
            self.projects = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeApisecSlsProjectsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeApisecSlsProjectsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeApisecSlsProjectsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeApisecStatisticsRequest : Tea.TeaModel {
    public var clusterId: String?

    public var endTime: Int64?

    public var instanceId: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public var startTime: Int64?

    public var type: String?

    public var userStatusList: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        if self.userStatusList != nil {
            map["UserStatusList"] = self.userStatusList!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClusterId"] as? String {
            self.clusterId = value
        }
        if let value = dict["EndTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
        if let value = dict["UserStatusList"] as? [String] {
            self.userStatusList = value
        }
    }
}

public class DescribeApisecStatisticsResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var actioned: Int64?

        public var api: Int64?

        public var confirmed: Int64?

        public var domain: Int64?

        public var fixed: Int64?

        public var high: Int64?

        public var ignore: Int64?

        public var low: Int64?

        public var medium: Int64?

        public var notFixed: Int64?

        public var systemFixed: Int64?

        public var toBeConfirmed: Int64?

        public var toBeFixed: Int64?

        public var toBeVerified: Int64?

        public var todayHigh: String?

        public var todayLow: Int64?

        public var todayMedium: String?

        public var todayTotal: String?

        public var total: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.actioned != nil {
                map["Actioned"] = self.actioned!
            }
            if self.api != nil {
                map["Api"] = self.api!
            }
            if self.confirmed != nil {
                map["Confirmed"] = self.confirmed!
            }
            if self.domain != nil {
                map["Domain"] = self.domain!
            }
            if self.fixed != nil {
                map["Fixed"] = self.fixed!
            }
            if self.high != nil {
                map["High"] = self.high!
            }
            if self.ignore != nil {
                map["Ignore"] = self.ignore!
            }
            if self.low != nil {
                map["Low"] = self.low!
            }
            if self.medium != nil {
                map["Medium"] = self.medium!
            }
            if self.notFixed != nil {
                map["NotFixed"] = self.notFixed!
            }
            if self.systemFixed != nil {
                map["SystemFixed"] = self.systemFixed!
            }
            if self.toBeConfirmed != nil {
                map["ToBeConfirmed"] = self.toBeConfirmed!
            }
            if self.toBeFixed != nil {
                map["ToBeFixed"] = self.toBeFixed!
            }
            if self.toBeVerified != nil {
                map["ToBeVerified"] = self.toBeVerified!
            }
            if self.todayHigh != nil {
                map["TodayHigh"] = self.todayHigh!
            }
            if self.todayLow != nil {
                map["TodayLow"] = self.todayLow!
            }
            if self.todayMedium != nil {
                map["TodayMedium"] = self.todayMedium!
            }
            if self.todayTotal != nil {
                map["TodayTotal"] = self.todayTotal!
            }
            if self.total != nil {
                map["Total"] = self.total!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Actioned"] as? Int64 {
                self.actioned = value
            }
            if let value = dict["Api"] as? Int64 {
                self.api = value
            }
            if let value = dict["Confirmed"] as? Int64 {
                self.confirmed = value
            }
            if let value = dict["Domain"] as? Int64 {
                self.domain = value
            }
            if let value = dict["Fixed"] as? Int64 {
                self.fixed = value
            }
            if let value = dict["High"] as? Int64 {
                self.high = value
            }
            if let value = dict["Ignore"] as? Int64 {
                self.ignore = value
            }
            if let value = dict["Low"] as? Int64 {
                self.low = value
            }
            if let value = dict["Medium"] as? Int64 {
                self.medium = value
            }
            if let value = dict["NotFixed"] as? Int64 {
                self.notFixed = value
            }
            if let value = dict["SystemFixed"] as? Int64 {
                self.systemFixed = value
            }
            if let value = dict["ToBeConfirmed"] as? Int64 {
                self.toBeConfirmed = value
            }
            if let value = dict["ToBeFixed"] as? Int64 {
                self.toBeFixed = value
            }
            if let value = dict["ToBeVerified"] as? Int64 {
                self.toBeVerified = value
            }
            if let value = dict["TodayHigh"] as? String {
                self.todayHigh = value
            }
            if let value = dict["TodayLow"] as? Int64 {
                self.todayLow = value
            }
            if let value = dict["TodayMedium"] as? String {
                self.todayMedium = value
            }
            if let value = dict["TodayTotal"] as? String {
                self.todayTotal = value
            }
            if let value = dict["Total"] as? Int64 {
                self.total = value
            }
        }
    }
    public var data: DescribeApisecStatisticsResponseBody.Data?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Data"] as? [String: Any?] {
            var model = DescribeApisecStatisticsResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeApisecStatisticsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeApisecStatisticsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeApisecStatisticsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeApisecSuggestionsRequest : Tea.TeaModel {
    public var apiId: String?

    public var clusterId: String?

    public var instanceId: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiId != nil {
            map["ApiId"] = self.apiId!
        }
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiId"] as? String {
            self.apiId = value
        }
        if let value = dict["ClusterId"] as? String {
            self.clusterId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class DescribeApisecSuggestionsResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var apiFormat: String?

        public var matchedHost: String?

        public var suggestId: String?

        public var suggestRule: String?

        public var suggestType: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.apiFormat != nil {
                map["ApiFormat"] = self.apiFormat!
            }
            if self.matchedHost != nil {
                map["MatchedHost"] = self.matchedHost!
            }
            if self.suggestId != nil {
                map["SuggestId"] = self.suggestId!
            }
            if self.suggestRule != nil {
                map["SuggestRule"] = self.suggestRule!
            }
            if self.suggestType != nil {
                map["SuggestType"] = self.suggestType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ApiFormat"] as? String {
                self.apiFormat = value
            }
            if let value = dict["MatchedHost"] as? String {
                self.matchedHost = value
            }
            if let value = dict["SuggestId"] as? String {
                self.suggestId = value
            }
            if let value = dict["SuggestRule"] as? String {
                self.suggestRule = value
            }
            if let value = dict["SuggestType"] as? String {
                self.suggestType = value
            }
        }
    }
    public var data: [DescribeApisecSuggestionsResponseBody.Data]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [DescribeApisecSuggestionsResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = DescribeApisecSuggestionsResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeApisecSuggestionsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeApisecSuggestionsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeApisecSuggestionsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeApisecUserOperationsRequest : Tea.TeaModel {
    public var clusterId: String?

    public var instanceId: String?

    public var objectId: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.objectId != nil {
            map["ObjectId"] = self.objectId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClusterId"] as? String {
            self.clusterId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["ObjectId"] as? String {
            self.objectId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
    }
}

public class DescribeApisecUserOperationsResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var fromStatus: String?

        public var note: String?

        public var objectId: String?

        public var operationSource: String?

        public var time: Int64?

        public var toStatus: String?

        public var type: String?

        public var userId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.fromStatus != nil {
                map["FromStatus"] = self.fromStatus!
            }
            if self.note != nil {
                map["Note"] = self.note!
            }
            if self.objectId != nil {
                map["ObjectId"] = self.objectId!
            }
            if self.operationSource != nil {
                map["OperationSource"] = self.operationSource!
            }
            if self.time != nil {
                map["Time"] = self.time!
            }
            if self.toStatus != nil {
                map["ToStatus"] = self.toStatus!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            if self.userId != nil {
                map["UserId"] = self.userId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["FromStatus"] as? String {
                self.fromStatus = value
            }
            if let value = dict["Note"] as? String {
                self.note = value
            }
            if let value = dict["ObjectId"] as? String {
                self.objectId = value
            }
            if let value = dict["OperationSource"] as? String {
                self.operationSource = value
            }
            if let value = dict["Time"] as? Int64 {
                self.time = value
            }
            if let value = dict["ToStatus"] as? String {
                self.toStatus = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
            if let value = dict["UserId"] as? String {
                self.userId = value
            }
        }
    }
    public var data: [DescribeApisecUserOperationsResponseBody.Data]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [DescribeApisecUserOperationsResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = DescribeApisecUserOperationsResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeApisecUserOperationsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeApisecUserOperationsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeApisecUserOperationsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeBaseSystemRulesRequest : Tea.TeaModel {
    public var detectType: String?

    public var instanceId: String?

    public var lang: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public var riskLevel: String?

    public var ruleAction: String?

    public var ruleId: Int64?

    public var ruleName: String?

    public var ruleStatus: Int32?

    public var templateId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.detectType != nil {
            map["DetectType"] = self.detectType!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.riskLevel != nil {
            map["RiskLevel"] = self.riskLevel!
        }
        if self.ruleAction != nil {
            map["RuleAction"] = self.ruleAction!
        }
        if self.ruleId != nil {
            map["RuleId"] = self.ruleId!
        }
        if self.ruleName != nil {
            map["RuleName"] = self.ruleName!
        }
        if self.ruleStatus != nil {
            map["RuleStatus"] = self.ruleStatus!
        }
        if self.templateId != nil {
            map["TemplateId"] = self.templateId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DetectType"] as? String {
            self.detectType = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["RiskLevel"] as? String {
            self.riskLevel = value
        }
        if let value = dict["RuleAction"] as? String {
            self.ruleAction = value
        }
        if let value = dict["RuleId"] as? Int64 {
            self.ruleId = value
        }
        if let value = dict["RuleName"] as? String {
            self.ruleName = value
        }
        if let value = dict["RuleStatus"] as? Int32 {
            self.ruleStatus = value
        }
        if let value = dict["TemplateId"] as? Int64 {
            self.templateId = value
        }
    }
}

public class DescribeBaseSystemRulesResponseBody : Tea.TeaModel {
    public class Rules : Tea.TeaModel {
        public var cveId: String?

        public var description_: String?

        public var detectType: String?

        public var riskLevel: String?

        public var ruleAction: String?

        public var ruleId: Int64?

        public var ruleName: String?

        public var ruleStatus: Int32?

        public var updateTime: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.cveId != nil {
                map["CveId"] = self.cveId!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.detectType != nil {
                map["DetectType"] = self.detectType!
            }
            if self.riskLevel != nil {
                map["RiskLevel"] = self.riskLevel!
            }
            if self.ruleAction != nil {
                map["RuleAction"] = self.ruleAction!
            }
            if self.ruleId != nil {
                map["RuleId"] = self.ruleId!
            }
            if self.ruleName != nil {
                map["RuleName"] = self.ruleName!
            }
            if self.ruleStatus != nil {
                map["RuleStatus"] = self.ruleStatus!
            }
            if self.updateTime != nil {
                map["UpdateTime"] = self.updateTime!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CveId"] as? String {
                self.cveId = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["DetectType"] as? String {
                self.detectType = value
            }
            if let value = dict["RiskLevel"] as? String {
                self.riskLevel = value
            }
            if let value = dict["RuleAction"] as? String {
                self.ruleAction = value
            }
            if let value = dict["RuleId"] as? Int64 {
                self.ruleId = value
            }
            if let value = dict["RuleName"] as? String {
                self.ruleName = value
            }
            if let value = dict["RuleStatus"] as? Int32 {
                self.ruleStatus = value
            }
            if let value = dict["UpdateTime"] as? Int64 {
                self.updateTime = value
            }
        }
    }
    public var requestId: String?

    public var rules: [DescribeBaseSystemRulesResponseBody.Rules]?

    public var totalCount: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.rules != nil {
            var tmp : [Any] = []
            for k in self.rules! {
                tmp.append(k.toMap())
            }
            map["Rules"] = tmp
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Rules"] as? [Any?] {
            var tmp : [DescribeBaseSystemRulesResponseBody.Rules] = []
            for v in value {
                if v != nil {
                    var model = DescribeBaseSystemRulesResponseBody.Rules()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.rules = tmp
        }
        if let value = dict["TotalCount"] as? Int64 {
            self.totalCount = value
        }
    }
}

public class DescribeBaseSystemRulesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeBaseSystemRulesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeBaseSystemRulesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeCertDetailRequest : Tea.TeaModel {
    public var certIdentifier: String?

    public var instanceId: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.certIdentifier != nil {
            map["CertIdentifier"] = self.certIdentifier!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CertIdentifier"] as? String {
            self.certIdentifier = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class DescribeCertDetailResponseBody : Tea.TeaModel {
    public class CertDetail : Tea.TeaModel {
        public var afterDate: Int64?

        public var beforeDate: Int64?

        public var certIdentifier: String?

        public var certName: String?

        public var commonName: String?

        public var domain: String?

        public var sans: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.afterDate != nil {
                map["AfterDate"] = self.afterDate!
            }
            if self.beforeDate != nil {
                map["BeforeDate"] = self.beforeDate!
            }
            if self.certIdentifier != nil {
                map["CertIdentifier"] = self.certIdentifier!
            }
            if self.certName != nil {
                map["CertName"] = self.certName!
            }
            if self.commonName != nil {
                map["CommonName"] = self.commonName!
            }
            if self.domain != nil {
                map["Domain"] = self.domain!
            }
            if self.sans != nil {
                map["Sans"] = self.sans!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AfterDate"] as? Int64 {
                self.afterDate = value
            }
            if let value = dict["BeforeDate"] as? Int64 {
                self.beforeDate = value
            }
            if let value = dict["CertIdentifier"] as? String {
                self.certIdentifier = value
            }
            if let value = dict["CertName"] as? String {
                self.certName = value
            }
            if let value = dict["CommonName"] as? String {
                self.commonName = value
            }
            if let value = dict["Domain"] as? String {
                self.domain = value
            }
            if let value = dict["Sans"] as? [String] {
                self.sans = value
            }
        }
    }
    public var certDetail: DescribeCertDetailResponseBody.CertDetail?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.certDetail?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.certDetail != nil {
            map["CertDetail"] = self.certDetail?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CertDetail"] as? [String: Any?] {
            var model = DescribeCertDetailResponseBody.CertDetail()
            model.fromMap(value)
            self.certDetail = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeCertDetailResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeCertDetailResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeCertDetailResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeCertsRequest : Tea.TeaModel {
    public var algorithm: String?

    public var domain: String?

    public var instanceId: String?

    public var pageNumber: Int64?

    public var pageSize: Int64?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.algorithm != nil {
            map["Algorithm"] = self.algorithm!
        }
        if self.domain != nil {
            map["Domain"] = self.domain!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Algorithm"] as? String {
            self.algorithm = value
        }
        if let value = dict["Domain"] as? String {
            self.domain = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["PageNumber"] as? Int64 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class DescribeCertsResponseBody : Tea.TeaModel {
    public class Certs : Tea.TeaModel {
        public var afterDate: Int64?

        public var beforeDate: Int64?

        public var certIdentifier: String?

        public var certName: String?

        public var commonName: String?

        public var domain: String?

        public var isChainCompleted: Bool?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.afterDate != nil {
                map["AfterDate"] = self.afterDate!
            }
            if self.beforeDate != nil {
                map["BeforeDate"] = self.beforeDate!
            }
            if self.certIdentifier != nil {
                map["CertIdentifier"] = self.certIdentifier!
            }
            if self.certName != nil {
                map["CertName"] = self.certName!
            }
            if self.commonName != nil {
                map["CommonName"] = self.commonName!
            }
            if self.domain != nil {
                map["Domain"] = self.domain!
            }
            if self.isChainCompleted != nil {
                map["IsChainCompleted"] = self.isChainCompleted!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AfterDate"] as? Int64 {
                self.afterDate = value
            }
            if let value = dict["BeforeDate"] as? Int64 {
                self.beforeDate = value
            }
            if let value = dict["CertIdentifier"] as? String {
                self.certIdentifier = value
            }
            if let value = dict["CertName"] as? String {
                self.certName = value
            }
            if let value = dict["CommonName"] as? String {
                self.commonName = value
            }
            if let value = dict["Domain"] as? String {
                self.domain = value
            }
            if let value = dict["IsChainCompleted"] as? Bool {
                self.isChainCompleted = value
            }
        }
    }
    public var certs: [DescribeCertsResponseBody.Certs]?

    public var requestId: String?

    public var totalCount: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.certs != nil {
            var tmp : [Any] = []
            for k in self.certs! {
                tmp.append(k.toMap())
            }
            map["Certs"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Certs"] as? [Any?] {
            var tmp : [DescribeCertsResponseBody.Certs] = []
            for v in value {
                if v != nil {
                    var model = DescribeCertsResponseBody.Certs()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.certs = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int64 {
            self.totalCount = value
        }
    }
}

public class DescribeCertsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeCertsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeCertsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeChargeModuleRequest : Tea.TeaModel {
    public var payType: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.payType != nil {
            map["PayType"] = self.payType!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PayType"] as? String {
            self.payType = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class DescribeChargeModuleResponseBody : Tea.TeaModel {
    public class ChargeModules : Tea.TeaModel {
        public var chargeMode: String?

        public var chargeModeDetails: [String]?

        public var moduleCode: String?

        public var periodType: String?

        public var usageType: String?

        public var usageUnitFactor: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.chargeMode != nil {
                map["ChargeMode"] = self.chargeMode!
            }
            if self.chargeModeDetails != nil {
                map["ChargeModeDetails"] = self.chargeModeDetails!
            }
            if self.moduleCode != nil {
                map["ModuleCode"] = self.moduleCode!
            }
            if self.periodType != nil {
                map["PeriodType"] = self.periodType!
            }
            if self.usageType != nil {
                map["UsageType"] = self.usageType!
            }
            if self.usageUnitFactor != nil {
                map["UsageUnitFactor"] = self.usageUnitFactor!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ChargeMode"] as? String {
                self.chargeMode = value
            }
            if let value = dict["ChargeModeDetails"] as? [String] {
                self.chargeModeDetails = value
            }
            if let value = dict["ModuleCode"] as? String {
                self.moduleCode = value
            }
            if let value = dict["PeriodType"] as? String {
                self.periodType = value
            }
            if let value = dict["UsageType"] as? String {
                self.usageType = value
            }
            if let value = dict["UsageUnitFactor"] as? Int32 {
                self.usageUnitFactor = value
            }
        }
    }
    public var chargeModules: [DescribeChargeModuleResponseBody.ChargeModules]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.chargeModules != nil {
            var tmp : [Any] = []
            for k in self.chargeModules! {
                tmp.append(k.toMap())
            }
            map["ChargeModules"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ChargeModules"] as? [Any?] {
            var tmp : [DescribeChargeModuleResponseBody.ChargeModules] = []
            for v in value {
                if v != nil {
                    var model = DescribeChargeModuleResponseBody.ChargeModules()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.chargeModules = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeChargeModuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeChargeModuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeChargeModuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeChargeResultRequest : Tea.TeaModel {
    public class ChargeModules : Tea.TeaModel {
        public var moduleCode: String?

        public var usage: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.moduleCode != nil {
                map["ModuleCode"] = self.moduleCode!
            }
            if self.usage != nil {
                map["Usage"] = self.usage!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ModuleCode"] as? String {
                self.moduleCode = value
            }
            if let value = dict["Usage"] as? Int64 {
                self.usage = value
            }
        }
    }
    public var chargeCycle: String?

    public var chargeModules: [DescribeChargeResultRequest.ChargeModules]?

    public var payType: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.chargeCycle != nil {
            map["ChargeCycle"] = self.chargeCycle!
        }
        if self.chargeModules != nil {
            var tmp : [Any] = []
            for k in self.chargeModules! {
                tmp.append(k.toMap())
            }
            map["ChargeModules"] = tmp
        }
        if self.payType != nil {
            map["PayType"] = self.payType!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ChargeCycle"] as? String {
            self.chargeCycle = value
        }
        if let value = dict["ChargeModules"] as? [Any?] {
            var tmp : [DescribeChargeResultRequest.ChargeModules] = []
            for v in value {
                if v != nil {
                    var model = DescribeChargeResultRequest.ChargeModules()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.chargeModules = tmp
        }
        if let value = dict["PayType"] as? String {
            self.payType = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class DescribeChargeResultResponseBody : Tea.TeaModel {
    public class ModuleDetails : Tea.TeaModel {
        public var moduleCode: String?

        public var seCu: Double?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.moduleCode != nil {
                map["ModuleCode"] = self.moduleCode!
            }
            if self.seCu != nil {
                map["SeCu"] = self.seCu!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ModuleCode"] as? String {
                self.moduleCode = value
            }
            if let value = dict["SeCu"] as? Double {
                self.seCu = value
            }
        }
    }
    public var moduleDetails: [DescribeChargeResultResponseBody.ModuleDetails]?

    public var requestId: String?

    public var totalSeCu: Double?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.moduleDetails != nil {
            var tmp : [Any] = []
            for k in self.moduleDetails! {
                tmp.append(k.toMap())
            }
            map["ModuleDetails"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalSeCu != nil {
            map["TotalSeCu"] = self.totalSeCu!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ModuleDetails"] as? [Any?] {
            var tmp : [DescribeChargeResultResponseBody.ModuleDetails] = []
            for v in value {
                if v != nil {
                    var model = DescribeChargeResultResponseBody.ModuleDetails()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.moduleDetails = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalSeCu"] as? Double {
            self.totalSeCu = value
        }
    }
}

public class DescribeChargeResultResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeChargeResultResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeChargeResultResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeCloudResourceAccessPortDetailsRequest : Tea.TeaModel {
    public var instanceId: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var port: String?

    public var protocol_: String?

    public var regionId: String?

    public var resourceInstanceId: String?

    public var resourceManagerResourceGroupId: String?

    public var resourceProduct: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.port != nil {
            map["Port"] = self.port!
        }
        if self.protocol_ != nil {
            map["Protocol"] = self.protocol_!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceInstanceId != nil {
            map["ResourceInstanceId"] = self.resourceInstanceId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.resourceProduct != nil {
            map["ResourceProduct"] = self.resourceProduct!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["Port"] as? String {
            self.port = value
        }
        if let value = dict["Protocol"] as? String {
            self.protocol_ = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceInstanceId"] as? String {
            self.resourceInstanceId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["ResourceProduct"] as? String {
            self.resourceProduct = value
        }
    }
}

public class DescribeCloudResourceAccessPortDetailsResponseBody : Tea.TeaModel {
    public class AccessPortDetails : Tea.TeaModel {
        public class Certificates : Tea.TeaModel {
            public var appliedType: String?

            public var certificateId: String?

            public var certificateName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.appliedType != nil {
                    map["AppliedType"] = self.appliedType!
                }
                if self.certificateId != nil {
                    map["CertificateId"] = self.certificateId!
                }
                if self.certificateName != nil {
                    map["CertificateName"] = self.certificateName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AppliedType"] as? String {
                    self.appliedType = value
                }
                if let value = dict["CertificateId"] as? String {
                    self.certificateId = value
                }
                if let value = dict["CertificateName"] as? String {
                    self.certificateName = value
                }
            }
        }
        public class LogHeaders : Tea.TeaModel {
            public var key: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.key != nil {
                    map["Key"] = self.key!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Key"] as? String {
                    self.key = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public class SubStatusDetails : Tea.TeaModel {
            public var appliedType: String?

            public var certId: String?

            public var certName: String?

            public var commonName: String?

            public var domain: String?

            public var expireTime: Int64?

            public var productCertId: String?

            public var productCertName: String?

            public var reasonCode: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.appliedType != nil {
                    map["AppliedType"] = self.appliedType!
                }
                if self.certId != nil {
                    map["CertId"] = self.certId!
                }
                if self.certName != nil {
                    map["CertName"] = self.certName!
                }
                if self.commonName != nil {
                    map["CommonName"] = self.commonName!
                }
                if self.domain != nil {
                    map["Domain"] = self.domain!
                }
                if self.expireTime != nil {
                    map["ExpireTime"] = self.expireTime!
                }
                if self.productCertId != nil {
                    map["ProductCertId"] = self.productCertId!
                }
                if self.productCertName != nil {
                    map["ProductCertName"] = self.productCertName!
                }
                if self.reasonCode != nil {
                    map["ReasonCode"] = self.reasonCode!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AppliedType"] as? String {
                    self.appliedType = value
                }
                if let value = dict["CertId"] as? String {
                    self.certId = value
                }
                if let value = dict["CertName"] as? String {
                    self.certName = value
                }
                if let value = dict["CommonName"] as? String {
                    self.commonName = value
                }
                if let value = dict["Domain"] as? String {
                    self.domain = value
                }
                if let value = dict["ExpireTime"] as? Int64 {
                    self.expireTime = value
                }
                if let value = dict["ProductCertId"] as? String {
                    self.productCertId = value
                }
                if let value = dict["ProductCertName"] as? String {
                    self.productCertName = value
                }
                if let value = dict["ReasonCode"] as? String {
                    self.reasonCode = value
                }
            }
        }
        public var certificates: [DescribeCloudResourceAccessPortDetailsResponseBody.AccessPortDetails.Certificates]?

        public var cipherSuite: Int32?

        public var customCiphers: [String]?

        public var enableTLSv3: Bool?

        public var http2Enabled: Bool?

        public var keepalive: Bool?

        public var keepaliveRequests: Int32?

        public var keepaliveTimeout: Int32?

        public var logHeaders: [DescribeCloudResourceAccessPortDetailsResponseBody.AccessPortDetails.LogHeaders]?

        public var ownerUserId: String?

        public var port: Int32?

        public var protocol_: String?

        public var readTimeout: Int32?

        public var status: Int32?

        public var subStatus: String?

        public var subStatusDetails: [DescribeCloudResourceAccessPortDetailsResponseBody.AccessPortDetails.SubStatusDetails]?

        public var TLSVersion: String?

        public var writeTimeout: Int32?

        public var xffHeaderMode: Int32?

        public var xffHeaders: [String]?

        public var xffProto: Bool?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.certificates != nil {
                var tmp : [Any] = []
                for k in self.certificates! {
                    tmp.append(k.toMap())
                }
                map["Certificates"] = tmp
            }
            if self.cipherSuite != nil {
                map["CipherSuite"] = self.cipherSuite!
            }
            if self.customCiphers != nil {
                map["CustomCiphers"] = self.customCiphers!
            }
            if self.enableTLSv3 != nil {
                map["EnableTLSv3"] = self.enableTLSv3!
            }
            if self.http2Enabled != nil {
                map["Http2Enabled"] = self.http2Enabled!
            }
            if self.keepalive != nil {
                map["Keepalive"] = self.keepalive!
            }
            if self.keepaliveRequests != nil {
                map["KeepaliveRequests"] = self.keepaliveRequests!
            }
            if self.keepaliveTimeout != nil {
                map["KeepaliveTimeout"] = self.keepaliveTimeout!
            }
            if self.logHeaders != nil {
                var tmp : [Any] = []
                for k in self.logHeaders! {
                    tmp.append(k.toMap())
                }
                map["LogHeaders"] = tmp
            }
            if self.ownerUserId != nil {
                map["OwnerUserId"] = self.ownerUserId!
            }
            if self.port != nil {
                map["Port"] = self.port!
            }
            if self.protocol_ != nil {
                map["Protocol"] = self.protocol_!
            }
            if self.readTimeout != nil {
                map["ReadTimeout"] = self.readTimeout!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.subStatus != nil {
                map["SubStatus"] = self.subStatus!
            }
            if self.subStatusDetails != nil {
                var tmp : [Any] = []
                for k in self.subStatusDetails! {
                    tmp.append(k.toMap())
                }
                map["SubStatusDetails"] = tmp
            }
            if self.TLSVersion != nil {
                map["TLSVersion"] = self.TLSVersion!
            }
            if self.writeTimeout != nil {
                map["WriteTimeout"] = self.writeTimeout!
            }
            if self.xffHeaderMode != nil {
                map["XffHeaderMode"] = self.xffHeaderMode!
            }
            if self.xffHeaders != nil {
                map["XffHeaders"] = self.xffHeaders!
            }
            if self.xffProto != nil {
                map["XffProto"] = self.xffProto!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Certificates"] as? [Any?] {
                var tmp : [DescribeCloudResourceAccessPortDetailsResponseBody.AccessPortDetails.Certificates] = []
                for v in value {
                    if v != nil {
                        var model = DescribeCloudResourceAccessPortDetailsResponseBody.AccessPortDetails.Certificates()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.certificates = tmp
            }
            if let value = dict["CipherSuite"] as? Int32 {
                self.cipherSuite = value
            }
            if let value = dict["CustomCiphers"] as? [String] {
                self.customCiphers = value
            }
            if let value = dict["EnableTLSv3"] as? Bool {
                self.enableTLSv3 = value
            }
            if let value = dict["Http2Enabled"] as? Bool {
                self.http2Enabled = value
            }
            if let value = dict["Keepalive"] as? Bool {
                self.keepalive = value
            }
            if let value = dict["KeepaliveRequests"] as? Int32 {
                self.keepaliveRequests = value
            }
            if let value = dict["KeepaliveTimeout"] as? Int32 {
                self.keepaliveTimeout = value
            }
            if let value = dict["LogHeaders"] as? [Any?] {
                var tmp : [DescribeCloudResourceAccessPortDetailsResponseBody.AccessPortDetails.LogHeaders] = []
                for v in value {
                    if v != nil {
                        var model = DescribeCloudResourceAccessPortDetailsResponseBody.AccessPortDetails.LogHeaders()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.logHeaders = tmp
            }
            if let value = dict["OwnerUserId"] as? String {
                self.ownerUserId = value
            }
            if let value = dict["Port"] as? Int32 {
                self.port = value
            }
            if let value = dict["Protocol"] as? String {
                self.protocol_ = value
            }
            if let value = dict["ReadTimeout"] as? Int32 {
                self.readTimeout = value
            }
            if let value = dict["Status"] as? Int32 {
                self.status = value
            }
            if let value = dict["SubStatus"] as? String {
                self.subStatus = value
            }
            if let value = dict["SubStatusDetails"] as? [Any?] {
                var tmp : [DescribeCloudResourceAccessPortDetailsResponseBody.AccessPortDetails.SubStatusDetails] = []
                for v in value {
                    if v != nil {
                        var model = DescribeCloudResourceAccessPortDetailsResponseBody.AccessPortDetails.SubStatusDetails()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.subStatusDetails = tmp
            }
            if let value = dict["TLSVersion"] as? String {
                self.TLSVersion = value
            }
            if let value = dict["WriteTimeout"] as? Int32 {
                self.writeTimeout = value
            }
            if let value = dict["XffHeaderMode"] as? Int32 {
                self.xffHeaderMode = value
            }
            if let value = dict["XffHeaders"] as? [String] {
                self.xffHeaders = value
            }
            if let value = dict["XffProto"] as? Bool {
                self.xffProto = value
            }
        }
    }
    public var accessPortDetails: [DescribeCloudResourceAccessPortDetailsResponseBody.AccessPortDetails]?

    public var requestId: String?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.accessPortDetails != nil {
            var tmp : [Any] = []
            for k in self.accessPortDetails! {
                tmp.append(k.toMap())
            }
            map["AccessPortDetails"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AccessPortDetails"] as? [Any?] {
            var tmp : [DescribeCloudResourceAccessPortDetailsResponseBody.AccessPortDetails] = []
            for v in value {
                if v != nil {
                    var model = DescribeCloudResourceAccessPortDetailsResponseBody.AccessPortDetails()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.accessPortDetails = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class DescribeCloudResourceAccessPortDetailsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeCloudResourceAccessPortDetailsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeCloudResourceAccessPortDetailsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeCloudResourceAccessedPortsRequest : Tea.TeaModel {
    public var instanceId: String?

    public var regionId: String?

    public var resourceInstanceId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceInstanceId != nil {
            map["ResourceInstanceId"] = self.resourceInstanceId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceInstanceId"] as? String {
            self.resourceInstanceId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class DescribeCloudResourceAccessedPortsResponseBody : Tea.TeaModel {
    public var http: [Int32]?

    public var https: [Int32]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.http != nil {
            map["Http"] = self.http!
        }
        if self.https != nil {
            map["Https"] = self.https!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Http"] as? [Int32] {
            self.http = value
        }
        if let value = dict["Https"] as? [Int32] {
            self.https = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeCloudResourceAccessedPortsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeCloudResourceAccessedPortsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeCloudResourceAccessedPortsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeCloudResourcesRequest : Tea.TeaModel {
    public var instanceId: String?

    public var ownerUserId: String?

    public var pageNumber: Int64?

    public var pageSize: Int64?

    public var regionId: String?

    public var resourceDomain: String?

    public var resourceFunction: String?

    public var resourceInstanceId: String?

    public var resourceInstanceName: String?

    public var resourceManagerResourceGroupId: String?

    public var resourceName: String?

    public var resourceProduct: String?

    public var resourceRegionId: String?

    public var resourceRouteName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.ownerUserId != nil {
            map["OwnerUserId"] = self.ownerUserId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceDomain != nil {
            map["ResourceDomain"] = self.resourceDomain!
        }
        if self.resourceFunction != nil {
            map["ResourceFunction"] = self.resourceFunction!
        }
        if self.resourceInstanceId != nil {
            map["ResourceInstanceId"] = self.resourceInstanceId!
        }
        if self.resourceInstanceName != nil {
            map["ResourceInstanceName"] = self.resourceInstanceName!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.resourceName != nil {
            map["ResourceName"] = self.resourceName!
        }
        if self.resourceProduct != nil {
            map["ResourceProduct"] = self.resourceProduct!
        }
        if self.resourceRegionId != nil {
            map["ResourceRegionId"] = self.resourceRegionId!
        }
        if self.resourceRouteName != nil {
            map["ResourceRouteName"] = self.resourceRouteName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["OwnerUserId"] as? String {
            self.ownerUserId = value
        }
        if let value = dict["PageNumber"] as? Int64 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceDomain"] as? String {
            self.resourceDomain = value
        }
        if let value = dict["ResourceFunction"] as? String {
            self.resourceFunction = value
        }
        if let value = dict["ResourceInstanceId"] as? String {
            self.resourceInstanceId = value
        }
        if let value = dict["ResourceInstanceName"] as? String {
            self.resourceInstanceName = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["ResourceName"] as? String {
            self.resourceName = value
        }
        if let value = dict["ResourceProduct"] as? String {
            self.resourceProduct = value
        }
        if let value = dict["ResourceRegionId"] as? String {
            self.resourceRegionId = value
        }
        if let value = dict["ResourceRouteName"] as? String {
            self.resourceRouteName = value
        }
    }
}

public class DescribeCloudResourcesResponseBody : Tea.TeaModel {
    public class CloudResources : Tea.TeaModel {
        public var httpPortCount: Int32?

        public var httpsPortCount: Int32?

        public var ownerUserId: String?

        public var resourceDomain: String?

        public var resourceFunction: String?

        public var resourceInstance: String?

        public var resourceInstanceId: String?

        public var resourceInstanceIp: String?

        public var resourceInstanceName: String?

        public var resourceName: String?

        public var resourceProduct: String?

        public var resourceRegionId: String?

        public var resourceRouteName: String?

        public var resourceService: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.httpPortCount != nil {
                map["HttpPortCount"] = self.httpPortCount!
            }
            if self.httpsPortCount != nil {
                map["HttpsPortCount"] = self.httpsPortCount!
            }
            if self.ownerUserId != nil {
                map["OwnerUserId"] = self.ownerUserId!
            }
            if self.resourceDomain != nil {
                map["ResourceDomain"] = self.resourceDomain!
            }
            if self.resourceFunction != nil {
                map["ResourceFunction"] = self.resourceFunction!
            }
            if self.resourceInstance != nil {
                map["ResourceInstance"] = self.resourceInstance!
            }
            if self.resourceInstanceId != nil {
                map["ResourceInstanceId"] = self.resourceInstanceId!
            }
            if self.resourceInstanceIp != nil {
                map["ResourceInstanceIp"] = self.resourceInstanceIp!
            }
            if self.resourceInstanceName != nil {
                map["ResourceInstanceName"] = self.resourceInstanceName!
            }
            if self.resourceName != nil {
                map["ResourceName"] = self.resourceName!
            }
            if self.resourceProduct != nil {
                map["ResourceProduct"] = self.resourceProduct!
            }
            if self.resourceRegionId != nil {
                map["ResourceRegionId"] = self.resourceRegionId!
            }
            if self.resourceRouteName != nil {
                map["ResourceRouteName"] = self.resourceRouteName!
            }
            if self.resourceService != nil {
                map["ResourceService"] = self.resourceService!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["HttpPortCount"] as? Int32 {
                self.httpPortCount = value
            }
            if let value = dict["HttpsPortCount"] as? Int32 {
                self.httpsPortCount = value
            }
            if let value = dict["OwnerUserId"] as? String {
                self.ownerUserId = value
            }
            if let value = dict["ResourceDomain"] as? String {
                self.resourceDomain = value
            }
            if let value = dict["ResourceFunction"] as? String {
                self.resourceFunction = value
            }
            if let value = dict["ResourceInstance"] as? String {
                self.resourceInstance = value
            }
            if let value = dict["ResourceInstanceId"] as? String {
                self.resourceInstanceId = value
            }
            if let value = dict["ResourceInstanceIp"] as? String {
                self.resourceInstanceIp = value
            }
            if let value = dict["ResourceInstanceName"] as? String {
                self.resourceInstanceName = value
            }
            if let value = dict["ResourceName"] as? String {
                self.resourceName = value
            }
            if let value = dict["ResourceProduct"] as? String {
                self.resourceProduct = value
            }
            if let value = dict["ResourceRegionId"] as? String {
                self.resourceRegionId = value
            }
            if let value = dict["ResourceRouteName"] as? String {
                self.resourceRouteName = value
            }
            if let value = dict["ResourceService"] as? String {
                self.resourceService = value
            }
        }
    }
    public var cloudResources: [DescribeCloudResourcesResponseBody.CloudResources]?

    public var requestId: String?

    public var totalCount: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cloudResources != nil {
            var tmp : [Any] = []
            for k in self.cloudResources! {
                tmp.append(k.toMap())
            }
            map["CloudResources"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CloudResources"] as? [Any?] {
            var tmp : [DescribeCloudResourcesResponseBody.CloudResources] = []
            for v in value {
                if v != nil {
                    var model = DescribeCloudResourcesResponseBody.CloudResources()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.cloudResources = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int64 {
            self.totalCount = value
        }
    }
}

public class DescribeCloudResourcesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeCloudResourcesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeCloudResourcesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeCnameCountRequest : Tea.TeaModel {
    public var instanceId: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class DescribeCnameCountResponseBody : Tea.TeaModel {
    public class CnameCount : Tea.TeaModel {
        public var cname: Int64?

        public var hybridCloudCname: Int64?

        public var total: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.cname != nil {
                map["Cname"] = self.cname!
            }
            if self.hybridCloudCname != nil {
                map["HybridCloudCname"] = self.hybridCloudCname!
            }
            if self.total != nil {
                map["Total"] = self.total!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Cname"] as? Int64 {
                self.cname = value
            }
            if let value = dict["HybridCloudCname"] as? Int64 {
                self.hybridCloudCname = value
            }
            if let value = dict["Total"] as? Int64 {
                self.total = value
            }
        }
    }
    public var cnameCount: DescribeCnameCountResponseBody.CnameCount?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.cnameCount?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cnameCount != nil {
            map["CnameCount"] = self.cnameCount?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CnameCount"] as? [String: Any?] {
            var model = DescribeCnameCountResponseBody.CnameCount()
            model.fromMap(value)
            self.cnameCount = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeCnameCountResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeCnameCountResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeCnameCountResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeCommonLogFieldsRequest : Tea.TeaModel {
    public var instanceId: String?

    public var isDefault: Bool?

    public var isRequired: Bool?

    public var logKeyList: [String]?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.isDefault != nil {
            map["IsDefault"] = self.isDefault!
        }
        if self.isRequired != nil {
            map["IsRequired"] = self.isRequired!
        }
        if self.logKeyList != nil {
            map["LogKeyList"] = self.logKeyList!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["IsDefault"] as? Bool {
            self.isDefault = value
        }
        if let value = dict["IsRequired"] as? Bool {
            self.isRequired = value
        }
        if let value = dict["LogKeyList"] as? [String] {
            self.logKeyList = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class DescribeCommonLogFieldsShrinkRequest : Tea.TeaModel {
    public var instanceId: String?

    public var isDefault: Bool?

    public var isRequired: Bool?

    public var logKeyListShrink: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.isDefault != nil {
            map["IsDefault"] = self.isDefault!
        }
        if self.isRequired != nil {
            map["IsRequired"] = self.isRequired!
        }
        if self.logKeyListShrink != nil {
            map["LogKeyList"] = self.logKeyListShrink!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["IsDefault"] as? Bool {
            self.isDefault = value
        }
        if let value = dict["IsRequired"] as? Bool {
            self.isRequired = value
        }
        if let value = dict["LogKeyList"] as? String {
            self.logKeyListShrink = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class DescribeCommonLogFieldsResponseBody : Tea.TeaModel {
    public class LogFieldList : Tea.TeaModel {
        public var isDefault: Bool?

        public var isRequired: Bool?

        public var logKey: String?

        public var status: Bool?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.isDefault != nil {
                map["IsDefault"] = self.isDefault!
            }
            if self.isRequired != nil {
                map["IsRequired"] = self.isRequired!
            }
            if self.logKey != nil {
                map["LogKey"] = self.logKey!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["IsDefault"] as? Bool {
                self.isDefault = value
            }
            if let value = dict["IsRequired"] as? Bool {
                self.isRequired = value
            }
            if let value = dict["LogKey"] as? String {
                self.logKey = value
            }
            if let value = dict["Status"] as? Bool {
                self.status = value
            }
        }
    }
    public var logFieldList: [DescribeCommonLogFieldsResponseBody.LogFieldList]?

    public var requestId: String?

    public var totalCount: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.logFieldList != nil {
            var tmp : [Any] = []
            for k in self.logFieldList! {
                tmp.append(k.toMap())
            }
            map["LogFieldList"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["LogFieldList"] as? [Any?] {
            var tmp : [DescribeCommonLogFieldsResponseBody.LogFieldList] = []
            for v in value {
                if v != nil {
                    var model = DescribeCommonLogFieldsResponseBody.LogFieldList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.logFieldList = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int64 {
            self.totalCount = value
        }
    }
}

public class DescribeCommonLogFieldsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeCommonLogFieldsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeCommonLogFieldsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeCustomBaseRuleCompileResultRequest : Tea.TeaModel {
    public var instanceId: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class DescribeCustomBaseRuleCompileResultResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var result: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.result != nil {
            map["Result"] = self.result!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Result"] as? String {
            self.result = value
        }
    }
}

public class DescribeCustomBaseRuleCompileResultResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeCustomBaseRuleCompileResultResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeCustomBaseRuleCompileResultResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeDDoSStatusRequest : Tea.TeaModel {
    public var instanceId: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class DescribeDDoSStatusResponseBody : Tea.TeaModel {
    public class DDoSStatus : Tea.TeaModel {
        public var eventType: String?

        public var status: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.eventType != nil {
                map["EventType"] = self.eventType!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["EventType"] as? String {
                self.eventType = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
        }
    }
    public var DDoSStatus: [DescribeDDoSStatusResponseBody.DDoSStatus]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.DDoSStatus != nil {
            var tmp : [Any] = []
            for k in self.DDoSStatus! {
                tmp.append(k.toMap())
            }
            map["DDoSStatus"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DDoSStatus"] as? [Any?] {
            var tmp : [DescribeDDoSStatusResponseBody.DDoSStatus] = []
            for v in value {
                if v != nil {
                    var model = DescribeDDoSStatusResponseBody.DDoSStatus()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.DDoSStatus = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeDDoSStatusResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeDDoSStatusResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeDDoSStatusResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeDefaultHttpsRequest : Tea.TeaModel {
    public var instanceId: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class DescribeDefaultHttpsResponseBody : Tea.TeaModel {
    public class DefaultHttps : Tea.TeaModel {
        public var certId: String?

        public var cipherSuite: String?

        public var customCiphers: String?

        public var enableTLSv3: Bool?

        public var TLSVersion: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.certId != nil {
                map["CertId"] = self.certId!
            }
            if self.cipherSuite != nil {
                map["CipherSuite"] = self.cipherSuite!
            }
            if self.customCiphers != nil {
                map["CustomCiphers"] = self.customCiphers!
            }
            if self.enableTLSv3 != nil {
                map["EnableTLSv3"] = self.enableTLSv3!
            }
            if self.TLSVersion != nil {
                map["TLSVersion"] = self.TLSVersion!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CertId"] as? String {
                self.certId = value
            }
            if let value = dict["CipherSuite"] as? String {
                self.cipherSuite = value
            }
            if let value = dict["CustomCiphers"] as? String {
                self.customCiphers = value
            }
            if let value = dict["EnableTLSv3"] as? Bool {
                self.enableTLSv3 = value
            }
            if let value = dict["TLSVersion"] as? String {
                self.TLSVersion = value
            }
        }
    }
    public var defaultHttps: DescribeDefaultHttpsResponseBody.DefaultHttps?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.defaultHttps?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.defaultHttps != nil {
            map["DefaultHttps"] = self.defaultHttps?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DefaultHttps"] as? [String: Any?] {
            var model = DescribeDefaultHttpsResponseBody.DefaultHttps()
            model.fromMap(value)
            self.defaultHttps = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeDefaultHttpsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeDefaultHttpsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeDefaultHttpsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeDefenseGroupValidResourcesRequest : Tea.TeaModel {
    public var groupName: String?

    public var instanceId: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var regionId: String?

    public var resource: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.groupName != nil {
            map["GroupName"] = self.groupName!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resource != nil {
            map["Resource"] = self.resource!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["GroupName"] as? String {
            self.groupName = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Resource"] as? String {
            self.resource = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class DescribeDefenseGroupValidResourcesResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resources: [String]?

    public var totalCount: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resources != nil {
            map["Resources"] = self.resources!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Resources"] as? [String] {
            self.resources = value
        }
        if let value = dict["TotalCount"] as? Int64 {
            self.totalCount = value
        }
    }
}

public class DescribeDefenseGroupValidResourcesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeDefenseGroupValidResourcesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeDefenseGroupValidResourcesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeDefenseResourceRequest : Tea.TeaModel {
    public var instanceId: String?

    public var regionId: String?

    public var resource: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resource != nil {
            map["Resource"] = self.resource!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Resource"] as? String {
            self.resource = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class DescribeDefenseResourceResponseBody : Tea.TeaModel {
    public class Resource : Tea.TeaModel {
        public class ResponseHeaders : Tea.TeaModel {
            public var key: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.key != nil {
                    map["Key"] = self.key!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Key"] as? String {
                    self.key = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public var acwCookieStatus: Int32?

        public var acwSecureStatus: Int32?

        public var acwV3SecureStatus: Int32?

        public var customHeaders: [String]?

        public var description_: String?

        public var detail: [String: Any]?

        public var gmtCreate: Int64?

        public var gmtModified: Int64?

        public var ownerUserId: String?

        public var pattern: String?

        public var product: String?

        public var resource: String?

        public var resourceGroup: String?

        public var resourceManagerResourceGroupId: String?

        public var resourceOrigin: String?

        public var responseHeaders: [DescribeDefenseResourceResponseBody.Resource.ResponseHeaders]?

        public var xffStatus: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.acwCookieStatus != nil {
                map["AcwCookieStatus"] = self.acwCookieStatus!
            }
            if self.acwSecureStatus != nil {
                map["AcwSecureStatus"] = self.acwSecureStatus!
            }
            if self.acwV3SecureStatus != nil {
                map["AcwV3SecureStatus"] = self.acwV3SecureStatus!
            }
            if self.customHeaders != nil {
                map["CustomHeaders"] = self.customHeaders!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.detail != nil {
                map["Detail"] = self.detail!
            }
            if self.gmtCreate != nil {
                map["GmtCreate"] = self.gmtCreate!
            }
            if self.gmtModified != nil {
                map["GmtModified"] = self.gmtModified!
            }
            if self.ownerUserId != nil {
                map["OwnerUserId"] = self.ownerUserId!
            }
            if self.pattern != nil {
                map["Pattern"] = self.pattern!
            }
            if self.product != nil {
                map["Product"] = self.product!
            }
            if self.resource != nil {
                map["Resource"] = self.resource!
            }
            if self.resourceGroup != nil {
                map["ResourceGroup"] = self.resourceGroup!
            }
            if self.resourceManagerResourceGroupId != nil {
                map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
            }
            if self.resourceOrigin != nil {
                map["ResourceOrigin"] = self.resourceOrigin!
            }
            if self.responseHeaders != nil {
                var tmp : [Any] = []
                for k in self.responseHeaders! {
                    tmp.append(k.toMap())
                }
                map["ResponseHeaders"] = tmp
            }
            if self.xffStatus != nil {
                map["XffStatus"] = self.xffStatus!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AcwCookieStatus"] as? Int32 {
                self.acwCookieStatus = value
            }
            if let value = dict["AcwSecureStatus"] as? Int32 {
                self.acwSecureStatus = value
            }
            if let value = dict["AcwV3SecureStatus"] as? Int32 {
                self.acwV3SecureStatus = value
            }
            if let value = dict["CustomHeaders"] as? [String] {
                self.customHeaders = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["Detail"] as? [String: Any] {
                self.detail = value
            }
            if let value = dict["GmtCreate"] as? Int64 {
                self.gmtCreate = value
            }
            if let value = dict["GmtModified"] as? Int64 {
                self.gmtModified = value
            }
            if let value = dict["OwnerUserId"] as? String {
                self.ownerUserId = value
            }
            if let value = dict["Pattern"] as? String {
                self.pattern = value
            }
            if let value = dict["Product"] as? String {
                self.product = value
            }
            if let value = dict["Resource"] as? String {
                self.resource = value
            }
            if let value = dict["ResourceGroup"] as? String {
                self.resourceGroup = value
            }
            if let value = dict["ResourceManagerResourceGroupId"] as? String {
                self.resourceManagerResourceGroupId = value
            }
            if let value = dict["ResourceOrigin"] as? String {
                self.resourceOrigin = value
            }
            if let value = dict["ResponseHeaders"] as? [Any?] {
                var tmp : [DescribeDefenseResourceResponseBody.Resource.ResponseHeaders] = []
                for v in value {
                    if v != nil {
                        var model = DescribeDefenseResourceResponseBody.Resource.ResponseHeaders()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.responseHeaders = tmp
            }
            if let value = dict["XffStatus"] as? Int32 {
                self.xffStatus = value
            }
        }
    }
    public var requestId: String?

    public var resource: DescribeDefenseResourceResponseBody.Resource?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.resource?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resource != nil {
            map["Resource"] = self.resource?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Resource"] as? [String: Any?] {
            var model = DescribeDefenseResourceResponseBody.Resource()
            model.fromMap(value)
            self.resource = model
        }
    }
}

public class DescribeDefenseResourceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeDefenseResourceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeDefenseResourceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeDefenseResourceGroupRequest : Tea.TeaModel {
    public var groupName: String?

    public var instanceId: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.groupName != nil {
            map["GroupName"] = self.groupName!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["GroupName"] as? String {
            self.groupName = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class DescribeDefenseResourceGroupResponseBody : Tea.TeaModel {
    public class Group : Tea.TeaModel {
        public var description_: String?

        public var gmtCreate: Int64?

        public var gmtModified: Int64?

        public var groupName: String?

        public var resourceList: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.gmtCreate != nil {
                map["GmtCreate"] = self.gmtCreate!
            }
            if self.gmtModified != nil {
                map["GmtModified"] = self.gmtModified!
            }
            if self.groupName != nil {
                map["GroupName"] = self.groupName!
            }
            if self.resourceList != nil {
                map["ResourceList"] = self.resourceList!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["GmtCreate"] as? Int64 {
                self.gmtCreate = value
            }
            if let value = dict["GmtModified"] as? Int64 {
                self.gmtModified = value
            }
            if let value = dict["GroupName"] as? String {
                self.groupName = value
            }
            if let value = dict["ResourceList"] as? String {
                self.resourceList = value
            }
        }
    }
    public var group: DescribeDefenseResourceGroupResponseBody.Group?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.group?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.group != nil {
            map["Group"] = self.group?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Group"] as? [String: Any?] {
            var model = DescribeDefenseResourceGroupResponseBody.Group()
            model.fromMap(value)
            self.group = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeDefenseResourceGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeDefenseResourceGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeDefenseResourceGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeDefenseResourceGroupNamesRequest : Tea.TeaModel {
    public var groupNameLike: String?

    public var instanceId: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.groupNameLike != nil {
            map["GroupNameLike"] = self.groupNameLike!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["GroupNameLike"] as? String {
            self.groupNameLike = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class DescribeDefenseResourceGroupNamesResponseBody : Tea.TeaModel {
    public var groupNames: [String]?

    public var requestId: String?

    public var totalCount: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.groupNames != nil {
            map["GroupNames"] = self.groupNames!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["GroupNames"] as? [String] {
            self.groupNames = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int64 {
            self.totalCount = value
        }
    }
}

public class DescribeDefenseResourceGroupNamesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeDefenseResourceGroupNamesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeDefenseResourceGroupNamesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeDefenseResourceGroupsRequest : Tea.TeaModel {
    public var groupNameLike: String?

    public var groupNames: String?

    public var instanceId: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.groupNameLike != nil {
            map["GroupNameLike"] = self.groupNameLike!
        }
        if self.groupNames != nil {
            map["GroupNames"] = self.groupNames!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["GroupNameLike"] as? String {
            self.groupNameLike = value
        }
        if let value = dict["GroupNames"] as? String {
            self.groupNames = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class DescribeDefenseResourceGroupsResponseBody : Tea.TeaModel {
    public class Groups : Tea.TeaModel {
        public var description_: String?

        public var gmtCreate: Int64?

        public var gmtModified: Int64?

        public var groupName: String?

        public var resourceList: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.gmtCreate != nil {
                map["GmtCreate"] = self.gmtCreate!
            }
            if self.gmtModified != nil {
                map["GmtModified"] = self.gmtModified!
            }
            if self.groupName != nil {
                map["GroupName"] = self.groupName!
            }
            if self.resourceList != nil {
                map["ResourceList"] = self.resourceList!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["GmtCreate"] as? Int64 {
                self.gmtCreate = value
            }
            if let value = dict["GmtModified"] as? Int64 {
                self.gmtModified = value
            }
            if let value = dict["GroupName"] as? String {
                self.groupName = value
            }
            if let value = dict["ResourceList"] as? String {
                self.resourceList = value
            }
        }
    }
    public var groups: [DescribeDefenseResourceGroupsResponseBody.Groups]?

    public var requestId: String?

    public var totalCount: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.groups != nil {
            var tmp : [Any] = []
            for k in self.groups! {
                tmp.append(k.toMap())
            }
            map["Groups"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Groups"] as? [Any?] {
            var tmp : [DescribeDefenseResourceGroupsResponseBody.Groups] = []
            for v in value {
                if v != nil {
                    var model = DescribeDefenseResourceGroupsResponseBody.Groups()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.groups = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int64 {
            self.totalCount = value
        }
    }
}

public class DescribeDefenseResourceGroupsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeDefenseResourceGroupsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeDefenseResourceGroupsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeDefenseResourceNamesRequest : Tea.TeaModel {
    public var instanceId: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var regionId: String?

    public var resource: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resource != nil {
            map["Resource"] = self.resource!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Resource"] as? String {
            self.resource = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class DescribeDefenseResourceNamesResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resources: [String]?

    public var totalCount: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resources != nil {
            map["Resources"] = self.resources!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Resources"] as? [String] {
            self.resources = value
        }
        if let value = dict["TotalCount"] as? Int64 {
            self.totalCount = value
        }
    }
}

public class DescribeDefenseResourceNamesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeDefenseResourceNamesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeDefenseResourceNamesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeDefenseResourceOwnerUidRequest : Tea.TeaModel {
    public var instanceId: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public var resourceNames: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.resourceNames != nil {
            map["ResourceNames"] = self.resourceNames!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["ResourceNames"] as? String {
            self.resourceNames = value
        }
    }
}

public class DescribeDefenseResourceOwnerUidResponseBody : Tea.TeaModel {
    public class OwnerInfos : Tea.TeaModel {
        public var ownerUserId: String?

        public var resourceName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.ownerUserId != nil {
                map["OwnerUserId"] = self.ownerUserId!
            }
            if self.resourceName != nil {
                map["ResourceName"] = self.resourceName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["OwnerUserId"] as? String {
                self.ownerUserId = value
            }
            if let value = dict["ResourceName"] as? String {
                self.resourceName = value
            }
        }
    }
    public var ownerInfos: [DescribeDefenseResourceOwnerUidResponseBody.OwnerInfos]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ownerInfos != nil {
            var tmp : [Any] = []
            for k in self.ownerInfos! {
                tmp.append(k.toMap())
            }
            map["OwnerInfos"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OwnerInfos"] as? [Any?] {
            var tmp : [DescribeDefenseResourceOwnerUidResponseBody.OwnerInfos] = []
            for v in value {
                if v != nil {
                    var model = DescribeDefenseResourceOwnerUidResponseBody.OwnerInfos()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.ownerInfos = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeDefenseResourceOwnerUidResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeDefenseResourceOwnerUidResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeDefenseResourceOwnerUidResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeDefenseResourceTemplatesRequest : Tea.TeaModel {
    public var instanceId: String?

    public var regionId: String?

    public var resource: String?

    public var resourceManagerResourceGroupId: String?

    public var resourceType: String?

    public var ruleId: Int64?

    public var ruleName: String?

    public var ruleType: String?

    public var templateName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resource != nil {
            map["Resource"] = self.resource!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.resourceType != nil {
            map["ResourceType"] = self.resourceType!
        }
        if self.ruleId != nil {
            map["RuleId"] = self.ruleId!
        }
        if self.ruleName != nil {
            map["RuleName"] = self.ruleName!
        }
        if self.ruleType != nil {
            map["RuleType"] = self.ruleType!
        }
        if self.templateName != nil {
            map["TemplateName"] = self.templateName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Resource"] as? String {
            self.resource = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["ResourceType"] as? String {
            self.resourceType = value
        }
        if let value = dict["RuleId"] as? Int64 {
            self.ruleId = value
        }
        if let value = dict["RuleName"] as? String {
            self.ruleName = value
        }
        if let value = dict["RuleType"] as? String {
            self.ruleType = value
        }
        if let value = dict["TemplateName"] as? String {
            self.templateName = value
        }
    }
}

public class DescribeDefenseResourceTemplatesResponseBody : Tea.TeaModel {
    public class Templates : Tea.TeaModel {
        public var defenseScene: String?

        public var defenseSubScene: String?

        public var description_: String?

        public var gmtModified: Int64?

        public var templateId: Int64?

        public var templateName: String?

        public var templateOrigin: String?

        public var templateStatus: Int32?

        public var templateType: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.defenseScene != nil {
                map["DefenseScene"] = self.defenseScene!
            }
            if self.defenseSubScene != nil {
                map["DefenseSubScene"] = self.defenseSubScene!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.gmtModified != nil {
                map["GmtModified"] = self.gmtModified!
            }
            if self.templateId != nil {
                map["TemplateId"] = self.templateId!
            }
            if self.templateName != nil {
                map["TemplateName"] = self.templateName!
            }
            if self.templateOrigin != nil {
                map["TemplateOrigin"] = self.templateOrigin!
            }
            if self.templateStatus != nil {
                map["TemplateStatus"] = self.templateStatus!
            }
            if self.templateType != nil {
                map["TemplateType"] = self.templateType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DefenseScene"] as? String {
                self.defenseScene = value
            }
            if let value = dict["DefenseSubScene"] as? String {
                self.defenseSubScene = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["GmtModified"] as? Int64 {
                self.gmtModified = value
            }
            if let value = dict["TemplateId"] as? Int64 {
                self.templateId = value
            }
            if let value = dict["TemplateName"] as? String {
                self.templateName = value
            }
            if let value = dict["TemplateOrigin"] as? String {
                self.templateOrigin = value
            }
            if let value = dict["TemplateStatus"] as? Int32 {
                self.templateStatus = value
            }
            if let value = dict["TemplateType"] as? String {
                self.templateType = value
            }
        }
    }
    public var requestId: String?

    public var templates: [DescribeDefenseResourceTemplatesResponseBody.Templates]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.templates != nil {
            var tmp : [Any] = []
            for k in self.templates! {
                tmp.append(k.toMap())
            }
            map["Templates"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Templates"] as? [Any?] {
            var tmp : [DescribeDefenseResourceTemplatesResponseBody.Templates] = []
            for v in value {
                if v != nil {
                    var model = DescribeDefenseResourceTemplatesResponseBody.Templates()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.templates = tmp
        }
    }
}

public class DescribeDefenseResourceTemplatesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeDefenseResourceTemplatesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeDefenseResourceTemplatesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeDefenseResourcesRequest : Tea.TeaModel {
    public class Tag : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var instanceId: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var query: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public var tag: [DescribeDefenseResourcesRequest.Tag]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.query != nil {
            map["Query"] = self.query!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.tag != nil {
            var tmp : [Any] = []
            for k in self.tag! {
                tmp.append(k.toMap())
            }
            map["Tag"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["Query"] as? String {
            self.query = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["Tag"] as? [Any?] {
            var tmp : [DescribeDefenseResourcesRequest.Tag] = []
            for v in value {
                if v != nil {
                    var model = DescribeDefenseResourcesRequest.Tag()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tag = tmp
        }
    }
}

public class DescribeDefenseResourcesResponseBody : Tea.TeaModel {
    public class Resources : Tea.TeaModel {
        public class ResponseHeaders : Tea.TeaModel {
            public var key: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.key != nil {
                    map["Key"] = self.key!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Key"] as? String {
                    self.key = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public var acwCookieStatus: Int32?

        public var acwSecureStatus: Int32?

        public var acwV3SecureStatus: Int32?

        public var customHeaders: [String]?

        public var description_: String?

        public var detail: [String: Any]?

        public var gmtCreate: Int64?

        public var gmtModified: Int64?

        public var ownerUserId: String?

        public var pattern: String?

        public var product: String?

        public var resource: String?

        public var resourceGroup: String?

        public var resourceManagerResourceGroupId: String?

        public var resourceOrigin: String?

        public var responseHeaders: [DescribeDefenseResourcesResponseBody.Resources.ResponseHeaders]?

        public var xffStatus: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.acwCookieStatus != nil {
                map["AcwCookieStatus"] = self.acwCookieStatus!
            }
            if self.acwSecureStatus != nil {
                map["AcwSecureStatus"] = self.acwSecureStatus!
            }
            if self.acwV3SecureStatus != nil {
                map["AcwV3SecureStatus"] = self.acwV3SecureStatus!
            }
            if self.customHeaders != nil {
                map["CustomHeaders"] = self.customHeaders!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.detail != nil {
                map["Detail"] = self.detail!
            }
            if self.gmtCreate != nil {
                map["GmtCreate"] = self.gmtCreate!
            }
            if self.gmtModified != nil {
                map["GmtModified"] = self.gmtModified!
            }
            if self.ownerUserId != nil {
                map["OwnerUserId"] = self.ownerUserId!
            }
            if self.pattern != nil {
                map["Pattern"] = self.pattern!
            }
            if self.product != nil {
                map["Product"] = self.product!
            }
            if self.resource != nil {
                map["Resource"] = self.resource!
            }
            if self.resourceGroup != nil {
                map["ResourceGroup"] = self.resourceGroup!
            }
            if self.resourceManagerResourceGroupId != nil {
                map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
            }
            if self.resourceOrigin != nil {
                map["ResourceOrigin"] = self.resourceOrigin!
            }
            if self.responseHeaders != nil {
                var tmp : [Any] = []
                for k in self.responseHeaders! {
                    tmp.append(k.toMap())
                }
                map["ResponseHeaders"] = tmp
            }
            if self.xffStatus != nil {
                map["XffStatus"] = self.xffStatus!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AcwCookieStatus"] as? Int32 {
                self.acwCookieStatus = value
            }
            if let value = dict["AcwSecureStatus"] as? Int32 {
                self.acwSecureStatus = value
            }
            if let value = dict["AcwV3SecureStatus"] as? Int32 {
                self.acwV3SecureStatus = value
            }
            if let value = dict["CustomHeaders"] as? [String] {
                self.customHeaders = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["Detail"] as? [String: Any] {
                self.detail = value
            }
            if let value = dict["GmtCreate"] as? Int64 {
                self.gmtCreate = value
            }
            if let value = dict["GmtModified"] as? Int64 {
                self.gmtModified = value
            }
            if let value = dict["OwnerUserId"] as? String {
                self.ownerUserId = value
            }
            if let value = dict["Pattern"] as? String {
                self.pattern = value
            }
            if let value = dict["Product"] as? String {
                self.product = value
            }
            if let value = dict["Resource"] as? String {
                self.resource = value
            }
            if let value = dict["ResourceGroup"] as? String {
                self.resourceGroup = value
            }
            if let value = dict["ResourceManagerResourceGroupId"] as? String {
                self.resourceManagerResourceGroupId = value
            }
            if let value = dict["ResourceOrigin"] as? String {
                self.resourceOrigin = value
            }
            if let value = dict["ResponseHeaders"] as? [Any?] {
                var tmp : [DescribeDefenseResourcesResponseBody.Resources.ResponseHeaders] = []
                for v in value {
                    if v != nil {
                        var model = DescribeDefenseResourcesResponseBody.Resources.ResponseHeaders()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.responseHeaders = tmp
            }
            if let value = dict["XffStatus"] as? Int32 {
                self.xffStatus = value
            }
        }
    }
    public var requestId: String?

    public var resources: [DescribeDefenseResourcesResponseBody.Resources]?

    public var totalCount: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resources != nil {
            var tmp : [Any] = []
            for k in self.resources! {
                tmp.append(k.toMap())
            }
            map["Resources"] = tmp
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Resources"] as? [Any?] {
            var tmp : [DescribeDefenseResourcesResponseBody.Resources] = []
            for v in value {
                if v != nil {
                    var model = DescribeDefenseResourcesResponseBody.Resources()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.resources = tmp
        }
        if let value = dict["TotalCount"] as? Int64 {
            self.totalCount = value
        }
    }
}

public class DescribeDefenseResourcesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeDefenseResourcesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeDefenseResourcesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeDefenseRuleRequest : Tea.TeaModel {
    public var defenseType: String?

    public var instanceId: String?

    public var regionId: String?

    public var resource: String?

    public var resourceManagerResourceGroupId: String?

    public var ruleId: Int64?

    public var templateId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.defenseType != nil {
            map["DefenseType"] = self.defenseType!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resource != nil {
            map["Resource"] = self.resource!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.ruleId != nil {
            map["RuleId"] = self.ruleId!
        }
        if self.templateId != nil {
            map["TemplateId"] = self.templateId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DefenseType"] as? String {
            self.defenseType = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Resource"] as? String {
            self.resource = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["RuleId"] as? Int64 {
            self.ruleId = value
        }
        if let value = dict["TemplateId"] as? Int64 {
            self.templateId = value
        }
    }
}

public class DescribeDefenseRuleResponseBody : Tea.TeaModel {
    public class Rule : Tea.TeaModel {
        public var config: String?

        public var defenseOrigin: String?

        public var defenseScene: String?

        public var defenseType: String?

        public var gmtModified: Int64?

        public var resource: String?

        public var ruleId: Int64?

        public var ruleName: String?

        public var status: Int32?

        public var templateId: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.config != nil {
                map["Config"] = self.config!
            }
            if self.defenseOrigin != nil {
                map["DefenseOrigin"] = self.defenseOrigin!
            }
            if self.defenseScene != nil {
                map["DefenseScene"] = self.defenseScene!
            }
            if self.defenseType != nil {
                map["DefenseType"] = self.defenseType!
            }
            if self.gmtModified != nil {
                map["GmtModified"] = self.gmtModified!
            }
            if self.resource != nil {
                map["Resource"] = self.resource!
            }
            if self.ruleId != nil {
                map["RuleId"] = self.ruleId!
            }
            if self.ruleName != nil {
                map["RuleName"] = self.ruleName!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.templateId != nil {
                map["TemplateId"] = self.templateId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Config"] as? String {
                self.config = value
            }
            if let value = dict["DefenseOrigin"] as? String {
                self.defenseOrigin = value
            }
            if let value = dict["DefenseScene"] as? String {
                self.defenseScene = value
            }
            if let value = dict["DefenseType"] as? String {
                self.defenseType = value
            }
            if let value = dict["GmtModified"] as? Int64 {
                self.gmtModified = value
            }
            if let value = dict["Resource"] as? String {
                self.resource = value
            }
            if let value = dict["RuleId"] as? Int64 {
                self.ruleId = value
            }
            if let value = dict["RuleName"] as? String {
                self.ruleName = value
            }
            if let value = dict["Status"] as? Int32 {
                self.status = value
            }
            if let value = dict["TemplateId"] as? Int64 {
                self.templateId = value
            }
        }
    }
    public var requestId: String?

    public var rule: DescribeDefenseRuleResponseBody.Rule?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.rule?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.rule != nil {
            map["Rule"] = self.rule?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Rule"] as? [String: Any?] {
            var model = DescribeDefenseRuleResponseBody.Rule()
            model.fromMap(value)
            self.rule = model
        }
    }
}

public class DescribeDefenseRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeDefenseRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeDefenseRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeDefenseRuleStatisticsRequest : Tea.TeaModel {
    public var fourthKey: String?

    public var instanceId: String?

    public var primaryKey: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public var secondaryKey: String?

    public var templateId: Int64?

    public var thirdKey: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.fourthKey != nil {
            map["FourthKey"] = self.fourthKey!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.primaryKey != nil {
            map["PrimaryKey"] = self.primaryKey!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.secondaryKey != nil {
            map["SecondaryKey"] = self.secondaryKey!
        }
        if self.templateId != nil {
            map["TemplateId"] = self.templateId!
        }
        if self.thirdKey != nil {
            map["ThirdKey"] = self.thirdKey!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["FourthKey"] as? String {
            self.fourthKey = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["PrimaryKey"] as? String {
            self.primaryKey = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["SecondaryKey"] as? String {
            self.secondaryKey = value
        }
        if let value = dict["TemplateId"] as? Int64 {
            self.templateId = value
        }
        if let value = dict["ThirdKey"] as? String {
            self.thirdKey = value
        }
    }
}

public class DescribeDefenseRuleStatisticsResponseBody : Tea.TeaModel {
    public class StatisticsInfos : Tea.TeaModel {
        public var count: Int64?

        public var fourthValue: String?

        public var primaryValue: String?

        public var secondaryValue: String?

        public var thirdValue: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.count != nil {
                map["Count"] = self.count!
            }
            if self.fourthValue != nil {
                map["FourthValue"] = self.fourthValue!
            }
            if self.primaryValue != nil {
                map["PrimaryValue"] = self.primaryValue!
            }
            if self.secondaryValue != nil {
                map["SecondaryValue"] = self.secondaryValue!
            }
            if self.thirdValue != nil {
                map["ThirdValue"] = self.thirdValue!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Count"] as? Int64 {
                self.count = value
            }
            if let value = dict["FourthValue"] as? String {
                self.fourthValue = value
            }
            if let value = dict["PrimaryValue"] as? String {
                self.primaryValue = value
            }
            if let value = dict["SecondaryValue"] as? String {
                self.secondaryValue = value
            }
            if let value = dict["ThirdValue"] as? String {
                self.thirdValue = value
            }
        }
    }
    public var requestId: String?

    public var statisticsInfos: [DescribeDefenseRuleStatisticsResponseBody.StatisticsInfos]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.statisticsInfos != nil {
            var tmp : [Any] = []
            for k in self.statisticsInfos! {
                tmp.append(k.toMap())
            }
            map["StatisticsInfos"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["StatisticsInfos"] as? [Any?] {
            var tmp : [DescribeDefenseRuleStatisticsResponseBody.StatisticsInfos] = []
            for v in value {
                if v != nil {
                    var model = DescribeDefenseRuleStatisticsResponseBody.StatisticsInfos()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.statisticsInfos = tmp
        }
    }
}

public class DescribeDefenseRuleStatisticsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeDefenseRuleStatisticsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeDefenseRuleStatisticsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeDefenseRulesRequest : Tea.TeaModel {
    public var defenseType: String?

    public var instanceId: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var query: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public var ruleType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.defenseType != nil {
            map["DefenseType"] = self.defenseType!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.query != nil {
            map["Query"] = self.query!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.ruleType != nil {
            map["RuleType"] = self.ruleType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DefenseType"] as? String {
            self.defenseType = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["Query"] as? String {
            self.query = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["RuleType"] as? String {
            self.ruleType = value
        }
    }
}

public class DescribeDefenseRulesResponseBody : Tea.TeaModel {
    public class Rules : Tea.TeaModel {
        public var actionExternal: String?

        public var config: String?

        public var defenseOrigin: String?

        public var defenseScene: String?

        public var defenseType: String?

        public var description_: String?

        public var detailRuleIds: String?

        public var externalInfo: String?

        public var gmtCreate: Int64?

        public var gmtModified: Int64?

        public var resource: String?

        public var ruleId: Int64?

        public var ruleName: String?

        public var ruleType: String?

        public var status: Int32?

        public var templateId: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.actionExternal != nil {
                map["ActionExternal"] = self.actionExternal!
            }
            if self.config != nil {
                map["Config"] = self.config!
            }
            if self.defenseOrigin != nil {
                map["DefenseOrigin"] = self.defenseOrigin!
            }
            if self.defenseScene != nil {
                map["DefenseScene"] = self.defenseScene!
            }
            if self.defenseType != nil {
                map["DefenseType"] = self.defenseType!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.detailRuleIds != nil {
                map["DetailRuleIds"] = self.detailRuleIds!
            }
            if self.externalInfo != nil {
                map["ExternalInfo"] = self.externalInfo!
            }
            if self.gmtCreate != nil {
                map["GmtCreate"] = self.gmtCreate!
            }
            if self.gmtModified != nil {
                map["GmtModified"] = self.gmtModified!
            }
            if self.resource != nil {
                map["Resource"] = self.resource!
            }
            if self.ruleId != nil {
                map["RuleId"] = self.ruleId!
            }
            if self.ruleName != nil {
                map["RuleName"] = self.ruleName!
            }
            if self.ruleType != nil {
                map["RuleType"] = self.ruleType!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.templateId != nil {
                map["TemplateId"] = self.templateId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ActionExternal"] as? String {
                self.actionExternal = value
            }
            if let value = dict["Config"] as? String {
                self.config = value
            }
            if let value = dict["DefenseOrigin"] as? String {
                self.defenseOrigin = value
            }
            if let value = dict["DefenseScene"] as? String {
                self.defenseScene = value
            }
            if let value = dict["DefenseType"] as? String {
                self.defenseType = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["DetailRuleIds"] as? String {
                self.detailRuleIds = value
            }
            if let value = dict["ExternalInfo"] as? String {
                self.externalInfo = value
            }
            if let value = dict["GmtCreate"] as? Int64 {
                self.gmtCreate = value
            }
            if let value = dict["GmtModified"] as? Int64 {
                self.gmtModified = value
            }
            if let value = dict["Resource"] as? String {
                self.resource = value
            }
            if let value = dict["RuleId"] as? Int64 {
                self.ruleId = value
            }
            if let value = dict["RuleName"] as? String {
                self.ruleName = value
            }
            if let value = dict["RuleType"] as? String {
                self.ruleType = value
            }
            if let value = dict["Status"] as? Int32 {
                self.status = value
            }
            if let value = dict["TemplateId"] as? Int64 {
                self.templateId = value
            }
        }
    }
    public var requestId: String?

    public var rules: [DescribeDefenseRulesResponseBody.Rules]?

    public var totalCount: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.rules != nil {
            var tmp : [Any] = []
            for k in self.rules! {
                tmp.append(k.toMap())
            }
            map["Rules"] = tmp
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Rules"] as? [Any?] {
            var tmp : [DescribeDefenseRulesResponseBody.Rules] = []
            for v in value {
                if v != nil {
                    var model = DescribeDefenseRulesResponseBody.Rules()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.rules = tmp
        }
        if let value = dict["TotalCount"] as? Int64 {
            self.totalCount = value
        }
    }
}

public class DescribeDefenseRulesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeDefenseRulesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeDefenseRulesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeDefenseSceneConfigRequest : Tea.TeaModel {
    public var configKey: String?

    public var defenseScene: String?

    public var instanceId: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configKey != nil {
            map["ConfigKey"] = self.configKey!
        }
        if self.defenseScene != nil {
            map["DefenseScene"] = self.defenseScene!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConfigKey"] as? String {
            self.configKey = value
        }
        if let value = dict["DefenseScene"] as? String {
            self.defenseScene = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class DescribeDefenseSceneConfigResponseBody : Tea.TeaModel {
    public var configValue: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configValue != nil {
            map["ConfigValue"] = self.configValue!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConfigValue"] as? String {
            self.configValue = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeDefenseSceneConfigResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeDefenseSceneConfigResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeDefenseSceneConfigResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeDefenseTemplateRequest : Tea.TeaModel {
    public var instanceId: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public var templateId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.templateId != nil {
            map["TemplateId"] = self.templateId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["TemplateId"] as? Int64 {
            self.templateId = value
        }
    }
}

public class DescribeDefenseTemplateResponseBody : Tea.TeaModel {
    public class Template : Tea.TeaModel {
        public var defenseScene: String?

        public var defenseSubScene: String?

        public var description_: String?

        public var gmtModified: Int64?

        public var templateId: Int64?

        public var templateName: String?

        public var templateOrigin: String?

        public var templateStatus: Int32?

        public var templateType: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.defenseScene != nil {
                map["DefenseScene"] = self.defenseScene!
            }
            if self.defenseSubScene != nil {
                map["DefenseSubScene"] = self.defenseSubScene!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.gmtModified != nil {
                map["GmtModified"] = self.gmtModified!
            }
            if self.templateId != nil {
                map["TemplateId"] = self.templateId!
            }
            if self.templateName != nil {
                map["TemplateName"] = self.templateName!
            }
            if self.templateOrigin != nil {
                map["TemplateOrigin"] = self.templateOrigin!
            }
            if self.templateStatus != nil {
                map["TemplateStatus"] = self.templateStatus!
            }
            if self.templateType != nil {
                map["TemplateType"] = self.templateType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DefenseScene"] as? String {
                self.defenseScene = value
            }
            if let value = dict["DefenseSubScene"] as? String {
                self.defenseSubScene = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["GmtModified"] as? Int64 {
                self.gmtModified = value
            }
            if let value = dict["TemplateId"] as? Int64 {
                self.templateId = value
            }
            if let value = dict["TemplateName"] as? String {
                self.templateName = value
            }
            if let value = dict["TemplateOrigin"] as? String {
                self.templateOrigin = value
            }
            if let value = dict["TemplateStatus"] as? Int32 {
                self.templateStatus = value
            }
            if let value = dict["TemplateType"] as? String {
                self.templateType = value
            }
        }
    }
    public var requestId: String?

    public var template: DescribeDefenseTemplateResponseBody.Template?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.template?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.template != nil {
            map["Template"] = self.template?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Template"] as? [String: Any?] {
            var model = DescribeDefenseTemplateResponseBody.Template()
            model.fromMap(value)
            self.template = model
        }
    }
}

public class DescribeDefenseTemplateResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeDefenseTemplateResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeDefenseTemplateResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeDefenseTemplateValidGroupsRequest : Tea.TeaModel {
    public var defenseScene: String?

    public var groupName: String?

    public var instanceId: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public var templateId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.defenseScene != nil {
            map["DefenseScene"] = self.defenseScene!
        }
        if self.groupName != nil {
            map["GroupName"] = self.groupName!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.templateId != nil {
            map["TemplateId"] = self.templateId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DefenseScene"] as? String {
            self.defenseScene = value
        }
        if let value = dict["GroupName"] as? String {
            self.groupName = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["TemplateId"] as? Int64 {
            self.templateId = value
        }
    }
}

public class DescribeDefenseTemplateValidGroupsResponseBody : Tea.TeaModel {
    public var groups: [String]?

    public var requestId: String?

    public var totalCount: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.groups != nil {
            map["Groups"] = self.groups!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Groups"] as? [String] {
            self.groups = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int64 {
            self.totalCount = value
        }
    }
}

public class DescribeDefenseTemplateValidGroupsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeDefenseTemplateValidGroupsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeDefenseTemplateValidGroupsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeDefenseTemplateValidResourcesRequest : Tea.TeaModel {
    public var defenseScene: String?

    public var instanceId: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var regionId: String?

    public var resource: String?

    public var resourceManagerResourceGroupId: String?

    public var templateId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.defenseScene != nil {
            map["DefenseScene"] = self.defenseScene!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resource != nil {
            map["Resource"] = self.resource!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.templateId != nil {
            map["TemplateId"] = self.templateId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DefenseScene"] as? String {
            self.defenseScene = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Resource"] as? String {
            self.resource = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["TemplateId"] as? Int64 {
            self.templateId = value
        }
    }
}

public class DescribeDefenseTemplateValidResourcesResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resources: [String]?

    public var totalCount: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resources != nil {
            map["Resources"] = self.resources!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Resources"] as? [String] {
            self.resources = value
        }
        if let value = dict["TotalCount"] as? Int64 {
            self.totalCount = value
        }
    }
}

public class DescribeDefenseTemplateValidResourcesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeDefenseTemplateValidResourcesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeDefenseTemplateValidResourcesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeDefenseTemplatesRequest : Tea.TeaModel {
    public var defenseScene: String?

    public var defenseSubScene: String?

    public var instanceId: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var regionId: String?

    public var resource: String?

    public var resourceManagerResourceGroupId: String?

    public var resourceType: String?

    public var templateId: Int64?

    public var templateIds: String?

    public var templateName: String?

    public var templateType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.defenseScene != nil {
            map["DefenseScene"] = self.defenseScene!
        }
        if self.defenseSubScene != nil {
            map["DefenseSubScene"] = self.defenseSubScene!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resource != nil {
            map["Resource"] = self.resource!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.resourceType != nil {
            map["ResourceType"] = self.resourceType!
        }
        if self.templateId != nil {
            map["TemplateId"] = self.templateId!
        }
        if self.templateIds != nil {
            map["TemplateIds"] = self.templateIds!
        }
        if self.templateName != nil {
            map["TemplateName"] = self.templateName!
        }
        if self.templateType != nil {
            map["TemplateType"] = self.templateType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DefenseScene"] as? String {
            self.defenseScene = value
        }
        if let value = dict["DefenseSubScene"] as? String {
            self.defenseSubScene = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Resource"] as? String {
            self.resource = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["ResourceType"] as? String {
            self.resourceType = value
        }
        if let value = dict["TemplateId"] as? Int64 {
            self.templateId = value
        }
        if let value = dict["TemplateIds"] as? String {
            self.templateIds = value
        }
        if let value = dict["TemplateName"] as? String {
            self.templateName = value
        }
        if let value = dict["TemplateType"] as? String {
            self.templateType = value
        }
    }
}

public class DescribeDefenseTemplatesResponseBody : Tea.TeaModel {
    public class Templates : Tea.TeaModel {
        public var defenseScene: String?

        public var defenseSubScene: String?

        public var description_: String?

        public var gmtModified: Int64?

        public var templateId: Int64?

        public var templateName: String?

        public var templateOrigin: String?

        public var templateStatus: Int32?

        public var templateType: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.defenseScene != nil {
                map["DefenseScene"] = self.defenseScene!
            }
            if self.defenseSubScene != nil {
                map["DefenseSubScene"] = self.defenseSubScene!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.gmtModified != nil {
                map["GmtModified"] = self.gmtModified!
            }
            if self.templateId != nil {
                map["TemplateId"] = self.templateId!
            }
            if self.templateName != nil {
                map["TemplateName"] = self.templateName!
            }
            if self.templateOrigin != nil {
                map["TemplateOrigin"] = self.templateOrigin!
            }
            if self.templateStatus != nil {
                map["TemplateStatus"] = self.templateStatus!
            }
            if self.templateType != nil {
                map["TemplateType"] = self.templateType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DefenseScene"] as? String {
                self.defenseScene = value
            }
            if let value = dict["DefenseSubScene"] as? String {
                self.defenseSubScene = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["GmtModified"] as? Int64 {
                self.gmtModified = value
            }
            if let value = dict["TemplateId"] as? Int64 {
                self.templateId = value
            }
            if let value = dict["TemplateName"] as? String {
                self.templateName = value
            }
            if let value = dict["TemplateOrigin"] as? String {
                self.templateOrigin = value
            }
            if let value = dict["TemplateStatus"] as? Int32 {
                self.templateStatus = value
            }
            if let value = dict["TemplateType"] as? String {
                self.templateType = value
            }
        }
    }
    public var requestId: String?

    public var templates: [DescribeDefenseTemplatesResponseBody.Templates]?

    public var totalCount: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.templates != nil {
            var tmp : [Any] = []
            for k in self.templates! {
                tmp.append(k.toMap())
            }
            map["Templates"] = tmp
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Templates"] as? [Any?] {
            var tmp : [DescribeDefenseTemplatesResponseBody.Templates] = []
            for v in value {
                if v != nil {
                    var model = DescribeDefenseTemplatesResponseBody.Templates()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.templates = tmp
        }
        if let value = dict["TotalCount"] as? Int64 {
            self.totalCount = value
        }
    }
}

public class DescribeDefenseTemplatesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeDefenseTemplatesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeDefenseTemplatesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeDomainDNSRecordRequest : Tea.TeaModel {
    public var domain: String?

    public var instanceId: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.domain != nil {
            map["Domain"] = self.domain!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Domain"] as? String {
            self.domain = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class DescribeDomainDNSRecordResponseBody : Tea.TeaModel {
    public var DNSStatus: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.DNSStatus != nil {
            map["DNSStatus"] = self.DNSStatus!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DNSStatus"] as? String {
            self.DNSStatus = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeDomainDNSRecordResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeDomainDNSRecordResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeDomainDNSRecordResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeDomainDetailRequest : Tea.TeaModel {
    public var domain: String?

    public var domainId: String?

    public var instanceId: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.domain != nil {
            map["Domain"] = self.domain!
        }
        if self.domainId != nil {
            map["DomainId"] = self.domainId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Domain"] as? String {
            self.domain = value
        }
        if let value = dict["DomainId"] as? String {
            self.domainId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DescribeDomainDetailResponseBody : Tea.TeaModel {
    public class CertDetail : Tea.TeaModel {
        public var commonName: String?

        public var endTime: Int64?

        public var id: String?

        public var name: String?

        public var sans: [String]?

        public var startTime: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.commonName != nil {
                map["CommonName"] = self.commonName!
            }
            if self.endTime != nil {
                map["EndTime"] = self.endTime!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.sans != nil {
                map["Sans"] = self.sans!
            }
            if self.startTime != nil {
                map["StartTime"] = self.startTime!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CommonName"] as? String {
                self.commonName = value
            }
            if let value = dict["EndTime"] as? Int64 {
                self.endTime = value
            }
            if let value = dict["Id"] as? String {
                self.id = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["Sans"] as? [String] {
                self.sans = value
            }
            if let value = dict["StartTime"] as? Int64 {
                self.startTime = value
            }
        }
    }
    public class Listen : Tea.TeaModel {
        public var certId: String?

        public var cipherSuite: Int64?

        public var customCiphers: [String]?

        public var enableTLSv3: Bool?

        public var exclusiveIp: Bool?

        public var focusHttps: Bool?

        public var http2Enabled: Bool?

        public var httpPorts: [Int64]?

        public var httpsPorts: [Int64]?

        public var IPv6Enabled: Bool?

        public var protectionResource: String?

        public var SM2AccessOnly: Bool?

        public var SM2CertId: String?

        public var SM2Enabled: Bool?

        public var TLSVersion: String?

        public var xffHeaderMode: Int64?

        public var xffHeaders: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.certId != nil {
                map["CertId"] = self.certId!
            }
            if self.cipherSuite != nil {
                map["CipherSuite"] = self.cipherSuite!
            }
            if self.customCiphers != nil {
                map["CustomCiphers"] = self.customCiphers!
            }
            if self.enableTLSv3 != nil {
                map["EnableTLSv3"] = self.enableTLSv3!
            }
            if self.exclusiveIp != nil {
                map["ExclusiveIp"] = self.exclusiveIp!
            }
            if self.focusHttps != nil {
                map["FocusHttps"] = self.focusHttps!
            }
            if self.http2Enabled != nil {
                map["Http2Enabled"] = self.http2Enabled!
            }
            if self.httpPorts != nil {
                map["HttpPorts"] = self.httpPorts!
            }
            if self.httpsPorts != nil {
                map["HttpsPorts"] = self.httpsPorts!
            }
            if self.IPv6Enabled != nil {
                map["IPv6Enabled"] = self.IPv6Enabled!
            }
            if self.protectionResource != nil {
                map["ProtectionResource"] = self.protectionResource!
            }
            if self.SM2AccessOnly != nil {
                map["SM2AccessOnly"] = self.SM2AccessOnly!
            }
            if self.SM2CertId != nil {
                map["SM2CertId"] = self.SM2CertId!
            }
            if self.SM2Enabled != nil {
                map["SM2Enabled"] = self.SM2Enabled!
            }
            if self.TLSVersion != nil {
                map["TLSVersion"] = self.TLSVersion!
            }
            if self.xffHeaderMode != nil {
                map["XffHeaderMode"] = self.xffHeaderMode!
            }
            if self.xffHeaders != nil {
                map["XffHeaders"] = self.xffHeaders!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CertId"] as? String {
                self.certId = value
            }
            if let value = dict["CipherSuite"] as? Int64 {
                self.cipherSuite = value
            }
            if let value = dict["CustomCiphers"] as? [String] {
                self.customCiphers = value
            }
            if let value = dict["EnableTLSv3"] as? Bool {
                self.enableTLSv3 = value
            }
            if let value = dict["ExclusiveIp"] as? Bool {
                self.exclusiveIp = value
            }
            if let value = dict["FocusHttps"] as? Bool {
                self.focusHttps = value
            }
            if let value = dict["Http2Enabled"] as? Bool {
                self.http2Enabled = value
            }
            if let value = dict["HttpPorts"] as? [Int64] {
                self.httpPorts = value
            }
            if let value = dict["HttpsPorts"] as? [Int64] {
                self.httpsPorts = value
            }
            if let value = dict["IPv6Enabled"] as? Bool {
                self.IPv6Enabled = value
            }
            if let value = dict["ProtectionResource"] as? String {
                self.protectionResource = value
            }
            if let value = dict["SM2AccessOnly"] as? Bool {
                self.SM2AccessOnly = value
            }
            if let value = dict["SM2CertId"] as? String {
                self.SM2CertId = value
            }
            if let value = dict["SM2Enabled"] as? Bool {
                self.SM2Enabled = value
            }
            if let value = dict["TLSVersion"] as? String {
                self.TLSVersion = value
            }
            if let value = dict["XffHeaderMode"] as? Int64 {
                self.xffHeaderMode = value
            }
            if let value = dict["XffHeaders"] as? [String] {
                self.xffHeaders = value
            }
        }
    }
    public class Redirect : Tea.TeaModel {
        public class BackendPorts : Tea.TeaModel {
            public var backendPort: Int32?

            public var listenPort: Int32?

            public var protocol_: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.backendPort != nil {
                    map["BackendPort"] = self.backendPort!
                }
                if self.listenPort != nil {
                    map["ListenPort"] = self.listenPort!
                }
                if self.protocol_ != nil {
                    map["Protocol"] = self.protocol_!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["BackendPort"] as? Int32 {
                    self.backendPort = value
                }
                if let value = dict["ListenPort"] as? Int32 {
                    self.listenPort = value
                }
                if let value = dict["Protocol"] as? String {
                    self.protocol_ = value
                }
            }
        }
        public class Backends : Tea.TeaModel {
            public var backend: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.backend != nil {
                    map["Backend"] = self.backend!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Backend"] as? String {
                    self.backend = value
                }
            }
        }
        public class BackupBackends : Tea.TeaModel {
            public var backend: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.backend != nil {
                    map["Backend"] = self.backend!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Backend"] as? String {
                    self.backend = value
                }
            }
        }
        public class RequestHeaders : Tea.TeaModel {
            public var key: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.key != nil {
                    map["Key"] = self.key!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Key"] as? String {
                    self.key = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public var backUpBackendList: [String]?

        public var backendList: [String]?

        public var backendPorts: [DescribeDomainDetailResponseBody.Redirect.BackendPorts]?

        public var backends: [DescribeDomainDetailResponseBody.Redirect.Backends]?

        public var backupBackends: [DescribeDomainDetailResponseBody.Redirect.BackupBackends]?

        public var connectTimeout: Int32?

        public var focusHttpBackend: Bool?

        public var keepalive: Bool?

        public var keepaliveRequests: Int32?

        public var keepaliveTimeout: Int32?

        public var loadbalance: String?

        public var readTimeout: Int32?

        public var requestHeaders: [DescribeDomainDetailResponseBody.Redirect.RequestHeaders]?

        public var retry: Bool?

        public var sniEnabled: Bool?

        public var sniHost: String?

        public var WLProxyClientIp: Bool?

        public var webServerType: Bool?

        public var writeTimeout: Int32?

        public var XClientIp: Bool?

        public var XTrueIp: Bool?

        public var xffProto: Bool?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.backUpBackendList != nil {
                map["BackUpBackendList"] = self.backUpBackendList!
            }
            if self.backendList != nil {
                map["BackendList"] = self.backendList!
            }
            if self.backendPorts != nil {
                var tmp : [Any] = []
                for k in self.backendPorts! {
                    tmp.append(k.toMap())
                }
                map["BackendPorts"] = tmp
            }
            if self.backends != nil {
                var tmp : [Any] = []
                for k in self.backends! {
                    tmp.append(k.toMap())
                }
                map["Backends"] = tmp
            }
            if self.backupBackends != nil {
                var tmp : [Any] = []
                for k in self.backupBackends! {
                    tmp.append(k.toMap())
                }
                map["BackupBackends"] = tmp
            }
            if self.connectTimeout != nil {
                map["ConnectTimeout"] = self.connectTimeout!
            }
            if self.focusHttpBackend != nil {
                map["FocusHttpBackend"] = self.focusHttpBackend!
            }
            if self.keepalive != nil {
                map["Keepalive"] = self.keepalive!
            }
            if self.keepaliveRequests != nil {
                map["KeepaliveRequests"] = self.keepaliveRequests!
            }
            if self.keepaliveTimeout != nil {
                map["KeepaliveTimeout"] = self.keepaliveTimeout!
            }
            if self.loadbalance != nil {
                map["Loadbalance"] = self.loadbalance!
            }
            if self.readTimeout != nil {
                map["ReadTimeout"] = self.readTimeout!
            }
            if self.requestHeaders != nil {
                var tmp : [Any] = []
                for k in self.requestHeaders! {
                    tmp.append(k.toMap())
                }
                map["RequestHeaders"] = tmp
            }
            if self.retry != nil {
                map["Retry"] = self.retry!
            }
            if self.sniEnabled != nil {
                map["SniEnabled"] = self.sniEnabled!
            }
            if self.sniHost != nil {
                map["SniHost"] = self.sniHost!
            }
            if self.WLProxyClientIp != nil {
                map["WLProxyClientIp"] = self.WLProxyClientIp!
            }
            if self.webServerType != nil {
                map["WebServerType"] = self.webServerType!
            }
            if self.writeTimeout != nil {
                map["WriteTimeout"] = self.writeTimeout!
            }
            if self.XClientIp != nil {
                map["XClientIp"] = self.XClientIp!
            }
            if self.XTrueIp != nil {
                map["XTrueIp"] = self.XTrueIp!
            }
            if self.xffProto != nil {
                map["XffProto"] = self.xffProto!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["BackUpBackendList"] as? [String] {
                self.backUpBackendList = value
            }
            if let value = dict["BackendList"] as? [String] {
                self.backendList = value
            }
            if let value = dict["BackendPorts"] as? [Any?] {
                var tmp : [DescribeDomainDetailResponseBody.Redirect.BackendPorts] = []
                for v in value {
                    if v != nil {
                        var model = DescribeDomainDetailResponseBody.Redirect.BackendPorts()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.backendPorts = tmp
            }
            if let value = dict["Backends"] as? [Any?] {
                var tmp : [DescribeDomainDetailResponseBody.Redirect.Backends] = []
                for v in value {
                    if v != nil {
                        var model = DescribeDomainDetailResponseBody.Redirect.Backends()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.backends = tmp
            }
            if let value = dict["BackupBackends"] as? [Any?] {
                var tmp : [DescribeDomainDetailResponseBody.Redirect.BackupBackends] = []
                for v in value {
                    if v != nil {
                        var model = DescribeDomainDetailResponseBody.Redirect.BackupBackends()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.backupBackends = tmp
            }
            if let value = dict["ConnectTimeout"] as? Int32 {
                self.connectTimeout = value
            }
            if let value = dict["FocusHttpBackend"] as? Bool {
                self.focusHttpBackend = value
            }
            if let value = dict["Keepalive"] as? Bool {
                self.keepalive = value
            }
            if let value = dict["KeepaliveRequests"] as? Int32 {
                self.keepaliveRequests = value
            }
            if let value = dict["KeepaliveTimeout"] as? Int32 {
                self.keepaliveTimeout = value
            }
            if let value = dict["Loadbalance"] as? String {
                self.loadbalance = value
            }
            if let value = dict["ReadTimeout"] as? Int32 {
                self.readTimeout = value
            }
            if let value = dict["RequestHeaders"] as? [Any?] {
                var tmp : [DescribeDomainDetailResponseBody.Redirect.RequestHeaders] = []
                for v in value {
                    if v != nil {
                        var model = DescribeDomainDetailResponseBody.Redirect.RequestHeaders()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.requestHeaders = tmp
            }
            if let value = dict["Retry"] as? Bool {
                self.retry = value
            }
            if let value = dict["SniEnabled"] as? Bool {
                self.sniEnabled = value
            }
            if let value = dict["SniHost"] as? String {
                self.sniHost = value
            }
            if let value = dict["WLProxyClientIp"] as? Bool {
                self.WLProxyClientIp = value
            }
            if let value = dict["WebServerType"] as? Bool {
                self.webServerType = value
            }
            if let value = dict["WriteTimeout"] as? Int32 {
                self.writeTimeout = value
            }
            if let value = dict["XClientIp"] as? Bool {
                self.XClientIp = value
            }
            if let value = dict["XTrueIp"] as? Bool {
                self.XTrueIp = value
            }
            if let value = dict["XffProto"] as? Bool {
                self.xffProto = value
            }
        }
    }
    public class SM2CertDetail : Tea.TeaModel {
        public var commonName: String?

        public var endTime: Int64?

        public var id: String?

        public var name: String?

        public var sans: [String]?

        public var startTime: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.commonName != nil {
                map["CommonName"] = self.commonName!
            }
            if self.endTime != nil {
                map["EndTime"] = self.endTime!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.sans != nil {
                map["Sans"] = self.sans!
            }
            if self.startTime != nil {
                map["StartTime"] = self.startTime!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CommonName"] as? String {
                self.commonName = value
            }
            if let value = dict["EndTime"] as? Int64 {
                self.endTime = value
            }
            if let value = dict["Id"] as? String {
                self.id = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["Sans"] as? [String] {
                self.sans = value
            }
            if let value = dict["StartTime"] as? Int64 {
                self.startTime = value
            }
        }
    }
    public var certDetail: DescribeDomainDetailResponseBody.CertDetail?

    public var cname: String?

    public var domain: String?

    public var domainId: String?

    public var listen: DescribeDomainDetailResponseBody.Listen?

    public var redirect: DescribeDomainDetailResponseBody.Redirect?

    public var requestId: String?

    public var resourceManagerResourceGroupId: String?

    public var SM2CertDetail: DescribeDomainDetailResponseBody.SM2CertDetail?

    public var status: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.certDetail?.validate()
        try self.listen?.validate()
        try self.redirect?.validate()
        try self.SM2CertDetail?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.certDetail != nil {
            map["CertDetail"] = self.certDetail?.toMap()
        }
        if self.cname != nil {
            map["Cname"] = self.cname!
        }
        if self.domain != nil {
            map["Domain"] = self.domain!
        }
        if self.domainId != nil {
            map["DomainId"] = self.domainId!
        }
        if self.listen != nil {
            map["Listen"] = self.listen?.toMap()
        }
        if self.redirect != nil {
            map["Redirect"] = self.redirect?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.SM2CertDetail != nil {
            map["SM2CertDetail"] = self.SM2CertDetail?.toMap()
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CertDetail"] as? [String: Any?] {
            var model = DescribeDomainDetailResponseBody.CertDetail()
            model.fromMap(value)
            self.certDetail = model
        }
        if let value = dict["Cname"] as? String {
            self.cname = value
        }
        if let value = dict["Domain"] as? String {
            self.domain = value
        }
        if let value = dict["DomainId"] as? String {
            self.domainId = value
        }
        if let value = dict["Listen"] as? [String: Any?] {
            var model = DescribeDomainDetailResponseBody.Listen()
            model.fromMap(value)
            self.listen = model
        }
        if let value = dict["Redirect"] as? [String: Any?] {
            var model = DescribeDomainDetailResponseBody.Redirect()
            model.fromMap(value)
            self.redirect = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["SM2CertDetail"] as? [String: Any?] {
            var model = DescribeDomainDetailResponseBody.SM2CertDetail()
            model.fromMap(value)
            self.SM2CertDetail = model
        }
        if let value = dict["Status"] as? Int32 {
            self.status = value
        }
    }
}

public class DescribeDomainDetailResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeDomainDetailResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeDomainDetailResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeDomainUsedPortsRequest : Tea.TeaModel {
    public var instanceId: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DescribeDomainUsedPortsResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var usedPorts: [Int32]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.usedPorts != nil {
            map["UsedPorts"] = self.usedPorts!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["UsedPorts"] as? [Int32] {
            self.usedPorts = value
        }
    }
}

public class DescribeDomainUsedPortsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeDomainUsedPortsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeDomainUsedPortsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeDomainsRequest : Tea.TeaModel {
    public class Tag : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var backend: String?

    public var domain: String?

    public var instanceId: String?

    public var pageNumber: Int64?

    public var pageSize: Int64?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public var tag: [DescribeDomainsRequest.Tag]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.backend != nil {
            map["Backend"] = self.backend!
        }
        if self.domain != nil {
            map["Domain"] = self.domain!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.tag != nil {
            var tmp : [Any] = []
            for k in self.tag! {
                tmp.append(k.toMap())
            }
            map["Tag"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Backend"] as? String {
            self.backend = value
        }
        if let value = dict["Domain"] as? String {
            self.domain = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["PageNumber"] as? Int64 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["Tag"] as? [Any?] {
            var tmp : [DescribeDomainsRequest.Tag] = []
            for v in value {
                if v != nil {
                    var model = DescribeDomainsRequest.Tag()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tag = tmp
        }
    }
}

public class DescribeDomainsResponseBody : Tea.TeaModel {
    public class Domains : Tea.TeaModel {
        public class Backeds : Tea.TeaModel {
            public class Http : Tea.TeaModel {
                public var backend: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.backend != nil {
                        map["Backend"] = self.backend!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Backend"] as? String {
                        self.backend = value
                    }
                }
            }
            public class Https : Tea.TeaModel {
                public var backend: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.backend != nil {
                        map["Backend"] = self.backend!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Backend"] as? String {
                        self.backend = value
                    }
                }
            }
            public var http: [DescribeDomainsResponseBody.Domains.Backeds.Http]?

            public var https: [DescribeDomainsResponseBody.Domains.Backeds.Https]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.http != nil {
                    var tmp : [Any] = []
                    for k in self.http! {
                        tmp.append(k.toMap())
                    }
                    map["Http"] = tmp
                }
                if self.https != nil {
                    var tmp : [Any] = []
                    for k in self.https! {
                        tmp.append(k.toMap())
                    }
                    map["Https"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Http"] as? [Any?] {
                    var tmp : [DescribeDomainsResponseBody.Domains.Backeds.Http] = []
                    for v in value {
                        if v != nil {
                            var model = DescribeDomainsResponseBody.Domains.Backeds.Http()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.http = tmp
                }
                if let value = dict["Https"] as? [Any?] {
                    var tmp : [DescribeDomainsResponseBody.Domains.Backeds.Https] = []
                    for v in value {
                        if v != nil {
                            var model = DescribeDomainsResponseBody.Domains.Backeds.Https()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.https = tmp
                }
            }
        }
        public class ListenPorts : Tea.TeaModel {
            public var http: [Int64]?

            public var https: [Int64]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.http != nil {
                    map["Http"] = self.http!
                }
                if self.https != nil {
                    map["Https"] = self.https!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Http"] as? [Int64] {
                    self.http = value
                }
                if let value = dict["Https"] as? [Int64] {
                    self.https = value
                }
            }
        }
        public var backeds: DescribeDomainsResponseBody.Domains.Backeds?

        public var cname: String?

        public var domain: String?

        public var domainId: String?

        public var listenPorts: DescribeDomainsResponseBody.Domains.ListenPorts?

        public var resourceManagerResourceGroupId: String?

        public var status: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.backeds?.validate()
            try self.listenPorts?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.backeds != nil {
                map["Backeds"] = self.backeds?.toMap()
            }
            if self.cname != nil {
                map["Cname"] = self.cname!
            }
            if self.domain != nil {
                map["Domain"] = self.domain!
            }
            if self.domainId != nil {
                map["DomainId"] = self.domainId!
            }
            if self.listenPorts != nil {
                map["ListenPorts"] = self.listenPorts?.toMap()
            }
            if self.resourceManagerResourceGroupId != nil {
                map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Backeds"] as? [String: Any?] {
                var model = DescribeDomainsResponseBody.Domains.Backeds()
                model.fromMap(value)
                self.backeds = model
            }
            if let value = dict["Cname"] as? String {
                self.cname = value
            }
            if let value = dict["Domain"] as? String {
                self.domain = value
            }
            if let value = dict["DomainId"] as? String {
                self.domainId = value
            }
            if let value = dict["ListenPorts"] as? [String: Any?] {
                var model = DescribeDomainsResponseBody.Domains.ListenPorts()
                model.fromMap(value)
                self.listenPorts = model
            }
            if let value = dict["ResourceManagerResourceGroupId"] as? String {
                self.resourceManagerResourceGroupId = value
            }
            if let value = dict["Status"] as? Int32 {
                self.status = value
            }
        }
    }
    public var domains: [DescribeDomainsResponseBody.Domains]?

    public var requestId: String?

    public var totalCount: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.domains != nil {
            var tmp : [Any] = []
            for k in self.domains! {
                tmp.append(k.toMap())
            }
            map["Domains"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Domains"] as? [Any?] {
            var tmp : [DescribeDomainsResponseBody.Domains] = []
            for v in value {
                if v != nil {
                    var model = DescribeDomainsResponseBody.Domains()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.domains = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int64 {
            self.totalCount = value
        }
    }
}

public class DescribeDomainsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeDomainsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeDomainsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeFlowChartRequest : Tea.TeaModel {
    public var endTimestamp: String?

    public var instanceId: String?

    public var interval: String?

    public var regionId: String?

    public var resource: String?

    public var resourceManagerResourceGroupId: String?

    public var startTimestamp: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTimestamp != nil {
            map["EndTimestamp"] = self.endTimestamp!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.interval != nil {
            map["Interval"] = self.interval!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resource != nil {
            map["Resource"] = self.resource!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.startTimestamp != nil {
            map["StartTimestamp"] = self.startTimestamp!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTimestamp"] as? String {
            self.endTimestamp = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["Interval"] as? String {
            self.interval = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Resource"] as? String {
            self.resource = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["StartTimestamp"] as? String {
            self.startTimestamp = value
        }
    }
}

public class DescribeFlowChartResponseBody : Tea.TeaModel {
    public class FlowChart : Tea.TeaModel {
        public var aclCustomBlockSum: Int64?

        public var aclCustomReportsSum: Int64?

        public var antiScanBlockSum: Int64?

        public var antibotBlockSum: Int64?

        public var antibotReportSum: String?

        public var antiscanReportsSum: Int64?

        public var blacklistBlockSum: String?

        public var blacklistReportsSum: Int64?

        public var ccCustomBlockSum: Int64?

        public var ccCustomReportsSum: Int64?

        public var ccSystemBlocksSum: Int64?

        public var ccSystemReportsSum: Int64?

        public var count: Int64?

        public var inBytes: Int64?

        public var index: Int64?

        public var maxPv: Int64?

        public var outBytes: Int64?

        public var ratelimitBlockSum: Int64?

        public var ratelimitReportSum: Int64?

        public var regionBlockBlocksSum: Int64?

        public var regionBlockReportsSum: Int64?

        public var robotCount: Int64?

        public var wafBlockSum: Int64?

        public var wafReportSum: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.aclCustomBlockSum != nil {
                map["AclCustomBlockSum"] = self.aclCustomBlockSum!
            }
            if self.aclCustomReportsSum != nil {
                map["AclCustomReportsSum"] = self.aclCustomReportsSum!
            }
            if self.antiScanBlockSum != nil {
                map["AntiScanBlockSum"] = self.antiScanBlockSum!
            }
            if self.antibotBlockSum != nil {
                map["AntibotBlockSum"] = self.antibotBlockSum!
            }
            if self.antibotReportSum != nil {
                map["AntibotReportSum"] = self.antibotReportSum!
            }
            if self.antiscanReportsSum != nil {
                map["AntiscanReportsSum"] = self.antiscanReportsSum!
            }
            if self.blacklistBlockSum != nil {
                map["BlacklistBlockSum"] = self.blacklistBlockSum!
            }
            if self.blacklistReportsSum != nil {
                map["BlacklistReportsSum"] = self.blacklistReportsSum!
            }
            if self.ccCustomBlockSum != nil {
                map["CcCustomBlockSum"] = self.ccCustomBlockSum!
            }
            if self.ccCustomReportsSum != nil {
                map["CcCustomReportsSum"] = self.ccCustomReportsSum!
            }
            if self.ccSystemBlocksSum != nil {
                map["CcSystemBlocksSum"] = self.ccSystemBlocksSum!
            }
            if self.ccSystemReportsSum != nil {
                map["CcSystemReportsSum"] = self.ccSystemReportsSum!
            }
            if self.count != nil {
                map["Count"] = self.count!
            }
            if self.inBytes != nil {
                map["InBytes"] = self.inBytes!
            }
            if self.index != nil {
                map["Index"] = self.index!
            }
            if self.maxPv != nil {
                map["MaxPv"] = self.maxPv!
            }
            if self.outBytes != nil {
                map["OutBytes"] = self.outBytes!
            }
            if self.ratelimitBlockSum != nil {
                map["RatelimitBlockSum"] = self.ratelimitBlockSum!
            }
            if self.ratelimitReportSum != nil {
                map["RatelimitReportSum"] = self.ratelimitReportSum!
            }
            if self.regionBlockBlocksSum != nil {
                map["RegionBlockBlocksSum"] = self.regionBlockBlocksSum!
            }
            if self.regionBlockReportsSum != nil {
                map["RegionBlockReportsSum"] = self.regionBlockReportsSum!
            }
            if self.robotCount != nil {
                map["RobotCount"] = self.robotCount!
            }
            if self.wafBlockSum != nil {
                map["WafBlockSum"] = self.wafBlockSum!
            }
            if self.wafReportSum != nil {
                map["WafReportSum"] = self.wafReportSum!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AclCustomBlockSum"] as? Int64 {
                self.aclCustomBlockSum = value
            }
            if let value = dict["AclCustomReportsSum"] as? Int64 {
                self.aclCustomReportsSum = value
            }
            if let value = dict["AntiScanBlockSum"] as? Int64 {
                self.antiScanBlockSum = value
            }
            if let value = dict["AntibotBlockSum"] as? Int64 {
                self.antibotBlockSum = value
            }
            if let value = dict["AntibotReportSum"] as? String {
                self.antibotReportSum = value
            }
            if let value = dict["AntiscanReportsSum"] as? Int64 {
                self.antiscanReportsSum = value
            }
            if let value = dict["BlacklistBlockSum"] as? String {
                self.blacklistBlockSum = value
            }
            if let value = dict["BlacklistReportsSum"] as? Int64 {
                self.blacklistReportsSum = value
            }
            if let value = dict["CcCustomBlockSum"] as? Int64 {
                self.ccCustomBlockSum = value
            }
            if let value = dict["CcCustomReportsSum"] as? Int64 {
                self.ccCustomReportsSum = value
            }
            if let value = dict["CcSystemBlocksSum"] as? Int64 {
                self.ccSystemBlocksSum = value
            }
            if let value = dict["CcSystemReportsSum"] as? Int64 {
                self.ccSystemReportsSum = value
            }
            if let value = dict["Count"] as? Int64 {
                self.count = value
            }
            if let value = dict["InBytes"] as? Int64 {
                self.inBytes = value
            }
            if let value = dict["Index"] as? Int64 {
                self.index = value
            }
            if let value = dict["MaxPv"] as? Int64 {
                self.maxPv = value
            }
            if let value = dict["OutBytes"] as? Int64 {
                self.outBytes = value
            }
            if let value = dict["RatelimitBlockSum"] as? Int64 {
                self.ratelimitBlockSum = value
            }
            if let value = dict["RatelimitReportSum"] as? Int64 {
                self.ratelimitReportSum = value
            }
            if let value = dict["RegionBlockBlocksSum"] as? Int64 {
                self.regionBlockBlocksSum = value
            }
            if let value = dict["RegionBlockReportsSum"] as? Int64 {
                self.regionBlockReportsSum = value
            }
            if let value = dict["RobotCount"] as? Int64 {
                self.robotCount = value
            }
            if let value = dict["WafBlockSum"] as? Int64 {
                self.wafBlockSum = value
            }
            if let value = dict["WafReportSum"] as? String {
                self.wafReportSum = value
            }
        }
    }
    public var flowChart: [DescribeFlowChartResponseBody.FlowChart]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.flowChart != nil {
            var tmp : [Any] = []
            for k in self.flowChart! {
                tmp.append(k.toMap())
            }
            map["FlowChart"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["FlowChart"] as? [Any?] {
            var tmp : [DescribeFlowChartResponseBody.FlowChart] = []
            for v in value {
                if v != nil {
                    var model = DescribeFlowChartResponseBody.FlowChart()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.flowChart = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeFlowChartResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeFlowChartResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeFlowChartResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeFlowTopResourceRequest : Tea.TeaModel {
    public var endTimestamp: String?

    public var instanceId: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public var startTimestamp: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTimestamp != nil {
            map["EndTimestamp"] = self.endTimestamp!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.startTimestamp != nil {
            map["StartTimestamp"] = self.startTimestamp!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTimestamp"] as? String {
            self.endTimestamp = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["StartTimestamp"] as? String {
            self.startTimestamp = value
        }
    }
}

public class DescribeFlowTopResourceResponseBody : Tea.TeaModel {
    public class RuleHitsTopResource : Tea.TeaModel {
        public var count: Int64?

        public var resource: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.count != nil {
                map["Count"] = self.count!
            }
            if self.resource != nil {
                map["Resource"] = self.resource!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Count"] as? Int64 {
                self.count = value
            }
            if let value = dict["Resource"] as? String {
                self.resource = value
            }
        }
    }
    public var requestId: String?

    public var ruleHitsTopResource: [DescribeFlowTopResourceResponseBody.RuleHitsTopResource]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.ruleHitsTopResource != nil {
            var tmp : [Any] = []
            for k in self.ruleHitsTopResource! {
                tmp.append(k.toMap())
            }
            map["RuleHitsTopResource"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["RuleHitsTopResource"] as? [Any?] {
            var tmp : [DescribeFlowTopResourceResponseBody.RuleHitsTopResource] = []
            for v in value {
                if v != nil {
                    var model = DescribeFlowTopResourceResponseBody.RuleHitsTopResource()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.ruleHitsTopResource = tmp
        }
    }
}

public class DescribeFlowTopResourceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeFlowTopResourceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeFlowTopResourceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeFlowTopUrlRequest : Tea.TeaModel {
    public var endTimestamp: String?

    public var instanceId: String?

    public var regionId: String?

    public var resource: String?

    public var resourceManagerResourceGroupId: String?

    public var startTimestamp: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTimestamp != nil {
            map["EndTimestamp"] = self.endTimestamp!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resource != nil {
            map["Resource"] = self.resource!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.startTimestamp != nil {
            map["StartTimestamp"] = self.startTimestamp!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTimestamp"] as? String {
            self.endTimestamp = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Resource"] as? String {
            self.resource = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["StartTimestamp"] as? String {
            self.startTimestamp = value
        }
    }
}

public class DescribeFlowTopUrlResponseBody : Tea.TeaModel {
    public class RuleHitsTopUrl : Tea.TeaModel {
        public var count: Int64?

        public var url: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.count != nil {
                map["Count"] = self.count!
            }
            if self.url != nil {
                map["Url"] = self.url!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Count"] as? Int64 {
                self.count = value
            }
            if let value = dict["Url"] as? String {
                self.url = value
            }
        }
    }
    public var requestId: String?

    public var ruleHitsTopUrl: [DescribeFlowTopUrlResponseBody.RuleHitsTopUrl]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.ruleHitsTopUrl != nil {
            var tmp : [Any] = []
            for k in self.ruleHitsTopUrl! {
                tmp.append(k.toMap())
            }
            map["RuleHitsTopUrl"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["RuleHitsTopUrl"] as? [Any?] {
            var tmp : [DescribeFlowTopUrlResponseBody.RuleHitsTopUrl] = []
            for v in value {
                if v != nil {
                    var model = DescribeFlowTopUrlResponseBody.RuleHitsTopUrl()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.ruleHitsTopUrl = tmp
        }
    }
}

public class DescribeFlowTopUrlResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeFlowTopUrlResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeFlowTopUrlResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeFreeUserAssetCountRequest : Tea.TeaModel {
    public var instanceId: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class DescribeFreeUserAssetCountResponseBody : Tea.TeaModel {
    public class Asset : Tea.TeaModel {
        public var assetActive: Int64?

        public var assetCount: Int64?

        public var assetOffline: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.assetActive != nil {
                map["AssetActive"] = self.assetActive!
            }
            if self.assetCount != nil {
                map["AssetCount"] = self.assetCount!
            }
            if self.assetOffline != nil {
                map["AssetOffline"] = self.assetOffline!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AssetActive"] as? Int64 {
                self.assetActive = value
            }
            if let value = dict["AssetCount"] as? Int64 {
                self.assetCount = value
            }
            if let value = dict["AssetOffline"] as? Int64 {
                self.assetOffline = value
            }
        }
    }
    public var asset: DescribeFreeUserAssetCountResponseBody.Asset?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.asset?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.asset != nil {
            map["Asset"] = self.asset?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Asset"] as? [String: Any?] {
            var model = DescribeFreeUserAssetCountResponseBody.Asset()
            model.fromMap(value)
            self.asset = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeFreeUserAssetCountResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeFreeUserAssetCountResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeFreeUserAssetCountResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeFreeUserEventCountRequest : Tea.TeaModel {
    public var instanceId: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class DescribeFreeUserEventCountResponseBody : Tea.TeaModel {
    public class Event : Tea.TeaModel {
        public var eventHigh: Int64?

        public var eventLow: Int64?

        public var eventMedium: Int64?

        public var eventTotal: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.eventHigh != nil {
                map["EventHigh"] = self.eventHigh!
            }
            if self.eventLow != nil {
                map["EventLow"] = self.eventLow!
            }
            if self.eventMedium != nil {
                map["EventMedium"] = self.eventMedium!
            }
            if self.eventTotal != nil {
                map["EventTotal"] = self.eventTotal!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["EventHigh"] as? Int64 {
                self.eventHigh = value
            }
            if let value = dict["EventLow"] as? Int64 {
                self.eventLow = value
            }
            if let value = dict["EventMedium"] as? Int64 {
                self.eventMedium = value
            }
            if let value = dict["EventTotal"] as? Int64 {
                self.eventTotal = value
            }
        }
    }
    public var event: DescribeFreeUserEventCountResponseBody.Event?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.event?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.event != nil {
            map["Event"] = self.event?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Event"] as? [String: Any?] {
            var model = DescribeFreeUserEventCountResponseBody.Event()
            model.fromMap(value)
            self.event = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeFreeUserEventCountResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeFreeUserEventCountResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeFreeUserEventCountResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeFreeUserEventTypesRequest : Tea.TeaModel {
    public var instanceId: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class DescribeFreeUserEventTypesResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var eventNum: String?

        public var eventType: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.eventNum != nil {
                map["EventNum"] = self.eventNum!
            }
            if self.eventType != nil {
                map["EventType"] = self.eventType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["EventNum"] as? String {
                self.eventNum = value
            }
            if let value = dict["EventType"] as? String {
                self.eventType = value
            }
        }
    }
    public var data: [DescribeFreeUserEventTypesResponseBody.Data]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [DescribeFreeUserEventTypesResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = DescribeFreeUserEventTypesResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeFreeUserEventTypesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeFreeUserEventTypesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeFreeUserEventTypesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeFreeUserEventsRequest : Tea.TeaModel {
    public var instanceId: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class DescribeFreeUserEventsResponseBody : Tea.TeaModel {
    public class Event : Tea.TeaModel {
        public var apiFormat: String?

        public var attackIP: String?

        public var attackTime: Int64?

        public var domain: String?

        public var eventLevel: String?

        public var eventTag: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.apiFormat != nil {
                map["ApiFormat"] = self.apiFormat!
            }
            if self.attackIP != nil {
                map["AttackIP"] = self.attackIP!
            }
            if self.attackTime != nil {
                map["AttackTime"] = self.attackTime!
            }
            if self.domain != nil {
                map["Domain"] = self.domain!
            }
            if self.eventLevel != nil {
                map["EventLevel"] = self.eventLevel!
            }
            if self.eventTag != nil {
                map["EventTag"] = self.eventTag!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ApiFormat"] as? String {
                self.apiFormat = value
            }
            if let value = dict["AttackIP"] as? String {
                self.attackIP = value
            }
            if let value = dict["AttackTime"] as? Int64 {
                self.attackTime = value
            }
            if let value = dict["Domain"] as? String {
                self.domain = value
            }
            if let value = dict["EventLevel"] as? String {
                self.eventLevel = value
            }
            if let value = dict["EventTag"] as? String {
                self.eventTag = value
            }
        }
    }
    public var event: [DescribeFreeUserEventsResponseBody.Event]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.event != nil {
            var tmp : [Any] = []
            for k in self.event! {
                tmp.append(k.toMap())
            }
            map["Event"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Event"] as? [Any?] {
            var tmp : [DescribeFreeUserEventsResponseBody.Event] = []
            for v in value {
                if v != nil {
                    var model = DescribeFreeUserEventsResponseBody.Event()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.event = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeFreeUserEventsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeFreeUserEventsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeFreeUserEventsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeHybridCloudBasicMonitorRequest : Tea.TeaModel {
    public var instanceId: String?

    public var mid: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.mid != nil {
            map["Mid"] = self.mid!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["Mid"] as? String {
            self.mid = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class DescribeHybridCloudBasicMonitorResponseBody : Tea.TeaModel {
    public class BasicMonitors : Tea.TeaModel {
        public var levle: String?

        public var monitorName: String?

        public var useRatio: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.levle != nil {
                map["Levle"] = self.levle!
            }
            if self.monitorName != nil {
                map["MonitorName"] = self.monitorName!
            }
            if self.useRatio != nil {
                map["UseRatio"] = self.useRatio!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Levle"] as? String {
                self.levle = value
            }
            if let value = dict["MonitorName"] as? String {
                self.monitorName = value
            }
            if let value = dict["UseRatio"] as? Int64 {
                self.useRatio = value
            }
        }
    }
    public var basicMonitors: [DescribeHybridCloudBasicMonitorResponseBody.BasicMonitors]?

    public var requestId: String?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.basicMonitors != nil {
            var tmp : [Any] = []
            for k in self.basicMonitors! {
                tmp.append(k.toMap())
            }
            map["BasicMonitors"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BasicMonitors"] as? [Any?] {
            var tmp : [DescribeHybridCloudBasicMonitorResponseBody.BasicMonitors] = []
            for v in value {
                if v != nil {
                    var model = DescribeHybridCloudBasicMonitorResponseBody.BasicMonitors()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.basicMonitors = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class DescribeHybridCloudBasicMonitorResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeHybridCloudBasicMonitorResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeHybridCloudBasicMonitorResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeHybridCloudClusterRuleRequest : Tea.TeaModel {
    public var clusterId: Int64?

    public var clusterRuleResourceId: String?

    public var instanceId: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public var ruleType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.clusterRuleResourceId != nil {
            map["ClusterRuleResourceId"] = self.clusterRuleResourceId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.ruleType != nil {
            map["RuleType"] = self.ruleType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClusterId"] as? Int64 {
            self.clusterId = value
        }
        if let value = dict["ClusterRuleResourceId"] as? String {
            self.clusterRuleResourceId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["RuleType"] as? String {
            self.ruleType = value
        }
    }
}

public class DescribeHybridCloudClusterRuleResponseBody : Tea.TeaModel {
    public class ClusterRule : Tea.TeaModel {
        public var clusterRuleResourceId: String?

        public var ruleConfig: String?

        public var ruleStatus: String?

        public var ruleType: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.clusterRuleResourceId != nil {
                map["ClusterRuleResourceId"] = self.clusterRuleResourceId!
            }
            if self.ruleConfig != nil {
                map["RuleConfig"] = self.ruleConfig!
            }
            if self.ruleStatus != nil {
                map["RuleStatus"] = self.ruleStatus!
            }
            if self.ruleType != nil {
                map["RuleType"] = self.ruleType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ClusterRuleResourceId"] as? String {
                self.clusterRuleResourceId = value
            }
            if let value = dict["RuleConfig"] as? String {
                self.ruleConfig = value
            }
            if let value = dict["RuleStatus"] as? String {
                self.ruleStatus = value
            }
            if let value = dict["RuleType"] as? String {
                self.ruleType = value
            }
        }
    }
    public var clusterRule: DescribeHybridCloudClusterRuleResponseBody.ClusterRule?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.clusterRule?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clusterRule != nil {
            map["ClusterRule"] = self.clusterRule?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClusterRule"] as? [String: Any?] {
            var model = DescribeHybridCloudClusterRuleResponseBody.ClusterRule()
            model.fromMap(value)
            self.clusterRule = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeHybridCloudClusterRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeHybridCloudClusterRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeHybridCloudClusterRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeHybridCloudClusterRulesRequest : Tea.TeaModel {
    public var clusterId: Int64?

    public var instanceId: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public var ruleContent: String?

    public var ruleMatchType: String?

    public var ruleType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.ruleContent != nil {
            map["RuleContent"] = self.ruleContent!
        }
        if self.ruleMatchType != nil {
            map["RuleMatchType"] = self.ruleMatchType!
        }
        if self.ruleType != nil {
            map["RuleType"] = self.ruleType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClusterId"] as? Int64 {
            self.clusterId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["RuleContent"] as? String {
            self.ruleContent = value
        }
        if let value = dict["RuleMatchType"] as? String {
            self.ruleMatchType = value
        }
        if let value = dict["RuleType"] as? String {
            self.ruleType = value
        }
    }
}

public class DescribeHybridCloudClusterRulesResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var clusterId: Int64?

        public var clusterRuleResourceId: String?

        public var ruleConfig: String?

        public var ruleType: String?

        public var status: String?

        public var version: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.clusterId != nil {
                map["ClusterId"] = self.clusterId!
            }
            if self.clusterRuleResourceId != nil {
                map["ClusterRuleResourceId"] = self.clusterRuleResourceId!
            }
            if self.ruleConfig != nil {
                map["RuleConfig"] = self.ruleConfig!
            }
            if self.ruleType != nil {
                map["RuleType"] = self.ruleType!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.version != nil {
                map["Version"] = self.version!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ClusterId"] as? Int64 {
                self.clusterId = value
            }
            if let value = dict["ClusterRuleResourceId"] as? String {
                self.clusterRuleResourceId = value
            }
            if let value = dict["RuleConfig"] as? String {
                self.ruleConfig = value
            }
            if let value = dict["RuleType"] as? String {
                self.ruleType = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["Version"] as? Int64 {
                self.version = value
            }
        }
    }
    public var data: [DescribeHybridCloudClusterRulesResponseBody.Data]?

    public var requestId: String?

    public var totalCount: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [DescribeHybridCloudClusterRulesResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = DescribeHybridCloudClusterRulesResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int64 {
            self.totalCount = value
        }
    }
}

public class DescribeHybridCloudClusterRulesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeHybridCloudClusterRulesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeHybridCloudClusterRulesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeHybridCloudClusterServersRequest : Tea.TeaModel {
    public var clusterId: Int64?

    public var groupName: String?

    public var groupType: String?

    public var hostName: String?

    public var instanceId: String?

    public var ip: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.groupName != nil {
            map["GroupName"] = self.groupName!
        }
        if self.groupType != nil {
            map["GroupType"] = self.groupType!
        }
        if self.hostName != nil {
            map["HostName"] = self.hostName!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.ip != nil {
            map["Ip"] = self.ip!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClusterId"] as? Int64 {
            self.clusterId = value
        }
        if let value = dict["GroupName"] as? String {
            self.groupName = value
        }
        if let value = dict["GroupType"] as? String {
            self.groupType = value
        }
        if let value = dict["HostName"] as? String {
            self.hostName = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["Ip"] as? String {
            self.ip = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class DescribeHybridCloudClusterServersResponseBody : Tea.TeaModel {
    public class ClusterServers : Tea.TeaModel {
        public var continents: String?

        public var continentsValue: Int32?

        public var cpu: Int32?

        public var createTimestamp: Int64?

        public var customName: String?

        public var groupId: Int64?

        public var groupName: String?

        public var groupType: String?

        public var hostName: String?

        public var ip: String?

        public var jobStatus: String?

        public var mac: String?

        public var memory: Int64?

        public var mid: String?

        public var operator_: String?

        public var operatorValue: Int32?

        public var regionCode: String?

        public var regionCodeValue: Int32?

        public var status: String?

        public var updateTimestamp: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.continents != nil {
                map["Continents"] = self.continents!
            }
            if self.continentsValue != nil {
                map["ContinentsValue"] = self.continentsValue!
            }
            if self.cpu != nil {
                map["Cpu"] = self.cpu!
            }
            if self.createTimestamp != nil {
                map["CreateTimestamp"] = self.createTimestamp!
            }
            if self.customName != nil {
                map["CustomName"] = self.customName!
            }
            if self.groupId != nil {
                map["GroupId"] = self.groupId!
            }
            if self.groupName != nil {
                map["GroupName"] = self.groupName!
            }
            if self.groupType != nil {
                map["GroupType"] = self.groupType!
            }
            if self.hostName != nil {
                map["HostName"] = self.hostName!
            }
            if self.ip != nil {
                map["Ip"] = self.ip!
            }
            if self.jobStatus != nil {
                map["JobStatus"] = self.jobStatus!
            }
            if self.mac != nil {
                map["Mac"] = self.mac!
            }
            if self.memory != nil {
                map["Memory"] = self.memory!
            }
            if self.mid != nil {
                map["Mid"] = self.mid!
            }
            if self.operator_ != nil {
                map["Operator"] = self.operator_!
            }
            if self.operatorValue != nil {
                map["OperatorValue"] = self.operatorValue!
            }
            if self.regionCode != nil {
                map["RegionCode"] = self.regionCode!
            }
            if self.regionCodeValue != nil {
                map["RegionCodeValue"] = self.regionCodeValue!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.updateTimestamp != nil {
                map["UpdateTimestamp"] = self.updateTimestamp!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Continents"] as? String {
                self.continents = value
            }
            if let value = dict["ContinentsValue"] as? Int32 {
                self.continentsValue = value
            }
            if let value = dict["Cpu"] as? Int32 {
                self.cpu = value
            }
            if let value = dict["CreateTimestamp"] as? Int64 {
                self.createTimestamp = value
            }
            if let value = dict["CustomName"] as? String {
                self.customName = value
            }
            if let value = dict["GroupId"] as? Int64 {
                self.groupId = value
            }
            if let value = dict["GroupName"] as? String {
                self.groupName = value
            }
            if let value = dict["GroupType"] as? String {
                self.groupType = value
            }
            if let value = dict["HostName"] as? String {
                self.hostName = value
            }
            if let value = dict["Ip"] as? String {
                self.ip = value
            }
            if let value = dict["JobStatus"] as? String {
                self.jobStatus = value
            }
            if let value = dict["Mac"] as? String {
                self.mac = value
            }
            if let value = dict["Memory"] as? Int64 {
                self.memory = value
            }
            if let value = dict["Mid"] as? String {
                self.mid = value
            }
            if let value = dict["Operator"] as? String {
                self.operator_ = value
            }
            if let value = dict["OperatorValue"] as? Int32 {
                self.operatorValue = value
            }
            if let value = dict["RegionCode"] as? String {
                self.regionCode = value
            }
            if let value = dict["RegionCodeValue"] as? Int32 {
                self.regionCodeValue = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["UpdateTimestamp"] as? Int64 {
                self.updateTimestamp = value
            }
        }
    }
    public var clusterServers: [DescribeHybridCloudClusterServersResponseBody.ClusterServers]?

    public var requestId: String?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clusterServers != nil {
            var tmp : [Any] = []
            for k in self.clusterServers! {
                tmp.append(k.toMap())
            }
            map["ClusterServers"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClusterServers"] as? [Any?] {
            var tmp : [DescribeHybridCloudClusterServersResponseBody.ClusterServers] = []
            for v in value {
                if v != nil {
                    var model = DescribeHybridCloudClusterServersResponseBody.ClusterServers()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.clusterServers = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class DescribeHybridCloudClusterServersResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeHybridCloudClusterServersResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeHybridCloudClusterServersResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeHybridCloudClustersRequest : Tea.TeaModel {
    public var instanceId: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class DescribeHybridCloudClustersResponseBody : Tea.TeaModel {
    public class ClusterInfos : Tea.TeaModel {
        public var accessMode: String?

        public var accessRegion: String?

        public var clusterName: String?

        public var clusterResourceId: String?

        public var httpPorts: String?

        public var httpsPorts: String?

        public var id: Int64?

        public var protectionServerCount: Int32?

        public var proxyStatus: String?

        public var proxyType: String?

        public var remark: String?

        public var ruleConfig: String?

        public var ruleStatus: String?

        public var ruleType: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accessMode != nil {
                map["AccessMode"] = self.accessMode!
            }
            if self.accessRegion != nil {
                map["AccessRegion"] = self.accessRegion!
            }
            if self.clusterName != nil {
                map["ClusterName"] = self.clusterName!
            }
            if self.clusterResourceId != nil {
                map["ClusterResourceId"] = self.clusterResourceId!
            }
            if self.httpPorts != nil {
                map["HttpPorts"] = self.httpPorts!
            }
            if self.httpsPorts != nil {
                map["HttpsPorts"] = self.httpsPorts!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.protectionServerCount != nil {
                map["ProtectionServerCount"] = self.protectionServerCount!
            }
            if self.proxyStatus != nil {
                map["ProxyStatus"] = self.proxyStatus!
            }
            if self.proxyType != nil {
                map["ProxyType"] = self.proxyType!
            }
            if self.remark != nil {
                map["Remark"] = self.remark!
            }
            if self.ruleConfig != nil {
                map["RuleConfig"] = self.ruleConfig!
            }
            if self.ruleStatus != nil {
                map["RuleStatus"] = self.ruleStatus!
            }
            if self.ruleType != nil {
                map["RuleType"] = self.ruleType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AccessMode"] as? String {
                self.accessMode = value
            }
            if let value = dict["AccessRegion"] as? String {
                self.accessRegion = value
            }
            if let value = dict["ClusterName"] as? String {
                self.clusterName = value
            }
            if let value = dict["ClusterResourceId"] as? String {
                self.clusterResourceId = value
            }
            if let value = dict["HttpPorts"] as? String {
                self.httpPorts = value
            }
            if let value = dict["HttpsPorts"] as? String {
                self.httpsPorts = value
            }
            if let value = dict["Id"] as? Int64 {
                self.id = value
            }
            if let value = dict["ProtectionServerCount"] as? Int32 {
                self.protectionServerCount = value
            }
            if let value = dict["ProxyStatus"] as? String {
                self.proxyStatus = value
            }
            if let value = dict["ProxyType"] as? String {
                self.proxyType = value
            }
            if let value = dict["Remark"] as? String {
                self.remark = value
            }
            if let value = dict["RuleConfig"] as? String {
                self.ruleConfig = value
            }
            if let value = dict["RuleStatus"] as? String {
                self.ruleStatus = value
            }
            if let value = dict["RuleType"] as? String {
                self.ruleType = value
            }
        }
    }
    public var clusterInfos: [DescribeHybridCloudClustersResponseBody.ClusterInfos]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clusterInfos != nil {
            var tmp : [Any] = []
            for k in self.clusterInfos! {
                tmp.append(k.toMap())
            }
            map["ClusterInfos"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClusterInfos"] as? [Any?] {
            var tmp : [DescribeHybridCloudClustersResponseBody.ClusterInfos] = []
            for v in value {
                if v != nil {
                    var model = DescribeHybridCloudClustersResponseBody.ClusterInfos()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.clusterInfos = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeHybridCloudClustersResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeHybridCloudClustersResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeHybridCloudClustersResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeHybridCloudGroupsRequest : Tea.TeaModel {
    public var clusterId: Int64?

    public var clusterProxyType: String?

    public var groupName: Int32?

    public var groupType: String?

    public var instanceId: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.clusterProxyType != nil {
            map["ClusterProxyType"] = self.clusterProxyType!
        }
        if self.groupName != nil {
            map["GroupName"] = self.groupName!
        }
        if self.groupType != nil {
            map["GroupType"] = self.groupType!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClusterId"] as? Int64 {
            self.clusterId = value
        }
        if let value = dict["ClusterProxyType"] as? String {
            self.clusterProxyType = value
        }
        if let value = dict["GroupName"] as? Int32 {
            self.groupName = value
        }
        if let value = dict["GroupType"] as? String {
            self.groupType = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class DescribeHybridCloudGroupsResponseBody : Tea.TeaModel {
    public class Groups : Tea.TeaModel {
        public var backSourceMark: String?

        public var continentsValue: Int32?

        public var groupId: Int32?

        public var groupName: String?

        public var groupType: String?

        public var loadBalanceIp: String?

        public var locationId: Int64?

        public var operatorValue: Int32?

        public var ports: String?

        public var regionCodeValue: Int32?

        public var remark: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.backSourceMark != nil {
                map["BackSourceMark"] = self.backSourceMark!
            }
            if self.continentsValue != nil {
                map["ContinentsValue"] = self.continentsValue!
            }
            if self.groupId != nil {
                map["GroupId"] = self.groupId!
            }
            if self.groupName != nil {
                map["GroupName"] = self.groupName!
            }
            if self.groupType != nil {
                map["GroupType"] = self.groupType!
            }
            if self.loadBalanceIp != nil {
                map["LoadBalanceIp"] = self.loadBalanceIp!
            }
            if self.locationId != nil {
                map["LocationId"] = self.locationId!
            }
            if self.operatorValue != nil {
                map["OperatorValue"] = self.operatorValue!
            }
            if self.ports != nil {
                map["Ports"] = self.ports!
            }
            if self.regionCodeValue != nil {
                map["RegionCodeValue"] = self.regionCodeValue!
            }
            if self.remark != nil {
                map["Remark"] = self.remark!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["BackSourceMark"] as? String {
                self.backSourceMark = value
            }
            if let value = dict["ContinentsValue"] as? Int32 {
                self.continentsValue = value
            }
            if let value = dict["GroupId"] as? Int32 {
                self.groupId = value
            }
            if let value = dict["GroupName"] as? String {
                self.groupName = value
            }
            if let value = dict["GroupType"] as? String {
                self.groupType = value
            }
            if let value = dict["LoadBalanceIp"] as? String {
                self.loadBalanceIp = value
            }
            if let value = dict["LocationId"] as? Int64 {
                self.locationId = value
            }
            if let value = dict["OperatorValue"] as? Int32 {
                self.operatorValue = value
            }
            if let value = dict["Ports"] as? String {
                self.ports = value
            }
            if let value = dict["RegionCodeValue"] as? Int32 {
                self.regionCodeValue = value
            }
            if let value = dict["Remark"] as? String {
                self.remark = value
            }
        }
    }
    public var groups: [DescribeHybridCloudGroupsResponseBody.Groups]?

    public var requestId: String?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.groups != nil {
            var tmp : [Any] = []
            for k in self.groups! {
                tmp.append(k.toMap())
            }
            map["Groups"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Groups"] as? [Any?] {
            var tmp : [DescribeHybridCloudGroupsResponseBody.Groups] = []
            for v in value {
                if v != nil {
                    var model = DescribeHybridCloudGroupsResponseBody.Groups()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.groups = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class DescribeHybridCloudGroupsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeHybridCloudGroupsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeHybridCloudGroupsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeHybridCloudProcessMonitorRequest : Tea.TeaModel {
    public var instanceId: String?

    public var mid: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.mid != nil {
            map["Mid"] = self.mid!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["Mid"] as? String {
            self.mid = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class DescribeHybridCloudProcessMonitorResponseBody : Tea.TeaModel {
    public class ProcessMonitors : Tea.TeaModel {
        public var levle: String?

        public var processName: String?

        public var processStatus: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.levle != nil {
                map["Levle"] = self.levle!
            }
            if self.processName != nil {
                map["ProcessName"] = self.processName!
            }
            if self.processStatus != nil {
                map["ProcessStatus"] = self.processStatus!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Levle"] as? String {
                self.levle = value
            }
            if let value = dict["ProcessName"] as? String {
                self.processName = value
            }
            if let value = dict["ProcessStatus"] as? Int64 {
                self.processStatus = value
            }
        }
    }
    public var processMonitors: [DescribeHybridCloudProcessMonitorResponseBody.ProcessMonitors]?

    public var requestId: String?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.processMonitors != nil {
            var tmp : [Any] = []
            for k in self.processMonitors! {
                tmp.append(k.toMap())
            }
            map["ProcessMonitors"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ProcessMonitors"] as? [Any?] {
            var tmp : [DescribeHybridCloudProcessMonitorResponseBody.ProcessMonitors] = []
            for v in value {
                if v != nil {
                    var model = DescribeHybridCloudProcessMonitorResponseBody.ProcessMonitors()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.processMonitors = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class DescribeHybridCloudProcessMonitorResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeHybridCloudProcessMonitorResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeHybridCloudProcessMonitorResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeHybridCloudProtectableCountRequest : Tea.TeaModel {
    public var instanceId: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class DescribeHybridCloudProtectableCountResponseBody : Tea.TeaModel {
    public var protectableCount: Int32?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.protectableCount != nil {
            map["ProtectableCount"] = self.protectableCount!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ProtectableCount"] as? Int32 {
            self.protectableCount = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeHybridCloudProtectableCountResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeHybridCloudProtectableCountResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeHybridCloudProtectableCountResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeHybridCloudResourceDetailRequest : Tea.TeaModel {
    public var backend: String?

    public var cnameEnabled: Bool?

    public var domain: String?

    public var instanceId: String?

    public var pageNumber: Int64?

    public var pageSize: Int64?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.backend != nil {
            map["Backend"] = self.backend!
        }
        if self.cnameEnabled != nil {
            map["CnameEnabled"] = self.cnameEnabled!
        }
        if self.domain != nil {
            map["Domain"] = self.domain!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Backend"] as? String {
            self.backend = value
        }
        if let value = dict["CnameEnabled"] as? Bool {
            self.cnameEnabled = value
        }
        if let value = dict["Domain"] as? String {
            self.domain = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["PageNumber"] as? Int64 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class DescribeHybridCloudResourceDetailResponseBody : Tea.TeaModel {
    public class Domain : Tea.TeaModel {
        public class Listen : Tea.TeaModel {
            public var certId: String?

            public var cipherSuite: Int32?

            public var customCiphers: [String]?

            public var enableTLSv3: Bool?

            public var exclusiveIp: Bool?

            public var focusHttps: Bool?

            public var http2Enabled: Bool?

            public var httpPorts: [Int64]?

            public var httpsPorts: [Int64]?

            public var IPv6Enabled: Bool?

            public var protectionResource: String?

            public var TLSVersion: String?

            public var xffHeaderMode: Int32?

            public var xffHeaders: [String]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.certId != nil {
                    map["CertId"] = self.certId!
                }
                if self.cipherSuite != nil {
                    map["CipherSuite"] = self.cipherSuite!
                }
                if self.customCiphers != nil {
                    map["CustomCiphers"] = self.customCiphers!
                }
                if self.enableTLSv3 != nil {
                    map["EnableTLSv3"] = self.enableTLSv3!
                }
                if self.exclusiveIp != nil {
                    map["ExclusiveIp"] = self.exclusiveIp!
                }
                if self.focusHttps != nil {
                    map["FocusHttps"] = self.focusHttps!
                }
                if self.http2Enabled != nil {
                    map["Http2Enabled"] = self.http2Enabled!
                }
                if self.httpPorts != nil {
                    map["HttpPorts"] = self.httpPorts!
                }
                if self.httpsPorts != nil {
                    map["HttpsPorts"] = self.httpsPorts!
                }
                if self.IPv6Enabled != nil {
                    map["IPv6Enabled"] = self.IPv6Enabled!
                }
                if self.protectionResource != nil {
                    map["ProtectionResource"] = self.protectionResource!
                }
                if self.TLSVersion != nil {
                    map["TLSVersion"] = self.TLSVersion!
                }
                if self.xffHeaderMode != nil {
                    map["XffHeaderMode"] = self.xffHeaderMode!
                }
                if self.xffHeaders != nil {
                    map["XffHeaders"] = self.xffHeaders!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CertId"] as? String {
                    self.certId = value
                }
                if let value = dict["CipherSuite"] as? Int32 {
                    self.cipherSuite = value
                }
                if let value = dict["CustomCiphers"] as? [String] {
                    self.customCiphers = value
                }
                if let value = dict["EnableTLSv3"] as? Bool {
                    self.enableTLSv3 = value
                }
                if let value = dict["ExclusiveIp"] as? Bool {
                    self.exclusiveIp = value
                }
                if let value = dict["FocusHttps"] as? Bool {
                    self.focusHttps = value
                }
                if let value = dict["Http2Enabled"] as? Bool {
                    self.http2Enabled = value
                }
                if let value = dict["HttpPorts"] as? [Int64] {
                    self.httpPorts = value
                }
                if let value = dict["HttpsPorts"] as? [Int64] {
                    self.httpsPorts = value
                }
                if let value = dict["IPv6Enabled"] as? Bool {
                    self.IPv6Enabled = value
                }
                if let value = dict["ProtectionResource"] as? String {
                    self.protectionResource = value
                }
                if let value = dict["TLSVersion"] as? String {
                    self.TLSVersion = value
                }
                if let value = dict["XffHeaderMode"] as? Int32 {
                    self.xffHeaderMode = value
                }
                if let value = dict["XffHeaders"] as? [String] {
                    self.xffHeaders = value
                }
            }
        }
        public class Redirect : Tea.TeaModel {
            public class RequestHeaders : Tea.TeaModel {
                public var key: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.key != nil {
                        map["Key"] = self.key!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Key"] as? String {
                        self.key = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public var backends: [String]?

            public var cnameEnabled: Bool?

            public var connectTimeout: Int64?

            public var focusHttpBackend: Bool?

            public var keepalive: Bool?

            public var keepaliveRequests: Int64?

            public var keepaliveTimeout: Int64?

            public var loadbalance: String?

            public var readTimeout: Int64?

            public var requestHeaders: [DescribeHybridCloudResourceDetailResponseBody.Domain.Redirect.RequestHeaders]?

            public var retry: Bool?

            public var routingRules: String?

            public var sniEnabled: Bool?

            public var sniHost: String?

            public var writeTimeout: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.backends != nil {
                    map["Backends"] = self.backends!
                }
                if self.cnameEnabled != nil {
                    map["CnameEnabled"] = self.cnameEnabled!
                }
                if self.connectTimeout != nil {
                    map["ConnectTimeout"] = self.connectTimeout!
                }
                if self.focusHttpBackend != nil {
                    map["FocusHttpBackend"] = self.focusHttpBackend!
                }
                if self.keepalive != nil {
                    map["Keepalive"] = self.keepalive!
                }
                if self.keepaliveRequests != nil {
                    map["KeepaliveRequests"] = self.keepaliveRequests!
                }
                if self.keepaliveTimeout != nil {
                    map["KeepaliveTimeout"] = self.keepaliveTimeout!
                }
                if self.loadbalance != nil {
                    map["Loadbalance"] = self.loadbalance!
                }
                if self.readTimeout != nil {
                    map["ReadTimeout"] = self.readTimeout!
                }
                if self.requestHeaders != nil {
                    var tmp : [Any] = []
                    for k in self.requestHeaders! {
                        tmp.append(k.toMap())
                    }
                    map["RequestHeaders"] = tmp
                }
                if self.retry != nil {
                    map["Retry"] = self.retry!
                }
                if self.routingRules != nil {
                    map["RoutingRules"] = self.routingRules!
                }
                if self.sniEnabled != nil {
                    map["SniEnabled"] = self.sniEnabled!
                }
                if self.sniHost != nil {
                    map["SniHost"] = self.sniHost!
                }
                if self.writeTimeout != nil {
                    map["WriteTimeout"] = self.writeTimeout!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Backends"] as? [String] {
                    self.backends = value
                }
                if let value = dict["CnameEnabled"] as? Bool {
                    self.cnameEnabled = value
                }
                if let value = dict["ConnectTimeout"] as? Int64 {
                    self.connectTimeout = value
                }
                if let value = dict["FocusHttpBackend"] as? Bool {
                    self.focusHttpBackend = value
                }
                if let value = dict["Keepalive"] as? Bool {
                    self.keepalive = value
                }
                if let value = dict["KeepaliveRequests"] as? Int64 {
                    self.keepaliveRequests = value
                }
                if let value = dict["KeepaliveTimeout"] as? Int64 {
                    self.keepaliveTimeout = value
                }
                if let value = dict["Loadbalance"] as? String {
                    self.loadbalance = value
                }
                if let value = dict["ReadTimeout"] as? Int64 {
                    self.readTimeout = value
                }
                if let value = dict["RequestHeaders"] as? [Any?] {
                    var tmp : [DescribeHybridCloudResourceDetailResponseBody.Domain.Redirect.RequestHeaders] = []
                    for v in value {
                        if v != nil {
                            var model = DescribeHybridCloudResourceDetailResponseBody.Domain.Redirect.RequestHeaders()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.requestHeaders = tmp
                }
                if let value = dict["Retry"] as? Bool {
                    self.retry = value
                }
                if let value = dict["RoutingRules"] as? String {
                    self.routingRules = value
                }
                if let value = dict["SniEnabled"] as? Bool {
                    self.sniEnabled = value
                }
                if let value = dict["SniHost"] as? String {
                    self.sniHost = value
                }
                if let value = dict["WriteTimeout"] as? Int64 {
                    self.writeTimeout = value
                }
            }
        }
        public var cname: String?

        public var domain: String?

        public var id: Int64?

        public var listen: DescribeHybridCloudResourceDetailResponseBody.Domain.Listen?

        public var redirect: DescribeHybridCloudResourceDetailResponseBody.Domain.Redirect?

        public var resourceManagerResourceGroupId: String?

        public var status: Int32?

        public var uid: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.listen?.validate()
            try self.redirect?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.cname != nil {
                map["Cname"] = self.cname!
            }
            if self.domain != nil {
                map["Domain"] = self.domain!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.listen != nil {
                map["Listen"] = self.listen?.toMap()
            }
            if self.redirect != nil {
                map["Redirect"] = self.redirect?.toMap()
            }
            if self.resourceManagerResourceGroupId != nil {
                map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.uid != nil {
                map["Uid"] = self.uid!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Cname"] as? String {
                self.cname = value
            }
            if let value = dict["Domain"] as? String {
                self.domain = value
            }
            if let value = dict["Id"] as? Int64 {
                self.id = value
            }
            if let value = dict["Listen"] as? [String: Any?] {
                var model = DescribeHybridCloudResourceDetailResponseBody.Domain.Listen()
                model.fromMap(value)
                self.listen = model
            }
            if let value = dict["Redirect"] as? [String: Any?] {
                var model = DescribeHybridCloudResourceDetailResponseBody.Domain.Redirect()
                model.fromMap(value)
                self.redirect = model
            }
            if let value = dict["ResourceManagerResourceGroupId"] as? String {
                self.resourceManagerResourceGroupId = value
            }
            if let value = dict["Status"] as? Int32 {
                self.status = value
            }
            if let value = dict["Uid"] as? String {
                self.uid = value
            }
        }
    }
    public var domain: DescribeHybridCloudResourceDetailResponseBody.Domain?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.domain?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.domain != nil {
            map["Domain"] = self.domain?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Domain"] as? [String: Any?] {
            var model = DescribeHybridCloudResourceDetailResponseBody.Domain()
            model.fromMap(value)
            self.domain = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeHybridCloudResourceDetailResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeHybridCloudResourceDetailResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeHybridCloudResourceDetailResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeHybridCloudResourcesRequest : Tea.TeaModel {
    public var backend: String?

    public var cnameEnabled: Bool?

    public var domain: String?

    public var instanceId: String?

    public var pageNumber: Int64?

    public var pageSize: Int64?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.backend != nil {
            map["Backend"] = self.backend!
        }
        if self.cnameEnabled != nil {
            map["CnameEnabled"] = self.cnameEnabled!
        }
        if self.domain != nil {
            map["Domain"] = self.domain!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Backend"] as? String {
            self.backend = value
        }
        if let value = dict["CnameEnabled"] as? Bool {
            self.cnameEnabled = value
        }
        if let value = dict["Domain"] as? String {
            self.domain = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["PageNumber"] as? Int64 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class DescribeHybridCloudResourcesResponseBody : Tea.TeaModel {
    public class Domains : Tea.TeaModel {
        public class Listen : Tea.TeaModel {
            public var certId: String?

            public var cipherSuite: Int32?

            public var customCiphers: [String]?

            public var enableTLSv3: Bool?

            public var exclusiveIp: Bool?

            public var focusHttps: Bool?

            public var http2Enabled: Bool?

            public var httpPorts: [Int64]?

            public var httpsPorts: [Int64]?

            public var IPv6Enabled: Bool?

            public var protectionResource: String?

            public var TLSVersion: String?

            public var xffHeaderMode: Int32?

            public var xffHeaders: [String]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.certId != nil {
                    map["CertId"] = self.certId!
                }
                if self.cipherSuite != nil {
                    map["CipherSuite"] = self.cipherSuite!
                }
                if self.customCiphers != nil {
                    map["CustomCiphers"] = self.customCiphers!
                }
                if self.enableTLSv3 != nil {
                    map["EnableTLSv3"] = self.enableTLSv3!
                }
                if self.exclusiveIp != nil {
                    map["ExclusiveIp"] = self.exclusiveIp!
                }
                if self.focusHttps != nil {
                    map["FocusHttps"] = self.focusHttps!
                }
                if self.http2Enabled != nil {
                    map["Http2Enabled"] = self.http2Enabled!
                }
                if self.httpPorts != nil {
                    map["HttpPorts"] = self.httpPorts!
                }
                if self.httpsPorts != nil {
                    map["HttpsPorts"] = self.httpsPorts!
                }
                if self.IPv6Enabled != nil {
                    map["IPv6Enabled"] = self.IPv6Enabled!
                }
                if self.protectionResource != nil {
                    map["ProtectionResource"] = self.protectionResource!
                }
                if self.TLSVersion != nil {
                    map["TLSVersion"] = self.TLSVersion!
                }
                if self.xffHeaderMode != nil {
                    map["XffHeaderMode"] = self.xffHeaderMode!
                }
                if self.xffHeaders != nil {
                    map["XffHeaders"] = self.xffHeaders!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CertId"] as? String {
                    self.certId = value
                }
                if let value = dict["CipherSuite"] as? Int32 {
                    self.cipherSuite = value
                }
                if let value = dict["CustomCiphers"] as? [String] {
                    self.customCiphers = value
                }
                if let value = dict["EnableTLSv3"] as? Bool {
                    self.enableTLSv3 = value
                }
                if let value = dict["ExclusiveIp"] as? Bool {
                    self.exclusiveIp = value
                }
                if let value = dict["FocusHttps"] as? Bool {
                    self.focusHttps = value
                }
                if let value = dict["Http2Enabled"] as? Bool {
                    self.http2Enabled = value
                }
                if let value = dict["HttpPorts"] as? [Int64] {
                    self.httpPorts = value
                }
                if let value = dict["HttpsPorts"] as? [Int64] {
                    self.httpsPorts = value
                }
                if let value = dict["IPv6Enabled"] as? Bool {
                    self.IPv6Enabled = value
                }
                if let value = dict["ProtectionResource"] as? String {
                    self.protectionResource = value
                }
                if let value = dict["TLSVersion"] as? String {
                    self.TLSVersion = value
                }
                if let value = dict["XffHeaderMode"] as? Int32 {
                    self.xffHeaderMode = value
                }
                if let value = dict["XffHeaders"] as? [String] {
                    self.xffHeaders = value
                }
            }
        }
        public class Redirect : Tea.TeaModel {
            public class RequestHeaders : Tea.TeaModel {
                public var key: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.key != nil {
                        map["Key"] = self.key!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Key"] as? String {
                        self.key = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public var backends: [String]?

            public var cnameEnabled: Bool?

            public var connectTimeout: Int64?

            public var focusHttpBackend: Bool?

            public var keepalive: Bool?

            public var keepaliveRequests: Int64?

            public var keepaliveTimeout: Int64?

            public var loadbalance: String?

            public var readTimeout: Int64?

            public var requestHeaders: [DescribeHybridCloudResourcesResponseBody.Domains.Redirect.RequestHeaders]?

            public var retry: Bool?

            public var routingRules: String?

            public var sniEnabled: Bool?

            public var sniHost: String?

            public var writeTimeout: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.backends != nil {
                    map["Backends"] = self.backends!
                }
                if self.cnameEnabled != nil {
                    map["CnameEnabled"] = self.cnameEnabled!
                }
                if self.connectTimeout != nil {
                    map["ConnectTimeout"] = self.connectTimeout!
                }
                if self.focusHttpBackend != nil {
                    map["FocusHttpBackend"] = self.focusHttpBackend!
                }
                if self.keepalive != nil {
                    map["Keepalive"] = self.keepalive!
                }
                if self.keepaliveRequests != nil {
                    map["KeepaliveRequests"] = self.keepaliveRequests!
                }
                if self.keepaliveTimeout != nil {
                    map["KeepaliveTimeout"] = self.keepaliveTimeout!
                }
                if self.loadbalance != nil {
                    map["Loadbalance"] = self.loadbalance!
                }
                if self.readTimeout != nil {
                    map["ReadTimeout"] = self.readTimeout!
                }
                if self.requestHeaders != nil {
                    var tmp : [Any] = []
                    for k in self.requestHeaders! {
                        tmp.append(k.toMap())
                    }
                    map["RequestHeaders"] = tmp
                }
                if self.retry != nil {
                    map["Retry"] = self.retry!
                }
                if self.routingRules != nil {
                    map["RoutingRules"] = self.routingRules!
                }
                if self.sniEnabled != nil {
                    map["SniEnabled"] = self.sniEnabled!
                }
                if self.sniHost != nil {
                    map["SniHost"] = self.sniHost!
                }
                if self.writeTimeout != nil {
                    map["WriteTimeout"] = self.writeTimeout!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Backends"] as? [String] {
                    self.backends = value
                }
                if let value = dict["CnameEnabled"] as? Bool {
                    self.cnameEnabled = value
                }
                if let value = dict["ConnectTimeout"] as? Int64 {
                    self.connectTimeout = value
                }
                if let value = dict["FocusHttpBackend"] as? Bool {
                    self.focusHttpBackend = value
                }
                if let value = dict["Keepalive"] as? Bool {
                    self.keepalive = value
                }
                if let value = dict["KeepaliveRequests"] as? Int64 {
                    self.keepaliveRequests = value
                }
                if let value = dict["KeepaliveTimeout"] as? Int64 {
                    self.keepaliveTimeout = value
                }
                if let value = dict["Loadbalance"] as? String {
                    self.loadbalance = value
                }
                if let value = dict["ReadTimeout"] as? Int64 {
                    self.readTimeout = value
                }
                if let value = dict["RequestHeaders"] as? [Any?] {
                    var tmp : [DescribeHybridCloudResourcesResponseBody.Domains.Redirect.RequestHeaders] = []
                    for v in value {
                        if v != nil {
                            var model = DescribeHybridCloudResourcesResponseBody.Domains.Redirect.RequestHeaders()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.requestHeaders = tmp
                }
                if let value = dict["Retry"] as? Bool {
                    self.retry = value
                }
                if let value = dict["RoutingRules"] as? String {
                    self.routingRules = value
                }
                if let value = dict["SniEnabled"] as? Bool {
                    self.sniEnabled = value
                }
                if let value = dict["SniHost"] as? String {
                    self.sniHost = value
                }
                if let value = dict["WriteTimeout"] as? Int64 {
                    self.writeTimeout = value
                }
            }
        }
        public var cname: String?

        public var domain: String?

        public var id: Int64?

        public var listen: DescribeHybridCloudResourcesResponseBody.Domains.Listen?

        public var redirect: DescribeHybridCloudResourcesResponseBody.Domains.Redirect?

        public var resourceManagerResourceGroupId: String?

        public var status: Int32?

        public var uid: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.listen?.validate()
            try self.redirect?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.cname != nil {
                map["Cname"] = self.cname!
            }
            if self.domain != nil {
                map["Domain"] = self.domain!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.listen != nil {
                map["Listen"] = self.listen?.toMap()
            }
            if self.redirect != nil {
                map["Redirect"] = self.redirect?.toMap()
            }
            if self.resourceManagerResourceGroupId != nil {
                map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.uid != nil {
                map["Uid"] = self.uid!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Cname"] as? String {
                self.cname = value
            }
            if let value = dict["Domain"] as? String {
                self.domain = value
            }
            if let value = dict["Id"] as? Int64 {
                self.id = value
            }
            if let value = dict["Listen"] as? [String: Any?] {
                var model = DescribeHybridCloudResourcesResponseBody.Domains.Listen()
                model.fromMap(value)
                self.listen = model
            }
            if let value = dict["Redirect"] as? [String: Any?] {
                var model = DescribeHybridCloudResourcesResponseBody.Domains.Redirect()
                model.fromMap(value)
                self.redirect = model
            }
            if let value = dict["ResourceManagerResourceGroupId"] as? String {
                self.resourceManagerResourceGroupId = value
            }
            if let value = dict["Status"] as? Int32 {
                self.status = value
            }
            if let value = dict["Uid"] as? String {
                self.uid = value
            }
        }
    }
    public var domains: [DescribeHybridCloudResourcesResponseBody.Domains]?

    public var requestId: String?

    public var totalCount: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.domains != nil {
            var tmp : [Any] = []
            for k in self.domains! {
                tmp.append(k.toMap())
            }
            map["Domains"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Domains"] as? [Any?] {
            var tmp : [DescribeHybridCloudResourcesResponseBody.Domains] = []
            for v in value {
                if v != nil {
                    var model = DescribeHybridCloudResourcesResponseBody.Domains()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.domains = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int64 {
            self.totalCount = value
        }
    }
}

public class DescribeHybridCloudResourcesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeHybridCloudResourcesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeHybridCloudResourcesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeHybridCloudSdkServersRequest : Tea.TeaModel {
    public var clusterName: String?

    public var hostName: String?

    public var instanceId: String?

    public var ip: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clusterName != nil {
            map["ClusterName"] = self.clusterName!
        }
        if self.hostName != nil {
            map["HostName"] = self.hostName!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.ip != nil {
            map["Ip"] = self.ip!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClusterName"] as? String {
            self.clusterName = value
        }
        if let value = dict["HostName"] as? String {
            self.hostName = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["Ip"] as? String {
            self.ip = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class DescribeHybridCloudSdkServersResponseBody : Tea.TeaModel {
    public class SdkServers : Tea.TeaModel {
        public var clusterName: String?

        public var createTime: Int64?

        public var hostName: String?

        public var ip: String?

        public var mid: String?

        public var protectionGroupAddress: String?

        public var pullinStatus: String?

        public var resourceId: String?

        public var status: String?

        public var updateTime: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.clusterName != nil {
                map["ClusterName"] = self.clusterName!
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.hostName != nil {
                map["HostName"] = self.hostName!
            }
            if self.ip != nil {
                map["Ip"] = self.ip!
            }
            if self.mid != nil {
                map["Mid"] = self.mid!
            }
            if self.protectionGroupAddress != nil {
                map["ProtectionGroupAddress"] = self.protectionGroupAddress!
            }
            if self.pullinStatus != nil {
                map["PullinStatus"] = self.pullinStatus!
            }
            if self.resourceId != nil {
                map["ResourceId"] = self.resourceId!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.updateTime != nil {
                map["UpdateTime"] = self.updateTime!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ClusterName"] as? String {
                self.clusterName = value
            }
            if let value = dict["CreateTime"] as? Int64 {
                self.createTime = value
            }
            if let value = dict["HostName"] as? String {
                self.hostName = value
            }
            if let value = dict["Ip"] as? String {
                self.ip = value
            }
            if let value = dict["Mid"] as? String {
                self.mid = value
            }
            if let value = dict["ProtectionGroupAddress"] as? String {
                self.protectionGroupAddress = value
            }
            if let value = dict["PullinStatus"] as? String {
                self.pullinStatus = value
            }
            if let value = dict["ResourceId"] as? String {
                self.resourceId = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["UpdateTime"] as? Int64 {
                self.updateTime = value
            }
        }
    }
    public var requestId: String?

    public var sdkServers: [DescribeHybridCloudSdkServersResponseBody.SdkServers]?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.sdkServers != nil {
            var tmp : [Any] = []
            for k in self.sdkServers! {
                tmp.append(k.toMap())
            }
            map["SdkServers"] = tmp
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SdkServers"] as? [Any?] {
            var tmp : [DescribeHybridCloudSdkServersResponseBody.SdkServers] = []
            for v in value {
                if v != nil {
                    var model = DescribeHybridCloudSdkServersResponseBody.SdkServers()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.sdkServers = tmp
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class DescribeHybridCloudSdkServersResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeHybridCloudSdkServersResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeHybridCloudSdkServersResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeHybridCloudServerRegionsRequest : Tea.TeaModel {
    public var instanceId: String?

    public var regionCode: String?

    public var regionId: String?

    public var regionType: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionCode != nil {
            map["RegionCode"] = self.regionCode!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.regionType != nil {
            map["RegionType"] = self.regionType!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionCode"] as? String {
            self.regionCode = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["RegionType"] as? String {
            self.regionType = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class DescribeHybridCloudServerRegionsResponseBody : Tea.TeaModel {
    public class Regions : Tea.TeaModel {
        public var code: Int32?

        public var name: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.code != nil {
                map["Code"] = self.code!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Code"] as? Int32 {
                self.code = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
        }
    }
    public var regions: [DescribeHybridCloudServerRegionsResponseBody.Regions]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.regions != nil {
            var tmp : [Any] = []
            for k in self.regions! {
                tmp.append(k.toMap())
            }
            map["Regions"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Regions"] as? [Any?] {
            var tmp : [DescribeHybridCloudServerRegionsResponseBody.Regions] = []
            for v in value {
                if v != nil {
                    var model = DescribeHybridCloudServerRegionsResponseBody.Regions()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.regions = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeHybridCloudServerRegionsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeHybridCloudServerRegionsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeHybridCloudServerRegionsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeHybridCloudSupportRegionsRequest : Tea.TeaModel {
    public var instanceId: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class DescribeHybridCloudSupportRegionsResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var supportRegions: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.supportRegions != nil {
            map["SupportRegions"] = self.supportRegions!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SupportRegions"] as? [String] {
            self.supportRegions = value
        }
    }
}

public class DescribeHybridCloudSupportRegionsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeHybridCloudSupportRegionsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeHybridCloudSupportRegionsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeHybridCloudUnassignedMachinesRequest : Tea.TeaModel {
    public var clusterId: Int32?

    public var hostName: String?

    public var instanceId: String?

    public var ip: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.hostName != nil {
            map["HostName"] = self.hostName!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.ip != nil {
            map["Ip"] = self.ip!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClusterId"] as? Int32 {
            self.clusterId = value
        }
        if let value = dict["HostName"] as? String {
            self.hostName = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["Ip"] as? String {
            self.ip = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class DescribeHybridCloudUnassignedMachinesResponseBody : Tea.TeaModel {
    public class UnassignedMachines : Tea.TeaModel {
        public var cpu: Int64?

        public var customName: String?

        public var hostName: String?

        public var ip: String?

        public var mac: String?

        public var memory: Int64?

        public var mid: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.cpu != nil {
                map["Cpu"] = self.cpu!
            }
            if self.customName != nil {
                map["CustomName"] = self.customName!
            }
            if self.hostName != nil {
                map["HostName"] = self.hostName!
            }
            if self.ip != nil {
                map["Ip"] = self.ip!
            }
            if self.mac != nil {
                map["Mac"] = self.mac!
            }
            if self.memory != nil {
                map["Memory"] = self.memory!
            }
            if self.mid != nil {
                map["Mid"] = self.mid!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Cpu"] as? Int64 {
                self.cpu = value
            }
            if let value = dict["CustomName"] as? String {
                self.customName = value
            }
            if let value = dict["HostName"] as? String {
                self.hostName = value
            }
            if let value = dict["Ip"] as? String {
                self.ip = value
            }
            if let value = dict["Mac"] as? String {
                self.mac = value
            }
            if let value = dict["Memory"] as? Int64 {
                self.memory = value
            }
            if let value = dict["Mid"] as? String {
                self.mid = value
            }
        }
    }
    public var requestId: String?

    public var totalCount: Int64?

    public var unassignedMachines: [DescribeHybridCloudUnassignedMachinesResponseBody.UnassignedMachines]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        if self.unassignedMachines != nil {
            var tmp : [Any] = []
            for k in self.unassignedMachines! {
                tmp.append(k.toMap())
            }
            map["UnassignedMachines"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int64 {
            self.totalCount = value
        }
        if let value = dict["UnassignedMachines"] as? [Any?] {
            var tmp : [DescribeHybridCloudUnassignedMachinesResponseBody.UnassignedMachines] = []
            for v in value {
                if v != nil {
                    var model = DescribeHybridCloudUnassignedMachinesResponseBody.UnassignedMachines()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.unassignedMachines = tmp
        }
    }
}

public class DescribeHybridCloudUnassignedMachinesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeHybridCloudUnassignedMachinesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeHybridCloudUnassignedMachinesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeHybridCloudUnsupportPortsRequest : Tea.TeaModel {
    public var instanceId: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class DescribeHybridCloudUnsupportPortsResponseBody : Tea.TeaModel {
    public var httpPorts: String?

    public var httpsPorts: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.httpPorts != nil {
            map["HttpPorts"] = self.httpPorts!
        }
        if self.httpsPorts != nil {
            map["HttpsPorts"] = self.httpsPorts!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["HttpPorts"] as? String {
            self.httpPorts = value
        }
        if let value = dict["HttpsPorts"] as? String {
            self.httpsPorts = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeHybridCloudUnsupportPortsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeHybridCloudUnsupportPortsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeHybridCloudUnsupportPortsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeHybridCloudUserRequest : Tea.TeaModel {
    public var instanceId: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class DescribeHybridCloudUserResponseBody : Tea.TeaModel {
    public class UserInfo : Tea.TeaModel {
        public var httpPorts: String?

        public var httpsPorts: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.httpPorts != nil {
                map["HttpPorts"] = self.httpPorts!
            }
            if self.httpsPorts != nil {
                map["HttpsPorts"] = self.httpsPorts!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["HttpPorts"] as? String {
                self.httpPorts = value
            }
            if let value = dict["HttpsPorts"] as? String {
                self.httpsPorts = value
            }
        }
    }
    public var requestId: String?

    public var userInfo: DescribeHybridCloudUserResponseBody.UserInfo?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.userInfo?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.userInfo != nil {
            map["UserInfo"] = self.userInfo?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["UserInfo"] as? [String: Any?] {
            var model = DescribeHybridCloudUserResponseBody.UserInfo()
            model.fromMap(value)
            self.userInfo = model
        }
    }
}

public class DescribeHybridCloudUserResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeHybridCloudUserResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeHybridCloudUserResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeInstanceRequest : Tea.TeaModel {
    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class DescribeInstanceResponseBody : Tea.TeaModel {
    public class Details : Tea.TeaModel {
        public var aclRuleMaxIpCount: Int64?

        public var antiScan: Bool?

        public var antiScanTemplateMaxCount: Int64?

        public var backendMaxCount: Int64?

        public var baseWafGroup: Bool?

        public var baseWafGroupRuleInTemplateMaxCount: Int64?

        public var baseWafGroupRuleTemplateMaxCount: Int64?

        public var bot: Bool?

        public var botApp: String?

        public var botTemplateMaxCount: Int64?

        public var botWeb: String?

        public var cnameResourceMaxCount: Int64?

        public var customResponse: Bool?

        public var customResponseRuleInTemplateMaxCount: Int64?

        public var customResponseTemplateMaxCount: Int64?

        public var customRule: Bool?

        public var customRuleAction: String?

        public var customRuleCondition: String?

        public var customRuleInTemplateMaxCount: Int64?

        public var customRuleRatelimitor: String?

        public var customRuleTemplateMaxCount: Int64?

        public var defenseGroupMaxCount: Int64?

        public var defenseObjectInGroupMaxCount: Int64?

        public var defenseObjectInTemplateMaxCount: Int64?

        public var defenseObjectMaxCount: Int64?

        public var dlp: Bool?

        public var dlpRuleInTemplateMaxCount: Int64?

        public var dlpTemplateMaxCount: Int64?

        public var elasticQps: Int32?

        public var exclusiveIp: Bool?

        public var extendQps: Int32?

        public var freeQps: Int32?

        public var gslb: Bool?

        public var httpPorts: String?

        public var httpsPorts: String?

        public var ipBlacklist: Bool?

        public var ipBlacklistIpInRuleMaxCount: Int64?

        public var ipBlacklistRuleInTemplateMaxCount: Int64?

        public var ipBlacklistTemplateMaxCount: Int64?

        public var ipv6: Bool?

        public var logService: Bool?

        public var majorProtection: Bool?

        public var majorProtectionTemplateMaxCount: Int64?

        public var qpsBillingCap: Int32?

        public var tamperproof: Bool?

        public var tamperproofRuleInTemplateMaxCount: Int64?

        public var tamperproofTemplateMaxCount: Int64?

        public var vastIpBlacklistInFileMaxCount: Int64?

        public var vastIpBlacklistInOperationMaxCount: Int64?

        public var vastIpBlacklistMaxCount: Int64?

        public var whitelist: Bool?

        public var whitelistLogical: String?

        public var whitelistRuleCondition: String?

        public var whitelistRuleInTemplateMaxCount: Int64?

        public var whitelistTemplateMaxCount: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.aclRuleMaxIpCount != nil {
                map["AclRuleMaxIpCount"] = self.aclRuleMaxIpCount!
            }
            if self.antiScan != nil {
                map["AntiScan"] = self.antiScan!
            }
            if self.antiScanTemplateMaxCount != nil {
                map["AntiScanTemplateMaxCount"] = self.antiScanTemplateMaxCount!
            }
            if self.backendMaxCount != nil {
                map["BackendMaxCount"] = self.backendMaxCount!
            }
            if self.baseWafGroup != nil {
                map["BaseWafGroup"] = self.baseWafGroup!
            }
            if self.baseWafGroupRuleInTemplateMaxCount != nil {
                map["BaseWafGroupRuleInTemplateMaxCount"] = self.baseWafGroupRuleInTemplateMaxCount!
            }
            if self.baseWafGroupRuleTemplateMaxCount != nil {
                map["BaseWafGroupRuleTemplateMaxCount"] = self.baseWafGroupRuleTemplateMaxCount!
            }
            if self.bot != nil {
                map["Bot"] = self.bot!
            }
            if self.botApp != nil {
                map["BotApp"] = self.botApp!
            }
            if self.botTemplateMaxCount != nil {
                map["BotTemplateMaxCount"] = self.botTemplateMaxCount!
            }
            if self.botWeb != nil {
                map["BotWeb"] = self.botWeb!
            }
            if self.cnameResourceMaxCount != nil {
                map["CnameResourceMaxCount"] = self.cnameResourceMaxCount!
            }
            if self.customResponse != nil {
                map["CustomResponse"] = self.customResponse!
            }
            if self.customResponseRuleInTemplateMaxCount != nil {
                map["CustomResponseRuleInTemplateMaxCount"] = self.customResponseRuleInTemplateMaxCount!
            }
            if self.customResponseTemplateMaxCount != nil {
                map["CustomResponseTemplateMaxCount"] = self.customResponseTemplateMaxCount!
            }
            if self.customRule != nil {
                map["CustomRule"] = self.customRule!
            }
            if self.customRuleAction != nil {
                map["CustomRuleAction"] = self.customRuleAction!
            }
            if self.customRuleCondition != nil {
                map["CustomRuleCondition"] = self.customRuleCondition!
            }
            if self.customRuleInTemplateMaxCount != nil {
                map["CustomRuleInTemplateMaxCount"] = self.customRuleInTemplateMaxCount!
            }
            if self.customRuleRatelimitor != nil {
                map["CustomRuleRatelimitor"] = self.customRuleRatelimitor!
            }
            if self.customRuleTemplateMaxCount != nil {
                map["CustomRuleTemplateMaxCount"] = self.customRuleTemplateMaxCount!
            }
            if self.defenseGroupMaxCount != nil {
                map["DefenseGroupMaxCount"] = self.defenseGroupMaxCount!
            }
            if self.defenseObjectInGroupMaxCount != nil {
                map["DefenseObjectInGroupMaxCount"] = self.defenseObjectInGroupMaxCount!
            }
            if self.defenseObjectInTemplateMaxCount != nil {
                map["DefenseObjectInTemplateMaxCount"] = self.defenseObjectInTemplateMaxCount!
            }
            if self.defenseObjectMaxCount != nil {
                map["DefenseObjectMaxCount"] = self.defenseObjectMaxCount!
            }
            if self.dlp != nil {
                map["Dlp"] = self.dlp!
            }
            if self.dlpRuleInTemplateMaxCount != nil {
                map["DlpRuleInTemplateMaxCount"] = self.dlpRuleInTemplateMaxCount!
            }
            if self.dlpTemplateMaxCount != nil {
                map["DlpTemplateMaxCount"] = self.dlpTemplateMaxCount!
            }
            if self.elasticQps != nil {
                map["ElasticQps"] = self.elasticQps!
            }
            if self.exclusiveIp != nil {
                map["ExclusiveIp"] = self.exclusiveIp!
            }
            if self.extendQps != nil {
                map["ExtendQps"] = self.extendQps!
            }
            if self.freeQps != nil {
                map["FreeQps"] = self.freeQps!
            }
            if self.gslb != nil {
                map["Gslb"] = self.gslb!
            }
            if self.httpPorts != nil {
                map["HttpPorts"] = self.httpPorts!
            }
            if self.httpsPorts != nil {
                map["HttpsPorts"] = self.httpsPorts!
            }
            if self.ipBlacklist != nil {
                map["IpBlacklist"] = self.ipBlacklist!
            }
            if self.ipBlacklistIpInRuleMaxCount != nil {
                map["IpBlacklistIpInRuleMaxCount"] = self.ipBlacklistIpInRuleMaxCount!
            }
            if self.ipBlacklistRuleInTemplateMaxCount != nil {
                map["IpBlacklistRuleInTemplateMaxCount"] = self.ipBlacklistRuleInTemplateMaxCount!
            }
            if self.ipBlacklistTemplateMaxCount != nil {
                map["IpBlacklistTemplateMaxCount"] = self.ipBlacklistTemplateMaxCount!
            }
            if self.ipv6 != nil {
                map["Ipv6"] = self.ipv6!
            }
            if self.logService != nil {
                map["LogService"] = self.logService!
            }
            if self.majorProtection != nil {
                map["MajorProtection"] = self.majorProtection!
            }
            if self.majorProtectionTemplateMaxCount != nil {
                map["MajorProtectionTemplateMaxCount"] = self.majorProtectionTemplateMaxCount!
            }
            if self.qpsBillingCap != nil {
                map["QpsBillingCap"] = self.qpsBillingCap!
            }
            if self.tamperproof != nil {
                map["Tamperproof"] = self.tamperproof!
            }
            if self.tamperproofRuleInTemplateMaxCount != nil {
                map["TamperproofRuleInTemplateMaxCount"] = self.tamperproofRuleInTemplateMaxCount!
            }
            if self.tamperproofTemplateMaxCount != nil {
                map["TamperproofTemplateMaxCount"] = self.tamperproofTemplateMaxCount!
            }
            if self.vastIpBlacklistInFileMaxCount != nil {
                map["VastIpBlacklistInFileMaxCount"] = self.vastIpBlacklistInFileMaxCount!
            }
            if self.vastIpBlacklistInOperationMaxCount != nil {
                map["VastIpBlacklistInOperationMaxCount"] = self.vastIpBlacklistInOperationMaxCount!
            }
            if self.vastIpBlacklistMaxCount != nil {
                map["VastIpBlacklistMaxCount"] = self.vastIpBlacklistMaxCount!
            }
            if self.whitelist != nil {
                map["Whitelist"] = self.whitelist!
            }
            if self.whitelistLogical != nil {
                map["WhitelistLogical"] = self.whitelistLogical!
            }
            if self.whitelistRuleCondition != nil {
                map["WhitelistRuleCondition"] = self.whitelistRuleCondition!
            }
            if self.whitelistRuleInTemplateMaxCount != nil {
                map["WhitelistRuleInTemplateMaxCount"] = self.whitelistRuleInTemplateMaxCount!
            }
            if self.whitelistTemplateMaxCount != nil {
                map["WhitelistTemplateMaxCount"] = self.whitelistTemplateMaxCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AclRuleMaxIpCount"] as? Int64 {
                self.aclRuleMaxIpCount = value
            }
            if let value = dict["AntiScan"] as? Bool {
                self.antiScan = value
            }
            if let value = dict["AntiScanTemplateMaxCount"] as? Int64 {
                self.antiScanTemplateMaxCount = value
            }
            if let value = dict["BackendMaxCount"] as? Int64 {
                self.backendMaxCount = value
            }
            if let value = dict["BaseWafGroup"] as? Bool {
                self.baseWafGroup = value
            }
            if let value = dict["BaseWafGroupRuleInTemplateMaxCount"] as? Int64 {
                self.baseWafGroupRuleInTemplateMaxCount = value
            }
            if let value = dict["BaseWafGroupRuleTemplateMaxCount"] as? Int64 {
                self.baseWafGroupRuleTemplateMaxCount = value
            }
            if let value = dict["Bot"] as? Bool {
                self.bot = value
            }
            if let value = dict["BotApp"] as? String {
                self.botApp = value
            }
            if let value = dict["BotTemplateMaxCount"] as? Int64 {
                self.botTemplateMaxCount = value
            }
            if let value = dict["BotWeb"] as? String {
                self.botWeb = value
            }
            if let value = dict["CnameResourceMaxCount"] as? Int64 {
                self.cnameResourceMaxCount = value
            }
            if let value = dict["CustomResponse"] as? Bool {
                self.customResponse = value
            }
            if let value = dict["CustomResponseRuleInTemplateMaxCount"] as? Int64 {
                self.customResponseRuleInTemplateMaxCount = value
            }
            if let value = dict["CustomResponseTemplateMaxCount"] as? Int64 {
                self.customResponseTemplateMaxCount = value
            }
            if let value = dict["CustomRule"] as? Bool {
                self.customRule = value
            }
            if let value = dict["CustomRuleAction"] as? String {
                self.customRuleAction = value
            }
            if let value = dict["CustomRuleCondition"] as? String {
                self.customRuleCondition = value
            }
            if let value = dict["CustomRuleInTemplateMaxCount"] as? Int64 {
                self.customRuleInTemplateMaxCount = value
            }
            if let value = dict["CustomRuleRatelimitor"] as? String {
                self.customRuleRatelimitor = value
            }
            if let value = dict["CustomRuleTemplateMaxCount"] as? Int64 {
                self.customRuleTemplateMaxCount = value
            }
            if let value = dict["DefenseGroupMaxCount"] as? Int64 {
                self.defenseGroupMaxCount = value
            }
            if let value = dict["DefenseObjectInGroupMaxCount"] as? Int64 {
                self.defenseObjectInGroupMaxCount = value
            }
            if let value = dict["DefenseObjectInTemplateMaxCount"] as? Int64 {
                self.defenseObjectInTemplateMaxCount = value
            }
            if let value = dict["DefenseObjectMaxCount"] as? Int64 {
                self.defenseObjectMaxCount = value
            }
            if let value = dict["Dlp"] as? Bool {
                self.dlp = value
            }
            if let value = dict["DlpRuleInTemplateMaxCount"] as? Int64 {
                self.dlpRuleInTemplateMaxCount = value
            }
            if let value = dict["DlpTemplateMaxCount"] as? Int64 {
                self.dlpTemplateMaxCount = value
            }
            if let value = dict["ElasticQps"] as? Int32 {
                self.elasticQps = value
            }
            if let value = dict["ExclusiveIp"] as? Bool {
                self.exclusiveIp = value
            }
            if let value = dict["ExtendQps"] as? Int32 {
                self.extendQps = value
            }
            if let value = dict["FreeQps"] as? Int32 {
                self.freeQps = value
            }
            if let value = dict["Gslb"] as? Bool {
                self.gslb = value
            }
            if let value = dict["HttpPorts"] as? String {
                self.httpPorts = value
            }
            if let value = dict["HttpsPorts"] as? String {
                self.httpsPorts = value
            }
            if let value = dict["IpBlacklist"] as? Bool {
                self.ipBlacklist = value
            }
            if let value = dict["IpBlacklistIpInRuleMaxCount"] as? Int64 {
                self.ipBlacklistIpInRuleMaxCount = value
            }
            if let value = dict["IpBlacklistRuleInTemplateMaxCount"] as? Int64 {
                self.ipBlacklistRuleInTemplateMaxCount = value
            }
            if let value = dict["IpBlacklistTemplateMaxCount"] as? Int64 {
                self.ipBlacklistTemplateMaxCount = value
            }
            if let value = dict["Ipv6"] as? Bool {
                self.ipv6 = value
            }
            if let value = dict["LogService"] as? Bool {
                self.logService = value
            }
            if let value = dict["MajorProtection"] as? Bool {
                self.majorProtection = value
            }
            if let value = dict["MajorProtectionTemplateMaxCount"] as? Int64 {
                self.majorProtectionTemplateMaxCount = value
            }
            if let value = dict["QpsBillingCap"] as? Int32 {
                self.qpsBillingCap = value
            }
            if let value = dict["Tamperproof"] as? Bool {
                self.tamperproof = value
            }
            if let value = dict["TamperproofRuleInTemplateMaxCount"] as? Int64 {
                self.tamperproofRuleInTemplateMaxCount = value
            }
            if let value = dict["TamperproofTemplateMaxCount"] as? Int64 {
                self.tamperproofTemplateMaxCount = value
            }
            if let value = dict["VastIpBlacklistInFileMaxCount"] as? Int64 {
                self.vastIpBlacklistInFileMaxCount = value
            }
            if let value = dict["VastIpBlacklistInOperationMaxCount"] as? Int64 {
                self.vastIpBlacklistInOperationMaxCount = value
            }
            if let value = dict["VastIpBlacklistMaxCount"] as? Int64 {
                self.vastIpBlacklistMaxCount = value
            }
            if let value = dict["Whitelist"] as? Bool {
                self.whitelist = value
            }
            if let value = dict["WhitelistLogical"] as? String {
                self.whitelistLogical = value
            }
            if let value = dict["WhitelistRuleCondition"] as? String {
                self.whitelistRuleCondition = value
            }
            if let value = dict["WhitelistRuleInTemplateMaxCount"] as? Int64 {
                self.whitelistRuleInTemplateMaxCount = value
            }
            if let value = dict["WhitelistTemplateMaxCount"] as? Int64 {
                self.whitelistTemplateMaxCount = value
            }
        }
    }
    public var details: DescribeInstanceResponseBody.Details?

    public var edition: String?

    public var endTime: Int64?

    public var inDebt: String?

    public var instanceId: String?

    public var payType: String?

    public var regionId: String?

    public var requestId: String?

    public var startTime: Int64?

    public var status: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.details?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.details != nil {
            map["Details"] = self.details?.toMap()
        }
        if self.edition != nil {
            map["Edition"] = self.edition!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.inDebt != nil {
            map["InDebt"] = self.inDebt!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.payType != nil {
            map["PayType"] = self.payType!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Details"] as? [String: Any?] {
            var model = DescribeInstanceResponseBody.Details()
            model.fromMap(value)
            self.details = model
        }
        if let value = dict["Edition"] as? String {
            self.edition = value
        }
        if let value = dict["EndTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["InDebt"] as? String {
            self.inDebt = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["PayType"] as? String {
            self.payType = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
        if let value = dict["Status"] as? Int32 {
            self.status = value
        }
    }
}

public class DescribeInstanceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeInstanceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeInstanceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeIpAbroadCountryInfosRequest : Tea.TeaModel {
    public var abroadRegion: String?

    public var country: String?

    public var instanceId: String?

    public var language: String?

    public var maxResults: Int32?

    public var nextToken: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.abroadRegion != nil {
            map["AbroadRegion"] = self.abroadRegion!
        }
        if self.country != nil {
            map["Country"] = self.country!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.language != nil {
            map["Language"] = self.language!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AbroadRegion"] as? String {
            self.abroadRegion = value
        }
        if let value = dict["Country"] as? String {
            self.country = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["Language"] as? String {
            self.language = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class DescribeIpAbroadCountryInfosResponseBody : Tea.TeaModel {
    public class AbroadInfos : Tea.TeaModel {
        public class Regions : Tea.TeaModel {
            public var abroadRegionId: String?

            public var abroadRegionName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.abroadRegionId != nil {
                    map["AbroadRegionId"] = self.abroadRegionId!
                }
                if self.abroadRegionName != nil {
                    map["AbroadRegionName"] = self.abroadRegionName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AbroadRegionId"] as? String {
                    self.abroadRegionId = value
                }
                if let value = dict["AbroadRegionName"] as? String {
                    self.abroadRegionName = value
                }
            }
        }
        public var continent: String?

        public var country: String?

        public var countryName: String?

        public var regions: [DescribeIpAbroadCountryInfosResponseBody.AbroadInfos.Regions]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.continent != nil {
                map["Continent"] = self.continent!
            }
            if self.country != nil {
                map["Country"] = self.country!
            }
            if self.countryName != nil {
                map["CountryName"] = self.countryName!
            }
            if self.regions != nil {
                var tmp : [Any] = []
                for k in self.regions! {
                    tmp.append(k.toMap())
                }
                map["Regions"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Continent"] as? String {
                self.continent = value
            }
            if let value = dict["Country"] as? String {
                self.country = value
            }
            if let value = dict["CountryName"] as? String {
                self.countryName = value
            }
            if let value = dict["Regions"] as? [Any?] {
                var tmp : [DescribeIpAbroadCountryInfosResponseBody.AbroadInfos.Regions] = []
                for v in value {
                    if v != nil {
                        var model = DescribeIpAbroadCountryInfosResponseBody.AbroadInfos.Regions()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.regions = tmp
            }
        }
    }
    public var abroadInfos: [DescribeIpAbroadCountryInfosResponseBody.AbroadInfos]?

    public var maxResults: Int32?

    public var nextToken: String?

    public var requestId: String?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.abroadInfos != nil {
            var tmp : [Any] = []
            for k in self.abroadInfos! {
                tmp.append(k.toMap())
            }
            map["AbroadInfos"] = tmp
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AbroadInfos"] as? [Any?] {
            var tmp : [DescribeIpAbroadCountryInfosResponseBody.AbroadInfos] = []
            for v in value {
                if v != nil {
                    var model = DescribeIpAbroadCountryInfosResponseBody.AbroadInfos()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.abroadInfos = tmp
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class DescribeIpAbroadCountryInfosResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeIpAbroadCountryInfosResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeIpAbroadCountryInfosResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeLogDeliveryConfigRequest : Tea.TeaModel {
    public var deliveryName: String?

    public var instanceId: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.deliveryName != nil {
            map["DeliveryName"] = self.deliveryName!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DeliveryName"] as? String {
            self.deliveryName = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class DescribeLogDeliveryConfigResponseBody : Tea.TeaModel {
    public class DeliveryConfig : Tea.TeaModel {
        public var deliveryDetail: String?

        public var deliveryName: String?

        public var deliveryType: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.deliveryDetail != nil {
                map["DeliveryDetail"] = self.deliveryDetail!
            }
            if self.deliveryName != nil {
                map["DeliveryName"] = self.deliveryName!
            }
            if self.deliveryType != nil {
                map["DeliveryType"] = self.deliveryType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DeliveryDetail"] as? String {
                self.deliveryDetail = value
            }
            if let value = dict["DeliveryName"] as? String {
                self.deliveryName = value
            }
            if let value = dict["DeliveryType"] as? String {
                self.deliveryType = value
            }
        }
    }
    public var deliveryConfig: DescribeLogDeliveryConfigResponseBody.DeliveryConfig?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.deliveryConfig?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.deliveryConfig != nil {
            map["DeliveryConfig"] = self.deliveryConfig?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DeliveryConfig"] as? [String: Any?] {
            var model = DescribeLogDeliveryConfigResponseBody.DeliveryConfig()
            model.fromMap(value)
            self.deliveryConfig = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeLogDeliveryConfigResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeLogDeliveryConfigResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeLogDeliveryConfigResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeLogDeliveryConfigsRequest : Tea.TeaModel {
    public var deliveryNameLike: String?

    public var deliveryType: String?

    public var instanceId: String?

    public var maxResults: Int32?

    public var nextToken: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.deliveryNameLike != nil {
            map["DeliveryNameLike"] = self.deliveryNameLike!
        }
        if self.deliveryType != nil {
            map["DeliveryType"] = self.deliveryType!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DeliveryNameLike"] as? String {
            self.deliveryNameLike = value
        }
        if let value = dict["DeliveryType"] as? String {
            self.deliveryType = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class DescribeLogDeliveryConfigsResponseBody : Tea.TeaModel {
    public class DeliveryConfigs : Tea.TeaModel {
        public var deliveryDetail: String?

        public var deliveryName: String?

        public var deliveryType: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.deliveryDetail != nil {
                map["DeliveryDetail"] = self.deliveryDetail!
            }
            if self.deliveryName != nil {
                map["DeliveryName"] = self.deliveryName!
            }
            if self.deliveryType != nil {
                map["DeliveryType"] = self.deliveryType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DeliveryDetail"] as? String {
                self.deliveryDetail = value
            }
            if let value = dict["DeliveryName"] as? String {
                self.deliveryName = value
            }
            if let value = dict["DeliveryType"] as? String {
                self.deliveryType = value
            }
        }
    }
    public var deliveryConfigs: [DescribeLogDeliveryConfigsResponseBody.DeliveryConfigs]?

    public var maxResults: Int32?

    public var nextToken: String?

    public var requestId: String?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.deliveryConfigs != nil {
            var tmp : [Any] = []
            for k in self.deliveryConfigs! {
                tmp.append(k.toMap())
            }
            map["DeliveryConfigs"] = tmp
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DeliveryConfigs"] as? [Any?] {
            var tmp : [DescribeLogDeliveryConfigsResponseBody.DeliveryConfigs] = []
            for v in value {
                if v != nil {
                    var model = DescribeLogDeliveryConfigsResponseBody.DeliveryConfigs()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.deliveryConfigs = tmp
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class DescribeLogDeliveryConfigsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeLogDeliveryConfigsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeLogDeliveryConfigsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeMajorProtectionBlackIpsRequest : Tea.TeaModel {
    public var instanceId: String?

    public var ipLike: String?

    public var orderBy: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public var ruleId: Int64?

    public var templateId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.ipLike != nil {
            map["IpLike"] = self.ipLike!
        }
        if self.orderBy != nil {
            map["OrderBy"] = self.orderBy!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.ruleId != nil {
            map["RuleId"] = self.ruleId!
        }
        if self.templateId != nil {
            map["TemplateId"] = self.templateId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["IpLike"] as? String {
            self.ipLike = value
        }
        if let value = dict["OrderBy"] as? String {
            self.orderBy = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["RuleId"] as? Int64 {
            self.ruleId = value
        }
        if let value = dict["TemplateId"] as? Int64 {
            self.templateId = value
        }
    }
}

public class DescribeMajorProtectionBlackIpsResponseBody : Tea.TeaModel {
    public class IpList : Tea.TeaModel {
        public var description_: String?

        public var expiredTime: Int64?

        public var gmtModified: Int64?

        public var ip: String?

        public var ruleId: Int64?

        public var templateId: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.expiredTime != nil {
                map["ExpiredTime"] = self.expiredTime!
            }
            if self.gmtModified != nil {
                map["GmtModified"] = self.gmtModified!
            }
            if self.ip != nil {
                map["Ip"] = self.ip!
            }
            if self.ruleId != nil {
                map["RuleId"] = self.ruleId!
            }
            if self.templateId != nil {
                map["TemplateId"] = self.templateId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["ExpiredTime"] as? Int64 {
                self.expiredTime = value
            }
            if let value = dict["GmtModified"] as? Int64 {
                self.gmtModified = value
            }
            if let value = dict["Ip"] as? String {
                self.ip = value
            }
            if let value = dict["RuleId"] as? Int64 {
                self.ruleId = value
            }
            if let value = dict["TemplateId"] as? Int64 {
                self.templateId = value
            }
        }
    }
    public var ipList: [DescribeMajorProtectionBlackIpsResponseBody.IpList]?

    public var requestId: String?

    public var totalCount: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ipList != nil {
            var tmp : [Any] = []
            for k in self.ipList! {
                tmp.append(k.toMap())
            }
            map["IpList"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["IpList"] as? [Any?] {
            var tmp : [DescribeMajorProtectionBlackIpsResponseBody.IpList] = []
            for v in value {
                if v != nil {
                    var model = DescribeMajorProtectionBlackIpsResponseBody.IpList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.ipList = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int64 {
            self.totalCount = value
        }
    }
}

public class DescribeMajorProtectionBlackIpsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeMajorProtectionBlackIpsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeMajorProtectionBlackIpsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeMemberAccountsRequest : Tea.TeaModel {
    public var accountStatus: String?

    public var instanceId: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public var sourceIp: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.accountStatus != nil {
            map["AccountStatus"] = self.accountStatus!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.sourceIp != nil {
            map["SourceIp"] = self.sourceIp!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AccountStatus"] as? String {
            self.accountStatus = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["SourceIp"] as? String {
            self.sourceIp = value
        }
    }
}

public class DescribeMemberAccountsResponseBody : Tea.TeaModel {
    public class AccountInfos : Tea.TeaModel {
        public var accountId: String?

        public var accountName: String?

        public var accountStatus: String?

        public var description_: String?

        public var gmtCreate: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["AccountId"] = self.accountId!
            }
            if self.accountName != nil {
                map["AccountName"] = self.accountName!
            }
            if self.accountStatus != nil {
                map["AccountStatus"] = self.accountStatus!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.gmtCreate != nil {
                map["GmtCreate"] = self.gmtCreate!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AccountId"] as? String {
                self.accountId = value
            }
            if let value = dict["AccountName"] as? String {
                self.accountName = value
            }
            if let value = dict["AccountStatus"] as? String {
                self.accountStatus = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["GmtCreate"] as? Int64 {
                self.gmtCreate = value
            }
        }
    }
    public var accountInfos: [DescribeMemberAccountsResponseBody.AccountInfos]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.accountInfos != nil {
            var tmp : [Any] = []
            for k in self.accountInfos! {
                tmp.append(k.toMap())
            }
            map["AccountInfos"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AccountInfos"] as? [Any?] {
            var tmp : [DescribeMemberAccountsResponseBody.AccountInfos] = []
            for v in value {
                if v != nil {
                    var model = DescribeMemberAccountsResponseBody.AccountInfos()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.accountInfos = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeMemberAccountsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeMemberAccountsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeMemberAccountsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeNetworkFlowTimeSeriesMetricRequest : Tea.TeaModel {
    public class Filter : Tea.TeaModel {
        public class Conditions : Tea.TeaModel {
            public var key: String?

            public var opValue: String?

            public var values: Any?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.key != nil {
                    map["Key"] = self.key!
                }
                if self.opValue != nil {
                    map["OpValue"] = self.opValue!
                }
                if self.values != nil {
                    map["Values"] = self.values!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Key"] as? String {
                    self.key = value
                }
                if let value = dict["OpValue"] as? String {
                    self.opValue = value
                }
                if let value = dict["Values"] as? Any {
                    self.values = value
                }
            }
        }
        public class DateRange : Tea.TeaModel {
            public var endDate: Int64?

            public var startDate: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.endDate != nil {
                    map["EndDate"] = self.endDate!
                }
                if self.startDate != nil {
                    map["StartDate"] = self.startDate!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["EndDate"] as? Int64 {
                    self.endDate = value
                }
                if let value = dict["StartDate"] as? Int64 {
                    self.startDate = value
                }
            }
        }
        public var conditions: [DescribeNetworkFlowTimeSeriesMetricRequest.Filter.Conditions]?

        public var dateRange: DescribeNetworkFlowTimeSeriesMetricRequest.Filter.DateRange?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.dateRange?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.conditions != nil {
                var tmp : [Any] = []
                for k in self.conditions! {
                    tmp.append(k.toMap())
                }
                map["Conditions"] = tmp
            }
            if self.dateRange != nil {
                map["DateRange"] = self.dateRange?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Conditions"] as? [Any?] {
                var tmp : [DescribeNetworkFlowTimeSeriesMetricRequest.Filter.Conditions] = []
                for v in value {
                    if v != nil {
                        var model = DescribeNetworkFlowTimeSeriesMetricRequest.Filter.Conditions()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.conditions = tmp
            }
            if let value = dict["DateRange"] as? [String: Any?] {
                var model = DescribeNetworkFlowTimeSeriesMetricRequest.Filter.DateRange()
                model.fromMap(value)
                self.dateRange = model
            }
        }
    }
    public var filter: DescribeNetworkFlowTimeSeriesMetricRequest.Filter?

    public var instanceId: String?

    public var metric: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.filter?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.filter != nil {
            map["Filter"] = self.filter?.toMap()
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.metric != nil {
            map["Metric"] = self.metric!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Filter"] as? [String: Any?] {
            var model = DescribeNetworkFlowTimeSeriesMetricRequest.Filter()
            model.fromMap(value)
            self.filter = model
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["Metric"] as? String {
            self.metric = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class DescribeNetworkFlowTimeSeriesMetricShrinkRequest : Tea.TeaModel {
    public var filterShrink: String?

    public var instanceId: String?

    public var metric: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.filterShrink != nil {
            map["Filter"] = self.filterShrink!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.metric != nil {
            map["Metric"] = self.metric!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Filter"] as? String {
            self.filterShrink = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["Metric"] as? String {
            self.metric = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class DescribeNetworkFlowTimeSeriesMetricResponseBody : Tea.TeaModel {
    public class NetworkFlowTimeSeries : Tea.TeaModel {
        public var metric: String?

        public var timestamps: [String]?

        public var values: [Int64]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.metric != nil {
                map["Metric"] = self.metric!
            }
            if self.timestamps != nil {
                map["Timestamps"] = self.timestamps!
            }
            if self.values != nil {
                map["Values"] = self.values!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Metric"] as? String {
                self.metric = value
            }
            if let value = dict["Timestamps"] as? [String] {
                self.timestamps = value
            }
            if let value = dict["Values"] as? [Int64] {
                self.values = value
            }
        }
    }
    public class TimeSeriesMetaData : Tea.TeaModel {
        public class DateRange : Tea.TeaModel {
            public var endDate: Int64?

            public var startDate: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.endDate != nil {
                    map["EndDate"] = self.endDate!
                }
                if self.startDate != nil {
                    map["StartDate"] = self.startDate!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["EndDate"] as? Int64 {
                    self.endDate = value
                }
                if let value = dict["StartDate"] as? Int64 {
                    self.startDate = value
                }
            }
        }
        public var aggregateInterval: String?

        public var dateRange: DescribeNetworkFlowTimeSeriesMetricResponseBody.TimeSeriesMetaData.DateRange?

        public var units: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.dateRange?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.aggregateInterval != nil {
                map["AggregateInterval"] = self.aggregateInterval!
            }
            if self.dateRange != nil {
                map["DateRange"] = self.dateRange?.toMap()
            }
            if self.units != nil {
                map["Units"] = self.units!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AggregateInterval"] as? String {
                self.aggregateInterval = value
            }
            if let value = dict["DateRange"] as? [String: Any?] {
                var model = DescribeNetworkFlowTimeSeriesMetricResponseBody.TimeSeriesMetaData.DateRange()
                model.fromMap(value)
                self.dateRange = model
            }
            if let value = dict["Units"] as? String {
                self.units = value
            }
        }
    }
    public var networkFlowTimeSeries: [DescribeNetworkFlowTimeSeriesMetricResponseBody.NetworkFlowTimeSeries]?

    public var requestId: String?

    public var timeSeriesMetaData: DescribeNetworkFlowTimeSeriesMetricResponseBody.TimeSeriesMetaData?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.timeSeriesMetaData?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.networkFlowTimeSeries != nil {
            var tmp : [Any] = []
            for k in self.networkFlowTimeSeries! {
                tmp.append(k.toMap())
            }
            map["NetworkFlowTimeSeries"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.timeSeriesMetaData != nil {
            map["TimeSeriesMetaData"] = self.timeSeriesMetaData?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["NetworkFlowTimeSeries"] as? [Any?] {
            var tmp : [DescribeNetworkFlowTimeSeriesMetricResponseBody.NetworkFlowTimeSeries] = []
            for v in value {
                if v != nil {
                    var model = DescribeNetworkFlowTimeSeriesMetricResponseBody.NetworkFlowTimeSeries()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.networkFlowTimeSeries = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TimeSeriesMetaData"] as? [String: Any?] {
            var model = DescribeNetworkFlowTimeSeriesMetricResponseBody.TimeSeriesMetaData()
            model.fromMap(value)
            self.timeSeriesMetaData = model
        }
    }
}

public class DescribeNetworkFlowTimeSeriesMetricResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeNetworkFlowTimeSeriesMetricResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeNetworkFlowTimeSeriesMetricResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeNetworkFlowTopNMetricRequest : Tea.TeaModel {
    public class Filter : Tea.TeaModel {
        public class Conditions : Tea.TeaModel {
            public var key: String?

            public var opValue: String?

            public var values: Any?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.key != nil {
                    map["Key"] = self.key!
                }
                if self.opValue != nil {
                    map["OpValue"] = self.opValue!
                }
                if self.values != nil {
                    map["Values"] = self.values!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Key"] as? String {
                    self.key = value
                }
                if let value = dict["OpValue"] as? String {
                    self.opValue = value
                }
                if let value = dict["Values"] as? Any {
                    self.values = value
                }
            }
        }
        public class DateRange : Tea.TeaModel {
            public var endDate: Int64?

            public var startDate: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.endDate != nil {
                    map["EndDate"] = self.endDate!
                }
                if self.startDate != nil {
                    map["StartDate"] = self.startDate!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["EndDate"] as? Int64 {
                    self.endDate = value
                }
                if let value = dict["StartDate"] as? Int64 {
                    self.startDate = value
                }
            }
        }
        public var conditions: [DescribeNetworkFlowTopNMetricRequest.Filter.Conditions]?

        public var dateRange: DescribeNetworkFlowTopNMetricRequest.Filter.DateRange?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.dateRange?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.conditions != nil {
                var tmp : [Any] = []
                for k in self.conditions! {
                    tmp.append(k.toMap())
                }
                map["Conditions"] = tmp
            }
            if self.dateRange != nil {
                map["DateRange"] = self.dateRange?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Conditions"] as? [Any?] {
                var tmp : [DescribeNetworkFlowTopNMetricRequest.Filter.Conditions] = []
                for v in value {
                    if v != nil {
                        var model = DescribeNetworkFlowTopNMetricRequest.Filter.Conditions()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.conditions = tmp
            }
            if let value = dict["DateRange"] as? [String: Any?] {
                var model = DescribeNetworkFlowTopNMetricRequest.Filter.DateRange()
                model.fromMap(value)
                self.dateRange = model
            }
        }
    }
    public var filter: DescribeNetworkFlowTopNMetricRequest.Filter?

    public var instanceId: String?

    public var limit: Int64?

    public var metric: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.filter?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.filter != nil {
            map["Filter"] = self.filter?.toMap()
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.limit != nil {
            map["Limit"] = self.limit!
        }
        if self.metric != nil {
            map["Metric"] = self.metric!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Filter"] as? [String: Any?] {
            var model = DescribeNetworkFlowTopNMetricRequest.Filter()
            model.fromMap(value)
            self.filter = model
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["Limit"] as? Int64 {
            self.limit = value
        }
        if let value = dict["Metric"] as? String {
            self.metric = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class DescribeNetworkFlowTopNMetricShrinkRequest : Tea.TeaModel {
    public var filterShrink: String?

    public var instanceId: String?

    public var limit: Int64?

    public var metric: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.filterShrink != nil {
            map["Filter"] = self.filterShrink!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.limit != nil {
            map["Limit"] = self.limit!
        }
        if self.metric != nil {
            map["Metric"] = self.metric!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Filter"] as? String {
            self.filterShrink = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["Limit"] as? Int64 {
            self.limit = value
        }
        if let value = dict["Metric"] as? String {
            self.metric = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class DescribeNetworkFlowTopNMetricResponseBody : Tea.TeaModel {
    public class NetworkFlowTopNValues : Tea.TeaModel {
        public var attribute: String?

        public var name: String?

        public var value: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.attribute != nil {
                map["Attribute"] = self.attribute!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Attribute"] as? String {
                self.attribute = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["Value"] as? Int64 {
                self.value = value
            }
        }
    }
    public class TopNMetaData : Tea.TeaModel {
        public class DateRange : Tea.TeaModel {
            public var endDate: Int64?

            public var startDate: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.endDate != nil {
                    map["EndDate"] = self.endDate!
                }
                if self.startDate != nil {
                    map["StartDate"] = self.startDate!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["EndDate"] as? Int64 {
                    self.endDate = value
                }
                if let value = dict["StartDate"] as? Int64 {
                    self.startDate = value
                }
            }
        }
        public var dateRange: DescribeNetworkFlowTopNMetricResponseBody.TopNMetaData.DateRange?

        public var units: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.dateRange?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.dateRange != nil {
                map["DateRange"] = self.dateRange?.toMap()
            }
            if self.units != nil {
                map["Units"] = self.units!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DateRange"] as? [String: Any?] {
                var model = DescribeNetworkFlowTopNMetricResponseBody.TopNMetaData.DateRange()
                model.fromMap(value)
                self.dateRange = model
            }
            if let value = dict["Units"] as? String {
                self.units = value
            }
        }
    }
    public var networkFlowTopNValues: [DescribeNetworkFlowTopNMetricResponseBody.NetworkFlowTopNValues]?

    public var requestId: String?

    public var topNMetaData: DescribeNetworkFlowTopNMetricResponseBody.TopNMetaData?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.topNMetaData?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.networkFlowTopNValues != nil {
            var tmp : [Any] = []
            for k in self.networkFlowTopNValues! {
                tmp.append(k.toMap())
            }
            map["NetworkFlowTopNValues"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.topNMetaData != nil {
            map["TopNMetaData"] = self.topNMetaData?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["NetworkFlowTopNValues"] as? [Any?] {
            var tmp : [DescribeNetworkFlowTopNMetricResponseBody.NetworkFlowTopNValues] = []
            for v in value {
                if v != nil {
                    var model = DescribeNetworkFlowTopNMetricResponseBody.NetworkFlowTopNValues()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.networkFlowTopNValues = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TopNMetaData"] as? [String: Any?] {
            var model = DescribeNetworkFlowTopNMetricResponseBody.TopNMetaData()
            model.fromMap(value)
            self.topNMetaData = model
        }
    }
}

public class DescribeNetworkFlowTopNMetricResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeNetworkFlowTopNMetricResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeNetworkFlowTopNMetricResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribePauseProtectionStatusRequest : Tea.TeaModel {
    public var instanceId: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class DescribePauseProtectionStatusResponseBody : Tea.TeaModel {
    public var pauseStatus: Int32?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pauseStatus != nil {
            map["PauseStatus"] = self.pauseStatus!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PauseStatus"] as? Int32 {
            self.pauseStatus = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribePauseProtectionStatusResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribePauseProtectionStatusResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribePauseProtectionStatusResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribePeakTrendRequest : Tea.TeaModel {
    public var endTimestamp: String?

    public var instanceId: String?

    public var interval: String?

    public var regionId: String?

    public var resource: String?

    public var resourceManagerResourceGroupId: String?

    public var startTimestamp: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTimestamp != nil {
            map["EndTimestamp"] = self.endTimestamp!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.interval != nil {
            map["Interval"] = self.interval!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resource != nil {
            map["Resource"] = self.resource!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.startTimestamp != nil {
            map["StartTimestamp"] = self.startTimestamp!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTimestamp"] as? String {
            self.endTimestamp = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["Interval"] as? String {
            self.interval = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Resource"] as? String {
            self.resource = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["StartTimestamp"] as? String {
            self.startTimestamp = value
        }
    }
}

public class DescribePeakTrendResponseBody : Tea.TeaModel {
    public class FlowChart : Tea.TeaModel {
        public var aclSum: Int64?

        public var antiScanSum: Int64?

        public var ccSum: Int64?

        public var count: Int64?

        public var index: Int64?

        public var wafSum: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.aclSum != nil {
                map["AclSum"] = self.aclSum!
            }
            if self.antiScanSum != nil {
                map["AntiScanSum"] = self.antiScanSum!
            }
            if self.ccSum != nil {
                map["CcSum"] = self.ccSum!
            }
            if self.count != nil {
                map["Count"] = self.count!
            }
            if self.index != nil {
                map["Index"] = self.index!
            }
            if self.wafSum != nil {
                map["WafSum"] = self.wafSum!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AclSum"] as? Int64 {
                self.aclSum = value
            }
            if let value = dict["AntiScanSum"] as? Int64 {
                self.antiScanSum = value
            }
            if let value = dict["CcSum"] as? Int64 {
                self.ccSum = value
            }
            if let value = dict["Count"] as? Int64 {
                self.count = value
            }
            if let value = dict["Index"] as? Int64 {
                self.index = value
            }
            if let value = dict["WafSum"] as? Int64 {
                self.wafSum = value
            }
        }
    }
    public var flowChart: [DescribePeakTrendResponseBody.FlowChart]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.flowChart != nil {
            var tmp : [Any] = []
            for k in self.flowChart! {
                tmp.append(k.toMap())
            }
            map["FlowChart"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["FlowChart"] as? [Any?] {
            var tmp : [DescribePeakTrendResponseBody.FlowChart] = []
            for v in value {
                if v != nil {
                    var model = DescribePeakTrendResponseBody.FlowChart()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.flowChart = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribePeakTrendResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribePeakTrendResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribePeakTrendResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribePocFunctionsRequest : Tea.TeaModel {
    public var instanceId: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class DescribePocFunctionsResponseBody : Tea.TeaModel {
    public class Functions : Tea.TeaModel {
        public var expireTime: Int64?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.expireTime != nil {
                map["ExpireTime"] = self.expireTime!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ExpireTime"] as? Int64 {
                self.expireTime = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
        }
    }
    public var functions: [DescribePocFunctionsResponseBody.Functions]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.functions != nil {
            var tmp : [Any] = []
            for k in self.functions! {
                tmp.append(k.toMap())
            }
            map["Functions"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Functions"] as? [Any?] {
            var tmp : [DescribePocFunctionsResponseBody.Functions] = []
            for v in value {
                if v != nil {
                    var model = DescribePocFunctionsResponseBody.Functions()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.functions = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribePocFunctionsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribePocFunctionsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribePocFunctionsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeProductInstancesRequest : Tea.TeaModel {
    public var instanceId: String?

    public var ownerUserId: String?

    public var pageNumber: Int64?

    public var pageSize: Int64?

    public var regionId: String?

    public var resourceInstanceAccessStatus: String?

    public var resourceInstanceId: String?

    public var resourceInstanceIp: String?

    public var resourceInstanceName: String?

    public var resourceIp: String?

    public var resourceManagerResourceGroupId: String?

    public var resourceName: String?

    public var resourceProduct: String?

    public var resourceRegionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.ownerUserId != nil {
            map["OwnerUserId"] = self.ownerUserId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceInstanceAccessStatus != nil {
            map["ResourceInstanceAccessStatus"] = self.resourceInstanceAccessStatus!
        }
        if self.resourceInstanceId != nil {
            map["ResourceInstanceId"] = self.resourceInstanceId!
        }
        if self.resourceInstanceIp != nil {
            map["ResourceInstanceIp"] = self.resourceInstanceIp!
        }
        if self.resourceInstanceName != nil {
            map["ResourceInstanceName"] = self.resourceInstanceName!
        }
        if self.resourceIp != nil {
            map["ResourceIp"] = self.resourceIp!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.resourceName != nil {
            map["ResourceName"] = self.resourceName!
        }
        if self.resourceProduct != nil {
            map["ResourceProduct"] = self.resourceProduct!
        }
        if self.resourceRegionId != nil {
            map["ResourceRegionId"] = self.resourceRegionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["OwnerUserId"] as? String {
            self.ownerUserId = value
        }
        if let value = dict["PageNumber"] as? Int64 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceInstanceAccessStatus"] as? String {
            self.resourceInstanceAccessStatus = value
        }
        if let value = dict["ResourceInstanceId"] as? String {
            self.resourceInstanceId = value
        }
        if let value = dict["ResourceInstanceIp"] as? String {
            self.resourceInstanceIp = value
        }
        if let value = dict["ResourceInstanceName"] as? String {
            self.resourceInstanceName = value
        }
        if let value = dict["ResourceIp"] as? String {
            self.resourceIp = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["ResourceName"] as? String {
            self.resourceName = value
        }
        if let value = dict["ResourceProduct"] as? String {
            self.resourceProduct = value
        }
        if let value = dict["ResourceRegionId"] as? String {
            self.resourceRegionId = value
        }
    }
}

public class DescribeProductInstancesResponseBody : Tea.TeaModel {
    public class ProductInstances : Tea.TeaModel {
        public class AccessPortAndProtocols : Tea.TeaModel {
            public var certificateIds: [String]?

            public var port: Int32?

            public var protocol_: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.certificateIds != nil {
                    map["CertificateIds"] = self.certificateIds!
                }
                if self.port != nil {
                    map["Port"] = self.port!
                }
                if self.protocol_ != nil {
                    map["Protocol"] = self.protocol_!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CertificateIds"] as? [String] {
                    self.certificateIds = value
                }
                if let value = dict["Port"] as? Int32 {
                    self.port = value
                }
                if let value = dict["Protocol"] as? String {
                    self.protocol_ = value
                }
            }
        }
        public class ResourcePorts : Tea.TeaModel {
            public class Certificates : Tea.TeaModel {
                public var appliedType: String?

                public var certificateId: String?

                public var certificateName: String?

                public var domain: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.appliedType != nil {
                        map["AppliedType"] = self.appliedType!
                    }
                    if self.certificateId != nil {
                        map["CertificateId"] = self.certificateId!
                    }
                    if self.certificateName != nil {
                        map["CertificateName"] = self.certificateName!
                    }
                    if self.domain != nil {
                        map["Domain"] = self.domain!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["AppliedType"] as? String {
                        self.appliedType = value
                    }
                    if let value = dict["CertificateId"] as? String {
                        self.certificateId = value
                    }
                    if let value = dict["CertificateName"] as? String {
                        self.certificateName = value
                    }
                    if let value = dict["Domain"] as? String {
                        self.domain = value
                    }
                }
            }
            public var certificates: [DescribeProductInstancesResponseBody.ProductInstances.ResourcePorts.Certificates]?

            public var port: Int32?

            public var protocol_: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.certificates != nil {
                    var tmp : [Any] = []
                    for k in self.certificates! {
                        tmp.append(k.toMap())
                    }
                    map["Certificates"] = tmp
                }
                if self.port != nil {
                    map["Port"] = self.port!
                }
                if self.protocol_ != nil {
                    map["Protocol"] = self.protocol_!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Certificates"] as? [Any?] {
                    var tmp : [DescribeProductInstancesResponseBody.ProductInstances.ResourcePorts.Certificates] = []
                    for v in value {
                        if v != nil {
                            var model = DescribeProductInstancesResponseBody.ProductInstances.ResourcePorts.Certificates()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.certificates = tmp
                }
                if let value = dict["Port"] as? Int32 {
                    self.port = value
                }
                if let value = dict["Protocol"] as? String {
                    self.protocol_ = value
                }
            }
        }
        public var accessInstanceId: String?

        public var accessPortAndProtocols: [DescribeProductInstancesResponseBody.ProductInstances.AccessPortAndProtocols]?

        public var accessPorts: [Int32]?

        public var ownerUserId: String?

        public var resourceInstanceAccessStatus: String?

        public var resourceInstanceEdition: String?

        public var resourceInstanceId: String?

        public var resourceInstanceIp: String?

        public var resourceInstanceName: String?

        public var resourceIp: String?

        public var resourceName: String?

        public var resourcePorts: [DescribeProductInstancesResponseBody.ProductInstances.ResourcePorts]?

        public var resourceProduct: String?

        public var resourceRegionId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accessInstanceId != nil {
                map["AccessInstanceId"] = self.accessInstanceId!
            }
            if self.accessPortAndProtocols != nil {
                var tmp : [Any] = []
                for k in self.accessPortAndProtocols! {
                    tmp.append(k.toMap())
                }
                map["AccessPortAndProtocols"] = tmp
            }
            if self.accessPorts != nil {
                map["AccessPorts"] = self.accessPorts!
            }
            if self.ownerUserId != nil {
                map["OwnerUserId"] = self.ownerUserId!
            }
            if self.resourceInstanceAccessStatus != nil {
                map["ResourceInstanceAccessStatus"] = self.resourceInstanceAccessStatus!
            }
            if self.resourceInstanceEdition != nil {
                map["ResourceInstanceEdition"] = self.resourceInstanceEdition!
            }
            if self.resourceInstanceId != nil {
                map["ResourceInstanceId"] = self.resourceInstanceId!
            }
            if self.resourceInstanceIp != nil {
                map["ResourceInstanceIp"] = self.resourceInstanceIp!
            }
            if self.resourceInstanceName != nil {
                map["ResourceInstanceName"] = self.resourceInstanceName!
            }
            if self.resourceIp != nil {
                map["ResourceIp"] = self.resourceIp!
            }
            if self.resourceName != nil {
                map["ResourceName"] = self.resourceName!
            }
            if self.resourcePorts != nil {
                var tmp : [Any] = []
                for k in self.resourcePorts! {
                    tmp.append(k.toMap())
                }
                map["ResourcePorts"] = tmp
            }
            if self.resourceProduct != nil {
                map["ResourceProduct"] = self.resourceProduct!
            }
            if self.resourceRegionId != nil {
                map["ResourceRegionId"] = self.resourceRegionId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AccessInstanceId"] as? String {
                self.accessInstanceId = value
            }
            if let value = dict["AccessPortAndProtocols"] as? [Any?] {
                var tmp : [DescribeProductInstancesResponseBody.ProductInstances.AccessPortAndProtocols] = []
                for v in value {
                    if v != nil {
                        var model = DescribeProductInstancesResponseBody.ProductInstances.AccessPortAndProtocols()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.accessPortAndProtocols = tmp
            }
            if let value = dict["AccessPorts"] as? [Int32] {
                self.accessPorts = value
            }
            if let value = dict["OwnerUserId"] as? String {
                self.ownerUserId = value
            }
            if let value = dict["ResourceInstanceAccessStatus"] as? String {
                self.resourceInstanceAccessStatus = value
            }
            if let value = dict["ResourceInstanceEdition"] as? String {
                self.resourceInstanceEdition = value
            }
            if let value = dict["ResourceInstanceId"] as? String {
                self.resourceInstanceId = value
            }
            if let value = dict["ResourceInstanceIp"] as? String {
                self.resourceInstanceIp = value
            }
            if let value = dict["ResourceInstanceName"] as? String {
                self.resourceInstanceName = value
            }
            if let value = dict["ResourceIp"] as? String {
                self.resourceIp = value
            }
            if let value = dict["ResourceName"] as? String {
                self.resourceName = value
            }
            if let value = dict["ResourcePorts"] as? [Any?] {
                var tmp : [DescribeProductInstancesResponseBody.ProductInstances.ResourcePorts] = []
                for v in value {
                    if v != nil {
                        var model = DescribeProductInstancesResponseBody.ProductInstances.ResourcePorts()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.resourcePorts = tmp
            }
            if let value = dict["ResourceProduct"] as? String {
                self.resourceProduct = value
            }
            if let value = dict["ResourceRegionId"] as? String {
                self.resourceRegionId = value
            }
        }
    }
    public var productInstances: [DescribeProductInstancesResponseBody.ProductInstances]?

    public var requestId: String?

    public var totalCount: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.productInstances != nil {
            var tmp : [Any] = []
            for k in self.productInstances! {
                tmp.append(k.toMap())
            }
            map["ProductInstances"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ProductInstances"] as? [Any?] {
            var tmp : [DescribeProductInstancesResponseBody.ProductInstances] = []
            for v in value {
                if v != nil {
                    var model = DescribeProductInstancesResponseBody.ProductInstances()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.productInstances = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int64 {
            self.totalCount = value
        }
    }
}

public class DescribeProductInstancesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeProductInstancesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeProductInstancesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribePunishedDomainsRequest : Tea.TeaModel {
    public var domains: [String]?

    public var instanceId: String?

    public var punishType: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.domains != nil {
            map["Domains"] = self.domains!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.punishType != nil {
            map["PunishType"] = self.punishType!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Domains"] as? [String] {
            self.domains = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["PunishType"] as? String {
            self.punishType = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class DescribePunishedDomainsResponseBody : Tea.TeaModel {
    public var punishedDomains: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.punishedDomains != nil {
            map["PunishedDomains"] = self.punishedDomains!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PunishedDomains"] as? [String] {
            self.punishedDomains = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribePunishedDomainsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribePunishedDomainsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribePunishedDomainsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeResourceInstanceCertsRequest : Tea.TeaModel {
    public var instanceId: String?

    public var pageNumber: Int64?

    public var pageSize: Int64?

    public var regionId: String?

    public var resourceInstanceId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceInstanceId != nil {
            map["ResourceInstanceId"] = self.resourceInstanceId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["PageNumber"] as? Int64 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceInstanceId"] as? String {
            self.resourceInstanceId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class DescribeResourceInstanceCertsResponseBody : Tea.TeaModel {
    public class Certs : Tea.TeaModel {
        public var afterDate: Int64?

        public var beforeDate: Int64?

        public var certIdentifier: String?

        public var certName: String?

        public var commonName: String?

        public var domain: String?

        public var isChainCompleted: Bool?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.afterDate != nil {
                map["AfterDate"] = self.afterDate!
            }
            if self.beforeDate != nil {
                map["BeforeDate"] = self.beforeDate!
            }
            if self.certIdentifier != nil {
                map["CertIdentifier"] = self.certIdentifier!
            }
            if self.certName != nil {
                map["CertName"] = self.certName!
            }
            if self.commonName != nil {
                map["CommonName"] = self.commonName!
            }
            if self.domain != nil {
                map["Domain"] = self.domain!
            }
            if self.isChainCompleted != nil {
                map["IsChainCompleted"] = self.isChainCompleted!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AfterDate"] as? Int64 {
                self.afterDate = value
            }
            if let value = dict["BeforeDate"] as? Int64 {
                self.beforeDate = value
            }
            if let value = dict["CertIdentifier"] as? String {
                self.certIdentifier = value
            }
            if let value = dict["CertName"] as? String {
                self.certName = value
            }
            if let value = dict["CommonName"] as? String {
                self.commonName = value
            }
            if let value = dict["Domain"] as? String {
                self.domain = value
            }
            if let value = dict["IsChainCompleted"] as? Bool {
                self.isChainCompleted = value
            }
        }
    }
    public var certs: [DescribeResourceInstanceCertsResponseBody.Certs]?

    public var requestId: String?

    public var totalCount: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.certs != nil {
            var tmp : [Any] = []
            for k in self.certs! {
                tmp.append(k.toMap())
            }
            map["Certs"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Certs"] as? [Any?] {
            var tmp : [DescribeResourceInstanceCertsResponseBody.Certs] = []
            for v in value {
                if v != nil {
                    var model = DescribeResourceInstanceCertsResponseBody.Certs()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.certs = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int64 {
            self.totalCount = value
        }
    }
}

public class DescribeResourceInstanceCertsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeResourceInstanceCertsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeResourceInstanceCertsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeResourceLogDeliveryStatusRequest : Tea.TeaModel {
    public var instanceId: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public var resources: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.resources != nil {
            map["Resources"] = self.resources!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["Resources"] as? String {
            self.resources = value
        }
    }
}

public class DescribeResourceLogDeliveryStatusResponseBody : Tea.TeaModel {
    public class LogConfigs : Tea.TeaModel {
        public var deliveryName: String?

        public var deliveryType: String?

        public var resource: String?

        public var status: Bool?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.deliveryName != nil {
                map["DeliveryName"] = self.deliveryName!
            }
            if self.deliveryType != nil {
                map["DeliveryType"] = self.deliveryType!
            }
            if self.resource != nil {
                map["Resource"] = self.resource!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DeliveryName"] as? String {
                self.deliveryName = value
            }
            if let value = dict["DeliveryType"] as? String {
                self.deliveryType = value
            }
            if let value = dict["Resource"] as? String {
                self.resource = value
            }
            if let value = dict["Status"] as? Bool {
                self.status = value
            }
        }
    }
    public var logConfigs: [DescribeResourceLogDeliveryStatusResponseBody.LogConfigs]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.logConfigs != nil {
            var tmp : [Any] = []
            for k in self.logConfigs! {
                tmp.append(k.toMap())
            }
            map["LogConfigs"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["LogConfigs"] as? [Any?] {
            var tmp : [DescribeResourceLogDeliveryStatusResponseBody.LogConfigs] = []
            for v in value {
                if v != nil {
                    var model = DescribeResourceLogDeliveryStatusResponseBody.LogConfigs()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.logConfigs = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeResourceLogDeliveryStatusResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeResourceLogDeliveryStatusResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeResourceLogDeliveryStatusResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeResourceLogFieldConfigRequest : Tea.TeaModel {
    public var deliveryType: String?

    public var instanceId: String?

    public var regionId: String?

    public var resource: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.deliveryType != nil {
            map["DeliveryType"] = self.deliveryType!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resource != nil {
            map["Resource"] = self.resource!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DeliveryType"] as? String {
            self.deliveryType = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Resource"] as? String {
            self.resource = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class DescribeResourceLogFieldConfigResponseBody : Tea.TeaModel {
    public var addList: String?

    public var delList: String?

    public var deliveryType: String?

    public var extendConfig: String?

    public var fieldList: String?

    public var logDeliveryStrategy: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.addList != nil {
            map["AddList"] = self.addList!
        }
        if self.delList != nil {
            map["DelList"] = self.delList!
        }
        if self.deliveryType != nil {
            map["DeliveryType"] = self.deliveryType!
        }
        if self.extendConfig != nil {
            map["ExtendConfig"] = self.extendConfig!
        }
        if self.fieldList != nil {
            map["FieldList"] = self.fieldList!
        }
        if self.logDeliveryStrategy != nil {
            map["LogDeliveryStrategy"] = self.logDeliveryStrategy!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AddList"] as? String {
            self.addList = value
        }
        if let value = dict["DelList"] as? String {
            self.delList = value
        }
        if let value = dict["DeliveryType"] as? String {
            self.deliveryType = value
        }
        if let value = dict["ExtendConfig"] as? String {
            self.extendConfig = value
        }
        if let value = dict["FieldList"] as? String {
            self.fieldList = value
        }
        if let value = dict["LogDeliveryStrategy"] as? String {
            self.logDeliveryStrategy = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeResourceLogFieldConfigResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeResourceLogFieldConfigResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeResourceLogFieldConfigResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeResourceLogStatusRequest : Tea.TeaModel {
    public var instanceId: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public var resources: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.resources != nil {
            map["Resources"] = self.resources!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["Resources"] as? String {
            self.resources = value
        }
    }
}

public class DescribeResourceLogStatusResponseBody : Tea.TeaModel {
    public class Result : Tea.TeaModel {
        public var resource: String?

        public var status: Bool?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.resource != nil {
                map["Resource"] = self.resource!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Resource"] as? String {
                self.resource = value
            }
            if let value = dict["Status"] as? Bool {
                self.status = value
            }
        }
    }
    public var requestId: String?

    public var result: [DescribeResourceLogStatusResponseBody.Result]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.result != nil {
            var tmp : [Any] = []
            for k in self.result! {
                tmp.append(k.toMap())
            }
            map["Result"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Result"] as? [Any?] {
            var tmp : [DescribeResourceLogStatusResponseBody.Result] = []
            for v in value {
                if v != nil {
                    var model = DescribeResourceLogStatusResponseBody.Result()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.result = tmp
        }
    }
}

public class DescribeResourceLogStatusResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeResourceLogStatusResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeResourceLogStatusResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeResourcePortRequest : Tea.TeaModel {
    public var instanceId: String?

    public var regionId: String?

    public var resourceInstanceId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceInstanceId != nil {
            map["ResourceInstanceId"] = self.resourceInstanceId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceInstanceId"] as? String {
            self.resourceInstanceId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class DescribeResourcePortResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resourcePorts: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resourcePorts != nil {
            map["ResourcePorts"] = self.resourcePorts!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["ResourcePorts"] as? [String] {
            self.resourcePorts = value
        }
    }
}

public class DescribeResourcePortResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeResourcePortResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeResourcePortResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeResourceRegionIdRequest : Tea.TeaModel {
    public var instanceId: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class DescribeResourceRegionIdResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var resourceRegionIds: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resourceRegionIds != nil {
            map["ResourceRegionIds"] = self.resourceRegionIds!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["ResourceRegionIds"] as? [String] {
            self.resourceRegionIds = value
        }
    }
}

public class DescribeResourceRegionIdResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeResourceRegionIdResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeResourceRegionIdResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeResourceSupportRegionsRequest : Tea.TeaModel {
    public var instanceId: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public var resourceProduct: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.resourceProduct != nil {
            map["ResourceProduct"] = self.resourceProduct!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["ResourceProduct"] as? String {
            self.resourceProduct = value
        }
    }
}

public class DescribeResourceSupportRegionsResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var supportRegions: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.supportRegions != nil {
            map["SupportRegions"] = self.supportRegions!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SupportRegions"] as? [String] {
            self.supportRegions = value
        }
    }
}

public class DescribeResourceSupportRegionsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeResourceSupportRegionsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeResourceSupportRegionsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeResponseCodeTrendGraphRequest : Tea.TeaModel {
    public var endTimestamp: String?

    public var instanceId: String?

    public var interval: String?

    public var regionId: String?

    public var resource: String?

    public var resourceManagerResourceGroupId: String?

    public var startTimestamp: String?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTimestamp != nil {
            map["EndTimestamp"] = self.endTimestamp!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.interval != nil {
            map["Interval"] = self.interval!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resource != nil {
            map["Resource"] = self.resource!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.startTimestamp != nil {
            map["StartTimestamp"] = self.startTimestamp!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTimestamp"] as? String {
            self.endTimestamp = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["Interval"] as? String {
            self.interval = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Resource"] as? String {
            self.resource = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["StartTimestamp"] as? String {
            self.startTimestamp = value
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
    }
}

public class DescribeResponseCodeTrendGraphResponseBody : Tea.TeaModel {
    public class ResponseCodes : Tea.TeaModel {
        public var code302Pv: Int64?

        public var code405Pv: Int64?

        public var code444Pv: Int64?

        public var code499Pv: Int64?

        public var code5xxPv: Int64?

        public var index: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.code302Pv != nil {
                map["302Pv"] = self.code302Pv!
            }
            if self.code405Pv != nil {
                map["405Pv"] = self.code405Pv!
            }
            if self.code444Pv != nil {
                map["444Pv"] = self.code444Pv!
            }
            if self.code499Pv != nil {
                map["499Pv"] = self.code499Pv!
            }
            if self.code5xxPv != nil {
                map["5xxPv"] = self.code5xxPv!
            }
            if self.index != nil {
                map["Index"] = self.index!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["302Pv"] as? Int64 {
                self.code302Pv = value
            }
            if let value = dict["405Pv"] as? Int64 {
                self.code405Pv = value
            }
            if let value = dict["444Pv"] as? Int64 {
                self.code444Pv = value
            }
            if let value = dict["499Pv"] as? Int64 {
                self.code499Pv = value
            }
            if let value = dict["5xxPv"] as? Int64 {
                self.code5xxPv = value
            }
            if let value = dict["Index"] as? Int64 {
                self.index = value
            }
        }
    }
    public var requestId: String?

    public var responseCodes: [DescribeResponseCodeTrendGraphResponseBody.ResponseCodes]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.responseCodes != nil {
            var tmp : [Any] = []
            for k in self.responseCodes! {
                tmp.append(k.toMap())
            }
            map["ResponseCodes"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["ResponseCodes"] as? [Any?] {
            var tmp : [DescribeResponseCodeTrendGraphResponseBody.ResponseCodes] = []
            for v in value {
                if v != nil {
                    var model = DescribeResponseCodeTrendGraphResponseBody.ResponseCodes()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.responseCodes = tmp
        }
    }
}

public class DescribeResponseCodeTrendGraphResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeResponseCodeTrendGraphResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeResponseCodeTrendGraphResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeRoleAuthStatusRequest : Tea.TeaModel {
    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class DescribeRoleAuthStatusResponseBody : Tea.TeaModel {
    public var authStatus: Bool?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.authStatus != nil {
            map["AuthStatus"] = self.authStatus!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AuthStatus"] as? Bool {
            self.authStatus = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeRoleAuthStatusResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeRoleAuthStatusResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeRoleAuthStatusResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeRuleGroupsRequest : Tea.TeaModel {
    public var instanceId: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public var searchType: String?

    public var searchValue: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.searchType != nil {
            map["SearchType"] = self.searchType!
        }
        if self.searchValue != nil {
            map["SearchValue"] = self.searchValue!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["SearchType"] as? String {
            self.searchType = value
        }
        if let value = dict["SearchValue"] as? String {
            self.searchValue = value
        }
    }
}

public class DescribeRuleGroupsResponseBody : Tea.TeaModel {
    public class RuleGroups : Tea.TeaModel {
        public var gmtModified: Int64?

        public var isSubscribe: Int32?

        public var parentRuleGroupId: Int64?

        public var ruleGroupId: Int64?

        public var ruleGroupName: String?

        public var ruleTotalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.gmtModified != nil {
                map["GmtModified"] = self.gmtModified!
            }
            if self.isSubscribe != nil {
                map["IsSubscribe"] = self.isSubscribe!
            }
            if self.parentRuleGroupId != nil {
                map["ParentRuleGroupId"] = self.parentRuleGroupId!
            }
            if self.ruleGroupId != nil {
                map["RuleGroupId"] = self.ruleGroupId!
            }
            if self.ruleGroupName != nil {
                map["RuleGroupName"] = self.ruleGroupName!
            }
            if self.ruleTotalCount != nil {
                map["RuleTotalCount"] = self.ruleTotalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["GmtModified"] as? Int64 {
                self.gmtModified = value
            }
            if let value = dict["IsSubscribe"] as? Int32 {
                self.isSubscribe = value
            }
            if let value = dict["ParentRuleGroupId"] as? Int64 {
                self.parentRuleGroupId = value
            }
            if let value = dict["RuleGroupId"] as? Int64 {
                self.ruleGroupId = value
            }
            if let value = dict["RuleGroupName"] as? String {
                self.ruleGroupName = value
            }
            if let value = dict["RuleTotalCount"] as? Int32 {
                self.ruleTotalCount = value
            }
        }
    }
    public var requestId: String?

    public var ruleGroups: [DescribeRuleGroupsResponseBody.RuleGroups]?

    public var totalCount: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.ruleGroups != nil {
            var tmp : [Any] = []
            for k in self.ruleGroups! {
                tmp.append(k.toMap())
            }
            map["RuleGroups"] = tmp
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["RuleGroups"] as? [Any?] {
            var tmp : [DescribeRuleGroupsResponseBody.RuleGroups] = []
            for v in value {
                if v != nil {
                    var model = DescribeRuleGroupsResponseBody.RuleGroups()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.ruleGroups = tmp
        }
        if let value = dict["TotalCount"] as? Int64 {
            self.totalCount = value
        }
    }
}

public class DescribeRuleGroupsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeRuleGroupsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeRuleGroupsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeRuleHitsTopClientIpRequest : Tea.TeaModel {
    public var endTimestamp: String?

    public var instanceId: String?

    public var regionId: String?

    public var resource: String?

    public var resourceManagerResourceGroupId: String?

    public var ruleType: String?

    public var startTimestamp: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTimestamp != nil {
            map["EndTimestamp"] = self.endTimestamp!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resource != nil {
            map["Resource"] = self.resource!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.ruleType != nil {
            map["RuleType"] = self.ruleType!
        }
        if self.startTimestamp != nil {
            map["StartTimestamp"] = self.startTimestamp!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTimestamp"] as? String {
            self.endTimestamp = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Resource"] as? String {
            self.resource = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["RuleType"] as? String {
            self.ruleType = value
        }
        if let value = dict["StartTimestamp"] as? String {
            self.startTimestamp = value
        }
    }
}

public class DescribeRuleHitsTopClientIpResponseBody : Tea.TeaModel {
    public class RuleHitsTopClientIp : Tea.TeaModel {
        public var clientIp: String?

        public var count: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.clientIp != nil {
                map["ClientIp"] = self.clientIp!
            }
            if self.count != nil {
                map["Count"] = self.count!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ClientIp"] as? String {
                self.clientIp = value
            }
            if let value = dict["Count"] as? Int64 {
                self.count = value
            }
        }
    }
    public var requestId: String?

    public var ruleHitsTopClientIp: [DescribeRuleHitsTopClientIpResponseBody.RuleHitsTopClientIp]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.ruleHitsTopClientIp != nil {
            var tmp : [Any] = []
            for k in self.ruleHitsTopClientIp! {
                tmp.append(k.toMap())
            }
            map["RuleHitsTopClientIp"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["RuleHitsTopClientIp"] as? [Any?] {
            var tmp : [DescribeRuleHitsTopClientIpResponseBody.RuleHitsTopClientIp] = []
            for v in value {
                if v != nil {
                    var model = DescribeRuleHitsTopClientIpResponseBody.RuleHitsTopClientIp()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.ruleHitsTopClientIp = tmp
        }
    }
}

public class DescribeRuleHitsTopClientIpResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeRuleHitsTopClientIpResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeRuleHitsTopClientIpResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeRuleHitsTopResourceRequest : Tea.TeaModel {
    public var endTimestamp: String?

    public var instanceId: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public var ruleType: String?

    public var startTimestamp: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTimestamp != nil {
            map["EndTimestamp"] = self.endTimestamp!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.ruleType != nil {
            map["RuleType"] = self.ruleType!
        }
        if self.startTimestamp != nil {
            map["StartTimestamp"] = self.startTimestamp!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTimestamp"] as? String {
            self.endTimestamp = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["RuleType"] as? String {
            self.ruleType = value
        }
        if let value = dict["StartTimestamp"] as? String {
            self.startTimestamp = value
        }
    }
}

public class DescribeRuleHitsTopResourceResponseBody : Tea.TeaModel {
    public class RuleHitsTopResource : Tea.TeaModel {
        public var count: Int64?

        public var resource: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.count != nil {
                map["Count"] = self.count!
            }
            if self.resource != nil {
                map["Resource"] = self.resource!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Count"] as? Int64 {
                self.count = value
            }
            if let value = dict["Resource"] as? String {
                self.resource = value
            }
        }
    }
    public var requestId: String?

    public var ruleHitsTopResource: [DescribeRuleHitsTopResourceResponseBody.RuleHitsTopResource]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.ruleHitsTopResource != nil {
            var tmp : [Any] = []
            for k in self.ruleHitsTopResource! {
                tmp.append(k.toMap())
            }
            map["RuleHitsTopResource"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["RuleHitsTopResource"] as? [Any?] {
            var tmp : [DescribeRuleHitsTopResourceResponseBody.RuleHitsTopResource] = []
            for v in value {
                if v != nil {
                    var model = DescribeRuleHitsTopResourceResponseBody.RuleHitsTopResource()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.ruleHitsTopResource = tmp
        }
    }
}

public class DescribeRuleHitsTopResourceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeRuleHitsTopResourceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeRuleHitsTopResourceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeRuleHitsTopRuleIdRequest : Tea.TeaModel {
    public var endTimestamp: String?

    public var instanceId: String?

    public var isGroupResource: String?

    public var regionId: String?

    public var resource: String?

    public var resourceManagerResourceGroupId: String?

    public var ruleType: String?

    public var startTimestamp: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTimestamp != nil {
            map["EndTimestamp"] = self.endTimestamp!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.isGroupResource != nil {
            map["IsGroupResource"] = self.isGroupResource!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resource != nil {
            map["Resource"] = self.resource!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.ruleType != nil {
            map["RuleType"] = self.ruleType!
        }
        if self.startTimestamp != nil {
            map["StartTimestamp"] = self.startTimestamp!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTimestamp"] as? String {
            self.endTimestamp = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["IsGroupResource"] as? String {
            self.isGroupResource = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Resource"] as? String {
            self.resource = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["RuleType"] as? String {
            self.ruleType = value
        }
        if let value = dict["StartTimestamp"] as? String {
            self.startTimestamp = value
        }
    }
}

public class DescribeRuleHitsTopRuleIdResponseBody : Tea.TeaModel {
    public class RuleHitsTopRuleId : Tea.TeaModel {
        public var count: Int64?

        public var resource: String?

        public var ruleId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.count != nil {
                map["Count"] = self.count!
            }
            if self.resource != nil {
                map["Resource"] = self.resource!
            }
            if self.ruleId != nil {
                map["RuleId"] = self.ruleId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Count"] as? Int64 {
                self.count = value
            }
            if let value = dict["Resource"] as? String {
                self.resource = value
            }
            if let value = dict["RuleId"] as? String {
                self.ruleId = value
            }
        }
    }
    public var requestId: String?

    public var ruleHitsTopRuleId: [DescribeRuleHitsTopRuleIdResponseBody.RuleHitsTopRuleId]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.ruleHitsTopRuleId != nil {
            var tmp : [Any] = []
            for k in self.ruleHitsTopRuleId! {
                tmp.append(k.toMap())
            }
            map["RuleHitsTopRuleId"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["RuleHitsTopRuleId"] as? [Any?] {
            var tmp : [DescribeRuleHitsTopRuleIdResponseBody.RuleHitsTopRuleId] = []
            for v in value {
                if v != nil {
                    var model = DescribeRuleHitsTopRuleIdResponseBody.RuleHitsTopRuleId()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.ruleHitsTopRuleId = tmp
        }
    }
}

public class DescribeRuleHitsTopRuleIdResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeRuleHitsTopRuleIdResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeRuleHitsTopRuleIdResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeRuleHitsTopTuleTypeRequest : Tea.TeaModel {
    public var endTimestamp: String?

    public var instanceId: String?

    public var regionId: String?

    public var resource: String?

    public var resourceManagerResourceGroupId: String?

    public var startTimestamp: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTimestamp != nil {
            map["EndTimestamp"] = self.endTimestamp!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resource != nil {
            map["Resource"] = self.resource!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.startTimestamp != nil {
            map["StartTimestamp"] = self.startTimestamp!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTimestamp"] as? String {
            self.endTimestamp = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Resource"] as? String {
            self.resource = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["StartTimestamp"] as? String {
            self.startTimestamp = value
        }
    }
}

public class DescribeRuleHitsTopTuleTypeResponseBody : Tea.TeaModel {
    public class RuleHitsTopTuleType : Tea.TeaModel {
        public var count: Int64?

        public var ruleType: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.count != nil {
                map["Count"] = self.count!
            }
            if self.ruleType != nil {
                map["RuleType"] = self.ruleType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Count"] as? Int64 {
                self.count = value
            }
            if let value = dict["RuleType"] as? String {
                self.ruleType = value
            }
        }
    }
    public var requestId: String?

    public var ruleHitsTopTuleType: [DescribeRuleHitsTopTuleTypeResponseBody.RuleHitsTopTuleType]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.ruleHitsTopTuleType != nil {
            var tmp : [Any] = []
            for k in self.ruleHitsTopTuleType! {
                tmp.append(k.toMap())
            }
            map["RuleHitsTopTuleType"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["RuleHitsTopTuleType"] as? [Any?] {
            var tmp : [DescribeRuleHitsTopTuleTypeResponseBody.RuleHitsTopTuleType] = []
            for v in value {
                if v != nil {
                    var model = DescribeRuleHitsTopTuleTypeResponseBody.RuleHitsTopTuleType()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.ruleHitsTopTuleType = tmp
        }
    }
}

public class DescribeRuleHitsTopTuleTypeResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeRuleHitsTopTuleTypeResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeRuleHitsTopTuleTypeResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeRuleHitsTopUaRequest : Tea.TeaModel {
    public var endTimestamp: String?

    public var instanceId: String?

    public var regionId: String?

    public var resource: String?

    public var resourceManagerResourceGroupId: String?

    public var startTimestamp: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTimestamp != nil {
            map["EndTimestamp"] = self.endTimestamp!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resource != nil {
            map["Resource"] = self.resource!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.startTimestamp != nil {
            map["StartTimestamp"] = self.startTimestamp!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTimestamp"] as? String {
            self.endTimestamp = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Resource"] as? String {
            self.resource = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["StartTimestamp"] as? String {
            self.startTimestamp = value
        }
    }
}

public class DescribeRuleHitsTopUaResponseBody : Tea.TeaModel {
    public class RuleHitsTopUa : Tea.TeaModel {
        public var count: Int64?

        public var ua: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.count != nil {
                map["Count"] = self.count!
            }
            if self.ua != nil {
                map["Ua"] = self.ua!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Count"] as? Int64 {
                self.count = value
            }
            if let value = dict["Ua"] as? String {
                self.ua = value
            }
        }
    }
    public var requestId: String?

    public var ruleHitsTopUa: [DescribeRuleHitsTopUaResponseBody.RuleHitsTopUa]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.ruleHitsTopUa != nil {
            var tmp : [Any] = []
            for k in self.ruleHitsTopUa! {
                tmp.append(k.toMap())
            }
            map["RuleHitsTopUa"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["RuleHitsTopUa"] as? [Any?] {
            var tmp : [DescribeRuleHitsTopUaResponseBody.RuleHitsTopUa] = []
            for v in value {
                if v != nil {
                    var model = DescribeRuleHitsTopUaResponseBody.RuleHitsTopUa()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.ruleHitsTopUa = tmp
        }
    }
}

public class DescribeRuleHitsTopUaResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeRuleHitsTopUaResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeRuleHitsTopUaResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeRuleHitsTopUrlRequest : Tea.TeaModel {
    public var endTimestamp: String?

    public var instanceId: String?

    public var regionId: String?

    public var resource: String?

    public var resourceManagerResourceGroupId: String?

    public var ruleType: String?

    public var startTimestamp: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTimestamp != nil {
            map["EndTimestamp"] = self.endTimestamp!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resource != nil {
            map["Resource"] = self.resource!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.ruleType != nil {
            map["RuleType"] = self.ruleType!
        }
        if self.startTimestamp != nil {
            map["StartTimestamp"] = self.startTimestamp!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTimestamp"] as? String {
            self.endTimestamp = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Resource"] as? String {
            self.resource = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["RuleType"] as? String {
            self.ruleType = value
        }
        if let value = dict["StartTimestamp"] as? String {
            self.startTimestamp = value
        }
    }
}

public class DescribeRuleHitsTopUrlResponseBody : Tea.TeaModel {
    public class RuleHitsTopUrl : Tea.TeaModel {
        public var count: Int64?

        public var url: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.count != nil {
                map["Count"] = self.count!
            }
            if self.url != nil {
                map["Url"] = self.url!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Count"] as? Int64 {
                self.count = value
            }
            if let value = dict["Url"] as? String {
                self.url = value
            }
        }
    }
    public var requestId: String?

    public var ruleHitsTopUrl: [DescribeRuleHitsTopUrlResponseBody.RuleHitsTopUrl]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.ruleHitsTopUrl != nil {
            var tmp : [Any] = []
            for k in self.ruleHitsTopUrl! {
                tmp.append(k.toMap())
            }
            map["RuleHitsTopUrl"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["RuleHitsTopUrl"] as? [Any?] {
            var tmp : [DescribeRuleHitsTopUrlResponseBody.RuleHitsTopUrl] = []
            for v in value {
                if v != nil {
                    var model = DescribeRuleHitsTopUrlResponseBody.RuleHitsTopUrl()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.ruleHitsTopUrl = tmp
        }
    }
}

public class DescribeRuleHitsTopUrlResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeRuleHitsTopUrlResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeRuleHitsTopUrlResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeSecurityEventLogsRequest : Tea.TeaModel {
    public class Filter : Tea.TeaModel {
        public class Conditions : Tea.TeaModel {
            public var key: String?

            public var opValue: String?

            public var values: Any?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.key != nil {
                    map["Key"] = self.key!
                }
                if self.opValue != nil {
                    map["OpValue"] = self.opValue!
                }
                if self.values != nil {
                    map["Values"] = self.values!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Key"] as? String {
                    self.key = value
                }
                if let value = dict["OpValue"] as? String {
                    self.opValue = value
                }
                if let value = dict["Values"] as? Any {
                    self.values = value
                }
            }
        }
        public class DateRange : Tea.TeaModel {
            public var endDate: Int64?

            public var startDate: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.endDate != nil {
                    map["EndDate"] = self.endDate!
                }
                if self.startDate != nil {
                    map["StartDate"] = self.startDate!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["EndDate"] as? Int64 {
                    self.endDate = value
                }
                if let value = dict["StartDate"] as? Int64 {
                    self.startDate = value
                }
            }
        }
        public var conditions: [DescribeSecurityEventLogsRequest.Filter.Conditions]?

        public var dateRange: DescribeSecurityEventLogsRequest.Filter.DateRange?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.dateRange?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.conditions != nil {
                var tmp : [Any] = []
                for k in self.conditions! {
                    tmp.append(k.toMap())
                }
                map["Conditions"] = tmp
            }
            if self.dateRange != nil {
                map["DateRange"] = self.dateRange?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Conditions"] as? [Any?] {
                var tmp : [DescribeSecurityEventLogsRequest.Filter.Conditions] = []
                for v in value {
                    if v != nil {
                        var model = DescribeSecurityEventLogsRequest.Filter.Conditions()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.conditions = tmp
            }
            if let value = dict["DateRange"] as? [String: Any?] {
                var model = DescribeSecurityEventLogsRequest.Filter.DateRange()
                model.fromMap(value)
                self.dateRange = model
            }
        }
    }
    public var filter: DescribeSecurityEventLogsRequest.Filter?

    public var instanceId: String?

    public var pageNumber: Int64?

    public var pageSize: Int64?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.filter?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.filter != nil {
            map["Filter"] = self.filter?.toMap()
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Filter"] as? [String: Any?] {
            var model = DescribeSecurityEventLogsRequest.Filter()
            model.fromMap(value)
            self.filter = model
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["PageNumber"] as? Int64 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class DescribeSecurityEventLogsShrinkRequest : Tea.TeaModel {
    public var filterShrink: String?

    public var instanceId: String?

    public var pageNumber: Int64?

    public var pageSize: Int64?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.filterShrink != nil {
            map["Filter"] = self.filterShrink!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Filter"] as? String {
            self.filterShrink = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["PageNumber"] as? Int64 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class DescribeSecurityEventLogsResponseBody : Tea.TeaModel {
    public class SecurityEventMetaData : Tea.TeaModel {
        public class DateRange : Tea.TeaModel {
            public var endDate: Int64?

            public var startDate: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.endDate != nil {
                    map["EndDate"] = self.endDate!
                }
                if self.startDate != nil {
                    map["StartDate"] = self.startDate!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["EndDate"] as? Int64 {
                    self.endDate = value
                }
                if let value = dict["StartDate"] as? Int64 {
                    self.startDate = value
                }
            }
        }
        public var dateRange: DescribeSecurityEventLogsResponseBody.SecurityEventMetaData.DateRange?

        public var units: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.dateRange?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.dateRange != nil {
                map["DateRange"] = self.dateRange?.toMap()
            }
            if self.units != nil {
                map["Units"] = self.units!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DateRange"] as? [String: Any?] {
                var model = DescribeSecurityEventLogsResponseBody.SecurityEventMetaData.DateRange()
                model.fromMap(value)
                self.dateRange = model
            }
            if let value = dict["Units"] as? String {
                self.units = value
            }
        }
    }
    public var requestId: String?

    public var securityEventLogs: [Any]?

    public var securityEventLogsTotalCount: Int64?

    public var securityEventMetaData: DescribeSecurityEventLogsResponseBody.SecurityEventMetaData?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.securityEventMetaData?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.securityEventLogs != nil {
            map["SecurityEventLogs"] = self.securityEventLogs!
        }
        if self.securityEventLogsTotalCount != nil {
            map["SecurityEventLogsTotalCount"] = self.securityEventLogsTotalCount!
        }
        if self.securityEventMetaData != nil {
            map["SecurityEventMetaData"] = self.securityEventMetaData?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SecurityEventLogs"] as? [Any] {
            self.securityEventLogs = value
        }
        if let value = dict["SecurityEventLogsTotalCount"] as? Int64 {
            self.securityEventLogsTotalCount = value
        }
        if let value = dict["SecurityEventMetaData"] as? [String: Any?] {
            var model = DescribeSecurityEventLogsResponseBody.SecurityEventMetaData()
            model.fromMap(value)
            self.securityEventMetaData = model
        }
    }
}

public class DescribeSecurityEventLogsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeSecurityEventLogsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeSecurityEventLogsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeSecurityEventTimeSeriesMetricRequest : Tea.TeaModel {
    public class Filter : Tea.TeaModel {
        public class Conditions : Tea.TeaModel {
            public var key: String?

            public var opValue: String?

            public var values: Any?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.key != nil {
                    map["Key"] = self.key!
                }
                if self.opValue != nil {
                    map["OpValue"] = self.opValue!
                }
                if self.values != nil {
                    map["Values"] = self.values!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Key"] as? String {
                    self.key = value
                }
                if let value = dict["OpValue"] as? String {
                    self.opValue = value
                }
                if let value = dict["Values"] as? Any {
                    self.values = value
                }
            }
        }
        public class DateRange : Tea.TeaModel {
            public var endDate: Int64?

            public var startDate: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.endDate != nil {
                    map["EndDate"] = self.endDate!
                }
                if self.startDate != nil {
                    map["StartDate"] = self.startDate!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["EndDate"] as? Int64 {
                    self.endDate = value
                }
                if let value = dict["StartDate"] as? Int64 {
                    self.startDate = value
                }
            }
        }
        public var conditions: [DescribeSecurityEventTimeSeriesMetricRequest.Filter.Conditions]?

        public var dateRange: DescribeSecurityEventTimeSeriesMetricRequest.Filter.DateRange?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.dateRange?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.conditions != nil {
                var tmp : [Any] = []
                for k in self.conditions! {
                    tmp.append(k.toMap())
                }
                map["Conditions"] = tmp
            }
            if self.dateRange != nil {
                map["DateRange"] = self.dateRange?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Conditions"] as? [Any?] {
                var tmp : [DescribeSecurityEventTimeSeriesMetricRequest.Filter.Conditions] = []
                for v in value {
                    if v != nil {
                        var model = DescribeSecurityEventTimeSeriesMetricRequest.Filter.Conditions()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.conditions = tmp
            }
            if let value = dict["DateRange"] as? [String: Any?] {
                var model = DescribeSecurityEventTimeSeriesMetricRequest.Filter.DateRange()
                model.fromMap(value)
                self.dateRange = model
            }
        }
    }
    public var filter: DescribeSecurityEventTimeSeriesMetricRequest.Filter?

    public var instanceId: String?

    public var metric: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.filter?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.filter != nil {
            map["Filter"] = self.filter?.toMap()
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.metric != nil {
            map["Metric"] = self.metric!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Filter"] as? [String: Any?] {
            var model = DescribeSecurityEventTimeSeriesMetricRequest.Filter()
            model.fromMap(value)
            self.filter = model
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["Metric"] as? String {
            self.metric = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class DescribeSecurityEventTimeSeriesMetricShrinkRequest : Tea.TeaModel {
    public var filterShrink: String?

    public var instanceId: String?

    public var metric: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.filterShrink != nil {
            map["Filter"] = self.filterShrink!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.metric != nil {
            map["Metric"] = self.metric!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Filter"] as? String {
            self.filterShrink = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["Metric"] as? String {
            self.metric = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class DescribeSecurityEventTimeSeriesMetricResponseBody : Tea.TeaModel {
    public class SecurityEventTimeSeries : Tea.TeaModel {
        public var metric: String?

        public var timestamps: [String]?

        public var values: [Int64]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.metric != nil {
                map["Metric"] = self.metric!
            }
            if self.timestamps != nil {
                map["Timestamps"] = self.timestamps!
            }
            if self.values != nil {
                map["Values"] = self.values!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Metric"] as? String {
                self.metric = value
            }
            if let value = dict["Timestamps"] as? [String] {
                self.timestamps = value
            }
            if let value = dict["Values"] as? [Int64] {
                self.values = value
            }
        }
    }
    public class TimeSeriesMetaData : Tea.TeaModel {
        public class DateRange : Tea.TeaModel {
            public var endDate: Int64?

            public var startDate: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.endDate != nil {
                    map["EndDate"] = self.endDate!
                }
                if self.startDate != nil {
                    map["StartDate"] = self.startDate!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["EndDate"] as? Int64 {
                    self.endDate = value
                }
                if let value = dict["StartDate"] as? Int64 {
                    self.startDate = value
                }
            }
        }
        public var aggregateInterval: String?

        public var dateRange: DescribeSecurityEventTimeSeriesMetricResponseBody.TimeSeriesMetaData.DateRange?

        public var units: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.dateRange?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.aggregateInterval != nil {
                map["AggregateInterval"] = self.aggregateInterval!
            }
            if self.dateRange != nil {
                map["DateRange"] = self.dateRange?.toMap()
            }
            if self.units != nil {
                map["Units"] = self.units!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AggregateInterval"] as? String {
                self.aggregateInterval = value
            }
            if let value = dict["DateRange"] as? [String: Any?] {
                var model = DescribeSecurityEventTimeSeriesMetricResponseBody.TimeSeriesMetaData.DateRange()
                model.fromMap(value)
                self.dateRange = model
            }
            if let value = dict["Units"] as? String {
                self.units = value
            }
        }
    }
    public var requestId: String?

    public var securityEventTimeSeries: [DescribeSecurityEventTimeSeriesMetricResponseBody.SecurityEventTimeSeries]?

    public var timeSeriesMetaData: DescribeSecurityEventTimeSeriesMetricResponseBody.TimeSeriesMetaData?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.timeSeriesMetaData?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.securityEventTimeSeries != nil {
            var tmp : [Any] = []
            for k in self.securityEventTimeSeries! {
                tmp.append(k.toMap())
            }
            map["SecurityEventTimeSeries"] = tmp
        }
        if self.timeSeriesMetaData != nil {
            map["TimeSeriesMetaData"] = self.timeSeriesMetaData?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SecurityEventTimeSeries"] as? [Any?] {
            var tmp : [DescribeSecurityEventTimeSeriesMetricResponseBody.SecurityEventTimeSeries] = []
            for v in value {
                if v != nil {
                    var model = DescribeSecurityEventTimeSeriesMetricResponseBody.SecurityEventTimeSeries()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.securityEventTimeSeries = tmp
        }
        if let value = dict["TimeSeriesMetaData"] as? [String: Any?] {
            var model = DescribeSecurityEventTimeSeriesMetricResponseBody.TimeSeriesMetaData()
            model.fromMap(value)
            self.timeSeriesMetaData = model
        }
    }
}

public class DescribeSecurityEventTimeSeriesMetricResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeSecurityEventTimeSeriesMetricResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeSecurityEventTimeSeriesMetricResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeSecurityEventTopNMetricRequest : Tea.TeaModel {
    public class Filter : Tea.TeaModel {
        public class Conditions : Tea.TeaModel {
            public var key: String?

            public var opValue: String?

            public var values: Any?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.key != nil {
                    map["Key"] = self.key!
                }
                if self.opValue != nil {
                    map["OpValue"] = self.opValue!
                }
                if self.values != nil {
                    map["Values"] = self.values!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Key"] as? String {
                    self.key = value
                }
                if let value = dict["OpValue"] as? String {
                    self.opValue = value
                }
                if let value = dict["Values"] as? Any {
                    self.values = value
                }
            }
        }
        public class DateRange : Tea.TeaModel {
            public var endDate: Int64?

            public var startDate: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.endDate != nil {
                    map["EndDate"] = self.endDate!
                }
                if self.startDate != nil {
                    map["StartDate"] = self.startDate!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["EndDate"] as? Int64 {
                    self.endDate = value
                }
                if let value = dict["StartDate"] as? Int64 {
                    self.startDate = value
                }
            }
        }
        public var conditions: [DescribeSecurityEventTopNMetricRequest.Filter.Conditions]?

        public var dateRange: DescribeSecurityEventTopNMetricRequest.Filter.DateRange?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.dateRange?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.conditions != nil {
                var tmp : [Any] = []
                for k in self.conditions! {
                    tmp.append(k.toMap())
                }
                map["Conditions"] = tmp
            }
            if self.dateRange != nil {
                map["DateRange"] = self.dateRange?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Conditions"] as? [Any?] {
                var tmp : [DescribeSecurityEventTopNMetricRequest.Filter.Conditions] = []
                for v in value {
                    if v != nil {
                        var model = DescribeSecurityEventTopNMetricRequest.Filter.Conditions()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.conditions = tmp
            }
            if let value = dict["DateRange"] as? [String: Any?] {
                var model = DescribeSecurityEventTopNMetricRequest.Filter.DateRange()
                model.fromMap(value)
                self.dateRange = model
            }
        }
    }
    public var filter: DescribeSecurityEventTopNMetricRequest.Filter?

    public var instanceId: String?

    public var limit: Int64?

    public var metric: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.filter?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.filter != nil {
            map["Filter"] = self.filter?.toMap()
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.limit != nil {
            map["Limit"] = self.limit!
        }
        if self.metric != nil {
            map["Metric"] = self.metric!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Filter"] as? [String: Any?] {
            var model = DescribeSecurityEventTopNMetricRequest.Filter()
            model.fromMap(value)
            self.filter = model
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["Limit"] as? Int64 {
            self.limit = value
        }
        if let value = dict["Metric"] as? String {
            self.metric = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class DescribeSecurityEventTopNMetricShrinkRequest : Tea.TeaModel {
    public var filterShrink: String?

    public var instanceId: String?

    public var limit: Int64?

    public var metric: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.filterShrink != nil {
            map["Filter"] = self.filterShrink!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.limit != nil {
            map["Limit"] = self.limit!
        }
        if self.metric != nil {
            map["Metric"] = self.metric!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Filter"] as? String {
            self.filterShrink = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["Limit"] as? Int64 {
            self.limit = value
        }
        if let value = dict["Metric"] as? String {
            self.metric = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class DescribeSecurityEventTopNMetricResponseBody : Tea.TeaModel {
    public class SecurityEventTopNValues : Tea.TeaModel {
        public var attribute: String?

        public var name: String?

        public var value: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.attribute != nil {
                map["Attribute"] = self.attribute!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Attribute"] as? String {
                self.attribute = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["Value"] as? Int64 {
                self.value = value
            }
        }
    }
    public class TopNMetaData : Tea.TeaModel {
        public class DateRange : Tea.TeaModel {
            public var endDate: Int64?

            public var startDate: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.endDate != nil {
                    map["EndDate"] = self.endDate!
                }
                if self.startDate != nil {
                    map["StartDate"] = self.startDate!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["EndDate"] as? Int64 {
                    self.endDate = value
                }
                if let value = dict["StartDate"] as? Int64 {
                    self.startDate = value
                }
            }
        }
        public var dateRange: DescribeSecurityEventTopNMetricResponseBody.TopNMetaData.DateRange?

        public var units: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.dateRange?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.dateRange != nil {
                map["DateRange"] = self.dateRange?.toMap()
            }
            if self.units != nil {
                map["Units"] = self.units!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DateRange"] as? [String: Any?] {
                var model = DescribeSecurityEventTopNMetricResponseBody.TopNMetaData.DateRange()
                model.fromMap(value)
                self.dateRange = model
            }
            if let value = dict["Units"] as? String {
                self.units = value
            }
        }
    }
    public var requestId: String?

    public var securityEventTopNValues: [DescribeSecurityEventTopNMetricResponseBody.SecurityEventTopNValues]?

    public var topNMetaData: DescribeSecurityEventTopNMetricResponseBody.TopNMetaData?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.topNMetaData?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.securityEventTopNValues != nil {
            var tmp : [Any] = []
            for k in self.securityEventTopNValues! {
                tmp.append(k.toMap())
            }
            map["SecurityEventTopNValues"] = tmp
        }
        if self.topNMetaData != nil {
            map["TopNMetaData"] = self.topNMetaData?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SecurityEventTopNValues"] as? [Any?] {
            var tmp : [DescribeSecurityEventTopNMetricResponseBody.SecurityEventTopNValues] = []
            for v in value {
                if v != nil {
                    var model = DescribeSecurityEventTopNMetricResponseBody.SecurityEventTopNValues()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.securityEventTopNValues = tmp
        }
        if let value = dict["TopNMetaData"] as? [String: Any?] {
            var model = DescribeSecurityEventTopNMetricResponseBody.TopNMetaData()
            model.fromMap(value)
            self.topNMetaData = model
        }
    }
}

public class DescribeSecurityEventTopNMetricResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeSecurityEventTopNMetricResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeSecurityEventTopNMetricResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeSensitiveApiStatisticRequest : Tea.TeaModel {
    public var clusterId: String?

    public var endTime: Int64?

    public var instanceId: String?

    public var matchedHost: String?

    public var pageNumber: Int64?

    public var pageSize: Int64?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public var startTime: Int64?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.matchedHost != nil {
            map["MatchedHost"] = self.matchedHost!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClusterId"] as? String {
            self.clusterId = value
        }
        if let value = dict["EndTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["MatchedHost"] as? String {
            self.matchedHost = value
        }
        if let value = dict["PageNumber"] as? Int64 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
    }
}

public class DescribeSensitiveApiStatisticResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class List : Tea.TeaModel {
            public var apiFormat: String?

            public var apiId: String?

            public var infoCount: Int64?

            public var sensitiveCode: [String]?

            public var sensitiveCount: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.apiFormat != nil {
                    map["ApiFormat"] = self.apiFormat!
                }
                if self.apiId != nil {
                    map["ApiId"] = self.apiId!
                }
                if self.infoCount != nil {
                    map["InfoCount"] = self.infoCount!
                }
                if self.sensitiveCode != nil {
                    map["SensitiveCode"] = self.sensitiveCode!
                }
                if self.sensitiveCount != nil {
                    map["SensitiveCount"] = self.sensitiveCount!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ApiFormat"] as? String {
                    self.apiFormat = value
                }
                if let value = dict["ApiId"] as? String {
                    self.apiId = value
                }
                if let value = dict["InfoCount"] as? Int64 {
                    self.infoCount = value
                }
                if let value = dict["SensitiveCode"] as? [String] {
                    self.sensitiveCode = value
                }
                if let value = dict["SensitiveCount"] as? Int64 {
                    self.sensitiveCount = value
                }
            }
        }
        public var infoOutboundCount: Int64?

        public var list: [DescribeSensitiveApiStatisticResponseBody.Data.List]?

        public var matchedHost: String?

        public var sensitiveOutboundCount: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.infoOutboundCount != nil {
                map["InfoOutboundCount"] = self.infoOutboundCount!
            }
            if self.list != nil {
                var tmp : [Any] = []
                for k in self.list! {
                    tmp.append(k.toMap())
                }
                map["List"] = tmp
            }
            if self.matchedHost != nil {
                map["MatchedHost"] = self.matchedHost!
            }
            if self.sensitiveOutboundCount != nil {
                map["SensitiveOutboundCount"] = self.sensitiveOutboundCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["InfoOutboundCount"] as? Int64 {
                self.infoOutboundCount = value
            }
            if let value = dict["List"] as? [Any?] {
                var tmp : [DescribeSensitiveApiStatisticResponseBody.Data.List] = []
                for v in value {
                    if v != nil {
                        var model = DescribeSensitiveApiStatisticResponseBody.Data.List()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.list = tmp
            }
            if let value = dict["MatchedHost"] as? String {
                self.matchedHost = value
            }
            if let value = dict["SensitiveOutboundCount"] as? Int64 {
                self.sensitiveOutboundCount = value
            }
        }
    }
    public var data: [DescribeSensitiveApiStatisticResponseBody.Data]?

    public var requestId: String?

    public var totalCount: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [DescribeSensitiveApiStatisticResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = DescribeSensitiveApiStatisticResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int64 {
            self.totalCount = value
        }
    }
}

public class DescribeSensitiveApiStatisticResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeSensitiveApiStatisticResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeSensitiveApiStatisticResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeSensitiveDetectionResultRequest : Tea.TeaModel {
    public var clusterId: String?

    public var endTime: Int64?

    public var instanceId: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public var startTime: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClusterId"] as? String {
            self.clusterId = value
        }
        if let value = dict["EndTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
    }
}

public class DescribeSensitiveDetectionResultResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Result : Tea.TeaModel {
            public class List : Tea.TeaModel {
                public var infoCount: Int64?

                public var outboundCount: Int64?

                public var sensitiveCode: Int64?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.infoCount != nil {
                        map["InfoCount"] = self.infoCount!
                    }
                    if self.outboundCount != nil {
                        map["OutboundCount"] = self.outboundCount!
                    }
                    if self.sensitiveCode != nil {
                        map["SensitiveCode"] = self.sensitiveCode!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["InfoCount"] as? Int64 {
                        self.infoCount = value
                    }
                    if let value = dict["OutboundCount"] as? Int64 {
                        self.outboundCount = value
                    }
                    if let value = dict["SensitiveCode"] as? Int64 {
                        self.sensitiveCode = value
                    }
                }
            }
            public class Max : Tea.TeaModel {
                public var infoCount: Int64?

                public var outboundCount: Int64?

                public var sensitiveCode: Int64?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.infoCount != nil {
                        map["InfoCount"] = self.infoCount!
                    }
                    if self.outboundCount != nil {
                        map["OutboundCount"] = self.outboundCount!
                    }
                    if self.sensitiveCode != nil {
                        map["SensitiveCode"] = self.sensitiveCode!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["InfoCount"] as? Int64 {
                        self.infoCount = value
                    }
                    if let value = dict["OutboundCount"] as? Int64 {
                        self.outboundCount = value
                    }
                    if let value = dict["SensitiveCode"] as? Int64 {
                        self.sensitiveCode = value
                    }
                }
            }
            public var detectionResult: String?

            public var list: [DescribeSensitiveDetectionResultResponseBody.Data.Result.List]?

            public var max: DescribeSensitiveDetectionResultResponseBody.Data.Result.Max?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.max?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.detectionResult != nil {
                    map["DetectionResult"] = self.detectionResult!
                }
                if self.list != nil {
                    var tmp : [Any] = []
                    for k in self.list! {
                        tmp.append(k.toMap())
                    }
                    map["List"] = tmp
                }
                if self.max != nil {
                    map["Max"] = self.max?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["DetectionResult"] as? String {
                    self.detectionResult = value
                }
                if let value = dict["List"] as? [Any?] {
                    var tmp : [DescribeSensitiveDetectionResultResponseBody.Data.Result.List] = []
                    for v in value {
                        if v != nil {
                            var model = DescribeSensitiveDetectionResultResponseBody.Data.Result.List()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.list = tmp
                }
                if let value = dict["Max"] as? [String: Any?] {
                    var model = DescribeSensitiveDetectionResultResponseBody.Data.Result.Max()
                    model.fromMap(value)
                    self.max = model
                }
            }
        }
        public var result: [DescribeSensitiveDetectionResultResponseBody.Data.Result]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.result != nil {
                var tmp : [Any] = []
                for k in self.result! {
                    tmp.append(k.toMap())
                }
                map["Result"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Result"] as? [Any?] {
                var tmp : [DescribeSensitiveDetectionResultResponseBody.Data.Result] = []
                for v in value {
                    if v != nil {
                        var model = DescribeSensitiveDetectionResultResponseBody.Data.Result()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.result = tmp
            }
        }
    }
    public var data: DescribeSensitiveDetectionResultResponseBody.Data?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Data"] as? [String: Any?] {
            var model = DescribeSensitiveDetectionResultResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeSensitiveDetectionResultResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeSensitiveDetectionResultResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeSensitiveDetectionResultResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeSensitiveOutboundDistributionRequest : Tea.TeaModel {
    public var clusterId: String?

    public var endTime: Int64?

    public var instanceId: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public var startTime: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClusterId"] as? String {
            self.clusterId = value
        }
        if let value = dict["EndTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
    }
}

public class DescribeSensitiveOutboundDistributionResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var country: String?

        public var infoOutboundCount: Int64?

        public var sensitiveOutboundCount: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.country != nil {
                map["Country"] = self.country!
            }
            if self.infoOutboundCount != nil {
                map["InfoOutboundCount"] = self.infoOutboundCount!
            }
            if self.sensitiveOutboundCount != nil {
                map["SensitiveOutboundCount"] = self.sensitiveOutboundCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Country"] as? String {
                self.country = value
            }
            if let value = dict["InfoOutboundCount"] as? Int64 {
                self.infoOutboundCount = value
            }
            if let value = dict["SensitiveOutboundCount"] as? Int64 {
                self.sensitiveOutboundCount = value
            }
        }
    }
    public var data: [DescribeSensitiveOutboundDistributionResponseBody.Data]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [DescribeSensitiveOutboundDistributionResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = DescribeSensitiveOutboundDistributionResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeSensitiveOutboundDistributionResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeSensitiveOutboundDistributionResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeSensitiveOutboundDistributionResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeSensitiveOutboundStatisticRequest : Tea.TeaModel {
    public var clusterId: String?

    public var detectionResult: String?

    public var endTime: Int64?

    public var instanceId: String?

    public var orderKey: String?

    public var orderWay: String?

    public var pageNumber: Int64?

    public var pageSize: Int64?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public var sensitiveCode: String?

    public var sensitiveLevel: String?

    public var sensitiveType: String?

    public var startTime: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.detectionResult != nil {
            map["DetectionResult"] = self.detectionResult!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.orderKey != nil {
            map["OrderKey"] = self.orderKey!
        }
        if self.orderWay != nil {
            map["OrderWay"] = self.orderWay!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.sensitiveCode != nil {
            map["SensitiveCode"] = self.sensitiveCode!
        }
        if self.sensitiveLevel != nil {
            map["SensitiveLevel"] = self.sensitiveLevel!
        }
        if self.sensitiveType != nil {
            map["SensitiveType"] = self.sensitiveType!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClusterId"] as? String {
            self.clusterId = value
        }
        if let value = dict["DetectionResult"] as? String {
            self.detectionResult = value
        }
        if let value = dict["EndTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["OrderKey"] as? String {
            self.orderKey = value
        }
        if let value = dict["OrderWay"] as? String {
            self.orderWay = value
        }
        if let value = dict["PageNumber"] as? Int64 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["SensitiveCode"] as? String {
            self.sensitiveCode = value
        }
        if let value = dict["SensitiveLevel"] as? String {
            self.sensitiveLevel = value
        }
        if let value = dict["SensitiveType"] as? String {
            self.sensitiveType = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
    }
}

public class DescribeSensitiveOutboundStatisticResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var detectionResult: String?

        public var infoCount: Int64?

        public var outboundCount: Int64?

        public var sensitiveCode: Int64?

        public var sensitiveLevel: String?

        public var sensitiveType: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.detectionResult != nil {
                map["DetectionResult"] = self.detectionResult!
            }
            if self.infoCount != nil {
                map["InfoCount"] = self.infoCount!
            }
            if self.outboundCount != nil {
                map["OutboundCount"] = self.outboundCount!
            }
            if self.sensitiveCode != nil {
                map["SensitiveCode"] = self.sensitiveCode!
            }
            if self.sensitiveLevel != nil {
                map["SensitiveLevel"] = self.sensitiveLevel!
            }
            if self.sensitiveType != nil {
                map["SensitiveType"] = self.sensitiveType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DetectionResult"] as? String {
                self.detectionResult = value
            }
            if let value = dict["InfoCount"] as? Int64 {
                self.infoCount = value
            }
            if let value = dict["OutboundCount"] as? Int64 {
                self.outboundCount = value
            }
            if let value = dict["SensitiveCode"] as? Int64 {
                self.sensitiveCode = value
            }
            if let value = dict["SensitiveLevel"] as? String {
                self.sensitiveLevel = value
            }
            if let value = dict["SensitiveType"] as? String {
                self.sensitiveType = value
            }
        }
    }
    public var data: [DescribeSensitiveOutboundStatisticResponseBody.Data]?

    public var requestId: String?

    public var totalCount: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [DescribeSensitiveOutboundStatisticResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = DescribeSensitiveOutboundStatisticResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int64 {
            self.totalCount = value
        }
    }
}

public class DescribeSensitiveOutboundStatisticResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeSensitiveOutboundStatisticResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeSensitiveOutboundStatisticResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeSensitiveOutboundTrendRequest : Tea.TeaModel {
    public var clusterId: String?

    public var endTime: Int64?

    public var instanceId: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public var startTime: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClusterId"] as? String {
            self.clusterId = value
        }
        if let value = dict["EndTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
    }
}

public class DescribeSensitiveOutboundTrendResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var infoCount: Int64?

        public var infoOutboundCount: Int64?

        public var sensitiveOutboundCount: Int64?

        public var timestamp: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.infoCount != nil {
                map["InfoCount"] = self.infoCount!
            }
            if self.infoOutboundCount != nil {
                map["InfoOutboundCount"] = self.infoOutboundCount!
            }
            if self.sensitiveOutboundCount != nil {
                map["SensitiveOutboundCount"] = self.sensitiveOutboundCount!
            }
            if self.timestamp != nil {
                map["Timestamp"] = self.timestamp!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["InfoCount"] as? Int64 {
                self.infoCount = value
            }
            if let value = dict["InfoOutboundCount"] as? Int64 {
                self.infoOutboundCount = value
            }
            if let value = dict["SensitiveOutboundCount"] as? Int64 {
                self.sensitiveOutboundCount = value
            }
            if let value = dict["Timestamp"] as? Int64 {
                self.timestamp = value
            }
        }
    }
    public var data: [DescribeSensitiveOutboundTrendResponseBody.Data]?

    public var requestId: String?

    public var totalCount: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [DescribeSensitiveOutboundTrendResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = DescribeSensitiveOutboundTrendResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int64 {
            self.totalCount = value
        }
    }
}

public class DescribeSensitiveOutboundTrendResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeSensitiveOutboundTrendResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeSensitiveOutboundTrendResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeSensitiveRequestLogRequest : Tea.TeaModel {
    public var apiFormat: String?

    public var clientIP: String?

    public var clusterId: String?

    public var endTime: Int64?

    public var instanceId: String?

    public var matchedHost: String?

    public var pageNumber: Int64?

    public var pageSize: Int64?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public var sensitiveCode: String?

    public var sensitiveData: String?

    public var startTime: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiFormat != nil {
            map["ApiFormat"] = self.apiFormat!
        }
        if self.clientIP != nil {
            map["ClientIP"] = self.clientIP!
        }
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.matchedHost != nil {
            map["MatchedHost"] = self.matchedHost!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.sensitiveCode != nil {
            map["SensitiveCode"] = self.sensitiveCode!
        }
        if self.sensitiveData != nil {
            map["SensitiveData"] = self.sensitiveData!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiFormat"] as? String {
            self.apiFormat = value
        }
        if let value = dict["ClientIP"] as? String {
            self.clientIP = value
        }
        if let value = dict["ClusterId"] as? String {
            self.clusterId = value
        }
        if let value = dict["EndTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["MatchedHost"] as? String {
            self.matchedHost = value
        }
        if let value = dict["PageNumber"] as? Int64 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["SensitiveCode"] as? String {
            self.sensitiveCode = value
        }
        if let value = dict["SensitiveData"] as? String {
            self.sensitiveData = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
    }
}

public class DescribeSensitiveRequestLogResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var apiFormat: String?

        public var apiId: String?

        public var clientIP: String?

        public var count: Int64?

        public var matchedHost: String?

        public var remoteCountryId: String?

        public var requestTime: Int64?

        public var sensitiveList: String?

        public var traceId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.apiFormat != nil {
                map["ApiFormat"] = self.apiFormat!
            }
            if self.apiId != nil {
                map["ApiId"] = self.apiId!
            }
            if self.clientIP != nil {
                map["ClientIP"] = self.clientIP!
            }
            if self.count != nil {
                map["Count"] = self.count!
            }
            if self.matchedHost != nil {
                map["MatchedHost"] = self.matchedHost!
            }
            if self.remoteCountryId != nil {
                map["RemoteCountryId"] = self.remoteCountryId!
            }
            if self.requestTime != nil {
                map["RequestTime"] = self.requestTime!
            }
            if self.sensitiveList != nil {
                map["SensitiveList"] = self.sensitiveList!
            }
            if self.traceId != nil {
                map["TraceId"] = self.traceId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ApiFormat"] as? String {
                self.apiFormat = value
            }
            if let value = dict["ApiId"] as? String {
                self.apiId = value
            }
            if let value = dict["ClientIP"] as? String {
                self.clientIP = value
            }
            if let value = dict["Count"] as? Int64 {
                self.count = value
            }
            if let value = dict["MatchedHost"] as? String {
                self.matchedHost = value
            }
            if let value = dict["RemoteCountryId"] as? String {
                self.remoteCountryId = value
            }
            if let value = dict["RequestTime"] as? Int64 {
                self.requestTime = value
            }
            if let value = dict["SensitiveList"] as? String {
                self.sensitiveList = value
            }
            if let value = dict["TraceId"] as? String {
                self.traceId = value
            }
        }
    }
    public var data: [DescribeSensitiveRequestLogResponseBody.Data]?

    public var requestId: String?

    public var totalCount: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [DescribeSensitiveRequestLogResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = DescribeSensitiveRequestLogResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int64 {
            self.totalCount = value
        }
    }
}

public class DescribeSensitiveRequestLogResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeSensitiveRequestLogResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeSensitiveRequestLogResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeSensitiveRequestsRequest : Tea.TeaModel {
    public var clusterId: String?

    public var endTime: Int64?

    public var instanceId: String?

    public var pageNumber: Int64?

    public var pageSize: Int64?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public var sensitiveCode: Int64?

    public var sensitiveData: String?

    public var startTime: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.sensitiveCode != nil {
            map["SensitiveCode"] = self.sensitiveCode!
        }
        if self.sensitiveData != nil {
            map["SensitiveData"] = self.sensitiveData!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClusterId"] as? String {
            self.clusterId = value
        }
        if let value = dict["EndTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["PageNumber"] as? Int64 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["SensitiveCode"] as? Int64 {
            self.sensitiveCode = value
        }
        if let value = dict["SensitiveData"] as? String {
            self.sensitiveData = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
    }
}

public class DescribeSensitiveRequestsResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class InfoCount : Tea.TeaModel {
            public var code: String?

            public var count: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.code != nil {
                    map["Code"] = self.code!
                }
                if self.count != nil {
                    map["Count"] = self.count!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Code"] as? String {
                    self.code = value
                }
                if let value = dict["Count"] as? Int64 {
                    self.count = value
                }
            }
        }
        public var abnormalCount: Int64?

        public var apiFormat: String?

        public var apiId: String?

        public var clientIP: String?

        public var detectionResult: String?

        public var eventCount: Int64?

        public var infoCount: [DescribeSensitiveRequestsResponseBody.Data.InfoCount]?

        public var matchedHost: String?

        public var sensitiveList: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.abnormalCount != nil {
                map["AbnormalCount"] = self.abnormalCount!
            }
            if self.apiFormat != nil {
                map["ApiFormat"] = self.apiFormat!
            }
            if self.apiId != nil {
                map["ApiId"] = self.apiId!
            }
            if self.clientIP != nil {
                map["ClientIP"] = self.clientIP!
            }
            if self.detectionResult != nil {
                map["DetectionResult"] = self.detectionResult!
            }
            if self.eventCount != nil {
                map["EventCount"] = self.eventCount!
            }
            if self.infoCount != nil {
                var tmp : [Any] = []
                for k in self.infoCount! {
                    tmp.append(k.toMap())
                }
                map["InfoCount"] = tmp
            }
            if self.matchedHost != nil {
                map["MatchedHost"] = self.matchedHost!
            }
            if self.sensitiveList != nil {
                map["SensitiveList"] = self.sensitiveList!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AbnormalCount"] as? Int64 {
                self.abnormalCount = value
            }
            if let value = dict["ApiFormat"] as? String {
                self.apiFormat = value
            }
            if let value = dict["ApiId"] as? String {
                self.apiId = value
            }
            if let value = dict["ClientIP"] as? String {
                self.clientIP = value
            }
            if let value = dict["DetectionResult"] as? String {
                self.detectionResult = value
            }
            if let value = dict["EventCount"] as? Int64 {
                self.eventCount = value
            }
            if let value = dict["InfoCount"] as? [Any?] {
                var tmp : [DescribeSensitiveRequestsResponseBody.Data.InfoCount] = []
                for v in value {
                    if v != nil {
                        var model = DescribeSensitiveRequestsResponseBody.Data.InfoCount()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.infoCount = tmp
            }
            if let value = dict["MatchedHost"] as? String {
                self.matchedHost = value
            }
            if let value = dict["SensitiveList"] as? [String] {
                self.sensitiveList = value
            }
        }
    }
    public var data: [DescribeSensitiveRequestsResponseBody.Data]?

    public var requestId: String?

    public var totalCount: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [DescribeSensitiveRequestsResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = DescribeSensitiveRequestsResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int64 {
            self.totalCount = value
        }
    }
}

public class DescribeSensitiveRequestsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeSensitiveRequestsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeSensitiveRequestsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeSensitiveStatisticRequest : Tea.TeaModel {
    public var clusterId: String?

    public var endTime: Int64?

    public var instanceId: String?

    public var pageNumber: Int64?

    public var pageSize: Int64?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public var startTime: Int64?

    public var statisticType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.statisticType != nil {
            map["StatisticType"] = self.statisticType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClusterId"] as? String {
            self.clusterId = value
        }
        if let value = dict["EndTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["PageNumber"] as? Int64 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
        if let value = dict["StatisticType"] as? String {
            self.statisticType = value
        }
    }
}

public class DescribeSensitiveStatisticResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var apiFormat: String?

        public var clientIP: String?

        public var count: Int64?

        public var matchedHost: String?

        public var sensitiveCode: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.apiFormat != nil {
                map["ApiFormat"] = self.apiFormat!
            }
            if self.clientIP != nil {
                map["ClientIP"] = self.clientIP!
            }
            if self.count != nil {
                map["Count"] = self.count!
            }
            if self.matchedHost != nil {
                map["MatchedHost"] = self.matchedHost!
            }
            if self.sensitiveCode != nil {
                map["SensitiveCode"] = self.sensitiveCode!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ApiFormat"] as? String {
                self.apiFormat = value
            }
            if let value = dict["ClientIP"] as? String {
                self.clientIP = value
            }
            if let value = dict["Count"] as? Int64 {
                self.count = value
            }
            if let value = dict["MatchedHost"] as? String {
                self.matchedHost = value
            }
            if let value = dict["SensitiveCode"] as? String {
                self.sensitiveCode = value
            }
        }
    }
    public var data: [DescribeSensitiveStatisticResponseBody.Data]?

    public var requestId: String?

    public var totalCount: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [DescribeSensitiveStatisticResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = DescribeSensitiveStatisticResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int64 {
            self.totalCount = value
        }
    }
}

public class DescribeSensitiveStatisticResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeSensitiveStatisticResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeSensitiveStatisticResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeSlsAuthStatusRequest : Tea.TeaModel {
    public var instanceId: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class DescribeSlsAuthStatusResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var status: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Status"] as? Bool {
            self.status = value
        }
    }
}

public class DescribeSlsAuthStatusResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeSlsAuthStatusResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeSlsAuthStatusResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeSlsLogStoreRequest : Tea.TeaModel {
    public var instanceId: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class DescribeSlsLogStoreResponseBody : Tea.TeaModel {
    public var logStoreName: String?

    public var projectName: String?

    public var quota: Int64?

    public var requestId: String?

    public var ttl: Int32?

    public var used: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.logStoreName != nil {
            map["LogStoreName"] = self.logStoreName!
        }
        if self.projectName != nil {
            map["ProjectName"] = self.projectName!
        }
        if self.quota != nil {
            map["Quota"] = self.quota!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.ttl != nil {
            map["Ttl"] = self.ttl!
        }
        if self.used != nil {
            map["Used"] = self.used!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["LogStoreName"] as? String {
            self.logStoreName = value
        }
        if let value = dict["ProjectName"] as? String {
            self.projectName = value
        }
        if let value = dict["Quota"] as? Int64 {
            self.quota = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Ttl"] as? Int32 {
            self.ttl = value
        }
        if let value = dict["Used"] as? Int64 {
            self.used = value
        }
    }
}

public class DescribeSlsLogStoreResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeSlsLogStoreResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeSlsLogStoreResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeSlsLogStoreStatusRequest : Tea.TeaModel {
    public var instanceId: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class DescribeSlsLogStoreStatusResponseBody : Tea.TeaModel {
    public var existStatus: Bool?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.existStatus != nil {
            map["ExistStatus"] = self.existStatus!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ExistStatus"] as? Bool {
            self.existStatus = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeSlsLogStoreStatusResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeSlsLogStoreStatusResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeSlsLogStoreStatusResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeTemplateResourceCountRequest : Tea.TeaModel {
    public var instanceId: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public var templateIds: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.templateIds != nil {
            map["TemplateIds"] = self.templateIds!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["TemplateIds"] as? String {
            self.templateIds = value
        }
    }
}

public class DescribeTemplateResourceCountResponseBody : Tea.TeaModel {
    public class ResourceCount : Tea.TeaModel {
        public var assetCount: Int32?

        public var groupCount: Int32?

        public var singleCount: Int32?

        public var templateId: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.assetCount != nil {
                map["AssetCount"] = self.assetCount!
            }
            if self.groupCount != nil {
                map["GroupCount"] = self.groupCount!
            }
            if self.singleCount != nil {
                map["SingleCount"] = self.singleCount!
            }
            if self.templateId != nil {
                map["TemplateId"] = self.templateId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AssetCount"] as? Int32 {
                self.assetCount = value
            }
            if let value = dict["GroupCount"] as? Int32 {
                self.groupCount = value
            }
            if let value = dict["SingleCount"] as? Int32 {
                self.singleCount = value
            }
            if let value = dict["TemplateId"] as? Int64 {
                self.templateId = value
            }
        }
    }
    public var requestId: String?

    public var resourceCount: [DescribeTemplateResourceCountResponseBody.ResourceCount]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resourceCount != nil {
            var tmp : [Any] = []
            for k in self.resourceCount! {
                tmp.append(k.toMap())
            }
            map["ResourceCount"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["ResourceCount"] as? [Any?] {
            var tmp : [DescribeTemplateResourceCountResponseBody.ResourceCount] = []
            for v in value {
                if v != nil {
                    var model = DescribeTemplateResourceCountResponseBody.ResourceCount()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.resourceCount = tmp
        }
    }
}

public class DescribeTemplateResourceCountResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeTemplateResourceCountResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeTemplateResourceCountResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeTemplateResourcesRequest : Tea.TeaModel {
    public var assetApi: String?

    public var instanceId: String?

    public var maxResults: Int32?

    public var nextToken: String?

    public var regionId: String?

    public var resource: String?

    public var resourceManagerResourceGroupId: String?

    public var resourceType: String?

    public var templateId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.assetApi != nil {
            map["AssetApi"] = self.assetApi!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resource != nil {
            map["Resource"] = self.resource!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.resourceType != nil {
            map["ResourceType"] = self.resourceType!
        }
        if self.templateId != nil {
            map["TemplateId"] = self.templateId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AssetApi"] as? String {
            self.assetApi = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Resource"] as? String {
            self.resource = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["ResourceType"] as? String {
            self.resourceType = value
        }
        if let value = dict["TemplateId"] as? Int64 {
            self.templateId = value
        }
    }
}

public class DescribeTemplateResourcesResponseBody : Tea.TeaModel {
    public var maxResults: Int32?

    public var nextToken: String?

    public var requestId: String?

    public var resources: [String]?

    public var templateId: Int64?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resources != nil {
            map["Resources"] = self.resources!
        }
        if self.templateId != nil {
            map["TemplateId"] = self.templateId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Resources"] as? [String] {
            self.resources = value
        }
        if let value = dict["TemplateId"] as? Int64 {
            self.templateId = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class DescribeTemplateResourcesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeTemplateResourcesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeTemplateResourcesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeUserAbnormalTrendRequest : Tea.TeaModel {
    public var clusterId: String?

    public var instanceId: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClusterId"] as? String {
            self.clusterId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class DescribeUserAbnormalTrendResponseBody : Tea.TeaModel {
    public class Trend : Tea.TeaModel {
        public var abnormalHigh: Int64?

        public var abnormalLow: Int64?

        public var abnormalMedium: Int64?

        public var timeStamp: Int64?

        public var timestamp: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.abnormalHigh != nil {
                map["AbnormalHigh"] = self.abnormalHigh!
            }
            if self.abnormalLow != nil {
                map["AbnormalLow"] = self.abnormalLow!
            }
            if self.abnormalMedium != nil {
                map["AbnormalMedium"] = self.abnormalMedium!
            }
            if self.timeStamp != nil {
                map["TimeStamp"] = self.timeStamp!
            }
            if self.timestamp != nil {
                map["Timestamp"] = self.timestamp!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AbnormalHigh"] as? Int64 {
                self.abnormalHigh = value
            }
            if let value = dict["AbnormalLow"] as? Int64 {
                self.abnormalLow = value
            }
            if let value = dict["AbnormalMedium"] as? Int64 {
                self.abnormalMedium = value
            }
            if let value = dict["TimeStamp"] as? Int64 {
                self.timeStamp = value
            }
            if let value = dict["Timestamp"] as? Int64 {
                self.timestamp = value
            }
        }
    }
    public var requestId: String?

    public var trend: [DescribeUserAbnormalTrendResponseBody.Trend]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.trend != nil {
            var tmp : [Any] = []
            for k in self.trend! {
                tmp.append(k.toMap())
            }
            map["Trend"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Trend"] as? [Any?] {
            var tmp : [DescribeUserAbnormalTrendResponseBody.Trend] = []
            for v in value {
                if v != nil {
                    var model = DescribeUserAbnormalTrendResponseBody.Trend()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.trend = tmp
        }
    }
}

public class DescribeUserAbnormalTrendResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeUserAbnormalTrendResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeUserAbnormalTrendResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeUserAbnormalTypeRequest : Tea.TeaModel {
    public var clusterId: String?

    public var endTime: Int64?

    public var instanceId: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public var startTime: Int64?

    public var userStatusList: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.userStatusList != nil {
            map["UserStatusList"] = self.userStatusList!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClusterId"] as? String {
            self.clusterId = value
        }
        if let value = dict["EndTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
        if let value = dict["UserStatusList"] as? [String] {
            self.userStatusList = value
        }
    }
}

public class DescribeUserAbnormalTypeResponseBody : Tea.TeaModel {
    public class Abnormal : Tea.TeaModel {
        public var abnormalCode: String?

        public var abnormalCount: Int64?

        public var abnormalParentType: String?

        public var abnormalType: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.abnormalCode != nil {
                map["AbnormalCode"] = self.abnormalCode!
            }
            if self.abnormalCount != nil {
                map["AbnormalCount"] = self.abnormalCount!
            }
            if self.abnormalParentType != nil {
                map["AbnormalParentType"] = self.abnormalParentType!
            }
            if self.abnormalType != nil {
                map["AbnormalType"] = self.abnormalType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AbnormalCode"] as? String {
                self.abnormalCode = value
            }
            if let value = dict["AbnormalCount"] as? Int64 {
                self.abnormalCount = value
            }
            if let value = dict["AbnormalParentType"] as? String {
                self.abnormalParentType = value
            }
            if let value = dict["AbnormalType"] as? String {
                self.abnormalType = value
            }
        }
    }
    public var abnormal: [DescribeUserAbnormalTypeResponseBody.Abnormal]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.abnormal != nil {
            var tmp : [Any] = []
            for k in self.abnormal! {
                tmp.append(k.toMap())
            }
            map["Abnormal"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Abnormal"] as? [Any?] {
            var tmp : [DescribeUserAbnormalTypeResponseBody.Abnormal] = []
            for v in value {
                if v != nil {
                    var model = DescribeUserAbnormalTypeResponseBody.Abnormal()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.abnormal = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeUserAbnormalTypeResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeUserAbnormalTypeResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeUserAbnormalTypeResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeUserApiRequestRequest : Tea.TeaModel {
    public var apiFormat: String?

    public var apiId: String?

    public var clusterId: String?

    public var domain: String?

    public var instanceId: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiFormat != nil {
            map["ApiFormat"] = self.apiFormat!
        }
        if self.apiId != nil {
            map["ApiId"] = self.apiId!
        }
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.domain != nil {
            map["Domain"] = self.domain!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiFormat"] as? String {
            self.apiFormat = value
        }
        if let value = dict["ApiId"] as? String {
            self.apiId = value
        }
        if let value = dict["ClusterId"] as? String {
            self.clusterId = value
        }
        if let value = dict["Domain"] as? String {
            self.domain = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
    }
}

public class DescribeUserApiRequestResponseBody : Tea.TeaModel {
    public class Requests : Tea.TeaModel {
        public var count: Int64?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.count != nil {
                map["Count"] = self.count!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Count"] as? Int64 {
                self.count = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var requestId: String?

    public var requests: [DescribeUserApiRequestResponseBody.Requests]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.requests != nil {
            var tmp : [Any] = []
            for k in self.requests! {
                tmp.append(k.toMap())
            }
            map["Requests"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Requests"] as? [Any?] {
            var tmp : [DescribeUserApiRequestResponseBody.Requests] = []
            for v in value {
                if v != nil {
                    var model = DescribeUserApiRequestResponseBody.Requests()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.requests = tmp
        }
    }
}

public class DescribeUserApiRequestResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeUserApiRequestResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeUserApiRequestResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeUserAssetRequest : Tea.TeaModel {
    public var clusterId: String?

    public var dataType: String?

    public var days: String?

    public var instanceId: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.dataType != nil {
            map["DataType"] = self.dataType!
        }
        if self.days != nil {
            map["Days"] = self.days!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClusterId"] as? String {
            self.clusterId = value
        }
        if let value = dict["DataType"] as? String {
            self.dataType = value
        }
        if let value = dict["Days"] as? String {
            self.days = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class DescribeUserAssetResponseBody : Tea.TeaModel {
    public class Assets : Tea.TeaModel {
        public var assetNum: Int64?

        public var timeStamp: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.assetNum != nil {
                map["AssetNum"] = self.assetNum!
            }
            if self.timeStamp != nil {
                map["TimeStamp"] = self.timeStamp!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AssetNum"] as? Int64 {
                self.assetNum = value
            }
            if let value = dict["TimeStamp"] as? Int64 {
                self.timeStamp = value
            }
        }
    }
    public var assets: [DescribeUserAssetResponseBody.Assets]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.assets != nil {
            var tmp : [Any] = []
            for k in self.assets! {
                tmp.append(k.toMap())
            }
            map["Assets"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Assets"] as? [Any?] {
            var tmp : [DescribeUserAssetResponseBody.Assets] = []
            for v in value {
                if v != nil {
                    var model = DescribeUserAssetResponseBody.Assets()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.assets = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeUserAssetResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeUserAssetResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeUserAssetResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeUserEventTrendRequest : Tea.TeaModel {
    public var clusterId: String?

    public var instanceId: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClusterId"] as? String {
            self.clusterId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class DescribeUserEventTrendResponseBody : Tea.TeaModel {
    public class Trend : Tea.TeaModel {
        public var eventHigh: Int64?

        public var eventLow: Int64?

        public var eventMedium: Int64?

        public var timeStamp: Int64?

        public var timestamp: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.eventHigh != nil {
                map["EventHigh"] = self.eventHigh!
            }
            if self.eventLow != nil {
                map["EventLow"] = self.eventLow!
            }
            if self.eventMedium != nil {
                map["EventMedium"] = self.eventMedium!
            }
            if self.timeStamp != nil {
                map["TimeStamp"] = self.timeStamp!
            }
            if self.timestamp != nil {
                map["Timestamp"] = self.timestamp!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["EventHigh"] as? Int64 {
                self.eventHigh = value
            }
            if let value = dict["EventLow"] as? Int64 {
                self.eventLow = value
            }
            if let value = dict["EventMedium"] as? Int64 {
                self.eventMedium = value
            }
            if let value = dict["TimeStamp"] as? Int64 {
                self.timeStamp = value
            }
            if let value = dict["Timestamp"] as? Int64 {
                self.timestamp = value
            }
        }
    }
    public var requestId: String?

    public var trend: [DescribeUserEventTrendResponseBody.Trend]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.trend != nil {
            var tmp : [Any] = []
            for k in self.trend! {
                tmp.append(k.toMap())
            }
            map["Trend"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Trend"] as? [Any?] {
            var tmp : [DescribeUserEventTrendResponseBody.Trend] = []
            for v in value {
                if v != nil {
                    var model = DescribeUserEventTrendResponseBody.Trend()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.trend = tmp
        }
    }
}

public class DescribeUserEventTrendResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeUserEventTrendResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeUserEventTrendResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeUserEventTypeRequest : Tea.TeaModel {
    public var clusterId: String?

    public var endTime: Int64?

    public var instanceId: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public var startTime: Int64?

    public var userStatusList: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.userStatusList != nil {
            map["UserStatusList"] = self.userStatusList!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClusterId"] as? String {
            self.clusterId = value
        }
        if let value = dict["EndTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
        if let value = dict["UserStatusList"] as? [String] {
            self.userStatusList = value
        }
    }
}

public class DescribeUserEventTypeResponseBody : Tea.TeaModel {
    public class Event : Tea.TeaModel {
        public var eventCode: String?

        public var eventCount: Int64?

        public var eventParentType: String?

        public var eventType: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.eventCode != nil {
                map["EventCode"] = self.eventCode!
            }
            if self.eventCount != nil {
                map["EventCount"] = self.eventCount!
            }
            if self.eventParentType != nil {
                map["EventParentType"] = self.eventParentType!
            }
            if self.eventType != nil {
                map["EventType"] = self.eventType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["EventCode"] as? String {
                self.eventCode = value
            }
            if let value = dict["EventCount"] as? Int64 {
                self.eventCount = value
            }
            if let value = dict["EventParentType"] as? String {
                self.eventParentType = value
            }
            if let value = dict["EventType"] as? String {
                self.eventType = value
            }
        }
    }
    public var event: [DescribeUserEventTypeResponseBody.Event]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.event != nil {
            var tmp : [Any] = []
            for k in self.event! {
                tmp.append(k.toMap())
            }
            map["Event"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Event"] as? [Any?] {
            var tmp : [DescribeUserEventTypeResponseBody.Event] = []
            for v in value {
                if v != nil {
                    var model = DescribeUserEventTypeResponseBody.Event()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.event = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeUserEventTypeResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeUserEventTypeResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeUserEventTypeResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeUserLogFieldConfigRequest : Tea.TeaModel {
    public var deliveryType: String?

    public var instanceId: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.deliveryType != nil {
            map["DeliveryType"] = self.deliveryType!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DeliveryType"] as? String {
            self.deliveryType = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class DescribeUserLogFieldConfigResponseBody : Tea.TeaModel {
    public var addList: String?

    public var configStatus: String?

    public var delList: String?

    public var deliveryType: String?

    public var extendConfig: String?

    public var fieldList: String?

    public var logDeliveryStrategy: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.addList != nil {
            map["AddList"] = self.addList!
        }
        if self.configStatus != nil {
            map["ConfigStatus"] = self.configStatus!
        }
        if self.delList != nil {
            map["DelList"] = self.delList!
        }
        if self.deliveryType != nil {
            map["DeliveryType"] = self.deliveryType!
        }
        if self.extendConfig != nil {
            map["ExtendConfig"] = self.extendConfig!
        }
        if self.fieldList != nil {
            map["FieldList"] = self.fieldList!
        }
        if self.logDeliveryStrategy != nil {
            map["LogDeliveryStrategy"] = self.logDeliveryStrategy!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AddList"] as? String {
            self.addList = value
        }
        if let value = dict["ConfigStatus"] as? String {
            self.configStatus = value
        }
        if let value = dict["DelList"] as? String {
            self.delList = value
        }
        if let value = dict["DeliveryType"] as? String {
            self.deliveryType = value
        }
        if let value = dict["ExtendConfig"] as? String {
            self.extendConfig = value
        }
        if let value = dict["FieldList"] as? String {
            self.fieldList = value
        }
        if let value = dict["LogDeliveryStrategy"] as? String {
            self.logDeliveryStrategy = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeUserLogFieldConfigResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeUserLogFieldConfigResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeUserLogFieldConfigResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeUserSlsLogRegionsRequest : Tea.TeaModel {
    public var instanceId: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class DescribeUserSlsLogRegionsResponseBody : Tea.TeaModel {
    public var logRegions: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.logRegions != nil {
            map["LogRegions"] = self.logRegions!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["LogRegions"] as? [String] {
            self.logRegions = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeUserSlsLogRegionsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeUserSlsLogRegionsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeUserSlsLogRegionsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeUserWafLogStatusRequest : Tea.TeaModel {
    public var instanceId: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class DescribeUserWafLogStatusResponseBody : Tea.TeaModel {
    public var logRegionId: String?

    public var logStatus: String?

    public var requestId: String?

    public var statusUpdateTime: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.logRegionId != nil {
            map["LogRegionId"] = self.logRegionId!
        }
        if self.logStatus != nil {
            map["LogStatus"] = self.logStatus!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.statusUpdateTime != nil {
            map["StatusUpdateTime"] = self.statusUpdateTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["LogRegionId"] as? String {
            self.logRegionId = value
        }
        if let value = dict["LogStatus"] as? String {
            self.logStatus = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["StatusUpdateTime"] as? Int64 {
            self.statusUpdateTime = value
        }
    }
}

public class DescribeUserWafLogStatusResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeUserWafLogStatusResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeUserWafLogStatusResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeVerifyContentRequest : Tea.TeaModel {
    public var accessOrigin: String?

    public var domainName: String?

    public var instanceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.accessOrigin != nil {
            map["AccessOrigin"] = self.accessOrigin!
        }
        if self.domainName != nil {
            map["DomainName"] = self.domainName!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AccessOrigin"] as? String {
            self.accessOrigin = value
        }
        if let value = dict["DomainName"] as? String {
            self.domainName = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
    }
}

public class DescribeVerifyContentResponseBody : Tea.TeaModel {
    public class DnsContent : Tea.TeaModel {
        public var RR: String?

        public var type: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.RR != nil {
                map["RR"] = self.RR!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["RR"] as? String {
                self.RR = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public class FileContent : Tea.TeaModel {
        public var downloadUrl: String?

        public var fileName: String?

        public var topDomain: String?

        public var value: String?

        public var verifyPath: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.downloadUrl != nil {
                map["DownloadUrl"] = self.downloadUrl!
            }
            if self.fileName != nil {
                map["FileName"] = self.fileName!
            }
            if self.topDomain != nil {
                map["TopDomain"] = self.topDomain!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            if self.verifyPath != nil {
                map["VerifyPath"] = self.verifyPath!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DownloadUrl"] as? String {
                self.downloadUrl = value
            }
            if let value = dict["FileName"] as? String {
                self.fileName = value
            }
            if let value = dict["TopDomain"] as? String {
                self.topDomain = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
            if let value = dict["VerifyPath"] as? String {
                self.verifyPath = value
            }
        }
    }
    public var dnsContent: DescribeVerifyContentResponseBody.DnsContent?

    public var fileContent: DescribeVerifyContentResponseBody.FileContent?

    public var requestId: String?

    public var verifyResult: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.dnsContent?.validate()
        try self.fileContent?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dnsContent != nil {
            map["DnsContent"] = self.dnsContent?.toMap()
        }
        if self.fileContent != nil {
            map["FileContent"] = self.fileContent?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.verifyResult != nil {
            map["VerifyResult"] = self.verifyResult!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DnsContent"] as? [String: Any?] {
            var model = DescribeVerifyContentResponseBody.DnsContent()
            model.fromMap(value)
            self.dnsContent = model
        }
        if let value = dict["FileContent"] as? [String: Any?] {
            var model = DescribeVerifyContentResponseBody.FileContent()
            model.fromMap(value)
            self.fileContent = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["VerifyResult"] as? Bool {
            self.verifyResult = value
        }
    }
}

public class DescribeVerifyContentResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeVerifyContentResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeVerifyContentResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeVisitTopIpRequest : Tea.TeaModel {
    public var endTimestamp: String?

    public var instanceId: String?

    public var regionId: String?

    public var resource: String?

    public var resourceManagerResourceGroupId: String?

    public var startTimestamp: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTimestamp != nil {
            map["EndTimestamp"] = self.endTimestamp!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resource != nil {
            map["Resource"] = self.resource!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.startTimestamp != nil {
            map["StartTimestamp"] = self.startTimestamp!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTimestamp"] as? String {
            self.endTimestamp = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Resource"] as? String {
            self.resource = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["StartTimestamp"] as? String {
            self.startTimestamp = value
        }
    }
}

public class DescribeVisitTopIpResponseBody : Tea.TeaModel {
    public class TopIp : Tea.TeaModel {
        public var area: String?

        public var count: Int64?

        public var ip: String?

        public var isp: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.area != nil {
                map["Area"] = self.area!
            }
            if self.count != nil {
                map["Count"] = self.count!
            }
            if self.ip != nil {
                map["Ip"] = self.ip!
            }
            if self.isp != nil {
                map["Isp"] = self.isp!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Area"] as? String {
                self.area = value
            }
            if let value = dict["Count"] as? Int64 {
                self.count = value
            }
            if let value = dict["Ip"] as? String {
                self.ip = value
            }
            if let value = dict["Isp"] as? String {
                self.isp = value
            }
        }
    }
    public var requestId: String?

    public var topIp: [DescribeVisitTopIpResponseBody.TopIp]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.topIp != nil {
            var tmp : [Any] = []
            for k in self.topIp! {
                tmp.append(k.toMap())
            }
            map["TopIp"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TopIp"] as? [Any?] {
            var tmp : [DescribeVisitTopIpResponseBody.TopIp] = []
            for v in value {
                if v != nil {
                    var model = DescribeVisitTopIpResponseBody.TopIp()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.topIp = tmp
        }
    }
}

public class DescribeVisitTopIpResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeVisitTopIpResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeVisitTopIpResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeVisitUasRequest : Tea.TeaModel {
    public var endTimestamp: String?

    public var instanceId: String?

    public var regionId: String?

    public var resource: String?

    public var resourceManagerResourceGroupId: String?

    public var startTimestamp: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTimestamp != nil {
            map["EndTimestamp"] = self.endTimestamp!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resource != nil {
            map["Resource"] = self.resource!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.startTimestamp != nil {
            map["StartTimestamp"] = self.startTimestamp!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTimestamp"] as? String {
            self.endTimestamp = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Resource"] as? String {
            self.resource = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["StartTimestamp"] as? String {
            self.startTimestamp = value
        }
    }
}

public class DescribeVisitUasResponseBody : Tea.TeaModel {
    public class Uas : Tea.TeaModel {
        public var count: Int64?

        public var ua: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.count != nil {
                map["Count"] = self.count!
            }
            if self.ua != nil {
                map["Ua"] = self.ua!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Count"] as? Int64 {
                self.count = value
            }
            if let value = dict["Ua"] as? String {
                self.ua = value
            }
        }
    }
    public var requestId: String?

    public var uas: [DescribeVisitUasResponseBody.Uas]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.uas != nil {
            var tmp : [Any] = []
            for k in self.uas! {
                tmp.append(k.toMap())
            }
            map["Uas"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Uas"] as? [Any?] {
            var tmp : [DescribeVisitUasResponseBody.Uas] = []
            for v in value {
                if v != nil {
                    var model = DescribeVisitUasResponseBody.Uas()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.uas = tmp
        }
    }
}

public class DescribeVisitUasResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeVisitUasResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeVisitUasResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeWafSourceIpSegmentRequest : Tea.TeaModel {
    public var instanceId: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class DescribeWafSourceIpSegmentResponseBody : Tea.TeaModel {
    public class WafSourceIp : Tea.TeaModel {
        public var IPv4: [String]?

        public var IPv6: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.IPv4 != nil {
                map["IPv4"] = self.IPv4!
            }
            if self.IPv6 != nil {
                map["IPv6"] = self.IPv6!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["IPv4"] as? [String] {
                self.IPv4 = value
            }
            if let value = dict["IPv6"] as? [String] {
                self.IPv6 = value
            }
        }
    }
    public var requestId: String?

    public var wafSourceIp: DescribeWafSourceIpSegmentResponseBody.WafSourceIp?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.wafSourceIp?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.wafSourceIp != nil {
            map["WafSourceIp"] = self.wafSourceIp?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["WafSourceIp"] as? [String: Any?] {
            var model = DescribeWafSourceIpSegmentResponseBody.WafSourceIp()
            model.fromMap(value)
            self.wafSourceIp = model
        }
    }
}

public class DescribeWafSourceIpSegmentResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeWafSourceIpSegmentResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeWafSourceIpSegmentResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class InitializeWafOperationRoleRequest : Tea.TeaModel {
    public var instanceId: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class InitializeWafOperationRoleResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class InitializeWafOperationRoleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: InitializeWafOperationRoleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = InitializeWafOperationRoleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListTagKeysRequest : Tea.TeaModel {
    public var instanceId: String?

    public var nextToken: String?

    public var regionId: String?

    public var resourceType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceType != nil {
            map["ResourceType"] = self.resourceType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceType"] as? String {
            self.resourceType = value
        }
    }
}

public class ListTagKeysResponseBody : Tea.TeaModel {
    public class Keys : Tea.TeaModel {
        public var category: String?

        public var key: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.category != nil {
                map["Category"] = self.category!
            }
            if self.key != nil {
                map["Key"] = self.key!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Category"] as? String {
                self.category = value
            }
            if let value = dict["Key"] as? String {
                self.key = value
            }
        }
    }
    public var keys: [ListTagKeysResponseBody.Keys]?

    public var nextToken: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.keys != nil {
            var tmp : [Any] = []
            for k in self.keys! {
                tmp.append(k.toMap())
            }
            map["Keys"] = tmp
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Keys"] as? [Any?] {
            var tmp : [ListTagKeysResponseBody.Keys] = []
            for v in value {
                if v != nil {
                    var model = ListTagKeysResponseBody.Keys()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.keys = tmp
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListTagKeysResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListTagKeysResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListTagKeysResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListTagResourcesRequest : Tea.TeaModel {
    public class Tag : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var nextToken: String?

    public var regionId: String?

    public var resourceId: [String]?

    public var resourceType: String?

    public var tag: [ListTagResourcesRequest.Tag]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceId != nil {
            map["ResourceId"] = self.resourceId!
        }
        if self.resourceType != nil {
            map["ResourceType"] = self.resourceType!
        }
        if self.tag != nil {
            var tmp : [Any] = []
            for k in self.tag! {
                tmp.append(k.toMap())
            }
            map["Tag"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceId"] as? [String] {
            self.resourceId = value
        }
        if let value = dict["ResourceType"] as? String {
            self.resourceType = value
        }
        if let value = dict["Tag"] as? [Any?] {
            var tmp : [ListTagResourcesRequest.Tag] = []
            for v in value {
                if v != nil {
                    var model = ListTagResourcesRequest.Tag()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tag = tmp
        }
    }
}

public class ListTagResourcesResponseBody : Tea.TeaModel {
    public class TagResources : Tea.TeaModel {
        public var resourceId: String?

        public var resourceType: String?

        public var tagKey: String?

        public var tagValue: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.resourceId != nil {
                map["ResourceId"] = self.resourceId!
            }
            if self.resourceType != nil {
                map["ResourceType"] = self.resourceType!
            }
            if self.tagKey != nil {
                map["TagKey"] = self.tagKey!
            }
            if self.tagValue != nil {
                map["TagValue"] = self.tagValue!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ResourceId"] as? String {
                self.resourceId = value
            }
            if let value = dict["ResourceType"] as? String {
                self.resourceType = value
            }
            if let value = dict["TagKey"] as? String {
                self.tagKey = value
            }
            if let value = dict["TagValue"] as? String {
                self.tagValue = value
            }
        }
    }
    public var nextToken: String?

    public var requestId: String?

    public var tagResources: [ListTagResourcesResponseBody.TagResources]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.tagResources != nil {
            var tmp : [Any] = []
            for k in self.tagResources! {
                tmp.append(k.toMap())
            }
            map["TagResources"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TagResources"] as? [Any?] {
            var tmp : [ListTagResourcesResponseBody.TagResources] = []
            for v in value {
                if v != nil {
                    var model = ListTagResourcesResponseBody.TagResources()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tagResources = tmp
        }
    }
}

public class ListTagResourcesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListTagResourcesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListTagResourcesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListTagValuesRequest : Tea.TeaModel {
    public var instanceId: String?

    public var key: String?

    public var nextToken: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public var resourceType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.key != nil {
            map["Key"] = self.key!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.resourceType != nil {
            map["ResourceType"] = self.resourceType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["Key"] as? String {
            self.key = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["ResourceType"] as? String {
            self.resourceType = value
        }
    }
}

public class ListTagValuesResponseBody : Tea.TeaModel {
    public var nextToken: String?

    public var requestId: String?

    public var values: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.values != nil {
            map["Values"] = self.values!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Values"] as? [String] {
            self.values = value
        }
    }
}

public class ListTagValuesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListTagValuesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListTagValuesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyApisecAbnormalsRequest : Tea.TeaModel {
    public var abnormalIds: [String]?

    public var clusterId: String?

    public var instanceId: String?

    public var note: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public var userStatus: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.abnormalIds != nil {
            map["AbnormalIds"] = self.abnormalIds!
        }
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.note != nil {
            map["Note"] = self.note!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.userStatus != nil {
            map["UserStatus"] = self.userStatus!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AbnormalIds"] as? [String] {
            self.abnormalIds = value
        }
        if let value = dict["ClusterId"] as? String {
            self.clusterId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["Note"] as? String {
            self.note = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["UserStatus"] as? String {
            self.userStatus = value
        }
    }
}

public class ModifyApisecAbnormalsResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyApisecAbnormalsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyApisecAbnormalsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyApisecAbnormalsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyApisecApiResourceRequest : Tea.TeaModel {
    public var apiId: String?

    public var clusterId: String?

    public var follow: Int64?

    public var instanceId: String?

    public var note: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiId != nil {
            map["ApiId"] = self.apiId!
        }
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.follow != nil {
            map["Follow"] = self.follow!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.note != nil {
            map["Note"] = self.note!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiId"] as? String {
            self.apiId = value
        }
        if let value = dict["ClusterId"] as? String {
            self.clusterId = value
        }
        if let value = dict["Follow"] as? Int64 {
            self.follow = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["Note"] as? String {
            self.note = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class ModifyApisecApiResourceResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyApisecApiResourceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyApisecApiResourceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyApisecApiResourceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyApisecEventsRequest : Tea.TeaModel {
    public var clusterId: String?

    public var eventIds: [String]?

    public var instanceId: String?

    public var note: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public var userStatus: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.eventIds != nil {
            map["EventIds"] = self.eventIds!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.note != nil {
            map["Note"] = self.note!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.userStatus != nil {
            map["UserStatus"] = self.userStatus!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClusterId"] as? String {
            self.clusterId = value
        }
        if let value = dict["EventIds"] as? [String] {
            self.eventIds = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["Note"] as? String {
            self.note = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["UserStatus"] as? String {
            self.userStatus = value
        }
    }
}

public class ModifyApisecEventsResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyApisecEventsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyApisecEventsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyApisecEventsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyApisecLogDeliveryRequest : Tea.TeaModel {
    public var assertKey: String?

    public var instanceId: String?

    public var logRegionId: String?

    public var logStoreName: String?

    public var projectName: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.assertKey != nil {
            map["AssertKey"] = self.assertKey!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.logRegionId != nil {
            map["LogRegionId"] = self.logRegionId!
        }
        if self.logStoreName != nil {
            map["LogStoreName"] = self.logStoreName!
        }
        if self.projectName != nil {
            map["ProjectName"] = self.projectName!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AssertKey"] as? String {
            self.assertKey = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["LogRegionId"] as? String {
            self.logRegionId = value
        }
        if let value = dict["LogStoreName"] as? String {
            self.logStoreName = value
        }
        if let value = dict["ProjectName"] as? String {
            self.projectName = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class ModifyApisecLogDeliveryResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyApisecLogDeliveryResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyApisecLogDeliveryResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyApisecLogDeliveryResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyApisecLogDeliveryStatusRequest : Tea.TeaModel {
    public var assertKey: String?

    public var instanceId: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public var status: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.assertKey != nil {
            map["AssertKey"] = self.assertKey!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AssertKey"] as? String {
            self.assertKey = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["Status"] as? Bool {
            self.status = value
        }
    }
}

public class ModifyApisecLogDeliveryStatusResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyApisecLogDeliveryStatusResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyApisecLogDeliveryStatusResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyApisecLogDeliveryStatusResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyApisecModuleStatusRequest : Tea.TeaModel {
    public var instanceId: String?

    public var regionId: String?

    public var reportStatus: Int64?

    public var resourceGroups: String?

    public var resourceManagerResourceGroupId: String?

    public var resources: String?

    public var traceStatus: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.reportStatus != nil {
            map["ReportStatus"] = self.reportStatus!
        }
        if self.resourceGroups != nil {
            map["ResourceGroups"] = self.resourceGroups!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.resources != nil {
            map["Resources"] = self.resources!
        }
        if self.traceStatus != nil {
            map["TraceStatus"] = self.traceStatus!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ReportStatus"] as? Int64 {
            self.reportStatus = value
        }
        if let value = dict["ResourceGroups"] as? String {
            self.resourceGroups = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["Resources"] as? String {
            self.resources = value
        }
        if let value = dict["TraceStatus"] as? Int32 {
            self.traceStatus = value
        }
    }
}

public class ModifyApisecModuleStatusResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyApisecModuleStatusResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyApisecModuleStatusResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyApisecModuleStatusResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyApisecStatusRequest : Tea.TeaModel {
    public var apisecStatus: Int32?

    public var instanceId: String?

    public var regionId: String?

    public var resourceGroups: String?

    public var resourceManagerResourceGroupId: String?

    public var resources: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apisecStatus != nil {
            map["ApisecStatus"] = self.apisecStatus!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceGroups != nil {
            map["ResourceGroups"] = self.resourceGroups!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.resources != nil {
            map["Resources"] = self.resources!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApisecStatus"] as? Int32 {
            self.apisecStatus = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceGroups"] as? String {
            self.resourceGroups = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["Resources"] as? String {
            self.resources = value
        }
    }
}

public class ModifyApisecStatusResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyApisecStatusResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyApisecStatusResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyApisecStatusResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyCloudResourceRequest : Tea.TeaModel {
    public class Listen : Tea.TeaModel {
        public class Certificates : Tea.TeaModel {
            public var appliedType: String?

            public var certificateId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.appliedType != nil {
                    map["AppliedType"] = self.appliedType!
                }
                if self.certificateId != nil {
                    map["CertificateId"] = self.certificateId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AppliedType"] as? String {
                    self.appliedType = value
                }
                if let value = dict["CertificateId"] as? String {
                    self.certificateId = value
                }
            }
        }
        public var certificates: [ModifyCloudResourceRequest.Listen.Certificates]?

        public var cipherSuite: Int32?

        public var customCiphers: [String]?

        public var enableTLSv3: Bool?

        public var http2Enabled: Bool?

        public var port: Int32?

        public var protocol_: String?

        public var resourceInstanceId: String?

        public var resourceProduct: String?

        public var TLSVersion: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.certificates != nil {
                var tmp : [Any] = []
                for k in self.certificates! {
                    tmp.append(k.toMap())
                }
                map["Certificates"] = tmp
            }
            if self.cipherSuite != nil {
                map["CipherSuite"] = self.cipherSuite!
            }
            if self.customCiphers != nil {
                map["CustomCiphers"] = self.customCiphers!
            }
            if self.enableTLSv3 != nil {
                map["EnableTLSv3"] = self.enableTLSv3!
            }
            if self.http2Enabled != nil {
                map["Http2Enabled"] = self.http2Enabled!
            }
            if self.port != nil {
                map["Port"] = self.port!
            }
            if self.protocol_ != nil {
                map["Protocol"] = self.protocol_!
            }
            if self.resourceInstanceId != nil {
                map["ResourceInstanceId"] = self.resourceInstanceId!
            }
            if self.resourceProduct != nil {
                map["ResourceProduct"] = self.resourceProduct!
            }
            if self.TLSVersion != nil {
                map["TLSVersion"] = self.TLSVersion!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Certificates"] as? [Any?] {
                var tmp : [ModifyCloudResourceRequest.Listen.Certificates] = []
                for v in value {
                    if v != nil {
                        var model = ModifyCloudResourceRequest.Listen.Certificates()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.certificates = tmp
            }
            if let value = dict["CipherSuite"] as? Int32 {
                self.cipherSuite = value
            }
            if let value = dict["CustomCiphers"] as? [String] {
                self.customCiphers = value
            }
            if let value = dict["EnableTLSv3"] as? Bool {
                self.enableTLSv3 = value
            }
            if let value = dict["Http2Enabled"] as? Bool {
                self.http2Enabled = value
            }
            if let value = dict["Port"] as? Int32 {
                self.port = value
            }
            if let value = dict["Protocol"] as? String {
                self.protocol_ = value
            }
            if let value = dict["ResourceInstanceId"] as? String {
                self.resourceInstanceId = value
            }
            if let value = dict["ResourceProduct"] as? String {
                self.resourceProduct = value
            }
            if let value = dict["TLSVersion"] as? String {
                self.TLSVersion = value
            }
        }
    }
    public class Redirect : Tea.TeaModel {
        public class RequestHeaders : Tea.TeaModel {
            public var key: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.key != nil {
                    map["Key"] = self.key!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Key"] as? String {
                    self.key = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public var keepalive: Bool?

        public var keepaliveRequests: Int32?

        public var keepaliveTimeout: Int32?

        public var readTimeout: Int32?

        public var requestHeaders: [ModifyCloudResourceRequest.Redirect.RequestHeaders]?

        public var writeTimeout: Int32?

        public var xffHeaderMode: Int32?

        public var xffHeaders: [String]?

        public var xffProto: Bool?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.keepalive != nil {
                map["Keepalive"] = self.keepalive!
            }
            if self.keepaliveRequests != nil {
                map["KeepaliveRequests"] = self.keepaliveRequests!
            }
            if self.keepaliveTimeout != nil {
                map["KeepaliveTimeout"] = self.keepaliveTimeout!
            }
            if self.readTimeout != nil {
                map["ReadTimeout"] = self.readTimeout!
            }
            if self.requestHeaders != nil {
                var tmp : [Any] = []
                for k in self.requestHeaders! {
                    tmp.append(k.toMap())
                }
                map["RequestHeaders"] = tmp
            }
            if self.writeTimeout != nil {
                map["WriteTimeout"] = self.writeTimeout!
            }
            if self.xffHeaderMode != nil {
                map["XffHeaderMode"] = self.xffHeaderMode!
            }
            if self.xffHeaders != nil {
                map["XffHeaders"] = self.xffHeaders!
            }
            if self.xffProto != nil {
                map["XffProto"] = self.xffProto!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Keepalive"] as? Bool {
                self.keepalive = value
            }
            if let value = dict["KeepaliveRequests"] as? Int32 {
                self.keepaliveRequests = value
            }
            if let value = dict["KeepaliveTimeout"] as? Int32 {
                self.keepaliveTimeout = value
            }
            if let value = dict["ReadTimeout"] as? Int32 {
                self.readTimeout = value
            }
            if let value = dict["RequestHeaders"] as? [Any?] {
                var tmp : [ModifyCloudResourceRequest.Redirect.RequestHeaders] = []
                for v in value {
                    if v != nil {
                        var model = ModifyCloudResourceRequest.Redirect.RequestHeaders()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.requestHeaders = tmp
            }
            if let value = dict["WriteTimeout"] as? Int32 {
                self.writeTimeout = value
            }
            if let value = dict["XffHeaderMode"] as? Int32 {
                self.xffHeaderMode = value
            }
            if let value = dict["XffHeaders"] as? [String] {
                self.xffHeaders = value
            }
            if let value = dict["XffProto"] as? Bool {
                self.xffProto = value
            }
        }
    }
    public var instanceId: String?

    public var listen: ModifyCloudResourceRequest.Listen?

    public var redirect: ModifyCloudResourceRequest.Redirect?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.listen?.validate()
        try self.redirect?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.listen != nil {
            map["Listen"] = self.listen?.toMap()
        }
        if self.redirect != nil {
            map["Redirect"] = self.redirect?.toMap()
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["Listen"] as? [String: Any?] {
            var model = ModifyCloudResourceRequest.Listen()
            model.fromMap(value)
            self.listen = model
        }
        if let value = dict["Redirect"] as? [String: Any?] {
            var model = ModifyCloudResourceRequest.Redirect()
            model.fromMap(value)
            self.redirect = model
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class ModifyCloudResourceShrinkRequest : Tea.TeaModel {
    public var instanceId: String?

    public var listenShrink: String?

    public var redirectShrink: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.listenShrink != nil {
            map["Listen"] = self.listenShrink!
        }
        if self.redirectShrink != nil {
            map["Redirect"] = self.redirectShrink!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["Listen"] as? String {
            self.listenShrink = value
        }
        if let value = dict["Redirect"] as? String {
            self.redirectShrink = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class ModifyCloudResourceResponseBody : Tea.TeaModel {
    public var cloudResource: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cloudResource != nil {
            map["CloudResource"] = self.cloudResource!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CloudResource"] as? String {
            self.cloudResource = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyCloudResourceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyCloudResourceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyCloudResourceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyCloudResourceCertRequest : Tea.TeaModel {
    public class Certificates : Tea.TeaModel {
        public var appliedType: String?

        public var certificateId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.appliedType != nil {
                map["AppliedType"] = self.appliedType!
            }
            if self.certificateId != nil {
                map["CertificateId"] = self.certificateId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AppliedType"] as? String {
                self.appliedType = value
            }
            if let value = dict["CertificateId"] as? String {
                self.certificateId = value
            }
        }
    }
    public var certificates: [ModifyCloudResourceCertRequest.Certificates]?

    public var instanceId: String?

    public var port: Int32?

    public var regionId: String?

    public var resourceInstanceId: String?

    public var resourceProduct: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.certificates != nil {
            var tmp : [Any] = []
            for k in self.certificates! {
                tmp.append(k.toMap())
            }
            map["Certificates"] = tmp
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.port != nil {
            map["Port"] = self.port!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceInstanceId != nil {
            map["ResourceInstanceId"] = self.resourceInstanceId!
        }
        if self.resourceProduct != nil {
            map["ResourceProduct"] = self.resourceProduct!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Certificates"] as? [Any?] {
            var tmp : [ModifyCloudResourceCertRequest.Certificates] = []
            for v in value {
                if v != nil {
                    var model = ModifyCloudResourceCertRequest.Certificates()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.certificates = tmp
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["Port"] as? Int32 {
            self.port = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceInstanceId"] as? String {
            self.resourceInstanceId = value
        }
        if let value = dict["ResourceProduct"] as? String {
            self.resourceProduct = value
        }
    }
}

public class ModifyCloudResourceCertResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyCloudResourceCertResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyCloudResourceCertResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyCloudResourceCertResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyDefaultHttpsRequest : Tea.TeaModel {
    public var certId: String?

    public var cipherSuite: Int32?

    public var customCiphers: [String]?

    public var enableTLSv3: Bool?

    public var instanceId: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public var TLSVersion: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.certId != nil {
            map["CertId"] = self.certId!
        }
        if self.cipherSuite != nil {
            map["CipherSuite"] = self.cipherSuite!
        }
        if self.customCiphers != nil {
            map["CustomCiphers"] = self.customCiphers!
        }
        if self.enableTLSv3 != nil {
            map["EnableTLSv3"] = self.enableTLSv3!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.TLSVersion != nil {
            map["TLSVersion"] = self.TLSVersion!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CertId"] as? String {
            self.certId = value
        }
        if let value = dict["CipherSuite"] as? Int32 {
            self.cipherSuite = value
        }
        if let value = dict["CustomCiphers"] as? [String] {
            self.customCiphers = value
        }
        if let value = dict["EnableTLSv3"] as? Bool {
            self.enableTLSv3 = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["TLSVersion"] as? String {
            self.TLSVersion = value
        }
    }
}

public class ModifyDefaultHttpsResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyDefaultHttpsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyDefaultHttpsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyDefaultHttpsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyDefenseResourceGroupRequest : Tea.TeaModel {
    public var addList: String?

    public var deleteList: String?

    public var description_: String?

    public var groupName: String?

    public var instanceId: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.addList != nil {
            map["AddList"] = self.addList!
        }
        if self.deleteList != nil {
            map["DeleteList"] = self.deleteList!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.groupName != nil {
            map["GroupName"] = self.groupName!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AddList"] as? String {
            self.addList = value
        }
        if let value = dict["DeleteList"] as? String {
            self.deleteList = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["GroupName"] as? String {
            self.groupName = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class ModifyDefenseResourceGroupResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyDefenseResourceGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyDefenseResourceGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyDefenseResourceGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyDefenseResourceXffRequest : Tea.TeaModel {
    public class ResponseHeaders : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var acwCookieStatus: Int32?

    public var acwSecureStatus: Int32?

    public var acwV3SecureStatus: Int32?

    public var customHeaders: [String]?

    public var instanceId: String?

    public var regionId: String?

    public var resource: String?

    public var resourceManagerResourceGroupId: String?

    public var responseHeaders: [ModifyDefenseResourceXffRequest.ResponseHeaders]?

    public var xffStatus: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.acwCookieStatus != nil {
            map["AcwCookieStatus"] = self.acwCookieStatus!
        }
        if self.acwSecureStatus != nil {
            map["AcwSecureStatus"] = self.acwSecureStatus!
        }
        if self.acwV3SecureStatus != nil {
            map["AcwV3SecureStatus"] = self.acwV3SecureStatus!
        }
        if self.customHeaders != nil {
            map["CustomHeaders"] = self.customHeaders!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resource != nil {
            map["Resource"] = self.resource!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.responseHeaders != nil {
            var tmp : [Any] = []
            for k in self.responseHeaders! {
                tmp.append(k.toMap())
            }
            map["ResponseHeaders"] = tmp
        }
        if self.xffStatus != nil {
            map["XffStatus"] = self.xffStatus!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AcwCookieStatus"] as? Int32 {
            self.acwCookieStatus = value
        }
        if let value = dict["AcwSecureStatus"] as? Int32 {
            self.acwSecureStatus = value
        }
        if let value = dict["AcwV3SecureStatus"] as? Int32 {
            self.acwV3SecureStatus = value
        }
        if let value = dict["CustomHeaders"] as? [String] {
            self.customHeaders = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Resource"] as? String {
            self.resource = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["ResponseHeaders"] as? [Any?] {
            var tmp : [ModifyDefenseResourceXffRequest.ResponseHeaders] = []
            for v in value {
                if v != nil {
                    var model = ModifyDefenseResourceXffRequest.ResponseHeaders()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.responseHeaders = tmp
        }
        if let value = dict["XffStatus"] as? Int32 {
            self.xffStatus = value
        }
    }
}

public class ModifyDefenseResourceXffResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyDefenseResourceXffResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyDefenseResourceXffResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyDefenseResourceXffResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyDefenseRuleRequest : Tea.TeaModel {
    public var defenseScene: String?

    public var defenseType: String?

    public var instanceId: String?

    public var regionId: String?

    public var resource: String?

    public var resourceManagerResourceGroupId: String?

    public var rules: String?

    public var templateId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.defenseScene != nil {
            map["DefenseScene"] = self.defenseScene!
        }
        if self.defenseType != nil {
            map["DefenseType"] = self.defenseType!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resource != nil {
            map["Resource"] = self.resource!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.rules != nil {
            map["Rules"] = self.rules!
        }
        if self.templateId != nil {
            map["TemplateId"] = self.templateId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DefenseScene"] as? String {
            self.defenseScene = value
        }
        if let value = dict["DefenseType"] as? String {
            self.defenseType = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Resource"] as? String {
            self.resource = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["Rules"] as? String {
            self.rules = value
        }
        if let value = dict["TemplateId"] as? Int64 {
            self.templateId = value
        }
    }
}

public class ModifyDefenseRuleResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyDefenseRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyDefenseRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyDefenseRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyDefenseRuleCacheRequest : Tea.TeaModel {
    public var instanceId: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public var ruleId: Int64?

    public var templateId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.ruleId != nil {
            map["RuleId"] = self.ruleId!
        }
        if self.templateId != nil {
            map["TemplateId"] = self.templateId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["RuleId"] as? Int64 {
            self.ruleId = value
        }
        if let value = dict["TemplateId"] as? Int64 {
            self.templateId = value
        }
    }
}

public class ModifyDefenseRuleCacheResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyDefenseRuleCacheResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyDefenseRuleCacheResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyDefenseRuleCacheResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyDefenseRuleStatusRequest : Tea.TeaModel {
    public var defenseType: String?

    public var instanceId: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public var ruleId: Int64?

    public var ruleStatus: Int32?

    public var templateId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.defenseType != nil {
            map["DefenseType"] = self.defenseType!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.ruleId != nil {
            map["RuleId"] = self.ruleId!
        }
        if self.ruleStatus != nil {
            map["RuleStatus"] = self.ruleStatus!
        }
        if self.templateId != nil {
            map["TemplateId"] = self.templateId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DefenseType"] as? String {
            self.defenseType = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["RuleId"] as? Int64 {
            self.ruleId = value
        }
        if let value = dict["RuleStatus"] as? Int32 {
            self.ruleStatus = value
        }
        if let value = dict["TemplateId"] as? Int64 {
            self.templateId = value
        }
    }
}

public class ModifyDefenseRuleStatusResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyDefenseRuleStatusResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyDefenseRuleStatusResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyDefenseRuleStatusResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyDefenseSceneConfigRequest : Tea.TeaModel {
    public var configKey: String?

    public var configValue: String?

    public var defenseScene: String?

    public var instanceId: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configKey != nil {
            map["ConfigKey"] = self.configKey!
        }
        if self.configValue != nil {
            map["ConfigValue"] = self.configValue!
        }
        if self.defenseScene != nil {
            map["DefenseScene"] = self.defenseScene!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConfigKey"] as? String {
            self.configKey = value
        }
        if let value = dict["ConfigValue"] as? String {
            self.configValue = value
        }
        if let value = dict["DefenseScene"] as? String {
            self.defenseScene = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class ModifyDefenseSceneConfigResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyDefenseSceneConfigResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyDefenseSceneConfigResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyDefenseSceneConfigResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyDefenseTemplateRequest : Tea.TeaModel {
    public var description_: String?

    public var instanceId: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public var templateId: Int64?

    public var templateName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.templateId != nil {
            map["TemplateId"] = self.templateId!
        }
        if self.templateName != nil {
            map["TemplateName"] = self.templateName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["TemplateId"] as? Int64 {
            self.templateId = value
        }
        if let value = dict["TemplateName"] as? String {
            self.templateName = value
        }
    }
}

public class ModifyDefenseTemplateResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyDefenseTemplateResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyDefenseTemplateResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyDefenseTemplateResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyDefenseTemplateStatusRequest : Tea.TeaModel {
    public var instanceId: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public var templateId: Int64?

    public var templateStatus: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.templateId != nil {
            map["TemplateId"] = self.templateId!
        }
        if self.templateStatus != nil {
            map["TemplateStatus"] = self.templateStatus!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["TemplateId"] as? Int64 {
            self.templateId = value
        }
        if let value = dict["TemplateStatus"] as? Int32 {
            self.templateStatus = value
        }
    }
}

public class ModifyDefenseTemplateStatusResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyDefenseTemplateStatusResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyDefenseTemplateStatusResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyDefenseTemplateStatusResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyDomainRequest : Tea.TeaModel {
    public class Listen : Tea.TeaModel {
        public var certId: String?

        public var cipherSuite: Int32?

        public var customCiphers: [String]?

        public var enableTLSv3: Bool?

        public var exclusiveIp: Bool?

        public var focusHttps: Bool?

        public var http2Enabled: Bool?

        public var httpPorts: [Int32]?

        public var httpsPorts: [Int32]?

        public var IPv6Enabled: Bool?

        public var protectionResource: String?

        public var SM2AccessOnly: Bool?

        public var SM2CertId: String?

        public var SM2Enabled: Bool?

        public var TLSVersion: String?

        public var xffHeaderMode: Int32?

        public var xffHeaders: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.certId != nil {
                map["CertId"] = self.certId!
            }
            if self.cipherSuite != nil {
                map["CipherSuite"] = self.cipherSuite!
            }
            if self.customCiphers != nil {
                map["CustomCiphers"] = self.customCiphers!
            }
            if self.enableTLSv3 != nil {
                map["EnableTLSv3"] = self.enableTLSv3!
            }
            if self.exclusiveIp != nil {
                map["ExclusiveIp"] = self.exclusiveIp!
            }
            if self.focusHttps != nil {
                map["FocusHttps"] = self.focusHttps!
            }
            if self.http2Enabled != nil {
                map["Http2Enabled"] = self.http2Enabled!
            }
            if self.httpPorts != nil {
                map["HttpPorts"] = self.httpPorts!
            }
            if self.httpsPorts != nil {
                map["HttpsPorts"] = self.httpsPorts!
            }
            if self.IPv6Enabled != nil {
                map["IPv6Enabled"] = self.IPv6Enabled!
            }
            if self.protectionResource != nil {
                map["ProtectionResource"] = self.protectionResource!
            }
            if self.SM2AccessOnly != nil {
                map["SM2AccessOnly"] = self.SM2AccessOnly!
            }
            if self.SM2CertId != nil {
                map["SM2CertId"] = self.SM2CertId!
            }
            if self.SM2Enabled != nil {
                map["SM2Enabled"] = self.SM2Enabled!
            }
            if self.TLSVersion != nil {
                map["TLSVersion"] = self.TLSVersion!
            }
            if self.xffHeaderMode != nil {
                map["XffHeaderMode"] = self.xffHeaderMode!
            }
            if self.xffHeaders != nil {
                map["XffHeaders"] = self.xffHeaders!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CertId"] as? String {
                self.certId = value
            }
            if let value = dict["CipherSuite"] as? Int32 {
                self.cipherSuite = value
            }
            if let value = dict["CustomCiphers"] as? [String] {
                self.customCiphers = value
            }
            if let value = dict["EnableTLSv3"] as? Bool {
                self.enableTLSv3 = value
            }
            if let value = dict["ExclusiveIp"] as? Bool {
                self.exclusiveIp = value
            }
            if let value = dict["FocusHttps"] as? Bool {
                self.focusHttps = value
            }
            if let value = dict["Http2Enabled"] as? Bool {
                self.http2Enabled = value
            }
            if let value = dict["HttpPorts"] as? [Int32] {
                self.httpPorts = value
            }
            if let value = dict["HttpsPorts"] as? [Int32] {
                self.httpsPorts = value
            }
            if let value = dict["IPv6Enabled"] as? Bool {
                self.IPv6Enabled = value
            }
            if let value = dict["ProtectionResource"] as? String {
                self.protectionResource = value
            }
            if let value = dict["SM2AccessOnly"] as? Bool {
                self.SM2AccessOnly = value
            }
            if let value = dict["SM2CertId"] as? String {
                self.SM2CertId = value
            }
            if let value = dict["SM2Enabled"] as? Bool {
                self.SM2Enabled = value
            }
            if let value = dict["TLSVersion"] as? String {
                self.TLSVersion = value
            }
            if let value = dict["XffHeaderMode"] as? Int32 {
                self.xffHeaderMode = value
            }
            if let value = dict["XffHeaders"] as? [String] {
                self.xffHeaders = value
            }
        }
    }
    public class Redirect : Tea.TeaModel {
        public class BackendPorts : Tea.TeaModel {
            public var backendPort: Int32?

            public var listenPort: Int32?

            public var protocol_: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.backendPort != nil {
                    map["BackendPort"] = self.backendPort!
                }
                if self.listenPort != nil {
                    map["ListenPort"] = self.listenPort!
                }
                if self.protocol_ != nil {
                    map["Protocol"] = self.protocol_!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["BackendPort"] as? Int32 {
                    self.backendPort = value
                }
                if let value = dict["ListenPort"] as? Int32 {
                    self.listenPort = value
                }
                if let value = dict["Protocol"] as? String {
                    self.protocol_ = value
                }
            }
        }
        public class RequestHeaders : Tea.TeaModel {
            public var key: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.key != nil {
                    map["Key"] = self.key!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Key"] as? String {
                    self.key = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public var backendPorts: [ModifyDomainRequest.Redirect.BackendPorts]?

        public var backends: [String]?

        public var backupBackends: [String]?

        public var cnameEnabled: Bool?

        public var connectTimeout: Int32?

        public var focusHttpBackend: Bool?

        public var keepalive: Bool?

        public var keepaliveRequests: Int32?

        public var keepaliveTimeout: Int32?

        public var loadbalance: String?

        public var readTimeout: Int32?

        public var requestHeaders: [ModifyDomainRequest.Redirect.RequestHeaders]?

        public var retry: Bool?

        public var routingRules: String?

        public var sniEnabled: Bool?

        public var sniHost: String?

        public var WLProxyClientIp: Bool?

        public var webServerType: Bool?

        public var writeTimeout: Int32?

        public var XClientIp: Bool?

        public var XTrueIp: Bool?

        public var xffProto: Bool?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.backendPorts != nil {
                var tmp : [Any] = []
                for k in self.backendPorts! {
                    tmp.append(k.toMap())
                }
                map["BackendPorts"] = tmp
            }
            if self.backends != nil {
                map["Backends"] = self.backends!
            }
            if self.backupBackends != nil {
                map["BackupBackends"] = self.backupBackends!
            }
            if self.cnameEnabled != nil {
                map["CnameEnabled"] = self.cnameEnabled!
            }
            if self.connectTimeout != nil {
                map["ConnectTimeout"] = self.connectTimeout!
            }
            if self.focusHttpBackend != nil {
                map["FocusHttpBackend"] = self.focusHttpBackend!
            }
            if self.keepalive != nil {
                map["Keepalive"] = self.keepalive!
            }
            if self.keepaliveRequests != nil {
                map["KeepaliveRequests"] = self.keepaliveRequests!
            }
            if self.keepaliveTimeout != nil {
                map["KeepaliveTimeout"] = self.keepaliveTimeout!
            }
            if self.loadbalance != nil {
                map["Loadbalance"] = self.loadbalance!
            }
            if self.readTimeout != nil {
                map["ReadTimeout"] = self.readTimeout!
            }
            if self.requestHeaders != nil {
                var tmp : [Any] = []
                for k in self.requestHeaders! {
                    tmp.append(k.toMap())
                }
                map["RequestHeaders"] = tmp
            }
            if self.retry != nil {
                map["Retry"] = self.retry!
            }
            if self.routingRules != nil {
                map["RoutingRules"] = self.routingRules!
            }
            if self.sniEnabled != nil {
                map["SniEnabled"] = self.sniEnabled!
            }
            if self.sniHost != nil {
                map["SniHost"] = self.sniHost!
            }
            if self.WLProxyClientIp != nil {
                map["WLProxyClientIp"] = self.WLProxyClientIp!
            }
            if self.webServerType != nil {
                map["WebServerType"] = self.webServerType!
            }
            if self.writeTimeout != nil {
                map["WriteTimeout"] = self.writeTimeout!
            }
            if self.XClientIp != nil {
                map["XClientIp"] = self.XClientIp!
            }
            if self.XTrueIp != nil {
                map["XTrueIp"] = self.XTrueIp!
            }
            if self.xffProto != nil {
                map["XffProto"] = self.xffProto!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["BackendPorts"] as? [Any?] {
                var tmp : [ModifyDomainRequest.Redirect.BackendPorts] = []
                for v in value {
                    if v != nil {
                        var model = ModifyDomainRequest.Redirect.BackendPorts()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.backendPorts = tmp
            }
            if let value = dict["Backends"] as? [String] {
                self.backends = value
            }
            if let value = dict["BackupBackends"] as? [String] {
                self.backupBackends = value
            }
            if let value = dict["CnameEnabled"] as? Bool {
                self.cnameEnabled = value
            }
            if let value = dict["ConnectTimeout"] as? Int32 {
                self.connectTimeout = value
            }
            if let value = dict["FocusHttpBackend"] as? Bool {
                self.focusHttpBackend = value
            }
            if let value = dict["Keepalive"] as? Bool {
                self.keepalive = value
            }
            if let value = dict["KeepaliveRequests"] as? Int32 {
                self.keepaliveRequests = value
            }
            if let value = dict["KeepaliveTimeout"] as? Int32 {
                self.keepaliveTimeout = value
            }
            if let value = dict["Loadbalance"] as? String {
                self.loadbalance = value
            }
            if let value = dict["ReadTimeout"] as? Int32 {
                self.readTimeout = value
            }
            if let value = dict["RequestHeaders"] as? [Any?] {
                var tmp : [ModifyDomainRequest.Redirect.RequestHeaders] = []
                for v in value {
                    if v != nil {
                        var model = ModifyDomainRequest.Redirect.RequestHeaders()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.requestHeaders = tmp
            }
            if let value = dict["Retry"] as? Bool {
                self.retry = value
            }
            if let value = dict["RoutingRules"] as? String {
                self.routingRules = value
            }
            if let value = dict["SniEnabled"] as? Bool {
                self.sniEnabled = value
            }
            if let value = dict["SniHost"] as? String {
                self.sniHost = value
            }
            if let value = dict["WLProxyClientIp"] as? Bool {
                self.WLProxyClientIp = value
            }
            if let value = dict["WebServerType"] as? Bool {
                self.webServerType = value
            }
            if let value = dict["WriteTimeout"] as? Int32 {
                self.writeTimeout = value
            }
            if let value = dict["XClientIp"] as? Bool {
                self.XClientIp = value
            }
            if let value = dict["XTrueIp"] as? Bool {
                self.XTrueIp = value
            }
            if let value = dict["XffProto"] as? Bool {
                self.xffProto = value
            }
        }
    }
    public var accessType: String?

    public var domain: String?

    public var domainId: String?

    public var instanceId: String?

    public var listen: ModifyDomainRequest.Listen?

    public var redirect: ModifyDomainRequest.Redirect?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.listen?.validate()
        try self.redirect?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.accessType != nil {
            map["AccessType"] = self.accessType!
        }
        if self.domain != nil {
            map["Domain"] = self.domain!
        }
        if self.domainId != nil {
            map["DomainId"] = self.domainId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.listen != nil {
            map["Listen"] = self.listen?.toMap()
        }
        if self.redirect != nil {
            map["Redirect"] = self.redirect?.toMap()
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AccessType"] as? String {
            self.accessType = value
        }
        if let value = dict["Domain"] as? String {
            self.domain = value
        }
        if let value = dict["DomainId"] as? String {
            self.domainId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["Listen"] as? [String: Any?] {
            var model = ModifyDomainRequest.Listen()
            model.fromMap(value)
            self.listen = model
        }
        if let value = dict["Redirect"] as? [String: Any?] {
            var model = ModifyDomainRequest.Redirect()
            model.fromMap(value)
            self.redirect = model
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class ModifyDomainShrinkRequest : Tea.TeaModel {
    public var accessType: String?

    public var domain: String?

    public var domainId: String?

    public var instanceId: String?

    public var listenShrink: String?

    public var redirectShrink: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.accessType != nil {
            map["AccessType"] = self.accessType!
        }
        if self.domain != nil {
            map["Domain"] = self.domain!
        }
        if self.domainId != nil {
            map["DomainId"] = self.domainId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.listenShrink != nil {
            map["Listen"] = self.listenShrink!
        }
        if self.redirectShrink != nil {
            map["Redirect"] = self.redirectShrink!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AccessType"] as? String {
            self.accessType = value
        }
        if let value = dict["Domain"] as? String {
            self.domain = value
        }
        if let value = dict["DomainId"] as? String {
            self.domainId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["Listen"] as? String {
            self.listenShrink = value
        }
        if let value = dict["Redirect"] as? String {
            self.redirectShrink = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class ModifyDomainResponseBody : Tea.TeaModel {
    public class DomainInfo : Tea.TeaModel {
        public var cname: String?

        public var domain: String?

        public var domainId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.cname != nil {
                map["Cname"] = self.cname!
            }
            if self.domain != nil {
                map["Domain"] = self.domain!
            }
            if self.domainId != nil {
                map["DomainId"] = self.domainId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Cname"] as? String {
                self.cname = value
            }
            if let value = dict["Domain"] as? String {
                self.domain = value
            }
            if let value = dict["DomainId"] as? String {
                self.domainId = value
            }
        }
    }
    public var domainInfo: ModifyDomainResponseBody.DomainInfo?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.domainInfo?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.domainInfo != nil {
            map["DomainInfo"] = self.domainInfo?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DomainInfo"] as? [String: Any?] {
            var model = ModifyDomainResponseBody.DomainInfo()
            model.fromMap(value)
            self.domainInfo = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyDomainResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyDomainResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyDomainResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyDomainCertRequest : Tea.TeaModel {
    public var certId: String?

    public var cipherSuite: String?

    public var customCiphers: [String]?

    public var domain: String?

    public var enableTLSv3: Bool?

    public var instanceId: String?

    public var regionId: String?

    public var TLSVersion: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.certId != nil {
            map["CertId"] = self.certId!
        }
        if self.cipherSuite != nil {
            map["CipherSuite"] = self.cipherSuite!
        }
        if self.customCiphers != nil {
            map["CustomCiphers"] = self.customCiphers!
        }
        if self.domain != nil {
            map["Domain"] = self.domain!
        }
        if self.enableTLSv3 != nil {
            map["EnableTLSv3"] = self.enableTLSv3!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.TLSVersion != nil {
            map["TLSVersion"] = self.TLSVersion!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CertId"] as? String {
            self.certId = value
        }
        if let value = dict["CipherSuite"] as? String {
            self.cipherSuite = value
        }
        if let value = dict["CustomCiphers"] as? [String] {
            self.customCiphers = value
        }
        if let value = dict["Domain"] as? String {
            self.domain = value
        }
        if let value = dict["EnableTLSv3"] as? Bool {
            self.enableTLSv3 = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["TLSVersion"] as? String {
            self.TLSVersion = value
        }
    }
}

public class ModifyDomainCertResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyDomainCertResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyDomainCertResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyDomainCertResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyDomainPunishStatusRequest : Tea.TeaModel {
    public var domain: String?

    public var instanceId: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.domain != nil {
            map["Domain"] = self.domain!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Domain"] as? String {
            self.domain = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class ModifyDomainPunishStatusResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyDomainPunishStatusResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyDomainPunishStatusResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyDomainPunishStatusResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyHybridCloudClusterRequest : Tea.TeaModel {
    public var accessMode: String?

    public var accessRegion: String?

    public var clusterName: String?

    public var httpPorts: String?

    public var httpsPorts: String?

    public var id: Int64?

    public var instanceId: String?

    public var logFieldsNotReturned: String?

    public var protectionServerCount: Int32?

    public var proxyStatus: String?

    public var proxyType: String?

    public var regionId: String?

    public var remark: String?

    public var resourceManagerResourceGroupId: String?

    public var ruleConfig: String?

    public var ruleStatus: String?

    public var ruleType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.accessMode != nil {
            map["AccessMode"] = self.accessMode!
        }
        if self.accessRegion != nil {
            map["AccessRegion"] = self.accessRegion!
        }
        if self.clusterName != nil {
            map["ClusterName"] = self.clusterName!
        }
        if self.httpPorts != nil {
            map["HttpPorts"] = self.httpPorts!
        }
        if self.httpsPorts != nil {
            map["HttpsPorts"] = self.httpsPorts!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.logFieldsNotReturned != nil {
            map["LogFieldsNotReturned"] = self.logFieldsNotReturned!
        }
        if self.protectionServerCount != nil {
            map["ProtectionServerCount"] = self.protectionServerCount!
        }
        if self.proxyStatus != nil {
            map["ProxyStatus"] = self.proxyStatus!
        }
        if self.proxyType != nil {
            map["ProxyType"] = self.proxyType!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.remark != nil {
            map["Remark"] = self.remark!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.ruleConfig != nil {
            map["RuleConfig"] = self.ruleConfig!
        }
        if self.ruleStatus != nil {
            map["RuleStatus"] = self.ruleStatus!
        }
        if self.ruleType != nil {
            map["RuleType"] = self.ruleType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AccessMode"] as? String {
            self.accessMode = value
        }
        if let value = dict["AccessRegion"] as? String {
            self.accessRegion = value
        }
        if let value = dict["ClusterName"] as? String {
            self.clusterName = value
        }
        if let value = dict["HttpPorts"] as? String {
            self.httpPorts = value
        }
        if let value = dict["HttpsPorts"] as? String {
            self.httpsPorts = value
        }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["LogFieldsNotReturned"] as? String {
            self.logFieldsNotReturned = value
        }
        if let value = dict["ProtectionServerCount"] as? Int32 {
            self.protectionServerCount = value
        }
        if let value = dict["ProxyStatus"] as? String {
            self.proxyStatus = value
        }
        if let value = dict["ProxyType"] as? String {
            self.proxyType = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Remark"] as? String {
            self.remark = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["RuleConfig"] as? String {
            self.ruleConfig = value
        }
        if let value = dict["RuleStatus"] as? String {
            self.ruleStatus = value
        }
        if let value = dict["RuleType"] as? String {
            self.ruleType = value
        }
    }
}

public class ModifyHybridCloudClusterResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyHybridCloudClusterResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyHybridCloudClusterResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyHybridCloudClusterResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyHybridCloudClusterBypassStatusRequest : Tea.TeaModel {
    public var clusterResourceId: String?

    public var instanceId: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public var ruleStatus: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clusterResourceId != nil {
            map["ClusterResourceId"] = self.clusterResourceId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.ruleStatus != nil {
            map["RuleStatus"] = self.ruleStatus!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClusterResourceId"] as? String {
            self.clusterResourceId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["RuleStatus"] as? String {
            self.ruleStatus = value
        }
    }
}

public class ModifyHybridCloudClusterBypassStatusResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyHybridCloudClusterBypassStatusResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyHybridCloudClusterBypassStatusResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyHybridCloudClusterBypassStatusResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyHybridCloudClusterRuleRequest : Tea.TeaModel {
    public var clusterId: Int64?

    public var clusterRuleResourceId: String?

    public var instanceId: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public var ruleConfig: String?

    public var ruleStatus: String?

    public var ruleType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.clusterRuleResourceId != nil {
            map["ClusterRuleResourceId"] = self.clusterRuleResourceId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.ruleConfig != nil {
            map["RuleConfig"] = self.ruleConfig!
        }
        if self.ruleStatus != nil {
            map["RuleStatus"] = self.ruleStatus!
        }
        if self.ruleType != nil {
            map["RuleType"] = self.ruleType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClusterId"] as? Int64 {
            self.clusterId = value
        }
        if let value = dict["ClusterRuleResourceId"] as? String {
            self.clusterRuleResourceId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["RuleConfig"] as? String {
            self.ruleConfig = value
        }
        if let value = dict["RuleStatus"] as? String {
            self.ruleStatus = value
        }
        if let value = dict["RuleType"] as? String {
            self.ruleType = value
        }
    }
}

public class ModifyHybridCloudClusterRuleResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyHybridCloudClusterRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyHybridCloudClusterRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyHybridCloudClusterRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyHybridCloudGroupRequest : Tea.TeaModel {
    public var clusterId: Int64?

    public var groupId: Int64?

    public var groupName: String?

    public var instanceId: String?

    public var regionId: String?

    public var remark: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.groupName != nil {
            map["GroupName"] = self.groupName!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.remark != nil {
            map["Remark"] = self.remark!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClusterId"] as? Int64 {
            self.clusterId = value
        }
        if let value = dict["GroupId"] as? Int64 {
            self.groupId = value
        }
        if let value = dict["GroupName"] as? String {
            self.groupName = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Remark"] as? String {
            self.remark = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class ModifyHybridCloudGroupResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyHybridCloudGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyHybridCloudGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyHybridCloudGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyHybridCloudGroupExpansionServerRequest : Tea.TeaModel {
    public var clusterId: Int64?

    public var groupId: Int64?

    public var instanceId: String?

    public var mids: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.mids != nil {
            map["Mids"] = self.mids!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClusterId"] as? Int64 {
            self.clusterId = value
        }
        if let value = dict["GroupId"] as? Int64 {
            self.groupId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["Mids"] as? String {
            self.mids = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class ModifyHybridCloudGroupExpansionServerResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyHybridCloudGroupExpansionServerResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyHybridCloudGroupExpansionServerResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyHybridCloudGroupExpansionServerResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyHybridCloudGroupShrinkServerRequest : Tea.TeaModel {
    public var clusterId: Int64?

    public var groupId: Int64?

    public var instanceId: String?

    public var mids: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.mids != nil {
            map["Mids"] = self.mids!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClusterId"] as? Int64 {
            self.clusterId = value
        }
        if let value = dict["GroupId"] as? Int64 {
            self.groupId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["Mids"] as? String {
            self.mids = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class ModifyHybridCloudGroupShrinkServerResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyHybridCloudGroupShrinkServerResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyHybridCloudGroupShrinkServerResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyHybridCloudGroupShrinkServerResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyHybridCloudSdkPullinStatusRequest : Tea.TeaModel {
    public var instanceId: String?

    public var mid: String?

    public var pullinStatus: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.mid != nil {
            map["Mid"] = self.mid!
        }
        if self.pullinStatus != nil {
            map["PullinStatus"] = self.pullinStatus!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["Mid"] as? String {
            self.mid = value
        }
        if let value = dict["PullinStatus"] as? String {
            self.pullinStatus = value
        }
    }
}

public class ModifyHybridCloudSdkPullinStatusResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyHybridCloudSdkPullinStatusResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyHybridCloudSdkPullinStatusResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyHybridCloudSdkPullinStatusResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyHybridCloudServerRequest : Tea.TeaModel {
    public var continents: String?

    public var customName: String?

    public var instanceId: String?

    public var mid: String?

    public var operator_: String?

    public var regionCode: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.continents != nil {
            map["Continents"] = self.continents!
        }
        if self.customName != nil {
            map["CustomName"] = self.customName!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.mid != nil {
            map["Mid"] = self.mid!
        }
        if self.operator_ != nil {
            map["Operator"] = self.operator_!
        }
        if self.regionCode != nil {
            map["RegionCode"] = self.regionCode!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Continents"] as? String {
            self.continents = value
        }
        if let value = dict["CustomName"] as? String {
            self.customName = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["Mid"] as? String {
            self.mid = value
        }
        if let value = dict["Operator"] as? String {
            self.operator_ = value
        }
        if let value = dict["RegionCode"] as? String {
            self.regionCode = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class ModifyHybridCloudServerResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyHybridCloudServerResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyHybridCloudServerResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyHybridCloudServerResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyLogDeliveryConfigRequest : Tea.TeaModel {
    public var deliveryDetail: String?

    public var deliveryName: String?

    public var deliveryType: String?

    public var instanceId: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.deliveryDetail != nil {
            map["DeliveryDetail"] = self.deliveryDetail!
        }
        if self.deliveryName != nil {
            map["DeliveryName"] = self.deliveryName!
        }
        if self.deliveryType != nil {
            map["DeliveryType"] = self.deliveryType!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DeliveryDetail"] as? String {
            self.deliveryDetail = value
        }
        if let value = dict["DeliveryName"] as? String {
            self.deliveryName = value
        }
        if let value = dict["DeliveryType"] as? String {
            self.deliveryType = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class ModifyLogDeliveryConfigResponseBody : Tea.TeaModel {
    public var deliveryName: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.deliveryName != nil {
            map["DeliveryName"] = self.deliveryName!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DeliveryName"] as? String {
            self.deliveryName = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyLogDeliveryConfigResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyLogDeliveryConfigResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyLogDeliveryConfigResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyMajorProtectionBlackIpRequest : Tea.TeaModel {
    public var description_: String?

    public var expiredTime: Int64?

    public var instanceId: String?

    public var ipList: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public var ruleId: Int64?

    public var templateId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.expiredTime != nil {
            map["ExpiredTime"] = self.expiredTime!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.ipList != nil {
            map["IpList"] = self.ipList!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.ruleId != nil {
            map["RuleId"] = self.ruleId!
        }
        if self.templateId != nil {
            map["TemplateId"] = self.templateId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["ExpiredTime"] as? Int64 {
            self.expiredTime = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["IpList"] as? String {
            self.ipList = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["RuleId"] as? Int64 {
            self.ruleId = value
        }
        if let value = dict["TemplateId"] as? Int64 {
            self.templateId = value
        }
    }
}

public class ModifyMajorProtectionBlackIpResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyMajorProtectionBlackIpResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyMajorProtectionBlackIpResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyMajorProtectionBlackIpResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyMemberAccountRequest : Tea.TeaModel {
    public var description_: String?

    public var instanceId: String?

    public var memberAccountId: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public var sourceIp: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.memberAccountId != nil {
            map["MemberAccountId"] = self.memberAccountId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.sourceIp != nil {
            map["SourceIp"] = self.sourceIp!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["MemberAccountId"] as? String {
            self.memberAccountId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["SourceIp"] as? String {
            self.sourceIp = value
        }
    }
}

public class ModifyMemberAccountResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyMemberAccountResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyMemberAccountResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyMemberAccountResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyPauseProtectionStatusRequest : Tea.TeaModel {
    public var instanceId: String?

    public var pauseStatus: Int32?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.pauseStatus != nil {
            map["PauseStatus"] = self.pauseStatus!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["PauseStatus"] as? Int32 {
            self.pauseStatus = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class ModifyPauseProtectionStatusResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyPauseProtectionStatusResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyPauseProtectionStatusResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyPauseProtectionStatusResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyResourceLogDeliveryStatusRequest : Tea.TeaModel {
    public var deliveryName: String?

    public var instanceId: String?

    public var regionId: String?

    public var resource: String?

    public var resourceManagerResourceGroupId: String?

    public var status: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.deliveryName != nil {
            map["DeliveryName"] = self.deliveryName!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resource != nil {
            map["Resource"] = self.resource!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DeliveryName"] as? String {
            self.deliveryName = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Resource"] as? String {
            self.resource = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["Status"] as? Bool {
            self.status = value
        }
    }
}

public class ModifyResourceLogDeliveryStatusResponseBody : Tea.TeaModel {
    public var deliveryName: String?

    public var deliveryType: String?

    public var requestId: String?

    public var status: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.deliveryName != nil {
            map["DeliveryName"] = self.deliveryName!
        }
        if self.deliveryType != nil {
            map["DeliveryType"] = self.deliveryType!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DeliveryName"] as? String {
            self.deliveryName = value
        }
        if let value = dict["DeliveryType"] as? String {
            self.deliveryType = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Status"] as? Bool {
            self.status = value
        }
    }
}

public class ModifyResourceLogDeliveryStatusResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyResourceLogDeliveryStatusResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyResourceLogDeliveryStatusResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyResourceLogFieldConfigRequest : Tea.TeaModel {
    public var deliveryType: String?

    public var extendConfig: String?

    public var fieldList: String?

    public var instanceId: String?

    public var logDeliveryStrategy: String?

    public var regionId: String?

    public var resource: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.deliveryType != nil {
            map["DeliveryType"] = self.deliveryType!
        }
        if self.extendConfig != nil {
            map["ExtendConfig"] = self.extendConfig!
        }
        if self.fieldList != nil {
            map["FieldList"] = self.fieldList!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.logDeliveryStrategy != nil {
            map["LogDeliveryStrategy"] = self.logDeliveryStrategy!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resource != nil {
            map["Resource"] = self.resource!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DeliveryType"] as? String {
            self.deliveryType = value
        }
        if let value = dict["ExtendConfig"] as? String {
            self.extendConfig = value
        }
        if let value = dict["FieldList"] as? String {
            self.fieldList = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["LogDeliveryStrategy"] as? String {
            self.logDeliveryStrategy = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Resource"] as? String {
            self.resource = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class ModifyResourceLogFieldConfigResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyResourceLogFieldConfigResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyResourceLogFieldConfigResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyResourceLogFieldConfigResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyResourceLogStatusRequest : Tea.TeaModel {
    public var instanceId: String?

    public var regionId: String?

    public var resource: String?

    public var resourceManagerResourceGroupId: String?

    public var status: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resource != nil {
            map["Resource"] = self.resource!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Resource"] as? String {
            self.resource = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["Status"] as? Bool {
            self.status = value
        }
    }
}

public class ModifyResourceLogStatusResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var status: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Status"] as? Bool {
            self.status = value
        }
    }
}

public class ModifyResourceLogStatusResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyResourceLogStatusResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyResourceLogStatusResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyTemplateResourcesRequest : Tea.TeaModel {
    public var bindAssets: [String]?

    public var bindResourceGroups: [String]?

    public var bindResources: [String]?

    public var instanceId: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public var templateId: Int64?

    public var unbindAssets: [String]?

    public var unbindResourceGroups: [String]?

    public var unbindResources: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.bindAssets != nil {
            map["BindAssets"] = self.bindAssets!
        }
        if self.bindResourceGroups != nil {
            map["BindResourceGroups"] = self.bindResourceGroups!
        }
        if self.bindResources != nil {
            map["BindResources"] = self.bindResources!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.templateId != nil {
            map["TemplateId"] = self.templateId!
        }
        if self.unbindAssets != nil {
            map["UnbindAssets"] = self.unbindAssets!
        }
        if self.unbindResourceGroups != nil {
            map["UnbindResourceGroups"] = self.unbindResourceGroups!
        }
        if self.unbindResources != nil {
            map["UnbindResources"] = self.unbindResources!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BindAssets"] as? [String] {
            self.bindAssets = value
        }
        if let value = dict["BindResourceGroups"] as? [String] {
            self.bindResourceGroups = value
        }
        if let value = dict["BindResources"] as? [String] {
            self.bindResources = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["TemplateId"] as? Int64 {
            self.templateId = value
        }
        if let value = dict["UnbindAssets"] as? [String] {
            self.unbindAssets = value
        }
        if let value = dict["UnbindResourceGroups"] as? [String] {
            self.unbindResourceGroups = value
        }
        if let value = dict["UnbindResources"] as? [String] {
            self.unbindResources = value
        }
    }
}

public class ModifyTemplateResourcesResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyTemplateResourcesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyTemplateResourcesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyTemplateResourcesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyUserLogFieldConfigRequest : Tea.TeaModel {
    public var deliveryType: String?

    public var extendConfig: String?

    public var fieldList: String?

    public var instanceId: String?

    public var logDeliveryStrategy: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.deliveryType != nil {
            map["DeliveryType"] = self.deliveryType!
        }
        if self.extendConfig != nil {
            map["ExtendConfig"] = self.extendConfig!
        }
        if self.fieldList != nil {
            map["FieldList"] = self.fieldList!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.logDeliveryStrategy != nil {
            map["LogDeliveryStrategy"] = self.logDeliveryStrategy!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DeliveryType"] as? String {
            self.deliveryType = value
        }
        if let value = dict["ExtendConfig"] as? String {
            self.extendConfig = value
        }
        if let value = dict["FieldList"] as? String {
            self.fieldList = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["LogDeliveryStrategy"] as? String {
            self.logDeliveryStrategy = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class ModifyUserLogFieldConfigResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyUserLogFieldConfigResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyUserLogFieldConfigResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyUserLogFieldConfigResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyUserWafLogStatusRequest : Tea.TeaModel {
    public var instanceId: String?

    public var logRegionId: String?

    public var logStatus: Int32?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.logRegionId != nil {
            map["LogRegionId"] = self.logRegionId!
        }
        if self.logStatus != nil {
            map["LogStatus"] = self.logStatus!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["LogRegionId"] as? String {
            self.logRegionId = value
        }
        if let value = dict["LogStatus"] as? Int32 {
            self.logStatus = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class ModifyUserWafLogStatusResponseBody : Tea.TeaModel {
    public var logStoreName: String?

    public var projectName: Bool?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.logStoreName != nil {
            map["LogStoreName"] = self.logStoreName!
        }
        if self.projectName != nil {
            map["ProjectName"] = self.projectName!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["LogStoreName"] as? String {
            self.logStoreName = value
        }
        if let value = dict["ProjectName"] as? Bool {
            self.projectName = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyUserWafLogStatusResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyUserWafLogStatusResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyUserWafLogStatusResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ReCreateCloudResourceRequest : Tea.TeaModel {
    public var instanceId: String?

    public var port: Int32?

    public var regionId: String?

    public var resourceInstanceId: String?

    public var resourceManagerResourceGroupId: String?

    public var resourceProduct: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.port != nil {
            map["Port"] = self.port!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceInstanceId != nil {
            map["ResourceInstanceId"] = self.resourceInstanceId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        if self.resourceProduct != nil {
            map["ResourceProduct"] = self.resourceProduct!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["Port"] as? Int32 {
            self.port = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceInstanceId"] as? String {
            self.resourceInstanceId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
        if let value = dict["ResourceProduct"] as? String {
            self.resourceProduct = value
        }
    }
}

public class ReCreateCloudResourceResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ReCreateCloudResourceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ReCreateCloudResourceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ReCreateCloudResourceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ReleaseInstanceRequest : Tea.TeaModel {
    public var instanceId: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class ReleaseInstanceResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ReleaseInstanceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ReleaseInstanceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ReleaseInstanceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SyncProductInstanceRequest : Tea.TeaModel {
    public var instanceId: String?

    public var regionId: String?

    public var resourceManagerResourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceManagerResourceGroupId != nil {
            map["ResourceManagerResourceGroupId"] = self.resourceManagerResourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceManagerResourceGroupId"] as? String {
            self.resourceManagerResourceGroupId = value
        }
    }
}

public class SyncProductInstanceResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class SyncProductInstanceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SyncProductInstanceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SyncProductInstanceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class TagResourcesRequest : Tea.TeaModel {
    public class Tag : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var regionId: String?

    public var resourceId: [String]?

    public var resourceType: String?

    public var tag: [TagResourcesRequest.Tag]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceId != nil {
            map["ResourceId"] = self.resourceId!
        }
        if self.resourceType != nil {
            map["ResourceType"] = self.resourceType!
        }
        if self.tag != nil {
            var tmp : [Any] = []
            for k in self.tag! {
                tmp.append(k.toMap())
            }
            map["Tag"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceId"] as? [String] {
            self.resourceId = value
        }
        if let value = dict["ResourceType"] as? String {
            self.resourceType = value
        }
        if let value = dict["Tag"] as? [Any?] {
            var tmp : [TagResourcesRequest.Tag] = []
            for v in value {
                if v != nil {
                    var model = TagResourcesRequest.Tag()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tag = tmp
        }
    }
}

public class TagResourcesResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class TagResourcesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: TagResourcesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = TagResourcesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UntagResourcesRequest : Tea.TeaModel {
    public var all: Bool?

    public var regionId: String?

    public var resourceId: [String]?

    public var resourceType: String?

    public var tagKey: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.all != nil {
            map["All"] = self.all!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceId != nil {
            map["ResourceId"] = self.resourceId!
        }
        if self.resourceType != nil {
            map["ResourceType"] = self.resourceType!
        }
        if self.tagKey != nil {
            map["TagKey"] = self.tagKey!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["All"] as? Bool {
            self.all = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceId"] as? [String] {
            self.resourceId = value
        }
        if let value = dict["ResourceType"] as? String {
            self.resourceType = value
        }
        if let value = dict["TagKey"] as? [String] {
            self.tagKey = value
        }
    }
}

public class UntagResourcesResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UntagResourcesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UntagResourcesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UntagResourcesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class VerifyDomainOwnerRequest : Tea.TeaModel {
    public var domainName: String?

    public var instanceId: String?

    public var protocol_: String?

    public var verifyType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.domainName != nil {
            map["DomainName"] = self.domainName!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.protocol_ != nil {
            map["Protocol"] = self.protocol_!
        }
        if self.verifyType != nil {
            map["VerifyType"] = self.verifyType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DomainName"] as? String {
            self.domainName = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["Protocol"] as? String {
            self.protocol_ = value
        }
        if let value = dict["VerifyType"] as? String {
            self.verifyType = value
        }
    }
}

public class VerifyDomainOwnerResponseBody : Tea.TeaModel {
    public class VerifyResult : Tea.TeaModel {
        public var failCode: String?

        public var result: Bool?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.failCode != nil {
                map["FailCode"] = self.failCode!
            }
            if self.result != nil {
                map["Result"] = self.result!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["FailCode"] as? String {
                self.failCode = value
            }
            if let value = dict["Result"] as? Bool {
                self.result = value
            }
        }
    }
    public var requestId: String?

    public var verifyResult: VerifyDomainOwnerResponseBody.VerifyResult?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.verifyResult?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.verifyResult != nil {
            map["VerifyResult"] = self.verifyResult?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["VerifyResult"] as? [String: Any?] {
            var model = VerifyDomainOwnerResponseBody.VerifyResult()
            model.fromMap(value)
            self.verifyResult = model
        }
    }
}

public class VerifyDomainOwnerResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: VerifyDomainOwnerResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = VerifyDomainOwnerResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}
