import Foundation
import Tea
import TeaUtils
import AlibabacloudOpenApi
import AlibabaCloudOpenApiUtil
import AlibabacloudEndpointUtil

public class BusinessCategoryBasicInfo : Tea.TeaModel {
    public var bid: Int32?

    public var name: String?

    public var originalId: Int64?

    public var serviceType: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.bid != nil {
            map["Bid"] = self.bid!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.originalId != nil {
            map["OriginalId"] = self.originalId!
        }
        if self.serviceType != nil {
            map["ServiceType"] = self.serviceType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Bid"] as? Int32 {
            self.bid = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["OriginalId"] as? Int64 {
            self.originalId = value
        }
        if let value = dict["ServiceType"] as? Int32 {
            self.serviceType = value
        }
    }
}

public class ConditionBasicInfo : Tea.TeaModel {
    public class CheckRange : Tea.TeaModel {
        public class Anchor : Tea.TeaModel {
            public var cid: String?

            public var hitTime: Int32?

            public var location: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.cid != nil {
                    map["Cid"] = self.cid!
                }
                if self.hitTime != nil {
                    map["Hit_time"] = self.hitTime!
                }
                if self.location != nil {
                    map["Location"] = self.location!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Cid"] as? String {
                    self.cid = value
                }
                if let value = dict["Hit_time"] as? Int32 {
                    self.hitTime = value
                }
                if let value = dict["Location"] as? String {
                    self.location = value
                }
            }
        }
        public class Range : Tea.TeaModel {
            public var from: Int32?

            public var to: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.from != nil {
                    map["From"] = self.from!
                }
                if self.to != nil {
                    map["To"] = self.to!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["From"] as? Int32 {
                    self.from = value
                }
                if let value = dict["To"] as? Int32 {
                    self.to = value
                }
            }
        }
        public var absolute: Bool?

        public var allSentencesSatisfy: Bool?

        public var anchor: ConditionBasicInfo.CheckRange.Anchor?

        public var range: ConditionBasicInfo.CheckRange.Range?

        public var role: String?

        public var roleId: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.anchor?.validate()
            try self.range?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.absolute != nil {
                map["Absolute"] = self.absolute!
            }
            if self.allSentencesSatisfy != nil {
                map["AllSentencesSatisfy"] = self.allSentencesSatisfy!
            }
            if self.anchor != nil {
                map["Anchor"] = self.anchor?.toMap()
            }
            if self.range != nil {
                map["Range"] = self.range?.toMap()
            }
            if self.role != nil {
                map["Role"] = self.role!
            }
            if self.roleId != nil {
                map["RoleId"] = self.roleId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Absolute"] as? Bool {
                self.absolute = value
            }
            if let value = dict["AllSentencesSatisfy"] as? Bool {
                self.allSentencesSatisfy = value
            }
            if let value = dict["Anchor"] as? [String: Any?] {
                var model = ConditionBasicInfo.CheckRange.Anchor()
                model.fromMap(value)
                self.anchor = model
            }
            if let value = dict["Range"] as? [String: Any?] {
                var model = ConditionBasicInfo.CheckRange.Range()
                model.fromMap(value)
                self.range = model
            }
            if let value = dict["Role"] as? String {
                self.role = value
            }
            if let value = dict["RoleId"] as? Int32 {
                self.roleId = value
            }
        }
    }
    public var checkRange: ConditionBasicInfo.CheckRange?

    public var cid: String?

    public var exclusion: Int32?

    public var id: Int64?

    public var lambda: String?

    public var name: String?

    public var operators: [OperatorBasicInfo]?

    public var rid: String?

    public var userGroup: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.checkRange?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.checkRange != nil {
            map["Check_range"] = self.checkRange?.toMap()
        }
        if self.cid != nil {
            map["Cid"] = self.cid!
        }
        if self.exclusion != nil {
            map["Exclusion"] = self.exclusion!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.lambda != nil {
            map["Lambda"] = self.lambda!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.operators != nil {
            var tmp : [Any] = []
            for k in self.operators! {
                tmp.append(k.toMap())
            }
            map["Operators"] = tmp
        }
        if self.rid != nil {
            map["Rid"] = self.rid!
        }
        if self.userGroup != nil {
            map["UserGroup"] = self.userGroup!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Check_range"] as? [String: Any?] {
            var model = ConditionBasicInfo.CheckRange()
            model.fromMap(value)
            self.checkRange = model
        }
        if let value = dict["Cid"] as? String {
            self.cid = value
        }
        if let value = dict["Exclusion"] as? Int32 {
            self.exclusion = value
        }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["Lambda"] as? String {
            self.lambda = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["Operators"] as? [Any?] {
            var tmp : [OperatorBasicInfo] = []
            for v in value {
                if v != nil {
                    var model = OperatorBasicInfo()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.operators = tmp
        }
        if let value = dict["Rid"] as? String {
            self.rid = value
        }
        if let value = dict["UserGroup"] as? String {
            self.userGroup = value
        }
    }
}

public class GraphFlowNode : Tea.TeaModel {
    public class NextNodes : Tea.TeaModel {
        public var checkType: Int32?

        public var index: Int32?

        public var lambda: String?

        public var name: String?

        public var nextNodeId: Int64?

        public var triggers: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.checkType != nil {
                map["CheckType"] = self.checkType!
            }
            if self.index != nil {
                map["Index"] = self.index!
            }
            if self.lambda != nil {
                map["Lambda"] = self.lambda!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.nextNodeId != nil {
                map["NextNodeId"] = self.nextNodeId!
            }
            if self.triggers != nil {
                map["Triggers"] = self.triggers!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CheckType"] as? Int32 {
                self.checkType = value
            }
            if let value = dict["Index"] as? Int32 {
                self.index = value
            }
            if let value = dict["Lambda"] as? String {
                self.lambda = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["NextNodeId"] as? Int64 {
                self.nextNodeId = value
            }
            if let value = dict["Triggers"] as? [String] {
                self.triggers = value
            }
        }
    }
    public class Properties : Tea.TeaModel {
        public var autoReview: Int32?

        public var branchJudge: Bool?

        public var checkMoreSize: Int32?

        public var checkType: Int32?

        public var lambda: String?

        public var role: String?

        public var ruleScoreType: Int32?

        public var sayType: String?

        public var scoreNum: Int32?

        public var scoreNumType: Int32?

        public var scoreRuleHitType: Int32?

        public var scoreType: Int32?

        public var triggers: [String]?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.autoReview != nil {
                map["AutoReview"] = self.autoReview!
            }
            if self.branchJudge != nil {
                map["BranchJudge"] = self.branchJudge!
            }
            if self.checkMoreSize != nil {
                map["CheckMoreSize"] = self.checkMoreSize!
            }
            if self.checkType != nil {
                map["CheckType"] = self.checkType!
            }
            if self.lambda != nil {
                map["Lambda"] = self.lambda!
            }
            if self.role != nil {
                map["Role"] = self.role!
            }
            if self.ruleScoreType != nil {
                map["RuleScoreType"] = self.ruleScoreType!
            }
            if self.sayType != nil {
                map["SayType"] = self.sayType!
            }
            if self.scoreNum != nil {
                map["ScoreNum"] = self.scoreNum!
            }
            if self.scoreNumType != nil {
                map["ScoreNumType"] = self.scoreNumType!
            }
            if self.scoreRuleHitType != nil {
                map["ScoreRuleHitType"] = self.scoreRuleHitType!
            }
            if self.scoreType != nil {
                map["ScoreType"] = self.scoreType!
            }
            if self.triggers != nil {
                map["Triggers"] = self.triggers!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AutoReview"] as? Int32 {
                self.autoReview = value
            }
            if let value = dict["BranchJudge"] as? Bool {
                self.branchJudge = value
            }
            if let value = dict["CheckMoreSize"] as? Int32 {
                self.checkMoreSize = value
            }
            if let value = dict["CheckType"] as? Int32 {
                self.checkType = value
            }
            if let value = dict["Lambda"] as? String {
                self.lambda = value
            }
            if let value = dict["Role"] as? String {
                self.role = value
            }
            if let value = dict["RuleScoreType"] as? Int32 {
                self.ruleScoreType = value
            }
            if let value = dict["SayType"] as? String {
                self.sayType = value
            }
            if let value = dict["ScoreNum"] as? Int32 {
                self.scoreNum = value
            }
            if let value = dict["ScoreNumType"] as? Int32 {
                self.scoreNumType = value
            }
            if let value = dict["ScoreRuleHitType"] as? Int32 {
                self.scoreRuleHitType = value
            }
            if let value = dict["ScoreType"] as? Int32 {
                self.scoreType = value
            }
            if let value = dict["Triggers"] as? [String] {
                self.triggers = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
        }
    }
    public var conditions: [ConditionBasicInfo]?

    public var content: String?

    public var id: Int64?

    public var index: Int32?

    public var name: String?

    public var nextNodes: [GraphFlowNode.NextNodes]?

    public var nodeType: String?

    public var properties: GraphFlowNode.Properties?

    public var rid: Int64?

    public var useConditions: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.properties?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.conditions != nil {
            var tmp : [Any] = []
            for k in self.conditions! {
                tmp.append(k.toMap())
            }
            map["Conditions"] = tmp
        }
        if self.content != nil {
            map["Content"] = self.content!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.index != nil {
            map["Index"] = self.index!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.nextNodes != nil {
            var tmp : [Any] = []
            for k in self.nextNodes! {
                tmp.append(k.toMap())
            }
            map["NextNodes"] = tmp
        }
        if self.nodeType != nil {
            map["NodeType"] = self.nodeType!
        }
        if self.properties != nil {
            map["Properties"] = self.properties?.toMap()
        }
        if self.rid != nil {
            map["Rid"] = self.rid!
        }
        if self.useConditions != nil {
            map["UseConditions"] = self.useConditions!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Conditions"] as? [Any?] {
            var tmp : [ConditionBasicInfo] = []
            for v in value {
                if v != nil {
                    var model = ConditionBasicInfo()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.conditions = tmp
        }
        if let value = dict["Content"] as? String {
            self.content = value
        }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["Index"] as? Int32 {
            self.index = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["NextNodes"] as? [Any?] {
            var tmp : [GraphFlowNode.NextNodes] = []
            for v in value {
                if v != nil {
                    var model = GraphFlowNode.NextNodes()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.nextNodes = tmp
        }
        if let value = dict["NodeType"] as? String {
            self.nodeType = value
        }
        if let value = dict["Properties"] as? [String: Any?] {
            var model = GraphFlowNode.Properties()
            model.fromMap(value)
            self.properties = model
        }
        if let value = dict["Rid"] as? Int64 {
            self.rid = value
        }
        if let value = dict["UseConditions"] as? Bool {
            self.useConditions = value
        }
    }
}

public class JudgeNodeMetaDesc : Tea.TeaModel {
    public var actualValue: String?

    public var dataType: Int32?

    public var field: String?

    public var fieldType: Int32?

    public var symbol: Int32?

    public var value: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.actualValue != nil {
            map["ActualValue"] = self.actualValue!
        }
        if self.dataType != nil {
            map["DataType"] = self.dataType!
        }
        if self.field != nil {
            map["Field"] = self.field!
        }
        if self.fieldType != nil {
            map["FieldType"] = self.fieldType!
        }
        if self.symbol != nil {
            map["Symbol"] = self.symbol!
        }
        if self.value != nil {
            map["Value"] = self.value!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ActualValue"] as? String {
            self.actualValue = value
        }
        if let value = dict["DataType"] as? Int32 {
            self.dataType = value
        }
        if let value = dict["Field"] as? String {
            self.field = value
        }
        if let value = dict["FieldType"] as? Int32 {
            self.fieldType = value
        }
        if let value = dict["Symbol"] as? Int32 {
            self.symbol = value
        }
        if let value = dict["Value"] as? String {
            self.value = value
        }
    }
}

public class NextNodeSituations : Tea.TeaModel {
    public class ConditionGroup : Tea.TeaModel {
        public var conditions: [JudgeNodeMetaDesc]?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.conditions != nil {
                var tmp : [Any] = []
                for k in self.conditions! {
                    tmp.append(k.toMap())
                }
                map["Conditions"] = tmp
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Conditions"] as? [Any?] {
                var tmp : [JudgeNodeMetaDesc] = []
                for v in value {
                    if v != nil {
                        var model = JudgeNodeMetaDesc()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.conditions = tmp
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
        }
    }
    public var conditionGroup: [NextNodeSituations.ConditionGroup]?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.conditionGroup != nil {
            var tmp : [Any] = []
            for k in self.conditionGroup! {
                tmp.append(k.toMap())
            }
            map["ConditionGroup"] = tmp
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConditionGroup"] as? [Any?] {
            var tmp : [NextNodeSituations.ConditionGroup] = []
            for v in value {
                if v != nil {
                    var model = NextNodeSituations.ConditionGroup()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.conditionGroup = tmp
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
    }
}

public class OperatorBasicInfo : Tea.TeaModel {
    public class Param : Tea.TeaModel {
        public var answerThreshold: String?

        public var antModelInfo: [String: String]?

        public var average: Bool?

        public var beginType: String?

        public var botId: String?

        public var caseSensitive: Bool?

        public var categoryPathCode: String?

        public var checkFirstSentence: Bool?

        public var checkType: Int32?

        public var compareOperator: String?

        public var contextChatMatch: Bool?

        public var customerParam: JudgeNodeMetaDesc?

        public var delayTime: Int32?

        public var differentRole: Bool?

        public var endType: String?

        public var excludes: [String]?

        public var from: Int32?

        public var fromEnd: Bool?

        public var hitTime: Int32?

        public var inSentence: Bool?

        public var interval: Int32?

        public var intervalEnd: Int32?

        public var keywordExtension: Int32?

        public var keywordMatchSize: Int32?

        public var keywords: [String]?

        public var knowledgeInfo: String?

        public var knowledgeSentenceNum: Int32?

        public var knowledgeTargetId: String?

        public var knowledgeTargetName: String?

        public var knowledgeTargetType: Int32?

        public var lgfSentences: [String]?

        public var maxEmotionChangeValue: Int32?

        public var minWordSize: Int32?

        public var nearDialogue: Bool?

        public var notRegex: String?

        public var phrase: String?

        public var pkey: String?

        public var poutputType: Int32?

        public var pvalues: [String]?

        public var questionThreshold: String?

        public var references: [String]?

        public var regex: String?

        public var roleId: Int32?

        public var score: Int32?

        public var similarityThreshold: Double?

        public var similarlySentences: [String]?

        public var synonyms: [String: [String]]?

        public var target: Int32?

        public var targetRole: String?

        public var threshold: Double?

        public var useEasAlgorithm: Bool?

        public var velocity: Double?

        public var velocityInMint: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.customerParam?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.answerThreshold != nil {
                map["AnswerThreshold"] = self.answerThreshold!
            }
            if self.antModelInfo != nil {
                map["AntModelInfo"] = self.antModelInfo!
            }
            if self.average != nil {
                map["Average"] = self.average!
            }
            if self.beginType != nil {
                map["BeginType"] = self.beginType!
            }
            if self.botId != nil {
                map["BotId"] = self.botId!
            }
            if self.caseSensitive != nil {
                map["Case_sensitive"] = self.caseSensitive!
            }
            if self.categoryPathCode != nil {
                map["CategoryPathCode"] = self.categoryPathCode!
            }
            if self.checkFirstSentence != nil {
                map["CheckFirstSentence"] = self.checkFirstSentence!
            }
            if self.checkType != nil {
                map["CheckType"] = self.checkType!
            }
            if self.compareOperator != nil {
                map["CompareOperator"] = self.compareOperator!
            }
            if self.contextChatMatch != nil {
                map["ContextChatMatch"] = self.contextChatMatch!
            }
            if self.customerParam != nil {
                map["CustomerParam"] = self.customerParam?.toMap()
            }
            if self.delayTime != nil {
                map["DelayTime"] = self.delayTime!
            }
            if self.differentRole != nil {
                map["Different_role"] = self.differentRole!
            }
            if self.endType != nil {
                map["EndType"] = self.endType!
            }
            if self.excludes != nil {
                map["Excludes"] = self.excludes!
            }
            if self.from != nil {
                map["From"] = self.from!
            }
            if self.fromEnd != nil {
                map["From_end"] = self.fromEnd!
            }
            if self.hitTime != nil {
                map["Hit_time"] = self.hitTime!
            }
            if self.inSentence != nil {
                map["In_sentence"] = self.inSentence!
            }
            if self.interval != nil {
                map["Interval"] = self.interval!
            }
            if self.intervalEnd != nil {
                map["IntervalEnd"] = self.intervalEnd!
            }
            if self.keywordExtension != nil {
                map["KeywordExtension"] = self.keywordExtension!
            }
            if self.keywordMatchSize != nil {
                map["KeywordMatchSize"] = self.keywordMatchSize!
            }
            if self.keywords != nil {
                map["Keywords"] = self.keywords!
            }
            if self.knowledgeInfo != nil {
                map["KnowledgeInfo"] = self.knowledgeInfo!
            }
            if self.knowledgeSentenceNum != nil {
                map["KnowledgeSentenceNum"] = self.knowledgeSentenceNum!
            }
            if self.knowledgeTargetId != nil {
                map["KnowledgeTargetId"] = self.knowledgeTargetId!
            }
            if self.knowledgeTargetName != nil {
                map["KnowledgeTargetName"] = self.knowledgeTargetName!
            }
            if self.knowledgeTargetType != nil {
                map["KnowledgeTargetType"] = self.knowledgeTargetType!
            }
            if self.lgfSentences != nil {
                map["LgfSentences"] = self.lgfSentences!
            }
            if self.maxEmotionChangeValue != nil {
                map["MaxEmotionChangeValue"] = self.maxEmotionChangeValue!
            }
            if self.minWordSize != nil {
                map["MinWordSize"] = self.minWordSize!
            }
            if self.nearDialogue != nil {
                map["Near_dialogue"] = self.nearDialogue!
            }
            if self.notRegex != nil {
                map["NotRegex"] = self.notRegex!
            }
            if self.phrase != nil {
                map["Phrase"] = self.phrase!
            }
            if self.pkey != nil {
                map["Pkey"] = self.pkey!
            }
            if self.poutputType != nil {
                map["Poutput_type"] = self.poutputType!
            }
            if self.pvalues != nil {
                map["Pvalues"] = self.pvalues!
            }
            if self.questionThreshold != nil {
                map["QuestionThreshold"] = self.questionThreshold!
            }
            if self.references != nil {
                map["References"] = self.references!
            }
            if self.regex != nil {
                map["Regex"] = self.regex!
            }
            if self.roleId != nil {
                map["RoleId"] = self.roleId!
            }
            if self.score != nil {
                map["Score"] = self.score!
            }
            if self.similarityThreshold != nil {
                map["Similarity_threshold"] = self.similarityThreshold!
            }
            if self.similarlySentences != nil {
                map["SimilarlySentences"] = self.similarlySentences!
            }
            if self.synonyms != nil {
                map["Synonyms"] = self.synonyms!
            }
            if self.target != nil {
                map["Target"] = self.target!
            }
            if self.targetRole != nil {
                map["Target_role"] = self.targetRole!
            }
            if self.threshold != nil {
                map["Threshold"] = self.threshold!
            }
            if self.useEasAlgorithm != nil {
                map["UseEasAlgorithm"] = self.useEasAlgorithm!
            }
            if self.velocity != nil {
                map["Velocity"] = self.velocity!
            }
            if self.velocityInMint != nil {
                map["VelocityInMint"] = self.velocityInMint!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AnswerThreshold"] as? String {
                self.answerThreshold = value
            }
            if let value = dict["AntModelInfo"] as? [String: String] {
                self.antModelInfo = value
            }
            if let value = dict["Average"] as? Bool {
                self.average = value
            }
            if let value = dict["BeginType"] as? String {
                self.beginType = value
            }
            if let value = dict["BotId"] as? String {
                self.botId = value
            }
            if let value = dict["Case_sensitive"] as? Bool {
                self.caseSensitive = value
            }
            if let value = dict["CategoryPathCode"] as? String {
                self.categoryPathCode = value
            }
            if let value = dict["CheckFirstSentence"] as? Bool {
                self.checkFirstSentence = value
            }
            if let value = dict["CheckType"] as? Int32 {
                self.checkType = value
            }
            if let value = dict["CompareOperator"] as? String {
                self.compareOperator = value
            }
            if let value = dict["ContextChatMatch"] as? Bool {
                self.contextChatMatch = value
            }
            if let value = dict["CustomerParam"] as? [String: Any?] {
                var model = JudgeNodeMetaDesc()
                model.fromMap(value)
                self.customerParam = model
            }
            if let value = dict["DelayTime"] as? Int32 {
                self.delayTime = value
            }
            if let value = dict["Different_role"] as? Bool {
                self.differentRole = value
            }
            if let value = dict["EndType"] as? String {
                self.endType = value
            }
            if let value = dict["Excludes"] as? [String] {
                self.excludes = value
            }
            if let value = dict["From"] as? Int32 {
                self.from = value
            }
            if let value = dict["From_end"] as? Bool {
                self.fromEnd = value
            }
            if let value = dict["Hit_time"] as? Int32 {
                self.hitTime = value
            }
            if let value = dict["In_sentence"] as? Bool {
                self.inSentence = value
            }
            if let value = dict["Interval"] as? Int32 {
                self.interval = value
            }
            if let value = dict["IntervalEnd"] as? Int32 {
                self.intervalEnd = value
            }
            if let value = dict["KeywordExtension"] as? Int32 {
                self.keywordExtension = value
            }
            if let value = dict["KeywordMatchSize"] as? Int32 {
                self.keywordMatchSize = value
            }
            if let value = dict["Keywords"] as? [String] {
                self.keywords = value
            }
            if let value = dict["KnowledgeInfo"] as? String {
                self.knowledgeInfo = value
            }
            if let value = dict["KnowledgeSentenceNum"] as? Int32 {
                self.knowledgeSentenceNum = value
            }
            if let value = dict["KnowledgeTargetId"] as? String {
                self.knowledgeTargetId = value
            }
            if let value = dict["KnowledgeTargetName"] as? String {
                self.knowledgeTargetName = value
            }
            if let value = dict["KnowledgeTargetType"] as? Int32 {
                self.knowledgeTargetType = value
            }
            if let value = dict["LgfSentences"] as? [String] {
                self.lgfSentences = value
            }
            if let value = dict["MaxEmotionChangeValue"] as? Int32 {
                self.maxEmotionChangeValue = value
            }
            if let value = dict["MinWordSize"] as? Int32 {
                self.minWordSize = value
            }
            if let value = dict["Near_dialogue"] as? Bool {
                self.nearDialogue = value
            }
            if let value = dict["NotRegex"] as? String {
                self.notRegex = value
            }
            if let value = dict["Phrase"] as? String {
                self.phrase = value
            }
            if let value = dict["Pkey"] as? String {
                self.pkey = value
            }
            if let value = dict["Poutput_type"] as? Int32 {
                self.poutputType = value
            }
            if let value = dict["Pvalues"] as? [String] {
                self.pvalues = value
            }
            if let value = dict["QuestionThreshold"] as? String {
                self.questionThreshold = value
            }
            if let value = dict["References"] as? [String] {
                self.references = value
            }
            if let value = dict["Regex"] as? String {
                self.regex = value
            }
            if let value = dict["RoleId"] as? Int32 {
                self.roleId = value
            }
            if let value = dict["Score"] as? Int32 {
                self.score = value
            }
            if let value = dict["Similarity_threshold"] as? Double {
                self.similarityThreshold = value
            }
            if let value = dict["SimilarlySentences"] as? [String] {
                self.similarlySentences = value
            }
            if let value = dict["Synonyms"] as? [String: [String]] {
                self.synonyms = value
            }
            if let value = dict["Target"] as? Int32 {
                self.target = value
            }
            if let value = dict["Target_role"] as? String {
                self.targetRole = value
            }
            if let value = dict["Threshold"] as? Double {
                self.threshold = value
            }
            if let value = dict["UseEasAlgorithm"] as? Bool {
                self.useEasAlgorithm = value
            }
            if let value = dict["Velocity"] as? Double {
                self.velocity = value
            }
            if let value = dict["VelocityInMint"] as? Int32 {
                self.velocityInMint = value
            }
        }
    }
    public var id: Int64?

    public var name: String?

    public var oid: String?

    public var param: OperatorBasicInfo.Param?

    public var qualityCheckType: Int32?

    public var type: String?

    public var userGroup: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.param?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.oid != nil {
            map["Oid"] = self.oid!
        }
        if self.param != nil {
            map["Param"] = self.param?.toMap()
        }
        if self.qualityCheckType != nil {
            map["QualityCheckType"] = self.qualityCheckType!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        if self.userGroup != nil {
            map["UserGroup"] = self.userGroup!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["Oid"] as? String {
            self.oid = value
        }
        if let value = dict["Param"] as? [String: Any?] {
            var model = OperatorBasicInfo.Param()
            model.fromMap(value)
            self.param = model
        }
        if let value = dict["QualityCheckType"] as? Int32 {
            self.qualityCheckType = value
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
        if let value = dict["UserGroup"] as? String {
            self.userGroup = value
        }
    }
}

public class RuleCountInfo : Tea.TeaModel {
    public var autoReview: Int32?

    public var businessCategoryBasicInfoList: [BusinessCategoryBasicInfo]?

    public var businessCategoryNameList: [String]?

    public var businessRange: [Int32]?

    public var checkNumber: Int64?

    public var comments: String?

    public var createEmpName: String?

    public var createEmpid: String?

    public var createTime: String?

    public var deny: Int32?

    public var effective: Int32?

    public var effectiveEndTime: String?

    public var effectiveStartTime: String?

    public var endTime: String?

    public var fullCycle: Int32?

    public var graphFlow: Any?

    public var hitNumber: Int64?

    public var hitRate: Double?

    public var hitRealViolationRate: Double?

    public var isDelete: Int32?

    public var isSelect: Bool?

    public var jobName: String?

    public var lastUpdateEmpName: String?

    public var lastUpdateEmpid: String?

    public var lastUpdateTime: String?

    public var name: String?

    public var operationMode: Int32?

    public var preReviewNumber: Int64?

    public var problemNumber: Int64?

    public var qualityCheckType: Int32?

    public var realViolationNumber: Int32?

    public var reviewAccuracyRate: Double?

    public var reviewNumber: Int64?

    public var reviewRate: Double?

    public var reviewStatusName: String?

    public var rid: Int64?

    public var ruleScoreSingleType: Int32?

    public var ruleScoreType: Int32?

    public var ruleType: Int32?

    public var scoreSubId: Int64?

    public var startTime: String?

    public var status: Int32?

    public var targetType: Int32?

    public var type: Int32?

    public var typeName: String?

    public var unReviewNumber: Int64?

    public var userGroup: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.autoReview != nil {
            map["AutoReview"] = self.autoReview!
        }
        if self.businessCategoryBasicInfoList != nil {
            var tmp : [Any] = []
            for k in self.businessCategoryBasicInfoList! {
                tmp.append(k.toMap())
            }
            map["BusinessCategoryBasicInfoList"] = tmp
        }
        if self.businessCategoryNameList != nil {
            map["BusinessCategoryNameList"] = self.businessCategoryNameList!
        }
        if self.businessRange != nil {
            map["BusinessRange"] = self.businessRange!
        }
        if self.checkNumber != nil {
            map["CheckNumber"] = self.checkNumber!
        }
        if self.comments != nil {
            map["Comments"] = self.comments!
        }
        if self.createEmpName != nil {
            map["CreateEmpName"] = self.createEmpName!
        }
        if self.createEmpid != nil {
            map["CreateEmpid"] = self.createEmpid!
        }
        if self.createTime != nil {
            map["CreateTime"] = self.createTime!
        }
        if self.deny != nil {
            map["Deny"] = self.deny!
        }
        if self.effective != nil {
            map["Effective"] = self.effective!
        }
        if self.effectiveEndTime != nil {
            map["EffectiveEndTime"] = self.effectiveEndTime!
        }
        if self.effectiveStartTime != nil {
            map["EffectiveStartTime"] = self.effectiveStartTime!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.fullCycle != nil {
            map["FullCycle"] = self.fullCycle!
        }
        if self.graphFlow != nil {
            map["GraphFlow"] = self.graphFlow!
        }
        if self.hitNumber != nil {
            map["HitNumber"] = self.hitNumber!
        }
        if self.hitRate != nil {
            map["HitRate"] = self.hitRate!
        }
        if self.hitRealViolationRate != nil {
            map["HitRealViolationRate"] = self.hitRealViolationRate!
        }
        if self.isDelete != nil {
            map["IsDelete"] = self.isDelete!
        }
        if self.isSelect != nil {
            map["IsSelect"] = self.isSelect!
        }
        if self.jobName != nil {
            map["JobName"] = self.jobName!
        }
        if self.lastUpdateEmpName != nil {
            map["LastUpdateEmpName"] = self.lastUpdateEmpName!
        }
        if self.lastUpdateEmpid != nil {
            map["LastUpdateEmpid"] = self.lastUpdateEmpid!
        }
        if self.lastUpdateTime != nil {
            map["LastUpdateTime"] = self.lastUpdateTime!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.operationMode != nil {
            map["OperationMode"] = self.operationMode!
        }
        if self.preReviewNumber != nil {
            map["PreReviewNumber"] = self.preReviewNumber!
        }
        if self.problemNumber != nil {
            map["ProblemNumber"] = self.problemNumber!
        }
        if self.qualityCheckType != nil {
            map["QualityCheckType"] = self.qualityCheckType!
        }
        if self.realViolationNumber != nil {
            map["RealViolationNumber"] = self.realViolationNumber!
        }
        if self.reviewAccuracyRate != nil {
            map["ReviewAccuracyRate"] = self.reviewAccuracyRate!
        }
        if self.reviewNumber != nil {
            map["ReviewNumber"] = self.reviewNumber!
        }
        if self.reviewRate != nil {
            map["ReviewRate"] = self.reviewRate!
        }
        if self.reviewStatusName != nil {
            map["ReviewStatusName"] = self.reviewStatusName!
        }
        if self.rid != nil {
            map["Rid"] = self.rid!
        }
        if self.ruleScoreSingleType != nil {
            map["RuleScoreSingleType"] = self.ruleScoreSingleType!
        }
        if self.ruleScoreType != nil {
            map["RuleScoreType"] = self.ruleScoreType!
        }
        if self.ruleType != nil {
            map["RuleType"] = self.ruleType!
        }
        if self.scoreSubId != nil {
            map["ScoreSubId"] = self.scoreSubId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        if self.targetType != nil {
            map["TargetType"] = self.targetType!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        if self.typeName != nil {
            map["TypeName"] = self.typeName!
        }
        if self.unReviewNumber != nil {
            map["UnReviewNumber"] = self.unReviewNumber!
        }
        if self.userGroup != nil {
            map["UserGroup"] = self.userGroup!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AutoReview"] as? Int32 {
            self.autoReview = value
        }
        if let value = dict["BusinessCategoryBasicInfoList"] as? [Any?] {
            var tmp : [BusinessCategoryBasicInfo] = []
            for v in value {
                if v != nil {
                    var model = BusinessCategoryBasicInfo()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.businessCategoryBasicInfoList = tmp
        }
        if let value = dict["BusinessCategoryNameList"] as? [String] {
            self.businessCategoryNameList = value
        }
        if let value = dict["BusinessRange"] as? [Int32] {
            self.businessRange = value
        }
        if let value = dict["CheckNumber"] as? Int64 {
            self.checkNumber = value
        }
        if let value = dict["Comments"] as? String {
            self.comments = value
        }
        if let value = dict["CreateEmpName"] as? String {
            self.createEmpName = value
        }
        if let value = dict["CreateEmpid"] as? String {
            self.createEmpid = value
        }
        if let value = dict["CreateTime"] as? String {
            self.createTime = value
        }
        if let value = dict["Deny"] as? Int32 {
            self.deny = value
        }
        if let value = dict["Effective"] as? Int32 {
            self.effective = value
        }
        if let value = dict["EffectiveEndTime"] as? String {
            self.effectiveEndTime = value
        }
        if let value = dict["EffectiveStartTime"] as? String {
            self.effectiveStartTime = value
        }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["FullCycle"] as? Int32 {
            self.fullCycle = value
        }
        if let value = dict["GraphFlow"] as? Any {
            self.graphFlow = value
        }
        if let value = dict["HitNumber"] as? Int64 {
            self.hitNumber = value
        }
        if let value = dict["HitRate"] as? Double {
            self.hitRate = value
        }
        if let value = dict["HitRealViolationRate"] as? Double {
            self.hitRealViolationRate = value
        }
        if let value = dict["IsDelete"] as? Int32 {
            self.isDelete = value
        }
        if let value = dict["IsSelect"] as? Bool {
            self.isSelect = value
        }
        if let value = dict["JobName"] as? String {
            self.jobName = value
        }
        if let value = dict["LastUpdateEmpName"] as? String {
            self.lastUpdateEmpName = value
        }
        if let value = dict["LastUpdateEmpid"] as? String {
            self.lastUpdateEmpid = value
        }
        if let value = dict["LastUpdateTime"] as? String {
            self.lastUpdateTime = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["OperationMode"] as? Int32 {
            self.operationMode = value
        }
        if let value = dict["PreReviewNumber"] as? Int64 {
            self.preReviewNumber = value
        }
        if let value = dict["ProblemNumber"] as? Int64 {
            self.problemNumber = value
        }
        if let value = dict["QualityCheckType"] as? Int32 {
            self.qualityCheckType = value
        }
        if let value = dict["RealViolationNumber"] as? Int32 {
            self.realViolationNumber = value
        }
        if let value = dict["ReviewAccuracyRate"] as? Double {
            self.reviewAccuracyRate = value
        }
        if let value = dict["ReviewNumber"] as? Int64 {
            self.reviewNumber = value
        }
        if let value = dict["ReviewRate"] as? Double {
            self.reviewRate = value
        }
        if let value = dict["ReviewStatusName"] as? String {
            self.reviewStatusName = value
        }
        if let value = dict["Rid"] as? Int64 {
            self.rid = value
        }
        if let value = dict["RuleScoreSingleType"] as? Int32 {
            self.ruleScoreSingleType = value
        }
        if let value = dict["RuleScoreType"] as? Int32 {
            self.ruleScoreType = value
        }
        if let value = dict["RuleType"] as? Int32 {
            self.ruleType = value
        }
        if let value = dict["ScoreSubId"] as? Int64 {
            self.scoreSubId = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
        if let value = dict["Status"] as? Int32 {
            self.status = value
        }
        if let value = dict["TargetType"] as? Int32 {
            self.targetType = value
        }
        if let value = dict["Type"] as? Int32 {
            self.type = value
        }
        if let value = dict["TypeName"] as? String {
            self.typeName = value
        }
        if let value = dict["UnReviewNumber"] as? Int64 {
            self.unReviewNumber = value
        }
        if let value = dict["UserGroup"] as? String {
            self.userGroup = value
        }
    }
}

public class RuleInfo : Tea.TeaModel {
    public var autoReview: Int32?

    public var businessCategoryNameList: [String]?

    public var checkType: Int64?

    public var comments: String?

    public var configType: Int32?

    public var createEmpName: String?

    public var createEmpid: String?

    public var createTime: String?

    public var deny: Int32?

    public var dialogues: [RuleTestDialogue]?

    public var effective: Int32?

    public var effectiveEndTime: String?

    public var effectiveStartTime: String?

    public var endTime: String?

    public var externalProperty: Int32?

    public var fullCycle: Int32?

    public var graphFlow: Any?

    public var isDelete: Int32?

    public var isOnline: Int32?

    public var lambda: String?

    public var lastUpdateEmpName: String?

    public var lastUpdateEmpid: String?

    public var lastUpdateTime: String?

    public var level: Int32?

    public var meet: Int32?

    public var modifyType: Int32?

    public var name: String?

    public var operationMode: Int32?

    public var qualityCheckType: Int32?

    public var rid: String?

    public var ruleCategoryName: String?

    public var ruleScoreType: Int32?

    public var ruleType: Int32?

    public var schemeCheckType: SchemeCheckType?

    public var schemeId: Int64?

    public var schemeName: String?

    public var schemeRuleMappingId: Int64?

    public var scoreDeleted: Bool?

    public var scoreId: Int64?

    public var scoreName: String?

    public var scoreNum: Int32?

    public var scoreNumType: Int32?

    public var scoreRuleHitType: Int32?

    public var scoreSubId: Int64?

    public var scoreSubName: String?

    public var scoreType: Int32?

    public var sortIndex: Int32?

    public var startTime: String?

    public var status: Int32?

    public var targetType: Int32?

    public var taskFlowId: Int64?

    public var taskFlowType: Int32?

    public var triggers: [String]?

    public var type: Int32?

    public var weight: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.schemeCheckType?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.autoReview != nil {
            map["AutoReview"] = self.autoReview!
        }
        if self.businessCategoryNameList != nil {
            map["BusinessCategoryNameList"] = self.businessCategoryNameList!
        }
        if self.checkType != nil {
            map["CheckType"] = self.checkType!
        }
        if self.comments != nil {
            map["Comments"] = self.comments!
        }
        if self.configType != nil {
            map["ConfigType"] = self.configType!
        }
        if self.createEmpName != nil {
            map["CreateEmpName"] = self.createEmpName!
        }
        if self.createEmpid != nil {
            map["CreateEmpid"] = self.createEmpid!
        }
        if self.createTime != nil {
            map["CreateTime"] = self.createTime!
        }
        if self.deny != nil {
            map["Deny"] = self.deny!
        }
        if self.dialogues != nil {
            var tmp : [Any] = []
            for k in self.dialogues! {
                tmp.append(k.toMap())
            }
            map["Dialogues"] = tmp
        }
        if self.effective != nil {
            map["Effective"] = self.effective!
        }
        if self.effectiveEndTime != nil {
            map["EffectiveEndTime"] = self.effectiveEndTime!
        }
        if self.effectiveStartTime != nil {
            map["EffectiveStartTime"] = self.effectiveStartTime!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.externalProperty != nil {
            map["ExternalProperty"] = self.externalProperty!
        }
        if self.fullCycle != nil {
            map["FullCycle"] = self.fullCycle!
        }
        if self.graphFlow != nil {
            map["GraphFlow"] = self.graphFlow!
        }
        if self.isDelete != nil {
            map["IsDelete"] = self.isDelete!
        }
        if self.isOnline != nil {
            map["IsOnline"] = self.isOnline!
        }
        if self.lambda != nil {
            map["Lambda"] = self.lambda!
        }
        if self.lastUpdateEmpName != nil {
            map["LastUpdateEmpName"] = self.lastUpdateEmpName!
        }
        if self.lastUpdateEmpid != nil {
            map["LastUpdateEmpid"] = self.lastUpdateEmpid!
        }
        if self.lastUpdateTime != nil {
            map["LastUpdateTime"] = self.lastUpdateTime!
        }
        if self.level != nil {
            map["Level"] = self.level!
        }
        if self.meet != nil {
            map["Meet"] = self.meet!
        }
        if self.modifyType != nil {
            map["ModifyType"] = self.modifyType!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.operationMode != nil {
            map["OperationMode"] = self.operationMode!
        }
        if self.qualityCheckType != nil {
            map["QualityCheckType"] = self.qualityCheckType!
        }
        if self.rid != nil {
            map["Rid"] = self.rid!
        }
        if self.ruleCategoryName != nil {
            map["RuleCategoryName"] = self.ruleCategoryName!
        }
        if self.ruleScoreType != nil {
            map["RuleScoreType"] = self.ruleScoreType!
        }
        if self.ruleType != nil {
            map["RuleType"] = self.ruleType!
        }
        if self.schemeCheckType != nil {
            map["SchemeCheckType"] = self.schemeCheckType?.toMap()
        }
        if self.schemeId != nil {
            map["SchemeId"] = self.schemeId!
        }
        if self.schemeName != nil {
            map["SchemeName"] = self.schemeName!
        }
        if self.schemeRuleMappingId != nil {
            map["SchemeRuleMappingId"] = self.schemeRuleMappingId!
        }
        if self.scoreDeleted != nil {
            map["ScoreDeleted"] = self.scoreDeleted!
        }
        if self.scoreId != nil {
            map["ScoreId"] = self.scoreId!
        }
        if self.scoreName != nil {
            map["ScoreName"] = self.scoreName!
        }
        if self.scoreNum != nil {
            map["ScoreNum"] = self.scoreNum!
        }
        if self.scoreNumType != nil {
            map["ScoreNumType"] = self.scoreNumType!
        }
        if self.scoreRuleHitType != nil {
            map["ScoreRuleHitType"] = self.scoreRuleHitType!
        }
        if self.scoreSubId != nil {
            map["ScoreSubId"] = self.scoreSubId!
        }
        if self.scoreSubName != nil {
            map["ScoreSubName"] = self.scoreSubName!
        }
        if self.scoreType != nil {
            map["ScoreType"] = self.scoreType!
        }
        if self.sortIndex != nil {
            map["SortIndex"] = self.sortIndex!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        if self.targetType != nil {
            map["TargetType"] = self.targetType!
        }
        if self.taskFlowId != nil {
            map["TaskFlowId"] = self.taskFlowId!
        }
        if self.taskFlowType != nil {
            map["TaskFlowType"] = self.taskFlowType!
        }
        if self.triggers != nil {
            map["Triggers"] = self.triggers!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        if self.weight != nil {
            map["Weight"] = self.weight!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AutoReview"] as? Int32 {
            self.autoReview = value
        }
        if let value = dict["BusinessCategoryNameList"] as? [String] {
            self.businessCategoryNameList = value
        }
        if let value = dict["CheckType"] as? Int64 {
            self.checkType = value
        }
        if let value = dict["Comments"] as? String {
            self.comments = value
        }
        if let value = dict["ConfigType"] as? Int32 {
            self.configType = value
        }
        if let value = dict["CreateEmpName"] as? String {
            self.createEmpName = value
        }
        if let value = dict["CreateEmpid"] as? String {
            self.createEmpid = value
        }
        if let value = dict["CreateTime"] as? String {
            self.createTime = value
        }
        if let value = dict["Deny"] as? Int32 {
            self.deny = value
        }
        if let value = dict["Dialogues"] as? [Any?] {
            var tmp : [RuleTestDialogue] = []
            for v in value {
                if v != nil {
                    var model = RuleTestDialogue()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.dialogues = tmp
        }
        if let value = dict["Effective"] as? Int32 {
            self.effective = value
        }
        if let value = dict["EffectiveEndTime"] as? String {
            self.effectiveEndTime = value
        }
        if let value = dict["EffectiveStartTime"] as? String {
            self.effectiveStartTime = value
        }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["ExternalProperty"] as? Int32 {
            self.externalProperty = value
        }
        if let value = dict["FullCycle"] as? Int32 {
            self.fullCycle = value
        }
        if let value = dict["GraphFlow"] as? Any {
            self.graphFlow = value
        }
        if let value = dict["IsDelete"] as? Int32 {
            self.isDelete = value
        }
        if let value = dict["IsOnline"] as? Int32 {
            self.isOnline = value
        }
        if let value = dict["Lambda"] as? String {
            self.lambda = value
        }
        if let value = dict["LastUpdateEmpName"] as? String {
            self.lastUpdateEmpName = value
        }
        if let value = dict["LastUpdateEmpid"] as? String {
            self.lastUpdateEmpid = value
        }
        if let value = dict["LastUpdateTime"] as? String {
            self.lastUpdateTime = value
        }
        if let value = dict["Level"] as? Int32 {
            self.level = value
        }
        if let value = dict["Meet"] as? Int32 {
            self.meet = value
        }
        if let value = dict["ModifyType"] as? Int32 {
            self.modifyType = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["OperationMode"] as? Int32 {
            self.operationMode = value
        }
        if let value = dict["QualityCheckType"] as? Int32 {
            self.qualityCheckType = value
        }
        if let value = dict["Rid"] as? String {
            self.rid = value
        }
        if let value = dict["RuleCategoryName"] as? String {
            self.ruleCategoryName = value
        }
        if let value = dict["RuleScoreType"] as? Int32 {
            self.ruleScoreType = value
        }
        if let value = dict["RuleType"] as? Int32 {
            self.ruleType = value
        }
        if let value = dict["SchemeCheckType"] as? [String: Any?] {
            var model = SchemeCheckType()
            model.fromMap(value)
            self.schemeCheckType = model
        }
        if let value = dict["SchemeId"] as? Int64 {
            self.schemeId = value
        }
        if let value = dict["SchemeName"] as? String {
            self.schemeName = value
        }
        if let value = dict["SchemeRuleMappingId"] as? Int64 {
            self.schemeRuleMappingId = value
        }
        if let value = dict["ScoreDeleted"] as? Bool {
            self.scoreDeleted = value
        }
        if let value = dict["ScoreId"] as? Int64 {
            self.scoreId = value
        }
        if let value = dict["ScoreName"] as? String {
            self.scoreName = value
        }
        if let value = dict["ScoreNum"] as? Int32 {
            self.scoreNum = value
        }
        if let value = dict["ScoreNumType"] as? Int32 {
            self.scoreNumType = value
        }
        if let value = dict["ScoreRuleHitType"] as? Int32 {
            self.scoreRuleHitType = value
        }
        if let value = dict["ScoreSubId"] as? Int64 {
            self.scoreSubId = value
        }
        if let value = dict["ScoreSubName"] as? String {
            self.scoreSubName = value
        }
        if let value = dict["ScoreType"] as? Int32 {
            self.scoreType = value
        }
        if let value = dict["SortIndex"] as? Int32 {
            self.sortIndex = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
        if let value = dict["Status"] as? Int32 {
            self.status = value
        }
        if let value = dict["TargetType"] as? Int32 {
            self.targetType = value
        }
        if let value = dict["TaskFlowId"] as? Int64 {
            self.taskFlowId = value
        }
        if let value = dict["TaskFlowType"] as? Int32 {
            self.taskFlowType = value
        }
        if let value = dict["Triggers"] as? [String] {
            self.triggers = value
        }
        if let value = dict["Type"] as? Int32 {
            self.type = value
        }
        if let value = dict["Weight"] as? String {
            self.weight = value
        }
    }
}

public class RuleTestDialogue : Tea.TeaModel {
    public class Content : Tea.TeaModel {
        public var begin: Int64?

        public var beginTime: Int64?

        public var emotionValue: Int32?

        public var end: Int64?

        public var hourMinSec: String?

        public var identity: String?

        public var role: String?

        public var silenceDuration: Int64?

        public var speechRate: Int64?

        public var words: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.begin != nil {
                map["Begin"] = self.begin!
            }
            if self.beginTime != nil {
                map["BeginTime"] = self.beginTime!
            }
            if self.emotionValue != nil {
                map["EmotionValue"] = self.emotionValue!
            }
            if self.end != nil {
                map["End"] = self.end!
            }
            if self.hourMinSec != nil {
                map["HourMinSec"] = self.hourMinSec!
            }
            if self.identity != nil {
                map["Identity"] = self.identity!
            }
            if self.role != nil {
                map["Role"] = self.role!
            }
            if self.silenceDuration != nil {
                map["SilenceDuration"] = self.silenceDuration!
            }
            if self.speechRate != nil {
                map["SpeechRate"] = self.speechRate!
            }
            if self.words != nil {
                map["Words"] = self.words!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Begin"] as? Int64 {
                self.begin = value
            }
            if let value = dict["BeginTime"] as? Int64 {
                self.beginTime = value
            }
            if let value = dict["EmotionValue"] as? Int32 {
                self.emotionValue = value
            }
            if let value = dict["End"] as? Int64 {
                self.end = value
            }
            if let value = dict["HourMinSec"] as? String {
                self.hourMinSec = value
            }
            if let value = dict["Identity"] as? String {
                self.identity = value
            }
            if let value = dict["Role"] as? String {
                self.role = value
            }
            if let value = dict["SilenceDuration"] as? Int64 {
                self.silenceDuration = value
            }
            if let value = dict["SpeechRate"] as? Int64 {
                self.speechRate = value
            }
            if let value = dict["Words"] as? String {
                self.words = value
            }
        }
    }
    public var content: [RuleTestDialogue.Content]?

    public var id: Int64?

    public var name: String?

    public var userGroup: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.content != nil {
            var tmp : [Any] = []
            for k in self.content! {
                tmp.append(k.toMap())
            }
            map["Content"] = tmp
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.userGroup != nil {
            map["UserGroup"] = self.userGroup!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Content"] as? [Any?] {
            var tmp : [RuleTestDialogue.Content] = []
            for v in value {
                if v != nil {
                    var model = RuleTestDialogue.Content()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.content = tmp
        }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["UserGroup"] as? String {
            self.userGroup = value
        }
    }
}

public class RulesInfo : Tea.TeaModel {
    public var conditions: [ConditionBasicInfo]?

    public var count: Int32?

    public var dialogues: [RuleTestDialogue]?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var rules: [RuleInfo]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.conditions != nil {
            var tmp : [Any] = []
            for k in self.conditions! {
                tmp.append(k.toMap())
            }
            map["Conditions"] = tmp
        }
        if self.count != nil {
            map["Count"] = self.count!
        }
        if self.dialogues != nil {
            var tmp : [Any] = []
            for k in self.dialogues! {
                tmp.append(k.toMap())
            }
            map["Dialogues"] = tmp
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.rules != nil {
            var tmp : [Any] = []
            for k in self.rules! {
                tmp.append(k.toMap())
            }
            map["Rules"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Conditions"] as? [Any?] {
            var tmp : [ConditionBasicInfo] = []
            for v in value {
                if v != nil {
                    var model = ConditionBasicInfo()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.conditions = tmp
        }
        if let value = dict["Count"] as? Int32 {
            self.count = value
        }
        if let value = dict["Dialogues"] as? [Any?] {
            var tmp : [RuleTestDialogue] = []
            for v in value {
                if v != nil {
                    var model = RuleTestDialogue()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.dialogues = tmp
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["Rules"] as? [Any?] {
            var tmp : [RuleInfo] = []
            for v in value {
                if v != nil {
                    var model = RuleInfo()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.rules = tmp
        }
    }
}

public class SchemeCheckType : Tea.TeaModel {
    public class SchemeScoreInfoList : Tea.TeaModel {
        public var name: String?

        public var rid: Int64?

        public var scoreNum: Int32?

        public var scoreNumType: Int32?

        public var scoreRuleHitType: Int32?

        public var scoreType: Int32?

        public var taskFlowId: Int64?

        public var taskFlowName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.rid != nil {
                map["Rid"] = self.rid!
            }
            if self.scoreNum != nil {
                map["ScoreNum"] = self.scoreNum!
            }
            if self.scoreNumType != nil {
                map["ScoreNumType"] = self.scoreNumType!
            }
            if self.scoreRuleHitType != nil {
                map["ScoreRuleHitType"] = self.scoreRuleHitType!
            }
            if self.scoreType != nil {
                map["ScoreType"] = self.scoreType!
            }
            if self.taskFlowId != nil {
                map["TaskFlowId"] = self.taskFlowId!
            }
            if self.taskFlowName != nil {
                map["TaskFlowName"] = self.taskFlowName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["Rid"] as? Int64 {
                self.rid = value
            }
            if let value = dict["ScoreNum"] as? Int32 {
                self.scoreNum = value
            }
            if let value = dict["ScoreNumType"] as? Int32 {
                self.scoreNumType = value
            }
            if let value = dict["ScoreRuleHitType"] as? Int32 {
                self.scoreRuleHitType = value
            }
            if let value = dict["ScoreType"] as? Int32 {
                self.scoreType = value
            }
            if let value = dict["TaskFlowId"] as? Int64 {
                self.taskFlowId = value
            }
            if let value = dict["TaskFlowName"] as? String {
                self.taskFlowName = value
            }
        }
    }
    public class TaskFlowScoreInfoList : Tea.TeaModel {
        public class SchemeScoreInfoList : Tea.TeaModel {
            public var name: String?

            public var rid: Int64?

            public var scoreNum: Int32?

            public var scoreNumType: Int32?

            public var scoreRuleHitType: Int32?

            public var scoreType: Int32?

            public var taskFlowId: Int64?

            public var taskFlowName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.rid != nil {
                    map["Rid"] = self.rid!
                }
                if self.scoreNum != nil {
                    map["ScoreNum"] = self.scoreNum!
                }
                if self.scoreNumType != nil {
                    map["ScoreNumType"] = self.scoreNumType!
                }
                if self.scoreRuleHitType != nil {
                    map["ScoreRuleHitType"] = self.scoreRuleHitType!
                }
                if self.scoreType != nil {
                    map["ScoreType"] = self.scoreType!
                }
                if self.taskFlowId != nil {
                    map["TaskFlowId"] = self.taskFlowId!
                }
                if self.taskFlowName != nil {
                    map["TaskFlowName"] = self.taskFlowName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["Rid"] as? Int64 {
                    self.rid = value
                }
                if let value = dict["ScoreNum"] as? Int32 {
                    self.scoreNum = value
                }
                if let value = dict["ScoreNumType"] as? Int32 {
                    self.scoreNumType = value
                }
                if let value = dict["ScoreRuleHitType"] as? Int32 {
                    self.scoreRuleHitType = value
                }
                if let value = dict["ScoreType"] as? Int32 {
                    self.scoreType = value
                }
                if let value = dict["TaskFlowId"] as? Int64 {
                    self.taskFlowId = value
                }
                if let value = dict["TaskFlowName"] as? String {
                    self.taskFlowName = value
                }
            }
        }
        public var schemeScoreInfoList: [SchemeCheckType.TaskFlowScoreInfoList.SchemeScoreInfoList]?

        public var taskFlowId: Int64?

        public var taskFlowName: String?

        public var taskFlowType: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.schemeScoreInfoList != nil {
                var tmp : [Any] = []
                for k in self.schemeScoreInfoList! {
                    tmp.append(k.toMap())
                }
                map["SchemeScoreInfoList"] = tmp
            }
            if self.taskFlowId != nil {
                map["TaskFlowId"] = self.taskFlowId!
            }
            if self.taskFlowName != nil {
                map["TaskFlowName"] = self.taskFlowName!
            }
            if self.taskFlowType != nil {
                map["TaskFlowType"] = self.taskFlowType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["SchemeScoreInfoList"] as? [Any?] {
                var tmp : [SchemeCheckType.TaskFlowScoreInfoList.SchemeScoreInfoList] = []
                for v in value {
                    if v != nil {
                        var model = SchemeCheckType.TaskFlowScoreInfoList.SchemeScoreInfoList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.schemeScoreInfoList = tmp
            }
            if let value = dict["TaskFlowId"] as? Int64 {
                self.taskFlowId = value
            }
            if let value = dict["TaskFlowName"] as? String {
                self.taskFlowName = value
            }
            if let value = dict["TaskFlowType"] as? Int32 {
                self.taskFlowType = value
            }
        }
    }
    public var checkName: String?

    public var checkType: Int64?

    public var enable: Int32?

    public var schemeId: Int64?

    public var schemeScoreInfoList: [SchemeCheckType.SchemeScoreInfoList]?

    public var score: Int32?

    public var sourceScore: Int32?

    public var taskFlowScoreInfoList: [SchemeCheckType.TaskFlowScoreInfoList]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.checkName != nil {
            map["CheckName"] = self.checkName!
        }
        if self.checkType != nil {
            map["CheckType"] = self.checkType!
        }
        if self.enable != nil {
            map["Enable"] = self.enable!
        }
        if self.schemeId != nil {
            map["SchemeId"] = self.schemeId!
        }
        if self.schemeScoreInfoList != nil {
            var tmp : [Any] = []
            for k in self.schemeScoreInfoList! {
                tmp.append(k.toMap())
            }
            map["SchemeScoreInfoList"] = tmp
        }
        if self.score != nil {
            map["Score"] = self.score!
        }
        if self.sourceScore != nil {
            map["SourceScore"] = self.sourceScore!
        }
        if self.taskFlowScoreInfoList != nil {
            var tmp : [Any] = []
            for k in self.taskFlowScoreInfoList! {
                tmp.append(k.toMap())
            }
            map["TaskFlowScoreInfoList"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CheckName"] as? String {
            self.checkName = value
        }
        if let value = dict["CheckType"] as? Int64 {
            self.checkType = value
        }
        if let value = dict["Enable"] as? Int32 {
            self.enable = value
        }
        if let value = dict["SchemeId"] as? Int64 {
            self.schemeId = value
        }
        if let value = dict["SchemeScoreInfoList"] as? [Any?] {
            var tmp : [SchemeCheckType.SchemeScoreInfoList] = []
            for v in value {
                if v != nil {
                    var model = SchemeCheckType.SchemeScoreInfoList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.schemeScoreInfoList = tmp
        }
        if let value = dict["Score"] as? Int32 {
            self.score = value
        }
        if let value = dict["SourceScore"] as? Int32 {
            self.sourceScore = value
        }
        if let value = dict["TaskFlowScoreInfoList"] as? [Any?] {
            var tmp : [SchemeCheckType.TaskFlowScoreInfoList] = []
            for v in value {
                if v != nil {
                    var model = SchemeCheckType.TaskFlowScoreInfoList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.taskFlowScoreInfoList = tmp
        }
    }
}

public class TaskGraphFlow : Tea.TeaModel {
    public var flowRuleScoreType: Int32?

    public var id: Int64?

    public var nodes: [GraphFlowNode]?

    public var rid: Int64?

    public var ruleName: String?

    public var showProperties: String?

    public var skipWhenFirstSessionNodeMiss: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.flowRuleScoreType != nil {
            map["FlowRuleScoreType"] = self.flowRuleScoreType!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.nodes != nil {
            var tmp : [Any] = []
            for k in self.nodes! {
                tmp.append(k.toMap())
            }
            map["Nodes"] = tmp
        }
        if self.rid != nil {
            map["Rid"] = self.rid!
        }
        if self.ruleName != nil {
            map["RuleName"] = self.ruleName!
        }
        if self.showProperties != nil {
            map["ShowProperties"] = self.showProperties!
        }
        if self.skipWhenFirstSessionNodeMiss != nil {
            map["SkipWhenFirstSessionNodeMiss"] = self.skipWhenFirstSessionNodeMiss!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["FlowRuleScoreType"] as? Int32 {
            self.flowRuleScoreType = value
        }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["Nodes"] as? [Any?] {
            var tmp : [GraphFlowNode] = []
            for v in value {
                if v != nil {
                    var model = GraphFlowNode()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.nodes = tmp
        }
        if let value = dict["Rid"] as? Int64 {
            self.rid = value
        }
        if let value = dict["RuleName"] as? String {
            self.ruleName = value
        }
        if let value = dict["ShowProperties"] as? String {
            self.showProperties = value
        }
        if let value = dict["SkipWhenFirstSessionNodeMiss"] as? Bool {
            self.skipWhenFirstSessionNodeMiss = value
        }
    }
}

public class AddBusinessCategoryRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var jsonStr: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.jsonStr != nil {
            map["JsonStr"] = self.jsonStr!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["JsonStr"] as? String {
            self.jsonStr = value
        }
    }
}

public class AddBusinessCategoryResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class AddBusinessCategoryResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AddBusinessCategoryResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = AddBusinessCategoryResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class AddRuleCategoryRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var jsonStr: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.jsonStr != nil {
            map["JsonStr"] = self.jsonStr!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["JsonStr"] as? String {
            self.jsonStr = value
        }
    }
}

public class AddRuleCategoryResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var select: Bool?

        public var type: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.select != nil {
                map["Select"] = self.select!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Select"] as? Bool {
                self.select = value
            }
            if let value = dict["Type"] as? Int32 {
                self.type = value
            }
        }
    }
    public var code: String?

    public var data: AddRuleCategoryResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = AddRuleCategoryResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class AddRuleCategoryResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AddRuleCategoryResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = AddRuleCategoryResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class AddRuleV4Request : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var isCopy: Bool?

    public var jsonStrForRule: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.isCopy != nil {
            map["IsCopy"] = self.isCopy!
        }
        if self.jsonStrForRule != nil {
            map["JsonStrForRule"] = self.jsonStrForRule!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["IsCopy"] as? Bool {
            self.isCopy = value
        }
        if let value = dict["JsonStrForRule"] as? String {
            self.jsonStrForRule = value
        }
    }
}

public class AddRuleV4ResponseBody : Tea.TeaModel {
    public class Messages : Tea.TeaModel {
        public var message: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.message != nil {
                map["Message"] = self.message!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Message"] as? [String] {
                self.message = value
            }
        }
    }
    public var code: String?

    public var data: Int64?

    public var httpStatusCode: Int32?

    public var message: String?

    public var messages: AddRuleV4ResponseBody.Messages?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.messages?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.messages != nil {
            map["Messages"] = self.messages?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? Int64 {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Messages"] as? [String: Any?] {
            var model = AddRuleV4ResponseBody.Messages()
            model.fromMap(value)
            self.messages = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class AddRuleV4Response : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AddRuleV4ResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = AddRuleV4ResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ApplyWsTokenRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var jsonStr: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.jsonStr != nil {
            map["JsonStr"] = self.jsonStr!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["JsonStr"] as? String {
            self.jsonStr = value
        }
    }
}

public class ApplyWsTokenResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var sessionId: String?

        public var token: String?

        public var wsEndpoint: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.sessionId != nil {
                map["SessionId"] = self.sessionId!
            }
            if self.token != nil {
                map["Token"] = self.token!
            }
            if self.wsEndpoint != nil {
                map["WsEndpoint"] = self.wsEndpoint!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["SessionId"] as? String {
                self.sessionId = value
            }
            if let value = dict["Token"] as? String {
                self.token = value
            }
            if let value = dict["WsEndpoint"] as? String {
                self.wsEndpoint = value
            }
        }
    }
    public var code: String?

    public var data: ApplyWsTokenResponseBody.Data?

    public var httpStatusCode: Int32?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ApplyWsTokenResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ApplyWsTokenResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ApplyWsTokenResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ApplyWsTokenResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class AssignReviewerRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var jsonStr: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.jsonStr != nil {
            map["JsonStr"] = self.jsonStr!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["JsonStr"] as? String {
            self.jsonStr = value
        }
    }
}

public class AssignReviewerResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class AssignReviewerResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AssignReviewerResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = AssignReviewerResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class AssignReviewerBySessionGroupRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var jsonStr: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.jsonStr != nil {
            map["jsonStr"] = self.jsonStr!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["jsonStr"] as? String {
            self.jsonStr = value
        }
    }
}

public class AssignReviewerBySessionGroupResponseBody : Tea.TeaModel {
    public class Messages : Tea.TeaModel {
        public var message: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.message != nil {
                map["Message"] = self.message!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Message"] as? [String] {
                self.message = value
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var messages: AssignReviewerBySessionGroupResponseBody.Messages?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.messages?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.messages != nil {
            map["Messages"] = self.messages?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Messages"] as? [String: Any?] {
            var model = AssignReviewerBySessionGroupResponseBody.Messages()
            model.fromMap(value)
            self.messages = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class AssignReviewerBySessionGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AssignReviewerBySessionGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = AssignReviewerBySessionGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class BatchSubmitReviewInfoRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var jsonStr: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.jsonStr != nil {
            map["jsonStr"] = self.jsonStr!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["jsonStr"] as? String {
            self.jsonStr = value
        }
    }
}

public class BatchSubmitReviewInfoResponseBody : Tea.TeaModel {
    public class Messages : Tea.TeaModel {
        public var message: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.message != nil {
                map["Message"] = self.message!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Message"] as? [String] {
                self.message = value
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var messages: BatchSubmitReviewInfoResponseBody.Messages?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.messages?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.messages != nil {
            map["Messages"] = self.messages?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Messages"] as? [String: Any?] {
            var model = BatchSubmitReviewInfoResponseBody.Messages()
            model.fromMap(value)
            self.messages = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class BatchSubmitReviewInfoResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: BatchSubmitReviewInfoResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = BatchSubmitReviewInfoResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateAsrVocabRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var jsonStr: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.jsonStr != nil {
            map["JsonStr"] = self.jsonStr!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["JsonStr"] as? String {
            self.jsonStr = value
        }
    }
}

public class CreateAsrVocabResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class CreateAsrVocabResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateAsrVocabResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateAsrVocabResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateCheckTypeToSchemeRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var jsonStr: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.jsonStr != nil {
            map["jsonStr"] = self.jsonStr!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["jsonStr"] as? String {
            self.jsonStr = value
        }
    }
}

public class CreateCheckTypeToSchemeResponseBody : Tea.TeaModel {
    public class Messages : Tea.TeaModel {
        public var message: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.message != nil {
                map["Message"] = self.message!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Message"] as? [String] {
                self.message = value
            }
        }
    }
    public var code: String?

    public var data: Int64?

    public var httpStatusCode: Int32?

    public var message: String?

    public var messages: CreateCheckTypeToSchemeResponseBody.Messages?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.messages?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.messages != nil {
            map["Messages"] = self.messages?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? Int64 {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Messages"] as? [String: Any?] {
            var model = CreateCheckTypeToSchemeResponseBody.Messages()
            model.fromMap(value)
            self.messages = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class CreateCheckTypeToSchemeResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateCheckTypeToSchemeResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateCheckTypeToSchemeResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateMiningTaskRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var callbackUrl: String?

    public var filePath: String?

    public var param: String?

    public var taskType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.callbackUrl != nil {
            map["CallbackUrl"] = self.callbackUrl!
        }
        if self.filePath != nil {
            map["FilePath"] = self.filePath!
        }
        if self.param != nil {
            map["Param"] = self.param!
        }
        if self.taskType != nil {
            map["TaskType"] = self.taskType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["CallbackUrl"] as? String {
            self.callbackUrl = value
        }
        if let value = dict["FilePath"] as? String {
            self.filePath = value
        }
        if let value = dict["Param"] as? String {
            self.param = value
        }
        if let value = dict["TaskType"] as? String {
            self.taskType = value
        }
    }
}

public class CreateMiningTaskResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var taskId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["TaskId"] as? String {
                self.taskId = value
            }
        }
    }
    public var code: String?

    public var data: CreateMiningTaskResponseBody.Data?

    public var httpStatusCode: String?

    public var message: String?

    public var requestId: String?

    public var success: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = CreateMiningTaskResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? String {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? String {
            self.success = value
        }
    }
}

public class CreateMiningTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateMiningTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateMiningTaskResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateQualityCheckSchemeRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var jsonStr: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.jsonStr != nil {
            map["jsonStr"] = self.jsonStr!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["jsonStr"] as? String {
            self.jsonStr = value
        }
    }
}

public class CreateQualityCheckSchemeResponseBody : Tea.TeaModel {
    public class Messages : Tea.TeaModel {
        public var message: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.message != nil {
                map["Message"] = self.message!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Message"] as? [String] {
                self.message = value
            }
        }
    }
    public var code: String?

    public var data: Int64?

    public var httpStatusCode: Int32?

    public var message: String?

    public var messages: CreateQualityCheckSchemeResponseBody.Messages?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.messages?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.messages != nil {
            map["Messages"] = self.messages?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? Int64 {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Messages"] as? [String: Any?] {
            var model = CreateQualityCheckSchemeResponseBody.Messages()
            model.fromMap(value)
            self.messages = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class CreateQualityCheckSchemeResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateQualityCheckSchemeResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateQualityCheckSchemeResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateSchemeTaskConfigRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var jsonStr: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.jsonStr != nil {
            map["jsonStr"] = self.jsonStr!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["jsonStr"] as? String {
            self.jsonStr = value
        }
    }
}

public class CreateSchemeTaskConfigResponseBody : Tea.TeaModel {
    public class Messages : Tea.TeaModel {
        public var message: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.message != nil {
                map["Message"] = self.message!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Message"] as? [String] {
                self.message = value
            }
        }
    }
    public var code: String?

    public var data: Int64?

    public var httpStatusCode: Int32?

    public var message: String?

    public var messages: CreateSchemeTaskConfigResponseBody.Messages?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.messages?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.messages != nil {
            map["Messages"] = self.messages?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? Int64 {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Messages"] as? [String: Any?] {
            var model = CreateSchemeTaskConfigResponseBody.Messages()
            model.fromMap(value)
            self.messages = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class CreateSchemeTaskConfigResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateSchemeTaskConfigResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateSchemeTaskConfigResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateSkillGroupConfigRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var jsonStr: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.jsonStr != nil {
            map["JsonStr"] = self.jsonStr!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["JsonStr"] as? String {
            self.jsonStr = value
        }
    }
}

public class CreateSkillGroupConfigResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: Int64?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? Int64 {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class CreateSkillGroupConfigResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateSkillGroupConfigResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateSkillGroupConfigResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateTaskAssignRuleRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var jsonStr: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.jsonStr != nil {
            map["JsonStr"] = self.jsonStr!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["JsonStr"] as? String {
            self.jsonStr = value
        }
    }
}

public class CreateTaskAssignRuleResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class CreateTaskAssignRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateTaskAssignRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateTaskAssignRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateWarningConfigRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var jsonStr: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.jsonStr != nil {
            map["JsonStr"] = self.jsonStr!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["JsonStr"] as? String {
            self.jsonStr = value
        }
    }
}

public class CreateWarningConfigResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class CreateWarningConfigResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateWarningConfigResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateWarningConfigResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateWarningStrategyConfigRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var jsonStr: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.jsonStr != nil {
            map["JsonStr"] = self.jsonStr!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["JsonStr"] as? String {
            self.jsonStr = value
        }
    }
}

public class CreateWarningStrategyConfigResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: Int64?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? Int64 {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class CreateWarningStrategyConfigResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateWarningStrategyConfigResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateWarningStrategyConfigResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DelRuleCategoryRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var jsonStr: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.jsonStr != nil {
            map["JsonStr"] = self.jsonStr!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["JsonStr"] as? String {
            self.jsonStr = value
        }
    }
}

public class DelRuleCategoryResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var select: Bool?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.select != nil {
                map["Select"] = self.select!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Select"] as? Bool {
                self.select = value
            }
        }
    }
    public var code: String?

    public var data: DelRuleCategoryResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = DelRuleCategoryResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DelRuleCategoryResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DelRuleCategoryResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DelRuleCategoryResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteAsrVocabRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var jsonStr: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.jsonStr != nil {
            map["JsonStr"] = self.jsonStr!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["JsonStr"] as? String {
            self.jsonStr = value
        }
    }
}

public class DeleteAsrVocabResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DeleteAsrVocabResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteAsrVocabResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteAsrVocabResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteBusinessCategoryRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var jsonStr: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.jsonStr != nil {
            map["JsonStr"] = self.jsonStr!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["JsonStr"] as? String {
            self.jsonStr = value
        }
    }
}

public class DeleteBusinessCategoryResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DeleteBusinessCategoryResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteBusinessCategoryResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteBusinessCategoryResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteCheckTypeToSchemeRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var jsonStr: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.jsonStr != nil {
            map["JsonStr"] = self.jsonStr!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["JsonStr"] as? String {
            self.jsonStr = value
        }
    }
}

public class DeleteCheckTypeToSchemeResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: String?

    public var message: String?

    public var messages: [String]?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.messages != nil {
            map["Messages"] = self.messages!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Messages"] as? [String] {
            self.messages = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DeleteCheckTypeToSchemeResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteCheckTypeToSchemeResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteCheckTypeToSchemeResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteCustomizationConfigRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var jsonStr: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.jsonStr != nil {
            map["JsonStr"] = self.jsonStr!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["JsonStr"] as? String {
            self.jsonStr = value
        }
    }
}

public class DeleteCustomizationConfigResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DeleteCustomizationConfigResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteCustomizationConfigResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteCustomizationConfigResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteDataSetRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var jsonStr: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.jsonStr != nil {
            map["JsonStr"] = self.jsonStr!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["JsonStr"] as? String {
            self.jsonStr = value
        }
    }
}

public class DeleteDataSetResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DeleteDataSetResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteDataSetResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteDataSetResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeletePrecisionTaskRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var jsonStr: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.jsonStr != nil {
            map["JsonStr"] = self.jsonStr!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["JsonStr"] as? String {
            self.jsonStr = value
        }
    }
}

public class DeletePrecisionTaskResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DeletePrecisionTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeletePrecisionTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeletePrecisionTaskResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteQualityCheckSchemeRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var jsonStr: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.jsonStr != nil {
            map["jsonStr"] = self.jsonStr!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["jsonStr"] as? String {
            self.jsonStr = value
        }
    }
}

public class DeleteQualityCheckSchemeResponseBody : Tea.TeaModel {
    public class Messages : Tea.TeaModel {
        public var message: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.message != nil {
                map["Message"] = self.message!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Message"] as? [String] {
                self.message = value
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var messages: DeleteQualityCheckSchemeResponseBody.Messages?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.messages?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.messages != nil {
            map["Messages"] = self.messages?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Messages"] as? [String: Any?] {
            var model = DeleteQualityCheckSchemeResponseBody.Messages()
            model.fromMap(value)
            self.messages = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DeleteQualityCheckSchemeResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteQualityCheckSchemeResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteQualityCheckSchemeResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteRuleRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var forceDelete: Bool?

    public var isSchemeData: Int32?

    public var ruleId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.forceDelete != nil {
            map["ForceDelete"] = self.forceDelete!
        }
        if self.isSchemeData != nil {
            map["IsSchemeData"] = self.isSchemeData!
        }
        if self.ruleId != nil {
            map["RuleId"] = self.ruleId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["ForceDelete"] as? Bool {
            self.forceDelete = value
        }
        if let value = dict["IsSchemeData"] as? Int32 {
            self.isSchemeData = value
        }
        if let value = dict["RuleId"] as? Int64 {
            self.ruleId = value
        }
    }
}

public class DeleteRuleResponseBody : Tea.TeaModel {
    public class Messages : Tea.TeaModel {
        public var message: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.message != nil {
                map["Message"] = self.message!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Message"] as? [String] {
                self.message = value
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var messages: DeleteRuleResponseBody.Messages?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.messages?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.messages != nil {
            map["Messages"] = self.messages?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Messages"] as? [String: Any?] {
            var model = DeleteRuleResponseBody.Messages()
            model.fromMap(value)
            self.messages = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DeleteRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteRuleV4Request : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var forceDelete: Bool?

    public var ruleId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.forceDelete != nil {
            map["ForceDelete"] = self.forceDelete!
        }
        if self.ruleId != nil {
            map["RuleId"] = self.ruleId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["ForceDelete"] as? Bool {
            self.forceDelete = value
        }
        if let value = dict["RuleId"] as? Int64 {
            self.ruleId = value
        }
    }
}

public class DeleteRuleV4ResponseBody : Tea.TeaModel {
    public class Messages : Tea.TeaModel {
        public var message: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.message != nil {
                map["Message"] = self.message!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Message"] as? [String] {
                self.message = value
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var messages: DeleteRuleV4ResponseBody.Messages?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.messages?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.messages != nil {
            map["Messages"] = self.messages?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Messages"] as? [String: Any?] {
            var model = DeleteRuleV4ResponseBody.Messages()
            model.fromMap(value)
            self.messages = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DeleteRuleV4Response : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteRuleV4ResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteRuleV4ResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteSchemeTaskConfigRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var jsonStr: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.jsonStr != nil {
            map["jsonStr"] = self.jsonStr!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["jsonStr"] as? String {
            self.jsonStr = value
        }
    }
}

public class DeleteSchemeTaskConfigResponseBody : Tea.TeaModel {
    public class Messages : Tea.TeaModel {
        public var message: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.message != nil {
                map["Message"] = self.message!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Message"] as? [String] {
                self.message = value
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var messages: DeleteSchemeTaskConfigResponseBody.Messages?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.messages?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.messages != nil {
            map["Messages"] = self.messages?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Messages"] as? [String: Any?] {
            var model = DeleteSchemeTaskConfigResponseBody.Messages()
            model.fromMap(value)
            self.messages = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DeleteSchemeTaskConfigResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteSchemeTaskConfigResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteSchemeTaskConfigResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteSkillGroupConfigRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var jsonStr: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.jsonStr != nil {
            map["JsonStr"] = self.jsonStr!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["JsonStr"] as? String {
            self.jsonStr = value
        }
    }
}

public class DeleteSkillGroupConfigResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DeleteSkillGroupConfigResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteSkillGroupConfigResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteSkillGroupConfigResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteTaskAssignRuleRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var jsonStr: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.jsonStr != nil {
            map["JsonStr"] = self.jsonStr!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["JsonStr"] as? String {
            self.jsonStr = value
        }
    }
}

public class DeleteTaskAssignRuleResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DeleteTaskAssignRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteTaskAssignRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteTaskAssignRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteWarningConfigRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var jsonStr: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.jsonStr != nil {
            map["JsonStr"] = self.jsonStr!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["JsonStr"] as? String {
            self.jsonStr = value
        }
    }
}

public class DeleteWarningConfigResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DeleteWarningConfigResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteWarningConfigResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteWarningConfigResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteWarningStrategyConfigRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var jsonStr: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.jsonStr != nil {
            map["JsonStr"] = self.jsonStr!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["JsonStr"] as? String {
            self.jsonStr = value
        }
    }
}

public class DeleteWarningStrategyConfigResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DeleteWarningStrategyConfigResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteWarningStrategyConfigResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteWarningStrategyConfigResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetAsrVocabRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var jsonStr: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.jsonStr != nil {
            map["JsonStr"] = self.jsonStr!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["JsonStr"] as? String {
            self.jsonStr = value
        }
    }
}

public class GetAsrVocabResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Words : Tea.TeaModel {
            public class Word : Tea.TeaModel {
                public var weight: Int32?

                public var word: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.weight != nil {
                        map["Weight"] = self.weight!
                    }
                    if self.word != nil {
                        map["Word"] = self.word!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Weight"] as? Int32 {
                        self.weight = value
                    }
                    if let value = dict["Word"] as? String {
                        self.word = value
                    }
                }
            }
            public var word: [GetAsrVocabResponseBody.Data.Words.Word]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.word != nil {
                    var tmp : [Any] = []
                    for k in self.word! {
                        tmp.append(k.toMap())
                    }
                    map["Word"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Word"] as? [Any?] {
                    var tmp : [GetAsrVocabResponseBody.Data.Words.Word] = []
                    for v in value {
                        if v != nil {
                            var model = GetAsrVocabResponseBody.Data.Words.Word()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.word = tmp
                }
            }
        }
        public var asrVersion: Int32?

        public var modelCustomizationId: String?

        public var name: String?

        public var words: GetAsrVocabResponseBody.Data.Words?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.words?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.asrVersion != nil {
                map["AsrVersion"] = self.asrVersion!
            }
            if self.modelCustomizationId != nil {
                map["ModelCustomizationId"] = self.modelCustomizationId!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.words != nil {
                map["Words"] = self.words?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AsrVersion"] as? Int32 {
                self.asrVersion = value
            }
            if let value = dict["ModelCustomizationId"] as? String {
                self.modelCustomizationId = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["Words"] as? [String: Any?] {
                var model = GetAsrVocabResponseBody.Data.Words()
                model.fromMap(value)
                self.words = model
            }
        }
    }
    public var code: String?

    public var data: GetAsrVocabResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetAsrVocabResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetAsrVocabResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetAsrVocabResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetAsrVocabResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetBusinessCategoryListRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var jsonStr: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.jsonStr != nil {
            map["JsonStr"] = self.jsonStr!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["JsonStr"] as? String {
            self.jsonStr = value
        }
    }
}

public class GetBusinessCategoryListResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class BusinessCategoryBasicInfo : Tea.TeaModel {
            public var bid: Int32?

            public var businessName: String?

            public var serviceType: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.bid != nil {
                    map["Bid"] = self.bid!
                }
                if self.businessName != nil {
                    map["BusinessName"] = self.businessName!
                }
                if self.serviceType != nil {
                    map["ServiceType"] = self.serviceType!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Bid"] as? Int32 {
                    self.bid = value
                }
                if let value = dict["BusinessName"] as? String {
                    self.businessName = value
                }
                if let value = dict["ServiceType"] as? Int32 {
                    self.serviceType = value
                }
            }
        }
        public var businessCategoryBasicInfo: [GetBusinessCategoryListResponseBody.Data.BusinessCategoryBasicInfo]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.businessCategoryBasicInfo != nil {
                var tmp : [Any] = []
                for k in self.businessCategoryBasicInfo! {
                    tmp.append(k.toMap())
                }
                map["BusinessCategoryBasicInfo"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["BusinessCategoryBasicInfo"] as? [Any?] {
                var tmp : [GetBusinessCategoryListResponseBody.Data.BusinessCategoryBasicInfo] = []
                for v in value {
                    if v != nil {
                        var model = GetBusinessCategoryListResponseBody.Data.BusinessCategoryBasicInfo()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.businessCategoryBasicInfo = tmp
            }
        }
    }
    public var code: String?

    public var data: GetBusinessCategoryListResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetBusinessCategoryListResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetBusinessCategoryListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetBusinessCategoryListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetBusinessCategoryListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetCustomizationConfigListRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var jsonStr: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.jsonStr != nil {
            map["JsonStr"] = self.jsonStr!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["JsonStr"] as? String {
            self.jsonStr = value
        }
    }
}

public class GetCustomizationConfigListResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class ModelCustomizationDataSetPo : Tea.TeaModel {
            public var asrVersion: Int32?

            public var createTime: String?

            public var modeCustomizationId: String?

            public var modelId: Int64?

            public var modelName: String?

            public var modelStatus: Int32?

            public var taskType: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.asrVersion != nil {
                    map["AsrVersion"] = self.asrVersion!
                }
                if self.createTime != nil {
                    map["CreateTime"] = self.createTime!
                }
                if self.modeCustomizationId != nil {
                    map["ModeCustomizationId"] = self.modeCustomizationId!
                }
                if self.modelId != nil {
                    map["ModelId"] = self.modelId!
                }
                if self.modelName != nil {
                    map["ModelName"] = self.modelName!
                }
                if self.modelStatus != nil {
                    map["ModelStatus"] = self.modelStatus!
                }
                if self.taskType != nil {
                    map["TaskType"] = self.taskType!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AsrVersion"] as? Int32 {
                    self.asrVersion = value
                }
                if let value = dict["CreateTime"] as? String {
                    self.createTime = value
                }
                if let value = dict["ModeCustomizationId"] as? String {
                    self.modeCustomizationId = value
                }
                if let value = dict["ModelId"] as? Int64 {
                    self.modelId = value
                }
                if let value = dict["ModelName"] as? String {
                    self.modelName = value
                }
                if let value = dict["ModelStatus"] as? Int32 {
                    self.modelStatus = value
                }
                if let value = dict["TaskType"] as? Int32 {
                    self.taskType = value
                }
            }
        }
        public var modelCustomizationDataSetPo: [GetCustomizationConfigListResponseBody.Data.ModelCustomizationDataSetPo]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.modelCustomizationDataSetPo != nil {
                var tmp : [Any] = []
                for k in self.modelCustomizationDataSetPo! {
                    tmp.append(k.toMap())
                }
                map["ModelCustomizationDataSetPo"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ModelCustomizationDataSetPo"] as? [Any?] {
                var tmp : [GetCustomizationConfigListResponseBody.Data.ModelCustomizationDataSetPo] = []
                for v in value {
                    if v != nil {
                        var model = GetCustomizationConfigListResponseBody.Data.ModelCustomizationDataSetPo()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.modelCustomizationDataSetPo = tmp
            }
        }
    }
    public var code: String?

    public var data: GetCustomizationConfigListResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetCustomizationConfigListResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetCustomizationConfigListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetCustomizationConfigListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetCustomizationConfigListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetMiningTaskResultRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var taskId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["TaskId"] as? String {
            self.taskId = value
        }
    }
}

public class GetMiningTaskResultResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class FilePathList : Tea.TeaModel {
            public var fileType: String?

            public var fileUrl: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.fileType != nil {
                    map["FileType"] = self.fileType!
                }
                if self.fileUrl != nil {
                    map["FileUrl"] = self.fileUrl!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["FileType"] as? String {
                    self.fileType = value
                }
                if let value = dict["FileUrl"] as? String {
                    self.fileUrl = value
                }
            }
        }
        public var filePath: String?

        public var filePathList: [GetMiningTaskResultResponseBody.Data.FilePathList]?

        public var filePathMd: String?

        public var taskId: String?

        public var taskStatus: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.filePath != nil {
                map["FilePath"] = self.filePath!
            }
            if self.filePathList != nil {
                var tmp : [Any] = []
                for k in self.filePathList! {
                    tmp.append(k.toMap())
                }
                map["FilePathList"] = tmp
            }
            if self.filePathMd != nil {
                map["FilePathMd"] = self.filePathMd!
            }
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            if self.taskStatus != nil {
                map["TaskStatus"] = self.taskStatus!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["FilePath"] as? String {
                self.filePath = value
            }
            if let value = dict["FilePathList"] as? [Any?] {
                var tmp : [GetMiningTaskResultResponseBody.Data.FilePathList] = []
                for v in value {
                    if v != nil {
                        var model = GetMiningTaskResultResponseBody.Data.FilePathList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.filePathList = tmp
            }
            if let value = dict["FilePathMd"] as? String {
                self.filePathMd = value
            }
            if let value = dict["TaskId"] as? String {
                self.taskId = value
            }
            if let value = dict["TaskStatus"] as? String {
                self.taskStatus = value
            }
        }
    }
    public var code: String?

    public var data: GetMiningTaskResultResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetMiningTaskResultResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? String {
            self.success = value
        }
    }
}

public class GetMiningTaskResultResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetMiningTaskResultResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetMiningTaskResultResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetNextResultToVerifyRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var jsonStr: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.jsonStr != nil {
            map["JsonStr"] = self.jsonStr!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["JsonStr"] as? String {
            self.jsonStr = value
        }
    }
}

public class GetNextResultToVerifyResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Dialogues : Tea.TeaModel {
            public class Dialogue : Tea.TeaModel {
                public class Deltas : Tea.TeaModel {
                    public class Delta : Tea.TeaModel {
                        public class Source : Tea.TeaModel {
                            public class Line : Tea.TeaModel {
                                public var line: [String]?

                                public override init() {
                                    super.init()
                                }

                                public init(_ dict: [String: Any]) {
                                    super.init()
                                    self.fromMap(dict)
                                }

                                public override func validate() throws -> Void {
                                }

                                public override func toMap() -> [String : Any] {
                                    var map = super.toMap()
                                    if self.line != nil {
                                        map["Line"] = self.line!
                                    }
                                    return map
                                }

                                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                    guard let dict else { return }
                                    if let value = dict["Line"] as? [String] {
                                        self.line = value
                                    }
                                }
                            }
                            public var line: GetNextResultToVerifyResponseBody.Data.Dialogues.Dialogue.Deltas.Delta.Source.Line?

                            public var position: Int32?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                                try self.line?.validate()
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.line != nil {
                                    map["Line"] = self.line?.toMap()
                                }
                                if self.position != nil {
                                    map["Position"] = self.position!
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                guard let dict else { return }
                                if let value = dict["Line"] as? [String: Any?] {
                                    var model = GetNextResultToVerifyResponseBody.Data.Dialogues.Dialogue.Deltas.Delta.Source.Line()
                                    model.fromMap(value)
                                    self.line = model
                                }
                                if let value = dict["Position"] as? Int32 {
                                    self.position = value
                                }
                            }
                        }
                        public class Target : Tea.TeaModel {
                            public class Line : Tea.TeaModel {
                                public var line: [String]?

                                public override init() {
                                    super.init()
                                }

                                public init(_ dict: [String: Any]) {
                                    super.init()
                                    self.fromMap(dict)
                                }

                                public override func validate() throws -> Void {
                                }

                                public override func toMap() -> [String : Any] {
                                    var map = super.toMap()
                                    if self.line != nil {
                                        map["Line"] = self.line!
                                    }
                                    return map
                                }

                                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                    guard let dict else { return }
                                    if let value = dict["Line"] as? [String] {
                                        self.line = value
                                    }
                                }
                            }
                            public var line: GetNextResultToVerifyResponseBody.Data.Dialogues.Dialogue.Deltas.Delta.Target.Line?

                            public var position: Int32?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                                try self.line?.validate()
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.line != nil {
                                    map["Line"] = self.line?.toMap()
                                }
                                if self.position != nil {
                                    map["Position"] = self.position!
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                guard let dict else { return }
                                if let value = dict["Line"] as? [String: Any?] {
                                    var model = GetNextResultToVerifyResponseBody.Data.Dialogues.Dialogue.Deltas.Delta.Target.Line()
                                    model.fromMap(value)
                                    self.line = model
                                }
                                if let value = dict["Position"] as? Int32 {
                                    self.position = value
                                }
                            }
                        }
                        public var source: GetNextResultToVerifyResponseBody.Data.Dialogues.Dialogue.Deltas.Delta.Source?

                        public var target: GetNextResultToVerifyResponseBody.Data.Dialogues.Dialogue.Deltas.Delta.Target?

                        public var type: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                            try self.source?.validate()
                            try self.target?.validate()
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.source != nil {
                                map["Source"] = self.source?.toMap()
                            }
                            if self.target != nil {
                                map["Target"] = self.target?.toMap()
                            }
                            if self.type != nil {
                                map["Type"] = self.type!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Source"] as? [String: Any?] {
                                var model = GetNextResultToVerifyResponseBody.Data.Dialogues.Dialogue.Deltas.Delta.Source()
                                model.fromMap(value)
                                self.source = model
                            }
                            if let value = dict["Target"] as? [String: Any?] {
                                var model = GetNextResultToVerifyResponseBody.Data.Dialogues.Dialogue.Deltas.Delta.Target()
                                model.fromMap(value)
                                self.target = model
                            }
                            if let value = dict["Type"] as? String {
                                self.type = value
                            }
                        }
                    }
                    public var delta: [GetNextResultToVerifyResponseBody.Data.Dialogues.Dialogue.Deltas.Delta]?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.delta != nil {
                            var tmp : [Any] = []
                            for k in self.delta! {
                                tmp.append(k.toMap())
                            }
                            map["Delta"] = tmp
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Delta"] as? [Any?] {
                            var tmp : [GetNextResultToVerifyResponseBody.Data.Dialogues.Dialogue.Deltas.Delta] = []
                            for v in value {
                                if v != nil {
                                    var model = GetNextResultToVerifyResponseBody.Data.Dialogues.Dialogue.Deltas.Delta()
                                    if v != nil {
                                        model.fromMap(v as? [String: Any?])
                                    }
                                    tmp.append(model)
                                }
                            }
                            self.delta = tmp
                        }
                    }
                }
                public var begin: Int64?

                public var beginTime: String?

                public var deltas: GetNextResultToVerifyResponseBody.Data.Dialogues.Dialogue.Deltas?

                public var emotionValue: Int32?

                public var end: Int64?

                public var hourMinSec: String?

                public var identity: String?

                public var incorrectWords: Int32?

                public var role: String?

                public var silenceDuration: Int32?

                public var sourceRole: String?

                public var sourceWords: String?

                public var speechRate: Int32?

                public var words: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.deltas?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.begin != nil {
                        map["Begin"] = self.begin!
                    }
                    if self.beginTime != nil {
                        map["BeginTime"] = self.beginTime!
                    }
                    if self.deltas != nil {
                        map["Deltas"] = self.deltas?.toMap()
                    }
                    if self.emotionValue != nil {
                        map["EmotionValue"] = self.emotionValue!
                    }
                    if self.end != nil {
                        map["End"] = self.end!
                    }
                    if self.hourMinSec != nil {
                        map["HourMinSec"] = self.hourMinSec!
                    }
                    if self.identity != nil {
                        map["Identity"] = self.identity!
                    }
                    if self.incorrectWords != nil {
                        map["IncorrectWords"] = self.incorrectWords!
                    }
                    if self.role != nil {
                        map["Role"] = self.role!
                    }
                    if self.silenceDuration != nil {
                        map["SilenceDuration"] = self.silenceDuration!
                    }
                    if self.sourceRole != nil {
                        map["SourceRole"] = self.sourceRole!
                    }
                    if self.sourceWords != nil {
                        map["SourceWords"] = self.sourceWords!
                    }
                    if self.speechRate != nil {
                        map["SpeechRate"] = self.speechRate!
                    }
                    if self.words != nil {
                        map["Words"] = self.words!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Begin"] as? Int64 {
                        self.begin = value
                    }
                    if let value = dict["BeginTime"] as? String {
                        self.beginTime = value
                    }
                    if let value = dict["Deltas"] as? [String: Any?] {
                        var model = GetNextResultToVerifyResponseBody.Data.Dialogues.Dialogue.Deltas()
                        model.fromMap(value)
                        self.deltas = model
                    }
                    if let value = dict["EmotionValue"] as? Int32 {
                        self.emotionValue = value
                    }
                    if let value = dict["End"] as? Int64 {
                        self.end = value
                    }
                    if let value = dict["HourMinSec"] as? String {
                        self.hourMinSec = value
                    }
                    if let value = dict["Identity"] as? String {
                        self.identity = value
                    }
                    if let value = dict["IncorrectWords"] as? Int32 {
                        self.incorrectWords = value
                    }
                    if let value = dict["Role"] as? String {
                        self.role = value
                    }
                    if let value = dict["SilenceDuration"] as? Int32 {
                        self.silenceDuration = value
                    }
                    if let value = dict["SourceRole"] as? String {
                        self.sourceRole = value
                    }
                    if let value = dict["SourceWords"] as? String {
                        self.sourceWords = value
                    }
                    if let value = dict["SpeechRate"] as? Int32 {
                        self.speechRate = value
                    }
                    if let value = dict["Words"] as? String {
                        self.words = value
                    }
                }
            }
            public var dialogue: [GetNextResultToVerifyResponseBody.Data.Dialogues.Dialogue]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.dialogue != nil {
                    var tmp : [Any] = []
                    for k in self.dialogue! {
                        tmp.append(k.toMap())
                    }
                    map["Dialogue"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Dialogue"] as? [Any?] {
                    var tmp : [GetNextResultToVerifyResponseBody.Data.Dialogues.Dialogue] = []
                    for v in value {
                        if v != nil {
                            var model = GetNextResultToVerifyResponseBody.Data.Dialogues.Dialogue()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.dialogue = tmp
                }
            }
        }
        public var audioScheme: String?

        public var audioURL: String?

        public var dialogues: GetNextResultToVerifyResponseBody.Data.Dialogues?

        public var duration: Int32?

        public var fileId: String?

        public var fileName: String?

        public var incorrectWords: Int32?

        public var index: Int32?

        public var precision: Double?

        public var status: Int32?

        public var totalCount: Int32?

        public var updateTime: String?

        public var verified: Bool?

        public var verifiedCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.dialogues?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.audioScheme != nil {
                map["AudioScheme"] = self.audioScheme!
            }
            if self.audioURL != nil {
                map["AudioURL"] = self.audioURL!
            }
            if self.dialogues != nil {
                map["Dialogues"] = self.dialogues?.toMap()
            }
            if self.duration != nil {
                map["Duration"] = self.duration!
            }
            if self.fileId != nil {
                map["FileId"] = self.fileId!
            }
            if self.fileName != nil {
                map["FileName"] = self.fileName!
            }
            if self.incorrectWords != nil {
                map["IncorrectWords"] = self.incorrectWords!
            }
            if self.index != nil {
                map["Index"] = self.index!
            }
            if self.precision != nil {
                map["Precision"] = self.precision!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            if self.updateTime != nil {
                map["UpdateTime"] = self.updateTime!
            }
            if self.verified != nil {
                map["Verified"] = self.verified!
            }
            if self.verifiedCount != nil {
                map["VerifiedCount"] = self.verifiedCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AudioScheme"] as? String {
                self.audioScheme = value
            }
            if let value = dict["AudioURL"] as? String {
                self.audioURL = value
            }
            if let value = dict["Dialogues"] as? [String: Any?] {
                var model = GetNextResultToVerifyResponseBody.Data.Dialogues()
                model.fromMap(value)
                self.dialogues = model
            }
            if let value = dict["Duration"] as? Int32 {
                self.duration = value
            }
            if let value = dict["FileId"] as? String {
                self.fileId = value
            }
            if let value = dict["FileName"] as? String {
                self.fileName = value
            }
            if let value = dict["IncorrectWords"] as? Int32 {
                self.incorrectWords = value
            }
            if let value = dict["Index"] as? Int32 {
                self.index = value
            }
            if let value = dict["Precision"] as? Double {
                self.precision = value
            }
            if let value = dict["Status"] as? Int32 {
                self.status = value
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
            if let value = dict["UpdateTime"] as? String {
                self.updateTime = value
            }
            if let value = dict["Verified"] as? Bool {
                self.verified = value
            }
            if let value = dict["VerifiedCount"] as? Int32 {
                self.verifiedCount = value
            }
        }
    }
    public var code: String?

    public var data: GetNextResultToVerifyResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetNextResultToVerifyResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetNextResultToVerifyResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetNextResultToVerifyResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetNextResultToVerifyResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetPrecisionTaskRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var jsonStr: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.jsonStr != nil {
            map["JsonStr"] = self.jsonStr!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["JsonStr"] as? String {
            self.jsonStr = value
        }
    }
}

public class GetPrecisionTaskResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Precisions : Tea.TeaModel {
            public class Precision : Tea.TeaModel {
                public var modelId: Int64?

                public var modelName: String?

                public var precision: Double?

                public var status: Int32?

                public var taskId: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.modelId != nil {
                        map["ModelId"] = self.modelId!
                    }
                    if self.modelName != nil {
                        map["ModelName"] = self.modelName!
                    }
                    if self.precision != nil {
                        map["Precision"] = self.precision!
                    }
                    if self.status != nil {
                        map["Status"] = self.status!
                    }
                    if self.taskId != nil {
                        map["TaskId"] = self.taskId!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["ModelId"] as? Int64 {
                        self.modelId = value
                    }
                    if let value = dict["ModelName"] as? String {
                        self.modelName = value
                    }
                    if let value = dict["Precision"] as? Double {
                        self.precision = value
                    }
                    if let value = dict["Status"] as? Int32 {
                        self.status = value
                    }
                    if let value = dict["TaskId"] as? String {
                        self.taskId = value
                    }
                }
            }
            public var precision: [GetPrecisionTaskResponseBody.Data.Precisions.Precision]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.precision != nil {
                    var tmp : [Any] = []
                    for k in self.precision! {
                        tmp.append(k.toMap())
                    }
                    map["Precision"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Precision"] as? [Any?] {
                    var tmp : [GetPrecisionTaskResponseBody.Data.Precisions.Precision] = []
                    for v in value {
                        if v != nil {
                            var model = GetPrecisionTaskResponseBody.Data.Precisions.Precision()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.precision = tmp
                }
            }
        }
        public var dataSetId: Int64?

        public var dataSetName: String?

        public var duration: Int32?

        public var incorrectWords: Int32?

        public var name: String?

        public var precisions: GetPrecisionTaskResponseBody.Data.Precisions?

        public var source: Int32?

        public var status: Int32?

        public var taskId: String?

        public var totalCount: Int32?

        public var updateTime: String?

        public var verifiedCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.precisions?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.dataSetId != nil {
                map["DataSetId"] = self.dataSetId!
            }
            if self.dataSetName != nil {
                map["DataSetName"] = self.dataSetName!
            }
            if self.duration != nil {
                map["Duration"] = self.duration!
            }
            if self.incorrectWords != nil {
                map["IncorrectWords"] = self.incorrectWords!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.precisions != nil {
                map["Precisions"] = self.precisions?.toMap()
            }
            if self.source != nil {
                map["Source"] = self.source!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            if self.updateTime != nil {
                map["UpdateTime"] = self.updateTime!
            }
            if self.verifiedCount != nil {
                map["VerifiedCount"] = self.verifiedCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DataSetId"] as? Int64 {
                self.dataSetId = value
            }
            if let value = dict["DataSetName"] as? String {
                self.dataSetName = value
            }
            if let value = dict["Duration"] as? Int32 {
                self.duration = value
            }
            if let value = dict["IncorrectWords"] as? Int32 {
                self.incorrectWords = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["Precisions"] as? [String: Any?] {
                var model = GetPrecisionTaskResponseBody.Data.Precisions()
                model.fromMap(value)
                self.precisions = model
            }
            if let value = dict["Source"] as? Int32 {
                self.source = value
            }
            if let value = dict["Status"] as? Int32 {
                self.status = value
            }
            if let value = dict["TaskId"] as? String {
                self.taskId = value
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
            if let value = dict["UpdateTime"] as? String {
                self.updateTime = value
            }
            if let value = dict["VerifiedCount"] as? Int32 {
                self.verifiedCount = value
            }
        }
    }
    public var code: String?

    public var data: GetPrecisionTaskResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetPrecisionTaskResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetPrecisionTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetPrecisionTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetPrecisionTaskResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetQualityCheckSchemeRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var jsonStr: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.jsonStr != nil {
            map["jsonStr"] = self.jsonStr!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["jsonStr"] as? String {
            self.jsonStr = value
        }
    }
}

public class GetQualityCheckSchemeResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class SchemeCheckTypeList : Tea.TeaModel {
            public var checkName: String?

            public var checkType: Int64?

            public var enable: Int32?

            public var schemeId: Int64?

            public var score: Int32?

            public var sourceScore: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.checkName != nil {
                    map["CheckName"] = self.checkName!
                }
                if self.checkType != nil {
                    map["CheckType"] = self.checkType!
                }
                if self.enable != nil {
                    map["Enable"] = self.enable!
                }
                if self.schemeId != nil {
                    map["SchemeId"] = self.schemeId!
                }
                if self.score != nil {
                    map["Score"] = self.score!
                }
                if self.sourceScore != nil {
                    map["SourceScore"] = self.sourceScore!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CheckName"] as? String {
                    self.checkName = value
                }
                if let value = dict["CheckType"] as? Int64 {
                    self.checkType = value
                }
                if let value = dict["Enable"] as? Int32 {
                    self.enable = value
                }
                if let value = dict["SchemeId"] as? Int64 {
                    self.schemeId = value
                }
                if let value = dict["Score"] as? Int32 {
                    self.score = value
                }
                if let value = dict["SourceScore"] as? Int32 {
                    self.sourceScore = value
                }
            }
        }
        public var createTime: String?

        public var createUserName: String?

        public var dataType: Int32?

        public var description_: String?

        public var initScore: String?

        public var name: String?

        public var ruleIds: [String]?

        public var ruleList: [RulesInfo]?

        public var schemeCheckTypeList: [GetQualityCheckSchemeResponseBody.Data.SchemeCheckTypeList]?

        public var schemeId: Int64?

        public var schemeTemplateId: Int64?

        public var status: Int32?

        public var templateType: Int32?

        public var type: Int32?

        public var updateTime: String?

        public var updateUserName: String?

        public var version: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.createUserName != nil {
                map["CreateUserName"] = self.createUserName!
            }
            if self.dataType != nil {
                map["DataType"] = self.dataType!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.initScore != nil {
                map["InitScore"] = self.initScore!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.ruleIds != nil {
                map["RuleIds"] = self.ruleIds!
            }
            if self.ruleList != nil {
                var tmp : [Any] = []
                for k in self.ruleList! {
                    tmp.append(k.toMap())
                }
                map["RuleList"] = tmp
            }
            if self.schemeCheckTypeList != nil {
                var tmp : [Any] = []
                for k in self.schemeCheckTypeList! {
                    tmp.append(k.toMap())
                }
                map["SchemeCheckTypeList"] = tmp
            }
            if self.schemeId != nil {
                map["SchemeId"] = self.schemeId!
            }
            if self.schemeTemplateId != nil {
                map["SchemeTemplateId"] = self.schemeTemplateId!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.templateType != nil {
                map["TemplateType"] = self.templateType!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            if self.updateTime != nil {
                map["UpdateTime"] = self.updateTime!
            }
            if self.updateUserName != nil {
                map["UpdateUserName"] = self.updateUserName!
            }
            if self.version != nil {
                map["Version"] = self.version!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["CreateUserName"] as? String {
                self.createUserName = value
            }
            if let value = dict["DataType"] as? Int32 {
                self.dataType = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["InitScore"] as? String {
                self.initScore = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["RuleIds"] as? [String] {
                self.ruleIds = value
            }
            if let value = dict["RuleList"] as? [Any?] {
                var tmp : [RulesInfo] = []
                for v in value {
                    if v != nil {
                        var model = RulesInfo()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.ruleList = tmp
            }
            if let value = dict["SchemeCheckTypeList"] as? [Any?] {
                var tmp : [GetQualityCheckSchemeResponseBody.Data.SchemeCheckTypeList] = []
                for v in value {
                    if v != nil {
                        var model = GetQualityCheckSchemeResponseBody.Data.SchemeCheckTypeList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.schemeCheckTypeList = tmp
            }
            if let value = dict["SchemeId"] as? Int64 {
                self.schemeId = value
            }
            if let value = dict["SchemeTemplateId"] as? Int64 {
                self.schemeTemplateId = value
            }
            if let value = dict["Status"] as? Int32 {
                self.status = value
            }
            if let value = dict["TemplateType"] as? Int32 {
                self.templateType = value
            }
            if let value = dict["Type"] as? Int32 {
                self.type = value
            }
            if let value = dict["UpdateTime"] as? String {
                self.updateTime = value
            }
            if let value = dict["UpdateUserName"] as? String {
                self.updateUserName = value
            }
            if let value = dict["Version"] as? Int64 {
                self.version = value
            }
        }
    }
    public var code: String?

    public var data: GetQualityCheckSchemeResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var messages: [String]?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.messages != nil {
            map["Messages"] = self.messages!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetQualityCheckSchemeResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Messages"] as? [String] {
            self.messages = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetQualityCheckSchemeResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetQualityCheckSchemeResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetQualityCheckSchemeResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetResultRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var jsonStr: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.jsonStr != nil {
            map["JsonStr"] = self.jsonStr!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["JsonStr"] as? String {
            self.jsonStr = value
        }
    }
}

public class GetResultResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class ResultInfo : Tea.TeaModel {
            public class Agent : Tea.TeaModel {
                public var id: String?

                public var name: String?

                public var skillGroup: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.id != nil {
                        map["Id"] = self.id!
                    }
                    if self.name != nil {
                        map["Name"] = self.name!
                    }
                    if self.skillGroup != nil {
                        map["SkillGroup"] = self.skillGroup!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Id"] as? String {
                        self.id = value
                    }
                    if let value = dict["Name"] as? String {
                        self.name = value
                    }
                    if let value = dict["SkillGroup"] as? String {
                        self.skillGroup = value
                    }
                }
            }
            public class AsrResult : Tea.TeaModel {
                public class AsrResult : Tea.TeaModel {
                    public var begin: Int64?

                    public var emotionValue: Int32?

                    public var end: Int64?

                    public var identity: String?

                    public var role: String?

                    public var speechRate: Int32?

                    public var words: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.begin != nil {
                            map["Begin"] = self.begin!
                        }
                        if self.emotionValue != nil {
                            map["EmotionValue"] = self.emotionValue!
                        }
                        if self.end != nil {
                            map["End"] = self.end!
                        }
                        if self.identity != nil {
                            map["Identity"] = self.identity!
                        }
                        if self.role != nil {
                            map["Role"] = self.role!
                        }
                        if self.speechRate != nil {
                            map["SpeechRate"] = self.speechRate!
                        }
                        if self.words != nil {
                            map["Words"] = self.words!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Begin"] as? Int64 {
                            self.begin = value
                        }
                        if let value = dict["EmotionValue"] as? Int32 {
                            self.emotionValue = value
                        }
                        if let value = dict["End"] as? Int64 {
                            self.end = value
                        }
                        if let value = dict["Identity"] as? String {
                            self.identity = value
                        }
                        if let value = dict["Role"] as? String {
                            self.role = value
                        }
                        if let value = dict["SpeechRate"] as? Int32 {
                            self.speechRate = value
                        }
                        if let value = dict["Words"] as? String {
                            self.words = value
                        }
                    }
                }
                public var asrResult: [GetResultResponseBody.Data.ResultInfo.AsrResult.AsrResult]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.asrResult != nil {
                        var tmp : [Any] = []
                        for k in self.asrResult! {
                            tmp.append(k.toMap())
                        }
                        map["AsrResult"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["AsrResult"] as? [Any?] {
                        var tmp : [GetResultResponseBody.Data.ResultInfo.AsrResult.AsrResult] = []
                        for v in value {
                            if v != nil {
                                var model = GetResultResponseBody.Data.ResultInfo.AsrResult.AsrResult()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.asrResult = tmp
                    }
                }
            }
            public class HitResult : Tea.TeaModel {
                public class HitResult : Tea.TeaModel {
                    public class Conditions : Tea.TeaModel {
                        public class Conditions : Tea.TeaModel {
                            public class CheckRange : Tea.TeaModel {
                                public class Anchor : Tea.TeaModel {
                                    public var cid: String?

                                    public var hitTime: Int32?

                                    public var location: String?

                                    public override init() {
                                        super.init()
                                    }

                                    public init(_ dict: [String: Any]) {
                                        super.init()
                                        self.fromMap(dict)
                                    }

                                    public override func validate() throws -> Void {
                                    }

                                    public override func toMap() -> [String : Any] {
                                        var map = super.toMap()
                                        if self.cid != nil {
                                            map["Cid"] = self.cid!
                                        }
                                        if self.hitTime != nil {
                                            map["Hit_time"] = self.hitTime!
                                        }
                                        if self.location != nil {
                                            map["Location"] = self.location!
                                        }
                                        return map
                                    }

                                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                        guard let dict else { return }
                                        if let value = dict["Cid"] as? String {
                                            self.cid = value
                                        }
                                        if let value = dict["Hit_time"] as? Int32 {
                                            self.hitTime = value
                                        }
                                        if let value = dict["Location"] as? String {
                                            self.location = value
                                        }
                                    }
                                }
                                public class Range : Tea.TeaModel {
                                    public var from: Int32?

                                    public var to: Int32?

                                    public override init() {
                                        super.init()
                                    }

                                    public init(_ dict: [String: Any]) {
                                        super.init()
                                        self.fromMap(dict)
                                    }

                                    public override func validate() throws -> Void {
                                    }

                                    public override func toMap() -> [String : Any] {
                                        var map = super.toMap()
                                        if self.from != nil {
                                            map["From"] = self.from!
                                        }
                                        if self.to != nil {
                                            map["To"] = self.to!
                                        }
                                        return map
                                    }

                                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                        guard let dict else { return }
                                        if let value = dict["From"] as? Int32 {
                                            self.from = value
                                        }
                                        if let value = dict["To"] as? Int32 {
                                            self.to = value
                                        }
                                    }
                                }
                                public class TimeRange : Tea.TeaModel {
                                    public var from: Int64?

                                    public var to: Int64?

                                    public override init() {
                                        super.init()
                                    }

                                    public init(_ dict: [String: Any]) {
                                        super.init()
                                        self.fromMap(dict)
                                    }

                                    public override func validate() throws -> Void {
                                    }

                                    public override func toMap() -> [String : Any] {
                                        var map = super.toMap()
                                        if self.from != nil {
                                            map["From"] = self.from!
                                        }
                                        if self.to != nil {
                                            map["To"] = self.to!
                                        }
                                        return map
                                    }

                                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                        guard let dict else { return }
                                        if let value = dict["From"] as? Int64 {
                                            self.from = value
                                        }
                                        if let value = dict["To"] as? Int64 {
                                            self.to = value
                                        }
                                    }
                                }
                                public var absolute: Bool?

                                public var allSentencesSatisfy: Bool?

                                public var anchor: GetResultResponseBody.Data.ResultInfo.HitResult.HitResult.Conditions.Conditions.CheckRange.Anchor?

                                public var range: GetResultResponseBody.Data.ResultInfo.HitResult.HitResult.Conditions.Conditions.CheckRange.Range?

                                public var role: String?

                                public var roleId: Int32?

                                public var timeRange: GetResultResponseBody.Data.ResultInfo.HitResult.HitResult.Conditions.Conditions.CheckRange.TimeRange?

                                public override init() {
                                    super.init()
                                }

                                public init(_ dict: [String: Any]) {
                                    super.init()
                                    self.fromMap(dict)
                                }

                                public override func validate() throws -> Void {
                                    try self.anchor?.validate()
                                    try self.range?.validate()
                                    try self.timeRange?.validate()
                                }

                                public override func toMap() -> [String : Any] {
                                    var map = super.toMap()
                                    if self.absolute != nil {
                                        map["Absolute"] = self.absolute!
                                    }
                                    if self.allSentencesSatisfy != nil {
                                        map["AllSentencesSatisfy"] = self.allSentencesSatisfy!
                                    }
                                    if self.anchor != nil {
                                        map["Anchor"] = self.anchor?.toMap()
                                    }
                                    if self.range != nil {
                                        map["Range"] = self.range?.toMap()
                                    }
                                    if self.role != nil {
                                        map["Role"] = self.role!
                                    }
                                    if self.roleId != nil {
                                        map["RoleId"] = self.roleId!
                                    }
                                    if self.timeRange != nil {
                                        map["TimeRange"] = self.timeRange?.toMap()
                                    }
                                    return map
                                }

                                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                    guard let dict else { return }
                                    if let value = dict["Absolute"] as? Bool {
                                        self.absolute = value
                                    }
                                    if let value = dict["AllSentencesSatisfy"] as? Bool {
                                        self.allSentencesSatisfy = value
                                    }
                                    if let value = dict["Anchor"] as? [String: Any?] {
                                        var model = GetResultResponseBody.Data.ResultInfo.HitResult.HitResult.Conditions.Conditions.CheckRange.Anchor()
                                        model.fromMap(value)
                                        self.anchor = model
                                    }
                                    if let value = dict["Range"] as? [String: Any?] {
                                        var model = GetResultResponseBody.Data.ResultInfo.HitResult.HitResult.Conditions.Conditions.CheckRange.Range()
                                        model.fromMap(value)
                                        self.range = model
                                    }
                                    if let value = dict["Role"] as? String {
                                        self.role = value
                                    }
                                    if let value = dict["RoleId"] as? Int32 {
                                        self.roleId = value
                                    }
                                    if let value = dict["TimeRange"] as? [String: Any?] {
                                        var model = GetResultResponseBody.Data.ResultInfo.HitResult.HitResult.Conditions.Conditions.CheckRange.TimeRange()
                                        model.fromMap(value)
                                        self.timeRange = model
                                    }
                                }
                            }
                            public class Operators : Tea.TeaModel {
                                public class Operator_ : Tea.TeaModel {
                                    public class Param : Tea.TeaModel {
                                        public class Excludes : Tea.TeaModel {
                                            public var exclude: [String]?

                                            public override init() {
                                                super.init()
                                            }

                                            public init(_ dict: [String: Any]) {
                                                super.init()
                                                self.fromMap(dict)
                                            }

                                            public override func validate() throws -> Void {
                                            }

                                            public override func toMap() -> [String : Any] {
                                                var map = super.toMap()
                                                if self.exclude != nil {
                                                    map["Exclude"] = self.exclude!
                                                }
                                                return map
                                            }

                                            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                                guard let dict else { return }
                                                if let value = dict["Exclude"] as? [String] {
                                                    self.exclude = value
                                                }
                                            }
                                        }
                                        public class FlowNodePrerequisiteParam : Tea.TeaModel {
                                            public var nodeId: Int64?

                                            public var nodeMatchStatus: Int32?

                                            public var nodeName: String?

                                            public override init() {
                                                super.init()
                                            }

                                            public init(_ dict: [String: Any]) {
                                                super.init()
                                                self.fromMap(dict)
                                            }

                                            public override func validate() throws -> Void {
                                            }

                                            public override func toMap() -> [String : Any] {
                                                var map = super.toMap()
                                                if self.nodeId != nil {
                                                    map["NodeId"] = self.nodeId!
                                                }
                                                if self.nodeMatchStatus != nil {
                                                    map["NodeMatchStatus"] = self.nodeMatchStatus!
                                                }
                                                if self.nodeName != nil {
                                                    map["NodeName"] = self.nodeName!
                                                }
                                                return map
                                            }

                                            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                                guard let dict else { return }
                                                if let value = dict["NodeId"] as? Int64 {
                                                    self.nodeId = value
                                                }
                                                if let value = dict["NodeMatchStatus"] as? Int32 {
                                                    self.nodeMatchStatus = value
                                                }
                                                if let value = dict["NodeName"] as? String {
                                                    self.nodeName = value
                                                }
                                            }
                                        }
                                        public class IntentModelCheckParm : Tea.TeaModel {
                                            public class Intents : Tea.TeaModel {
                                                public class Intent : Tea.TeaModel {
                                                    public var id: Int64?

                                                    public var name: String?

                                                    public override init() {
                                                        super.init()
                                                    }

                                                    public init(_ dict: [String: Any]) {
                                                        super.init()
                                                        self.fromMap(dict)
                                                    }

                                                    public override func validate() throws -> Void {
                                                    }

                                                    public override func toMap() -> [String : Any] {
                                                        var map = super.toMap()
                                                        if self.id != nil {
                                                            map["Id"] = self.id!
                                                        }
                                                        if self.name != nil {
                                                            map["Name"] = self.name!
                                                        }
                                                        return map
                                                    }

                                                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                                        guard let dict else { return }
                                                        if let value = dict["Id"] as? Int64 {
                                                            self.id = value
                                                        }
                                                        if let value = dict["Name"] as? String {
                                                            self.name = value
                                                        }
                                                    }
                                                }
                                                public var intent: [GetResultResponseBody.Data.ResultInfo.HitResult.HitResult.Conditions.Conditions.Operators.Operator_.Param.IntentModelCheckParm.Intents.Intent]?

                                                public override init() {
                                                    super.init()
                                                }

                                                public init(_ dict: [String: Any]) {
                                                    super.init()
                                                    self.fromMap(dict)
                                                }

                                                public override func validate() throws -> Void {
                                                }

                                                public override func toMap() -> [String : Any] {
                                                    var map = super.toMap()
                                                    if self.intent != nil {
                                                        var tmp : [Any] = []
                                                        for k in self.intent! {
                                                            tmp.append(k.toMap())
                                                        }
                                                        map["Intent"] = tmp
                                                    }
                                                    return map
                                                }

                                                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                                    guard let dict else { return }
                                                    if let value = dict["Intent"] as? [Any?] {
                                                        var tmp : [GetResultResponseBody.Data.ResultInfo.HitResult.HitResult.Conditions.Conditions.Operators.Operator_.Param.IntentModelCheckParm.Intents.Intent] = []
                                                        for v in value {
                                                            if v != nil {
                                                                var model = GetResultResponseBody.Data.ResultInfo.HitResult.HitResult.Conditions.Conditions.Operators.Operator_.Param.IntentModelCheckParm.Intents.Intent()
                                                                if v != nil {
                                                                    model.fromMap(v as? [String: Any?])
                                                                }
                                                                tmp.append(model)
                                                            }
                                                        }
                                                        self.intent = tmp
                                                    }
                                                }
                                            }
                                            public var intents: GetResultResponseBody.Data.ResultInfo.HitResult.HitResult.Conditions.Conditions.Operators.Operator_.Param.IntentModelCheckParm.Intents?

                                            public var modelScene: String?

                                            public override init() {
                                                super.init()
                                            }

                                            public init(_ dict: [String: Any]) {
                                                super.init()
                                                self.fromMap(dict)
                                            }

                                            public override func validate() throws -> Void {
                                                try self.intents?.validate()
                                            }

                                            public override func toMap() -> [String : Any] {
                                                var map = super.toMap()
                                                if self.intents != nil {
                                                    map["Intents"] = self.intents?.toMap()
                                                }
                                                if self.modelScene != nil {
                                                    map["ModelScene"] = self.modelScene!
                                                }
                                                return map
                                            }

                                            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                                guard let dict else { return }
                                                if let value = dict["Intents"] as? [String: Any?] {
                                                    var model = GetResultResponseBody.Data.ResultInfo.HitResult.HitResult.Conditions.Conditions.Operators.Operator_.Param.IntentModelCheckParm.Intents()
                                                    model.fromMap(value)
                                                    self.intents = model
                                                }
                                                if let value = dict["ModelScene"] as? String {
                                                    self.modelScene = value
                                                }
                                            }
                                        }
                                        public class Keywords : Tea.TeaModel {
                                            public var keyword: [String]?

                                            public override init() {
                                                super.init()
                                            }

                                            public init(_ dict: [String: Any]) {
                                                super.init()
                                                self.fromMap(dict)
                                            }

                                            public override func validate() throws -> Void {
                                            }

                                            public override func toMap() -> [String : Any] {
                                                var map = super.toMap()
                                                if self.keyword != nil {
                                                    map["Keyword"] = self.keyword!
                                                }
                                                return map
                                            }

                                            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                                guard let dict else { return }
                                                if let value = dict["Keyword"] as? [String] {
                                                    self.keyword = value
                                                }
                                            }
                                        }
                                        public var average: Bool?

                                        public var beginType: String?

                                        public var caseSensitive: Bool?

                                        public var checkFirstSentence: Bool?

                                        public var checkType: Int32?

                                        public var compareOperator: String?

                                        public var contextChatMatch: Bool?

                                        public var delayTime: Int32?

                                        public var endType: String?

                                        public var excludes: GetResultResponseBody.Data.ResultInfo.HitResult.HitResult.Conditions.Conditions.Operators.Operator_.Param.Excludes?

                                        public var flowNodePrerequisiteParam: GetResultResponseBody.Data.ResultInfo.HitResult.HitResult.Conditions.Conditions.Operators.Operator_.Param.FlowNodePrerequisiteParam?

                                        public var from: Int32?

                                        public var fromEnd: Bool?

                                        public var hitTime: Int32?

                                        public var inSentence: Bool?

                                        public var intentModelCheckParm: GetResultResponseBody.Data.ResultInfo.HitResult.HitResult.Conditions.Conditions.Operators.Operator_.Param.IntentModelCheckParm?

                                        public var interval: Int32?

                                        public var intervalEnd: Int32?

                                        public var keywordExtension: Int32?

                                        public var keywordMatchSize: Int32?

                                        public var keywords: GetResultResponseBody.Data.ResultInfo.HitResult.HitResult.Conditions.Conditions.Operators.Operator_.Param.Keywords?

                                        public var maxEmotionChangeValue: Int32?

                                        public var minWordSize: Int32?

                                        public var nearDialogue: Bool?

                                        public var notRegex: String?

                                        public var phrase: String?

                                        public var regex: String?

                                        public var target: Int32?

                                        public var threshold: Double?

                                        public override init() {
                                            super.init()
                                        }

                                        public init(_ dict: [String: Any]) {
                                            super.init()
                                            self.fromMap(dict)
                                        }

                                        public override func validate() throws -> Void {
                                            try self.excludes?.validate()
                                            try self.flowNodePrerequisiteParam?.validate()
                                            try self.intentModelCheckParm?.validate()
                                            try self.keywords?.validate()
                                        }

                                        public override func toMap() -> [String : Any] {
                                            var map = super.toMap()
                                            if self.average != nil {
                                                map["Average"] = self.average!
                                            }
                                            if self.beginType != nil {
                                                map["BeginType"] = self.beginType!
                                            }
                                            if self.caseSensitive != nil {
                                                map["Case_sensitive"] = self.caseSensitive!
                                            }
                                            if self.checkFirstSentence != nil {
                                                map["CheckFirstSentence"] = self.checkFirstSentence!
                                            }
                                            if self.checkType != nil {
                                                map["CheckType"] = self.checkType!
                                            }
                                            if self.compareOperator != nil {
                                                map["CompareOperator"] = self.compareOperator!
                                            }
                                            if self.contextChatMatch != nil {
                                                map["ContextChatMatch"] = self.contextChatMatch!
                                            }
                                            if self.delayTime != nil {
                                                map["DelayTime"] = self.delayTime!
                                            }
                                            if self.endType != nil {
                                                map["EndType"] = self.endType!
                                            }
                                            if self.excludes != nil {
                                                map["Excludes"] = self.excludes?.toMap()
                                            }
                                            if self.flowNodePrerequisiteParam != nil {
                                                map["FlowNodePrerequisiteParam"] = self.flowNodePrerequisiteParam?.toMap()
                                            }
                                            if self.from != nil {
                                                map["From"] = self.from!
                                            }
                                            if self.fromEnd != nil {
                                                map["From_end"] = self.fromEnd!
                                            }
                                            if self.hitTime != nil {
                                                map["Hit_time"] = self.hitTime!
                                            }
                                            if self.inSentence != nil {
                                                map["In_sentence"] = self.inSentence!
                                            }
                                            if self.intentModelCheckParm != nil {
                                                map["IntentModelCheckParm"] = self.intentModelCheckParm?.toMap()
                                            }
                                            if self.interval != nil {
                                                map["Interval"] = self.interval!
                                            }
                                            if self.intervalEnd != nil {
                                                map["IntervalEnd"] = self.intervalEnd!
                                            }
                                            if self.keywordExtension != nil {
                                                map["KeywordExtension"] = self.keywordExtension!
                                            }
                                            if self.keywordMatchSize != nil {
                                                map["KeywordMatchSize"] = self.keywordMatchSize!
                                            }
                                            if self.keywords != nil {
                                                map["Keywords"] = self.keywords?.toMap()
                                            }
                                            if self.maxEmotionChangeValue != nil {
                                                map["MaxEmotionChangeValue"] = self.maxEmotionChangeValue!
                                            }
                                            if self.minWordSize != nil {
                                                map["MinWordSize"] = self.minWordSize!
                                            }
                                            if self.nearDialogue != nil {
                                                map["Near_dialogue"] = self.nearDialogue!
                                            }
                                            if self.notRegex != nil {
                                                map["NotRegex"] = self.notRegex!
                                            }
                                            if self.phrase != nil {
                                                map["Phrase"] = self.phrase!
                                            }
                                            if self.regex != nil {
                                                map["Regex"] = self.regex!
                                            }
                                            if self.target != nil {
                                                map["Target"] = self.target!
                                            }
                                            if self.threshold != nil {
                                                map["Threshold"] = self.threshold!
                                            }
                                            return map
                                        }

                                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                            guard let dict else { return }
                                            if let value = dict["Average"] as? Bool {
                                                self.average = value
                                            }
                                            if let value = dict["BeginType"] as? String {
                                                self.beginType = value
                                            }
                                            if let value = dict["Case_sensitive"] as? Bool {
                                                self.caseSensitive = value
                                            }
                                            if let value = dict["CheckFirstSentence"] as? Bool {
                                                self.checkFirstSentence = value
                                            }
                                            if let value = dict["CheckType"] as? Int32 {
                                                self.checkType = value
                                            }
                                            if let value = dict["CompareOperator"] as? String {
                                                self.compareOperator = value
                                            }
                                            if let value = dict["ContextChatMatch"] as? Bool {
                                                self.contextChatMatch = value
                                            }
                                            if let value = dict["DelayTime"] as? Int32 {
                                                self.delayTime = value
                                            }
                                            if let value = dict["EndType"] as? String {
                                                self.endType = value
                                            }
                                            if let value = dict["Excludes"] as? [String: Any?] {
                                                var model = GetResultResponseBody.Data.ResultInfo.HitResult.HitResult.Conditions.Conditions.Operators.Operator_.Param.Excludes()
                                                model.fromMap(value)
                                                self.excludes = model
                                            }
                                            if let value = dict["FlowNodePrerequisiteParam"] as? [String: Any?] {
                                                var model = GetResultResponseBody.Data.ResultInfo.HitResult.HitResult.Conditions.Conditions.Operators.Operator_.Param.FlowNodePrerequisiteParam()
                                                model.fromMap(value)
                                                self.flowNodePrerequisiteParam = model
                                            }
                                            if let value = dict["From"] as? Int32 {
                                                self.from = value
                                            }
                                            if let value = dict["From_end"] as? Bool {
                                                self.fromEnd = value
                                            }
                                            if let value = dict["Hit_time"] as? Int32 {
                                                self.hitTime = value
                                            }
                                            if let value = dict["In_sentence"] as? Bool {
                                                self.inSentence = value
                                            }
                                            if let value = dict["IntentModelCheckParm"] as? [String: Any?] {
                                                var model = GetResultResponseBody.Data.ResultInfo.HitResult.HitResult.Conditions.Conditions.Operators.Operator_.Param.IntentModelCheckParm()
                                                model.fromMap(value)
                                                self.intentModelCheckParm = model
                                            }
                                            if let value = dict["Interval"] as? Int32 {
                                                self.interval = value
                                            }
                                            if let value = dict["IntervalEnd"] as? Int32 {
                                                self.intervalEnd = value
                                            }
                                            if let value = dict["KeywordExtension"] as? Int32 {
                                                self.keywordExtension = value
                                            }
                                            if let value = dict["KeywordMatchSize"] as? Int32 {
                                                self.keywordMatchSize = value
                                            }
                                            if let value = dict["Keywords"] as? [String: Any?] {
                                                var model = GetResultResponseBody.Data.ResultInfo.HitResult.HitResult.Conditions.Conditions.Operators.Operator_.Param.Keywords()
                                                model.fromMap(value)
                                                self.keywords = model
                                            }
                                            if let value = dict["MaxEmotionChangeValue"] as? Int32 {
                                                self.maxEmotionChangeValue = value
                                            }
                                            if let value = dict["MinWordSize"] as? Int32 {
                                                self.minWordSize = value
                                            }
                                            if let value = dict["Near_dialogue"] as? Bool {
                                                self.nearDialogue = value
                                            }
                                            if let value = dict["NotRegex"] as? String {
                                                self.notRegex = value
                                            }
                                            if let value = dict["Phrase"] as? String {
                                                self.phrase = value
                                            }
                                            if let value = dict["Regex"] as? String {
                                                self.regex = value
                                            }
                                            if let value = dict["Target"] as? Int32 {
                                                self.target = value
                                            }
                                            if let value = dict["Threshold"] as? Double {
                                                self.threshold = value
                                            }
                                        }
                                    }
                                    public var id: Int64?

                                    public var name: String?

                                    public var oid: String?

                                    public var param: GetResultResponseBody.Data.ResultInfo.HitResult.HitResult.Conditions.Conditions.Operators.Operator_.Param?

                                    public var type: String?

                                    public override init() {
                                        super.init()
                                    }

                                    public init(_ dict: [String: Any]) {
                                        super.init()
                                        self.fromMap(dict)
                                    }

                                    public override func validate() throws -> Void {
                                        try self.param?.validate()
                                    }

                                    public override func toMap() -> [String : Any] {
                                        var map = super.toMap()
                                        if self.id != nil {
                                            map["Id"] = self.id!
                                        }
                                        if self.name != nil {
                                            map["Name"] = self.name!
                                        }
                                        if self.oid != nil {
                                            map["Oid"] = self.oid!
                                        }
                                        if self.param != nil {
                                            map["Param"] = self.param?.toMap()
                                        }
                                        if self.type != nil {
                                            map["Type"] = self.type!
                                        }
                                        return map
                                    }

                                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                        guard let dict else { return }
                                        if let value = dict["Id"] as? Int64 {
                                            self.id = value
                                        }
                                        if let value = dict["Name"] as? String {
                                            self.name = value
                                        }
                                        if let value = dict["Oid"] as? String {
                                            self.oid = value
                                        }
                                        if let value = dict["Param"] as? [String: Any?] {
                                            var model = GetResultResponseBody.Data.ResultInfo.HitResult.HitResult.Conditions.Conditions.Operators.Operator_.Param()
                                            model.fromMap(value)
                                            self.param = model
                                        }
                                        if let value = dict["Type"] as? String {
                                            self.type = value
                                        }
                                    }
                                }
                                public var operator_: [GetResultResponseBody.Data.ResultInfo.HitResult.HitResult.Conditions.Conditions.Operators.Operator_]?

                                public override init() {
                                    super.init()
                                }

                                public init(_ dict: [String: Any]) {
                                    super.init()
                                    self.fromMap(dict)
                                }

                                public override func validate() throws -> Void {
                                }

                                public override func toMap() -> [String : Any] {
                                    var map = super.toMap()
                                    if self.operator_ != nil {
                                        var tmp : [Any] = []
                                        for k in self.operator_! {
                                            tmp.append(k.toMap())
                                        }
                                        map["Operator"] = tmp
                                    }
                                    return map
                                }

                                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                    guard let dict else { return }
                                    if let value = dict["Operator"] as? [Any?] {
                                        var tmp : [GetResultResponseBody.Data.ResultInfo.HitResult.HitResult.Conditions.Conditions.Operators.Operator_] = []
                                        for v in value {
                                            if v != nil {
                                                var model = GetResultResponseBody.Data.ResultInfo.HitResult.HitResult.Conditions.Conditions.Operators.Operator_()
                                                if v != nil {
                                                    model.fromMap(v as? [String: Any?])
                                                }
                                                tmp.append(model)
                                            }
                                        }
                                        self.operator_ = tmp
                                    }
                                }
                            }
                            public var checkRange: GetResultResponseBody.Data.ResultInfo.HitResult.HitResult.Conditions.Conditions.CheckRange?

                            public var cid: String?

                            public var exclusion: Int32?

                            public var id: Int64?

                            public var lambda: String?

                            public var operators: GetResultResponseBody.Data.ResultInfo.HitResult.HitResult.Conditions.Conditions.Operators?

                            public var rid: String?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                                try self.checkRange?.validate()
                                try self.operators?.validate()
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.checkRange != nil {
                                    map["Check_range"] = self.checkRange?.toMap()
                                }
                                if self.cid != nil {
                                    map["Cid"] = self.cid!
                                }
                                if self.exclusion != nil {
                                    map["Exclusion"] = self.exclusion!
                                }
                                if self.id != nil {
                                    map["Id"] = self.id!
                                }
                                if self.lambda != nil {
                                    map["Lambda"] = self.lambda!
                                }
                                if self.operators != nil {
                                    map["Operators"] = self.operators?.toMap()
                                }
                                if self.rid != nil {
                                    map["Rid"] = self.rid!
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                guard let dict else { return }
                                if let value = dict["Check_range"] as? [String: Any?] {
                                    var model = GetResultResponseBody.Data.ResultInfo.HitResult.HitResult.Conditions.Conditions.CheckRange()
                                    model.fromMap(value)
                                    self.checkRange = model
                                }
                                if let value = dict["Cid"] as? String {
                                    self.cid = value
                                }
                                if let value = dict["Exclusion"] as? Int32 {
                                    self.exclusion = value
                                }
                                if let value = dict["Id"] as? Int64 {
                                    self.id = value
                                }
                                if let value = dict["Lambda"] as? String {
                                    self.lambda = value
                                }
                                if let value = dict["Operators"] as? [String: Any?] {
                                    var model = GetResultResponseBody.Data.ResultInfo.HitResult.HitResult.Conditions.Conditions.Operators()
                                    model.fromMap(value)
                                    self.operators = model
                                }
                                if let value = dict["Rid"] as? String {
                                    self.rid = value
                                }
                            }
                        }
                        public var conditions: [GetResultResponseBody.Data.ResultInfo.HitResult.HitResult.Conditions.Conditions]?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.conditions != nil {
                                var tmp : [Any] = []
                                for k in self.conditions! {
                                    tmp.append(k.toMap())
                                }
                                map["Conditions"] = tmp
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Conditions"] as? [Any?] {
                                var tmp : [GetResultResponseBody.Data.ResultInfo.HitResult.HitResult.Conditions.Conditions] = []
                                for v in value {
                                    if v != nil {
                                        var model = GetResultResponseBody.Data.ResultInfo.HitResult.HitResult.Conditions.Conditions()
                                        if v != nil {
                                            model.fromMap(v as? [String: Any?])
                                        }
                                        tmp.append(model)
                                    }
                                }
                                self.conditions = tmp
                            }
                        }
                    }
                    public class Hits : Tea.TeaModel {
                        public class Hit : Tea.TeaModel {
                            public class Cid : Tea.TeaModel {
                                public var cid: [String]?

                                public override init() {
                                    super.init()
                                }

                                public init(_ dict: [String: Any]) {
                                    super.init()
                                    self.fromMap(dict)
                                }

                                public override func validate() throws -> Void {
                                }

                                public override func toMap() -> [String : Any] {
                                    var map = super.toMap()
                                    if self.cid != nil {
                                        map["Cid"] = self.cid!
                                    }
                                    return map
                                }

                                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                    guard let dict else { return }
                                    if let value = dict["Cid"] as? [String] {
                                        self.cid = value
                                    }
                                }
                            }
                            public class KeyWords : Tea.TeaModel {
                                public class KeyWord : Tea.TeaModel {
                                    public var cid: String?

                                    public var from: Int32?

                                    public var to: Int32?

                                    public var val: String?

                                    public override init() {
                                        super.init()
                                    }

                                    public init(_ dict: [String: Any]) {
                                        super.init()
                                        self.fromMap(dict)
                                    }

                                    public override func validate() throws -> Void {
                                    }

                                    public override func toMap() -> [String : Any] {
                                        var map = super.toMap()
                                        if self.cid != nil {
                                            map["Cid"] = self.cid!
                                        }
                                        if self.from != nil {
                                            map["From"] = self.from!
                                        }
                                        if self.to != nil {
                                            map["To"] = self.to!
                                        }
                                        if self.val != nil {
                                            map["Val"] = self.val!
                                        }
                                        return map
                                    }

                                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                        guard let dict else { return }
                                        if let value = dict["Cid"] as? String {
                                            self.cid = value
                                        }
                                        if let value = dict["From"] as? Int32 {
                                            self.from = value
                                        }
                                        if let value = dict["To"] as? Int32 {
                                            self.to = value
                                        }
                                        if let value = dict["Val"] as? String {
                                            self.val = value
                                        }
                                    }
                                }
                                public var keyWord: [GetResultResponseBody.Data.ResultInfo.HitResult.HitResult.Hits.Hit.KeyWords.KeyWord]?

                                public override init() {
                                    super.init()
                                }

                                public init(_ dict: [String: Any]) {
                                    super.init()
                                    self.fromMap(dict)
                                }

                                public override func validate() throws -> Void {
                                }

                                public override func toMap() -> [String : Any] {
                                    var map = super.toMap()
                                    if self.keyWord != nil {
                                        var tmp : [Any] = []
                                        for k in self.keyWord! {
                                            tmp.append(k.toMap())
                                        }
                                        map["KeyWord"] = tmp
                                    }
                                    return map
                                }

                                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                    guard let dict else { return }
                                    if let value = dict["KeyWord"] as? [Any?] {
                                        var tmp : [GetResultResponseBody.Data.ResultInfo.HitResult.HitResult.Hits.Hit.KeyWords.KeyWord] = []
                                        for v in value {
                                            if v != nil {
                                                var model = GetResultResponseBody.Data.ResultInfo.HitResult.HitResult.Hits.Hit.KeyWords.KeyWord()
                                                if v != nil {
                                                    model.fromMap(v as? [String: Any?])
                                                }
                                                tmp.append(model)
                                            }
                                        }
                                        self.keyWord = tmp
                                    }
                                }
                            }
                            public class Phrase : Tea.TeaModel {
                                public var begin: Int64?

                                public var emotionValue: Int32?

                                public var end: Int32?

                                public var role: String?

                                public var words: String?

                                public override init() {
                                    super.init()
                                }

                                public init(_ dict: [String: Any]) {
                                    super.init()
                                    self.fromMap(dict)
                                }

                                public override func validate() throws -> Void {
                                }

                                public override func toMap() -> [String : Any] {
                                    var map = super.toMap()
                                    if self.begin != nil {
                                        map["Begin"] = self.begin!
                                    }
                                    if self.emotionValue != nil {
                                        map["EmotionValue"] = self.emotionValue!
                                    }
                                    if self.end != nil {
                                        map["End"] = self.end!
                                    }
                                    if self.role != nil {
                                        map["Role"] = self.role!
                                    }
                                    if self.words != nil {
                                        map["Words"] = self.words!
                                    }
                                    return map
                                }

                                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                    guard let dict else { return }
                                    if let value = dict["Begin"] as? Int64 {
                                        self.begin = value
                                    }
                                    if let value = dict["EmotionValue"] as? Int32 {
                                        self.emotionValue = value
                                    }
                                    if let value = dict["End"] as? Int32 {
                                        self.end = value
                                    }
                                    if let value = dict["Role"] as? String {
                                        self.role = value
                                    }
                                    if let value = dict["Words"] as? String {
                                        self.words = value
                                    }
                                }
                            }
                            public var cid: GetResultResponseBody.Data.ResultInfo.HitResult.HitResult.Hits.Hit.Cid?

                            public var keyWords: GetResultResponseBody.Data.ResultInfo.HitResult.HitResult.Hits.Hit.KeyWords?

                            public var phrase: GetResultResponseBody.Data.ResultInfo.HitResult.HitResult.Hits.Hit.Phrase?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                                try self.cid?.validate()
                                try self.keyWords?.validate()
                                try self.phrase?.validate()
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.cid != nil {
                                    map["Cid"] = self.cid?.toMap()
                                }
                                if self.keyWords != nil {
                                    map["KeyWords"] = self.keyWords?.toMap()
                                }
                                if self.phrase != nil {
                                    map["Phrase"] = self.phrase?.toMap()
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                guard let dict else { return }
                                if let value = dict["Cid"] as? [String: Any?] {
                                    var model = GetResultResponseBody.Data.ResultInfo.HitResult.HitResult.Hits.Hit.Cid()
                                    model.fromMap(value)
                                    self.cid = model
                                }
                                if let value = dict["KeyWords"] as? [String: Any?] {
                                    var model = GetResultResponseBody.Data.ResultInfo.HitResult.HitResult.Hits.Hit.KeyWords()
                                    model.fromMap(value)
                                    self.keyWords = model
                                }
                                if let value = dict["Phrase"] as? [String: Any?] {
                                    var model = GetResultResponseBody.Data.ResultInfo.HitResult.HitResult.Hits.Hit.Phrase()
                                    model.fromMap(value)
                                    self.phrase = model
                                }
                            }
                        }
                        public var hit: [GetResultResponseBody.Data.ResultInfo.HitResult.HitResult.Hits.Hit]?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.hit != nil {
                                var tmp : [Any] = []
                                for k in self.hit! {
                                    tmp.append(k.toMap())
                                }
                                map["Hit"] = tmp
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Hit"] as? [Any?] {
                                var tmp : [GetResultResponseBody.Data.ResultInfo.HitResult.HitResult.Hits.Hit] = []
                                for v in value {
                                    if v != nil {
                                        var model = GetResultResponseBody.Data.ResultInfo.HitResult.HitResult.Hits.Hit()
                                        if v != nil {
                                            model.fromMap(v as? [String: Any?])
                                        }
                                        tmp.append(model)
                                    }
                                }
                                self.hit = tmp
                            }
                        }
                    }
                    public var conditions: GetResultResponseBody.Data.ResultInfo.HitResult.HitResult.Conditions?

                    public var hits: GetResultResponseBody.Data.ResultInfo.HitResult.HitResult.Hits?

                    public var name: String?

                    public var reviewResult: Int32?

                    public var rid: String?

                    public var schemeId: Int64?

                    public var schemeVersion: Int64?

                    public var score: Int32?

                    public var type: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                        try self.conditions?.validate()
                        try self.hits?.validate()
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.conditions != nil {
                            map["Conditions"] = self.conditions?.toMap()
                        }
                        if self.hits != nil {
                            map["Hits"] = self.hits?.toMap()
                        }
                        if self.name != nil {
                            map["Name"] = self.name!
                        }
                        if self.reviewResult != nil {
                            map["ReviewResult"] = self.reviewResult!
                        }
                        if self.rid != nil {
                            map["Rid"] = self.rid!
                        }
                        if self.schemeId != nil {
                            map["SchemeId"] = self.schemeId!
                        }
                        if self.schemeVersion != nil {
                            map["SchemeVersion"] = self.schemeVersion!
                        }
                        if self.score != nil {
                            map["Score"] = self.score!
                        }
                        if self.type != nil {
                            map["Type"] = self.type!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Conditions"] as? [String: Any?] {
                            var model = GetResultResponseBody.Data.ResultInfo.HitResult.HitResult.Conditions()
                            model.fromMap(value)
                            self.conditions = model
                        }
                        if let value = dict["Hits"] as? [String: Any?] {
                            var model = GetResultResponseBody.Data.ResultInfo.HitResult.HitResult.Hits()
                            model.fromMap(value)
                            self.hits = model
                        }
                        if let value = dict["Name"] as? String {
                            self.name = value
                        }
                        if let value = dict["ReviewResult"] as? Int32 {
                            self.reviewResult = value
                        }
                        if let value = dict["Rid"] as? String {
                            self.rid = value
                        }
                        if let value = dict["SchemeId"] as? Int64 {
                            self.schemeId = value
                        }
                        if let value = dict["SchemeVersion"] as? Int64 {
                            self.schemeVersion = value
                        }
                        if let value = dict["Score"] as? Int32 {
                            self.score = value
                        }
                        if let value = dict["Type"] as? String {
                            self.type = value
                        }
                    }
                }
                public var hitResult: [GetResultResponseBody.Data.ResultInfo.HitResult.HitResult]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.hitResult != nil {
                        var tmp : [Any] = []
                        for k in self.hitResult! {
                            tmp.append(k.toMap())
                        }
                        map["HitResult"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["HitResult"] as? [Any?] {
                        var tmp : [GetResultResponseBody.Data.ResultInfo.HitResult.HitResult] = []
                        for v in value {
                            if v != nil {
                                var model = GetResultResponseBody.Data.ResultInfo.HitResult.HitResult()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.hitResult = tmp
                    }
                }
            }
            public class HitScore : Tea.TeaModel {
                public class HitScore : Tea.TeaModel {
                    public var ruleId: String?

                    public var scoreId: String?

                    public var scoreName: String?

                    public var scoreNumber: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.ruleId != nil {
                            map["RuleId"] = self.ruleId!
                        }
                        if self.scoreId != nil {
                            map["ScoreId"] = self.scoreId!
                        }
                        if self.scoreName != nil {
                            map["ScoreName"] = self.scoreName!
                        }
                        if self.scoreNumber != nil {
                            map["ScoreNumber"] = self.scoreNumber!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["RuleId"] as? String {
                            self.ruleId = value
                        }
                        if let value = dict["ScoreId"] as? String {
                            self.scoreId = value
                        }
                        if let value = dict["ScoreName"] as? String {
                            self.scoreName = value
                        }
                        if let value = dict["ScoreNumber"] as? String {
                            self.scoreNumber = value
                        }
                    }
                }
                public var hitScore: [GetResultResponseBody.Data.ResultInfo.HitScore.HitScore]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.hitScore != nil {
                        var tmp : [Any] = []
                        for k in self.hitScore! {
                            tmp.append(k.toMap())
                        }
                        map["HitScore"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["HitScore"] as? [Any?] {
                        var tmp : [GetResultResponseBody.Data.ResultInfo.HitScore.HitScore] = []
                        for v in value {
                            if v != nil {
                                var model = GetResultResponseBody.Data.ResultInfo.HitScore.HitScore()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.hitScore = tmp
                    }
                }
            }
            public class Recording : Tea.TeaModel {
                public var business: String?

                public var callId: String?

                public var callTime: String?

                public var callType: Int32?

                public var callee: String?

                public var caller: String?

                public var customerName: String?

                public var dataSetName: String?

                public var dialogueSize: Int32?

                public var duration: Int64?

                public var id: String?

                public var name: String?

                public var primaryId: String?

                public var remark1: String?

                public var remark10: String?

                public var remark11: String?

                public var remark12: String?

                public var remark13: String?

                public var remark2: String?

                public var remark3: String?

                public var remark4: String?

                public var remark5: Int64?

                public var remark6: String?

                public var remark7: String?

                public var remark8: String?

                public var remark9: String?

                public var taskConfigId: Int64?

                public var taskConfigName: String?

                public var url: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.business != nil {
                        map["Business"] = self.business!
                    }
                    if self.callId != nil {
                        map["CallId"] = self.callId!
                    }
                    if self.callTime != nil {
                        map["CallTime"] = self.callTime!
                    }
                    if self.callType != nil {
                        map["CallType"] = self.callType!
                    }
                    if self.callee != nil {
                        map["Callee"] = self.callee!
                    }
                    if self.caller != nil {
                        map["Caller"] = self.caller!
                    }
                    if self.customerName != nil {
                        map["CustomerName"] = self.customerName!
                    }
                    if self.dataSetName != nil {
                        map["DataSetName"] = self.dataSetName!
                    }
                    if self.dialogueSize != nil {
                        map["DialogueSize"] = self.dialogueSize!
                    }
                    if self.duration != nil {
                        map["Duration"] = self.duration!
                    }
                    if self.id != nil {
                        map["Id"] = self.id!
                    }
                    if self.name != nil {
                        map["Name"] = self.name!
                    }
                    if self.primaryId != nil {
                        map["PrimaryId"] = self.primaryId!
                    }
                    if self.remark1 != nil {
                        map["Remark1"] = self.remark1!
                    }
                    if self.remark10 != nil {
                        map["Remark10"] = self.remark10!
                    }
                    if self.remark11 != nil {
                        map["Remark11"] = self.remark11!
                    }
                    if self.remark12 != nil {
                        map["Remark12"] = self.remark12!
                    }
                    if self.remark13 != nil {
                        map["Remark13"] = self.remark13!
                    }
                    if self.remark2 != nil {
                        map["Remark2"] = self.remark2!
                    }
                    if self.remark3 != nil {
                        map["Remark3"] = self.remark3!
                    }
                    if self.remark4 != nil {
                        map["Remark4"] = self.remark4!
                    }
                    if self.remark5 != nil {
                        map["Remark5"] = self.remark5!
                    }
                    if self.remark6 != nil {
                        map["Remark6"] = self.remark6!
                    }
                    if self.remark7 != nil {
                        map["Remark7"] = self.remark7!
                    }
                    if self.remark8 != nil {
                        map["Remark8"] = self.remark8!
                    }
                    if self.remark9 != nil {
                        map["Remark9"] = self.remark9!
                    }
                    if self.taskConfigId != nil {
                        map["TaskConfigId"] = self.taskConfigId!
                    }
                    if self.taskConfigName != nil {
                        map["TaskConfigName"] = self.taskConfigName!
                    }
                    if self.url != nil {
                        map["Url"] = self.url!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Business"] as? String {
                        self.business = value
                    }
                    if let value = dict["CallId"] as? String {
                        self.callId = value
                    }
                    if let value = dict["CallTime"] as? String {
                        self.callTime = value
                    }
                    if let value = dict["CallType"] as? Int32 {
                        self.callType = value
                    }
                    if let value = dict["Callee"] as? String {
                        self.callee = value
                    }
                    if let value = dict["Caller"] as? String {
                        self.caller = value
                    }
                    if let value = dict["CustomerName"] as? String {
                        self.customerName = value
                    }
                    if let value = dict["DataSetName"] as? String {
                        self.dataSetName = value
                    }
                    if let value = dict["DialogueSize"] as? Int32 {
                        self.dialogueSize = value
                    }
                    if let value = dict["Duration"] as? Int64 {
                        self.duration = value
                    }
                    if let value = dict["Id"] as? String {
                        self.id = value
                    }
                    if let value = dict["Name"] as? String {
                        self.name = value
                    }
                    if let value = dict["PrimaryId"] as? String {
                        self.primaryId = value
                    }
                    if let value = dict["Remark1"] as? String {
                        self.remark1 = value
                    }
                    if let value = dict["Remark10"] as? String {
                        self.remark10 = value
                    }
                    if let value = dict["Remark11"] as? String {
                        self.remark11 = value
                    }
                    if let value = dict["Remark12"] as? String {
                        self.remark12 = value
                    }
                    if let value = dict["Remark13"] as? String {
                        self.remark13 = value
                    }
                    if let value = dict["Remark2"] as? String {
                        self.remark2 = value
                    }
                    if let value = dict["Remark3"] as? String {
                        self.remark3 = value
                    }
                    if let value = dict["Remark4"] as? String {
                        self.remark4 = value
                    }
                    if let value = dict["Remark5"] as? Int64 {
                        self.remark5 = value
                    }
                    if let value = dict["Remark6"] as? String {
                        self.remark6 = value
                    }
                    if let value = dict["Remark7"] as? String {
                        self.remark7 = value
                    }
                    if let value = dict["Remark8"] as? String {
                        self.remark8 = value
                    }
                    if let value = dict["Remark9"] as? String {
                        self.remark9 = value
                    }
                    if let value = dict["TaskConfigId"] as? Int64 {
                        self.taskConfigId = value
                    }
                    if let value = dict["TaskConfigName"] as? String {
                        self.taskConfigName = value
                    }
                    if let value = dict["Url"] as? String {
                        self.url = value
                    }
                }
            }
            public class ReviewHistoryList : Tea.TeaModel {
                public class ReviewHistory : Tea.TeaModel {
                    public class ReviewRightRule : Tea.TeaModel {
                        public class ReviewRightRule : Tea.TeaModel {
                            public var rid: Int64?

                            public var ruleName: String?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.rid != nil {
                                    map["rid"] = self.rid!
                                }
                                if self.ruleName != nil {
                                    map["ruleName"] = self.ruleName!
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                guard let dict else { return }
                                if let value = dict["rid"] as? Int64 {
                                    self.rid = value
                                }
                                if let value = dict["ruleName"] as? String {
                                    self.ruleName = value
                                }
                            }
                        }
                        public var reviewRightRule: [GetResultResponseBody.Data.ResultInfo.ReviewHistoryList.ReviewHistory.ReviewRightRule.ReviewRightRule]?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.reviewRightRule != nil {
                                var tmp : [Any] = []
                                for k in self.reviewRightRule! {
                                    tmp.append(k.toMap())
                                }
                                map["ReviewRightRule"] = tmp
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["ReviewRightRule"] as? [Any?] {
                                var tmp : [GetResultResponseBody.Data.ResultInfo.ReviewHistoryList.ReviewHistory.ReviewRightRule.ReviewRightRule] = []
                                for v in value {
                                    if v != nil {
                                        var model = GetResultResponseBody.Data.ResultInfo.ReviewHistoryList.ReviewHistory.ReviewRightRule.ReviewRightRule()
                                        if v != nil {
                                            model.fromMap(v as? [String: Any?])
                                        }
                                        tmp.append(model)
                                    }
                                }
                                self.reviewRightRule = tmp
                            }
                        }
                    }
                    public var comments: String?

                    public var complainResult: Int32?

                    public var oldScore: Int32?

                    public var operator_: Int64?

                    public var operatorName: String?

                    public var reviewManagerType: String?

                    public var reviewResult: Int32?

                    public var reviewRightRule: GetResultResponseBody.Data.ResultInfo.ReviewHistoryList.ReviewHistory.ReviewRightRule?

                    public var score: Int32?

                    public var time: Int64?

                    public var timeStr: String?

                    public var type: Int32?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                        try self.reviewRightRule?.validate()
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.comments != nil {
                            map["Comments"] = self.comments!
                        }
                        if self.complainResult != nil {
                            map["ComplainResult"] = self.complainResult!
                        }
                        if self.oldScore != nil {
                            map["OldScore"] = self.oldScore!
                        }
                        if self.operator_ != nil {
                            map["Operator"] = self.operator_!
                        }
                        if self.operatorName != nil {
                            map["OperatorName"] = self.operatorName!
                        }
                        if self.reviewManagerType != nil {
                            map["ReviewManagerType"] = self.reviewManagerType!
                        }
                        if self.reviewResult != nil {
                            map["ReviewResult"] = self.reviewResult!
                        }
                        if self.reviewRightRule != nil {
                            map["ReviewRightRule"] = self.reviewRightRule?.toMap()
                        }
                        if self.score != nil {
                            map["Score"] = self.score!
                        }
                        if self.time != nil {
                            map["Time"] = self.time!
                        }
                        if self.timeStr != nil {
                            map["TimeStr"] = self.timeStr!
                        }
                        if self.type != nil {
                            map["Type"] = self.type!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Comments"] as? String {
                            self.comments = value
                        }
                        if let value = dict["ComplainResult"] as? Int32 {
                            self.complainResult = value
                        }
                        if let value = dict["OldScore"] as? Int32 {
                            self.oldScore = value
                        }
                        if let value = dict["Operator"] as? Int64 {
                            self.operator_ = value
                        }
                        if let value = dict["OperatorName"] as? String {
                            self.operatorName = value
                        }
                        if let value = dict["ReviewManagerType"] as? String {
                            self.reviewManagerType = value
                        }
                        if let value = dict["ReviewResult"] as? Int32 {
                            self.reviewResult = value
                        }
                        if let value = dict["ReviewRightRule"] as? [String: Any?] {
                            var model = GetResultResponseBody.Data.ResultInfo.ReviewHistoryList.ReviewHistory.ReviewRightRule()
                            model.fromMap(value)
                            self.reviewRightRule = model
                        }
                        if let value = dict["Score"] as? Int32 {
                            self.score = value
                        }
                        if let value = dict["Time"] as? Int64 {
                            self.time = value
                        }
                        if let value = dict["TimeStr"] as? String {
                            self.timeStr = value
                        }
                        if let value = dict["Type"] as? Int32 {
                            self.type = value
                        }
                    }
                }
                public var reviewHistory: [GetResultResponseBody.Data.ResultInfo.ReviewHistoryList.ReviewHistory]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.reviewHistory != nil {
                        var tmp : [Any] = []
                        for k in self.reviewHistory! {
                            tmp.append(k.toMap())
                        }
                        map["ReviewHistory"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["ReviewHistory"] as? [Any?] {
                        var tmp : [GetResultResponseBody.Data.ResultInfo.ReviewHistoryList.ReviewHistory] = []
                        for v in value {
                            if v != nil {
                                var model = GetResultResponseBody.Data.ResultInfo.ReviewHistoryList.ReviewHistory()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.reviewHistory = tmp
                    }
                }
            }
            public class ReviewTypeIdList : Tea.TeaModel {
                public class ReviewTypeIdList : Tea.TeaModel {
                    public class ReviewKeyIdList : Tea.TeaModel {
                        public var reviewKeyIdList: [Int64]?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.reviewKeyIdList != nil {
                                map["ReviewKeyIdList"] = self.reviewKeyIdList!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["ReviewKeyIdList"] as? [Int64] {
                                self.reviewKeyIdList = value
                            }
                        }
                    }
                    public var reviewKeyIdList: GetResultResponseBody.Data.ResultInfo.ReviewTypeIdList.ReviewTypeIdList.ReviewKeyIdList?

                    public var reviewTypeId: Int64?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                        try self.reviewKeyIdList?.validate()
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.reviewKeyIdList != nil {
                            map["ReviewKeyIdList"] = self.reviewKeyIdList?.toMap()
                        }
                        if self.reviewTypeId != nil {
                            map["ReviewTypeId"] = self.reviewTypeId!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["ReviewKeyIdList"] as? [String: Any?] {
                            var model = GetResultResponseBody.Data.ResultInfo.ReviewTypeIdList.ReviewTypeIdList.ReviewKeyIdList()
                            model.fromMap(value)
                            self.reviewKeyIdList = model
                        }
                        if let value = dict["ReviewTypeId"] as? Int64 {
                            self.reviewTypeId = value
                        }
                    }
                }
                public var reviewTypeIdList: [GetResultResponseBody.Data.ResultInfo.ReviewTypeIdList.ReviewTypeIdList]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.reviewTypeIdList != nil {
                        var tmp : [Any] = []
                        for k in self.reviewTypeIdList! {
                            tmp.append(k.toMap())
                        }
                        map["ReviewTypeIdList"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["ReviewTypeIdList"] as? [Any?] {
                        var tmp : [GetResultResponseBody.Data.ResultInfo.ReviewTypeIdList.ReviewTypeIdList] = []
                        for v in value {
                            if v != nil {
                                var model = GetResultResponseBody.Data.ResultInfo.ReviewTypeIdList.ReviewTypeIdList()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.reviewTypeIdList = tmp
                    }
                }
            }
            public class SchemeIdList : Tea.TeaModel {
                public var schemeIdList: [Int64]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.schemeIdList != nil {
                        map["SchemeIdList"] = self.schemeIdList!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["SchemeIdList"] as? [Int64] {
                        self.schemeIdList = value
                    }
                }
            }
            public class SchemeNameList : Tea.TeaModel {
                public var schemeNameList: [String]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.schemeNameList != nil {
                        map["SchemeNameList"] = self.schemeNameList!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["SchemeNameList"] as? [String] {
                        self.schemeNameList = value
                    }
                }
            }
            public var agent: GetResultResponseBody.Data.ResultInfo.Agent?

            public var asrResult: GetResultResponseBody.Data.ResultInfo.AsrResult?

            public var assignmentTime: String?

            public var comments: String?

            public var createTime: String?

            public var createTimeLong: String?

            public var errorMessage: String?

            public var hitResult: GetResultResponseBody.Data.ResultInfo.HitResult?

            public var hitScore: GetResultResponseBody.Data.ResultInfo.HitScore?

            public var lastDataId: String?

            public var recording: GetResultResponseBody.Data.ResultInfo.Recording?

            public var resolver: String?

            public var reviewHistoryList: GetResultResponseBody.Data.ResultInfo.ReviewHistoryList?

            public var reviewResult: Int32?

            public var reviewStatus: Int32?

            public var reviewTime: String?

            public var reviewTimeLong: String?

            public var reviewType: Int32?

            public var reviewTypeIdList: GetResultResponseBody.Data.ResultInfo.ReviewTypeIdList?

            public var reviewer: String?

            public var schemeIdList: GetResultResponseBody.Data.ResultInfo.SchemeIdList?

            public var schemeNameList: GetResultResponseBody.Data.ResultInfo.SchemeNameList?

            public var score: Int32?

            public var status: Int32?

            public var taskId: String?

            public var taskName: String?

            public var vid: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.agent?.validate()
                try self.asrResult?.validate()
                try self.hitResult?.validate()
                try self.hitScore?.validate()
                try self.recording?.validate()
                try self.reviewHistoryList?.validate()
                try self.reviewTypeIdList?.validate()
                try self.schemeIdList?.validate()
                try self.schemeNameList?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.agent != nil {
                    map["Agent"] = self.agent?.toMap()
                }
                if self.asrResult != nil {
                    map["AsrResult"] = self.asrResult?.toMap()
                }
                if self.assignmentTime != nil {
                    map["AssignmentTime"] = self.assignmentTime!
                }
                if self.comments != nil {
                    map["Comments"] = self.comments!
                }
                if self.createTime != nil {
                    map["CreateTime"] = self.createTime!
                }
                if self.createTimeLong != nil {
                    map["CreateTimeLong"] = self.createTimeLong!
                }
                if self.errorMessage != nil {
                    map["ErrorMessage"] = self.errorMessage!
                }
                if self.hitResult != nil {
                    map["HitResult"] = self.hitResult?.toMap()
                }
                if self.hitScore != nil {
                    map["HitScore"] = self.hitScore?.toMap()
                }
                if self.lastDataId != nil {
                    map["LastDataId"] = self.lastDataId!
                }
                if self.recording != nil {
                    map["Recording"] = self.recording?.toMap()
                }
                if self.resolver != nil {
                    map["Resolver"] = self.resolver!
                }
                if self.reviewHistoryList != nil {
                    map["ReviewHistoryList"] = self.reviewHistoryList?.toMap()
                }
                if self.reviewResult != nil {
                    map["ReviewResult"] = self.reviewResult!
                }
                if self.reviewStatus != nil {
                    map["ReviewStatus"] = self.reviewStatus!
                }
                if self.reviewTime != nil {
                    map["ReviewTime"] = self.reviewTime!
                }
                if self.reviewTimeLong != nil {
                    map["ReviewTimeLong"] = self.reviewTimeLong!
                }
                if self.reviewType != nil {
                    map["ReviewType"] = self.reviewType!
                }
                if self.reviewTypeIdList != nil {
                    map["ReviewTypeIdList"] = self.reviewTypeIdList?.toMap()
                }
                if self.reviewer != nil {
                    map["Reviewer"] = self.reviewer!
                }
                if self.schemeIdList != nil {
                    map["SchemeIdList"] = self.schemeIdList?.toMap()
                }
                if self.schemeNameList != nil {
                    map["SchemeNameList"] = self.schemeNameList?.toMap()
                }
                if self.score != nil {
                    map["Score"] = self.score!
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                if self.taskId != nil {
                    map["TaskId"] = self.taskId!
                }
                if self.taskName != nil {
                    map["TaskName"] = self.taskName!
                }
                if self.vid != nil {
                    map["Vid"] = self.vid!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Agent"] as? [String: Any?] {
                    var model = GetResultResponseBody.Data.ResultInfo.Agent()
                    model.fromMap(value)
                    self.agent = model
                }
                if let value = dict["AsrResult"] as? [String: Any?] {
                    var model = GetResultResponseBody.Data.ResultInfo.AsrResult()
                    model.fromMap(value)
                    self.asrResult = model
                }
                if let value = dict["AssignmentTime"] as? String {
                    self.assignmentTime = value
                }
                if let value = dict["Comments"] as? String {
                    self.comments = value
                }
                if let value = dict["CreateTime"] as? String {
                    self.createTime = value
                }
                if let value = dict["CreateTimeLong"] as? String {
                    self.createTimeLong = value
                }
                if let value = dict["ErrorMessage"] as? String {
                    self.errorMessage = value
                }
                if let value = dict["HitResult"] as? [String: Any?] {
                    var model = GetResultResponseBody.Data.ResultInfo.HitResult()
                    model.fromMap(value)
                    self.hitResult = model
                }
                if let value = dict["HitScore"] as? [String: Any?] {
                    var model = GetResultResponseBody.Data.ResultInfo.HitScore()
                    model.fromMap(value)
                    self.hitScore = model
                }
                if let value = dict["LastDataId"] as? String {
                    self.lastDataId = value
                }
                if let value = dict["Recording"] as? [String: Any?] {
                    var model = GetResultResponseBody.Data.ResultInfo.Recording()
                    model.fromMap(value)
                    self.recording = model
                }
                if let value = dict["Resolver"] as? String {
                    self.resolver = value
                }
                if let value = dict["ReviewHistoryList"] as? [String: Any?] {
                    var model = GetResultResponseBody.Data.ResultInfo.ReviewHistoryList()
                    model.fromMap(value)
                    self.reviewHistoryList = model
                }
                if let value = dict["ReviewResult"] as? Int32 {
                    self.reviewResult = value
                }
                if let value = dict["ReviewStatus"] as? Int32 {
                    self.reviewStatus = value
                }
                if let value = dict["ReviewTime"] as? String {
                    self.reviewTime = value
                }
                if let value = dict["ReviewTimeLong"] as? String {
                    self.reviewTimeLong = value
                }
                if let value = dict["ReviewType"] as? Int32 {
                    self.reviewType = value
                }
                if let value = dict["ReviewTypeIdList"] as? [String: Any?] {
                    var model = GetResultResponseBody.Data.ResultInfo.ReviewTypeIdList()
                    model.fromMap(value)
                    self.reviewTypeIdList = model
                }
                if let value = dict["Reviewer"] as? String {
                    self.reviewer = value
                }
                if let value = dict["SchemeIdList"] as? [String: Any?] {
                    var model = GetResultResponseBody.Data.ResultInfo.SchemeIdList()
                    model.fromMap(value)
                    self.schemeIdList = model
                }
                if let value = dict["SchemeNameList"] as? [String: Any?] {
                    var model = GetResultResponseBody.Data.ResultInfo.SchemeNameList()
                    model.fromMap(value)
                    self.schemeNameList = model
                }
                if let value = dict["Score"] as? Int32 {
                    self.score = value
                }
                if let value = dict["Status"] as? Int32 {
                    self.status = value
                }
                if let value = dict["TaskId"] as? String {
                    self.taskId = value
                }
                if let value = dict["TaskName"] as? String {
                    self.taskName = value
                }
                if let value = dict["Vid"] as? String {
                    self.vid = value
                }
            }
        }
        public var resultInfo: [GetResultResponseBody.Data.ResultInfo]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.resultInfo != nil {
                var tmp : [Any] = []
                for k in self.resultInfo! {
                    tmp.append(k.toMap())
                }
                map["ResultInfo"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ResultInfo"] as? [Any?] {
                var tmp : [GetResultResponseBody.Data.ResultInfo] = []
                for v in value {
                    if v != nil {
                        var model = GetResultResponseBody.Data.ResultInfo()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.resultInfo = tmp
            }
        }
    }
    public var code: String?

    public var count: Int32?

    public var data: GetResultResponseBody.Data?

    public var message: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var resultCountId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.count != nil {
            map["Count"] = self.count!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultCountId != nil {
            map["ResultCountId"] = self.resultCountId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Count"] as? Int32 {
            self.count = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetResultResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["ResultCountId"] as? String {
            self.resultCountId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetResultResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetResultResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetResultResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetResultToReviewRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var jsonStr: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.jsonStr != nil {
            map["JsonStr"] = self.jsonStr!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["JsonStr"] as? String {
            self.jsonStr = value
        }
    }
}

public class GetResultToReviewResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Dialogues : Tea.TeaModel {
            public class Dialogue : Tea.TeaModel {
                public var begin: Int64?

                public var beginTime: String?

                public var beginTimeMs: Int64?

                public var emotionValue: Int32?

                public var end: Int64?

                public var hourMinSec: String?

                public var identity: String?

                public var role: String?

                public var silenceDuration: Int32?

                public var speechRate: Int32?

                public var words: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.begin != nil {
                        map["Begin"] = self.begin!
                    }
                    if self.beginTime != nil {
                        map["BeginTime"] = self.beginTime!
                    }
                    if self.beginTimeMs != nil {
                        map["BeginTimeMs"] = self.beginTimeMs!
                    }
                    if self.emotionValue != nil {
                        map["EmotionValue"] = self.emotionValue!
                    }
                    if self.end != nil {
                        map["End"] = self.end!
                    }
                    if self.hourMinSec != nil {
                        map["HourMinSec"] = self.hourMinSec!
                    }
                    if self.identity != nil {
                        map["Identity"] = self.identity!
                    }
                    if self.role != nil {
                        map["Role"] = self.role!
                    }
                    if self.silenceDuration != nil {
                        map["SilenceDuration"] = self.silenceDuration!
                    }
                    if self.speechRate != nil {
                        map["SpeechRate"] = self.speechRate!
                    }
                    if self.words != nil {
                        map["Words"] = self.words!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Begin"] as? Int64 {
                        self.begin = value
                    }
                    if let value = dict["BeginTime"] as? String {
                        self.beginTime = value
                    }
                    if let value = dict["BeginTimeMs"] as? Int64 {
                        self.beginTimeMs = value
                    }
                    if let value = dict["EmotionValue"] as? Int32 {
                        self.emotionValue = value
                    }
                    if let value = dict["End"] as? Int64 {
                        self.end = value
                    }
                    if let value = dict["HourMinSec"] as? String {
                        self.hourMinSec = value
                    }
                    if let value = dict["Identity"] as? String {
                        self.identity = value
                    }
                    if let value = dict["Role"] as? String {
                        self.role = value
                    }
                    if let value = dict["SilenceDuration"] as? Int32 {
                        self.silenceDuration = value
                    }
                    if let value = dict["SpeechRate"] as? Int32 {
                        self.speechRate = value
                    }
                    if let value = dict["Words"] as? String {
                        self.words = value
                    }
                }
            }
            public var dialogue: [GetResultToReviewResponseBody.Data.Dialogues.Dialogue]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.dialogue != nil {
                    var tmp : [Any] = []
                    for k in self.dialogue! {
                        tmp.append(k.toMap())
                    }
                    map["Dialogue"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Dialogue"] as? [Any?] {
                    var tmp : [GetResultToReviewResponseBody.Data.Dialogues.Dialogue] = []
                    for v in value {
                        if v != nil {
                            var model = GetResultToReviewResponseBody.Data.Dialogues.Dialogue()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.dialogue = tmp
                }
            }
        }
        public class HitRuleReviewInfoList : Tea.TeaModel {
            public class HitRuleReviewInfo : Tea.TeaModel {
                public class ComplainHistories : Tea.TeaModel {
                    public class ComplainHistories : Tea.TeaModel {
                        public var comments: String?

                        public var operationTime: String?

                        public var operationType: Int32?

                        public var operator_: Int64?

                        public var operatorName: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.comments != nil {
                                map["Comments"] = self.comments!
                            }
                            if self.operationTime != nil {
                                map["OperationTime"] = self.operationTime!
                            }
                            if self.operationType != nil {
                                map["OperationType"] = self.operationType!
                            }
                            if self.operator_ != nil {
                                map["Operator"] = self.operator_!
                            }
                            if self.operatorName != nil {
                                map["OperatorName"] = self.operatorName!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Comments"] as? String {
                                self.comments = value
                            }
                            if let value = dict["OperationTime"] as? String {
                                self.operationTime = value
                            }
                            if let value = dict["OperationType"] as? Int32 {
                                self.operationType = value
                            }
                            if let value = dict["Operator"] as? Int64 {
                                self.operator_ = value
                            }
                            if let value = dict["OperatorName"] as? String {
                                self.operatorName = value
                            }
                        }
                    }
                    public var complainHistories: [GetResultToReviewResponseBody.Data.HitRuleReviewInfoList.HitRuleReviewInfo.ComplainHistories.ComplainHistories]?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.complainHistories != nil {
                            var tmp : [Any] = []
                            for k in self.complainHistories! {
                                tmp.append(k.toMap())
                            }
                            map["ComplainHistories"] = tmp
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["ComplainHistories"] as? [Any?] {
                            var tmp : [GetResultToReviewResponseBody.Data.HitRuleReviewInfoList.HitRuleReviewInfo.ComplainHistories.ComplainHistories] = []
                            for v in value {
                                if v != nil {
                                    var model = GetResultToReviewResponseBody.Data.HitRuleReviewInfoList.HitRuleReviewInfo.ComplainHistories.ComplainHistories()
                                    if v != nil {
                                        model.fromMap(v as? [String: Any?])
                                    }
                                    tmp.append(model)
                                }
                            }
                            self.complainHistories = tmp
                        }
                    }
                }
                public class ConditionHitInfoList : Tea.TeaModel {
                    public class ConditionHitInfo : Tea.TeaModel {
                        public class Cid : Tea.TeaModel {
                            public var cid: [String]?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.cid != nil {
                                    map["Cid"] = self.cid!
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                guard let dict else { return }
                                if let value = dict["Cid"] as? [String] {
                                    self.cid = value
                                }
                            }
                        }
                        public class KeyWords : Tea.TeaModel {
                            public class KeyWord : Tea.TeaModel {
                                public var cid: String?

                                public var customizeCode: String?

                                public var from: Int32?

                                public var isMatch: Bool?

                                public var pid: Int32?

                                public var tid: String?

                                public var to: Int32?

                                public var val: String?

                                public override init() {
                                    super.init()
                                }

                                public init(_ dict: [String: Any]) {
                                    super.init()
                                    self.fromMap(dict)
                                }

                                public override func validate() throws -> Void {
                                }

                                public override func toMap() -> [String : Any] {
                                    var map = super.toMap()
                                    if self.cid != nil {
                                        map["Cid"] = self.cid!
                                    }
                                    if self.customizeCode != nil {
                                        map["CustomizeCode"] = self.customizeCode!
                                    }
                                    if self.from != nil {
                                        map["From"] = self.from!
                                    }
                                    if self.isMatch != nil {
                                        map["IsMatch"] = self.isMatch!
                                    }
                                    if self.pid != nil {
                                        map["Pid"] = self.pid!
                                    }
                                    if self.tid != nil {
                                        map["Tid"] = self.tid!
                                    }
                                    if self.to != nil {
                                        map["To"] = self.to!
                                    }
                                    if self.val != nil {
                                        map["Val"] = self.val!
                                    }
                                    return map
                                }

                                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                    guard let dict else { return }
                                    if let value = dict["Cid"] as? String {
                                        self.cid = value
                                    }
                                    if let value = dict["CustomizeCode"] as? String {
                                        self.customizeCode = value
                                    }
                                    if let value = dict["From"] as? Int32 {
                                        self.from = value
                                    }
                                    if let value = dict["IsMatch"] as? Bool {
                                        self.isMatch = value
                                    }
                                    if let value = dict["Pid"] as? Int32 {
                                        self.pid = value
                                    }
                                    if let value = dict["Tid"] as? String {
                                        self.tid = value
                                    }
                                    if let value = dict["To"] as? Int32 {
                                        self.to = value
                                    }
                                    if let value = dict["Val"] as? String {
                                        self.val = value
                                    }
                                }
                            }
                            public var keyWord: [GetResultToReviewResponseBody.Data.HitRuleReviewInfoList.HitRuleReviewInfo.ConditionHitInfoList.ConditionHitInfo.KeyWords.KeyWord]?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.keyWord != nil {
                                    var tmp : [Any] = []
                                    for k in self.keyWord! {
                                        tmp.append(k.toMap())
                                    }
                                    map["KeyWord"] = tmp
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                guard let dict else { return }
                                if let value = dict["KeyWord"] as? [Any?] {
                                    var tmp : [GetResultToReviewResponseBody.Data.HitRuleReviewInfoList.HitRuleReviewInfo.ConditionHitInfoList.ConditionHitInfo.KeyWords.KeyWord] = []
                                    for v in value {
                                        if v != nil {
                                            var model = GetResultToReviewResponseBody.Data.HitRuleReviewInfoList.HitRuleReviewInfo.ConditionHitInfoList.ConditionHitInfo.KeyWords.KeyWord()
                                            if v != nil {
                                                model.fromMap(v as? [String: Any?])
                                            }
                                            tmp.append(model)
                                        }
                                    }
                                    self.keyWord = tmp
                                }
                            }
                        }
                        public class Phrase : Tea.TeaModel {
                            public var begin: Int64?

                            public var emotionValue: Int32?

                            public var end: Int64?

                            public var identity: String?

                            public var pid: Int32?

                            public var role: String?

                            public var words: String?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.begin != nil {
                                    map["Begin"] = self.begin!
                                }
                                if self.emotionValue != nil {
                                    map["EmotionValue"] = self.emotionValue!
                                }
                                if self.end != nil {
                                    map["End"] = self.end!
                                }
                                if self.identity != nil {
                                    map["Identity"] = self.identity!
                                }
                                if self.pid != nil {
                                    map["Pid"] = self.pid!
                                }
                                if self.role != nil {
                                    map["Role"] = self.role!
                                }
                                if self.words != nil {
                                    map["Words"] = self.words!
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                guard let dict else { return }
                                if let value = dict["Begin"] as? Int64 {
                                    self.begin = value
                                }
                                if let value = dict["EmotionValue"] as? Int32 {
                                    self.emotionValue = value
                                }
                                if let value = dict["End"] as? Int64 {
                                    self.end = value
                                }
                                if let value = dict["Identity"] as? String {
                                    self.identity = value
                                }
                                if let value = dict["Pid"] as? Int32 {
                                    self.pid = value
                                }
                                if let value = dict["Role"] as? String {
                                    self.role = value
                                }
                                if let value = dict["Words"] as? String {
                                    self.words = value
                                }
                            }
                        }
                        public var cid: GetResultToReviewResponseBody.Data.HitRuleReviewInfoList.HitRuleReviewInfo.ConditionHitInfoList.ConditionHitInfo.Cid?

                        public var keyWords: GetResultToReviewResponseBody.Data.HitRuleReviewInfoList.HitRuleReviewInfo.ConditionHitInfoList.ConditionHitInfo.KeyWords?

                        public var phrase: GetResultToReviewResponseBody.Data.HitRuleReviewInfoList.HitRuleReviewInfo.ConditionHitInfoList.ConditionHitInfo.Phrase?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                            try self.cid?.validate()
                            try self.keyWords?.validate()
                            try self.phrase?.validate()
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.cid != nil {
                                map["Cid"] = self.cid?.toMap()
                            }
                            if self.keyWords != nil {
                                map["KeyWords"] = self.keyWords?.toMap()
                            }
                            if self.phrase != nil {
                                map["Phrase"] = self.phrase?.toMap()
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Cid"] as? [String: Any?] {
                                var model = GetResultToReviewResponseBody.Data.HitRuleReviewInfoList.HitRuleReviewInfo.ConditionHitInfoList.ConditionHitInfo.Cid()
                                model.fromMap(value)
                                self.cid = model
                            }
                            if let value = dict["KeyWords"] as? [String: Any?] {
                                var model = GetResultToReviewResponseBody.Data.HitRuleReviewInfoList.HitRuleReviewInfo.ConditionHitInfoList.ConditionHitInfo.KeyWords()
                                model.fromMap(value)
                                self.keyWords = model
                            }
                            if let value = dict["Phrase"] as? [String: Any?] {
                                var model = GetResultToReviewResponseBody.Data.HitRuleReviewInfoList.HitRuleReviewInfo.ConditionHitInfoList.ConditionHitInfo.Phrase()
                                model.fromMap(value)
                                self.phrase = model
                            }
                        }
                    }
                    public var conditionHitInfo: [GetResultToReviewResponseBody.Data.HitRuleReviewInfoList.HitRuleReviewInfo.ConditionHitInfoList.ConditionHitInfo]?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.conditionHitInfo != nil {
                            var tmp : [Any] = []
                            for k in self.conditionHitInfo! {
                                tmp.append(k.toMap())
                            }
                            map["ConditionHitInfo"] = tmp
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["ConditionHitInfo"] as? [Any?] {
                            var tmp : [GetResultToReviewResponseBody.Data.HitRuleReviewInfoList.HitRuleReviewInfo.ConditionHitInfoList.ConditionHitInfo] = []
                            for v in value {
                                if v != nil {
                                    var model = GetResultToReviewResponseBody.Data.HitRuleReviewInfoList.HitRuleReviewInfo.ConditionHitInfoList.ConditionHitInfo()
                                    if v != nil {
                                        model.fromMap(v as? [String: Any?])
                                    }
                                    tmp.append(model)
                                }
                            }
                            self.conditionHitInfo = tmp
                        }
                    }
                }
                public class ReviewInfo : Tea.TeaModel {
                    public var hitId: String?

                    public var reviewResult: Int32?

                    public var reviewTime: String?

                    public var reviewer: String?

                    public var rid: Int64?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.hitId != nil {
                            map["HitId"] = self.hitId!
                        }
                        if self.reviewResult != nil {
                            map["ReviewResult"] = self.reviewResult!
                        }
                        if self.reviewTime != nil {
                            map["ReviewTime"] = self.reviewTime!
                        }
                        if self.reviewer != nil {
                            map["Reviewer"] = self.reviewer!
                        }
                        if self.rid != nil {
                            map["Rid"] = self.rid!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["HitId"] as? String {
                            self.hitId = value
                        }
                        if let value = dict["ReviewResult"] as? Int32 {
                            self.reviewResult = value
                        }
                        if let value = dict["ReviewTime"] as? String {
                            self.reviewTime = value
                        }
                        if let value = dict["Reviewer"] as? String {
                            self.reviewer = value
                        }
                        if let value = dict["Rid"] as? Int64 {
                            self.rid = value
                        }
                    }
                }
                public var autoReview: Int32?

                public var complainHistories: GetResultToReviewResponseBody.Data.HitRuleReviewInfoList.HitRuleReviewInfo.ComplainHistories?

                public var complainable: Bool?

                public var conditionHitInfoList: GetResultToReviewResponseBody.Data.HitRuleReviewInfoList.HitRuleReviewInfo.ConditionHitInfoList?

                public var machineHitResult: Int32?

                public var reviewHitResult: Int32?

                public var reviewInfo: GetResultToReviewResponseBody.Data.HitRuleReviewInfoList.HitRuleReviewInfo.ReviewInfo?

                public var rid: Int64?

                public var ruleName: String?

                public var scoreId: Int64?

                public var scoreNum: Int32?

                public var scoreSubId: Int64?

                public var scoreSubName: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.complainHistories?.validate()
                    try self.conditionHitInfoList?.validate()
                    try self.reviewInfo?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.autoReview != nil {
                        map["AutoReview"] = self.autoReview!
                    }
                    if self.complainHistories != nil {
                        map["ComplainHistories"] = self.complainHistories?.toMap()
                    }
                    if self.complainable != nil {
                        map["Complainable"] = self.complainable!
                    }
                    if self.conditionHitInfoList != nil {
                        map["ConditionHitInfoList"] = self.conditionHitInfoList?.toMap()
                    }
                    if self.machineHitResult != nil {
                        map["MachineHitResult"] = self.machineHitResult!
                    }
                    if self.reviewHitResult != nil {
                        map["ReviewHitResult"] = self.reviewHitResult!
                    }
                    if self.reviewInfo != nil {
                        map["ReviewInfo"] = self.reviewInfo?.toMap()
                    }
                    if self.rid != nil {
                        map["Rid"] = self.rid!
                    }
                    if self.ruleName != nil {
                        map["RuleName"] = self.ruleName!
                    }
                    if self.scoreId != nil {
                        map["ScoreId"] = self.scoreId!
                    }
                    if self.scoreNum != nil {
                        map["ScoreNum"] = self.scoreNum!
                    }
                    if self.scoreSubId != nil {
                        map["ScoreSubId"] = self.scoreSubId!
                    }
                    if self.scoreSubName != nil {
                        map["ScoreSubName"] = self.scoreSubName!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["AutoReview"] as? Int32 {
                        self.autoReview = value
                    }
                    if let value = dict["ComplainHistories"] as? [String: Any?] {
                        var model = GetResultToReviewResponseBody.Data.HitRuleReviewInfoList.HitRuleReviewInfo.ComplainHistories()
                        model.fromMap(value)
                        self.complainHistories = model
                    }
                    if let value = dict["Complainable"] as? Bool {
                        self.complainable = value
                    }
                    if let value = dict["ConditionHitInfoList"] as? [String: Any?] {
                        var model = GetResultToReviewResponseBody.Data.HitRuleReviewInfoList.HitRuleReviewInfo.ConditionHitInfoList()
                        model.fromMap(value)
                        self.conditionHitInfoList = model
                    }
                    if let value = dict["MachineHitResult"] as? Int32 {
                        self.machineHitResult = value
                    }
                    if let value = dict["ReviewHitResult"] as? Int32 {
                        self.reviewHitResult = value
                    }
                    if let value = dict["ReviewInfo"] as? [String: Any?] {
                        var model = GetResultToReviewResponseBody.Data.HitRuleReviewInfoList.HitRuleReviewInfo.ReviewInfo()
                        model.fromMap(value)
                        self.reviewInfo = model
                    }
                    if let value = dict["Rid"] as? Int64 {
                        self.rid = value
                    }
                    if let value = dict["RuleName"] as? String {
                        self.ruleName = value
                    }
                    if let value = dict["ScoreId"] as? Int64 {
                        self.scoreId = value
                    }
                    if let value = dict["ScoreNum"] as? Int32 {
                        self.scoreNum = value
                    }
                    if let value = dict["ScoreSubId"] as? Int64 {
                        self.scoreSubId = value
                    }
                    if let value = dict["ScoreSubName"] as? String {
                        self.scoreSubName = value
                    }
                }
            }
            public var hitRuleReviewInfo: [GetResultToReviewResponseBody.Data.HitRuleReviewInfoList.HitRuleReviewInfo]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.hitRuleReviewInfo != nil {
                    var tmp : [Any] = []
                    for k in self.hitRuleReviewInfo! {
                        tmp.append(k.toMap())
                    }
                    map["HitRuleReviewInfo"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["HitRuleReviewInfo"] as? [Any?] {
                    var tmp : [GetResultToReviewResponseBody.Data.HitRuleReviewInfoList.HitRuleReviewInfo] = []
                    for v in value {
                        if v != nil {
                            var model = GetResultToReviewResponseBody.Data.HitRuleReviewInfoList.HitRuleReviewInfo()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.hitRuleReviewInfo = tmp
                }
            }
        }
        public class ManualScoreInfoList : Tea.TeaModel {
            public class ManualScoreInfo : Tea.TeaModel {
                public class ComplainHistories : Tea.TeaModel {
                    public class ComplainHistories : Tea.TeaModel {
                        public var comments: String?

                        public var operationTime: String?

                        public var operationType: Int32?

                        public var operator_: Int64?

                        public var operatorName: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.comments != nil {
                                map["Comments"] = self.comments!
                            }
                            if self.operationTime != nil {
                                map["OperationTime"] = self.operationTime!
                            }
                            if self.operationType != nil {
                                map["OperationType"] = self.operationType!
                            }
                            if self.operator_ != nil {
                                map["Operator"] = self.operator_!
                            }
                            if self.operatorName != nil {
                                map["OperatorName"] = self.operatorName!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Comments"] as? String {
                                self.comments = value
                            }
                            if let value = dict["OperationTime"] as? String {
                                self.operationTime = value
                            }
                            if let value = dict["OperationType"] as? Int32 {
                                self.operationType = value
                            }
                            if let value = dict["Operator"] as? Int64 {
                                self.operator_ = value
                            }
                            if let value = dict["OperatorName"] as? String {
                                self.operatorName = value
                            }
                        }
                    }
                    public var complainHistories: [GetResultToReviewResponseBody.Data.ManualScoreInfoList.ManualScoreInfo.ComplainHistories.ComplainHistories]?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.complainHistories != nil {
                            var tmp : [Any] = []
                            for k in self.complainHistories! {
                                tmp.append(k.toMap())
                            }
                            map["ComplainHistories"] = tmp
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["ComplainHistories"] as? [Any?] {
                            var tmp : [GetResultToReviewResponseBody.Data.ManualScoreInfoList.ManualScoreInfo.ComplainHistories.ComplainHistories] = []
                            for v in value {
                                if v != nil {
                                    var model = GetResultToReviewResponseBody.Data.ManualScoreInfoList.ManualScoreInfo.ComplainHistories.ComplainHistories()
                                    if v != nil {
                                        model.fromMap(v as? [String: Any?])
                                    }
                                    tmp.append(model)
                                }
                            }
                            self.complainHistories = tmp
                        }
                    }
                }
                public var complainHistories: GetResultToReviewResponseBody.Data.ManualScoreInfoList.ManualScoreInfo.ComplainHistories?

                public var complainable: Bool?

                public var scoreId: Int64?

                public var scoreNum: Int32?

                public var scoreSubId: Int64?

                public var scoreSubName: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.complainHistories?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.complainHistories != nil {
                        map["ComplainHistories"] = self.complainHistories?.toMap()
                    }
                    if self.complainable != nil {
                        map["Complainable"] = self.complainable!
                    }
                    if self.scoreId != nil {
                        map["ScoreId"] = self.scoreId!
                    }
                    if self.scoreNum != nil {
                        map["ScoreNum"] = self.scoreNum!
                    }
                    if self.scoreSubId != nil {
                        map["ScoreSubId"] = self.scoreSubId!
                    }
                    if self.scoreSubName != nil {
                        map["ScoreSubName"] = self.scoreSubName!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["ComplainHistories"] as? [String: Any?] {
                        var model = GetResultToReviewResponseBody.Data.ManualScoreInfoList.ManualScoreInfo.ComplainHistories()
                        model.fromMap(value)
                        self.complainHistories = model
                    }
                    if let value = dict["Complainable"] as? Bool {
                        self.complainable = value
                    }
                    if let value = dict["ScoreId"] as? Int64 {
                        self.scoreId = value
                    }
                    if let value = dict["ScoreNum"] as? Int32 {
                        self.scoreNum = value
                    }
                    if let value = dict["ScoreSubId"] as? Int64 {
                        self.scoreSubId = value
                    }
                    if let value = dict["ScoreSubName"] as? String {
                        self.scoreSubName = value
                    }
                }
            }
            public var manualScoreInfo: [GetResultToReviewResponseBody.Data.ManualScoreInfoList.ManualScoreInfo]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.manualScoreInfo != nil {
                    var tmp : [Any] = []
                    for k in self.manualScoreInfo! {
                        tmp.append(k.toMap())
                    }
                    map["ManualScoreInfo"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ManualScoreInfo"] as? [Any?] {
                    var tmp : [GetResultToReviewResponseBody.Data.ManualScoreInfoList.ManualScoreInfo] = []
                    for v in value {
                        if v != nil {
                            var model = GetResultToReviewResponseBody.Data.ManualScoreInfoList.ManualScoreInfo()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.manualScoreInfo = tmp
                }
            }
        }
        public class ReviewHistoryList : Tea.TeaModel {
            public class ReviewHistory : Tea.TeaModel {
                public class ReviewRightRule : Tea.TeaModel {
                    public class ReviewRightRule : Tea.TeaModel {
                        public var rid: Int64?

                        public var ruleName: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.rid != nil {
                                map["rid"] = self.rid!
                            }
                            if self.ruleName != nil {
                                map["ruleName"] = self.ruleName!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["rid"] as? Int64 {
                                self.rid = value
                            }
                            if let value = dict["ruleName"] as? String {
                                self.ruleName = value
                            }
                        }
                    }
                    public var reviewRightRule: [GetResultToReviewResponseBody.Data.ReviewHistoryList.ReviewHistory.ReviewRightRule.ReviewRightRule]?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.reviewRightRule != nil {
                            var tmp : [Any] = []
                            for k in self.reviewRightRule! {
                                tmp.append(k.toMap())
                            }
                            map["ReviewRightRule"] = tmp
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["ReviewRightRule"] as? [Any?] {
                            var tmp : [GetResultToReviewResponseBody.Data.ReviewHistoryList.ReviewHistory.ReviewRightRule.ReviewRightRule] = []
                            for v in value {
                                if v != nil {
                                    var model = GetResultToReviewResponseBody.Data.ReviewHistoryList.ReviewHistory.ReviewRightRule.ReviewRightRule()
                                    if v != nil {
                                        model.fromMap(v as? [String: Any?])
                                    }
                                    tmp.append(model)
                                }
                            }
                            self.reviewRightRule = tmp
                        }
                    }
                }
                public var comments: String?

                public var complainResult: Int32?

                public var oldScore: Int32?

                public var operator_: Int64?

                public var operatorName: String?

                public var reviewManagerType: String?

                public var reviewResult: Int32?

                public var reviewRightRule: GetResultToReviewResponseBody.Data.ReviewHistoryList.ReviewHistory.ReviewRightRule?

                public var score: Int32?

                public var time: Int64?

                public var timeStr: String?

                public var type: Int32?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.reviewRightRule?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.comments != nil {
                        map["Comments"] = self.comments!
                    }
                    if self.complainResult != nil {
                        map["ComplainResult"] = self.complainResult!
                    }
                    if self.oldScore != nil {
                        map["OldScore"] = self.oldScore!
                    }
                    if self.operator_ != nil {
                        map["Operator"] = self.operator_!
                    }
                    if self.operatorName != nil {
                        map["OperatorName"] = self.operatorName!
                    }
                    if self.reviewManagerType != nil {
                        map["ReviewManagerType"] = self.reviewManagerType!
                    }
                    if self.reviewResult != nil {
                        map["ReviewResult"] = self.reviewResult!
                    }
                    if self.reviewRightRule != nil {
                        map["ReviewRightRule"] = self.reviewRightRule?.toMap()
                    }
                    if self.score != nil {
                        map["Score"] = self.score!
                    }
                    if self.time != nil {
                        map["Time"] = self.time!
                    }
                    if self.timeStr != nil {
                        map["TimeStr"] = self.timeStr!
                    }
                    if self.type != nil {
                        map["Type"] = self.type!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Comments"] as? String {
                        self.comments = value
                    }
                    if let value = dict["ComplainResult"] as? Int32 {
                        self.complainResult = value
                    }
                    if let value = dict["OldScore"] as? Int32 {
                        self.oldScore = value
                    }
                    if let value = dict["Operator"] as? Int64 {
                        self.operator_ = value
                    }
                    if let value = dict["OperatorName"] as? String {
                        self.operatorName = value
                    }
                    if let value = dict["ReviewManagerType"] as? String {
                        self.reviewManagerType = value
                    }
                    if let value = dict["ReviewResult"] as? Int32 {
                        self.reviewResult = value
                    }
                    if let value = dict["ReviewRightRule"] as? [String: Any?] {
                        var model = GetResultToReviewResponseBody.Data.ReviewHistoryList.ReviewHistory.ReviewRightRule()
                        model.fromMap(value)
                        self.reviewRightRule = model
                    }
                    if let value = dict["Score"] as? Int32 {
                        self.score = value
                    }
                    if let value = dict["Time"] as? Int64 {
                        self.time = value
                    }
                    if let value = dict["TimeStr"] as? String {
                        self.timeStr = value
                    }
                    if let value = dict["Type"] as? Int32 {
                        self.type = value
                    }
                }
            }
            public var reviewHistory: [GetResultToReviewResponseBody.Data.ReviewHistoryList.ReviewHistory]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.reviewHistory != nil {
                    var tmp : [Any] = []
                    for k in self.reviewHistory! {
                        tmp.append(k.toMap())
                    }
                    map["ReviewHistory"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ReviewHistory"] as? [Any?] {
                    var tmp : [GetResultToReviewResponseBody.Data.ReviewHistoryList.ReviewHistory] = []
                    for v in value {
                        if v != nil {
                            var model = GetResultToReviewResponseBody.Data.ReviewHistoryList.ReviewHistory()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.reviewHistory = tmp
                }
            }
        }
        public class ReviewTypeIdList : Tea.TeaModel {
            public class ReviewTypeIdList : Tea.TeaModel {
                public class ReviewKeyIdList : Tea.TeaModel {
                    public var reviewKeyIdList: [Int64]?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.reviewKeyIdList != nil {
                            map["ReviewKeyIdList"] = self.reviewKeyIdList!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["ReviewKeyIdList"] as? [Int64] {
                            self.reviewKeyIdList = value
                        }
                    }
                }
                public var reviewKeyIdList: GetResultToReviewResponseBody.Data.ReviewTypeIdList.ReviewTypeIdList.ReviewKeyIdList?

                public var reviewTypeId: Int64?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.reviewKeyIdList?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.reviewKeyIdList != nil {
                        map["ReviewKeyIdList"] = self.reviewKeyIdList?.toMap()
                    }
                    if self.reviewTypeId != nil {
                        map["ReviewTypeId"] = self.reviewTypeId!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["ReviewKeyIdList"] as? [String: Any?] {
                        var model = GetResultToReviewResponseBody.Data.ReviewTypeIdList.ReviewTypeIdList.ReviewKeyIdList()
                        model.fromMap(value)
                        self.reviewKeyIdList = model
                    }
                    if let value = dict["ReviewTypeId"] as? Int64 {
                        self.reviewTypeId = value
                    }
                }
            }
            public var reviewTypeIdList: [GetResultToReviewResponseBody.Data.ReviewTypeIdList.ReviewTypeIdList]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.reviewTypeIdList != nil {
                    var tmp : [Any] = []
                    for k in self.reviewTypeIdList! {
                        tmp.append(k.toMap())
                    }
                    map["ReviewTypeIdList"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ReviewTypeIdList"] as? [Any?] {
                    var tmp : [GetResultToReviewResponseBody.Data.ReviewTypeIdList.ReviewTypeIdList] = []
                    for v in value {
                        if v != nil {
                            var model = GetResultToReviewResponseBody.Data.ReviewTypeIdList.ReviewTypeIdList()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.reviewTypeIdList = tmp
                }
            }
        }
        public var audioScheme: String?

        public var audioURL: String?

        public var comments: String?

        public var dialogues: GetResultToReviewResponseBody.Data.Dialogues?

        public var fileId: String?

        public var fileMergeName: String?

        public var hitRuleReviewInfoList: GetResultToReviewResponseBody.Data.HitRuleReviewInfoList?

        public var manualScoreInfoList: GetResultToReviewResponseBody.Data.ManualScoreInfoList?

        public var reviewHistoryList: GetResultToReviewResponseBody.Data.ReviewHistoryList?

        public var reviewTypeIdList: GetResultToReviewResponseBody.Data.ReviewTypeIdList?

        public var status: Int32?

        public var totalScore: Int32?

        public var vid: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.dialogues?.validate()
            try self.hitRuleReviewInfoList?.validate()
            try self.manualScoreInfoList?.validate()
            try self.reviewHistoryList?.validate()
            try self.reviewTypeIdList?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.audioScheme != nil {
                map["AudioScheme"] = self.audioScheme!
            }
            if self.audioURL != nil {
                map["AudioURL"] = self.audioURL!
            }
            if self.comments != nil {
                map["Comments"] = self.comments!
            }
            if self.dialogues != nil {
                map["Dialogues"] = self.dialogues?.toMap()
            }
            if self.fileId != nil {
                map["FileId"] = self.fileId!
            }
            if self.fileMergeName != nil {
                map["FileMergeName"] = self.fileMergeName!
            }
            if self.hitRuleReviewInfoList != nil {
                map["HitRuleReviewInfoList"] = self.hitRuleReviewInfoList?.toMap()
            }
            if self.manualScoreInfoList != nil {
                map["ManualScoreInfoList"] = self.manualScoreInfoList?.toMap()
            }
            if self.reviewHistoryList != nil {
                map["ReviewHistoryList"] = self.reviewHistoryList?.toMap()
            }
            if self.reviewTypeIdList != nil {
                map["ReviewTypeIdList"] = self.reviewTypeIdList?.toMap()
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.totalScore != nil {
                map["TotalScore"] = self.totalScore!
            }
            if self.vid != nil {
                map["Vid"] = self.vid!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AudioScheme"] as? String {
                self.audioScheme = value
            }
            if let value = dict["AudioURL"] as? String {
                self.audioURL = value
            }
            if let value = dict["Comments"] as? String {
                self.comments = value
            }
            if let value = dict["Dialogues"] as? [String: Any?] {
                var model = GetResultToReviewResponseBody.Data.Dialogues()
                model.fromMap(value)
                self.dialogues = model
            }
            if let value = dict["FileId"] as? String {
                self.fileId = value
            }
            if let value = dict["FileMergeName"] as? String {
                self.fileMergeName = value
            }
            if let value = dict["HitRuleReviewInfoList"] as? [String: Any?] {
                var model = GetResultToReviewResponseBody.Data.HitRuleReviewInfoList()
                model.fromMap(value)
                self.hitRuleReviewInfoList = model
            }
            if let value = dict["ManualScoreInfoList"] as? [String: Any?] {
                var model = GetResultToReviewResponseBody.Data.ManualScoreInfoList()
                model.fromMap(value)
                self.manualScoreInfoList = model
            }
            if let value = dict["ReviewHistoryList"] as? [String: Any?] {
                var model = GetResultToReviewResponseBody.Data.ReviewHistoryList()
                model.fromMap(value)
                self.reviewHistoryList = model
            }
            if let value = dict["ReviewTypeIdList"] as? [String: Any?] {
                var model = GetResultToReviewResponseBody.Data.ReviewTypeIdList()
                model.fromMap(value)
                self.reviewTypeIdList = model
            }
            if let value = dict["Status"] as? Int32 {
                self.status = value
            }
            if let value = dict["TotalScore"] as? Int32 {
                self.totalScore = value
            }
            if let value = dict["Vid"] as? String {
                self.vid = value
            }
        }
    }
    public var code: String?

    public var data: GetResultToReviewResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetResultToReviewResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetResultToReviewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetResultToReviewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetResultToReviewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetRuleRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var jsonStr: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.jsonStr != nil {
            map["JsonStr"] = self.jsonStr!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["JsonStr"] as? String {
            self.jsonStr = value
        }
    }
}

public class GetRuleResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Rules : Tea.TeaModel {
            public class RuleInfo : Tea.TeaModel {
                public class BusinessCategoryNameList : Tea.TeaModel {
                    public var businessCategoryNameList: [String]?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.businessCategoryNameList != nil {
                            map["BusinessCategoryNameList"] = self.businessCategoryNameList!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["BusinessCategoryNameList"] as? [String] {
                            self.businessCategoryNameList = value
                        }
                    }
                }
                public var autoReview: Int32?

                public var businessCategoryNameList: GetRuleResponseBody.Data.Rules.RuleInfo.BusinessCategoryNameList?

                public var comments: String?

                public var createEmpid: String?

                public var createTime: String?

                public var endTime: String?

                public var isDelete: Int32?

                public var isOnline: Int32?

                public var lastUpdateEmpid: String?

                public var lastUpdateTime: String?

                public var name: String?

                public var rid: String?

                public var ruleLambda: String?

                public var ruleScoreType: Int32?

                public var scoreId: Int32?

                public var scoreName: String?

                public var scoreSubId: Int32?

                public var scoreSubName: String?

                public var startTime: String?

                public var status: Int32?

                public var type: Int32?

                public var weight: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.businessCategoryNameList?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.autoReview != nil {
                        map["AutoReview"] = self.autoReview!
                    }
                    if self.businessCategoryNameList != nil {
                        map["BusinessCategoryNameList"] = self.businessCategoryNameList?.toMap()
                    }
                    if self.comments != nil {
                        map["Comments"] = self.comments!
                    }
                    if self.createEmpid != nil {
                        map["CreateEmpid"] = self.createEmpid!
                    }
                    if self.createTime != nil {
                        map["CreateTime"] = self.createTime!
                    }
                    if self.endTime != nil {
                        map["EndTime"] = self.endTime!
                    }
                    if self.isDelete != nil {
                        map["IsDelete"] = self.isDelete!
                    }
                    if self.isOnline != nil {
                        map["IsOnline"] = self.isOnline!
                    }
                    if self.lastUpdateEmpid != nil {
                        map["LastUpdateEmpid"] = self.lastUpdateEmpid!
                    }
                    if self.lastUpdateTime != nil {
                        map["LastUpdateTime"] = self.lastUpdateTime!
                    }
                    if self.name != nil {
                        map["Name"] = self.name!
                    }
                    if self.rid != nil {
                        map["Rid"] = self.rid!
                    }
                    if self.ruleLambda != nil {
                        map["RuleLambda"] = self.ruleLambda!
                    }
                    if self.ruleScoreType != nil {
                        map["RuleScoreType"] = self.ruleScoreType!
                    }
                    if self.scoreId != nil {
                        map["ScoreId"] = self.scoreId!
                    }
                    if self.scoreName != nil {
                        map["ScoreName"] = self.scoreName!
                    }
                    if self.scoreSubId != nil {
                        map["ScoreSubId"] = self.scoreSubId!
                    }
                    if self.scoreSubName != nil {
                        map["ScoreSubName"] = self.scoreSubName!
                    }
                    if self.startTime != nil {
                        map["StartTime"] = self.startTime!
                    }
                    if self.status != nil {
                        map["Status"] = self.status!
                    }
                    if self.type != nil {
                        map["Type"] = self.type!
                    }
                    if self.weight != nil {
                        map["Weight"] = self.weight!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["AutoReview"] as? Int32 {
                        self.autoReview = value
                    }
                    if let value = dict["BusinessCategoryNameList"] as? [String: Any?] {
                        var model = GetRuleResponseBody.Data.Rules.RuleInfo.BusinessCategoryNameList()
                        model.fromMap(value)
                        self.businessCategoryNameList = model
                    }
                    if let value = dict["Comments"] as? String {
                        self.comments = value
                    }
                    if let value = dict["CreateEmpid"] as? String {
                        self.createEmpid = value
                    }
                    if let value = dict["CreateTime"] as? String {
                        self.createTime = value
                    }
                    if let value = dict["EndTime"] as? String {
                        self.endTime = value
                    }
                    if let value = dict["IsDelete"] as? Int32 {
                        self.isDelete = value
                    }
                    if let value = dict["IsOnline"] as? Int32 {
                        self.isOnline = value
                    }
                    if let value = dict["LastUpdateEmpid"] as? String {
                        self.lastUpdateEmpid = value
                    }
                    if let value = dict["LastUpdateTime"] as? String {
                        self.lastUpdateTime = value
                    }
                    if let value = dict["Name"] as? String {
                        self.name = value
                    }
                    if let value = dict["Rid"] as? String {
                        self.rid = value
                    }
                    if let value = dict["RuleLambda"] as? String {
                        self.ruleLambda = value
                    }
                    if let value = dict["RuleScoreType"] as? Int32 {
                        self.ruleScoreType = value
                    }
                    if let value = dict["ScoreId"] as? Int32 {
                        self.scoreId = value
                    }
                    if let value = dict["ScoreName"] as? String {
                        self.scoreName = value
                    }
                    if let value = dict["ScoreSubId"] as? Int32 {
                        self.scoreSubId = value
                    }
                    if let value = dict["ScoreSubName"] as? String {
                        self.scoreSubName = value
                    }
                    if let value = dict["StartTime"] as? String {
                        self.startTime = value
                    }
                    if let value = dict["Status"] as? Int32 {
                        self.status = value
                    }
                    if let value = dict["Type"] as? Int32 {
                        self.type = value
                    }
                    if let value = dict["Weight"] as? String {
                        self.weight = value
                    }
                }
            }
            public var ruleInfo: [GetRuleResponseBody.Data.Rules.RuleInfo]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.ruleInfo != nil {
                    var tmp : [Any] = []
                    for k in self.ruleInfo! {
                        tmp.append(k.toMap())
                    }
                    map["RuleInfo"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["RuleInfo"] as? [Any?] {
                    var tmp : [GetRuleResponseBody.Data.Rules.RuleInfo] = []
                    for v in value {
                        if v != nil {
                            var model = GetRuleResponseBody.Data.Rules.RuleInfo()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.ruleInfo = tmp
                }
            }
        }
        public var rules: GetRuleResponseBody.Data.Rules?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.rules?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.rules != nil {
                map["Rules"] = self.rules?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Rules"] as? [String: Any?] {
                var model = GetRuleResponseBody.Data.Rules()
                model.fromMap(value)
                self.rules = model
            }
        }
    }
    public var code: String?

    public var data: GetRuleResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetRuleResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetRuleByIdRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var ruleId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.ruleId != nil {
            map["RuleId"] = self.ruleId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["RuleId"] as? Int64 {
            self.ruleId = value
        }
    }
}

public class GetRuleByIdResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: RulesInfo?

    public var httpStatusCode: Int32?

    public var message: String?

    public var messages: [String]?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.messages != nil {
            map["Messages"] = self.messages!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = RulesInfo()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Messages"] as? [String] {
            self.messages = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetRuleByIdResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetRuleByIdResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetRuleByIdResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetRuleCategoryRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var jsonStr: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.jsonStr != nil {
            map["JsonStr"] = self.jsonStr!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["JsonStr"] as? String {
            self.jsonStr = value
        }
    }
}

public class GetRuleCategoryResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class RuleCountInfo : Tea.TeaModel {
            public var select: Bool?

            public var type: Int32?

            public var typeName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.select != nil {
                    map["Select"] = self.select!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                if self.typeName != nil {
                    map["TypeName"] = self.typeName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Select"] as? Bool {
                    self.select = value
                }
                if let value = dict["Type"] as? Int32 {
                    self.type = value
                }
                if let value = dict["TypeName"] as? String {
                    self.typeName = value
                }
            }
        }
        public var ruleCountInfo: [GetRuleCategoryResponseBody.Data.RuleCountInfo]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.ruleCountInfo != nil {
                var tmp : [Any] = []
                for k in self.ruleCountInfo! {
                    tmp.append(k.toMap())
                }
                map["RuleCountInfo"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["RuleCountInfo"] as? [Any?] {
                var tmp : [GetRuleCategoryResponseBody.Data.RuleCountInfo] = []
                for v in value {
                    if v != nil {
                        var model = GetRuleCategoryResponseBody.Data.RuleCountInfo()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.ruleCountInfo = tmp
            }
        }
    }
    public var code: String?

    public var data: GetRuleCategoryResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetRuleCategoryResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetRuleCategoryResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetRuleCategoryResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetRuleCategoryResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetRuleDetailRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var jsonStr: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.jsonStr != nil {
            map["JsonStr"] = self.jsonStr!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["JsonStr"] as? String {
            self.jsonStr = value
        }
    }
}

public class GetRuleDetailResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Conditions : Tea.TeaModel {
            public class ConditionBasicInfo : Tea.TeaModel {
                public class CheckRange : Tea.TeaModel {
                    public class Anchor : Tea.TeaModel {
                        public var anchorCid: String?

                        public var hitTime: Int32?

                        public var location: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.anchorCid != nil {
                                map["AnchorCid"] = self.anchorCid!
                            }
                            if self.hitTime != nil {
                                map["HitTime"] = self.hitTime!
                            }
                            if self.location != nil {
                                map["Location"] = self.location!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["AnchorCid"] as? String {
                                self.anchorCid = value
                            }
                            if let value = dict["HitTime"] as? Int32 {
                                self.hitTime = value
                            }
                            if let value = dict["Location"] as? String {
                                self.location = value
                            }
                        }
                    }
                    public class Range : Tea.TeaModel {
                        public var from: Int32?

                        public var to: Int32?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.from != nil {
                                map["From"] = self.from!
                            }
                            if self.to != nil {
                                map["To"] = self.to!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["From"] as? Int32 {
                                self.from = value
                            }
                            if let value = dict["To"] as? Int32 {
                                self.to = value
                            }
                        }
                    }
                    public var absolute: Bool?

                    public var anchor: GetRuleDetailResponseBody.Data.Conditions.ConditionBasicInfo.CheckRange.Anchor?

                    public var range: GetRuleDetailResponseBody.Data.Conditions.ConditionBasicInfo.CheckRange.Range?

                    public var role: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                        try self.anchor?.validate()
                        try self.range?.validate()
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.absolute != nil {
                            map["Absolute"] = self.absolute!
                        }
                        if self.anchor != nil {
                            map["Anchor"] = self.anchor?.toMap()
                        }
                        if self.range != nil {
                            map["Range"] = self.range?.toMap()
                        }
                        if self.role != nil {
                            map["Role"] = self.role!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Absolute"] as? Bool {
                            self.absolute = value
                        }
                        if let value = dict["Anchor"] as? [String: Any?] {
                            var model = GetRuleDetailResponseBody.Data.Conditions.ConditionBasicInfo.CheckRange.Anchor()
                            model.fromMap(value)
                            self.anchor = model
                        }
                        if let value = dict["Range"] as? [String: Any?] {
                            var model = GetRuleDetailResponseBody.Data.Conditions.ConditionBasicInfo.CheckRange.Range()
                            model.fromMap(value)
                            self.range = model
                        }
                        if let value = dict["Role"] as? String {
                            self.role = value
                        }
                    }
                }
                public class Operators : Tea.TeaModel {
                    public class OperatorBasicInfo : Tea.TeaModel {
                        public class Param : Tea.TeaModel {
                            public class AntModelInfo : Tea.TeaModel {
                                public var antModelInfo: [String]?

                                public override init() {
                                    super.init()
                                }

                                public init(_ dict: [String: Any]) {
                                    super.init()
                                    self.fromMap(dict)
                                }

                                public override func validate() throws -> Void {
                                }

                                public override func toMap() -> [String : Any] {
                                    var map = super.toMap()
                                    if self.antModelInfo != nil {
                                        map["AntModelInfo"] = self.antModelInfo!
                                    }
                                    return map
                                }

                                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                    guard let dict else { return }
                                    if let value = dict["AntModelInfo"] as? [String] {
                                        self.antModelInfo = value
                                    }
                                }
                            }
                            public class Excludes : Tea.TeaModel {
                                public var excludes: [String]?

                                public override init() {
                                    super.init()
                                }

                                public init(_ dict: [String: Any]) {
                                    super.init()
                                    self.fromMap(dict)
                                }

                                public override func validate() throws -> Void {
                                }

                                public override func toMap() -> [String : Any] {
                                    var map = super.toMap()
                                    if self.excludes != nil {
                                        map["Excludes"] = self.excludes!
                                    }
                                    return map
                                }

                                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                    guard let dict else { return }
                                    if let value = dict["Excludes"] as? [String] {
                                        self.excludes = value
                                    }
                                }
                            }
                            public class OperKeyWords : Tea.TeaModel {
                                public var operKeyWord: [String]?

                                public override init() {
                                    super.init()
                                }

                                public init(_ dict: [String: Any]) {
                                    super.init()
                                    self.fromMap(dict)
                                }

                                public override func validate() throws -> Void {
                                }

                                public override func toMap() -> [String : Any] {
                                    var map = super.toMap()
                                    if self.operKeyWord != nil {
                                        map["OperKeyWord"] = self.operKeyWord!
                                    }
                                    return map
                                }

                                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                    guard let dict else { return }
                                    if let value = dict["OperKeyWord"] as? [String] {
                                        self.operKeyWord = value
                                    }
                                }
                            }
                            public class Pvalues : Tea.TeaModel {
                                public var pvalues: [String]?

                                public override init() {
                                    super.init()
                                }

                                public init(_ dict: [String: Any]) {
                                    super.init()
                                    self.fromMap(dict)
                                }

                                public override func validate() throws -> Void {
                                }

                                public override func toMap() -> [String : Any] {
                                    var map = super.toMap()
                                    if self.pvalues != nil {
                                        map["Pvalues"] = self.pvalues!
                                    }
                                    return map
                                }

                                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                    guard let dict else { return }
                                    if let value = dict["Pvalues"] as? [String] {
                                        self.pvalues = value
                                    }
                                }
                            }
                            public class References : Tea.TeaModel {
                                public var reference: [String]?

                                public override init() {
                                    super.init()
                                }

                                public init(_ dict: [String: Any]) {
                                    super.init()
                                    self.fromMap(dict)
                                }

                                public override func validate() throws -> Void {
                                }

                                public override func toMap() -> [String : Any] {
                                    var map = super.toMap()
                                    if self.reference != nil {
                                        map["Reference"] = self.reference!
                                    }
                                    return map
                                }

                                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                    guard let dict else { return }
                                    if let value = dict["Reference"] as? [String] {
                                        self.reference = value
                                    }
                                }
                            }
                            public class SimilarlySentences : Tea.TeaModel {
                                public var similarlySentence: [String]?

                                public override init() {
                                    super.init()
                                }

                                public init(_ dict: [String: Any]) {
                                    super.init()
                                    self.fromMap(dict)
                                }

                                public override func validate() throws -> Void {
                                }

                                public override func toMap() -> [String : Any] {
                                    var map = super.toMap()
                                    if self.similarlySentence != nil {
                                        map["SimilarlySentence"] = self.similarlySentence!
                                    }
                                    return map
                                }

                                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                    guard let dict else { return }
                                    if let value = dict["SimilarlySentence"] as? [String] {
                                        self.similarlySentence = value
                                    }
                                }
                            }
                            public var antModelInfo: GetRuleDetailResponseBody.Data.Conditions.ConditionBasicInfo.Operators.OperatorBasicInfo.Param.AntModelInfo?

                            public var average: Bool?

                            public var beginType: String?

                            public var checkType: Int32?

                            public var compareOperator: String?

                            public var contextChatMatch: Bool?

                            public var delayTime: Int32?

                            public var differentRole: Bool?

                            public var excludes: GetRuleDetailResponseBody.Data.Conditions.ConditionBasicInfo.Operators.OperatorBasicInfo.Param.Excludes?

                            public var from: Int32?

                            public var fromEnd: Bool?

                            public var hitTime: Int32?

                            public var inSentence: Bool?

                            public var interval: Int32?

                            public var keywordExtension: Bool?

                            public var keywordMatchSize: Int32?

                            public var maxEmotionChangeValue: Int32?

                            public var minWordSize: Int32?

                            public var notRegex: String?

                            public var operKeyWords: GetRuleDetailResponseBody.Data.Conditions.ConditionBasicInfo.Operators.OperatorBasicInfo.Param.OperKeyWords?

                            public var phrase: String?

                            public var pvalues: GetRuleDetailResponseBody.Data.Conditions.ConditionBasicInfo.Operators.OperatorBasicInfo.Param.Pvalues?

                            public var references: GetRuleDetailResponseBody.Data.Conditions.ConditionBasicInfo.Operators.OperatorBasicInfo.Param.References?

                            public var regex: String?

                            public var score: Int32?

                            public var similarityThreshold: Double?

                            public var similarlySentences: GetRuleDetailResponseBody.Data.Conditions.ConditionBasicInfo.Operators.OperatorBasicInfo.Param.SimilarlySentences?

                            public var target: Int32?

                            public var targetRole: String?

                            public var threshold: Double?

                            public var velocityInMint: Int32?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                                try self.antModelInfo?.validate()
                                try self.excludes?.validate()
                                try self.operKeyWords?.validate()
                                try self.pvalues?.validate()
                                try self.references?.validate()
                                try self.similarlySentences?.validate()
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.antModelInfo != nil {
                                    map["AntModelInfo"] = self.antModelInfo?.toMap()
                                }
                                if self.average != nil {
                                    map["Average"] = self.average!
                                }
                                if self.beginType != nil {
                                    map["BeginType"] = self.beginType!
                                }
                                if self.checkType != nil {
                                    map["CheckType"] = self.checkType!
                                }
                                if self.compareOperator != nil {
                                    map["CompareOperator"] = self.compareOperator!
                                }
                                if self.contextChatMatch != nil {
                                    map["ContextChatMatch"] = self.contextChatMatch!
                                }
                                if self.delayTime != nil {
                                    map["DelayTime"] = self.delayTime!
                                }
                                if self.differentRole != nil {
                                    map["DifferentRole"] = self.differentRole!
                                }
                                if self.excludes != nil {
                                    map["Excludes"] = self.excludes?.toMap()
                                }
                                if self.from != nil {
                                    map["From"] = self.from!
                                }
                                if self.fromEnd != nil {
                                    map["FromEnd"] = self.fromEnd!
                                }
                                if self.hitTime != nil {
                                    map["HitTime"] = self.hitTime!
                                }
                                if self.inSentence != nil {
                                    map["InSentence"] = self.inSentence!
                                }
                                if self.interval != nil {
                                    map["Interval"] = self.interval!
                                }
                                if self.keywordExtension != nil {
                                    map["KeywordExtension"] = self.keywordExtension!
                                }
                                if self.keywordMatchSize != nil {
                                    map["KeywordMatchSize"] = self.keywordMatchSize!
                                }
                                if self.maxEmotionChangeValue != nil {
                                    map["MaxEmotionChangeValue"] = self.maxEmotionChangeValue!
                                }
                                if self.minWordSize != nil {
                                    map["MinWordSize"] = self.minWordSize!
                                }
                                if self.notRegex != nil {
                                    map["NotRegex"] = self.notRegex!
                                }
                                if self.operKeyWords != nil {
                                    map["OperKeyWords"] = self.operKeyWords?.toMap()
                                }
                                if self.phrase != nil {
                                    map["Phrase"] = self.phrase!
                                }
                                if self.pvalues != nil {
                                    map["Pvalues"] = self.pvalues?.toMap()
                                }
                                if self.references != nil {
                                    map["References"] = self.references?.toMap()
                                }
                                if self.regex != nil {
                                    map["Regex"] = self.regex!
                                }
                                if self.score != nil {
                                    map["Score"] = self.score!
                                }
                                if self.similarityThreshold != nil {
                                    map["Similarity_threshold"] = self.similarityThreshold!
                                }
                                if self.similarlySentences != nil {
                                    map["SimilarlySentences"] = self.similarlySentences?.toMap()
                                }
                                if self.target != nil {
                                    map["Target"] = self.target!
                                }
                                if self.targetRole != nil {
                                    map["TargetRole"] = self.targetRole!
                                }
                                if self.threshold != nil {
                                    map["Threshold"] = self.threshold!
                                }
                                if self.velocityInMint != nil {
                                    map["VelocityInMint"] = self.velocityInMint!
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                guard let dict else { return }
                                if let value = dict["AntModelInfo"] as? [String: Any?] {
                                    var model = GetRuleDetailResponseBody.Data.Conditions.ConditionBasicInfo.Operators.OperatorBasicInfo.Param.AntModelInfo()
                                    model.fromMap(value)
                                    self.antModelInfo = model
                                }
                                if let value = dict["Average"] as? Bool {
                                    self.average = value
                                }
                                if let value = dict["BeginType"] as? String {
                                    self.beginType = value
                                }
                                if let value = dict["CheckType"] as? Int32 {
                                    self.checkType = value
                                }
                                if let value = dict["CompareOperator"] as? String {
                                    self.compareOperator = value
                                }
                                if let value = dict["ContextChatMatch"] as? Bool {
                                    self.contextChatMatch = value
                                }
                                if let value = dict["DelayTime"] as? Int32 {
                                    self.delayTime = value
                                }
                                if let value = dict["DifferentRole"] as? Bool {
                                    self.differentRole = value
                                }
                                if let value = dict["Excludes"] as? [String: Any?] {
                                    var model = GetRuleDetailResponseBody.Data.Conditions.ConditionBasicInfo.Operators.OperatorBasicInfo.Param.Excludes()
                                    model.fromMap(value)
                                    self.excludes = model
                                }
                                if let value = dict["From"] as? Int32 {
                                    self.from = value
                                }
                                if let value = dict["FromEnd"] as? Bool {
                                    self.fromEnd = value
                                }
                                if let value = dict["HitTime"] as? Int32 {
                                    self.hitTime = value
                                }
                                if let value = dict["InSentence"] as? Bool {
                                    self.inSentence = value
                                }
                                if let value = dict["Interval"] as? Int32 {
                                    self.interval = value
                                }
                                if let value = dict["KeywordExtension"] as? Bool {
                                    self.keywordExtension = value
                                }
                                if let value = dict["KeywordMatchSize"] as? Int32 {
                                    self.keywordMatchSize = value
                                }
                                if let value = dict["MaxEmotionChangeValue"] as? Int32 {
                                    self.maxEmotionChangeValue = value
                                }
                                if let value = dict["MinWordSize"] as? Int32 {
                                    self.minWordSize = value
                                }
                                if let value = dict["NotRegex"] as? String {
                                    self.notRegex = value
                                }
                                if let value = dict["OperKeyWords"] as? [String: Any?] {
                                    var model = GetRuleDetailResponseBody.Data.Conditions.ConditionBasicInfo.Operators.OperatorBasicInfo.Param.OperKeyWords()
                                    model.fromMap(value)
                                    self.operKeyWords = model
                                }
                                if let value = dict["Phrase"] as? String {
                                    self.phrase = value
                                }
                                if let value = dict["Pvalues"] as? [String: Any?] {
                                    var model = GetRuleDetailResponseBody.Data.Conditions.ConditionBasicInfo.Operators.OperatorBasicInfo.Param.Pvalues()
                                    model.fromMap(value)
                                    self.pvalues = model
                                }
                                if let value = dict["References"] as? [String: Any?] {
                                    var model = GetRuleDetailResponseBody.Data.Conditions.ConditionBasicInfo.Operators.OperatorBasicInfo.Param.References()
                                    model.fromMap(value)
                                    self.references = model
                                }
                                if let value = dict["Regex"] as? String {
                                    self.regex = value
                                }
                                if let value = dict["Score"] as? Int32 {
                                    self.score = value
                                }
                                if let value = dict["Similarity_threshold"] as? Double {
                                    self.similarityThreshold = value
                                }
                                if let value = dict["SimilarlySentences"] as? [String: Any?] {
                                    var model = GetRuleDetailResponseBody.Data.Conditions.ConditionBasicInfo.Operators.OperatorBasicInfo.Param.SimilarlySentences()
                                    model.fromMap(value)
                                    self.similarlySentences = model
                                }
                                if let value = dict["Target"] as? Int32 {
                                    self.target = value
                                }
                                if let value = dict["TargetRole"] as? String {
                                    self.targetRole = value
                                }
                                if let value = dict["Threshold"] as? Double {
                                    self.threshold = value
                                }
                                if let value = dict["VelocityInMint"] as? Int32 {
                                    self.velocityInMint = value
                                }
                            }
                        }
                        public var oid: String?

                        public var operName: String?

                        public var param: GetRuleDetailResponseBody.Data.Conditions.ConditionBasicInfo.Operators.OperatorBasicInfo.Param?

                        public var type: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                            try self.param?.validate()
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.oid != nil {
                                map["Oid"] = self.oid!
                            }
                            if self.operName != nil {
                                map["OperName"] = self.operName!
                            }
                            if self.param != nil {
                                map["Param"] = self.param?.toMap()
                            }
                            if self.type != nil {
                                map["Type"] = self.type!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Oid"] as? String {
                                self.oid = value
                            }
                            if let value = dict["OperName"] as? String {
                                self.operName = value
                            }
                            if let value = dict["Param"] as? [String: Any?] {
                                var model = GetRuleDetailResponseBody.Data.Conditions.ConditionBasicInfo.Operators.OperatorBasicInfo.Param()
                                model.fromMap(value)
                                self.param = model
                            }
                            if let value = dict["Type"] as? String {
                                self.type = value
                            }
                        }
                    }
                    public var operatorBasicInfo: [GetRuleDetailResponseBody.Data.Conditions.ConditionBasicInfo.Operators.OperatorBasicInfo]?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.operatorBasicInfo != nil {
                            var tmp : [Any] = []
                            for k in self.operatorBasicInfo! {
                                tmp.append(k.toMap())
                            }
                            map["OperatorBasicInfo"] = tmp
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["OperatorBasicInfo"] as? [Any?] {
                            var tmp : [GetRuleDetailResponseBody.Data.Conditions.ConditionBasicInfo.Operators.OperatorBasicInfo] = []
                            for v in value {
                                if v != nil {
                                    var model = GetRuleDetailResponseBody.Data.Conditions.ConditionBasicInfo.Operators.OperatorBasicInfo()
                                    if v != nil {
                                        model.fromMap(v as? [String: Any?])
                                    }
                                    tmp.append(model)
                                }
                            }
                            self.operatorBasicInfo = tmp
                        }
                    }
                }
                public var checkRange: GetRuleDetailResponseBody.Data.Conditions.ConditionBasicInfo.CheckRange?

                public var conditionInfoCid: String?

                public var operLambda: String?

                public var operators: GetRuleDetailResponseBody.Data.Conditions.ConditionBasicInfo.Operators?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.checkRange?.validate()
                    try self.operators?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.checkRange != nil {
                        map["CheckRange"] = self.checkRange?.toMap()
                    }
                    if self.conditionInfoCid != nil {
                        map["ConditionInfoCid"] = self.conditionInfoCid!
                    }
                    if self.operLambda != nil {
                        map["OperLambda"] = self.operLambda!
                    }
                    if self.operators != nil {
                        map["Operators"] = self.operators?.toMap()
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["CheckRange"] as? [String: Any?] {
                        var model = GetRuleDetailResponseBody.Data.Conditions.ConditionBasicInfo.CheckRange()
                        model.fromMap(value)
                        self.checkRange = model
                    }
                    if let value = dict["ConditionInfoCid"] as? String {
                        self.conditionInfoCid = value
                    }
                    if let value = dict["OperLambda"] as? String {
                        self.operLambda = value
                    }
                    if let value = dict["Operators"] as? [String: Any?] {
                        var model = GetRuleDetailResponseBody.Data.Conditions.ConditionBasicInfo.Operators()
                        model.fromMap(value)
                        self.operators = model
                    }
                }
            }
            public var conditionBasicInfo: [GetRuleDetailResponseBody.Data.Conditions.ConditionBasicInfo]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.conditionBasicInfo != nil {
                    var tmp : [Any] = []
                    for k in self.conditionBasicInfo! {
                        tmp.append(k.toMap())
                    }
                    map["ConditionBasicInfo"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ConditionBasicInfo"] as? [Any?] {
                    var tmp : [GetRuleDetailResponseBody.Data.Conditions.ConditionBasicInfo] = []
                    for v in value {
                        if v != nil {
                            var model = GetRuleDetailResponseBody.Data.Conditions.ConditionBasicInfo()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.conditionBasicInfo = tmp
                }
            }
        }
        public class Rules : Tea.TeaModel {
            public class RuleBasicInfo : Tea.TeaModel {
                public class BusinessCategories : Tea.TeaModel {
                    public class BusinessCategoryBasicInfo : Tea.TeaModel {
                        public var bid: Int32?

                        public var businessName: String?

                        public var serviceType: Int32?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.bid != nil {
                                map["Bid"] = self.bid!
                            }
                            if self.businessName != nil {
                                map["BusinessName"] = self.businessName!
                            }
                            if self.serviceType != nil {
                                map["ServiceType"] = self.serviceType!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Bid"] as? Int32 {
                                self.bid = value
                            }
                            if let value = dict["BusinessName"] as? String {
                                self.businessName = value
                            }
                            if let value = dict["ServiceType"] as? Int32 {
                                self.serviceType = value
                            }
                        }
                    }
                    public var businessCategoryBasicInfo: [GetRuleDetailResponseBody.Data.Rules.RuleBasicInfo.BusinessCategories.BusinessCategoryBasicInfo]?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.businessCategoryBasicInfo != nil {
                            var tmp : [Any] = []
                            for k in self.businessCategoryBasicInfo! {
                                tmp.append(k.toMap())
                            }
                            map["BusinessCategoryBasicInfo"] = tmp
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["BusinessCategoryBasicInfo"] as? [Any?] {
                            var tmp : [GetRuleDetailResponseBody.Data.Rules.RuleBasicInfo.BusinessCategories.BusinessCategoryBasicInfo] = []
                            for v in value {
                                if v != nil {
                                    var model = GetRuleDetailResponseBody.Data.Rules.RuleBasicInfo.BusinessCategories.BusinessCategoryBasicInfo()
                                    if v != nil {
                                        model.fromMap(v as? [String: Any?])
                                    }
                                    tmp.append(model)
                                }
                            }
                            self.businessCategoryBasicInfo = tmp
                        }
                    }
                }
                public class Triggers : Tea.TeaModel {
                    public var trigger: [String]?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.trigger != nil {
                            map["Trigger"] = self.trigger!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Trigger"] as? [String] {
                            self.trigger = value
                        }
                    }
                }
                public var businessCategories: GetRuleDetailResponseBody.Data.Rules.RuleBasicInfo.BusinessCategories?

                public var rid: String?

                public var ruleLambda: String?

                public var triggers: GetRuleDetailResponseBody.Data.Rules.RuleBasicInfo.Triggers?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.businessCategories?.validate()
                    try self.triggers?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.businessCategories != nil {
                        map["BusinessCategories"] = self.businessCategories?.toMap()
                    }
                    if self.rid != nil {
                        map["Rid"] = self.rid!
                    }
                    if self.ruleLambda != nil {
                        map["RuleLambda"] = self.ruleLambda!
                    }
                    if self.triggers != nil {
                        map["Triggers"] = self.triggers?.toMap()
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["BusinessCategories"] as? [String: Any?] {
                        var model = GetRuleDetailResponseBody.Data.Rules.RuleBasicInfo.BusinessCategories()
                        model.fromMap(value)
                        self.businessCategories = model
                    }
                    if let value = dict["Rid"] as? String {
                        self.rid = value
                    }
                    if let value = dict["RuleLambda"] as? String {
                        self.ruleLambda = value
                    }
                    if let value = dict["Triggers"] as? [String: Any?] {
                        var model = GetRuleDetailResponseBody.Data.Rules.RuleBasicInfo.Triggers()
                        model.fromMap(value)
                        self.triggers = model
                    }
                }
            }
            public var ruleBasicInfo: [GetRuleDetailResponseBody.Data.Rules.RuleBasicInfo]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.ruleBasicInfo != nil {
                    var tmp : [Any] = []
                    for k in self.ruleBasicInfo! {
                        tmp.append(k.toMap())
                    }
                    map["RuleBasicInfo"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["RuleBasicInfo"] as? [Any?] {
                    var tmp : [GetRuleDetailResponseBody.Data.Rules.RuleBasicInfo] = []
                    for v in value {
                        if v != nil {
                            var model = GetRuleDetailResponseBody.Data.Rules.RuleBasicInfo()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.ruleBasicInfo = tmp
                }
            }
        }
        public var conditions: GetRuleDetailResponseBody.Data.Conditions?

        public var count: Int32?

        public var pageNumber: Int32?

        public var pageSize: Int32?

        public var rules: GetRuleDetailResponseBody.Data.Rules?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.conditions?.validate()
            try self.rules?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.conditions != nil {
                map["Conditions"] = self.conditions?.toMap()
            }
            if self.count != nil {
                map["Count"] = self.count!
            }
            if self.pageNumber != nil {
                map["PageNumber"] = self.pageNumber!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.rules != nil {
                map["Rules"] = self.rules?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Conditions"] as? [String: Any?] {
                var model = GetRuleDetailResponseBody.Data.Conditions()
                model.fromMap(value)
                self.conditions = model
            }
            if let value = dict["Count"] as? Int32 {
                self.count = value
            }
            if let value = dict["PageNumber"] as? Int32 {
                self.pageNumber = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
            if let value = dict["Rules"] as? [String: Any?] {
                var model = GetRuleDetailResponseBody.Data.Rules()
                model.fromMap(value)
                self.rules = model
            }
        }
    }
    public var code: String?

    public var data: GetRuleDetailResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetRuleDetailResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetRuleDetailResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetRuleDetailResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetRuleDetailResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetRuleV4Request : Tea.TeaModel {
    public var ruleId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ruleId != nil {
            map["RuleId"] = self.ruleId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RuleId"] as? Int64 {
            self.ruleId = value
        }
    }
}

public class GetRuleV4ResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: RulesInfo?

    public var httpStatusCode: Int32?

    public var message: String?

    public var messages: [String]?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.messages != nil {
            map["Messages"] = self.messages!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = RulesInfo()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Messages"] as? [String] {
            self.messages = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetRuleV4Response : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetRuleV4ResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetRuleV4ResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetRulesCountListRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var businessName: String?

    public var businessRange: Int32?

    public var categoryName: String?

    public var countTotal: Bool?

    public var createEmpid: String?

    public var createUserId: Int64?

    public var currentPage: Int32?

    public var endTime: String?

    public var lastUpdateEmpid: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requireInfos: [String]?

    public var rid: Int64?

    public var ruleIdOrRuleName: String?

    public var ruleScoreSingleType: Int32?

    public var ruleType: Int32?

    public var schemeId: Int64?

    public var sourceType: Int32?

    public var startTime: String?

    public var status: Int32?

    public var type: Int32?

    public var typeName: String?

    public var updateEndTime: String?

    public var updateStartTime: String?

    public var updateUserId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.businessName != nil {
            map["BusinessName"] = self.businessName!
        }
        if self.businessRange != nil {
            map["BusinessRange"] = self.businessRange!
        }
        if self.categoryName != nil {
            map["CategoryName"] = self.categoryName!
        }
        if self.countTotal != nil {
            map["CountTotal"] = self.countTotal!
        }
        if self.createEmpid != nil {
            map["CreateEmpid"] = self.createEmpid!
        }
        if self.createUserId != nil {
            map["CreateUserId"] = self.createUserId!
        }
        if self.currentPage != nil {
            map["CurrentPage"] = self.currentPage!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.lastUpdateEmpid != nil {
            map["LastUpdateEmpid"] = self.lastUpdateEmpid!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requireInfos != nil {
            map["RequireInfos"] = self.requireInfos!
        }
        if self.rid != nil {
            map["Rid"] = self.rid!
        }
        if self.ruleIdOrRuleName != nil {
            map["RuleIdOrRuleName"] = self.ruleIdOrRuleName!
        }
        if self.ruleScoreSingleType != nil {
            map["RuleScoreSingleType"] = self.ruleScoreSingleType!
        }
        if self.ruleType != nil {
            map["RuleType"] = self.ruleType!
        }
        if self.schemeId != nil {
            map["SchemeId"] = self.schemeId!
        }
        if self.sourceType != nil {
            map["SourceType"] = self.sourceType!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        if self.typeName != nil {
            map["TypeName"] = self.typeName!
        }
        if self.updateEndTime != nil {
            map["UpdateEndTime"] = self.updateEndTime!
        }
        if self.updateStartTime != nil {
            map["UpdateStartTime"] = self.updateStartTime!
        }
        if self.updateUserId != nil {
            map["UpdateUserId"] = self.updateUserId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["BusinessName"] as? String {
            self.businessName = value
        }
        if let value = dict["BusinessRange"] as? Int32 {
            self.businessRange = value
        }
        if let value = dict["CategoryName"] as? String {
            self.categoryName = value
        }
        if let value = dict["CountTotal"] as? Bool {
            self.countTotal = value
        }
        if let value = dict["CreateEmpid"] as? String {
            self.createEmpid = value
        }
        if let value = dict["CreateUserId"] as? Int64 {
            self.createUserId = value
        }
        if let value = dict["CurrentPage"] as? Int32 {
            self.currentPage = value
        }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["LastUpdateEmpid"] as? String {
            self.lastUpdateEmpid = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequireInfos"] as? [String] {
            self.requireInfos = value
        }
        if let value = dict["Rid"] as? Int64 {
            self.rid = value
        }
        if let value = dict["RuleIdOrRuleName"] as? String {
            self.ruleIdOrRuleName = value
        }
        if let value = dict["RuleScoreSingleType"] as? Int32 {
            self.ruleScoreSingleType = value
        }
        if let value = dict["RuleType"] as? Int32 {
            self.ruleType = value
        }
        if let value = dict["SchemeId"] as? Int64 {
            self.schemeId = value
        }
        if let value = dict["SourceType"] as? Int32 {
            self.sourceType = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
        if let value = dict["Status"] as? Int32 {
            self.status = value
        }
        if let value = dict["Type"] as? Int32 {
            self.type = value
        }
        if let value = dict["TypeName"] as? String {
            self.typeName = value
        }
        if let value = dict["UpdateEndTime"] as? String {
            self.updateEndTime = value
        }
        if let value = dict["UpdateStartTime"] as? String {
            self.updateStartTime = value
        }
        if let value = dict["UpdateUserId"] as? Int64 {
            self.updateUserId = value
        }
    }
}

public class GetRulesCountListResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var data: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.data != nil {
                map["Data"] = self.data!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Data"] as? [String] {
                self.data = value
            }
        }
    }
    public class Messages : Tea.TeaModel {
        public var message: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.message != nil {
                map["Message"] = self.message!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Message"] as? [String] {
                self.message = value
            }
        }
    }
    public var businessType: Int32?

    public var code: String?

    public var count: Int32?

    public var currentPage: Int32?

    public var data: GetRulesCountListResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var messages: GetRulesCountListResponseBody.Messages?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var success: Bool?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
        try self.messages?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.businessType != nil {
            map["BusinessType"] = self.businessType!
        }
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.count != nil {
            map["Count"] = self.count!
        }
        if self.currentPage != nil {
            map["CurrentPage"] = self.currentPage!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.messages != nil {
            map["Messages"] = self.messages?.toMap()
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BusinessType"] as? Int32 {
            self.businessType = value
        }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Count"] as? Int32 {
            self.count = value
        }
        if let value = dict["CurrentPage"] as? Int32 {
            self.currentPage = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetRulesCountListResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Messages"] as? [String: Any?] {
            var model = GetRulesCountListResponseBody.Messages()
            model.fromMap(value)
            self.messages = model
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class GetRulesCountListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetRulesCountListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetRulesCountListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetSchemeTaskConfigRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var jsonStr: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.jsonStr != nil {
            map["JsonStr"] = self.jsonStr!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["JsonStr"] as? String {
            self.jsonStr = value
        }
    }
}

public class GetSchemeTaskConfigResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class DataConfig : Tea.TeaModel {
            public class AssignConfigs : Tea.TeaModel {
                public class AssignConfigContests : Tea.TeaModel {
                    public var dataType: Int32?

                    public var listObject: [Any]?

                    public var name: String?

                    public var symbol: Int32?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.dataType != nil {
                            map["DataType"] = self.dataType!
                        }
                        if self.listObject != nil {
                            map["ListObject"] = self.listObject!
                        }
                        if self.name != nil {
                            map["Name"] = self.name!
                        }
                        if self.symbol != nil {
                            map["Symbol"] = self.symbol!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["DataType"] as? Int32 {
                            self.dataType = value
                        }
                        if let value = dict["ListObject"] as? [Any] {
                            self.listObject = value
                        }
                        if let value = dict["Name"] as? String {
                            self.name = value
                        }
                        if let value = dict["Symbol"] as? Int32 {
                            self.symbol = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public var assignConfigContests: [GetSchemeTaskConfigResponseBody.Data.DataConfig.AssignConfigs.AssignConfigContests]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.assignConfigContests != nil {
                        var tmp : [Any] = []
                        for k in self.assignConfigContests! {
                            tmp.append(k.toMap())
                        }
                        map["AssignConfigContests"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["AssignConfigContests"] as? [Any?] {
                        var tmp : [GetSchemeTaskConfigResponseBody.Data.DataConfig.AssignConfigs.AssignConfigContests] = []
                        for v in value {
                            if v != nil {
                                var model = GetSchemeTaskConfigResponseBody.Data.DataConfig.AssignConfigs.AssignConfigContests()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.assignConfigContests = tmp
                    }
                }
            }
            public var assignConfigs: [GetSchemeTaskConfigResponseBody.Data.DataConfig.AssignConfigs]?

            public var dataSets: String?

            public var index: Int64?

            public var resultParam: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.assignConfigs != nil {
                    var tmp : [Any] = []
                    for k in self.assignConfigs! {
                        tmp.append(k.toMap())
                    }
                    map["AssignConfigs"] = tmp
                }
                if self.dataSets != nil {
                    map["DataSets"] = self.dataSets!
                }
                if self.index != nil {
                    map["Index"] = self.index!
                }
                if self.resultParam != nil {
                    map["ResultParam"] = self.resultParam!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AssignConfigs"] as? [Any?] {
                    var tmp : [GetSchemeTaskConfigResponseBody.Data.DataConfig.AssignConfigs] = []
                    for v in value {
                        if v != nil {
                            var model = GetSchemeTaskConfigResponseBody.Data.DataConfig.AssignConfigs()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.assignConfigs = tmp
                }
                if let value = dict["DataSets"] as? String {
                    self.dataSets = value
                }
                if let value = dict["Index"] as? Int64 {
                    self.index = value
                }
                if let value = dict["ResultParam"] as? String {
                    self.resultParam = value
                }
            }
        }
        public class SchemeList : Tea.TeaModel {
            public var name: String?

            public var schemeId: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.schemeId != nil {
                    map["SchemeId"] = self.schemeId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["SchemeId"] as? Int64 {
                    self.schemeId = value
                }
            }
        }
        public var asrTaskPriority: Int32?

        public var assignType: Int32?

        public var dataConfig: GetSchemeTaskConfigResponseBody.Data.DataConfig?

        public var id: Int64?

        public var manualReview: Int32?

        public var modeCustomizationId: String?

        public var modelName: String?

        public var name: String?

        public var schemeIdList: [Int64]?

        public var schemeList: [GetSchemeTaskConfigResponseBody.Data.SchemeList]?

        public var schemeTaskConfigId: Int64?

        public var sourceDataType: String?

        public var status: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.dataConfig?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.asrTaskPriority != nil {
                map["AsrTaskPriority"] = self.asrTaskPriority!
            }
            if self.assignType != nil {
                map["AssignType"] = self.assignType!
            }
            if self.dataConfig != nil {
                map["DataConfig"] = self.dataConfig?.toMap()
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.manualReview != nil {
                map["ManualReview"] = self.manualReview!
            }
            if self.modeCustomizationId != nil {
                map["ModeCustomizationId"] = self.modeCustomizationId!
            }
            if self.modelName != nil {
                map["ModelName"] = self.modelName!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.schemeIdList != nil {
                map["SchemeIdList"] = self.schemeIdList!
            }
            if self.schemeList != nil {
                var tmp : [Any] = []
                for k in self.schemeList! {
                    tmp.append(k.toMap())
                }
                map["SchemeList"] = tmp
            }
            if self.schemeTaskConfigId != nil {
                map["SchemeTaskConfigId"] = self.schemeTaskConfigId!
            }
            if self.sourceDataType != nil {
                map["SourceDataType"] = self.sourceDataType!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AsrTaskPriority"] as? Int32 {
                self.asrTaskPriority = value
            }
            if let value = dict["AssignType"] as? Int32 {
                self.assignType = value
            }
            if let value = dict["DataConfig"] as? [String: Any?] {
                var model = GetSchemeTaskConfigResponseBody.Data.DataConfig()
                model.fromMap(value)
                self.dataConfig = model
            }
            if let value = dict["Id"] as? Int64 {
                self.id = value
            }
            if let value = dict["ManualReview"] as? Int32 {
                self.manualReview = value
            }
            if let value = dict["ModeCustomizationId"] as? String {
                self.modeCustomizationId = value
            }
            if let value = dict["ModelName"] as? String {
                self.modelName = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["SchemeIdList"] as? [Int64] {
                self.schemeIdList = value
            }
            if let value = dict["SchemeList"] as? [Any?] {
                var tmp : [GetSchemeTaskConfigResponseBody.Data.SchemeList] = []
                for v in value {
                    if v != nil {
                        var model = GetSchemeTaskConfigResponseBody.Data.SchemeList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.schemeList = tmp
            }
            if let value = dict["SchemeTaskConfigId"] as? Int64 {
                self.schemeTaskConfigId = value
            }
            if let value = dict["SourceDataType"] as? String {
                self.sourceDataType = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
        }
    }
    public var code: String?

    public var data: GetSchemeTaskConfigResponseBody.Data?

    public var httpStatusCode: String?

    public var message: String?

    public var requestId: String?

    public var success: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetSchemeTaskConfigResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? String {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? String {
            self.success = value
        }
    }
}

public class GetSchemeTaskConfigResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetSchemeTaskConfigResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetSchemeTaskConfigResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetScoreInfoRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var jsonStr: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.jsonStr != nil {
            map["JsonStr"] = self.jsonStr!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["JsonStr"] as? String {
            self.jsonStr = value
        }
    }
}

public class GetScoreInfoResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class ScorePo : Tea.TeaModel {
            public class ScoreInfos : Tea.TeaModel {
                public class ScoreParam : Tea.TeaModel {
                    public var scoreNum: Int32?

                    public var scoreSubId: Int32?

                    public var scoreSubName: String?

                    public var scoreType: Int32?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.scoreNum != nil {
                            map["ScoreNum"] = self.scoreNum!
                        }
                        if self.scoreSubId != nil {
                            map["ScoreSubId"] = self.scoreSubId!
                        }
                        if self.scoreSubName != nil {
                            map["ScoreSubName"] = self.scoreSubName!
                        }
                        if self.scoreType != nil {
                            map["ScoreType"] = self.scoreType!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["ScoreNum"] as? Int32 {
                            self.scoreNum = value
                        }
                        if let value = dict["ScoreSubId"] as? Int32 {
                            self.scoreSubId = value
                        }
                        if let value = dict["ScoreSubName"] as? String {
                            self.scoreSubName = value
                        }
                        if let value = dict["ScoreType"] as? Int32 {
                            self.scoreType = value
                        }
                    }
                }
                public var scoreParam: [GetScoreInfoResponseBody.Data.ScorePo.ScoreInfos.ScoreParam]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.scoreParam != nil {
                        var tmp : [Any] = []
                        for k in self.scoreParam! {
                            tmp.append(k.toMap())
                        }
                        map["ScoreParam"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["ScoreParam"] as? [Any?] {
                        var tmp : [GetScoreInfoResponseBody.Data.ScorePo.ScoreInfos.ScoreParam] = []
                        for v in value {
                            if v != nil {
                                var model = GetScoreInfoResponseBody.Data.ScorePo.ScoreInfos.ScoreParam()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.scoreParam = tmp
                    }
                }
            }
            public var scoreId: Int32?

            public var scoreInfos: GetScoreInfoResponseBody.Data.ScorePo.ScoreInfos?

            public var scoreName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.scoreInfos?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.scoreId != nil {
                    map["ScoreId"] = self.scoreId!
                }
                if self.scoreInfos != nil {
                    map["ScoreInfos"] = self.scoreInfos?.toMap()
                }
                if self.scoreName != nil {
                    map["ScoreName"] = self.scoreName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ScoreId"] as? Int32 {
                    self.scoreId = value
                }
                if let value = dict["ScoreInfos"] as? [String: Any?] {
                    var model = GetScoreInfoResponseBody.Data.ScorePo.ScoreInfos()
                    model.fromMap(value)
                    self.scoreInfos = model
                }
                if let value = dict["ScoreName"] as? String {
                    self.scoreName = value
                }
            }
        }
        public var scorePo: [GetScoreInfoResponseBody.Data.ScorePo]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.scorePo != nil {
                var tmp : [Any] = []
                for k in self.scorePo! {
                    tmp.append(k.toMap())
                }
                map["ScorePo"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ScorePo"] as? [Any?] {
                var tmp : [GetScoreInfoResponseBody.Data.ScorePo] = []
                for v in value {
                    if v != nil {
                        var model = GetScoreInfoResponseBody.Data.ScorePo()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.scorePo = tmp
            }
        }
    }
    public var code: String?

    public var data: GetScoreInfoResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetScoreInfoResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetScoreInfoResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetScoreInfoResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetScoreInfoResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetSkillGroupConfigRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var jsonStr: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.jsonStr != nil {
            map["JsonStr"] = self.jsonStr!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["JsonStr"] as? String {
            self.jsonStr = value
        }
    }
}

public class GetSkillGroupConfigResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class AllRuleList : Tea.TeaModel {
            public class RuleNameInfo : Tea.TeaModel {
                public var rid: Int64?

                public var ruleName: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.rid != nil {
                        map["Rid"] = self.rid!
                    }
                    if self.ruleName != nil {
                        map["RuleName"] = self.ruleName!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Rid"] as? Int64 {
                        self.rid = value
                    }
                    if let value = dict["RuleName"] as? String {
                        self.ruleName = value
                    }
                }
            }
            public var ruleNameInfo: [GetSkillGroupConfigResponseBody.Data.AllRuleList.RuleNameInfo]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.ruleNameInfo != nil {
                    var tmp : [Any] = []
                    for k in self.ruleNameInfo! {
                        tmp.append(k.toMap())
                    }
                    map["RuleNameInfo"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["RuleNameInfo"] as? [Any?] {
                    var tmp : [GetSkillGroupConfigResponseBody.Data.AllRuleList.RuleNameInfo] = []
                    for v in value {
                        if v != nil {
                            var model = GetSkillGroupConfigResponseBody.Data.AllRuleList.RuleNameInfo()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.ruleNameInfo = tmp
                }
            }
        }
        public class RuleList : Tea.TeaModel {
            public class RuleNameInfo : Tea.TeaModel {
                public var rid: Int64?

                public var ruleName: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.rid != nil {
                        map["Rid"] = self.rid!
                    }
                    if self.ruleName != nil {
                        map["RuleName"] = self.ruleName!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Rid"] as? Int64 {
                        self.rid = value
                    }
                    if let value = dict["RuleName"] as? String {
                        self.ruleName = value
                    }
                }
            }
            public var ruleNameInfo: [GetSkillGroupConfigResponseBody.Data.RuleList.RuleNameInfo]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.ruleNameInfo != nil {
                    var tmp : [Any] = []
                    for k in self.ruleNameInfo! {
                        tmp.append(k.toMap())
                    }
                    map["RuleNameInfo"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["RuleNameInfo"] as? [Any?] {
                    var tmp : [GetSkillGroupConfigResponseBody.Data.RuleList.RuleNameInfo] = []
                    for v in value {
                        if v != nil {
                            var model = GetSkillGroupConfigResponseBody.Data.RuleList.RuleNameInfo()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.ruleNameInfo = tmp
                }
            }
        }
        public var allContentQualityCheck: Int32?

        public var allRids: String?

        public var allRuleList: GetSkillGroupConfigResponseBody.Data.AllRuleList?

        public var createTime: String?

        public var id: Int64?

        public var instanceId: String?

        public var modelId: Int64?

        public var modelName: String?

        public var name: String?

        public var qualityCheckType: Int32?

        public var rid: String?

        public var ruleList: GetSkillGroupConfigResponseBody.Data.RuleList?

        public var skillGroupFrom: Int32?

        public var skillGroupId: String?

        public var skillGroupName: String?

        public var status: Int32?

        public var type: Int32?

        public var updateTime: String?

        public var vocabId: Int64?

        public var vocabName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.allRuleList?.validate()
            try self.ruleList?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.allContentQualityCheck != nil {
                map["AllContentQualityCheck"] = self.allContentQualityCheck!
            }
            if self.allRids != nil {
                map["AllRids"] = self.allRids!
            }
            if self.allRuleList != nil {
                map["AllRuleList"] = self.allRuleList?.toMap()
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.instanceId != nil {
                map["InstanceId"] = self.instanceId!
            }
            if self.modelId != nil {
                map["ModelId"] = self.modelId!
            }
            if self.modelName != nil {
                map["ModelName"] = self.modelName!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.qualityCheckType != nil {
                map["QualityCheckType"] = self.qualityCheckType!
            }
            if self.rid != nil {
                map["Rid"] = self.rid!
            }
            if self.ruleList != nil {
                map["RuleList"] = self.ruleList?.toMap()
            }
            if self.skillGroupFrom != nil {
                map["SkillGroupFrom"] = self.skillGroupFrom!
            }
            if self.skillGroupId != nil {
                map["SkillGroupId"] = self.skillGroupId!
            }
            if self.skillGroupName != nil {
                map["SkillGroupName"] = self.skillGroupName!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            if self.updateTime != nil {
                map["UpdateTime"] = self.updateTime!
            }
            if self.vocabId != nil {
                map["VocabId"] = self.vocabId!
            }
            if self.vocabName != nil {
                map["VocabName"] = self.vocabName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AllContentQualityCheck"] as? Int32 {
                self.allContentQualityCheck = value
            }
            if let value = dict["AllRids"] as? String {
                self.allRids = value
            }
            if let value = dict["AllRuleList"] as? [String: Any?] {
                var model = GetSkillGroupConfigResponseBody.Data.AllRuleList()
                model.fromMap(value)
                self.allRuleList = model
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["Id"] as? Int64 {
                self.id = value
            }
            if let value = dict["InstanceId"] as? String {
                self.instanceId = value
            }
            if let value = dict["ModelId"] as? Int64 {
                self.modelId = value
            }
            if let value = dict["ModelName"] as? String {
                self.modelName = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["QualityCheckType"] as? Int32 {
                self.qualityCheckType = value
            }
            if let value = dict["Rid"] as? String {
                self.rid = value
            }
            if let value = dict["RuleList"] as? [String: Any?] {
                var model = GetSkillGroupConfigResponseBody.Data.RuleList()
                model.fromMap(value)
                self.ruleList = model
            }
            if let value = dict["SkillGroupFrom"] as? Int32 {
                self.skillGroupFrom = value
            }
            if let value = dict["SkillGroupId"] as? String {
                self.skillGroupId = value
            }
            if let value = dict["SkillGroupName"] as? String {
                self.skillGroupName = value
            }
            if let value = dict["Status"] as? Int32 {
                self.status = value
            }
            if let value = dict["Type"] as? Int32 {
                self.type = value
            }
            if let value = dict["UpdateTime"] as? String {
                self.updateTime = value
            }
            if let value = dict["VocabId"] as? Int64 {
                self.vocabId = value
            }
            if let value = dict["VocabName"] as? String {
                self.vocabName = value
            }
        }
    }
    public var code: String?

    public var data: GetSkillGroupConfigResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetSkillGroupConfigResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetSkillGroupConfigResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetSkillGroupConfigResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetSkillGroupConfigResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetSyncResultRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var jsonStr: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.jsonStr != nil {
            map["JsonStr"] = self.jsonStr!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["JsonStr"] as? String {
            self.jsonStr = value
        }
    }
}

public class GetSyncResultResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Agent : Tea.TeaModel {
            public var id: String?

            public var name: String?

            public var skillGroup: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.skillGroup != nil {
                    map["SkillGroup"] = self.skillGroup!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["SkillGroup"] as? String {
                    self.skillGroup = value
                }
            }
        }
        public class AsrResult : Tea.TeaModel {
            public var begin: Int64?

            public var emotionValue: Int32?

            public var end: Int64?

            public var role: String?

            public var silenceDuration: Int32?

            public var speechRate: Int32?

            public var words: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.begin != nil {
                    map["Begin"] = self.begin!
                }
                if self.emotionValue != nil {
                    map["EmotionValue"] = self.emotionValue!
                }
                if self.end != nil {
                    map["End"] = self.end!
                }
                if self.role != nil {
                    map["Role"] = self.role!
                }
                if self.silenceDuration != nil {
                    map["SilenceDuration"] = self.silenceDuration!
                }
                if self.speechRate != nil {
                    map["SpeechRate"] = self.speechRate!
                }
                if self.words != nil {
                    map["Words"] = self.words!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Begin"] as? Int64 {
                    self.begin = value
                }
                if let value = dict["EmotionValue"] as? Int32 {
                    self.emotionValue = value
                }
                if let value = dict["End"] as? Int64 {
                    self.end = value
                }
                if let value = dict["Role"] as? String {
                    self.role = value
                }
                if let value = dict["SilenceDuration"] as? Int32 {
                    self.silenceDuration = value
                }
                if let value = dict["SpeechRate"] as? Int32 {
                    self.speechRate = value
                }
                if let value = dict["Words"] as? String {
                    self.words = value
                }
            }
        }
        public class HitResult : Tea.TeaModel {
            public class Hits : Tea.TeaModel {
                public class KeyWords : Tea.TeaModel {
                    public var cid: String?

                    public var from: Int32?

                    public var to: Int32?

                    public var val: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.cid != nil {
                            map["Cid"] = self.cid!
                        }
                        if self.from != nil {
                            map["From"] = self.from!
                        }
                        if self.to != nil {
                            map["To"] = self.to!
                        }
                        if self.val != nil {
                            map["Val"] = self.val!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Cid"] as? String {
                            self.cid = value
                        }
                        if let value = dict["From"] as? Int32 {
                            self.from = value
                        }
                        if let value = dict["To"] as? Int32 {
                            self.to = value
                        }
                        if let value = dict["Val"] as? String {
                            self.val = value
                        }
                    }
                }
                public class Phrase : Tea.TeaModel {
                    public var begin: Int64?

                    public var emotionValue: Int32?

                    public var end: Int32?

                    public var role: String?

                    public var silenceDuration: Int32?

                    public var speechRate: Int32?

                    public var words: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.begin != nil {
                            map["Begin"] = self.begin!
                        }
                        if self.emotionValue != nil {
                            map["EmotionValue"] = self.emotionValue!
                        }
                        if self.end != nil {
                            map["End"] = self.end!
                        }
                        if self.role != nil {
                            map["Role"] = self.role!
                        }
                        if self.silenceDuration != nil {
                            map["SilenceDuration"] = self.silenceDuration!
                        }
                        if self.speechRate != nil {
                            map["SpeechRate"] = self.speechRate!
                        }
                        if self.words != nil {
                            map["Words"] = self.words!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Begin"] as? Int64 {
                            self.begin = value
                        }
                        if let value = dict["EmotionValue"] as? Int32 {
                            self.emotionValue = value
                        }
                        if let value = dict["End"] as? Int32 {
                            self.end = value
                        }
                        if let value = dict["Role"] as? String {
                            self.role = value
                        }
                        if let value = dict["SilenceDuration"] as? Int32 {
                            self.silenceDuration = value
                        }
                        if let value = dict["SpeechRate"] as? Int32 {
                            self.speechRate = value
                        }
                        if let value = dict["Words"] as? String {
                            self.words = value
                        }
                    }
                }
                public var cid: [String]?

                public var keyWords: [GetSyncResultResponseBody.Data.HitResult.Hits.KeyWords]?

                public var phrase: GetSyncResultResponseBody.Data.HitResult.Hits.Phrase?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.phrase?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.cid != nil {
                        map["Cid"] = self.cid!
                    }
                    if self.keyWords != nil {
                        var tmp : [Any] = []
                        for k in self.keyWords! {
                            tmp.append(k.toMap())
                        }
                        map["KeyWords"] = tmp
                    }
                    if self.phrase != nil {
                        map["Phrase"] = self.phrase?.toMap()
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Cid"] as? [String] {
                        self.cid = value
                    }
                    if let value = dict["KeyWords"] as? [Any?] {
                        var tmp : [GetSyncResultResponseBody.Data.HitResult.Hits.KeyWords] = []
                        for v in value {
                            if v != nil {
                                var model = GetSyncResultResponseBody.Data.HitResult.Hits.KeyWords()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.keyWords = tmp
                    }
                    if let value = dict["Phrase"] as? [String: Any?] {
                        var model = GetSyncResultResponseBody.Data.HitResult.Hits.Phrase()
                        model.fromMap(value)
                        self.phrase = model
                    }
                }
            }
            public var hits: [GetSyncResultResponseBody.Data.HitResult.Hits]?

            public var name: String?

            public var reviewResult: Int32?

            public var rid: String?

            public var type: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.hits != nil {
                    var tmp : [Any] = []
                    for k in self.hits! {
                        tmp.append(k.toMap())
                    }
                    map["Hits"] = tmp
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.reviewResult != nil {
                    map["ReviewResult"] = self.reviewResult!
                }
                if self.rid != nil {
                    map["Rid"] = self.rid!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Hits"] as? [Any?] {
                    var tmp : [GetSyncResultResponseBody.Data.HitResult.Hits] = []
                    for v in value {
                        if v != nil {
                            var model = GetSyncResultResponseBody.Data.HitResult.Hits()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.hits = tmp
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["ReviewResult"] as? Int32 {
                    self.reviewResult = value
                }
                if let value = dict["Rid"] as? String {
                    self.rid = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
            }
        }
        public class Recording : Tea.TeaModel {
            public var business: String?

            public var callId: String?

            public var callTime: String?

            public var callType: Int32?

            public var callee: String?

            public var caller: String?

            public var dataSetName: String?

            public var duration: Int64?

            public var durationAudio: Int64?

            public var id: String?

            public var name: String?

            public var primaryId: String?

            public var remark1: String?

            public var remark2: String?

            public var remark3: String?

            public var url: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.business != nil {
                    map["Business"] = self.business!
                }
                if self.callId != nil {
                    map["CallId"] = self.callId!
                }
                if self.callTime != nil {
                    map["CallTime"] = self.callTime!
                }
                if self.callType != nil {
                    map["CallType"] = self.callType!
                }
                if self.callee != nil {
                    map["Callee"] = self.callee!
                }
                if self.caller != nil {
                    map["Caller"] = self.caller!
                }
                if self.dataSetName != nil {
                    map["DataSetName"] = self.dataSetName!
                }
                if self.duration != nil {
                    map["Duration"] = self.duration!
                }
                if self.durationAudio != nil {
                    map["DurationAudio"] = self.durationAudio!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.primaryId != nil {
                    map["PrimaryId"] = self.primaryId!
                }
                if self.remark1 != nil {
                    map["Remark1"] = self.remark1!
                }
                if self.remark2 != nil {
                    map["Remark2"] = self.remark2!
                }
                if self.remark3 != nil {
                    map["Remark3"] = self.remark3!
                }
                if self.url != nil {
                    map["Url"] = self.url!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Business"] as? String {
                    self.business = value
                }
                if let value = dict["CallId"] as? String {
                    self.callId = value
                }
                if let value = dict["CallTime"] as? String {
                    self.callTime = value
                }
                if let value = dict["CallType"] as? Int32 {
                    self.callType = value
                }
                if let value = dict["Callee"] as? String {
                    self.callee = value
                }
                if let value = dict["Caller"] as? String {
                    self.caller = value
                }
                if let value = dict["DataSetName"] as? String {
                    self.dataSetName = value
                }
                if let value = dict["Duration"] as? Int64 {
                    self.duration = value
                }
                if let value = dict["DurationAudio"] as? Int64 {
                    self.durationAudio = value
                }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["PrimaryId"] as? String {
                    self.primaryId = value
                }
                if let value = dict["Remark1"] as? String {
                    self.remark1 = value
                }
                if let value = dict["Remark2"] as? String {
                    self.remark2 = value
                }
                if let value = dict["Remark3"] as? String {
                    self.remark3 = value
                }
                if let value = dict["Url"] as? String {
                    self.url = value
                }
            }
        }
        public var agent: GetSyncResultResponseBody.Data.Agent?

        public var asrResult: [GetSyncResultResponseBody.Data.AsrResult]?

        public var comments: String?

        public var createTime: String?

        public var errorMessage: String?

        public var hitResult: [GetSyncResultResponseBody.Data.HitResult]?

        public var recording: GetSyncResultResponseBody.Data.Recording?

        public var resolver: String?

        public var reviewResult: Int32?

        public var reviewStatus: Int32?

        public var reviewer: String?

        public var score: Int32?

        public var status: Int32?

        public var taskId: String?

        public var taskName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.agent?.validate()
            try self.recording?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.agent != nil {
                map["Agent"] = self.agent?.toMap()
            }
            if self.asrResult != nil {
                var tmp : [Any] = []
                for k in self.asrResult! {
                    tmp.append(k.toMap())
                }
                map["AsrResult"] = tmp
            }
            if self.comments != nil {
                map["Comments"] = self.comments!
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.errorMessage != nil {
                map["ErrorMessage"] = self.errorMessage!
            }
            if self.hitResult != nil {
                var tmp : [Any] = []
                for k in self.hitResult! {
                    tmp.append(k.toMap())
                }
                map["HitResult"] = tmp
            }
            if self.recording != nil {
                map["Recording"] = self.recording?.toMap()
            }
            if self.resolver != nil {
                map["Resolver"] = self.resolver!
            }
            if self.reviewResult != nil {
                map["ReviewResult"] = self.reviewResult!
            }
            if self.reviewStatus != nil {
                map["ReviewStatus"] = self.reviewStatus!
            }
            if self.reviewer != nil {
                map["Reviewer"] = self.reviewer!
            }
            if self.score != nil {
                map["Score"] = self.score!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            if self.taskName != nil {
                map["TaskName"] = self.taskName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Agent"] as? [String: Any?] {
                var model = GetSyncResultResponseBody.Data.Agent()
                model.fromMap(value)
                self.agent = model
            }
            if let value = dict["AsrResult"] as? [Any?] {
                var tmp : [GetSyncResultResponseBody.Data.AsrResult] = []
                for v in value {
                    if v != nil {
                        var model = GetSyncResultResponseBody.Data.AsrResult()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.asrResult = tmp
            }
            if let value = dict["Comments"] as? String {
                self.comments = value
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["ErrorMessage"] as? String {
                self.errorMessage = value
            }
            if let value = dict["HitResult"] as? [Any?] {
                var tmp : [GetSyncResultResponseBody.Data.HitResult] = []
                for v in value {
                    if v != nil {
                        var model = GetSyncResultResponseBody.Data.HitResult()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.hitResult = tmp
            }
            if let value = dict["Recording"] as? [String: Any?] {
                var model = GetSyncResultResponseBody.Data.Recording()
                model.fromMap(value)
                self.recording = model
            }
            if let value = dict["Resolver"] as? String {
                self.resolver = value
            }
            if let value = dict["ReviewResult"] as? Int32 {
                self.reviewResult = value
            }
            if let value = dict["ReviewStatus"] as? Int32 {
                self.reviewStatus = value
            }
            if let value = dict["Reviewer"] as? String {
                self.reviewer = value
            }
            if let value = dict["Score"] as? Int32 {
                self.score = value
            }
            if let value = dict["Status"] as? Int32 {
                self.status = value
            }
            if let value = dict["TaskId"] as? String {
                self.taskId = value
            }
            if let value = dict["TaskName"] as? String {
                self.taskName = value
            }
        }
    }
    public var code: String?

    public var count: Int32?

    public var data: [GetSyncResultResponseBody.Data]?

    public var message: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var resultCountId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.count != nil {
            map["Count"] = self.count!
        }
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultCountId != nil {
            map["ResultCountId"] = self.resultCountId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Count"] as? Int32 {
            self.count = value
        }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [GetSyncResultResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = GetSyncResultResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["ResultCountId"] as? String {
            self.resultCountId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetSyncResultResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetSyncResultResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetSyncResultResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetWarningStrategyConfigRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var jsonStr: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.jsonStr != nil {
            map["JsonStr"] = self.jsonStr!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["JsonStr"] as? String {
            self.jsonStr = value
        }
    }
}

public class GetWarningStrategyConfigResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class WarningStrategyList : Tea.TeaModel {
            public class WarningStrategyList : Tea.TeaModel {
                public class Range : Tea.TeaModel {
                    public var rangeNum: Int64?

                    public var type: Int64?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.rangeNum != nil {
                            map["RangeNum"] = self.rangeNum!
                        }
                        if self.type != nil {
                            map["Type"] = self.type!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["RangeNum"] as? Int64 {
                            self.rangeNum = value
                        }
                        if let value = dict["Type"] as? Int64 {
                            self.type = value
                        }
                    }
                }
                public var code: String?

                public var duration: Int64?

                public var durationExpression: Int64?

                public var hitNumber: Int64?

                public var hitNumberExpression: Int64?

                public var hitRuleList: String?

                public var hitType: Int64?

                public var id: Int64?

                public var range: GetWarningStrategyConfigResponseBody.Data.WarningStrategyList.WarningStrategyList.Range?

                public var status: Int64?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.range?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.code != nil {
                        map["Code"] = self.code!
                    }
                    if self.duration != nil {
                        map["Duration"] = self.duration!
                    }
                    if self.durationExpression != nil {
                        map["DurationExpression"] = self.durationExpression!
                    }
                    if self.hitNumber != nil {
                        map["HitNumber"] = self.hitNumber!
                    }
                    if self.hitNumberExpression != nil {
                        map["HitNumberExpression"] = self.hitNumberExpression!
                    }
                    if self.hitRuleList != nil {
                        map["HitRuleList"] = self.hitRuleList!
                    }
                    if self.hitType != nil {
                        map["HitType"] = self.hitType!
                    }
                    if self.id != nil {
                        map["Id"] = self.id!
                    }
                    if self.range != nil {
                        map["Range"] = self.range?.toMap()
                    }
                    if self.status != nil {
                        map["Status"] = self.status!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Code"] as? String {
                        self.code = value
                    }
                    if let value = dict["Duration"] as? Int64 {
                        self.duration = value
                    }
                    if let value = dict["DurationExpression"] as? Int64 {
                        self.durationExpression = value
                    }
                    if let value = dict["HitNumber"] as? Int64 {
                        self.hitNumber = value
                    }
                    if let value = dict["HitNumberExpression"] as? Int64 {
                        self.hitNumberExpression = value
                    }
                    if let value = dict["HitRuleList"] as? String {
                        self.hitRuleList = value
                    }
                    if let value = dict["HitType"] as? Int64 {
                        self.hitType = value
                    }
                    if let value = dict["Id"] as? Int64 {
                        self.id = value
                    }
                    if let value = dict["Range"] as? [String: Any?] {
                        var model = GetWarningStrategyConfigResponseBody.Data.WarningStrategyList.WarningStrategyList.Range()
                        model.fromMap(value)
                        self.range = model
                    }
                    if let value = dict["Status"] as? Int64 {
                        self.status = value
                    }
                }
            }
            public var warningStrategyList: [GetWarningStrategyConfigResponseBody.Data.WarningStrategyList.WarningStrategyList]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.warningStrategyList != nil {
                    var tmp : [Any] = []
                    for k in self.warningStrategyList! {
                        tmp.append(k.toMap())
                    }
                    map["warningStrategyList"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["warningStrategyList"] as? [Any?] {
                    var tmp : [GetWarningStrategyConfigResponseBody.Data.WarningStrategyList.WarningStrategyList] = []
                    for v in value {
                        if v != nil {
                            var model = GetWarningStrategyConfigResponseBody.Data.WarningStrategyList.WarningStrategyList()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.warningStrategyList = tmp
                }
            }
        }
        public var id: Int64?

        public var intervalTime: Int64?

        public var lambda: String?

        public var level: Int64?

        public var maxNumber: Int64?

        public var name: String?

        public var warningStrategyList: GetWarningStrategyConfigResponseBody.Data.WarningStrategyList?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.warningStrategyList?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.intervalTime != nil {
                map["IntervalTime"] = self.intervalTime!
            }
            if self.lambda != nil {
                map["Lambda"] = self.lambda!
            }
            if self.level != nil {
                map["Level"] = self.level!
            }
            if self.maxNumber != nil {
                map["MaxNumber"] = self.maxNumber!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.warningStrategyList != nil {
                map["WarningStrategyList"] = self.warningStrategyList?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Id"] as? Int64 {
                self.id = value
            }
            if let value = dict["IntervalTime"] as? Int64 {
                self.intervalTime = value
            }
            if let value = dict["Lambda"] as? String {
                self.lambda = value
            }
            if let value = dict["Level"] as? Int64 {
                self.level = value
            }
            if let value = dict["MaxNumber"] as? Int64 {
                self.maxNumber = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["WarningStrategyList"] as? [String: Any?] {
                var model = GetWarningStrategyConfigResponseBody.Data.WarningStrategyList()
                model.fromMap(value)
                self.warningStrategyList = model
            }
        }
    }
    public var code: String?

    public var data: GetWarningStrategyConfigResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetWarningStrategyConfigResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetWarningStrategyConfigResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetWarningStrategyConfigResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetWarningStrategyConfigResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class HandleComplaintRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var jsonStr: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.jsonStr != nil {
            map["JsonStr"] = self.jsonStr!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["JsonStr"] as? String {
            self.jsonStr = value
        }
    }
}

public class HandleComplaintResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class HandleComplaintResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: HandleComplaintResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = HandleComplaintResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class InvalidRuleRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var jsonStr: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.jsonStr != nil {
            map["JsonStr"] = self.jsonStr!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["JsonStr"] as? String {
            self.jsonStr = value
        }
    }
}

public class InvalidRuleResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: Bool?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? Bool {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class InvalidRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: InvalidRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = InvalidRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListAsrVocabRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var jsonStr: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.jsonStr != nil {
            map["JsonStr"] = self.jsonStr!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["JsonStr"] as? String {
            self.jsonStr = value
        }
    }
}

public class ListAsrVocabResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class AsrVocab : Tea.TeaModel {
            public var asrVersion: Int32?

            public var createTime: String?

            public var id: String?

            public var modelCustomizationId: String?

            public var name: String?

            public var updateTime: String?

            public var vocabularyId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.asrVersion != nil {
                    map["AsrVersion"] = self.asrVersion!
                }
                if self.createTime != nil {
                    map["CreateTime"] = self.createTime!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.modelCustomizationId != nil {
                    map["ModelCustomizationId"] = self.modelCustomizationId!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.updateTime != nil {
                    map["UpdateTime"] = self.updateTime!
                }
                if self.vocabularyId != nil {
                    map["VocabularyId"] = self.vocabularyId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AsrVersion"] as? Int32 {
                    self.asrVersion = value
                }
                if let value = dict["CreateTime"] as? String {
                    self.createTime = value
                }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
                if let value = dict["ModelCustomizationId"] as? String {
                    self.modelCustomizationId = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["UpdateTime"] as? String {
                    self.updateTime = value
                }
                if let value = dict["VocabularyId"] as? String {
                    self.vocabularyId = value
                }
            }
        }
        public var asrVocab: [ListAsrVocabResponseBody.Data.AsrVocab]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.asrVocab != nil {
                var tmp : [Any] = []
                for k in self.asrVocab! {
                    tmp.append(k.toMap())
                }
                map["AsrVocab"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AsrVocab"] as? [Any?] {
                var tmp : [ListAsrVocabResponseBody.Data.AsrVocab] = []
                for v in value {
                    if v != nil {
                        var model = ListAsrVocabResponseBody.Data.AsrVocab()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.asrVocab = tmp
            }
        }
    }
    public var code: String?

    public var data: ListAsrVocabResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ListAsrVocabResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ListAsrVocabResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListAsrVocabResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListAsrVocabResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListDataSetRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var jsonStr: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.jsonStr != nil {
            map["JsonStr"] = self.jsonStr!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["JsonStr"] as? String {
            self.jsonStr = value
        }
    }
}

public class ListDataSetResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Data : Tea.TeaModel {
            public var autoTranscoding: Int32?

            public var channelId0: Int32?

            public var channelId1: Int32?

            public var channelType: Int32?

            public var createTime: String?

            public var createType: Int32?

            public var dataSetType: Int32?

            public var isDelete: Int32?

            public var roleConfigProp: String?

            public var roleConfigStatus: Int32?

            public var roleConfigTask: String?

            public var setBucketName: String?

            public var setDomain: String?

            public var setFolderName: String?

            public var setId: Int64?

            public var setName: String?

            public var setNumber: Int32?

            public var setRoleArn: String?

            public var setType: Int32?

            public var sourceDataType: Int32?

            public var subDir: String?

            public var updateTime: String?

            public var userGroup: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.autoTranscoding != nil {
                    map["AutoTranscoding"] = self.autoTranscoding!
                }
                if self.channelId0 != nil {
                    map["ChannelId0"] = self.channelId0!
                }
                if self.channelId1 != nil {
                    map["ChannelId1"] = self.channelId1!
                }
                if self.channelType != nil {
                    map["ChannelType"] = self.channelType!
                }
                if self.createTime != nil {
                    map["CreateTime"] = self.createTime!
                }
                if self.createType != nil {
                    map["CreateType"] = self.createType!
                }
                if self.dataSetType != nil {
                    map["DataSetType"] = self.dataSetType!
                }
                if self.isDelete != nil {
                    map["IsDelete"] = self.isDelete!
                }
                if self.roleConfigProp != nil {
                    map["RoleConfigProp"] = self.roleConfigProp!
                }
                if self.roleConfigStatus != nil {
                    map["RoleConfigStatus"] = self.roleConfigStatus!
                }
                if self.roleConfigTask != nil {
                    map["RoleConfigTask"] = self.roleConfigTask!
                }
                if self.setBucketName != nil {
                    map["SetBucketName"] = self.setBucketName!
                }
                if self.setDomain != nil {
                    map["SetDomain"] = self.setDomain!
                }
                if self.setFolderName != nil {
                    map["SetFolderName"] = self.setFolderName!
                }
                if self.setId != nil {
                    map["SetId"] = self.setId!
                }
                if self.setName != nil {
                    map["SetName"] = self.setName!
                }
                if self.setNumber != nil {
                    map["SetNumber"] = self.setNumber!
                }
                if self.setRoleArn != nil {
                    map["SetRoleArn"] = self.setRoleArn!
                }
                if self.setType != nil {
                    map["SetType"] = self.setType!
                }
                if self.sourceDataType != nil {
                    map["SourceDataType"] = self.sourceDataType!
                }
                if self.subDir != nil {
                    map["SubDir"] = self.subDir!
                }
                if self.updateTime != nil {
                    map["UpdateTime"] = self.updateTime!
                }
                if self.userGroup != nil {
                    map["UserGroup"] = self.userGroup!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AutoTranscoding"] as? Int32 {
                    self.autoTranscoding = value
                }
                if let value = dict["ChannelId0"] as? Int32 {
                    self.channelId0 = value
                }
                if let value = dict["ChannelId1"] as? Int32 {
                    self.channelId1 = value
                }
                if let value = dict["ChannelType"] as? Int32 {
                    self.channelType = value
                }
                if let value = dict["CreateTime"] as? String {
                    self.createTime = value
                }
                if let value = dict["CreateType"] as? Int32 {
                    self.createType = value
                }
                if let value = dict["DataSetType"] as? Int32 {
                    self.dataSetType = value
                }
                if let value = dict["IsDelete"] as? Int32 {
                    self.isDelete = value
                }
                if let value = dict["RoleConfigProp"] as? String {
                    self.roleConfigProp = value
                }
                if let value = dict["RoleConfigStatus"] as? Int32 {
                    self.roleConfigStatus = value
                }
                if let value = dict["RoleConfigTask"] as? String {
                    self.roleConfigTask = value
                }
                if let value = dict["SetBucketName"] as? String {
                    self.setBucketName = value
                }
                if let value = dict["SetDomain"] as? String {
                    self.setDomain = value
                }
                if let value = dict["SetFolderName"] as? String {
                    self.setFolderName = value
                }
                if let value = dict["SetId"] as? Int64 {
                    self.setId = value
                }
                if let value = dict["SetName"] as? String {
                    self.setName = value
                }
                if let value = dict["SetNumber"] as? Int32 {
                    self.setNumber = value
                }
                if let value = dict["SetRoleArn"] as? String {
                    self.setRoleArn = value
                }
                if let value = dict["SetType"] as? Int32 {
                    self.setType = value
                }
                if let value = dict["SourceDataType"] as? Int32 {
                    self.sourceDataType = value
                }
                if let value = dict["SubDir"] as? String {
                    self.subDir = value
                }
                if let value = dict["UpdateTime"] as? String {
                    self.updateTime = value
                }
                if let value = dict["UserGroup"] as? String {
                    self.userGroup = value
                }
            }
        }
        public var data: [ListDataSetResponseBody.Data.Data]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.data != nil {
                var tmp : [Any] = []
                for k in self.data! {
                    tmp.append(k.toMap())
                }
                map["Data"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Data"] as? [Any?] {
                var tmp : [ListDataSetResponseBody.Data.Data] = []
                for v in value {
                    if v != nil {
                        var model = ListDataSetResponseBody.Data.Data()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.data = tmp
            }
        }
    }
    public class Messages : Tea.TeaModel {
        public var message: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.message != nil {
                map["Message"] = self.message!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Message"] as? [String] {
                self.message = value
            }
        }
    }
    public var code: String?

    public var count: Int32?

    public var currentPage: Int32?

    public var data: ListDataSetResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var messages: ListDataSetResponseBody.Messages?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
        try self.messages?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.count != nil {
            map["Count"] = self.count!
        }
        if self.currentPage != nil {
            map["CurrentPage"] = self.currentPage!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.messages != nil {
            map["Messages"] = self.messages?.toMap()
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Count"] as? Int32 {
            self.count = value
        }
        if let value = dict["CurrentPage"] as? Int32 {
            self.currentPage = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ListDataSetResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Messages"] as? [String: Any?] {
            var model = ListDataSetResponseBody.Messages()
            model.fromMap(value)
            self.messages = model
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ListDataSetResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListDataSetResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListDataSetResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListPrecisionTaskRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var jsonStr: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.jsonStr != nil {
            map["JsonStr"] = self.jsonStr!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["JsonStr"] as? String {
            self.jsonStr = value
        }
    }
}

public class ListPrecisionTaskResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class PrecisionTask : Tea.TeaModel {
            public class Precisions : Tea.TeaModel {
                public class Precision : Tea.TeaModel {
                    public var createTime: String?

                    public var modelId: Int64?

                    public var modelName: String?

                    public var precision: Double?

                    public var status: Int32?

                    public var taskId: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.createTime != nil {
                            map["CreateTime"] = self.createTime!
                        }
                        if self.modelId != nil {
                            map["ModelId"] = self.modelId!
                        }
                        if self.modelName != nil {
                            map["ModelName"] = self.modelName!
                        }
                        if self.precision != nil {
                            map["Precision"] = self.precision!
                        }
                        if self.status != nil {
                            map["Status"] = self.status!
                        }
                        if self.taskId != nil {
                            map["TaskId"] = self.taskId!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["CreateTime"] as? String {
                            self.createTime = value
                        }
                        if let value = dict["ModelId"] as? Int64 {
                            self.modelId = value
                        }
                        if let value = dict["ModelName"] as? String {
                            self.modelName = value
                        }
                        if let value = dict["Precision"] as? Double {
                            self.precision = value
                        }
                        if let value = dict["Status"] as? Int32 {
                            self.status = value
                        }
                        if let value = dict["TaskId"] as? String {
                            self.taskId = value
                        }
                    }
                }
                public var precision: [ListPrecisionTaskResponseBody.Data.PrecisionTask.Precisions.Precision]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.precision != nil {
                        var tmp : [Any] = []
                        for k in self.precision! {
                            tmp.append(k.toMap())
                        }
                        map["Precision"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Precision"] as? [Any?] {
                        var tmp : [ListPrecisionTaskResponseBody.Data.PrecisionTask.Precisions.Precision] = []
                        for v in value {
                            if v != nil {
                                var model = ListPrecisionTaskResponseBody.Data.PrecisionTask.Precisions.Precision()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.precision = tmp
                    }
                }
            }
            public var createTime: String?

            public var dataSetId: Int64?

            public var dataSetName: String?

            public var duration: Int32?

            public var incorrectWords: Int32?

            public var name: String?

            public var precisions: ListPrecisionTaskResponseBody.Data.PrecisionTask.Precisions?

            public var source: Int32?

            public var status: Int32?

            public var taskId: String?

            public var totalCount: Int32?

            public var updateTime: String?

            public var verifiedCount: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.precisions?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.createTime != nil {
                    map["CreateTime"] = self.createTime!
                }
                if self.dataSetId != nil {
                    map["DataSetId"] = self.dataSetId!
                }
                if self.dataSetName != nil {
                    map["DataSetName"] = self.dataSetName!
                }
                if self.duration != nil {
                    map["Duration"] = self.duration!
                }
                if self.incorrectWords != nil {
                    map["IncorrectWords"] = self.incorrectWords!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.precisions != nil {
                    map["Precisions"] = self.precisions?.toMap()
                }
                if self.source != nil {
                    map["Source"] = self.source!
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                if self.taskId != nil {
                    map["TaskId"] = self.taskId!
                }
                if self.totalCount != nil {
                    map["TotalCount"] = self.totalCount!
                }
                if self.updateTime != nil {
                    map["UpdateTime"] = self.updateTime!
                }
                if self.verifiedCount != nil {
                    map["VerifiedCount"] = self.verifiedCount!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CreateTime"] as? String {
                    self.createTime = value
                }
                if let value = dict["DataSetId"] as? Int64 {
                    self.dataSetId = value
                }
                if let value = dict["DataSetName"] as? String {
                    self.dataSetName = value
                }
                if let value = dict["Duration"] as? Int32 {
                    self.duration = value
                }
                if let value = dict["IncorrectWords"] as? Int32 {
                    self.incorrectWords = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["Precisions"] as? [String: Any?] {
                    var model = ListPrecisionTaskResponseBody.Data.PrecisionTask.Precisions()
                    model.fromMap(value)
                    self.precisions = model
                }
                if let value = dict["Source"] as? Int32 {
                    self.source = value
                }
                if let value = dict["Status"] as? Int32 {
                    self.status = value
                }
                if let value = dict["TaskId"] as? String {
                    self.taskId = value
                }
                if let value = dict["TotalCount"] as? Int32 {
                    self.totalCount = value
                }
                if let value = dict["UpdateTime"] as? String {
                    self.updateTime = value
                }
                if let value = dict["VerifiedCount"] as? Int32 {
                    self.verifiedCount = value
                }
            }
        }
        public var precisionTask: [ListPrecisionTaskResponseBody.Data.PrecisionTask]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.precisionTask != nil {
                var tmp : [Any] = []
                for k in self.precisionTask! {
                    tmp.append(k.toMap())
                }
                map["PrecisionTask"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["PrecisionTask"] as? [Any?] {
                var tmp : [ListPrecisionTaskResponseBody.Data.PrecisionTask] = []
                for v in value {
                    if v != nil {
                        var model = ListPrecisionTaskResponseBody.Data.PrecisionTask()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.precisionTask = tmp
            }
        }
    }
    public var code: String?

    public var count: Int32?

    public var data: ListPrecisionTaskResponseBody.Data?

    public var message: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.count != nil {
            map["Count"] = self.count!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Count"] as? Int32 {
            self.count = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ListPrecisionTaskResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ListPrecisionTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListPrecisionTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListPrecisionTaskResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListQualityCheckSchemeRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var jsonStr: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.jsonStr != nil {
            map["JsonStr"] = self.jsonStr!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["JsonStr"] as? String {
            self.jsonStr = value
        }
    }
}

public class ListQualityCheckSchemeResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class RuleList : Tea.TeaModel {
            public class Rules : Tea.TeaModel {
                public var checkType: Int32?

                public var name: String?

                public var rid: Int64?

                public var ruleScoreType: Int32?

                public var scoreNum: Int32?

                public var scoreNumType: Int32?

                public var scoreType: Int32?

                public var targetType: Int32?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.checkType != nil {
                        map["CheckType"] = self.checkType!
                    }
                    if self.name != nil {
                        map["Name"] = self.name!
                    }
                    if self.rid != nil {
                        map["Rid"] = self.rid!
                    }
                    if self.ruleScoreType != nil {
                        map["RuleScoreType"] = self.ruleScoreType!
                    }
                    if self.scoreNum != nil {
                        map["ScoreNum"] = self.scoreNum!
                    }
                    if self.scoreNumType != nil {
                        map["ScoreNumType"] = self.scoreNumType!
                    }
                    if self.scoreType != nil {
                        map["ScoreType"] = self.scoreType!
                    }
                    if self.targetType != nil {
                        map["TargetType"] = self.targetType!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["CheckType"] as? Int32 {
                        self.checkType = value
                    }
                    if let value = dict["Name"] as? String {
                        self.name = value
                    }
                    if let value = dict["Rid"] as? Int64 {
                        self.rid = value
                    }
                    if let value = dict["RuleScoreType"] as? Int32 {
                        self.ruleScoreType = value
                    }
                    if let value = dict["ScoreNum"] as? Int32 {
                        self.scoreNum = value
                    }
                    if let value = dict["ScoreNumType"] as? Int32 {
                        self.scoreNumType = value
                    }
                    if let value = dict["ScoreType"] as? Int32 {
                        self.scoreType = value
                    }
                    if let value = dict["TargetType"] as? Int32 {
                        self.targetType = value
                    }
                }
            }
            public var rules: [ListQualityCheckSchemeResponseBody.Data.RuleList.Rules]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.rules != nil {
                    var tmp : [Any] = []
                    for k in self.rules! {
                        tmp.append(k.toMap())
                    }
                    map["Rules"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Rules"] as? [Any?] {
                    var tmp : [ListQualityCheckSchemeResponseBody.Data.RuleList.Rules] = []
                    for v in value {
                        if v != nil {
                            var model = ListQualityCheckSchemeResponseBody.Data.RuleList.Rules()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.rules = tmp
                }
            }
        }
        public class SchemeCheckTypeList : Tea.TeaModel {
            public var checkName: String?

            public var checkType: Int32?

            public var enable: Int32?

            public var score: Int32?

            public var targetType: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.checkName != nil {
                    map["CheckName"] = self.checkName!
                }
                if self.checkType != nil {
                    map["CheckType"] = self.checkType!
                }
                if self.enable != nil {
                    map["Enable"] = self.enable!
                }
                if self.score != nil {
                    map["Score"] = self.score!
                }
                if self.targetType != nil {
                    map["TargetType"] = self.targetType!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CheckName"] as? String {
                    self.checkName = value
                }
                if let value = dict["CheckType"] as? Int32 {
                    self.checkType = value
                }
                if let value = dict["Enable"] as? Int32 {
                    self.enable = value
                }
                if let value = dict["Score"] as? Int32 {
                    self.score = value
                }
                if let value = dict["TargetType"] as? Int32 {
                    self.targetType = value
                }
            }
        }
        public var createTime: String?

        public var createUserName: String?

        public var dataType: Int32?

        public var description_: String?

        public var name: String?

        public var ruleList: [ListQualityCheckSchemeResponseBody.Data.RuleList]?

        public var schemeCheckTypeList: [ListQualityCheckSchemeResponseBody.Data.SchemeCheckTypeList]?

        public var schemeId: Int64?

        public var status: Int32?

        public var templateType: Int32?

        public var type: Int32?

        public var updateTime: String?

        public var updateUserName: String?

        public var version: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.createUserName != nil {
                map["CreateUserName"] = self.createUserName!
            }
            if self.dataType != nil {
                map["DataType"] = self.dataType!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.ruleList != nil {
                var tmp : [Any] = []
                for k in self.ruleList! {
                    tmp.append(k.toMap())
                }
                map["RuleList"] = tmp
            }
            if self.schemeCheckTypeList != nil {
                var tmp : [Any] = []
                for k in self.schemeCheckTypeList! {
                    tmp.append(k.toMap())
                }
                map["SchemeCheckTypeList"] = tmp
            }
            if self.schemeId != nil {
                map["SchemeId"] = self.schemeId!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.templateType != nil {
                map["TemplateType"] = self.templateType!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            if self.updateTime != nil {
                map["UpdateTime"] = self.updateTime!
            }
            if self.updateUserName != nil {
                map["UpdateUserName"] = self.updateUserName!
            }
            if self.version != nil {
                map["Version"] = self.version!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["CreateUserName"] as? String {
                self.createUserName = value
            }
            if let value = dict["DataType"] as? Int32 {
                self.dataType = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["RuleList"] as? [Any?] {
                var tmp : [ListQualityCheckSchemeResponseBody.Data.RuleList] = []
                for v in value {
                    if v != nil {
                        var model = ListQualityCheckSchemeResponseBody.Data.RuleList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.ruleList = tmp
            }
            if let value = dict["SchemeCheckTypeList"] as? [Any?] {
                var tmp : [ListQualityCheckSchemeResponseBody.Data.SchemeCheckTypeList] = []
                for v in value {
                    if v != nil {
                        var model = ListQualityCheckSchemeResponseBody.Data.SchemeCheckTypeList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.schemeCheckTypeList = tmp
            }
            if let value = dict["SchemeId"] as? Int64 {
                self.schemeId = value
            }
            if let value = dict["Status"] as? Int32 {
                self.status = value
            }
            if let value = dict["TemplateType"] as? Int32 {
                self.templateType = value
            }
            if let value = dict["Type"] as? Int32 {
                self.type = value
            }
            if let value = dict["UpdateTime"] as? String {
                self.updateTime = value
            }
            if let value = dict["UpdateUserName"] as? String {
                self.updateUserName = value
            }
            if let value = dict["Version"] as? Int64 {
                self.version = value
            }
        }
    }
    public var code: String?

    public var count: Int32?

    public var data: [ListQualityCheckSchemeResponseBody.Data]?

    public var message: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var resultCountId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.count != nil {
            map["Count"] = self.count!
        }
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultCountId != nil {
            map["ResultCountId"] = self.resultCountId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Count"] as? Int32 {
            self.count = value
        }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [ListQualityCheckSchemeResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = ListQualityCheckSchemeResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["ResultCountId"] as? String {
            self.resultCountId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ListQualityCheckSchemeResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListQualityCheckSchemeResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListQualityCheckSchemeResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListRulesRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var jsonStr: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.jsonStr != nil {
            map["JsonStr"] = self.jsonStr!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["JsonStr"] as? String {
            self.jsonStr = value
        }
    }
}

public class ListRulesResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var businessCategoryNameList: [String]?

        public var comments: String?

        public var createTime: String?

        public var name: String?

        public var rid: Int64?

        public var ruleType: Int32?

        public var type: Int32?

        public var typeName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.businessCategoryNameList != nil {
                map["BusinessCategoryNameList"] = self.businessCategoryNameList!
            }
            if self.comments != nil {
                map["Comments"] = self.comments!
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.rid != nil {
                map["Rid"] = self.rid!
            }
            if self.ruleType != nil {
                map["RuleType"] = self.ruleType!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            if self.typeName != nil {
                map["TypeName"] = self.typeName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["BusinessCategoryNameList"] as? [String] {
                self.businessCategoryNameList = value
            }
            if let value = dict["Comments"] as? String {
                self.comments = value
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["Rid"] as? Int64 {
                self.rid = value
            }
            if let value = dict["RuleType"] as? Int32 {
                self.ruleType = value
            }
            if let value = dict["Type"] as? Int32 {
                self.type = value
            }
            if let value = dict["TypeName"] as? String {
                self.typeName = value
            }
        }
    }
    public var code: String?

    public var count: Int32?

    public var data: [ListRulesResponseBody.Data]?

    public var message: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.count != nil {
            map["Count"] = self.count!
        }
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Count"] as? Int32 {
            self.count = value
        }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [ListRulesResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = ListRulesResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ListRulesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListRulesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListRulesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListRulesV4Request : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var businessName: String?

    public var businessRange: Int32?

    public var categoryName: String?

    public var countTotal: Bool?

    public var createEmpid: String?

    public var createUserId: Int64?

    public var currentPage: Int32?

    public var endTime: String?

    public var lastUpdateEmpid: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requireInfos: [String]?

    public var rid: Int64?

    public var ruleIdOrRuleName: String?

    public var ruleScoreSingleType: Int32?

    public var ruleType: Int32?

    public var schemeId: Int64?

    public var sourceType: Int32?

    public var startTime: String?

    public var status: Int32?

    public var type: Int32?

    public var typeName: String?

    public var updateEndTime: String?

    public var updateStartTime: String?

    public var updateUserId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.businessName != nil {
            map["BusinessName"] = self.businessName!
        }
        if self.businessRange != nil {
            map["BusinessRange"] = self.businessRange!
        }
        if self.categoryName != nil {
            map["CategoryName"] = self.categoryName!
        }
        if self.countTotal != nil {
            map["CountTotal"] = self.countTotal!
        }
        if self.createEmpid != nil {
            map["CreateEmpid"] = self.createEmpid!
        }
        if self.createUserId != nil {
            map["CreateUserId"] = self.createUserId!
        }
        if self.currentPage != nil {
            map["CurrentPage"] = self.currentPage!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.lastUpdateEmpid != nil {
            map["LastUpdateEmpid"] = self.lastUpdateEmpid!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requireInfos != nil {
            map["RequireInfos"] = self.requireInfos!
        }
        if self.rid != nil {
            map["Rid"] = self.rid!
        }
        if self.ruleIdOrRuleName != nil {
            map["RuleIdOrRuleName"] = self.ruleIdOrRuleName!
        }
        if self.ruleScoreSingleType != nil {
            map["RuleScoreSingleType"] = self.ruleScoreSingleType!
        }
        if self.ruleType != nil {
            map["RuleType"] = self.ruleType!
        }
        if self.schemeId != nil {
            map["SchemeId"] = self.schemeId!
        }
        if self.sourceType != nil {
            map["SourceType"] = self.sourceType!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        if self.typeName != nil {
            map["TypeName"] = self.typeName!
        }
        if self.updateEndTime != nil {
            map["UpdateEndTime"] = self.updateEndTime!
        }
        if self.updateStartTime != nil {
            map["UpdateStartTime"] = self.updateStartTime!
        }
        if self.updateUserId != nil {
            map["UpdateUserId"] = self.updateUserId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["BusinessName"] as? String {
            self.businessName = value
        }
        if let value = dict["BusinessRange"] as? Int32 {
            self.businessRange = value
        }
        if let value = dict["CategoryName"] as? String {
            self.categoryName = value
        }
        if let value = dict["CountTotal"] as? Bool {
            self.countTotal = value
        }
        if let value = dict["CreateEmpid"] as? String {
            self.createEmpid = value
        }
        if let value = dict["CreateUserId"] as? Int64 {
            self.createUserId = value
        }
        if let value = dict["CurrentPage"] as? Int32 {
            self.currentPage = value
        }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["LastUpdateEmpid"] as? String {
            self.lastUpdateEmpid = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequireInfos"] as? [String] {
            self.requireInfos = value
        }
        if let value = dict["Rid"] as? Int64 {
            self.rid = value
        }
        if let value = dict["RuleIdOrRuleName"] as? String {
            self.ruleIdOrRuleName = value
        }
        if let value = dict["RuleScoreSingleType"] as? Int32 {
            self.ruleScoreSingleType = value
        }
        if let value = dict["RuleType"] as? Int32 {
            self.ruleType = value
        }
        if let value = dict["SchemeId"] as? Int64 {
            self.schemeId = value
        }
        if let value = dict["SourceType"] as? Int32 {
            self.sourceType = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
        if let value = dict["Status"] as? Int32 {
            self.status = value
        }
        if let value = dict["Type"] as? Int32 {
            self.type = value
        }
        if let value = dict["TypeName"] as? String {
            self.typeName = value
        }
        if let value = dict["UpdateEndTime"] as? String {
            self.updateEndTime = value
        }
        if let value = dict["UpdateStartTime"] as? String {
            self.updateStartTime = value
        }
        if let value = dict["UpdateUserId"] as? Int64 {
            self.updateUserId = value
        }
    }
}

public class ListRulesV4ResponseBody : Tea.TeaModel {
    public var businessType: Int32?

    public var code: String?

    public var count: Int32?

    public var currentPage: Int32?

    public var data: [RuleCountInfo]?

    public var httpStatusCode: Int32?

    public var message: String?

    public var messages: [String]?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var success: Bool?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.businessType != nil {
            map["BusinessType"] = self.businessType!
        }
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.count != nil {
            map["Count"] = self.count!
        }
        if self.currentPage != nil {
            map["CurrentPage"] = self.currentPage!
        }
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.messages != nil {
            map["Messages"] = self.messages!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BusinessType"] as? Int32 {
            self.businessType = value
        }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Count"] as? Int32 {
            self.count = value
        }
        if let value = dict["CurrentPage"] as? Int32 {
            self.currentPage = value
        }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [RuleCountInfo] = []
            for v in value {
                if v != nil {
                    var model = RuleCountInfo()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Messages"] as? [String] {
            self.messages = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class ListRulesV4Response : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListRulesV4ResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListRulesV4ResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListSchemeTaskConfigRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var jsonStr: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.jsonStr != nil {
            map["jsonStr"] = self.jsonStr!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["jsonStr"] as? String {
            self.jsonStr = value
        }
    }
}

public class ListSchemeTaskConfigResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Data : Tea.TeaModel {
            public class DataConfig : Tea.TeaModel {
                public class AssignConfigs : Tea.TeaModel {
                    public class AssignConfig : Tea.TeaModel {
                        public class AssignConfigContests : Tea.TeaModel {
                            public class AssignConfigContest : Tea.TeaModel {
                                public class ListObject : Tea.TeaModel {
                                    public var listObject: [Any]?

                                    public override init() {
                                        super.init()
                                    }

                                    public init(_ dict: [String: Any]) {
                                        super.init()
                                        self.fromMap(dict)
                                    }

                                    public override func validate() throws -> Void {
                                    }

                                    public override func toMap() -> [String : Any] {
                                        var map = super.toMap()
                                        if self.listObject != nil {
                                            map["ListObject"] = self.listObject!
                                        }
                                        return map
                                    }

                                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                        guard let dict else { return }
                                        if let value = dict["ListObject"] as? [Any] {
                                            self.listObject = value
                                        }
                                    }
                                }
                                public var dataType: Int32?

                                public var listObject: ListSchemeTaskConfigResponseBody.Data.Data.DataConfig.AssignConfigs.AssignConfig.AssignConfigContests.AssignConfigContest.ListObject?

                                public var name: String?

                                public var symbol: Int32?

                                public var value: String?

                                public override init() {
                                    super.init()
                                }

                                public init(_ dict: [String: Any]) {
                                    super.init()
                                    self.fromMap(dict)
                                }

                                public override func validate() throws -> Void {
                                    try self.listObject?.validate()
                                }

                                public override func toMap() -> [String : Any] {
                                    var map = super.toMap()
                                    if self.dataType != nil {
                                        map["DataType"] = self.dataType!
                                    }
                                    if self.listObject != nil {
                                        map["ListObject"] = self.listObject?.toMap()
                                    }
                                    if self.name != nil {
                                        map["Name"] = self.name!
                                    }
                                    if self.symbol != nil {
                                        map["Symbol"] = self.symbol!
                                    }
                                    if self.value != nil {
                                        map["Value"] = self.value!
                                    }
                                    return map
                                }

                                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                    guard let dict else { return }
                                    if let value = dict["DataType"] as? Int32 {
                                        self.dataType = value
                                    }
                                    if let value = dict["ListObject"] as? [String: Any?] {
                                        var model = ListSchemeTaskConfigResponseBody.Data.Data.DataConfig.AssignConfigs.AssignConfig.AssignConfigContests.AssignConfigContest.ListObject()
                                        model.fromMap(value)
                                        self.listObject = model
                                    }
                                    if let value = dict["Name"] as? String {
                                        self.name = value
                                    }
                                    if let value = dict["Symbol"] as? Int32 {
                                        self.symbol = value
                                    }
                                    if let value = dict["Value"] as? String {
                                        self.value = value
                                    }
                                }
                            }
                            public var assignConfigContest: [ListSchemeTaskConfigResponseBody.Data.Data.DataConfig.AssignConfigs.AssignConfig.AssignConfigContests.AssignConfigContest]?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.assignConfigContest != nil {
                                    var tmp : [Any] = []
                                    for k in self.assignConfigContest! {
                                        tmp.append(k.toMap())
                                    }
                                    map["AssignConfigContest"] = tmp
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                guard let dict else { return }
                                if let value = dict["AssignConfigContest"] as? [Any?] {
                                    var tmp : [ListSchemeTaskConfigResponseBody.Data.Data.DataConfig.AssignConfigs.AssignConfig.AssignConfigContests.AssignConfigContest] = []
                                    for v in value {
                                        if v != nil {
                                            var model = ListSchemeTaskConfigResponseBody.Data.Data.DataConfig.AssignConfigs.AssignConfig.AssignConfigContests.AssignConfigContest()
                                            if v != nil {
                                                model.fromMap(v as? [String: Any?])
                                            }
                                            tmp.append(model)
                                        }
                                    }
                                    self.assignConfigContest = tmp
                                }
                            }
                        }
                        public var assignConfigContests: ListSchemeTaskConfigResponseBody.Data.Data.DataConfig.AssignConfigs.AssignConfig.AssignConfigContests?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                            try self.assignConfigContests?.validate()
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.assignConfigContests != nil {
                                map["AssignConfigContests"] = self.assignConfigContests?.toMap()
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["AssignConfigContests"] as? [String: Any?] {
                                var model = ListSchemeTaskConfigResponseBody.Data.Data.DataConfig.AssignConfigs.AssignConfig.AssignConfigContests()
                                model.fromMap(value)
                                self.assignConfigContests = model
                            }
                        }
                    }
                    public var assignConfig: [ListSchemeTaskConfigResponseBody.Data.Data.DataConfig.AssignConfigs.AssignConfig]?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.assignConfig != nil {
                            var tmp : [Any] = []
                            for k in self.assignConfig! {
                                tmp.append(k.toMap())
                            }
                            map["AssignConfig"] = tmp
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["AssignConfig"] as? [Any?] {
                            var tmp : [ListSchemeTaskConfigResponseBody.Data.Data.DataConfig.AssignConfigs.AssignConfig] = []
                            for v in value {
                                if v != nil {
                                    var model = ListSchemeTaskConfigResponseBody.Data.Data.DataConfig.AssignConfigs.AssignConfig()
                                    if v != nil {
                                        model.fromMap(v as? [String: Any?])
                                    }
                                    tmp.append(model)
                                }
                            }
                            self.assignConfig = tmp
                        }
                    }
                }
                public var assignConfigs: ListSchemeTaskConfigResponseBody.Data.Data.DataConfig.AssignConfigs?

                public var dataSets: String?

                public var index: Int32?

                public var resultParam: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.assignConfigs?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.assignConfigs != nil {
                        map["AssignConfigs"] = self.assignConfigs?.toMap()
                    }
                    if self.dataSets != nil {
                        map["DataSets"] = self.dataSets!
                    }
                    if self.index != nil {
                        map["Index"] = self.index!
                    }
                    if self.resultParam != nil {
                        map["ResultParam"] = self.resultParam!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["AssignConfigs"] as? [String: Any?] {
                        var model = ListSchemeTaskConfigResponseBody.Data.Data.DataConfig.AssignConfigs()
                        model.fromMap(value)
                        self.assignConfigs = model
                    }
                    if let value = dict["DataSets"] as? String {
                        self.dataSets = value
                    }
                    if let value = dict["Index"] as? Int32 {
                        self.index = value
                    }
                    if let value = dict["ResultParam"] as? String {
                        self.resultParam = value
                    }
                }
            }
            public class SchemeIdList : Tea.TeaModel {
                public var schemeIdList: [Int64]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.schemeIdList != nil {
                        map["SchemeIdList"] = self.schemeIdList!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["SchemeIdList"] as? [Int64] {
                        self.schemeIdList = value
                    }
                }
            }
            public class SchemeList : Tea.TeaModel {
                public class SchemeList : Tea.TeaModel {
                    public var name: String?

                    public var schemeId: Int64?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.name != nil {
                            map["Name"] = self.name!
                        }
                        if self.schemeId != nil {
                            map["SchemeId"] = self.schemeId!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Name"] as? String {
                            self.name = value
                        }
                        if let value = dict["SchemeId"] as? Int64 {
                            self.schemeId = value
                        }
                    }
                }
                public var schemeList: [ListSchemeTaskConfigResponseBody.Data.Data.SchemeList.SchemeList]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.schemeList != nil {
                        var tmp : [Any] = []
                        for k in self.schemeList! {
                            tmp.append(k.toMap())
                        }
                        map["SchemeList"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["SchemeList"] as? [Any?] {
                        var tmp : [ListSchemeTaskConfigResponseBody.Data.Data.SchemeList.SchemeList] = []
                        for v in value {
                            if v != nil {
                                var model = ListSchemeTaskConfigResponseBody.Data.Data.SchemeList.SchemeList()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.schemeList = tmp
                    }
                }
            }
            public var asrTaskPriority: Int32?

            public var asrVersion: Int32?

            public var assignType: Int32?

            public var createTime: String?

            public var createUser: Int64?

            public var dataConfig: ListSchemeTaskConfigResponseBody.Data.Data.DataConfig?

            public var finishRate: Double?

            public var id: Int64?

            public var manualReview: Int32?

            public var modeCustomizationId: String?

            public var modelName: String?

            public var name: String?

            public var numberExecuting: Int32?

            public var numberFail: Int32?

            public var numberSuccess: Int32?

            public var numberSum: Int32?

            public var schemeIdList: ListSchemeTaskConfigResponseBody.Data.Data.SchemeIdList?

            public var schemeList: ListSchemeTaskConfigResponseBody.Data.Data.SchemeList?

            public var schemeTaskConfigId: Int64?

            public var sourceDataType: Int32?

            public var status: Int32?

            public var type: Int32?

            public var updateTime: String?

            public var updateUser: Int64?

            public var userGroup: String?

            public var vocabId: String?

            public var vocabName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.dataConfig?.validate()
                try self.schemeIdList?.validate()
                try self.schemeList?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.asrTaskPriority != nil {
                    map["AsrTaskPriority"] = self.asrTaskPriority!
                }
                if self.asrVersion != nil {
                    map["AsrVersion"] = self.asrVersion!
                }
                if self.assignType != nil {
                    map["AssignType"] = self.assignType!
                }
                if self.createTime != nil {
                    map["CreateTime"] = self.createTime!
                }
                if self.createUser != nil {
                    map["CreateUser"] = self.createUser!
                }
                if self.dataConfig != nil {
                    map["DataConfig"] = self.dataConfig?.toMap()
                }
                if self.finishRate != nil {
                    map["FinishRate"] = self.finishRate!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.manualReview != nil {
                    map["ManualReview"] = self.manualReview!
                }
                if self.modeCustomizationId != nil {
                    map["ModeCustomizationId"] = self.modeCustomizationId!
                }
                if self.modelName != nil {
                    map["ModelName"] = self.modelName!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.numberExecuting != nil {
                    map["NumberExecuting"] = self.numberExecuting!
                }
                if self.numberFail != nil {
                    map["NumberFail"] = self.numberFail!
                }
                if self.numberSuccess != nil {
                    map["NumberSuccess"] = self.numberSuccess!
                }
                if self.numberSum != nil {
                    map["NumberSum"] = self.numberSum!
                }
                if self.schemeIdList != nil {
                    map["SchemeIdList"] = self.schemeIdList?.toMap()
                }
                if self.schemeList != nil {
                    map["SchemeList"] = self.schemeList?.toMap()
                }
                if self.schemeTaskConfigId != nil {
                    map["SchemeTaskConfigId"] = self.schemeTaskConfigId!
                }
                if self.sourceDataType != nil {
                    map["SourceDataType"] = self.sourceDataType!
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                if self.updateTime != nil {
                    map["UpdateTime"] = self.updateTime!
                }
                if self.updateUser != nil {
                    map["UpdateUser"] = self.updateUser!
                }
                if self.userGroup != nil {
                    map["UserGroup"] = self.userGroup!
                }
                if self.vocabId != nil {
                    map["VocabId"] = self.vocabId!
                }
                if self.vocabName != nil {
                    map["VocabName"] = self.vocabName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AsrTaskPriority"] as? Int32 {
                    self.asrTaskPriority = value
                }
                if let value = dict["AsrVersion"] as? Int32 {
                    self.asrVersion = value
                }
                if let value = dict["AssignType"] as? Int32 {
                    self.assignType = value
                }
                if let value = dict["CreateTime"] as? String {
                    self.createTime = value
                }
                if let value = dict["CreateUser"] as? Int64 {
                    self.createUser = value
                }
                if let value = dict["DataConfig"] as? [String: Any?] {
                    var model = ListSchemeTaskConfigResponseBody.Data.Data.DataConfig()
                    model.fromMap(value)
                    self.dataConfig = model
                }
                if let value = dict["FinishRate"] as? Double {
                    self.finishRate = value
                }
                if let value = dict["Id"] as? Int64 {
                    self.id = value
                }
                if let value = dict["ManualReview"] as? Int32 {
                    self.manualReview = value
                }
                if let value = dict["ModeCustomizationId"] as? String {
                    self.modeCustomizationId = value
                }
                if let value = dict["ModelName"] as? String {
                    self.modelName = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["NumberExecuting"] as? Int32 {
                    self.numberExecuting = value
                }
                if let value = dict["NumberFail"] as? Int32 {
                    self.numberFail = value
                }
                if let value = dict["NumberSuccess"] as? Int32 {
                    self.numberSuccess = value
                }
                if let value = dict["NumberSum"] as? Int32 {
                    self.numberSum = value
                }
                if let value = dict["SchemeIdList"] as? [String: Any?] {
                    var model = ListSchemeTaskConfigResponseBody.Data.Data.SchemeIdList()
                    model.fromMap(value)
                    self.schemeIdList = model
                }
                if let value = dict["SchemeList"] as? [String: Any?] {
                    var model = ListSchemeTaskConfigResponseBody.Data.Data.SchemeList()
                    model.fromMap(value)
                    self.schemeList = model
                }
                if let value = dict["SchemeTaskConfigId"] as? Int64 {
                    self.schemeTaskConfigId = value
                }
                if let value = dict["SourceDataType"] as? Int32 {
                    self.sourceDataType = value
                }
                if let value = dict["Status"] as? Int32 {
                    self.status = value
                }
                if let value = dict["Type"] as? Int32 {
                    self.type = value
                }
                if let value = dict["UpdateTime"] as? String {
                    self.updateTime = value
                }
                if let value = dict["UpdateUser"] as? Int64 {
                    self.updateUser = value
                }
                if let value = dict["UserGroup"] as? String {
                    self.userGroup = value
                }
                if let value = dict["VocabId"] as? String {
                    self.vocabId = value
                }
                if let value = dict["VocabName"] as? String {
                    self.vocabName = value
                }
            }
        }
        public var data: [ListSchemeTaskConfigResponseBody.Data.Data]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.data != nil {
                var tmp : [Any] = []
                for k in self.data! {
                    tmp.append(k.toMap())
                }
                map["Data"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Data"] as? [Any?] {
                var tmp : [ListSchemeTaskConfigResponseBody.Data.Data] = []
                for v in value {
                    if v != nil {
                        var model = ListSchemeTaskConfigResponseBody.Data.Data()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.data = tmp
            }
        }
    }
    public class Messages : Tea.TeaModel {
        public var message: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.message != nil {
                map["Message"] = self.message!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Message"] as? [String] {
                self.message = value
            }
        }
    }
    public var code: String?

    public var count: Int32?

    public var currentPage: Int32?

    public var data: ListSchemeTaskConfigResponseBody.Data?

    public var httpStatusCode: Int32?

    public var lastDataId: String?

    public var message: String?

    public var messages: ListSchemeTaskConfigResponseBody.Messages?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var resultCountId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
        try self.messages?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.count != nil {
            map["Count"] = self.count!
        }
        if self.currentPage != nil {
            map["CurrentPage"] = self.currentPage!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.lastDataId != nil {
            map["LastDataId"] = self.lastDataId!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.messages != nil {
            map["Messages"] = self.messages?.toMap()
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultCountId != nil {
            map["ResultCountId"] = self.resultCountId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Count"] as? Int32 {
            self.count = value
        }
        if let value = dict["CurrentPage"] as? Int32 {
            self.currentPage = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ListSchemeTaskConfigResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["LastDataId"] as? String {
            self.lastDataId = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Messages"] as? [String: Any?] {
            var model = ListSchemeTaskConfigResponseBody.Messages()
            model.fromMap(value)
            self.messages = model
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["ResultCountId"] as? String {
            self.resultCountId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ListSchemeTaskConfigResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListSchemeTaskConfigResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListSchemeTaskConfigResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListSessionGroupRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var jsonStr: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.jsonStr != nil {
            map["jsonStr"] = self.jsonStr!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["jsonStr"] as? String {
            self.jsonStr = value
        }
    }
}

public class ListSessionGroupResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Data : Tea.TeaModel {
            public class CallerList : Tea.TeaModel {
                public var callerList: [String]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.callerList != nil {
                        map["CallerList"] = self.callerList!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["CallerList"] as? [String] {
                        self.callerList = value
                    }
                }
            }
            public class CustomerIdList : Tea.TeaModel {
                public var customerIdList: [String]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.customerIdList != nil {
                        map["CustomerIdList"] = self.customerIdList!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["CustomerIdList"] as? [String] {
                        self.customerIdList = value
                    }
                }
            }
            public class CustomerNameList : Tea.TeaModel {
                public var customerNameList: [String]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.customerNameList != nil {
                        map["CustomerNameList"] = self.customerNameList!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["CustomerNameList"] as? [String] {
                        self.customerNameList = value
                    }
                }
            }
            public class CustomerServiceIdList : Tea.TeaModel {
                public var customerServiceIdList: [String]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.customerServiceIdList != nil {
                        map["CustomerServiceIdList"] = self.customerServiceIdList!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["CustomerServiceIdList"] as? [String] {
                        self.customerServiceIdList = value
                    }
                }
            }
            public class CustomerServiceNameList : Tea.TeaModel {
                public var customerServiceNameList: [String]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.customerServiceNameList != nil {
                        map["CustomerServiceNameList"] = self.customerServiceNameList!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["CustomerServiceNameList"] as? [String] {
                        self.customerServiceNameList = value
                    }
                }
            }
            public class ReviewerList : Tea.TeaModel {
                public var reviewerList: [String]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.reviewerList != nil {
                        map["ReviewerList"] = self.reviewerList!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["ReviewerList"] as? [String] {
                        self.reviewerList = value
                    }
                }
            }
            public class SkillGroupNameList : Tea.TeaModel {
                public var skillGroupNameList: [String]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.skillGroupNameList != nil {
                        map["SkillGroupNameList"] = self.skillGroupNameList!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["SkillGroupNameList"] as? [String] {
                        self.skillGroupNameList = value
                    }
                }
            }
            public var assignStatus: Int32?

            public var callStartTime: String?

            public var callerList: ListSessionGroupResponseBody.Data.Data.CallerList?

            public var customerIdList: ListSessionGroupResponseBody.Data.Data.CustomerIdList?

            public var customerNameList: ListSessionGroupResponseBody.Data.Data.CustomerNameList?

            public var customerServiceIdList: ListSessionGroupResponseBody.Data.Data.CustomerServiceIdList?

            public var customerServiceNameList: ListSessionGroupResponseBody.Data.Data.CustomerServiceNameList?

            public var hitSessionCount: Int32?

            public var lastDataId: String?

            public var reviewStatus: Int32?

            public var reviewerList: ListSessionGroupResponseBody.Data.Data.ReviewerList?

            public var schemeTaskConfigId: Int64?

            public var schemeTaskConfigName: String?

            public var score: Int64?

            public var sessionCount: Int32?

            public var sessionGroupId: String?

            public var sessionGroupReviewedOrComplained: Bool?

            public var skillGroupNameList: ListSessionGroupResponseBody.Data.Data.SkillGroupNameList?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.callerList?.validate()
                try self.customerIdList?.validate()
                try self.customerNameList?.validate()
                try self.customerServiceIdList?.validate()
                try self.customerServiceNameList?.validate()
                try self.reviewerList?.validate()
                try self.skillGroupNameList?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.assignStatus != nil {
                    map["AssignStatus"] = self.assignStatus!
                }
                if self.callStartTime != nil {
                    map["CallStartTime"] = self.callStartTime!
                }
                if self.callerList != nil {
                    map["CallerList"] = self.callerList?.toMap()
                }
                if self.customerIdList != nil {
                    map["CustomerIdList"] = self.customerIdList?.toMap()
                }
                if self.customerNameList != nil {
                    map["CustomerNameList"] = self.customerNameList?.toMap()
                }
                if self.customerServiceIdList != nil {
                    map["CustomerServiceIdList"] = self.customerServiceIdList?.toMap()
                }
                if self.customerServiceNameList != nil {
                    map["CustomerServiceNameList"] = self.customerServiceNameList?.toMap()
                }
                if self.hitSessionCount != nil {
                    map["HitSessionCount"] = self.hitSessionCount!
                }
                if self.lastDataId != nil {
                    map["LastDataId"] = self.lastDataId!
                }
                if self.reviewStatus != nil {
                    map["ReviewStatus"] = self.reviewStatus!
                }
                if self.reviewerList != nil {
                    map["ReviewerList"] = self.reviewerList?.toMap()
                }
                if self.schemeTaskConfigId != nil {
                    map["SchemeTaskConfigId"] = self.schemeTaskConfigId!
                }
                if self.schemeTaskConfigName != nil {
                    map["SchemeTaskConfigName"] = self.schemeTaskConfigName!
                }
                if self.score != nil {
                    map["Score"] = self.score!
                }
                if self.sessionCount != nil {
                    map["SessionCount"] = self.sessionCount!
                }
                if self.sessionGroupId != nil {
                    map["SessionGroupId"] = self.sessionGroupId!
                }
                if self.sessionGroupReviewedOrComplained != nil {
                    map["SessionGroupReviewedOrComplained"] = self.sessionGroupReviewedOrComplained!
                }
                if self.skillGroupNameList != nil {
                    map["SkillGroupNameList"] = self.skillGroupNameList?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AssignStatus"] as? Int32 {
                    self.assignStatus = value
                }
                if let value = dict["CallStartTime"] as? String {
                    self.callStartTime = value
                }
                if let value = dict["CallerList"] as? [String: Any?] {
                    var model = ListSessionGroupResponseBody.Data.Data.CallerList()
                    model.fromMap(value)
                    self.callerList = model
                }
                if let value = dict["CustomerIdList"] as? [String: Any?] {
                    var model = ListSessionGroupResponseBody.Data.Data.CustomerIdList()
                    model.fromMap(value)
                    self.customerIdList = model
                }
                if let value = dict["CustomerNameList"] as? [String: Any?] {
                    var model = ListSessionGroupResponseBody.Data.Data.CustomerNameList()
                    model.fromMap(value)
                    self.customerNameList = model
                }
                if let value = dict["CustomerServiceIdList"] as? [String: Any?] {
                    var model = ListSessionGroupResponseBody.Data.Data.CustomerServiceIdList()
                    model.fromMap(value)
                    self.customerServiceIdList = model
                }
                if let value = dict["CustomerServiceNameList"] as? [String: Any?] {
                    var model = ListSessionGroupResponseBody.Data.Data.CustomerServiceNameList()
                    model.fromMap(value)
                    self.customerServiceNameList = model
                }
                if let value = dict["HitSessionCount"] as? Int32 {
                    self.hitSessionCount = value
                }
                if let value = dict["LastDataId"] as? String {
                    self.lastDataId = value
                }
                if let value = dict["ReviewStatus"] as? Int32 {
                    self.reviewStatus = value
                }
                if let value = dict["ReviewerList"] as? [String: Any?] {
                    var model = ListSessionGroupResponseBody.Data.Data.ReviewerList()
                    model.fromMap(value)
                    self.reviewerList = model
                }
                if let value = dict["SchemeTaskConfigId"] as? Int64 {
                    self.schemeTaskConfigId = value
                }
                if let value = dict["SchemeTaskConfigName"] as? String {
                    self.schemeTaskConfigName = value
                }
                if let value = dict["Score"] as? Int64 {
                    self.score = value
                }
                if let value = dict["SessionCount"] as? Int32 {
                    self.sessionCount = value
                }
                if let value = dict["SessionGroupId"] as? String {
                    self.sessionGroupId = value
                }
                if let value = dict["SessionGroupReviewedOrComplained"] as? Bool {
                    self.sessionGroupReviewedOrComplained = value
                }
                if let value = dict["SkillGroupNameList"] as? [String: Any?] {
                    var model = ListSessionGroupResponseBody.Data.Data.SkillGroupNameList()
                    model.fromMap(value)
                    self.skillGroupNameList = model
                }
            }
        }
        public var data: [ListSessionGroupResponseBody.Data.Data]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.data != nil {
                var tmp : [Any] = []
                for k in self.data! {
                    tmp.append(k.toMap())
                }
                map["Data"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Data"] as? [Any?] {
                var tmp : [ListSessionGroupResponseBody.Data.Data] = []
                for v in value {
                    if v != nil {
                        var model = ListSessionGroupResponseBody.Data.Data()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.data = tmp
            }
        }
    }
    public class Messages : Tea.TeaModel {
        public var message: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.message != nil {
                map["Message"] = self.message!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Message"] as? [String] {
                self.message = value
            }
        }
    }
    public var code: String?

    public var count: Int32?

    public var currentPage: Int32?

    public var data: ListSessionGroupResponseBody.Data?

    public var httpStatusCode: Int32?

    public var lastDataId: String?

    public var message: String?

    public var messages: ListSessionGroupResponseBody.Messages?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var resultCountId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
        try self.messages?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.count != nil {
            map["Count"] = self.count!
        }
        if self.currentPage != nil {
            map["CurrentPage"] = self.currentPage!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.lastDataId != nil {
            map["LastDataId"] = self.lastDataId!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.messages != nil {
            map["Messages"] = self.messages?.toMap()
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resultCountId != nil {
            map["ResultCountId"] = self.resultCountId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Count"] as? Int32 {
            self.count = value
        }
        if let value = dict["CurrentPage"] as? Int32 {
            self.currentPage = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ListSessionGroupResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["LastDataId"] as? String {
            self.lastDataId = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Messages"] as? [String: Any?] {
            var model = ListSessionGroupResponseBody.Messages()
            model.fromMap(value)
            self.messages = model
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["ResultCountId"] as? String {
            self.resultCountId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ListSessionGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListSessionGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListSessionGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListSkillGroupConfigRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var jsonStr: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.jsonStr != nil {
            map["JsonStr"] = self.jsonStr!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["JsonStr"] as? String {
            self.jsonStr = value
        }
    }
}

public class ListSkillGroupConfigResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class SkillGroupConfig : Tea.TeaModel {
            public class AllRuleList : Tea.TeaModel {
                public class RuleNameInfo : Tea.TeaModel {
                    public var rid: Int64?

                    public var ruleName: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.rid != nil {
                            map["Rid"] = self.rid!
                        }
                        if self.ruleName != nil {
                            map["RuleName"] = self.ruleName!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Rid"] as? Int64 {
                            self.rid = value
                        }
                        if let value = dict["RuleName"] as? String {
                            self.ruleName = value
                        }
                    }
                }
                public var ruleNameInfo: [ListSkillGroupConfigResponseBody.Data.SkillGroupConfig.AllRuleList.RuleNameInfo]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.ruleNameInfo != nil {
                        var tmp : [Any] = []
                        for k in self.ruleNameInfo! {
                            tmp.append(k.toMap())
                        }
                        map["RuleNameInfo"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["RuleNameInfo"] as? [Any?] {
                        var tmp : [ListSkillGroupConfigResponseBody.Data.SkillGroupConfig.AllRuleList.RuleNameInfo] = []
                        for v in value {
                            if v != nil {
                                var model = ListSkillGroupConfigResponseBody.Data.SkillGroupConfig.AllRuleList.RuleNameInfo()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.ruleNameInfo = tmp
                    }
                }
            }
            public class RuleList : Tea.TeaModel {
                public class RuleNameInfo : Tea.TeaModel {
                    public var rid: Int64?

                    public var ruleName: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.rid != nil {
                            map["Rid"] = self.rid!
                        }
                        if self.ruleName != nil {
                            map["RuleName"] = self.ruleName!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Rid"] as? Int64 {
                            self.rid = value
                        }
                        if let value = dict["RuleName"] as? String {
                            self.ruleName = value
                        }
                    }
                }
                public var ruleNameInfo: [ListSkillGroupConfigResponseBody.Data.SkillGroupConfig.RuleList.RuleNameInfo]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.ruleNameInfo != nil {
                        var tmp : [Any] = []
                        for k in self.ruleNameInfo! {
                            tmp.append(k.toMap())
                        }
                        map["RuleNameInfo"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["RuleNameInfo"] as? [Any?] {
                        var tmp : [ListSkillGroupConfigResponseBody.Data.SkillGroupConfig.RuleList.RuleNameInfo] = []
                        for v in value {
                            if v != nil {
                                var model = ListSkillGroupConfigResponseBody.Data.SkillGroupConfig.RuleList.RuleNameInfo()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.ruleNameInfo = tmp
                    }
                }
            }
            public class SkillGroupScreens : Tea.TeaModel {
                public class SkillGroupScreen : Tea.TeaModel {
                    public var dataType: Int32?

                    public var name: String?

                    public var symbol: Int32?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.dataType != nil {
                            map["DataType"] = self.dataType!
                        }
                        if self.name != nil {
                            map["Name"] = self.name!
                        }
                        if self.symbol != nil {
                            map["Symbol"] = self.symbol!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["DataType"] as? Int32 {
                            self.dataType = value
                        }
                        if let value = dict["Name"] as? String {
                            self.name = value
                        }
                        if let value = dict["Symbol"] as? Int32 {
                            self.symbol = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public var skillGroupScreen: [ListSkillGroupConfigResponseBody.Data.SkillGroupConfig.SkillGroupScreens.SkillGroupScreen]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.skillGroupScreen != nil {
                        var tmp : [Any] = []
                        for k in self.skillGroupScreen! {
                            tmp.append(k.toMap())
                        }
                        map["SkillGroupScreen"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["SkillGroupScreen"] as? [Any?] {
                        var tmp : [ListSkillGroupConfigResponseBody.Data.SkillGroupConfig.SkillGroupScreens.SkillGroupScreen] = []
                        for v in value {
                            if v != nil {
                                var model = ListSkillGroupConfigResponseBody.Data.SkillGroupConfig.SkillGroupScreens.SkillGroupScreen()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.skillGroupScreen = tmp
                    }
                }
            }
            public var allContentQualityCheck: Int32?

            public var allRids: String?

            public var allRuleList: ListSkillGroupConfigResponseBody.Data.SkillGroupConfig.AllRuleList?

            public var createTime: String?

            public var id: Int64?

            public var instanceId: String?

            public var modelId: Int64?

            public var modelName: String?

            public var name: String?

            public var qualityCheckType: Int32?

            public var rid: String?

            public var ruleList: ListSkillGroupConfigResponseBody.Data.SkillGroupConfig.RuleList?

            public var screenSwitch: Bool?

            public var skillGroupFrom: Int32?

            public var skillGroupId: String?

            public var skillGroupName: String?

            public var skillGroupScreens: ListSkillGroupConfigResponseBody.Data.SkillGroupConfig.SkillGroupScreens?

            public var status: Int32?

            public var type: Int32?

            public var updateTime: String?

            public var vocabId: Int64?

            public var vocabName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.allRuleList?.validate()
                try self.ruleList?.validate()
                try self.skillGroupScreens?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.allContentQualityCheck != nil {
                    map["AllContentQualityCheck"] = self.allContentQualityCheck!
                }
                if self.allRids != nil {
                    map["AllRids"] = self.allRids!
                }
                if self.allRuleList != nil {
                    map["AllRuleList"] = self.allRuleList?.toMap()
                }
                if self.createTime != nil {
                    map["CreateTime"] = self.createTime!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.modelId != nil {
                    map["ModelId"] = self.modelId!
                }
                if self.modelName != nil {
                    map["ModelName"] = self.modelName!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.qualityCheckType != nil {
                    map["QualityCheckType"] = self.qualityCheckType!
                }
                if self.rid != nil {
                    map["Rid"] = self.rid!
                }
                if self.ruleList != nil {
                    map["RuleList"] = self.ruleList?.toMap()
                }
                if self.screenSwitch != nil {
                    map["ScreenSwitch"] = self.screenSwitch!
                }
                if self.skillGroupFrom != nil {
                    map["SkillGroupFrom"] = self.skillGroupFrom!
                }
                if self.skillGroupId != nil {
                    map["SkillGroupId"] = self.skillGroupId!
                }
                if self.skillGroupName != nil {
                    map["SkillGroupName"] = self.skillGroupName!
                }
                if self.skillGroupScreens != nil {
                    map["SkillGroupScreens"] = self.skillGroupScreens?.toMap()
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                if self.updateTime != nil {
                    map["UpdateTime"] = self.updateTime!
                }
                if self.vocabId != nil {
                    map["VocabId"] = self.vocabId!
                }
                if self.vocabName != nil {
                    map["VocabName"] = self.vocabName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AllContentQualityCheck"] as? Int32 {
                    self.allContentQualityCheck = value
                }
                if let value = dict["AllRids"] as? String {
                    self.allRids = value
                }
                if let value = dict["AllRuleList"] as? [String: Any?] {
                    var model = ListSkillGroupConfigResponseBody.Data.SkillGroupConfig.AllRuleList()
                    model.fromMap(value)
                    self.allRuleList = model
                }
                if let value = dict["CreateTime"] as? String {
                    self.createTime = value
                }
                if let value = dict["Id"] as? Int64 {
                    self.id = value
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["ModelId"] as? Int64 {
                    self.modelId = value
                }
                if let value = dict["ModelName"] as? String {
                    self.modelName = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["QualityCheckType"] as? Int32 {
                    self.qualityCheckType = value
                }
                if let value = dict["Rid"] as? String {
                    self.rid = value
                }
                if let value = dict["RuleList"] as? [String: Any?] {
                    var model = ListSkillGroupConfigResponseBody.Data.SkillGroupConfig.RuleList()
                    model.fromMap(value)
                    self.ruleList = model
                }
                if let value = dict["ScreenSwitch"] as? Bool {
                    self.screenSwitch = value
                }
                if let value = dict["SkillGroupFrom"] as? Int32 {
                    self.skillGroupFrom = value
                }
                if let value = dict["SkillGroupId"] as? String {
                    self.skillGroupId = value
                }
                if let value = dict["SkillGroupName"] as? String {
                    self.skillGroupName = value
                }
                if let value = dict["SkillGroupScreens"] as? [String: Any?] {
                    var model = ListSkillGroupConfigResponseBody.Data.SkillGroupConfig.SkillGroupScreens()
                    model.fromMap(value)
                    self.skillGroupScreens = model
                }
                if let value = dict["Status"] as? Int32 {
                    self.status = value
                }
                if let value = dict["Type"] as? Int32 {
                    self.type = value
                }
                if let value = dict["UpdateTime"] as? String {
                    self.updateTime = value
                }
                if let value = dict["VocabId"] as? Int64 {
                    self.vocabId = value
                }
                if let value = dict["VocabName"] as? String {
                    self.vocabName = value
                }
            }
        }
        public var skillGroupConfig: [ListSkillGroupConfigResponseBody.Data.SkillGroupConfig]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.skillGroupConfig != nil {
                var tmp : [Any] = []
                for k in self.skillGroupConfig! {
                    tmp.append(k.toMap())
                }
                map["SkillGroupConfig"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["SkillGroupConfig"] as? [Any?] {
                var tmp : [ListSkillGroupConfigResponseBody.Data.SkillGroupConfig] = []
                for v in value {
                    if v != nil {
                        var model = ListSkillGroupConfigResponseBody.Data.SkillGroupConfig()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.skillGroupConfig = tmp
            }
        }
    }
    public var code: String?

    public var data: ListSkillGroupConfigResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ListSkillGroupConfigResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ListSkillGroupConfigResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListSkillGroupConfigResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListSkillGroupConfigResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListTaskAssignRulesRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var jsonStr: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.jsonStr != nil {
            map["JsonStr"] = self.jsonStr!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["JsonStr"] as? String {
            self.jsonStr = value
        }
    }
}

public class ListTaskAssignRulesResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class TaskAssignRuleInfo : Tea.TeaModel {
            public class Agents : Tea.TeaModel {
                public class Agent : Tea.TeaModel {
                    public var agentId: String?

                    public var agentName: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.agentId != nil {
                            map["AgentId"] = self.agentId!
                        }
                        if self.agentName != nil {
                            map["AgentName"] = self.agentName!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["AgentId"] as? String {
                            self.agentId = value
                        }
                        if let value = dict["AgentName"] as? String {
                            self.agentName = value
                        }
                    }
                }
                public var agent: [ListTaskAssignRulesResponseBody.Data.TaskAssignRuleInfo.Agents.Agent]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.agent != nil {
                        var tmp : [Any] = []
                        for k in self.agent! {
                            tmp.append(k.toMap())
                        }
                        map["Agent"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Agent"] as? [Any?] {
                        var tmp : [ListTaskAssignRulesResponseBody.Data.TaskAssignRuleInfo.Agents.Agent] = []
                        for v in value {
                            if v != nil {
                                var model = ListTaskAssignRulesResponseBody.Data.TaskAssignRuleInfo.Agents.Agent()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.agent = tmp
                    }
                }
            }
            public class Reviewers : Tea.TeaModel {
                public class Reviewer : Tea.TeaModel {
                    public var reviewerId: String?

                    public var reviewerName: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.reviewerId != nil {
                            map["ReviewerId"] = self.reviewerId!
                        }
                        if self.reviewerName != nil {
                            map["ReviewerName"] = self.reviewerName!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["ReviewerId"] as? String {
                            self.reviewerId = value
                        }
                        if let value = dict["ReviewerName"] as? String {
                            self.reviewerName = value
                        }
                    }
                }
                public var reviewer: [ListTaskAssignRulesResponseBody.Data.TaskAssignRuleInfo.Reviewers.Reviewer]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.reviewer != nil {
                        var tmp : [Any] = []
                        for k in self.reviewer! {
                            tmp.append(k.toMap())
                        }
                        map["Reviewer"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Reviewer"] as? [Any?] {
                        var tmp : [ListTaskAssignRulesResponseBody.Data.TaskAssignRuleInfo.Reviewers.Reviewer] = []
                        for v in value {
                            if v != nil {
                                var model = ListTaskAssignRulesResponseBody.Data.TaskAssignRuleInfo.Reviewers.Reviewer()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.reviewer = tmp
                    }
                }
            }
            public class Rules : Tea.TeaModel {
                public class RuleBasicInfo : Tea.TeaModel {
                    public var name: String?

                    public var rid: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.name != nil {
                            map["Name"] = self.name!
                        }
                        if self.rid != nil {
                            map["Rid"] = self.rid!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Name"] as? String {
                            self.name = value
                        }
                        if let value = dict["Rid"] as? String {
                            self.rid = value
                        }
                    }
                }
                public var ruleBasicInfo: [ListTaskAssignRulesResponseBody.Data.TaskAssignRuleInfo.Rules.RuleBasicInfo]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.ruleBasicInfo != nil {
                        var tmp : [Any] = []
                        for k in self.ruleBasicInfo! {
                            tmp.append(k.toMap())
                        }
                        map["RuleBasicInfo"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["RuleBasicInfo"] as? [Any?] {
                        var tmp : [ListTaskAssignRulesResponseBody.Data.TaskAssignRuleInfo.Rules.RuleBasicInfo] = []
                        for v in value {
                            if v != nil {
                                var model = ListTaskAssignRulesResponseBody.Data.TaskAssignRuleInfo.Rules.RuleBasicInfo()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.ruleBasicInfo = tmp
                    }
                }
            }
            public class SamplingMode : Tea.TeaModel {
                public class SamplingModeAgents : Tea.TeaModel {
                    public class SamplingModeAgent : Tea.TeaModel {
                        public var agentId: String?

                        public var agentName: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.agentId != nil {
                                map["AgentId"] = self.agentId!
                            }
                            if self.agentName != nil {
                                map["AgentName"] = self.agentName!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["AgentId"] as? String {
                                self.agentId = value
                            }
                            if let value = dict["AgentName"] as? String {
                                self.agentName = value
                            }
                        }
                    }
                    public var samplingModeAgent: [ListTaskAssignRulesResponseBody.Data.TaskAssignRuleInfo.SamplingMode.SamplingModeAgents.SamplingModeAgent]?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.samplingModeAgent != nil {
                            var tmp : [Any] = []
                            for k in self.samplingModeAgent! {
                                tmp.append(k.toMap())
                            }
                            map["SamplingModeAgent"] = tmp
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["SamplingModeAgent"] as? [Any?] {
                            var tmp : [ListTaskAssignRulesResponseBody.Data.TaskAssignRuleInfo.SamplingMode.SamplingModeAgents.SamplingModeAgent] = []
                            for v in value {
                                if v != nil {
                                    var model = ListTaskAssignRulesResponseBody.Data.TaskAssignRuleInfo.SamplingMode.SamplingModeAgents.SamplingModeAgent()
                                    if v != nil {
                                        model.fromMap(v as? [String: Any?])
                                    }
                                    tmp.append(model)
                                }
                            }
                            self.samplingModeAgent = tmp
                        }
                    }
                }
                public var anyNumberOfDraws: Int32?

                public var designated: Bool?

                public var dimension: Int32?

                public var limit: Int32?

                public var numberOfDraws: Int32?

                public var proportion: Double?

                public var randomInspectionNumber: Int32?

                public var samplingModeAgents: ListTaskAssignRulesResponseBody.Data.TaskAssignRuleInfo.SamplingMode.SamplingModeAgents?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.samplingModeAgents?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.anyNumberOfDraws != nil {
                        map["AnyNumberOfDraws"] = self.anyNumberOfDraws!
                    }
                    if self.designated != nil {
                        map["Designated"] = self.designated!
                    }
                    if self.dimension != nil {
                        map["Dimension"] = self.dimension!
                    }
                    if self.limit != nil {
                        map["Limit"] = self.limit!
                    }
                    if self.numberOfDraws != nil {
                        map["NumberOfDraws"] = self.numberOfDraws!
                    }
                    if self.proportion != nil {
                        map["Proportion"] = self.proportion!
                    }
                    if self.randomInspectionNumber != nil {
                        map["RandomInspectionNumber"] = self.randomInspectionNumber!
                    }
                    if self.samplingModeAgents != nil {
                        map["SamplingModeAgents"] = self.samplingModeAgents?.toMap()
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["AnyNumberOfDraws"] as? Int32 {
                        self.anyNumberOfDraws = value
                    }
                    if let value = dict["Designated"] as? Bool {
                        self.designated = value
                    }
                    if let value = dict["Dimension"] as? Int32 {
                        self.dimension = value
                    }
                    if let value = dict["Limit"] as? Int32 {
                        self.limit = value
                    }
                    if let value = dict["NumberOfDraws"] as? Int32 {
                        self.numberOfDraws = value
                    }
                    if let value = dict["Proportion"] as? Double {
                        self.proportion = value
                    }
                    if let value = dict["RandomInspectionNumber"] as? Int32 {
                        self.randomInspectionNumber = value
                    }
                    if let value = dict["SamplingModeAgents"] as? [String: Any?] {
                        var model = ListTaskAssignRulesResponseBody.Data.TaskAssignRuleInfo.SamplingMode.SamplingModeAgents()
                        model.fromMap(value)
                        self.samplingModeAgents = model
                    }
                }
            }
            public class SkillGroups : Tea.TeaModel {
                public class SkillGroup : Tea.TeaModel {
                    public var skillId: String?

                    public var skillName: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.skillId != nil {
                            map["SkillId"] = self.skillId!
                        }
                        if self.skillName != nil {
                            map["SkillName"] = self.skillName!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["SkillId"] as? String {
                            self.skillId = value
                        }
                        if let value = dict["SkillName"] as? String {
                            self.skillName = value
                        }
                    }
                }
                public var skillGroup: [ListTaskAssignRulesResponseBody.Data.TaskAssignRuleInfo.SkillGroups.SkillGroup]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.skillGroup != nil {
                        var tmp : [Any] = []
                        for k in self.skillGroup! {
                            tmp.append(k.toMap())
                        }
                        map["SkillGroup"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["SkillGroup"] as? [Any?] {
                        var tmp : [ListTaskAssignRulesResponseBody.Data.TaskAssignRuleInfo.SkillGroups.SkillGroup] = []
                        for v in value {
                            if v != nil {
                                var model = ListTaskAssignRulesResponseBody.Data.TaskAssignRuleInfo.SkillGroups.SkillGroup()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.skillGroup = tmp
                    }
                }
            }
            public var agents: ListTaskAssignRulesResponseBody.Data.TaskAssignRuleInfo.Agents?

            public var agentsStr: String?

            public var assignmentType: Int32?

            public var callTimeEnd: Int64?

            public var callTimeStart: Int64?

            public var callType: Int32?

            public var createTime: String?

            public var durationMax: Int32?

            public var durationMin: Int32?

            public var enabled: Int32?

            public var priority: Int32?

            public var reviewers: ListTaskAssignRulesResponseBody.Data.TaskAssignRuleInfo.Reviewers?

            public var ruleId: Int64?

            public var ruleName: String?

            public var rules: ListTaskAssignRulesResponseBody.Data.TaskAssignRuleInfo.Rules?

            public var samplingMode: ListTaskAssignRulesResponseBody.Data.TaskAssignRuleInfo.SamplingMode?

            public var skillGroups: ListTaskAssignRulesResponseBody.Data.TaskAssignRuleInfo.SkillGroups?

            public var skillGroupsStr: String?

            public var updateTime: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.agents?.validate()
                try self.reviewers?.validate()
                try self.rules?.validate()
                try self.samplingMode?.validate()
                try self.skillGroups?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.agents != nil {
                    map["Agents"] = self.agents?.toMap()
                }
                if self.agentsStr != nil {
                    map["AgentsStr"] = self.agentsStr!
                }
                if self.assignmentType != nil {
                    map["AssignmentType"] = self.assignmentType!
                }
                if self.callTimeEnd != nil {
                    map["CallTimeEnd"] = self.callTimeEnd!
                }
                if self.callTimeStart != nil {
                    map["CallTimeStart"] = self.callTimeStart!
                }
                if self.callType != nil {
                    map["CallType"] = self.callType!
                }
                if self.createTime != nil {
                    map["CreateTime"] = self.createTime!
                }
                if self.durationMax != nil {
                    map["DurationMax"] = self.durationMax!
                }
                if self.durationMin != nil {
                    map["DurationMin"] = self.durationMin!
                }
                if self.enabled != nil {
                    map["Enabled"] = self.enabled!
                }
                if self.priority != nil {
                    map["Priority"] = self.priority!
                }
                if self.reviewers != nil {
                    map["Reviewers"] = self.reviewers?.toMap()
                }
                if self.ruleId != nil {
                    map["RuleId"] = self.ruleId!
                }
                if self.ruleName != nil {
                    map["RuleName"] = self.ruleName!
                }
                if self.rules != nil {
                    map["Rules"] = self.rules?.toMap()
                }
                if self.samplingMode != nil {
                    map["SamplingMode"] = self.samplingMode?.toMap()
                }
                if self.skillGroups != nil {
                    map["SkillGroups"] = self.skillGroups?.toMap()
                }
                if self.skillGroupsStr != nil {
                    map["SkillGroupsStr"] = self.skillGroupsStr!
                }
                if self.updateTime != nil {
                    map["UpdateTime"] = self.updateTime!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Agents"] as? [String: Any?] {
                    var model = ListTaskAssignRulesResponseBody.Data.TaskAssignRuleInfo.Agents()
                    model.fromMap(value)
                    self.agents = model
                }
                if let value = dict["AgentsStr"] as? String {
                    self.agentsStr = value
                }
                if let value = dict["AssignmentType"] as? Int32 {
                    self.assignmentType = value
                }
                if let value = dict["CallTimeEnd"] as? Int64 {
                    self.callTimeEnd = value
                }
                if let value = dict["CallTimeStart"] as? Int64 {
                    self.callTimeStart = value
                }
                if let value = dict["CallType"] as? Int32 {
                    self.callType = value
                }
                if let value = dict["CreateTime"] as? String {
                    self.createTime = value
                }
                if let value = dict["DurationMax"] as? Int32 {
                    self.durationMax = value
                }
                if let value = dict["DurationMin"] as? Int32 {
                    self.durationMin = value
                }
                if let value = dict["Enabled"] as? Int32 {
                    self.enabled = value
                }
                if let value = dict["Priority"] as? Int32 {
                    self.priority = value
                }
                if let value = dict["Reviewers"] as? [String: Any?] {
                    var model = ListTaskAssignRulesResponseBody.Data.TaskAssignRuleInfo.Reviewers()
                    model.fromMap(value)
                    self.reviewers = model
                }
                if let value = dict["RuleId"] as? Int64 {
                    self.ruleId = value
                }
                if let value = dict["RuleName"] as? String {
                    self.ruleName = value
                }
                if let value = dict["Rules"] as? [String: Any?] {
                    var model = ListTaskAssignRulesResponseBody.Data.TaskAssignRuleInfo.Rules()
                    model.fromMap(value)
                    self.rules = model
                }
                if let value = dict["SamplingMode"] as? [String: Any?] {
                    var model = ListTaskAssignRulesResponseBody.Data.TaskAssignRuleInfo.SamplingMode()
                    model.fromMap(value)
                    self.samplingMode = model
                }
                if let value = dict["SkillGroups"] as? [String: Any?] {
                    var model = ListTaskAssignRulesResponseBody.Data.TaskAssignRuleInfo.SkillGroups()
                    model.fromMap(value)
                    self.skillGroups = model
                }
                if let value = dict["SkillGroupsStr"] as? String {
                    self.skillGroupsStr = value
                }
                if let value = dict["UpdateTime"] as? String {
                    self.updateTime = value
                }
            }
        }
        public var taskAssignRuleInfo: [ListTaskAssignRulesResponseBody.Data.TaskAssignRuleInfo]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.taskAssignRuleInfo != nil {
                var tmp : [Any] = []
                for k in self.taskAssignRuleInfo! {
                    tmp.append(k.toMap())
                }
                map["TaskAssignRuleInfo"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["TaskAssignRuleInfo"] as? [Any?] {
                var tmp : [ListTaskAssignRulesResponseBody.Data.TaskAssignRuleInfo] = []
                for v in value {
                    if v != nil {
                        var model = ListTaskAssignRulesResponseBody.Data.TaskAssignRuleInfo()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.taskAssignRuleInfo = tmp
            }
        }
    }
    public var code: String?

    public var count: Int32?

    public var data: ListTaskAssignRulesResponseBody.Data?

    public var message: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.count != nil {
            map["Count"] = self.count!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Count"] as? Int32 {
            self.count = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ListTaskAssignRulesResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ListTaskAssignRulesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListTaskAssignRulesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListTaskAssignRulesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListUsersRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var jsonStr: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.jsonStr != nil {
            map["JsonStr"] = self.jsonStr!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["JsonStr"] as? String {
            self.jsonStr = value
        }
    }
}

public class ListUsersResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class User : Tea.TeaModel {
            public var aliUid: String?

            public var createTime: String?

            public var description_: String?

            public var displayName: String?

            public var id: Int64?

            public var loginUserType: Int32?

            public var roleName: String?

            public var updateTime: String?

            public var userName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.aliUid != nil {
                    map["AliUid"] = self.aliUid!
                }
                if self.createTime != nil {
                    map["CreateTime"] = self.createTime!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.displayName != nil {
                    map["DisplayName"] = self.displayName!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.loginUserType != nil {
                    map["LoginUserType"] = self.loginUserType!
                }
                if self.roleName != nil {
                    map["RoleName"] = self.roleName!
                }
                if self.updateTime != nil {
                    map["UpdateTime"] = self.updateTime!
                }
                if self.userName != nil {
                    map["UserName"] = self.userName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AliUid"] as? String {
                    self.aliUid = value
                }
                if let value = dict["CreateTime"] as? String {
                    self.createTime = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["DisplayName"] as? String {
                    self.displayName = value
                }
                if let value = dict["Id"] as? Int64 {
                    self.id = value
                }
                if let value = dict["LoginUserType"] as? Int32 {
                    self.loginUserType = value
                }
                if let value = dict["RoleName"] as? String {
                    self.roleName = value
                }
                if let value = dict["UpdateTime"] as? String {
                    self.updateTime = value
                }
                if let value = dict["UserName"] as? String {
                    self.userName = value
                }
            }
        }
        public var user: [ListUsersResponseBody.Data.User]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.user != nil {
                var tmp : [Any] = []
                for k in self.user! {
                    tmp.append(k.toMap())
                }
                map["User"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["User"] as? [Any?] {
                var tmp : [ListUsersResponseBody.Data.User] = []
                for v in value {
                    if v != nil {
                        var model = ListUsersResponseBody.Data.User()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.user = tmp
            }
        }
    }
    public var code: String?

    public var count: Int32?

    public var data: ListUsersResponseBody.Data?

    public var message: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.count != nil {
            map["Count"] = self.count!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Count"] as? Int32 {
            self.count = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ListUsersResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ListUsersResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListUsersResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListUsersResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListWarningConfigRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var jsonStr: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.jsonStr != nil {
            map["JsonStr"] = self.jsonStr!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["JsonStr"] as? String {
            self.jsonStr = value
        }
    }
}

public class ListWarningConfigResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class WarningConfigInfo : Tea.TeaModel {
            public class Channels : Tea.TeaModel {
                public class Channel : Tea.TeaModel {
                    public var type: Int32?

                    public var url: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.type != nil {
                            map["Type"] = self.type!
                        }
                        if self.url != nil {
                            map["Url"] = self.url!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Type"] as? Int32 {
                            self.type = value
                        }
                        if let value = dict["Url"] as? String {
                            self.url = value
                        }
                    }
                }
                public var channel: [ListWarningConfigResponseBody.Data.WarningConfigInfo.Channels.Channel]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.channel != nil {
                        var tmp : [Any] = []
                        for k in self.channel! {
                            tmp.append(k.toMap())
                        }
                        map["Channel"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Channel"] as? [Any?] {
                        var tmp : [ListWarningConfigResponseBody.Data.WarningConfigInfo.Channels.Channel] = []
                        for v in value {
                            if v != nil {
                                var model = ListWarningConfigResponseBody.Data.WarningConfigInfo.Channels.Channel()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.channel = tmp
                    }
                }
            }
            public class RidList : Tea.TeaModel {
                public var ridList: [String]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.ridList != nil {
                        map["RidList"] = self.ridList!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["RidList"] as? [String] {
                        self.ridList = value
                    }
                }
            }
            public class RuleList : Tea.TeaModel {
                public class WarningRule : Tea.TeaModel {
                    public var rid: Int64?

                    public var ruleName: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.rid != nil {
                            map["Rid"] = self.rid!
                        }
                        if self.ruleName != nil {
                            map["RuleName"] = self.ruleName!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Rid"] as? Int64 {
                            self.rid = value
                        }
                        if let value = dict["RuleName"] as? String {
                            self.ruleName = value
                        }
                    }
                }
                public var warningRule: [ListWarningConfigResponseBody.Data.WarningConfigInfo.RuleList.WarningRule]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.warningRule != nil {
                        var tmp : [Any] = []
                        for k in self.warningRule! {
                            tmp.append(k.toMap())
                        }
                        map["WarningRule"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["WarningRule"] as? [Any?] {
                        var tmp : [ListWarningConfigResponseBody.Data.WarningConfigInfo.RuleList.WarningRule] = []
                        for v in value {
                            if v != nil {
                                var model = ListWarningConfigResponseBody.Data.WarningConfigInfo.RuleList.WarningRule()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.warningRule = tmp
                    }
                }
            }
            public var channels: ListWarningConfigResponseBody.Data.WarningConfigInfo.Channels?

            public var configId: Int64?

            public var configName: String?

            public var createTime: String?

            public var ridList: ListWarningConfigResponseBody.Data.WarningConfigInfo.RidList?

            public var ruleList: ListWarningConfigResponseBody.Data.WarningConfigInfo.RuleList?

            public var status: Int32?

            public var updateTime: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.channels?.validate()
                try self.ridList?.validate()
                try self.ruleList?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.channels != nil {
                    map["Channels"] = self.channels?.toMap()
                }
                if self.configId != nil {
                    map["ConfigId"] = self.configId!
                }
                if self.configName != nil {
                    map["ConfigName"] = self.configName!
                }
                if self.createTime != nil {
                    map["CreateTime"] = self.createTime!
                }
                if self.ridList != nil {
                    map["RidList"] = self.ridList?.toMap()
                }
                if self.ruleList != nil {
                    map["RuleList"] = self.ruleList?.toMap()
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                if self.updateTime != nil {
                    map["UpdateTime"] = self.updateTime!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Channels"] as? [String: Any?] {
                    var model = ListWarningConfigResponseBody.Data.WarningConfigInfo.Channels()
                    model.fromMap(value)
                    self.channels = model
                }
                if let value = dict["ConfigId"] as? Int64 {
                    self.configId = value
                }
                if let value = dict["ConfigName"] as? String {
                    self.configName = value
                }
                if let value = dict["CreateTime"] as? String {
                    self.createTime = value
                }
                if let value = dict["RidList"] as? [String: Any?] {
                    var model = ListWarningConfigResponseBody.Data.WarningConfigInfo.RidList()
                    model.fromMap(value)
                    self.ridList = model
                }
                if let value = dict["RuleList"] as? [String: Any?] {
                    var model = ListWarningConfigResponseBody.Data.WarningConfigInfo.RuleList()
                    model.fromMap(value)
                    self.ruleList = model
                }
                if let value = dict["Status"] as? Int32 {
                    self.status = value
                }
                if let value = dict["UpdateTime"] as? String {
                    self.updateTime = value
                }
            }
        }
        public var warningConfigInfo: [ListWarningConfigResponseBody.Data.WarningConfigInfo]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.warningConfigInfo != nil {
                var tmp : [Any] = []
                for k in self.warningConfigInfo! {
                    tmp.append(k.toMap())
                }
                map["WarningConfigInfo"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["WarningConfigInfo"] as? [Any?] {
                var tmp : [ListWarningConfigResponseBody.Data.WarningConfigInfo] = []
                for v in value {
                    if v != nil {
                        var model = ListWarningConfigResponseBody.Data.WarningConfigInfo()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.warningConfigInfo = tmp
            }
        }
    }
    public var code: String?

    public var data: ListWarningConfigResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ListWarningConfigResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ListWarningConfigResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListWarningConfigResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListWarningConfigResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListWarningStrategyConfigRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var jsonStr: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.jsonStr != nil {
            map["JsonStr"] = self.jsonStr!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["JsonStr"] as? String {
            self.jsonStr = value
        }
    }
}

public class ListWarningStrategyConfigResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Data : Tea.TeaModel {
            public var id: Int64?

            public var intervalTime: Int64?

            public var lambda: String?

            public var level: Int64?

            public var maxNumber: Int64?

            public var name: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.intervalTime != nil {
                    map["IntervalTime"] = self.intervalTime!
                }
                if self.lambda != nil {
                    map["Lambda"] = self.lambda!
                }
                if self.level != nil {
                    map["Level"] = self.level!
                }
                if self.maxNumber != nil {
                    map["MaxNumber"] = self.maxNumber!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Id"] as? Int64 {
                    self.id = value
                }
                if let value = dict["IntervalTime"] as? Int64 {
                    self.intervalTime = value
                }
                if let value = dict["Lambda"] as? String {
                    self.lambda = value
                }
                if let value = dict["Level"] as? Int64 {
                    self.level = value
                }
                if let value = dict["MaxNumber"] as? Int64 {
                    self.maxNumber = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
            }
        }
        public var data: [ListWarningStrategyConfigResponseBody.Data.Data]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.data != nil {
                var tmp : [Any] = []
                for k in self.data! {
                    tmp.append(k.toMap())
                }
                map["data"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["data"] as? [Any?] {
                var tmp : [ListWarningStrategyConfigResponseBody.Data.Data] = []
                for v in value {
                    if v != nil {
                        var model = ListWarningStrategyConfigResponseBody.Data.Data()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.data = tmp
            }
        }
    }
    public var code: String?

    public var count: Int32?

    public var data: ListWarningStrategyConfigResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.count != nil {
            map["Count"] = self.count!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Count"] as? Int32 {
            self.count = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ListWarningStrategyConfigResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ListWarningStrategyConfigResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListWarningStrategyConfigResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListWarningStrategyConfigResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RevertAssignedSessionRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var jsonStr: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.jsonStr != nil {
            map["jsonStr"] = self.jsonStr!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["jsonStr"] as? String {
            self.jsonStr = value
        }
    }
}

public class RevertAssignedSessionResponseBody : Tea.TeaModel {
    public class Messages : Tea.TeaModel {
        public var message: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.message != nil {
                map["Message"] = self.message!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Message"] as? [String] {
                self.message = value
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var messages: RevertAssignedSessionResponseBody.Messages?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.messages?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.messages != nil {
            map["Messages"] = self.messages?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Messages"] as? [String: Any?] {
            var model = RevertAssignedSessionResponseBody.Messages()
            model.fromMap(value)
            self.messages = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class RevertAssignedSessionResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RevertAssignedSessionResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RevertAssignedSessionResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RevertAssignedSessionGroupRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var jsonStr: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.jsonStr != nil {
            map["jsonStr"] = self.jsonStr!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["jsonStr"] as? String {
            self.jsonStr = value
        }
    }
}

public class RevertAssignedSessionGroupResponseBody : Tea.TeaModel {
    public class Messages : Tea.TeaModel {
        public var message: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.message != nil {
                map["Message"] = self.message!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Message"] as? [String] {
                self.message = value
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var messages: RevertAssignedSessionGroupResponseBody.Messages?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.messages?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.messages != nil {
            map["Messages"] = self.messages?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Messages"] as? [String: Any?] {
            var model = RevertAssignedSessionGroupResponseBody.Messages()
            model.fromMap(value)
            self.messages = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class RevertAssignedSessionGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RevertAssignedSessionGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RevertAssignedSessionGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SaveConfigDataSetRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var jsonStr: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.jsonStr != nil {
            map["JsonStr"] = self.jsonStr!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["JsonStr"] as? String {
            self.jsonStr = value
        }
    }
}

public class SaveConfigDataSetResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class SaveConfigDataSetResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SaveConfigDataSetResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SaveConfigDataSetResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SubmitComplaintRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var jsonStr: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.jsonStr != nil {
            map["JsonStr"] = self.jsonStr!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["JsonStr"] as? String {
            self.jsonStr = value
        }
    }
}

public class SubmitComplaintResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class SubmitComplaintResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SubmitComplaintResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SubmitComplaintResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SubmitPrecisionTaskRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var jsonStr: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.jsonStr != nil {
            map["JsonStr"] = self.jsonStr!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["JsonStr"] as? String {
            self.jsonStr = value
        }
    }
}

public class SubmitPrecisionTaskResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class SubmitPrecisionTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SubmitPrecisionTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SubmitPrecisionTaskResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SubmitQualityCheckTaskRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var jsonStr: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.jsonStr != nil {
            map["JsonStr"] = self.jsonStr!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["JsonStr"] as? String {
            self.jsonStr = value
        }
    }
}

public class SubmitQualityCheckTaskResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class SubmitQualityCheckTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SubmitQualityCheckTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SubmitQualityCheckTaskResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SubmitReviewInfoRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var jsonStr: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.jsonStr != nil {
            map["JsonStr"] = self.jsonStr!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["JsonStr"] as? String {
            self.jsonStr = value
        }
    }
}

public class SubmitReviewInfoResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class SubmitReviewInfoResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SubmitReviewInfoResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SubmitReviewInfoResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SyncQualityCheckRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var jsonStr: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.jsonStr != nil {
            map["JsonStr"] = self.jsonStr!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["JsonStr"] as? String {
            self.jsonStr = value
        }
    }
}

public class SyncQualityCheckResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Rules : Tea.TeaModel {
            public class Hit : Tea.TeaModel {
                public class HitKeyWords : Tea.TeaModel {
                    public var cid: Int32?

                    public var from: Int32?

                    public var pid: Int32?

                    public var to: Int32?

                    public var val: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.cid != nil {
                            map["Cid"] = self.cid!
                        }
                        if self.from != nil {
                            map["From"] = self.from!
                        }
                        if self.pid != nil {
                            map["Pid"] = self.pid!
                        }
                        if self.to != nil {
                            map["To"] = self.to!
                        }
                        if self.val != nil {
                            map["Val"] = self.val!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Cid"] as? Int32 {
                            self.cid = value
                        }
                        if let value = dict["From"] as? Int32 {
                            self.from = value
                        }
                        if let value = dict["Pid"] as? Int32 {
                            self.pid = value
                        }
                        if let value = dict["To"] as? Int32 {
                            self.to = value
                        }
                        if let value = dict["Val"] as? String {
                            self.val = value
                        }
                    }
                }
                public class Phrase : Tea.TeaModel {
                    public var begin: Int64?

                    public var emotionValue: Int32?

                    public var end: Int64?

                    public var identity: String?

                    public var role: String?

                    public var silenceDuration: Int32?

                    public var speechRate: Int32?

                    public var words: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.begin != nil {
                            map["Begin"] = self.begin!
                        }
                        if self.emotionValue != nil {
                            map["EmotionValue"] = self.emotionValue!
                        }
                        if self.end != nil {
                            map["End"] = self.end!
                        }
                        if self.identity != nil {
                            map["Identity"] = self.identity!
                        }
                        if self.role != nil {
                            map["Role"] = self.role!
                        }
                        if self.silenceDuration != nil {
                            map["SilenceDuration"] = self.silenceDuration!
                        }
                        if self.speechRate != nil {
                            map["SpeechRate"] = self.speechRate!
                        }
                        if self.words != nil {
                            map["Words"] = self.words!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Begin"] as? Int64 {
                            self.begin = value
                        }
                        if let value = dict["EmotionValue"] as? Int32 {
                            self.emotionValue = value
                        }
                        if let value = dict["End"] as? Int64 {
                            self.end = value
                        }
                        if let value = dict["Identity"] as? String {
                            self.identity = value
                        }
                        if let value = dict["Role"] as? String {
                            self.role = value
                        }
                        if let value = dict["SilenceDuration"] as? Int32 {
                            self.silenceDuration = value
                        }
                        if let value = dict["SpeechRate"] as? Int32 {
                            self.speechRate = value
                        }
                        if let value = dict["Words"] as? String {
                            self.words = value
                        }
                    }
                }
                public var hitKeyWords: [SyncQualityCheckResponseBody.Data.Rules.Hit.HitKeyWords]?

                public var phrase: SyncQualityCheckResponseBody.Data.Rules.Hit.Phrase?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.phrase?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.hitKeyWords != nil {
                        var tmp : [Any] = []
                        for k in self.hitKeyWords! {
                            tmp.append(k.toMap())
                        }
                        map["HitKeyWords"] = tmp
                    }
                    if self.phrase != nil {
                        map["Phrase"] = self.phrase?.toMap()
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["HitKeyWords"] as? [Any?] {
                        var tmp : [SyncQualityCheckResponseBody.Data.Rules.Hit.HitKeyWords] = []
                        for v in value {
                            if v != nil {
                                var model = SyncQualityCheckResponseBody.Data.Rules.Hit.HitKeyWords()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.hitKeyWords = tmp
                    }
                    if let value = dict["Phrase"] as? [String: Any?] {
                        var model = SyncQualityCheckResponseBody.Data.Rules.Hit.Phrase()
                        model.fromMap(value)
                        self.phrase = model
                    }
                }
            }
            public class RuleInfoBase : Tea.TeaModel {
                public var comments: String?

                public var level: Int32?

                public var ruleCategoryName: String?

                public var scoreNum: Int32?

                public var scoreNumType: Int32?

                public var scoreType: Int32?

                public var type: Int32?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.comments != nil {
                        map["Comments"] = self.comments!
                    }
                    if self.level != nil {
                        map["Level"] = self.level!
                    }
                    if self.ruleCategoryName != nil {
                        map["RuleCategoryName"] = self.ruleCategoryName!
                    }
                    if self.scoreNum != nil {
                        map["ScoreNum"] = self.scoreNum!
                    }
                    if self.scoreNumType != nil {
                        map["ScoreNumType"] = self.scoreNumType!
                    }
                    if self.scoreType != nil {
                        map["ScoreType"] = self.scoreType!
                    }
                    if self.type != nil {
                        map["Type"] = self.type!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Comments"] as? String {
                        self.comments = value
                    }
                    if let value = dict["Level"] as? Int32 {
                        self.level = value
                    }
                    if let value = dict["RuleCategoryName"] as? String {
                        self.ruleCategoryName = value
                    }
                    if let value = dict["ScoreNum"] as? Int32 {
                        self.scoreNum = value
                    }
                    if let value = dict["ScoreNumType"] as? Int32 {
                        self.scoreNumType = value
                    }
                    if let value = dict["ScoreType"] as? Int32 {
                        self.scoreType = value
                    }
                    if let value = dict["Type"] as? Int32 {
                        self.type = value
                    }
                }
            }
            public var hit: [SyncQualityCheckResponseBody.Data.Rules.Hit]?

            public var rid: String?

            public var ruleInfoBase: SyncQualityCheckResponseBody.Data.Rules.RuleInfoBase?

            public var ruleName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.ruleInfoBase?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.hit != nil {
                    var tmp : [Any] = []
                    for k in self.hit! {
                        tmp.append(k.toMap())
                    }
                    map["Hit"] = tmp
                }
                if self.rid != nil {
                    map["Rid"] = self.rid!
                }
                if self.ruleInfoBase != nil {
                    map["RuleInfoBase"] = self.ruleInfoBase?.toMap()
                }
                if self.ruleName != nil {
                    map["RuleName"] = self.ruleName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Hit"] as? [Any?] {
                    var tmp : [SyncQualityCheckResponseBody.Data.Rules.Hit] = []
                    for v in value {
                        if v != nil {
                            var model = SyncQualityCheckResponseBody.Data.Rules.Hit()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.hit = tmp
                }
                if let value = dict["Rid"] as? String {
                    self.rid = value
                }
                if let value = dict["RuleInfoBase"] as? [String: Any?] {
                    var model = SyncQualityCheckResponseBody.Data.Rules.RuleInfoBase()
                    model.fromMap(value)
                    self.ruleInfoBase = model
                }
                if let value = dict["RuleName"] as? String {
                    self.ruleName = value
                }
            }
        }
        public var beginTime: Int64?

        public var rules: [SyncQualityCheckResponseBody.Data.Rules]?

        public var score: Int32?

        public var taskId: String?

        public var tid: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.beginTime != nil {
                map["BeginTime"] = self.beginTime!
            }
            if self.rules != nil {
                var tmp : [Any] = []
                for k in self.rules! {
                    tmp.append(k.toMap())
                }
                map["Rules"] = tmp
            }
            if self.score != nil {
                map["Score"] = self.score!
            }
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            if self.tid != nil {
                map["Tid"] = self.tid!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["BeginTime"] as? Int64 {
                self.beginTime = value
            }
            if let value = dict["Rules"] as? [Any?] {
                var tmp : [SyncQualityCheckResponseBody.Data.Rules] = []
                for v in value {
                    if v != nil {
                        var model = SyncQualityCheckResponseBody.Data.Rules()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.rules = tmp
            }
            if let value = dict["Score"] as? Int32 {
                self.score = value
            }
            if let value = dict["TaskId"] as? String {
                self.taskId = value
            }
            if let value = dict["Tid"] as? String {
                self.tid = value
            }
        }
    }
    public var code: String?

    public var data: SyncQualityCheckResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = SyncQualityCheckResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class SyncQualityCheckResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SyncQualityCheckResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SyncQualityCheckResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class TestRuleV4Request : Tea.TeaModel {
    public var isSchemeData: Int32?

    public var testJson: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.isSchemeData != nil {
            map["IsSchemeData"] = self.isSchemeData!
        }
        if self.testJson != nil {
            map["TestJson"] = self.testJson!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["IsSchemeData"] as? Int32 {
            self.isSchemeData = value
        }
        if let value = dict["TestJson"] as? String {
            self.testJson = value
        }
    }
}

public class TestRuleV4ResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class HitRuleReviewInfoList : Tea.TeaModel {
            public class BranchInfoList : Tea.TeaModel {
                public var checkType: Int32?

                public var index: Int32?

                public var lambda: String?

                public var name: String?

                public var nextNodeId: Int64?

                public var situation: NextNodeSituations?

                public var triggers: [String]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.situation?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.checkType != nil {
                        map["CheckType"] = self.checkType!
                    }
                    if self.index != nil {
                        map["Index"] = self.index!
                    }
                    if self.lambda != nil {
                        map["Lambda"] = self.lambda!
                    }
                    if self.name != nil {
                        map["Name"] = self.name!
                    }
                    if self.nextNodeId != nil {
                        map["NextNodeId"] = self.nextNodeId!
                    }
                    if self.situation != nil {
                        map["Situation"] = self.situation?.toMap()
                    }
                    if self.triggers != nil {
                        map["Triggers"] = self.triggers!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["CheckType"] as? Int32 {
                        self.checkType = value
                    }
                    if let value = dict["Index"] as? Int32 {
                        self.index = value
                    }
                    if let value = dict["Lambda"] as? String {
                        self.lambda = value
                    }
                    if let value = dict["Name"] as? String {
                        self.name = value
                    }
                    if let value = dict["NextNodeId"] as? Int64 {
                        self.nextNodeId = value
                    }
                    if let value = dict["Situation"] as? [String: Any?] {
                        var model = NextNodeSituations()
                        model.fromMap(value)
                        self.situation = model
                    }
                    if let value = dict["Triggers"] as? [String] {
                        self.triggers = value
                    }
                }
            }
            public class ConditionHitInfoList : Tea.TeaModel {
                public class KeyWords : Tea.TeaModel {
                    public var cid: String?

                    public var customizeCode: String?

                    public var from: Int32?

                    public var oid: String?

                    public var operatorKey: String?

                    public var pid: Int32?

                    public var similarPhrase: String?

                    public var tid: String?

                    public var to: Int32?

                    public var uuid: String?

                    public var val: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.cid != nil {
                            map["Cid"] = self.cid!
                        }
                        if self.customizeCode != nil {
                            map["CustomizeCode"] = self.customizeCode!
                        }
                        if self.from != nil {
                            map["From"] = self.from!
                        }
                        if self.oid != nil {
                            map["Oid"] = self.oid!
                        }
                        if self.operatorKey != nil {
                            map["OperatorKey"] = self.operatorKey!
                        }
                        if self.pid != nil {
                            map["Pid"] = self.pid!
                        }
                        if self.similarPhrase != nil {
                            map["SimilarPhrase"] = self.similarPhrase!
                        }
                        if self.tid != nil {
                            map["Tid"] = self.tid!
                        }
                        if self.to != nil {
                            map["To"] = self.to!
                        }
                        if self.uuid != nil {
                            map["Uuid"] = self.uuid!
                        }
                        if self.val != nil {
                            map["Val"] = self.val!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Cid"] as? String {
                            self.cid = value
                        }
                        if let value = dict["CustomizeCode"] as? String {
                            self.customizeCode = value
                        }
                        if let value = dict["From"] as? Int32 {
                            self.from = value
                        }
                        if let value = dict["Oid"] as? String {
                            self.oid = value
                        }
                        if let value = dict["OperatorKey"] as? String {
                            self.operatorKey = value
                        }
                        if let value = dict["Pid"] as? Int32 {
                            self.pid = value
                        }
                        if let value = dict["SimilarPhrase"] as? String {
                            self.similarPhrase = value
                        }
                        if let value = dict["Tid"] as? String {
                            self.tid = value
                        }
                        if let value = dict["To"] as? Int32 {
                            self.to = value
                        }
                        if let value = dict["Uuid"] as? String {
                            self.uuid = value
                        }
                        if let value = dict["Val"] as? String {
                            self.val = value
                        }
                    }
                }
                public class Phrase : Tea.TeaModel {
                    public var begin: Int64?

                    public var beginTime: String?

                    public var channelId: Int32?

                    public var emotionFineGrainedValue: Int32?

                    public var emotionValue: Int32?

                    public var end: Int64?

                    public var hitStatus: Int32?

                    public var hourMinSec: String?

                    public var identity: String?

                    public var pid: Int32?

                    public var renterId: Int64?

                    public var role: String?

                    public var sid: Int64?

                    public var silenceDuration: Int32?

                    public var speechRate: Int32?

                    public var uuid: String?

                    public var words: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.begin != nil {
                            map["Begin"] = self.begin!
                        }
                        if self.beginTime != nil {
                            map["BeginTime"] = self.beginTime!
                        }
                        if self.channelId != nil {
                            map["ChannelId"] = self.channelId!
                        }
                        if self.emotionFineGrainedValue != nil {
                            map["EmotionFineGrainedValue"] = self.emotionFineGrainedValue!
                        }
                        if self.emotionValue != nil {
                            map["EmotionValue"] = self.emotionValue!
                        }
                        if self.end != nil {
                            map["End"] = self.end!
                        }
                        if self.hitStatus != nil {
                            map["HitStatus"] = self.hitStatus!
                        }
                        if self.hourMinSec != nil {
                            map["HourMinSec"] = self.hourMinSec!
                        }
                        if self.identity != nil {
                            map["Identity"] = self.identity!
                        }
                        if self.pid != nil {
                            map["Pid"] = self.pid!
                        }
                        if self.renterId != nil {
                            map["RenterId"] = self.renterId!
                        }
                        if self.role != nil {
                            map["Role"] = self.role!
                        }
                        if self.sid != nil {
                            map["Sid"] = self.sid!
                        }
                        if self.silenceDuration != nil {
                            map["SilenceDuration"] = self.silenceDuration!
                        }
                        if self.speechRate != nil {
                            map["SpeechRate"] = self.speechRate!
                        }
                        if self.uuid != nil {
                            map["Uuid"] = self.uuid!
                        }
                        if self.words != nil {
                            map["Words"] = self.words!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Begin"] as? Int64 {
                            self.begin = value
                        }
                        if let value = dict["BeginTime"] as? String {
                            self.beginTime = value
                        }
                        if let value = dict["ChannelId"] as? Int32 {
                            self.channelId = value
                        }
                        if let value = dict["EmotionFineGrainedValue"] as? Int32 {
                            self.emotionFineGrainedValue = value
                        }
                        if let value = dict["EmotionValue"] as? Int32 {
                            self.emotionValue = value
                        }
                        if let value = dict["End"] as? Int64 {
                            self.end = value
                        }
                        if let value = dict["HitStatus"] as? Int32 {
                            self.hitStatus = value
                        }
                        if let value = dict["HourMinSec"] as? String {
                            self.hourMinSec = value
                        }
                        if let value = dict["Identity"] as? String {
                            self.identity = value
                        }
                        if let value = dict["Pid"] as? Int32 {
                            self.pid = value
                        }
                        if let value = dict["RenterId"] as? Int64 {
                            self.renterId = value
                        }
                        if let value = dict["Role"] as? String {
                            self.role = value
                        }
                        if let value = dict["Sid"] as? Int64 {
                            self.sid = value
                        }
                        if let value = dict["SilenceDuration"] as? Int32 {
                            self.silenceDuration = value
                        }
                        if let value = dict["SpeechRate"] as? Int32 {
                            self.speechRate = value
                        }
                        if let value = dict["Uuid"] as? String {
                            self.uuid = value
                        }
                        if let value = dict["Words"] as? String {
                            self.words = value
                        }
                    }
                }
                public var cid: [String]?

                public var keyWords: [TestRuleV4ResponseBody.Data.HitRuleReviewInfoList.ConditionHitInfoList.KeyWords]?

                public var phrase: TestRuleV4ResponseBody.Data.HitRuleReviewInfoList.ConditionHitInfoList.Phrase?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.phrase?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.cid != nil {
                        map["Cid"] = self.cid!
                    }
                    if self.keyWords != nil {
                        var tmp : [Any] = []
                        for k in self.keyWords! {
                            tmp.append(k.toMap())
                        }
                        map["KeyWords"] = tmp
                    }
                    if self.phrase != nil {
                        map["Phrase"] = self.phrase?.toMap()
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Cid"] as? [String] {
                        self.cid = value
                    }
                    if let value = dict["KeyWords"] as? [Any?] {
                        var tmp : [TestRuleV4ResponseBody.Data.HitRuleReviewInfoList.ConditionHitInfoList.KeyWords] = []
                        for v in value {
                            if v != nil {
                                var model = TestRuleV4ResponseBody.Data.HitRuleReviewInfoList.ConditionHitInfoList.KeyWords()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.keyWords = tmp
                    }
                    if let value = dict["Phrase"] as? [String: Any?] {
                        var model = TestRuleV4ResponseBody.Data.HitRuleReviewInfoList.ConditionHitInfoList.Phrase()
                        model.fromMap(value)
                        self.phrase = model
                    }
                }
            }
            public var branchHitId: Int64?

            public var branchInfoList: [TestRuleV4ResponseBody.Data.HitRuleReviewInfoList.BranchInfoList]?

            public var conditionHitInfoList: [TestRuleV4ResponseBody.Data.HitRuleReviewInfoList.ConditionHitInfoList]?

            public var conditionInfoList: [ConditionBasicInfo]?

            public var judgeNodeName: String?

            public var lambda: String?

            public var matched: Bool?

            public var nodeType: String?

            public var rid: Int64?

            public var ruleName: String?

            public var ruleScoreType: Int32?

            public var scoreNumType: Int32?

            public var taskFlowId: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.branchHitId != nil {
                    map["BranchHitId"] = self.branchHitId!
                }
                if self.branchInfoList != nil {
                    var tmp : [Any] = []
                    for k in self.branchInfoList! {
                        tmp.append(k.toMap())
                    }
                    map["BranchInfoList"] = tmp
                }
                if self.conditionHitInfoList != nil {
                    var tmp : [Any] = []
                    for k in self.conditionHitInfoList! {
                        tmp.append(k.toMap())
                    }
                    map["ConditionHitInfoList"] = tmp
                }
                if self.conditionInfoList != nil {
                    var tmp : [Any] = []
                    for k in self.conditionInfoList! {
                        tmp.append(k.toMap())
                    }
                    map["ConditionInfoList"] = tmp
                }
                if self.judgeNodeName != nil {
                    map["JudgeNodeName"] = self.judgeNodeName!
                }
                if self.lambda != nil {
                    map["Lambda"] = self.lambda!
                }
                if self.matched != nil {
                    map["Matched"] = self.matched!
                }
                if self.nodeType != nil {
                    map["NodeType"] = self.nodeType!
                }
                if self.rid != nil {
                    map["Rid"] = self.rid!
                }
                if self.ruleName != nil {
                    map["RuleName"] = self.ruleName!
                }
                if self.ruleScoreType != nil {
                    map["RuleScoreType"] = self.ruleScoreType!
                }
                if self.scoreNumType != nil {
                    map["ScoreNumType"] = self.scoreNumType!
                }
                if self.taskFlowId != nil {
                    map["TaskFlowId"] = self.taskFlowId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["BranchHitId"] as? Int64 {
                    self.branchHitId = value
                }
                if let value = dict["BranchInfoList"] as? [Any?] {
                    var tmp : [TestRuleV4ResponseBody.Data.HitRuleReviewInfoList.BranchInfoList] = []
                    for v in value {
                        if v != nil {
                            var model = TestRuleV4ResponseBody.Data.HitRuleReviewInfoList.BranchInfoList()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.branchInfoList = tmp
                }
                if let value = dict["ConditionHitInfoList"] as? [Any?] {
                    var tmp : [TestRuleV4ResponseBody.Data.HitRuleReviewInfoList.ConditionHitInfoList] = []
                    for v in value {
                        if v != nil {
                            var model = TestRuleV4ResponseBody.Data.HitRuleReviewInfoList.ConditionHitInfoList()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.conditionHitInfoList = tmp
                }
                if let value = dict["ConditionInfoList"] as? [Any?] {
                    var tmp : [ConditionBasicInfo] = []
                    for v in value {
                        if v != nil {
                            var model = ConditionBasicInfo()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.conditionInfoList = tmp
                }
                if let value = dict["JudgeNodeName"] as? String {
                    self.judgeNodeName = value
                }
                if let value = dict["Lambda"] as? String {
                    self.lambda = value
                }
                if let value = dict["Matched"] as? Bool {
                    self.matched = value
                }
                if let value = dict["NodeType"] as? String {
                    self.nodeType = value
                }
                if let value = dict["Rid"] as? Int64 {
                    self.rid = value
                }
                if let value = dict["RuleName"] as? String {
                    self.ruleName = value
                }
                if let value = dict["RuleScoreType"] as? Int32 {
                    self.ruleScoreType = value
                }
                if let value = dict["ScoreNumType"] as? Int32 {
                    self.scoreNumType = value
                }
                if let value = dict["TaskFlowId"] as? Int64 {
                    self.taskFlowId = value
                }
            }
        }
        public class HitTaskFlowList : Tea.TeaModel {
            public var graphFlow: TaskGraphFlow?

            public var rid: Int64?

            public var taskFlowType: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.graphFlow?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.graphFlow != nil {
                    map["GraphFlow"] = self.graphFlow?.toMap()
                }
                if self.rid != nil {
                    map["Rid"] = self.rid!
                }
                if self.taskFlowType != nil {
                    map["TaskFlowType"] = self.taskFlowType!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["GraphFlow"] as? [String: Any?] {
                    var model = TaskGraphFlow()
                    model.fromMap(value)
                    self.graphFlow = model
                }
                if let value = dict["Rid"] as? Int64 {
                    self.rid = value
                }
                if let value = dict["TaskFlowType"] as? Int32 {
                    self.taskFlowType = value
                }
            }
        }
        public class UnhitRuleReviewInfoList : Tea.TeaModel {
            public var conditionInfoList: [ConditionBasicInfo]?

            public var matched: Bool?

            public var rid: Int64?

            public var taskFlowType: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.conditionInfoList != nil {
                    var tmp : [Any] = []
                    for k in self.conditionInfoList! {
                        tmp.append(k.toMap())
                    }
                    map["ConditionInfoList"] = tmp
                }
                if self.matched != nil {
                    map["Matched"] = self.matched!
                }
                if self.rid != nil {
                    map["Rid"] = self.rid!
                }
                if self.taskFlowType != nil {
                    map["TaskFlowType"] = self.taskFlowType!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ConditionInfoList"] as? [Any?] {
                    var tmp : [ConditionBasicInfo] = []
                    for v in value {
                        if v != nil {
                            var model = ConditionBasicInfo()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.conditionInfoList = tmp
                }
                if let value = dict["Matched"] as? Bool {
                    self.matched = value
                }
                if let value = dict["Rid"] as? Int64 {
                    self.rid = value
                }
                if let value = dict["TaskFlowType"] as? Int32 {
                    self.taskFlowType = value
                }
            }
        }
        public var hitRuleReviewInfoList: [TestRuleV4ResponseBody.Data.HitRuleReviewInfoList]?

        public var hitTaskFlowList: [TestRuleV4ResponseBody.Data.HitTaskFlowList]?

        public var unhitRuleReviewInfoList: [TestRuleV4ResponseBody.Data.UnhitRuleReviewInfoList]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.hitRuleReviewInfoList != nil {
                var tmp : [Any] = []
                for k in self.hitRuleReviewInfoList! {
                    tmp.append(k.toMap())
                }
                map["HitRuleReviewInfoList"] = tmp
            }
            if self.hitTaskFlowList != nil {
                var tmp : [Any] = []
                for k in self.hitTaskFlowList! {
                    tmp.append(k.toMap())
                }
                map["HitTaskFlowList"] = tmp
            }
            if self.unhitRuleReviewInfoList != nil {
                var tmp : [Any] = []
                for k in self.unhitRuleReviewInfoList! {
                    tmp.append(k.toMap())
                }
                map["UnhitRuleReviewInfoList"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["HitRuleReviewInfoList"] as? [Any?] {
                var tmp : [TestRuleV4ResponseBody.Data.HitRuleReviewInfoList] = []
                for v in value {
                    if v != nil {
                        var model = TestRuleV4ResponseBody.Data.HitRuleReviewInfoList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.hitRuleReviewInfoList = tmp
            }
            if let value = dict["HitTaskFlowList"] as? [Any?] {
                var tmp : [TestRuleV4ResponseBody.Data.HitTaskFlowList] = []
                for v in value {
                    if v != nil {
                        var model = TestRuleV4ResponseBody.Data.HitTaskFlowList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.hitTaskFlowList = tmp
            }
            if let value = dict["UnhitRuleReviewInfoList"] as? [Any?] {
                var tmp : [TestRuleV4ResponseBody.Data.UnhitRuleReviewInfoList] = []
                for v in value {
                    if v != nil {
                        var model = TestRuleV4ResponseBody.Data.UnhitRuleReviewInfoList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.unhitRuleReviewInfoList = tmp
            }
        }
    }
    public var code: String?

    public var data: TestRuleV4ResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = TestRuleV4ResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class TestRuleV4Response : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: TestRuleV4ResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = TestRuleV4ResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateAsrVocabRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var jsonStr: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.jsonStr != nil {
            map["JsonStr"] = self.jsonStr!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["JsonStr"] as? String {
            self.jsonStr = value
        }
    }
}

public class UpdateAsrVocabResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class UpdateAsrVocabResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateAsrVocabResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateAsrVocabResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateCheckTypeToSchemeRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var jsonStr: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.jsonStr != nil {
            map["jsonStr"] = self.jsonStr!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["jsonStr"] as? String {
            self.jsonStr = value
        }
    }
}

public class UpdateCheckTypeToSchemeResponseBody : Tea.TeaModel {
    public class Messages : Tea.TeaModel {
        public var message: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.message != nil {
                map["Message"] = self.message!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Message"] as? [String] {
                self.message = value
            }
        }
    }
    public var code: String?

    public var data: Int64?

    public var httpStatusCode: Int32?

    public var message: String?

    public var messages: UpdateCheckTypeToSchemeResponseBody.Messages?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.messages?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.messages != nil {
            map["Messages"] = self.messages?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? Int64 {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Messages"] as? [String: Any?] {
            var model = UpdateCheckTypeToSchemeResponseBody.Messages()
            model.fromMap(value)
            self.messages = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class UpdateCheckTypeToSchemeResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateCheckTypeToSchemeResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateCheckTypeToSchemeResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateQualityCheckDataRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var jsonStr: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.jsonStr != nil {
            map["JsonStr"] = self.jsonStr!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["JsonStr"] as? String {
            self.jsonStr = value
        }
    }
}

public class UpdateQualityCheckDataResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class UpdateQualityCheckDataResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateQualityCheckDataResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateQualityCheckDataResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateQualityCheckSchemeRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var jsonStr: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.jsonStr != nil {
            map["jsonStr"] = self.jsonStr!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["jsonStr"] as? String {
            self.jsonStr = value
        }
    }
}

public class UpdateQualityCheckSchemeResponseBody : Tea.TeaModel {
    public class Messages : Tea.TeaModel {
        public var message: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.message != nil {
                map["Message"] = self.message!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Message"] as? [String] {
                self.message = value
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var messages: UpdateQualityCheckSchemeResponseBody.Messages?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.messages?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.messages != nil {
            map["Messages"] = self.messages?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Messages"] as? [String: Any?] {
            var model = UpdateQualityCheckSchemeResponseBody.Messages()
            model.fromMap(value)
            self.messages = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class UpdateQualityCheckSchemeResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateQualityCheckSchemeResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateQualityCheckSchemeResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateRuleRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var jsonStr: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.jsonStr != nil {
            map["JsonStr"] = self.jsonStr!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["JsonStr"] as? String {
            self.jsonStr = value
        }
    }
}

public class UpdateRuleResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class UpdateRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateRuleByIdRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var isCopy: Bool?

    public var jsonStrForRule: String?

    public var returnRelatedSchemes: Bool?

    public var ruleId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.isCopy != nil {
            map["IsCopy"] = self.isCopy!
        }
        if self.jsonStrForRule != nil {
            map["JsonStrForRule"] = self.jsonStrForRule!
        }
        if self.returnRelatedSchemes != nil {
            map["ReturnRelatedSchemes"] = self.returnRelatedSchemes!
        }
        if self.ruleId != nil {
            map["RuleId"] = self.ruleId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["IsCopy"] as? Bool {
            self.isCopy = value
        }
        if let value = dict["JsonStrForRule"] as? String {
            self.jsonStrForRule = value
        }
        if let value = dict["ReturnRelatedSchemes"] as? Bool {
            self.returnRelatedSchemes = value
        }
        if let value = dict["RuleId"] as? Int64 {
            self.ruleId = value
        }
    }
}

public class UpdateRuleByIdResponseBody : Tea.TeaModel {
    public class Messages : Tea.TeaModel {
        public var message: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.message != nil {
                map["Message"] = self.message!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Message"] as? [String] {
                self.message = value
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var messages: UpdateRuleByIdResponseBody.Messages?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.messages?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.messages != nil {
            map["Messages"] = self.messages?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Messages"] as? [String: Any?] {
            var model = UpdateRuleByIdResponseBody.Messages()
            model.fromMap(value)
            self.messages = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class UpdateRuleByIdResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateRuleByIdResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateRuleByIdResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateRuleToSchemeRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var jsonStr: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.jsonStr != nil {
            map["jsonStr"] = self.jsonStr!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["jsonStr"] as? String {
            self.jsonStr = value
        }
    }
}

public class UpdateRuleToSchemeResponseBody : Tea.TeaModel {
    public class Messages : Tea.TeaModel {
        public var message: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.message != nil {
                map["Message"] = self.message!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Message"] as? [String] {
                self.message = value
            }
        }
    }
    public var code: String?

    public var data: Int64?

    public var httpStatusCode: Int32?

    public var message: String?

    public var messages: UpdateRuleToSchemeResponseBody.Messages?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.messages?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.messages != nil {
            map["Messages"] = self.messages?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? Int64 {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Messages"] as? [String: Any?] {
            var model = UpdateRuleToSchemeResponseBody.Messages()
            model.fromMap(value)
            self.messages = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class UpdateRuleToSchemeResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateRuleToSchemeResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateRuleToSchemeResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateRuleV4Request : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var jsonStrForRule: String?

    public var ruleId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.jsonStrForRule != nil {
            map["JsonStrForRule"] = self.jsonStrForRule!
        }
        if self.ruleId != nil {
            map["RuleId"] = self.ruleId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["JsonStrForRule"] as? String {
            self.jsonStrForRule = value
        }
        if let value = dict["RuleId"] as? Int64 {
            self.ruleId = value
        }
    }
}

public class UpdateRuleV4ResponseBody : Tea.TeaModel {
    public class Messages : Tea.TeaModel {
        public var message: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.message != nil {
                map["Message"] = self.message!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Message"] as? [String] {
                self.message = value
            }
        }
    }
    public var code: String?

    public var data: Int64?

    public var httpStatusCode: Int32?

    public var message: String?

    public var messages: UpdateRuleV4ResponseBody.Messages?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.messages?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.messages != nil {
            map["Messages"] = self.messages?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? Int64 {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Messages"] as? [String: Any?] {
            var model = UpdateRuleV4ResponseBody.Messages()
            model.fromMap(value)
            self.messages = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class UpdateRuleV4Response : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateRuleV4ResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateRuleV4ResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateSchemeTaskConfigRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var jsonStr: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.jsonStr != nil {
            map["jsonStr"] = self.jsonStr!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["jsonStr"] as? String {
            self.jsonStr = value
        }
    }
}

public class UpdateSchemeTaskConfigResponseBody : Tea.TeaModel {
    public class Messages : Tea.TeaModel {
        public var message: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.message != nil {
                map["Message"] = self.message!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Message"] as? [String] {
                self.message = value
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var messages: UpdateSchemeTaskConfigResponseBody.Messages?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.messages?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.messages != nil {
            map["Messages"] = self.messages?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Messages"] as? [String: Any?] {
            var model = UpdateSchemeTaskConfigResponseBody.Messages()
            model.fromMap(value)
            self.messages = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class UpdateSchemeTaskConfigResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateSchemeTaskConfigResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateSchemeTaskConfigResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateSkillGroupConfigRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var jsonStr: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.jsonStr != nil {
            map["JsonStr"] = self.jsonStr!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["JsonStr"] as? String {
            self.jsonStr = value
        }
    }
}

public class UpdateSkillGroupConfigResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class UpdateSkillGroupConfigResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateSkillGroupConfigResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateSkillGroupConfigResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateSyncQualityCheckDataRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var jsonStr: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.jsonStr != nil {
            map["JsonStr"] = self.jsonStr!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["JsonStr"] as? String {
            self.jsonStr = value
        }
    }
}

public class UpdateSyncQualityCheckDataResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var taskId: String?

        public var tid: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            if self.tid != nil {
                map["Tid"] = self.tid!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["TaskId"] as? String {
                self.taskId = value
            }
            if let value = dict["Tid"] as? String {
                self.tid = value
            }
        }
    }
    public var code: String?

    public var data: UpdateSyncQualityCheckDataResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = UpdateSyncQualityCheckDataResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class UpdateSyncQualityCheckDataResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateSyncQualityCheckDataResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateSyncQualityCheckDataResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateTaskAssignRuleRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var jsonStr: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.jsonStr != nil {
            map["JsonStr"] = self.jsonStr!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["JsonStr"] as? String {
            self.jsonStr = value
        }
    }
}

public class UpdateTaskAssignRuleResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class UpdateTaskAssignRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateTaskAssignRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateTaskAssignRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateUserRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var jsonStr: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.jsonStr != nil {
            map["JsonStr"] = self.jsonStr!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["JsonStr"] as? String {
            self.jsonStr = value
        }
    }
}

public class UpdateUserResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class UpdateUserResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateUserResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateUserResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateWarningConfigRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var jsonStr: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.jsonStr != nil {
            map["JsonStr"] = self.jsonStr!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["JsonStr"] as? String {
            self.jsonStr = value
        }
    }
}

public class UpdateWarningConfigResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class UpdateWarningConfigResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateWarningConfigResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateWarningConfigResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateWarningStrategyConfigRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var jsonStr: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.jsonStr != nil {
            map["JsonStr"] = self.jsonStr!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["JsonStr"] as? String {
            self.jsonStr = value
        }
    }
}

public class UpdateWarningStrategyConfigResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class UpdateWarningStrategyConfigResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateWarningStrategyConfigResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateWarningStrategyConfigResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UploadAudioDataRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var jsonStr: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.jsonStr != nil {
            map["JsonStr"] = self.jsonStr!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["JsonStr"] as? String {
            self.jsonStr = value
        }
    }
}

public class UploadAudioDataResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class UploadAudioDataResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UploadAudioDataResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UploadAudioDataResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UploadDataRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var jsonStr: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.jsonStr != nil {
            map["JsonStr"] = self.jsonStr!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["JsonStr"] as? String {
            self.jsonStr = value
        }
    }
}

public class UploadDataResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class UploadDataResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UploadDataResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UploadDataResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UploadDataSyncRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var jsonStr: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.jsonStr != nil {
            map["JsonStr"] = self.jsonStr!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["JsonStr"] as? String {
            self.jsonStr = value
        }
    }
}

public class UploadDataSyncResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class ResultInfo : Tea.TeaModel {
            public class HandScoreIdList : Tea.TeaModel {
                public var handScoreIdList: [String]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.handScoreIdList != nil {
                        map["HandScoreIdList"] = self.handScoreIdList!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["HandScoreIdList"] as? [String] {
                        self.handScoreIdList = value
                    }
                }
            }
            public class Rules : Tea.TeaModel {
                public class RuleHitInfo : Tea.TeaModel {
                    public class ConditionInfo : Tea.TeaModel {
                        public class ConditionBasicInfo : Tea.TeaModel {
                            public var conditionInfoCid: String?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.conditionInfoCid != nil {
                                    map["ConditionInfoCid"] = self.conditionInfoCid!
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                guard let dict else { return }
                                if let value = dict["ConditionInfoCid"] as? String {
                                    self.conditionInfoCid = value
                                }
                            }
                        }
                        public var conditionBasicInfo: [UploadDataSyncResponseBody.Data.ResultInfo.Rules.RuleHitInfo.ConditionInfo.ConditionBasicInfo]?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.conditionBasicInfo != nil {
                                var tmp : [Any] = []
                                for k in self.conditionBasicInfo! {
                                    tmp.append(k.toMap())
                                }
                                map["ConditionBasicInfo"] = tmp
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["ConditionBasicInfo"] as? [Any?] {
                                var tmp : [UploadDataSyncResponseBody.Data.ResultInfo.Rules.RuleHitInfo.ConditionInfo.ConditionBasicInfo] = []
                                for v in value {
                                    if v != nil {
                                        var model = UploadDataSyncResponseBody.Data.ResultInfo.Rules.RuleHitInfo.ConditionInfo.ConditionBasicInfo()
                                        if v != nil {
                                            model.fromMap(v as? [String: Any?])
                                        }
                                        tmp.append(model)
                                    }
                                }
                                self.conditionBasicInfo = tmp
                            }
                        }
                    }
                    public class Hit : Tea.TeaModel {
                        public class ConditionHitInfo : Tea.TeaModel {
                            public class HitCids : Tea.TeaModel {
                                public var cidItem: [String]?

                                public override init() {
                                    super.init()
                                }

                                public init(_ dict: [String: Any]) {
                                    super.init()
                                    self.fromMap(dict)
                                }

                                public override func validate() throws -> Void {
                                }

                                public override func toMap() -> [String : Any] {
                                    var map = super.toMap()
                                    if self.cidItem != nil {
                                        map["CidItem"] = self.cidItem!
                                    }
                                    return map
                                }

                                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                    guard let dict else { return }
                                    if let value = dict["CidItem"] as? [String] {
                                        self.cidItem = value
                                    }
                                }
                            }
                            public class HitKeyWords : Tea.TeaModel {
                                public class HitKeyWord : Tea.TeaModel {
                                    public var from: Int32?

                                    public var pid: Int32?

                                    public var tid: String?

                                    public var to: Int32?

                                    public var val: String?

                                    public override init() {
                                        super.init()
                                    }

                                    public init(_ dict: [String: Any]) {
                                        super.init()
                                        self.fromMap(dict)
                                    }

                                    public override func validate() throws -> Void {
                                    }

                                    public override func toMap() -> [String : Any] {
                                        var map = super.toMap()
                                        if self.from != nil {
                                            map["From"] = self.from!
                                        }
                                        if self.pid != nil {
                                            map["Pid"] = self.pid!
                                        }
                                        if self.tid != nil {
                                            map["Tid"] = self.tid!
                                        }
                                        if self.to != nil {
                                            map["To"] = self.to!
                                        }
                                        if self.val != nil {
                                            map["Val"] = self.val!
                                        }
                                        return map
                                    }

                                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                        guard let dict else { return }
                                        if let value = dict["From"] as? Int32 {
                                            self.from = value
                                        }
                                        if let value = dict["Pid"] as? Int32 {
                                            self.pid = value
                                        }
                                        if let value = dict["Tid"] as? String {
                                            self.tid = value
                                        }
                                        if let value = dict["To"] as? Int32 {
                                            self.to = value
                                        }
                                        if let value = dict["Val"] as? String {
                                            self.val = value
                                        }
                                    }
                                }
                                public var hitKeyWord: [UploadDataSyncResponseBody.Data.ResultInfo.Rules.RuleHitInfo.Hit.ConditionHitInfo.HitKeyWords.HitKeyWord]?

                                public override init() {
                                    super.init()
                                }

                                public init(_ dict: [String: Any]) {
                                    super.init()
                                    self.fromMap(dict)
                                }

                                public override func validate() throws -> Void {
                                }

                                public override func toMap() -> [String : Any] {
                                    var map = super.toMap()
                                    if self.hitKeyWord != nil {
                                        var tmp : [Any] = []
                                        for k in self.hitKeyWord! {
                                            tmp.append(k.toMap())
                                        }
                                        map["HitKeyWord"] = tmp
                                    }
                                    return map
                                }

                                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                    guard let dict else { return }
                                    if let value = dict["HitKeyWord"] as? [Any?] {
                                        var tmp : [UploadDataSyncResponseBody.Data.ResultInfo.Rules.RuleHitInfo.Hit.ConditionHitInfo.HitKeyWords.HitKeyWord] = []
                                        for v in value {
                                            if v != nil {
                                                var model = UploadDataSyncResponseBody.Data.ResultInfo.Rules.RuleHitInfo.Hit.ConditionHitInfo.HitKeyWords.HitKeyWord()
                                                if v != nil {
                                                    model.fromMap(v as? [String: Any?])
                                                }
                                                tmp.append(model)
                                            }
                                        }
                                        self.hitKeyWord = tmp
                                    }
                                }
                            }
                            public class Phrase : Tea.TeaModel {
                                public var begin: Int64?

                                public var beginTime: String?

                                public var end: Int64?

                                public var identity: String?

                                public var role: String?

                                public var words: String?

                                public override init() {
                                    super.init()
                                }

                                public init(_ dict: [String: Any]) {
                                    super.init()
                                    self.fromMap(dict)
                                }

                                public override func validate() throws -> Void {
                                }

                                public override func toMap() -> [String : Any] {
                                    var map = super.toMap()
                                    if self.begin != nil {
                                        map["Begin"] = self.begin!
                                    }
                                    if self.beginTime != nil {
                                        map["BeginTime"] = self.beginTime!
                                    }
                                    if self.end != nil {
                                        map["End"] = self.end!
                                    }
                                    if self.identity != nil {
                                        map["Identity"] = self.identity!
                                    }
                                    if self.role != nil {
                                        map["Role"] = self.role!
                                    }
                                    if self.words != nil {
                                        map["Words"] = self.words!
                                    }
                                    return map
                                }

                                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                    guard let dict else { return }
                                    if let value = dict["Begin"] as? Int64 {
                                        self.begin = value
                                    }
                                    if let value = dict["BeginTime"] as? String {
                                        self.beginTime = value
                                    }
                                    if let value = dict["End"] as? Int64 {
                                        self.end = value
                                    }
                                    if let value = dict["Identity"] as? String {
                                        self.identity = value
                                    }
                                    if let value = dict["Role"] as? String {
                                        self.role = value
                                    }
                                    if let value = dict["Words"] as? String {
                                        self.words = value
                                    }
                                }
                            }
                            public var hitCids: UploadDataSyncResponseBody.Data.ResultInfo.Rules.RuleHitInfo.Hit.ConditionHitInfo.HitCids?

                            public var hitKeyWords: UploadDataSyncResponseBody.Data.ResultInfo.Rules.RuleHitInfo.Hit.ConditionHitInfo.HitKeyWords?

                            public var phrase: UploadDataSyncResponseBody.Data.ResultInfo.Rules.RuleHitInfo.Hit.ConditionHitInfo.Phrase?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                                try self.hitCids?.validate()
                                try self.hitKeyWords?.validate()
                                try self.phrase?.validate()
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.hitCids != nil {
                                    map["HitCids"] = self.hitCids?.toMap()
                                }
                                if self.hitKeyWords != nil {
                                    map["HitKeyWords"] = self.hitKeyWords?.toMap()
                                }
                                if self.phrase != nil {
                                    map["Phrase"] = self.phrase?.toMap()
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                guard let dict else { return }
                                if let value = dict["HitCids"] as? [String: Any?] {
                                    var model = UploadDataSyncResponseBody.Data.ResultInfo.Rules.RuleHitInfo.Hit.ConditionHitInfo.HitCids()
                                    model.fromMap(value)
                                    self.hitCids = model
                                }
                                if let value = dict["HitKeyWords"] as? [String: Any?] {
                                    var model = UploadDataSyncResponseBody.Data.ResultInfo.Rules.RuleHitInfo.Hit.ConditionHitInfo.HitKeyWords()
                                    model.fromMap(value)
                                    self.hitKeyWords = model
                                }
                                if let value = dict["Phrase"] as? [String: Any?] {
                                    var model = UploadDataSyncResponseBody.Data.ResultInfo.Rules.RuleHitInfo.Hit.ConditionHitInfo.Phrase()
                                    model.fromMap(value)
                                    self.phrase = model
                                }
                            }
                        }
                        public var conditionHitInfo: [UploadDataSyncResponseBody.Data.ResultInfo.Rules.RuleHitInfo.Hit.ConditionHitInfo]?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.conditionHitInfo != nil {
                                var tmp : [Any] = []
                                for k in self.conditionHitInfo! {
                                    tmp.append(k.toMap())
                                }
                                map["ConditionHitInfo"] = tmp
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["ConditionHitInfo"] as? [Any?] {
                                var tmp : [UploadDataSyncResponseBody.Data.ResultInfo.Rules.RuleHitInfo.Hit.ConditionHitInfo] = []
                                for v in value {
                                    if v != nil {
                                        var model = UploadDataSyncResponseBody.Data.ResultInfo.Rules.RuleHitInfo.Hit.ConditionHitInfo()
                                        if v != nil {
                                            model.fromMap(v as? [String: Any?])
                                        }
                                        tmp.append(model)
                                    }
                                }
                                self.conditionHitInfo = tmp
                            }
                        }
                    }
                    public var conditionInfo: UploadDataSyncResponseBody.Data.ResultInfo.Rules.RuleHitInfo.ConditionInfo?

                    public var hit: UploadDataSyncResponseBody.Data.ResultInfo.Rules.RuleHitInfo.Hit?

                    public var rid: String?

                    public var tid: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                        try self.conditionInfo?.validate()
                        try self.hit?.validate()
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.conditionInfo != nil {
                            map["ConditionInfo"] = self.conditionInfo?.toMap()
                        }
                        if self.hit != nil {
                            map["Hit"] = self.hit?.toMap()
                        }
                        if self.rid != nil {
                            map["Rid"] = self.rid!
                        }
                        if self.tid != nil {
                            map["Tid"] = self.tid!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["ConditionInfo"] as? [String: Any?] {
                            var model = UploadDataSyncResponseBody.Data.ResultInfo.Rules.RuleHitInfo.ConditionInfo()
                            model.fromMap(value)
                            self.conditionInfo = model
                        }
                        if let value = dict["Hit"] as? [String: Any?] {
                            var model = UploadDataSyncResponseBody.Data.ResultInfo.Rules.RuleHitInfo.Hit()
                            model.fromMap(value)
                            self.hit = model
                        }
                        if let value = dict["Rid"] as? String {
                            self.rid = value
                        }
                        if let value = dict["Tid"] as? String {
                            self.tid = value
                        }
                    }
                }
                public var ruleHitInfo: [UploadDataSyncResponseBody.Data.ResultInfo.Rules.RuleHitInfo]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.ruleHitInfo != nil {
                        var tmp : [Any] = []
                        for k in self.ruleHitInfo! {
                            tmp.append(k.toMap())
                        }
                        map["RuleHitInfo"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["RuleHitInfo"] as? [Any?] {
                        var tmp : [UploadDataSyncResponseBody.Data.ResultInfo.Rules.RuleHitInfo] = []
                        for v in value {
                            if v != nil {
                                var model = UploadDataSyncResponseBody.Data.ResultInfo.Rules.RuleHitInfo()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.ruleHitInfo = tmp
                    }
                }
            }
            public var handScoreIdList: UploadDataSyncResponseBody.Data.ResultInfo.HandScoreIdList?

            public var rules: UploadDataSyncResponseBody.Data.ResultInfo.Rules?

            public var score: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.handScoreIdList?.validate()
                try self.rules?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.handScoreIdList != nil {
                    map["HandScoreIdList"] = self.handScoreIdList?.toMap()
                }
                if self.rules != nil {
                    map["Rules"] = self.rules?.toMap()
                }
                if self.score != nil {
                    map["Score"] = self.score!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["HandScoreIdList"] as? [String: Any?] {
                    var model = UploadDataSyncResponseBody.Data.ResultInfo.HandScoreIdList()
                    model.fromMap(value)
                    self.handScoreIdList = model
                }
                if let value = dict["Rules"] as? [String: Any?] {
                    var model = UploadDataSyncResponseBody.Data.ResultInfo.Rules()
                    model.fromMap(value)
                    self.rules = model
                }
                if let value = dict["Score"] as? Int32 {
                    self.score = value
                }
            }
        }
        public var resultInfo: [UploadDataSyncResponseBody.Data.ResultInfo]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.resultInfo != nil {
                var tmp : [Any] = []
                for k in self.resultInfo! {
                    tmp.append(k.toMap())
                }
                map["ResultInfo"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ResultInfo"] as? [Any?] {
                var tmp : [UploadDataSyncResponseBody.Data.ResultInfo] = []
                for v in value {
                    if v != nil {
                        var model = UploadDataSyncResponseBody.Data.ResultInfo()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.resultInfo = tmp
            }
        }
    }
    public var code: String?

    public var data: UploadDataSyncResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = UploadDataSyncResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class UploadDataSyncResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UploadDataSyncResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UploadDataSyncResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UploadDataSyncForLLMRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var jsonStr: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.jsonStr != nil {
            map["JsonStr"] = self.jsonStr!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["JsonStr"] as? String {
            self.jsonStr = value
        }
    }
}

public class UploadDataSyncForLLMResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class ResultInfo : Tea.TeaModel {
            public class Rules : Tea.TeaModel {
                public class RuleHitInfo : Tea.TeaModel {
                    public class ConditionInfo : Tea.TeaModel {
                        public class ConditionBasicInfo : Tea.TeaModel {
                            public var conditionInfoCid: String?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.conditionInfoCid != nil {
                                    map["ConditionInfoCid"] = self.conditionInfoCid!
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                guard let dict else { return }
                                if let value = dict["ConditionInfoCid"] as? String {
                                    self.conditionInfoCid = value
                                }
                            }
                        }
                        public var conditionBasicInfo: [UploadDataSyncForLLMResponseBody.Data.ResultInfo.Rules.RuleHitInfo.ConditionInfo.ConditionBasicInfo]?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.conditionBasicInfo != nil {
                                var tmp : [Any] = []
                                for k in self.conditionBasicInfo! {
                                    tmp.append(k.toMap())
                                }
                                map["ConditionBasicInfo"] = tmp
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["ConditionBasicInfo"] as? [Any?] {
                                var tmp : [UploadDataSyncForLLMResponseBody.Data.ResultInfo.Rules.RuleHitInfo.ConditionInfo.ConditionBasicInfo] = []
                                for v in value {
                                    if v != nil {
                                        var model = UploadDataSyncForLLMResponseBody.Data.ResultInfo.Rules.RuleHitInfo.ConditionInfo.ConditionBasicInfo()
                                        if v != nil {
                                            model.fromMap(v as? [String: Any?])
                                        }
                                        tmp.append(model)
                                    }
                                }
                                self.conditionBasicInfo = tmp
                            }
                        }
                    }
                    public class Hit : Tea.TeaModel {
                        public class ConditionHitInfo : Tea.TeaModel {
                            public class HitCids : Tea.TeaModel {
                                public var cidItem: [String]?

                                public override init() {
                                    super.init()
                                }

                                public init(_ dict: [String: Any]) {
                                    super.init()
                                    self.fromMap(dict)
                                }

                                public override func validate() throws -> Void {
                                }

                                public override func toMap() -> [String : Any] {
                                    var map = super.toMap()
                                    if self.cidItem != nil {
                                        map["CidItem"] = self.cidItem!
                                    }
                                    return map
                                }

                                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                    guard let dict else { return }
                                    if let value = dict["CidItem"] as? [String] {
                                        self.cidItem = value
                                    }
                                }
                            }
                            public class HitKeyWords : Tea.TeaModel {
                                public class HitKeyWord : Tea.TeaModel {
                                    public var from: Int32?

                                    public var pid: Int32?

                                    public var tid: String?

                                    public var to: Int32?

                                    public var val: String?

                                    public override init() {
                                        super.init()
                                    }

                                    public init(_ dict: [String: Any]) {
                                        super.init()
                                        self.fromMap(dict)
                                    }

                                    public override func validate() throws -> Void {
                                    }

                                    public override func toMap() -> [String : Any] {
                                        var map = super.toMap()
                                        if self.from != nil {
                                            map["From"] = self.from!
                                        }
                                        if self.pid != nil {
                                            map["Pid"] = self.pid!
                                        }
                                        if self.tid != nil {
                                            map["Tid"] = self.tid!
                                        }
                                        if self.to != nil {
                                            map["To"] = self.to!
                                        }
                                        if self.val != nil {
                                            map["Val"] = self.val!
                                        }
                                        return map
                                    }

                                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                        guard let dict else { return }
                                        if let value = dict["From"] as? Int32 {
                                            self.from = value
                                        }
                                        if let value = dict["Pid"] as? Int32 {
                                            self.pid = value
                                        }
                                        if let value = dict["Tid"] as? String {
                                            self.tid = value
                                        }
                                        if let value = dict["To"] as? Int32 {
                                            self.to = value
                                        }
                                        if let value = dict["Val"] as? String {
                                            self.val = value
                                        }
                                    }
                                }
                                public var hitKeyWord: [UploadDataSyncForLLMResponseBody.Data.ResultInfo.Rules.RuleHitInfo.Hit.ConditionHitInfo.HitKeyWords.HitKeyWord]?

                                public override init() {
                                    super.init()
                                }

                                public init(_ dict: [String: Any]) {
                                    super.init()
                                    self.fromMap(dict)
                                }

                                public override func validate() throws -> Void {
                                }

                                public override func toMap() -> [String : Any] {
                                    var map = super.toMap()
                                    if self.hitKeyWord != nil {
                                        var tmp : [Any] = []
                                        for k in self.hitKeyWord! {
                                            tmp.append(k.toMap())
                                        }
                                        map["HitKeyWord"] = tmp
                                    }
                                    return map
                                }

                                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                    guard let dict else { return }
                                    if let value = dict["HitKeyWord"] as? [Any?] {
                                        var tmp : [UploadDataSyncForLLMResponseBody.Data.ResultInfo.Rules.RuleHitInfo.Hit.ConditionHitInfo.HitKeyWords.HitKeyWord] = []
                                        for v in value {
                                            if v != nil {
                                                var model = UploadDataSyncForLLMResponseBody.Data.ResultInfo.Rules.RuleHitInfo.Hit.ConditionHitInfo.HitKeyWords.HitKeyWord()
                                                if v != nil {
                                                    model.fromMap(v as? [String: Any?])
                                                }
                                                tmp.append(model)
                                            }
                                        }
                                        self.hitKeyWord = tmp
                                    }
                                }
                            }
                            public class Phrase : Tea.TeaModel {
                                public var begin: Int64?

                                public var beginTime: String?

                                public var end: Int64?

                                public var identity: String?

                                public var role: String?

                                public var words: String?

                                public override init() {
                                    super.init()
                                }

                                public init(_ dict: [String: Any]) {
                                    super.init()
                                    self.fromMap(dict)
                                }

                                public override func validate() throws -> Void {
                                }

                                public override func toMap() -> [String : Any] {
                                    var map = super.toMap()
                                    if self.begin != nil {
                                        map["Begin"] = self.begin!
                                    }
                                    if self.beginTime != nil {
                                        map["BeginTime"] = self.beginTime!
                                    }
                                    if self.end != nil {
                                        map["End"] = self.end!
                                    }
                                    if self.identity != nil {
                                        map["Identity"] = self.identity!
                                    }
                                    if self.role != nil {
                                        map["Role"] = self.role!
                                    }
                                    if self.words != nil {
                                        map["Words"] = self.words!
                                    }
                                    return map
                                }

                                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                    guard let dict else { return }
                                    if let value = dict["Begin"] as? Int64 {
                                        self.begin = value
                                    }
                                    if let value = dict["BeginTime"] as? String {
                                        self.beginTime = value
                                    }
                                    if let value = dict["End"] as? Int64 {
                                        self.end = value
                                    }
                                    if let value = dict["Identity"] as? String {
                                        self.identity = value
                                    }
                                    if let value = dict["Role"] as? String {
                                        self.role = value
                                    }
                                    if let value = dict["Words"] as? String {
                                        self.words = value
                                    }
                                }
                            }
                            public var hitCids: UploadDataSyncForLLMResponseBody.Data.ResultInfo.Rules.RuleHitInfo.Hit.ConditionHitInfo.HitCids?

                            public var hitKeyWords: UploadDataSyncForLLMResponseBody.Data.ResultInfo.Rules.RuleHitInfo.Hit.ConditionHitInfo.HitKeyWords?

                            public var phrase: UploadDataSyncForLLMResponseBody.Data.ResultInfo.Rules.RuleHitInfo.Hit.ConditionHitInfo.Phrase?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                                try self.hitCids?.validate()
                                try self.hitKeyWords?.validate()
                                try self.phrase?.validate()
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.hitCids != nil {
                                    map["HitCids"] = self.hitCids?.toMap()
                                }
                                if self.hitKeyWords != nil {
                                    map["HitKeyWords"] = self.hitKeyWords?.toMap()
                                }
                                if self.phrase != nil {
                                    map["Phrase"] = self.phrase?.toMap()
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                guard let dict else { return }
                                if let value = dict["HitCids"] as? [String: Any?] {
                                    var model = UploadDataSyncForLLMResponseBody.Data.ResultInfo.Rules.RuleHitInfo.Hit.ConditionHitInfo.HitCids()
                                    model.fromMap(value)
                                    self.hitCids = model
                                }
                                if let value = dict["HitKeyWords"] as? [String: Any?] {
                                    var model = UploadDataSyncForLLMResponseBody.Data.ResultInfo.Rules.RuleHitInfo.Hit.ConditionHitInfo.HitKeyWords()
                                    model.fromMap(value)
                                    self.hitKeyWords = model
                                }
                                if let value = dict["Phrase"] as? [String: Any?] {
                                    var model = UploadDataSyncForLLMResponseBody.Data.ResultInfo.Rules.RuleHitInfo.Hit.ConditionHitInfo.Phrase()
                                    model.fromMap(value)
                                    self.phrase = model
                                }
                            }
                        }
                        public var conditionHitInfo: [UploadDataSyncForLLMResponseBody.Data.ResultInfo.Rules.RuleHitInfo.Hit.ConditionHitInfo]?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.conditionHitInfo != nil {
                                var tmp : [Any] = []
                                for k in self.conditionHitInfo! {
                                    tmp.append(k.toMap())
                                }
                                map["ConditionHitInfo"] = tmp
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["ConditionHitInfo"] as? [Any?] {
                                var tmp : [UploadDataSyncForLLMResponseBody.Data.ResultInfo.Rules.RuleHitInfo.Hit.ConditionHitInfo] = []
                                for v in value {
                                    if v != nil {
                                        var model = UploadDataSyncForLLMResponseBody.Data.ResultInfo.Rules.RuleHitInfo.Hit.ConditionHitInfo()
                                        if v != nil {
                                            model.fromMap(v as? [String: Any?])
                                        }
                                        tmp.append(model)
                                    }
                                }
                                self.conditionHitInfo = tmp
                            }
                        }
                    }
                    public var conditionInfo: UploadDataSyncForLLMResponseBody.Data.ResultInfo.Rules.RuleHitInfo.ConditionInfo?

                    public var hit: UploadDataSyncForLLMResponseBody.Data.ResultInfo.Rules.RuleHitInfo.Hit?

                    public var rid: String?

                    public var tid: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                        try self.conditionInfo?.validate()
                        try self.hit?.validate()
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.conditionInfo != nil {
                            map["ConditionInfo"] = self.conditionInfo?.toMap()
                        }
                        if self.hit != nil {
                            map["Hit"] = self.hit?.toMap()
                        }
                        if self.rid != nil {
                            map["Rid"] = self.rid!
                        }
                        if self.tid != nil {
                            map["Tid"] = self.tid!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["ConditionInfo"] as? [String: Any?] {
                            var model = UploadDataSyncForLLMResponseBody.Data.ResultInfo.Rules.RuleHitInfo.ConditionInfo()
                            model.fromMap(value)
                            self.conditionInfo = model
                        }
                        if let value = dict["Hit"] as? [String: Any?] {
                            var model = UploadDataSyncForLLMResponseBody.Data.ResultInfo.Rules.RuleHitInfo.Hit()
                            model.fromMap(value)
                            self.hit = model
                        }
                        if let value = dict["Rid"] as? String {
                            self.rid = value
                        }
                        if let value = dict["Tid"] as? String {
                            self.tid = value
                        }
                    }
                }
                public var ruleHitInfo: [UploadDataSyncForLLMResponseBody.Data.ResultInfo.Rules.RuleHitInfo]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.ruleHitInfo != nil {
                        var tmp : [Any] = []
                        for k in self.ruleHitInfo! {
                            tmp.append(k.toMap())
                        }
                        map["RuleHitInfo"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["RuleHitInfo"] as? [Any?] {
                        var tmp : [UploadDataSyncForLLMResponseBody.Data.ResultInfo.Rules.RuleHitInfo] = []
                        for v in value {
                            if v != nil {
                                var model = UploadDataSyncForLLMResponseBody.Data.ResultInfo.Rules.RuleHitInfo()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.ruleHitInfo = tmp
                    }
                }
            }
            public var rules: UploadDataSyncForLLMResponseBody.Data.ResultInfo.Rules?

            public var score: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.rules?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.rules != nil {
                    map["Rules"] = self.rules?.toMap()
                }
                if self.score != nil {
                    map["Score"] = self.score!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Rules"] as? [String: Any?] {
                    var model = UploadDataSyncForLLMResponseBody.Data.ResultInfo.Rules()
                    model.fromMap(value)
                    self.rules = model
                }
                if let value = dict["Score"] as? Int32 {
                    self.score = value
                }
            }
        }
        public var resultInfo: [UploadDataSyncForLLMResponseBody.Data.ResultInfo]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.resultInfo != nil {
                var tmp : [Any] = []
                for k in self.resultInfo! {
                    tmp.append(k.toMap())
                }
                map["ResultInfo"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ResultInfo"] as? [Any?] {
                var tmp : [UploadDataSyncForLLMResponseBody.Data.ResultInfo] = []
                for v in value {
                    if v != nil {
                        var model = UploadDataSyncForLLMResponseBody.Data.ResultInfo()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.resultInfo = tmp
            }
        }
    }
    public var code: String?

    public var data: UploadDataSyncForLLMResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = UploadDataSyncForLLMResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class UploadDataSyncForLLMResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UploadDataSyncForLLMResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UploadDataSyncForLLMResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UploadDataV4Request : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var jsonStr: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.jsonStr != nil {
            map["JsonStr"] = self.jsonStr!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["JsonStr"] as? String {
            self.jsonStr = value
        }
    }
}

public class UploadDataV4ResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class UploadDataV4Response : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UploadDataV4ResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UploadDataV4ResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UploadRuleRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var jsonStr: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.jsonStr != nil {
            map["JsonStr"] = self.jsonStr!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["JsonStr"] as? String {
            self.jsonStr = value
        }
    }
}

public class UploadRuleResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var ridInfo: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.ridInfo != nil {
                map["RidInfo"] = self.ridInfo!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["RidInfo"] as? [String] {
                self.ridInfo = value
            }
        }
    }
    public var code: String?

    public var data: UploadRuleResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = UploadRuleResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class UploadRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UploadRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UploadRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class VerifyFileRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var jsonStr: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.jsonStr != nil {
            map["JsonStr"] = self.jsonStr!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["JsonStr"] as? String {
            self.jsonStr = value
        }
    }
}

public class VerifyFileResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: Double?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? Double {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class VerifyFileResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: VerifyFileResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = VerifyFileResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class VerifySentenceRequest : Tea.TeaModel {
    public var baseMeAgentId: Int64?

    public var jsonStr: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseMeAgentId != nil {
            map["BaseMeAgentId"] = self.baseMeAgentId!
        }
        if self.jsonStr != nil {
            map["JsonStr"] = self.jsonStr!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseMeAgentId"] as? Int64 {
            self.baseMeAgentId = value
        }
        if let value = dict["JsonStr"] as? String {
            self.jsonStr = value
        }
    }
}

public class VerifySentenceResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Delta : Tea.TeaModel {
            public class Source : Tea.TeaModel {
                public class Line : Tea.TeaModel {
                    public var line: [String]?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.line != nil {
                            map["Line"] = self.line!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Line"] as? [String] {
                            self.line = value
                        }
                    }
                }
                public var line: VerifySentenceResponseBody.Data.Delta.Source.Line?

                public var position: Int32?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.line?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.line != nil {
                        map["Line"] = self.line?.toMap()
                    }
                    if self.position != nil {
                        map["Position"] = self.position!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Line"] as? [String: Any?] {
                        var model = VerifySentenceResponseBody.Data.Delta.Source.Line()
                        model.fromMap(value)
                        self.line = model
                    }
                    if let value = dict["Position"] as? Int32 {
                        self.position = value
                    }
                }
            }
            public class Target : Tea.TeaModel {
                public class Line : Tea.TeaModel {
                    public var line: [String]?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.line != nil {
                            map["Line"] = self.line!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Line"] as? [String] {
                            self.line = value
                        }
                    }
                }
                public var line: VerifySentenceResponseBody.Data.Delta.Target.Line?

                public var position: Int32?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.line?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.line != nil {
                        map["Line"] = self.line?.toMap()
                    }
                    if self.position != nil {
                        map["Position"] = self.position!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Line"] as? [String: Any?] {
                        var model = VerifySentenceResponseBody.Data.Delta.Target.Line()
                        model.fromMap(value)
                        self.line = model
                    }
                    if let value = dict["Position"] as? Int32 {
                        self.position = value
                    }
                }
            }
            public var source: VerifySentenceResponseBody.Data.Delta.Source?

            public var target: VerifySentenceResponseBody.Data.Delta.Target?

            public var type: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.source?.validate()
                try self.target?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.source != nil {
                    map["Source"] = self.source?.toMap()
                }
                if self.target != nil {
                    map["Target"] = self.target?.toMap()
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Source"] as? [String: Any?] {
                    var model = VerifySentenceResponseBody.Data.Delta.Source()
                    model.fromMap(value)
                    self.source = model
                }
                if let value = dict["Target"] as? [String: Any?] {
                    var model = VerifySentenceResponseBody.Data.Delta.Target()
                    model.fromMap(value)
                    self.target = model
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
            }
        }
        public var delta: [VerifySentenceResponseBody.Data.Delta]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.delta != nil {
                var tmp : [Any] = []
                for k in self.delta! {
                    tmp.append(k.toMap())
                }
                map["Delta"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Delta"] as? [Any?] {
                var tmp : [VerifySentenceResponseBody.Data.Delta] = []
                for v in value {
                    if v != nil {
                        var model = VerifySentenceResponseBody.Data.Delta()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.delta = tmp
            }
        }
    }
    public var code: String?

    public var data: VerifySentenceResponseBody.Data?

    public var incorrectWords: Int32?

    public var message: String?

    public var requestId: String?

    public var sourceRole: Int32?

    public var success: Bool?

    public var targetRole: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.incorrectWords != nil {
            map["IncorrectWords"] = self.incorrectWords!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.sourceRole != nil {
            map["SourceRole"] = self.sourceRole!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.targetRole != nil {
            map["TargetRole"] = self.targetRole!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = VerifySentenceResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["IncorrectWords"] as? Int32 {
            self.incorrectWords = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SourceRole"] as? Int32 {
            self.sourceRole = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
        if let value = dict["TargetRole"] as? Int32 {
            self.targetRole = value
        }
    }
}

public class VerifySentenceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: VerifySentenceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = VerifySentenceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}
