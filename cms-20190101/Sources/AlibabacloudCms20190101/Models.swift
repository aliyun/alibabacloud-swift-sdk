import Foundation
import Tea
import TeaUtils
import AlibabacloudOpenApi
import AlibabaCloudOpenApiUtil
import AlibabacloudEndpointUtil

public class AlertEvent : Tea.TeaModel {
    public class Metrics : Tea.TeaModel {
        public var curValue: String?

        public var metricName: String?

        public var metricNameEn: String?

        public var metricNameZh: String?

        public var operator_: String?

        public var statistics: String?

        public var threshold: String?

        public var unit: String?

        public var unitFactor: Double?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.curValue != nil {
                map["CurValue"] = self.curValue!
            }
            if self.metricName != nil {
                map["MetricName"] = self.metricName!
            }
            if self.metricNameEn != nil {
                map["MetricNameEn"] = self.metricNameEn!
            }
            if self.metricNameZh != nil {
                map["MetricNameZh"] = self.metricNameZh!
            }
            if self.operator_ != nil {
                map["Operator"] = self.operator_!
            }
            if self.statistics != nil {
                map["Statistics"] = self.statistics!
            }
            if self.threshold != nil {
                map["Threshold"] = self.threshold!
            }
            if self.unit != nil {
                map["Unit"] = self.unit!
            }
            if self.unitFactor != nil {
                map["UnitFactor"] = self.unitFactor!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CurValue"] as? String {
                self.curValue = value
            }
            if let value = dict["MetricName"] as? String {
                self.metricName = value
            }
            if let value = dict["MetricNameEn"] as? String {
                self.metricNameEn = value
            }
            if let value = dict["MetricNameZh"] as? String {
                self.metricNameZh = value
            }
            if let value = dict["Operator"] as? String {
                self.operator_ = value
            }
            if let value = dict["Statistics"] as? String {
                self.statistics = value
            }
            if let value = dict["Threshold"] as? String {
                self.threshold = value
            }
            if let value = dict["Unit"] as? String {
                self.unit = value
            }
            if let value = dict["UnitFactor"] as? Double {
                self.unitFactor = value
            }
        }
    }
    public var alertName: String?

    public var alertStatus: String?

    public var arn: String?

    public var content: String?

    public var customLabels: [String: Any]?

    public var deDupId: String?

    public var details: String?

    public var eventName: String?

    public var eventType: String?

    public var expression: String?

    public var metrics: [AlertEvent.Metrics]?

    public var product: String?

    public var resourceInfo: [String: Any]?

    public var ruleName: String?

    public var severity: String?

    public var source: String?

    public var summary: String?

    public var timestamp: Int64?

    public var traceId: String?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.alertName != nil {
            map["AlertName"] = self.alertName!
        }
        if self.alertStatus != nil {
            map["AlertStatus"] = self.alertStatus!
        }
        if self.arn != nil {
            map["Arn"] = self.arn!
        }
        if self.content != nil {
            map["Content"] = self.content!
        }
        if self.customLabels != nil {
            map["CustomLabels"] = self.customLabels!
        }
        if self.deDupId != nil {
            map["DeDupId"] = self.deDupId!
        }
        if self.details != nil {
            map["Details"] = self.details!
        }
        if self.eventName != nil {
            map["EventName"] = self.eventName!
        }
        if self.eventType != nil {
            map["EventType"] = self.eventType!
        }
        if self.expression != nil {
            map["Expression"] = self.expression!
        }
        if self.metrics != nil {
            var tmp : [Any] = []
            for k in self.metrics! {
                tmp.append(k.toMap())
            }
            map["Metrics"] = tmp
        }
        if self.product != nil {
            map["Product"] = self.product!
        }
        if self.resourceInfo != nil {
            map["ResourceInfo"] = self.resourceInfo!
        }
        if self.ruleName != nil {
            map["RuleName"] = self.ruleName!
        }
        if self.severity != nil {
            map["Severity"] = self.severity!
        }
        if self.source != nil {
            map["Source"] = self.source!
        }
        if self.summary != nil {
            map["Summary"] = self.summary!
        }
        if self.timestamp != nil {
            map["Timestamp"] = self.timestamp!
        }
        if self.traceId != nil {
            map["TraceId"] = self.traceId!
        }
        if self.userId != nil {
            map["UserId"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AlertName"] as? String {
            self.alertName = value
        }
        if let value = dict["AlertStatus"] as? String {
            self.alertStatus = value
        }
        if let value = dict["Arn"] as? String {
            self.arn = value
        }
        if let value = dict["Content"] as? String {
            self.content = value
        }
        if let value = dict["CustomLabels"] as? [String: Any] {
            self.customLabels = value
        }
        if let value = dict["DeDupId"] as? String {
            self.deDupId = value
        }
        if let value = dict["Details"] as? String {
            self.details = value
        }
        if let value = dict["EventName"] as? String {
            self.eventName = value
        }
        if let value = dict["EventType"] as? String {
            self.eventType = value
        }
        if let value = dict["Expression"] as? String {
            self.expression = value
        }
        if let value = dict["Metrics"] as? [Any?] {
            var tmp : [AlertEvent.Metrics] = []
            for v in value {
                if v != nil {
                    var model = AlertEvent.Metrics()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.metrics = tmp
        }
        if let value = dict["Product"] as? String {
            self.product = value
        }
        if let value = dict["ResourceInfo"] as? [String: Any] {
            self.resourceInfo = value
        }
        if let value = dict["RuleName"] as? String {
            self.ruleName = value
        }
        if let value = dict["Severity"] as? String {
            self.severity = value
        }
        if let value = dict["Source"] as? String {
            self.source = value
        }
        if let value = dict["Summary"] as? String {
            self.summary = value
        }
        if let value = dict["Timestamp"] as? Int64 {
            self.timestamp = value
        }
        if let value = dict["TraceId"] as? String {
            self.traceId = value
        }
        if let value = dict["UserId"] as? String {
            self.userId = value
        }
    }
}

public class AlertStrategyRelation : Tea.TeaModel {
    public var alertName: String?

    public var strategyUuid: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.alertName != nil {
            map["AlertName"] = self.alertName!
        }
        if self.strategyUuid != nil {
            map["StrategyUuid"] = self.strategyUuid!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AlertName"] as? String {
            self.alertName = value
        }
        if let value = dict["StrategyUuid"] as? String {
            self.strategyUuid = value
        }
    }
}

public class Dimension : Tea.TeaModel {
    public var label: String?

    public var value: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.label != nil {
            map["Label"] = self.label!
        }
        if self.value != nil {
            map["Value"] = self.value!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Label"] as? String {
            self.label = value
        }
        if let value = dict["Value"] as? String {
            self.value = value
        }
    }
}

public class EscalationRule : Tea.TeaModel {
    public class Escalations : Tea.TeaModel {
        public class ContactGroupsByLevel : Tea.TeaModel {
            public var critical: [String]?

            public var error: [String]?

            public var info: [String]?

            public var resolve: [String]?

            public var warning: [String]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.critical != nil {
                    map["Critical"] = self.critical!
                }
                if self.error != nil {
                    map["Error"] = self.error!
                }
                if self.info != nil {
                    map["Info"] = self.info!
                }
                if self.resolve != nil {
                    map["Resolve"] = self.resolve!
                }
                if self.warning != nil {
                    map["Warning"] = self.warning!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Critical"] as? [String] {
                    self.critical = value
                }
                if let value = dict["Error"] as? [String] {
                    self.error = value
                }
                if let value = dict["Info"] as? [String] {
                    self.info = value
                }
                if let value = dict["Resolve"] as? [String] {
                    self.resolve = value
                }
                if let value = dict["Warning"] as? [String] {
                    self.warning = value
                }
            }
        }
        public var backupContactGroups: [String]?

        public var contactGroups: [String]?

        public var contactGroupsByLevel: EscalationRule.Escalations.ContactGroupsByLevel?

        public var escalateMin: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.contactGroupsByLevel?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.backupContactGroups != nil {
                map["BackupContactGroups"] = self.backupContactGroups!
            }
            if self.contactGroups != nil {
                map["ContactGroups"] = self.contactGroups!
            }
            if self.contactGroupsByLevel != nil {
                map["ContactGroupsByLevel"] = self.contactGroupsByLevel?.toMap()
            }
            if self.escalateMin != nil {
                map["EscalateMin"] = self.escalateMin!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["BackupContactGroups"] as? [String] {
                self.backupContactGroups = value
            }
            if let value = dict["ContactGroups"] as? [String] {
                self.contactGroups = value
            }
            if let value = dict["ContactGroupsByLevel"] as? [String: Any?] {
                var model = EscalationRule.Escalations.ContactGroupsByLevel()
                model.fromMap(value)
                self.contactGroupsByLevel = model
            }
            if let value = dict["EscalateMin"] as? Int64 {
                self.escalateMin = value
            }
        }
    }
    public var createTime: String?

    public var description_: String?

    public var escalations: [EscalationRule.Escalations]?

    public var name: String?

    public var updateTime: String?

    public var userId: String?

    public var uuid: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.createTime != nil {
            map["CreateTime"] = self.createTime!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.escalations != nil {
            var tmp : [Any] = []
            for k in self.escalations! {
                tmp.append(k.toMap())
            }
            map["Escalations"] = tmp
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.updateTime != nil {
            map["UpdateTime"] = self.updateTime!
        }
        if self.userId != nil {
            map["UserId"] = self.userId!
        }
        if self.uuid != nil {
            map["Uuid"] = self.uuid!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CreateTime"] as? String {
            self.createTime = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["Escalations"] as? [Any?] {
            var tmp : [EscalationRule.Escalations] = []
            for v in value {
                if v != nil {
                    var model = EscalationRule.Escalations()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.escalations = tmp
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["UpdateTime"] as? String {
            self.updateTime = value
        }
        if let value = dict["UserId"] as? String {
            self.userId = value
        }
        if let value = dict["Uuid"] as? String {
            self.uuid = value
        }
    }
}

public class Incident : Tea.TeaModel {
    public var actionTime: Int64?

    public var alertCount: Int64?

    public var endTime: Int64?

    public var groupingData: [String: Any]?

    public var groupingId: String?

    public var groupingKey: String?

    public var incidentId: String?

    public var incidentStatus: String?

    public var severity: String?

    public var startTime: Int64?

    public var strategyUuid: String?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.actionTime != nil {
            map["ActionTime"] = self.actionTime!
        }
        if self.alertCount != nil {
            map["AlertCount"] = self.alertCount!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.groupingData != nil {
            map["GroupingData"] = self.groupingData!
        }
        if self.groupingId != nil {
            map["GroupingId"] = self.groupingId!
        }
        if self.groupingKey != nil {
            map["GroupingKey"] = self.groupingKey!
        }
        if self.incidentId != nil {
            map["IncidentId"] = self.incidentId!
        }
        if self.incidentStatus != nil {
            map["IncidentStatus"] = self.incidentStatus!
        }
        if self.severity != nil {
            map["Severity"] = self.severity!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.strategyUuid != nil {
            map["StrategyUuid"] = self.strategyUuid!
        }
        if self.userId != nil {
            map["UserId"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ActionTime"] as? Int64 {
            self.actionTime = value
        }
        if let value = dict["AlertCount"] as? Int64 {
            self.alertCount = value
        }
        if let value = dict["EndTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["GroupingData"] as? [String: Any] {
            self.groupingData = value
        }
        if let value = dict["GroupingId"] as? String {
            self.groupingId = value
        }
        if let value = dict["GroupingKey"] as? String {
            self.groupingKey = value
        }
        if let value = dict["IncidentId"] as? String {
            self.incidentId = value
        }
        if let value = dict["IncidentStatus"] as? String {
            self.incidentStatus = value
        }
        if let value = dict["Severity"] as? String {
            self.severity = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
        if let value = dict["StrategyUuid"] as? String {
            self.strategyUuid = value
        }
        if let value = dict["UserId"] as? String {
            self.userId = value
        }
    }
}

public class Matcher : Tea.TeaModel {
    public var label: String?

    public var operator_: String?

    public var value: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.label != nil {
            map["Label"] = self.label!
        }
        if self.operator_ != nil {
            map["Operator"] = self.operator_!
        }
        if self.value != nil {
            map["Value"] = self.value!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Label"] as? String {
            self.label = value
        }
        if let value = dict["Operator"] as? String {
            self.operator_ = value
        }
        if let value = dict["Value"] as? String {
            self.value = value
        }
    }
}

public class MetricStat : Tea.TeaModel {
    public var associated: [String: String]?

    public var dimensions: [Dimension]?

    public var logTime: Int64?

    public var measurements: [String: Any]?

    public var metric: String?

    public var namespace: String?

    public var period: Int32?

    public var timestamp: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.associated != nil {
            map["Associated"] = self.associated!
        }
        if self.dimensions != nil {
            var tmp : [Any] = []
            for k in self.dimensions! {
                tmp.append(k.toMap())
            }
            map["Dimensions"] = tmp
        }
        if self.logTime != nil {
            map["LogTime"] = self.logTime!
        }
        if self.measurements != nil {
            map["Measurements"] = self.measurements!
        }
        if self.metric != nil {
            map["Metric"] = self.metric!
        }
        if self.namespace != nil {
            map["Namespace"] = self.namespace!
        }
        if self.period != nil {
            map["Period"] = self.period!
        }
        if self.timestamp != nil {
            map["Timestamp"] = self.timestamp!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Associated"] as? [String: String] {
            self.associated = value
        }
        if let value = dict["Dimensions"] as? [Any?] {
            var tmp : [Dimension] = []
            for v in value {
                if v != nil {
                    var model = Dimension()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.dimensions = tmp
        }
        if let value = dict["LogTime"] as? Int64 {
            self.logTime = value
        }
        if let value = dict["Measurements"] as? [String: Any] {
            self.measurements = value
        }
        if let value = dict["Metric"] as? String {
            self.metric = value
        }
        if let value = dict["Namespace"] as? String {
            self.namespace = value
        }
        if let value = dict["Period"] as? Int32 {
            self.period = value
        }
        if let value = dict["Timestamp"] as? Int64 {
            self.timestamp = value
        }
    }
}

public class MigrationJob : Tea.TeaModel {
    public class Plan : Tea.TeaModel {
        public class Contacts : Tea.TeaModel {
            public class Channels : Tea.TeaModel {
                public var level: Int64?

                public var type: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.level != nil {
                        map["Level"] = self.level!
                    }
                    if self.type != nil {
                        map["Type"] = self.type!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Level"] as? Int64 {
                        self.level = value
                    }
                    if let value = dict["Type"] as? String {
                        self.type = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public var channels: [MigrationJob.Plan.Contacts.Channels]?

            public var name: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.channels != nil {
                    var tmp : [Any] = []
                    for k in self.channels! {
                        tmp.append(k.toMap())
                    }
                    map["Channels"] = tmp
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Channels"] as? [Any?] {
                    var tmp : [MigrationJob.Plan.Contacts.Channels] = []
                    for v in value {
                        if v != nil {
                            var model = MigrationJob.Plan.Contacts.Channels()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.channels = tmp
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
            }
        }
        public class Escalations : Tea.TeaModel {
            public class Escalations : Tea.TeaModel {
                public class LevelGroups : Tea.TeaModel {
                    public var critical: [String]?

                    public var info: [String]?

                    public var resolved: [String]?

                    public var warning: [String]?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.critical != nil {
                            map["Critical"] = self.critical!
                        }
                        if self.info != nil {
                            map["Info"] = self.info!
                        }
                        if self.resolved != nil {
                            map["Resolved"] = self.resolved!
                        }
                        if self.warning != nil {
                            map["Warning"] = self.warning!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Critical"] as? [String] {
                            self.critical = value
                        }
                        if let value = dict["Info"] as? [String] {
                            self.info = value
                        }
                        if let value = dict["Resolved"] as? [String] {
                            self.resolved = value
                        }
                        if let value = dict["Warning"] as? [String] {
                            self.warning = value
                        }
                    }
                }
                public var groups: [String]?

                public var levelGroups: MigrationJob.Plan.Escalations.Escalations.LevelGroups?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.levelGroups?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.groups != nil {
                        map["Groups"] = self.groups!
                    }
                    if self.levelGroups != nil {
                        map["LevelGroups"] = self.levelGroups?.toMap()
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Groups"] as? [String] {
                        self.groups = value
                    }
                    if let value = dict["LevelGroups"] as? [String: Any?] {
                        var model = MigrationJob.Plan.Escalations.Escalations.LevelGroups()
                        model.fromMap(value)
                        self.levelGroups = model
                    }
                }
            }
            public var escalations: [MigrationJob.Plan.Escalations.Escalations]?

            public var name: String?

            public var uuid: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.escalations != nil {
                    var tmp : [Any] = []
                    for k in self.escalations! {
                        tmp.append(k.toMap())
                    }
                    map["Escalations"] = tmp
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.uuid != nil {
                    map["Uuid"] = self.uuid!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Escalations"] as? [Any?] {
                    var tmp : [MigrationJob.Plan.Escalations.Escalations] = []
                    for v in value {
                        if v != nil {
                            var model = MigrationJob.Plan.Escalations.Escalations()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.escalations = tmp
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["Uuid"] as? String {
                    self.uuid = value
                }
            }
        }
        public class Groups : Tea.TeaModel {
            public var contacts: [String]?

            public var name: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.contacts != nil {
                    map["Contacts"] = self.contacts!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Contacts"] as? [String] {
                    self.contacts = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
            }
        }
        public class Strategies : Tea.TeaModel {
            public class EscalationSetting : Tea.TeaModel {
                public var escalationUuid: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.escalationUuid != nil {
                        map["escalationUuid"] = self.escalationUuid!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["escalationUuid"] as? String {
                        self.escalationUuid = value
                    }
                }
            }
            public class PushingSetting : Tea.TeaModel {
                public var targetUuids: [String]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.targetUuids != nil {
                        map["TargetUuids"] = self.targetUuids!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["TargetUuids"] as? [String] {
                        self.targetUuids = value
                    }
                }
            }
            public var escalationSetting: MigrationJob.Plan.Strategies.EscalationSetting?

            public var name: String?

            public var pushingSetting: MigrationJob.Plan.Strategies.PushingSetting?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.escalationSetting?.validate()
                try self.pushingSetting?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.escalationSetting != nil {
                    map["EscalationSetting"] = self.escalationSetting?.toMap()
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.pushingSetting != nil {
                    map["PushingSetting"] = self.pushingSetting?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["EscalationSetting"] as? [String: Any?] {
                    var model = MigrationJob.Plan.Strategies.EscalationSetting()
                    model.fromMap(value)
                    self.escalationSetting = model
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["PushingSetting"] as? [String: Any?] {
                    var model = MigrationJob.Plan.Strategies.PushingSetting()
                    model.fromMap(value)
                    self.pushingSetting = model
                }
            }
        }
        public class Subscriptions : Tea.TeaModel {
            public class Conditions : Tea.TeaModel {
                public var field: String?

                public var op: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.field != nil {
                        map["Field"] = self.field!
                    }
                    if self.op != nil {
                        map["Op"] = self.op!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Field"] as? String {
                        self.field = value
                    }
                    if let value = dict["Op"] as? String {
                        self.op = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public var conditions: [MigrationJob.Plan.Subscriptions.Conditions]?

            public var name: String?

            public var strategyUuid: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.conditions != nil {
                    var tmp : [Any] = []
                    for k in self.conditions! {
                        tmp.append(k.toMap())
                    }
                    map["Conditions"] = tmp
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.strategyUuid != nil {
                    map["StrategyUuid"] = self.strategyUuid!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Conditions"] as? [Any?] {
                    var tmp : [MigrationJob.Plan.Subscriptions.Conditions] = []
                    for v in value {
                        if v != nil {
                            var model = MigrationJob.Plan.Subscriptions.Conditions()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.conditions = tmp
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["StrategyUuid"] as? String {
                    self.strategyUuid = value
                }
            }
        }
        public class Targets : Tea.TeaModel {
            public class HttpRequestTarget : Tea.TeaModel {
                public var contentType: String?

                public var method: String?

                public var url: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.contentType != nil {
                        map["ContentType"] = self.contentType!
                    }
                    if self.method != nil {
                        map["Method"] = self.method!
                    }
                    if self.url != nil {
                        map["Url"] = self.url!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["ContentType"] as? String {
                        self.contentType = value
                    }
                    if let value = dict["Method"] as? String {
                        self.method = value
                    }
                    if let value = dict["Url"] as? String {
                        self.url = value
                    }
                }
            }
            public var arn: String?

            public var httpRequestTarget: MigrationJob.Plan.Targets.HttpRequestTarget?

            public var name: String?

            public var type: String?

            public var uuid: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.httpRequestTarget?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.arn != nil {
                    map["Arn"] = self.arn!
                }
                if self.httpRequestTarget != nil {
                    map["HttpRequestTarget"] = self.httpRequestTarget?.toMap()
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                if self.uuid != nil {
                    map["Uuid"] = self.uuid!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Arn"] as? String {
                    self.arn = value
                }
                if let value = dict["HttpRequestTarget"] as? [String: Any?] {
                    var model = MigrationJob.Plan.Targets.HttpRequestTarget()
                    model.fromMap(value)
                    self.httpRequestTarget = model
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
                if let value = dict["Uuid"] as? String {
                    self.uuid = value
                }
            }
        }
        public var contacts: [MigrationJob.Plan.Contacts]?

        public var escalations: [MigrationJob.Plan.Escalations]?

        public var groups: [MigrationJob.Plan.Groups]?

        public var ruleNames: [String]?

        public var strategies: [MigrationJob.Plan.Strategies]?

        public var subscriptions: [MigrationJob.Plan.Subscriptions]?

        public var targets: [MigrationJob.Plan.Targets]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.contacts != nil {
                var tmp : [Any] = []
                for k in self.contacts! {
                    tmp.append(k.toMap())
                }
                map["Contacts"] = tmp
            }
            if self.escalations != nil {
                var tmp : [Any] = []
                for k in self.escalations! {
                    tmp.append(k.toMap())
                }
                map["Escalations"] = tmp
            }
            if self.groups != nil {
                var tmp : [Any] = []
                for k in self.groups! {
                    tmp.append(k.toMap())
                }
                map["Groups"] = tmp
            }
            if self.ruleNames != nil {
                map["RuleNames"] = self.ruleNames!
            }
            if self.strategies != nil {
                var tmp : [Any] = []
                for k in self.strategies! {
                    tmp.append(k.toMap())
                }
                map["Strategies"] = tmp
            }
            if self.subscriptions != nil {
                var tmp : [Any] = []
                for k in self.subscriptions! {
                    tmp.append(k.toMap())
                }
                map["Subscriptions"] = tmp
            }
            if self.targets != nil {
                var tmp : [Any] = []
                for k in self.targets! {
                    tmp.append(k.toMap())
                }
                map["Targets"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Contacts"] as? [Any?] {
                var tmp : [MigrationJob.Plan.Contacts] = []
                for v in value {
                    if v != nil {
                        var model = MigrationJob.Plan.Contacts()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.contacts = tmp
            }
            if let value = dict["Escalations"] as? [Any?] {
                var tmp : [MigrationJob.Plan.Escalations] = []
                for v in value {
                    if v != nil {
                        var model = MigrationJob.Plan.Escalations()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.escalations = tmp
            }
            if let value = dict["Groups"] as? [Any?] {
                var tmp : [MigrationJob.Plan.Groups] = []
                for v in value {
                    if v != nil {
                        var model = MigrationJob.Plan.Groups()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.groups = tmp
            }
            if let value = dict["RuleNames"] as? [String] {
                self.ruleNames = value
            }
            if let value = dict["Strategies"] as? [Any?] {
                var tmp : [MigrationJob.Plan.Strategies] = []
                for v in value {
                    if v != nil {
                        var model = MigrationJob.Plan.Strategies()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.strategies = tmp
            }
            if let value = dict["Subscriptions"] as? [Any?] {
                var tmp : [MigrationJob.Plan.Subscriptions] = []
                for v in value {
                    if v != nil {
                        var model = MigrationJob.Plan.Subscriptions()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.subscriptions = tmp
            }
            if let value = dict["Targets"] as? [Any?] {
                var tmp : [MigrationJob.Plan.Targets] = []
                for v in value {
                    if v != nil {
                        var model = MigrationJob.Plan.Targets()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.targets = tmp
            }
        }
    }
    public class Source : Tea.TeaModel {
        public class Rule : Tea.TeaModel {
            public class KeywordFilter : Tea.TeaModel {
                public var keywords: [String]?

                public var relation: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.keywords != nil {
                        map["Keywords"] = self.keywords!
                    }
                    if self.relation != nil {
                        map["Relation"] = self.relation!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Keywords"] as? [String] {
                        self.keywords = value
                    }
                    if let value = dict["Relation"] as? String {
                        self.relation = value
                    }
                }
            }
            public class PrimaryFilters : Tea.TeaModel {
                public var field: String?

                public var opType: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.field != nil {
                        map["Field"] = self.field!
                    }
                    if self.opType != nil {
                        map["OpType"] = self.opType!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Field"] as? String {
                        self.field = value
                    }
                    if let value = dict["OpType"] as? String {
                        self.opType = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public var keywordFilter: MigrationJob.Source.Rule.KeywordFilter?

            public var name: String?

            public var primaryFilters: [MigrationJob.Source.Rule.PrimaryFilters]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.keywordFilter?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.keywordFilter != nil {
                    map["KeywordFilter"] = self.keywordFilter?.toMap()
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.primaryFilters != nil {
                    var tmp : [Any] = []
                    for k in self.primaryFilters! {
                        tmp.append(k.toMap())
                    }
                    map["PrimaryFilters"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["KeywordFilter"] as? [String: Any?] {
                    var model = MigrationJob.Source.Rule.KeywordFilter()
                    model.fromMap(value)
                    self.keywordFilter = model
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["PrimaryFilters"] as? [Any?] {
                    var tmp : [MigrationJob.Source.Rule.PrimaryFilters] = []
                    for v in value {
                        if v != nil {
                            var model = MigrationJob.Source.Rule.PrimaryFilters()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.primaryFilters = tmp
                }
            }
        }
        public class Targets : Tea.TeaModel {
            public class Content : Tea.TeaModel {
                public var group: String?

                public var level: String?

                public var method: String?

                public var region: String?

                public var resourcePath: String?

                public var url: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.group != nil {
                        map["Group"] = self.group!
                    }
                    if self.level != nil {
                        map["Level"] = self.level!
                    }
                    if self.method != nil {
                        map["Method"] = self.method!
                    }
                    if self.region != nil {
                        map["Region"] = self.region!
                    }
                    if self.resourcePath != nil {
                        map["ResourcePath"] = self.resourcePath!
                    }
                    if self.url != nil {
                        map["Url"] = self.url!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Group"] as? String {
                        self.group = value
                    }
                    if let value = dict["Level"] as? String {
                        self.level = value
                    }
                    if let value = dict["Method"] as? String {
                        self.method = value
                    }
                    if let value = dict["Region"] as? String {
                        self.region = value
                    }
                    if let value = dict["ResourcePath"] as? String {
                        self.resourcePath = value
                    }
                    if let value = dict["Url"] as? String {
                        self.url = value
                    }
                }
            }
            public var content: MigrationJob.Source.Targets.Content?

            public var type: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.content?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.content != nil {
                    map["Content"] = self.content?.toMap()
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Content"] as? [String: Any?] {
                    var model = MigrationJob.Source.Targets.Content()
                    model.fromMap(value)
                    self.content = model
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
            }
        }
        public var rule: MigrationJob.Source.Rule?

        public var targets: [MigrationJob.Source.Targets]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.rule?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.rule != nil {
                map["Rule"] = self.rule?.toMap()
            }
            if self.targets != nil {
                var tmp : [Any] = []
                for k in self.targets! {
                    tmp.append(k.toMap())
                }
                map["Targets"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Rule"] as? [String: Any?] {
                var model = MigrationJob.Source.Rule()
                model.fromMap(value)
                self.rule = model
            }
            if let value = dict["Targets"] as? [Any?] {
                var tmp : [MigrationJob.Source.Targets] = []
                for v in value {
                    if v != nil {
                        var model = MigrationJob.Source.Targets()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.targets = tmp
            }
        }
    }
    public var createTime: String?

    public var detail: String?

    public var jobStatus: String?

    public var plan: MigrationJob.Plan?

    public var ruleNames: [String]?

    public var source: [MigrationJob.Source]?

    public var updateTime: String?

    public var uuid: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.plan?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.createTime != nil {
            map["CreateTime"] = self.createTime!
        }
        if self.detail != nil {
            map["Detail"] = self.detail!
        }
        if self.jobStatus != nil {
            map["JobStatus"] = self.jobStatus!
        }
        if self.plan != nil {
            map["Plan"] = self.plan?.toMap()
        }
        if self.ruleNames != nil {
            map["RuleNames"] = self.ruleNames!
        }
        if self.source != nil {
            var tmp : [Any] = []
            for k in self.source! {
                tmp.append(k.toMap())
            }
            map["Source"] = tmp
        }
        if self.updateTime != nil {
            map["UpdateTime"] = self.updateTime!
        }
        if self.uuid != nil {
            map["Uuid"] = self.uuid!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CreateTime"] as? String {
            self.createTime = value
        }
        if let value = dict["Detail"] as? String {
            self.detail = value
        }
        if let value = dict["JobStatus"] as? String {
            self.jobStatus = value
        }
        if let value = dict["Plan"] as? [String: Any?] {
            var model = MigrationJob.Plan()
            model.fromMap(value)
            self.plan = model
        }
        if let value = dict["RuleNames"] as? [String] {
            self.ruleNames = value
        }
        if let value = dict["Source"] as? [Any?] {
            var tmp : [MigrationJob.Source] = []
            for v in value {
                if v != nil {
                    var model = MigrationJob.Source()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.source = tmp
        }
        if let value = dict["UpdateTime"] as? String {
            self.updateTime = value
        }
        if let value = dict["Uuid"] as? String {
            self.uuid = value
        }
    }
}

public class NotificationStrategy : Tea.TeaModel {
    public class EscalationSetting : Tea.TeaModel {
        public class CustomChannels : Tea.TeaModel {
            public var channelType: String?

            public var severities: [String]?

            public var templateUuid: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.channelType != nil {
                    map["ChannelType"] = self.channelType!
                }
                if self.severities != nil {
                    map["Severities"] = self.severities!
                }
                if self.templateUuid != nil {
                    map["TemplateUuid"] = self.templateUuid!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ChannelType"] as? String {
                    self.channelType = value
                }
                if let value = dict["Severities"] as? [String] {
                    self.severities = value
                }
                if let value = dict["TemplateUuid"] as? String {
                    self.templateUuid = value
                }
            }
        }
        public var autoResolveMin: Int64?

        public var customChannels: [NotificationStrategy.EscalationSetting.CustomChannels]?

        public var escalationLevel: String?

        public var escalationUuid: String?

        public var range: String?

        public var retriggerMin: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.autoResolveMin != nil {
                map["AutoResolveMin"] = self.autoResolveMin!
            }
            if self.customChannels != nil {
                var tmp : [Any] = []
                for k in self.customChannels! {
                    tmp.append(k.toMap())
                }
                map["CustomChannels"] = tmp
            }
            if self.escalationLevel != nil {
                map["EscalationLevel"] = self.escalationLevel!
            }
            if self.escalationUuid != nil {
                map["EscalationUuid"] = self.escalationUuid!
            }
            if self.range != nil {
                map["Range"] = self.range!
            }
            if self.retriggerMin != nil {
                map["RetriggerMin"] = self.retriggerMin!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AutoResolveMin"] as? Int64 {
                self.autoResolveMin = value
            }
            if let value = dict["CustomChannels"] as? [Any?] {
                var tmp : [NotificationStrategy.EscalationSetting.CustomChannels] = []
                for v in value {
                    if v != nil {
                        var model = NotificationStrategy.EscalationSetting.CustomChannels()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.customChannels = tmp
            }
            if let value = dict["EscalationLevel"] as? String {
                self.escalationLevel = value
            }
            if let value = dict["EscalationUuid"] as? String {
                self.escalationUuid = value
            }
            if let value = dict["Range"] as? String {
                self.range = value
            }
            if let value = dict["RetriggerMin"] as? Int64 {
                self.retriggerMin = value
            }
        }
    }
    public class FilterSetting : Tea.TeaModel {
        public class BlackList : Tea.TeaModel {
            public var field: String?

            public var op: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.field != nil {
                    map["Field"] = self.field!
                }
                if self.op != nil {
                    map["Op"] = self.op!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Field"] as? String {
                    self.field = value
                }
                if let value = dict["Op"] as? String {
                    self.op = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public class WhiteList : Tea.TeaModel {
            public var field: String?

            public var op: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.field != nil {
                    map["Field"] = self.field!
                }
                if self.op != nil {
                    map["Op"] = self.op!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Field"] as? String {
                    self.field = value
                }
                if let value = dict["Op"] as? String {
                    self.op = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public var blackList: [[NotificationStrategy.FilterSetting.BlackList]]?

        public var whiteList: [[NotificationStrategy.FilterSetting.WhiteList]]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.blackList != nil {
                var tmp : [Any] = []
                for k in self.blackList! {
                    var l1 : [Any] = []
                    for k1 in k {
                        l1.append(k1.toMap())
                    }
                    tmp.append(l1)
                }
                map["BlackList"] = tmp
            }
            if self.whiteList != nil {
                var tmp : [Any] = []
                for k in self.whiteList! {
                    var l1 : [Any] = []
                    for k1 in k {
                        l1.append(k1.toMap())
                    }
                    tmp.append(l1)
                }
                map["WhiteList"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["BlackList"] as? [Any?] {
                var tmp : [[NotificationStrategy.FilterSetting.BlackList]] = []
                for v in value {
                    if v != nil {
                        var l1 : [NotificationStrategy.FilterSetting.BlackList] = []
                        for v1 in v as! [Any?] {
                            if v1 != nil {
                                var model = NotificationStrategy.FilterSetting.BlackList()
                                if v1 != nil {
                                    model.fromMap(v1 as? [String: Any?])
                                }
                                l1.append(model)
                            }
                        }
                        tmp.append(l1)
                    }
                }
                self.blackList = tmp
            }
            if let value = dict["WhiteList"] as? [Any?] {
                var tmp : [[NotificationStrategy.FilterSetting.WhiteList]] = []
                for v in value {
                    if v != nil {
                        var l1 : [NotificationStrategy.FilterSetting.WhiteList] = []
                        for v1 in v as! [Any?] {
                            if v1 != nil {
                                var model = NotificationStrategy.FilterSetting.WhiteList()
                                if v1 != nil {
                                    model.fromMap(v1 as? [String: Any?])
                                }
                                l1.append(model)
                            }
                        }
                        tmp.append(l1)
                    }
                }
                self.whiteList = tmp
            }
        }
    }
    public class GroupingSetting : Tea.TeaModel {
        public class GroupingItems : Tea.TeaModel {
            public var keys: [String]?

            public var type: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.keys != nil {
                    map["Keys"] = self.keys!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Keys"] as? [String] {
                    self.keys = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
            }
        }
        public var enableRawAlertDispatching: Bool?

        public var groupingItems: [NotificationStrategy.GroupingSetting.GroupingItems]?

        public var periodMin: Int32?

        public var silenceSec: Int32?

        public var times: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.enableRawAlertDispatching != nil {
                map["EnableRawAlertDispatching"] = self.enableRawAlertDispatching!
            }
            if self.groupingItems != nil {
                var tmp : [Any] = []
                for k in self.groupingItems! {
                    tmp.append(k.toMap())
                }
                map["GroupingItems"] = tmp
            }
            if self.periodMin != nil {
                map["PeriodMin"] = self.periodMin!
            }
            if self.silenceSec != nil {
                map["SilenceSec"] = self.silenceSec!
            }
            if self.times != nil {
                map["Times"] = self.times!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["EnableRawAlertDispatching"] as? Bool {
                self.enableRawAlertDispatching = value
            }
            if let value = dict["GroupingItems"] as? [Any?] {
                var tmp : [NotificationStrategy.GroupingSetting.GroupingItems] = []
                for v in value {
                    if v != nil {
                        var model = NotificationStrategy.GroupingSetting.GroupingItems()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.groupingItems = tmp
            }
            if let value = dict["PeriodMin"] as? Int32 {
                self.periodMin = value
            }
            if let value = dict["SilenceSec"] as? Int32 {
                self.silenceSec = value
            }
            if let value = dict["Times"] as? Int32 {
                self.times = value
            }
        }
    }
    public class PushingSetting : Tea.TeaModel {
        public var pushingDataFormat: String?

        public var range: String?

        public var targetUuids: [String]?

        public var templateUuid: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.pushingDataFormat != nil {
                map["PushingDataFormat"] = self.pushingDataFormat!
            }
            if self.range != nil {
                map["Range"] = self.range!
            }
            if self.targetUuids != nil {
                map["TargetUuids"] = self.targetUuids!
            }
            if self.templateUuid != nil {
                map["TemplateUuid"] = self.templateUuid!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["PushingDataFormat"] as? String {
                self.pushingDataFormat = value
            }
            if let value = dict["Range"] as? String {
                self.range = value
            }
            if let value = dict["TargetUuids"] as? [String] {
                self.targetUuids = value
            }
            if let value = dict["TemplateUuid"] as? String {
                self.templateUuid = value
            }
        }
    }
    public class RouteSetting : Tea.TeaModel {
        public class Routes : Tea.TeaModel {
            public class Conditions : Tea.TeaModel {
                public var field: String?

                public var op: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.field != nil {
                        map["Field"] = self.field!
                    }
                    if self.op != nil {
                        map["Op"] = self.op!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Field"] as? String {
                        self.field = value
                    }
                    if let value = dict["Op"] as? String {
                        self.op = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public var conditions: [NotificationStrategy.RouteSetting.Routes.Conditions]?

            public var escalationUuid: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.conditions != nil {
                    var tmp : [Any] = []
                    for k in self.conditions! {
                        tmp.append(k.toMap())
                    }
                    map["Conditions"] = tmp
                }
                if self.escalationUuid != nil {
                    map["EscalationUuid"] = self.escalationUuid!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Conditions"] as? [Any?] {
                    var tmp : [NotificationStrategy.RouteSetting.Routes.Conditions] = []
                    for v in value {
                        if v != nil {
                            var model = NotificationStrategy.RouteSetting.Routes.Conditions()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.conditions = tmp
                }
                if let value = dict["EscalationUuid"] as? String {
                    self.escalationUuid = value
                }
            }
        }
        public var routes: [NotificationStrategy.RouteSetting.Routes]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.routes != nil {
                var tmp : [Any] = []
                for k in self.routes! {
                    tmp.append(k.toMap())
                }
                map["Routes"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Routes"] as? [Any?] {
                var tmp : [NotificationStrategy.RouteSetting.Routes] = []
                for v in value {
                    if v != nil {
                        var model = NotificationStrategy.RouteSetting.Routes()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.routes = tmp
            }
        }
    }
    public var createTime: String?

    public var description_: String?

    public var escalationSetting: NotificationStrategy.EscalationSetting?

    public var filterSetting: NotificationStrategy.FilterSetting?

    public var groupingSetting: NotificationStrategy.GroupingSetting?

    public var name: String?

    public var product: String?

    public var pushingSetting: NotificationStrategy.PushingSetting?

    public var routeSetting: NotificationStrategy.RouteSetting?

    public var updateTime: String?

    public var userId: String?

    public var uuid: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.escalationSetting?.validate()
        try self.filterSetting?.validate()
        try self.groupingSetting?.validate()
        try self.pushingSetting?.validate()
        try self.routeSetting?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.createTime != nil {
            map["CreateTime"] = self.createTime!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.escalationSetting != nil {
            map["EscalationSetting"] = self.escalationSetting?.toMap()
        }
        if self.filterSetting != nil {
            map["FilterSetting"] = self.filterSetting?.toMap()
        }
        if self.groupingSetting != nil {
            map["GroupingSetting"] = self.groupingSetting?.toMap()
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.product != nil {
            map["Product"] = self.product!
        }
        if self.pushingSetting != nil {
            map["PushingSetting"] = self.pushingSetting?.toMap()
        }
        if self.routeSetting != nil {
            map["RouteSetting"] = self.routeSetting?.toMap()
        }
        if self.updateTime != nil {
            map["UpdateTime"] = self.updateTime!
        }
        if self.userId != nil {
            map["UserId"] = self.userId!
        }
        if self.uuid != nil {
            map["Uuid"] = self.uuid!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CreateTime"] as? String {
            self.createTime = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["EscalationSetting"] as? [String: Any?] {
            var model = NotificationStrategy.EscalationSetting()
            model.fromMap(value)
            self.escalationSetting = model
        }
        if let value = dict["FilterSetting"] as? [String: Any?] {
            var model = NotificationStrategy.FilterSetting()
            model.fromMap(value)
            self.filterSetting = model
        }
        if let value = dict["GroupingSetting"] as? [String: Any?] {
            var model = NotificationStrategy.GroupingSetting()
            model.fromMap(value)
            self.groupingSetting = model
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["Product"] as? String {
            self.product = value
        }
        if let value = dict["PushingSetting"] as? [String: Any?] {
            var model = NotificationStrategy.PushingSetting()
            model.fromMap(value)
            self.pushingSetting = model
        }
        if let value = dict["RouteSetting"] as? [String: Any?] {
            var model = NotificationStrategy.RouteSetting()
            model.fromMap(value)
            self.routeSetting = model
        }
        if let value = dict["UpdateTime"] as? String {
            self.updateTime = value
        }
        if let value = dict["UserId"] as? String {
            self.userId = value
        }
        if let value = dict["Uuid"] as? String {
            self.uuid = value
        }
    }
}

public class NotificationTemplate : Tea.TeaModel {
    public var createTime: String?

    public var description_: String?

    public var enContent: String?

    public var enItemContent: String?

    public var enTitle: String?

    public var name: String?

    public var type: String?

    public var updateTime: String?

    public var userId: String?

    public var uuid: String?

    public var wraperType: String?

    public var zhContent: String?

    public var zhItemContent: String?

    public var zhTitle: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.createTime != nil {
            map["CreateTime"] = self.createTime!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.enContent != nil {
            map["EnContent"] = self.enContent!
        }
        if self.enItemContent != nil {
            map["EnItemContent"] = self.enItemContent!
        }
        if self.enTitle != nil {
            map["EnTitle"] = self.enTitle!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        if self.updateTime != nil {
            map["UpdateTime"] = self.updateTime!
        }
        if self.userId != nil {
            map["UserId"] = self.userId!
        }
        if self.uuid != nil {
            map["Uuid"] = self.uuid!
        }
        if self.wraperType != nil {
            map["WraperType"] = self.wraperType!
        }
        if self.zhContent != nil {
            map["ZhContent"] = self.zhContent!
        }
        if self.zhItemContent != nil {
            map["ZhItemContent"] = self.zhItemContent!
        }
        if self.zhTitle != nil {
            map["ZhTitle"] = self.zhTitle!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CreateTime"] as? String {
            self.createTime = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["EnContent"] as? String {
            self.enContent = value
        }
        if let value = dict["EnItemContent"] as? String {
            self.enItemContent = value
        }
        if let value = dict["EnTitle"] as? String {
            self.enTitle = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
        if let value = dict["UpdateTime"] as? String {
            self.updateTime = value
        }
        if let value = dict["UserId"] as? String {
            self.userId = value
        }
        if let value = dict["Uuid"] as? String {
            self.uuid = value
        }
        if let value = dict["WraperType"] as? String {
            self.wraperType = value
        }
        if let value = dict["ZhContent"] as? String {
            self.zhContent = value
        }
        if let value = dict["ZhItemContent"] as? String {
            self.zhItemContent = value
        }
        if let value = dict["ZhTitle"] as? String {
            self.zhTitle = value
        }
    }
}

public class PushingTarget : Tea.TeaModel {
    public class HttpRequestTarget : Tea.TeaModel {
        public class Headers : Tea.TeaModel {
            public var key: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.key != nil {
                    map["Key"] = self.key!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Key"] as? String {
                    self.key = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public var contentType: String?

        public var encryptSignatureKey: String?

        public var encryptString: String?

        public var encryptTimestampKey: String?

        public var headers: [PushingTarget.HttpRequestTarget.Headers]?

        public var method: String?

        public var url: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.contentType != nil {
                map["ContentType"] = self.contentType!
            }
            if self.encryptSignatureKey != nil {
                map["EncryptSignatureKey"] = self.encryptSignatureKey!
            }
            if self.encryptString != nil {
                map["EncryptString"] = self.encryptString!
            }
            if self.encryptTimestampKey != nil {
                map["EncryptTimestampKey"] = self.encryptTimestampKey!
            }
            if self.headers != nil {
                var tmp : [Any] = []
                for k in self.headers! {
                    tmp.append(k.toMap())
                }
                map["Headers"] = tmp
            }
            if self.method != nil {
                map["Method"] = self.method!
            }
            if self.url != nil {
                map["Url"] = self.url!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ContentType"] as? String {
                self.contentType = value
            }
            if let value = dict["EncryptSignatureKey"] as? String {
                self.encryptSignatureKey = value
            }
            if let value = dict["EncryptString"] as? String {
                self.encryptString = value
            }
            if let value = dict["EncryptTimestampKey"] as? String {
                self.encryptTimestampKey = value
            }
            if let value = dict["Headers"] as? [Any?] {
                var tmp : [PushingTarget.HttpRequestTarget.Headers] = []
                for v in value {
                    if v != nil {
                        var model = PushingTarget.HttpRequestTarget.Headers()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.headers = tmp
            }
            if let value = dict["Method"] as? String {
                self.method = value
            }
            if let value = dict["Url"] as? String {
                self.url = value
            }
        }
    }
    public var arn: String?

    public var createTime: String?

    public var description_: String?

    public var httpRequestTarget: PushingTarget.HttpRequestTarget?

    public var name: String?

    public var range: String?

    public var templateUuid: String?

    public var type: String?

    public var updateTime: String?

    public var userId: String?

    public var uuid: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.httpRequestTarget?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.arn != nil {
            map["Arn"] = self.arn!
        }
        if self.createTime != nil {
            map["CreateTime"] = self.createTime!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.httpRequestTarget != nil {
            map["HttpRequestTarget"] = self.httpRequestTarget?.toMap()
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.range != nil {
            map["Range"] = self.range!
        }
        if self.templateUuid != nil {
            map["TemplateUuid"] = self.templateUuid!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        if self.updateTime != nil {
            map["UpdateTime"] = self.updateTime!
        }
        if self.userId != nil {
            map["UserId"] = self.userId!
        }
        if self.uuid != nil {
            map["Uuid"] = self.uuid!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Arn"] as? String {
            self.arn = value
        }
        if let value = dict["CreateTime"] as? String {
            self.createTime = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["HttpRequestTarget"] as? [String: Any?] {
            var model = PushingTarget.HttpRequestTarget()
            model.fromMap(value)
            self.httpRequestTarget = model
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["Range"] as? String {
            self.range = value
        }
        if let value = dict["TemplateUuid"] as? String {
            self.templateUuid = value
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
        if let value = dict["UpdateTime"] as? String {
            self.updateTime = value
        }
        if let value = dict["UserId"] as? String {
            self.userId = value
        }
        if let value = dict["Uuid"] as? String {
            self.uuid = value
        }
    }
}

public class Subscription : Tea.TeaModel {
    public class Conditions : Tea.TeaModel {
        public var field: String?

        public var operator_: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.field != nil {
                map["Field"] = self.field!
            }
            if self.operator_ != nil {
                map["Operator"] = self.operator_!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Field"] as? String {
                self.field = value
            }
            if let value = dict["Operator"] as? String {
                self.operator_ = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var conditions: [Subscription.Conditions]?

    public var createTime: String?

    public var description_: String?

    public var enabled: Bool?

    public var name: String?

    public var product: String?

    public var relation: String?

    public var strategyUuid: String?

    public var updateTime: String?

    public var uuid: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.conditions != nil {
            var tmp : [Any] = []
            for k in self.conditions! {
                tmp.append(k.toMap())
            }
            map["Conditions"] = tmp
        }
        if self.createTime != nil {
            map["CreateTime"] = self.createTime!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.enabled != nil {
            map["Enabled"] = self.enabled!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.product != nil {
            map["Product"] = self.product!
        }
        if self.relation != nil {
            map["Relation"] = self.relation!
        }
        if self.strategyUuid != nil {
            map["StrategyUuid"] = self.strategyUuid!
        }
        if self.updateTime != nil {
            map["UpdateTime"] = self.updateTime!
        }
        if self.uuid != nil {
            map["Uuid"] = self.uuid!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Conditions"] as? [Any?] {
            var tmp : [Subscription.Conditions] = []
            for v in value {
                if v != nil {
                    var model = Subscription.Conditions()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.conditions = tmp
        }
        if let value = dict["CreateTime"] as? String {
            self.createTime = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["Enabled"] as? Bool {
            self.enabled = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["Product"] as? String {
            self.product = value
        }
        if let value = dict["Relation"] as? String {
            self.relation = value
        }
        if let value = dict["StrategyUuid"] as? String {
            self.strategyUuid = value
        }
        if let value = dict["UpdateTime"] as? String {
            self.updateTime = value
        }
        if let value = dict["Uuid"] as? String {
            self.uuid = value
        }
    }
}

public class AddTagsRequest : Tea.TeaModel {
    public class Tag : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var groupIds: [String]?

    public var regionId: String?

    public var tag: [AddTagsRequest.Tag]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.groupIds != nil {
            map["GroupIds"] = self.groupIds!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.tag != nil {
            var tmp : [Any] = []
            for k in self.tag! {
                tmp.append(k.toMap())
            }
            map["Tag"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["GroupIds"] as? [String] {
            self.groupIds = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Tag"] as? [Any?] {
            var tmp : [AddTagsRequest.Tag] = []
            for v in value {
                if v != nil {
                    var model = AddTagsRequest.Tag()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tag = tmp
        }
    }
}

public class AddTagsResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class AddTagsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AddTagsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = AddTagsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ApplyMetricRuleTemplateRequest : Tea.TeaModel {
    public var appendMode: String?

    public var applyMode: String?

    public var enableEndTime: Int64?

    public var enableStartTime: Int64?

    public var groupId: Int64?

    public var notifyLevel: Int64?

    public var silenceTime: Int64?

    public var templateIds: String?

    public var webhook: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appendMode != nil {
            map["AppendMode"] = self.appendMode!
        }
        if self.applyMode != nil {
            map["ApplyMode"] = self.applyMode!
        }
        if self.enableEndTime != nil {
            map["EnableEndTime"] = self.enableEndTime!
        }
        if self.enableStartTime != nil {
            map["EnableStartTime"] = self.enableStartTime!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.notifyLevel != nil {
            map["NotifyLevel"] = self.notifyLevel!
        }
        if self.silenceTime != nil {
            map["SilenceTime"] = self.silenceTime!
        }
        if self.templateIds != nil {
            map["TemplateIds"] = self.templateIds!
        }
        if self.webhook != nil {
            map["Webhook"] = self.webhook!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppendMode"] as? String {
            self.appendMode = value
        }
        if let value = dict["ApplyMode"] as? String {
            self.applyMode = value
        }
        if let value = dict["EnableEndTime"] as? Int64 {
            self.enableEndTime = value
        }
        if let value = dict["EnableStartTime"] as? Int64 {
            self.enableStartTime = value
        }
        if let value = dict["GroupId"] as? Int64 {
            self.groupId = value
        }
        if let value = dict["NotifyLevel"] as? Int64 {
            self.notifyLevel = value
        }
        if let value = dict["SilenceTime"] as? Int64 {
            self.silenceTime = value
        }
        if let value = dict["TemplateIds"] as? String {
            self.templateIds = value
        }
        if let value = dict["Webhook"] as? String {
            self.webhook = value
        }
    }
}

public class ApplyMetricRuleTemplateResponseBody : Tea.TeaModel {
    public class Resource : Tea.TeaModel {
        public class AlertResults : Tea.TeaModel {
            public var code: String?

            public var message: String?

            public var ruleId: String?

            public var ruleName: String?

            public var success: Bool?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.code != nil {
                    map["Code"] = self.code!
                }
                if self.message != nil {
                    map["Message"] = self.message!
                }
                if self.ruleId != nil {
                    map["RuleId"] = self.ruleId!
                }
                if self.ruleName != nil {
                    map["RuleName"] = self.ruleName!
                }
                if self.success != nil {
                    map["Success"] = self.success!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Code"] as? String {
                    self.code = value
                }
                if let value = dict["Message"] as? String {
                    self.message = value
                }
                if let value = dict["RuleId"] as? String {
                    self.ruleId = value
                }
                if let value = dict["RuleName"] as? String {
                    self.ruleName = value
                }
                if let value = dict["Success"] as? Bool {
                    self.success = value
                }
            }
        }
        public var alertResults: [ApplyMetricRuleTemplateResponseBody.Resource.AlertResults]?

        public var groupId: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.alertResults != nil {
                var tmp : [Any] = []
                for k in self.alertResults! {
                    tmp.append(k.toMap())
                }
                map["AlertResults"] = tmp
            }
            if self.groupId != nil {
                map["GroupId"] = self.groupId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AlertResults"] as? [Any?] {
                var tmp : [ApplyMetricRuleTemplateResponseBody.Resource.AlertResults] = []
                for v in value {
                    if v != nil {
                        var model = ApplyMetricRuleTemplateResponseBody.Resource.AlertResults()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.alertResults = tmp
            }
            if let value = dict["GroupId"] as? Int64 {
                self.groupId = value
            }
        }
    }
    public var code: Int32?

    public var message: String?

    public var requestId: String?

    public var resource: ApplyMetricRuleTemplateResponseBody.Resource?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.resource?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resource != nil {
            map["Resource"] = self.resource?.toMap()
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Resource"] as? [String: Any?] {
            var model = ApplyMetricRuleTemplateResponseBody.Resource()
            model.fromMap(value)
            self.resource = model
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ApplyMetricRuleTemplateResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ApplyMetricRuleTemplateResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ApplyMetricRuleTemplateResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class BatchCreateInstantSiteMonitorRequest : Tea.TeaModel {
    public class TaskList : Tea.TeaModel {
        public var address: String?

        public var ispCities: String?

        public var optionsJson: String?

        public var taskName: String?

        public var taskType: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.address != nil {
                map["Address"] = self.address!
            }
            if self.ispCities != nil {
                map["IspCities"] = self.ispCities!
            }
            if self.optionsJson != nil {
                map["OptionsJson"] = self.optionsJson!
            }
            if self.taskName != nil {
                map["TaskName"] = self.taskName!
            }
            if self.taskType != nil {
                map["TaskType"] = self.taskType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Address"] as? String {
                self.address = value
            }
            if let value = dict["IspCities"] as? String {
                self.ispCities = value
            }
            if let value = dict["OptionsJson"] as? String {
                self.optionsJson = value
            }
            if let value = dict["TaskName"] as? String {
                self.taskName = value
            }
            if let value = dict["TaskType"] as? String {
                self.taskType = value
            }
        }
    }
    public var regionId: String?

    public var taskList: [BatchCreateInstantSiteMonitorRequest.TaskList]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.taskList != nil {
            var tmp : [Any] = []
            for k in self.taskList! {
                tmp.append(k.toMap())
            }
            map["TaskList"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["TaskList"] as? [Any?] {
            var tmp : [BatchCreateInstantSiteMonitorRequest.TaskList] = []
            for v in value {
                if v != nil {
                    var model = BatchCreateInstantSiteMonitorRequest.TaskList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.taskList = tmp
        }
    }
}

public class BatchCreateInstantSiteMonitorResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var taskId: String?

        public var taskName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            if self.taskName != nil {
                map["TaskName"] = self.taskName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["TaskId"] as? String {
                self.taskId = value
            }
            if let value = dict["TaskName"] as? String {
                self.taskName = value
            }
        }
    }
    public var code: String?

    public var data: [BatchCreateInstantSiteMonitorResponseBody.Data]?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [BatchCreateInstantSiteMonitorResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = BatchCreateInstantSiteMonitorResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class BatchCreateInstantSiteMonitorResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: BatchCreateInstantSiteMonitorResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = BatchCreateInstantSiteMonitorResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class BatchExportRequest : Tea.TeaModel {
    public var cursor: String?

    public var length: Int32?

    public var measurements: [String]?

    public var metric: String?

    public var namespace: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cursor != nil {
            map["Cursor"] = self.cursor!
        }
        if self.length != nil {
            map["Length"] = self.length!
        }
        if self.measurements != nil {
            map["Measurements"] = self.measurements!
        }
        if self.metric != nil {
            map["Metric"] = self.metric!
        }
        if self.namespace != nil {
            map["Namespace"] = self.namespace!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Cursor"] as? String {
            self.cursor = value
        }
        if let value = dict["Length"] as? Int32 {
            self.length = value
        }
        if let value = dict["Measurements"] as? [String] {
            self.measurements = value
        }
        if let value = dict["Metric"] as? String {
            self.metric = value
        }
        if let value = dict["Namespace"] as? String {
            self.namespace = value
        }
    }
}

public class BatchExportShrinkRequest : Tea.TeaModel {
    public var cursor: String?

    public var length: Int32?

    public var measurementsShrink: String?

    public var metric: String?

    public var namespace: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cursor != nil {
            map["Cursor"] = self.cursor!
        }
        if self.length != nil {
            map["Length"] = self.length!
        }
        if self.measurementsShrink != nil {
            map["Measurements"] = self.measurementsShrink!
        }
        if self.metric != nil {
            map["Metric"] = self.metric!
        }
        if self.namespace != nil {
            map["Namespace"] = self.namespace!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Cursor"] as? String {
            self.cursor = value
        }
        if let value = dict["Length"] as? Int32 {
            self.length = value
        }
        if let value = dict["Measurements"] as? String {
            self.measurementsShrink = value
        }
        if let value = dict["Metric"] as? String {
            self.metric = value
        }
        if let value = dict["Namespace"] as? String {
            self.namespace = value
        }
    }
}

public class BatchExportResponseBody : Tea.TeaModel {
    public var anchor: Int64?

    public var code: Int32?

    public var cursor: String?

    public var dataResults: [MetricStat]?

    public var hasNext: Bool?

    public var length: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.anchor != nil {
            map["Anchor"] = self.anchor!
        }
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.cursor != nil {
            map["Cursor"] = self.cursor!
        }
        if self.dataResults != nil {
            var tmp : [Any] = []
            for k in self.dataResults! {
                tmp.append(k.toMap())
            }
            map["DataResults"] = tmp
        }
        if self.hasNext != nil {
            map["HasNext"] = self.hasNext!
        }
        if self.length != nil {
            map["Length"] = self.length!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Anchor"] as? Int64 {
            self.anchor = value
        }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Cursor"] as? String {
            self.cursor = value
        }
        if let value = dict["DataResults"] as? [Any?] {
            var tmp : [MetricStat] = []
            for v in value {
                if v != nil {
                    var model = MetricStat()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.dataResults = tmp
        }
        if let value = dict["HasNext"] as? Bool {
            self.hasNext = value
        }
        if let value = dict["Length"] as? Int32 {
            self.length = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class BatchExportResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: BatchExportResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = BatchExportResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateDynamicTagGroupRequest : Tea.TeaModel {
    public class MatchExpress : Tea.TeaModel {
        public var tagName: String?

        public var tagValue: String?

        public var tagValueMatchFunction: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tagName != nil {
                map["TagName"] = self.tagName!
            }
            if self.tagValue != nil {
                map["TagValue"] = self.tagValue!
            }
            if self.tagValueMatchFunction != nil {
                map["TagValueMatchFunction"] = self.tagValueMatchFunction!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["TagName"] as? String {
                self.tagName = value
            }
            if let value = dict["TagValue"] as? String {
                self.tagValue = value
            }
            if let value = dict["TagValueMatchFunction"] as? String {
                self.tagValueMatchFunction = value
            }
        }
    }
    public var contactGroupList: [String]?

    public var enableInstallAgent: Bool?

    public var enableSubscribeEvent: Bool?

    public var matchExpress: [CreateDynamicTagGroupRequest.MatchExpress]?

    public var matchExpressFilterRelation: String?

    public var regionId: String?

    public var tagKey: String?

    public var tagRegionId: String?

    public var templateIdList: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.contactGroupList != nil {
            map["ContactGroupList"] = self.contactGroupList!
        }
        if self.enableInstallAgent != nil {
            map["EnableInstallAgent"] = self.enableInstallAgent!
        }
        if self.enableSubscribeEvent != nil {
            map["EnableSubscribeEvent"] = self.enableSubscribeEvent!
        }
        if self.matchExpress != nil {
            var tmp : [Any] = []
            for k in self.matchExpress! {
                tmp.append(k.toMap())
            }
            map["MatchExpress"] = tmp
        }
        if self.matchExpressFilterRelation != nil {
            map["MatchExpressFilterRelation"] = self.matchExpressFilterRelation!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.tagKey != nil {
            map["TagKey"] = self.tagKey!
        }
        if self.tagRegionId != nil {
            map["TagRegionId"] = self.tagRegionId!
        }
        if self.templateIdList != nil {
            map["TemplateIdList"] = self.templateIdList!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ContactGroupList"] as? [String] {
            self.contactGroupList = value
        }
        if let value = dict["EnableInstallAgent"] as? Bool {
            self.enableInstallAgent = value
        }
        if let value = dict["EnableSubscribeEvent"] as? Bool {
            self.enableSubscribeEvent = value
        }
        if let value = dict["MatchExpress"] as? [Any?] {
            var tmp : [CreateDynamicTagGroupRequest.MatchExpress] = []
            for v in value {
                if v != nil {
                    var model = CreateDynamicTagGroupRequest.MatchExpress()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.matchExpress = tmp
        }
        if let value = dict["MatchExpressFilterRelation"] as? String {
            self.matchExpressFilterRelation = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["TagKey"] as? String {
            self.tagKey = value
        }
        if let value = dict["TagRegionId"] as? String {
            self.tagRegionId = value
        }
        if let value = dict["TemplateIdList"] as? [String] {
            self.templateIdList = value
        }
    }
}

public class CreateDynamicTagGroupResponseBody : Tea.TeaModel {
    public var code: String?

    public var id: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Id"] as? String {
            self.id = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class CreateDynamicTagGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateDynamicTagGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateDynamicTagGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateGroupMetricRulesRequest : Tea.TeaModel {
    public class GroupMetricRules : Tea.TeaModel {
        public class Escalations : Tea.TeaModel {
            public class Critical : Tea.TeaModel {
                public var comparisonOperator: String?

                public var n: String?

                public var preCondition: String?

                public var statistics: String?

                public var threshold: String?

                public var times: Int32?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.comparisonOperator != nil {
                        map["ComparisonOperator"] = self.comparisonOperator!
                    }
                    if self.n != nil {
                        map["N"] = self.n!
                    }
                    if self.preCondition != nil {
                        map["PreCondition"] = self.preCondition!
                    }
                    if self.statistics != nil {
                        map["Statistics"] = self.statistics!
                    }
                    if self.threshold != nil {
                        map["Threshold"] = self.threshold!
                    }
                    if self.times != nil {
                        map["Times"] = self.times!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["ComparisonOperator"] as? String {
                        self.comparisonOperator = value
                    }
                    if let value = dict["N"] as? String {
                        self.n = value
                    }
                    if let value = dict["PreCondition"] as? String {
                        self.preCondition = value
                    }
                    if let value = dict["Statistics"] as? String {
                        self.statistics = value
                    }
                    if let value = dict["Threshold"] as? String {
                        self.threshold = value
                    }
                    if let value = dict["Times"] as? Int32 {
                        self.times = value
                    }
                }
            }
            public class Info : Tea.TeaModel {
                public var comparisonOperator: String?

                public var n: String?

                public var preCondition: String?

                public var statistics: String?

                public var threshold: String?

                public var times: Int32?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.comparisonOperator != nil {
                        map["ComparisonOperator"] = self.comparisonOperator!
                    }
                    if self.n != nil {
                        map["N"] = self.n!
                    }
                    if self.preCondition != nil {
                        map["PreCondition"] = self.preCondition!
                    }
                    if self.statistics != nil {
                        map["Statistics"] = self.statistics!
                    }
                    if self.threshold != nil {
                        map["Threshold"] = self.threshold!
                    }
                    if self.times != nil {
                        map["Times"] = self.times!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["ComparisonOperator"] as? String {
                        self.comparisonOperator = value
                    }
                    if let value = dict["N"] as? String {
                        self.n = value
                    }
                    if let value = dict["PreCondition"] as? String {
                        self.preCondition = value
                    }
                    if let value = dict["Statistics"] as? String {
                        self.statistics = value
                    }
                    if let value = dict["Threshold"] as? String {
                        self.threshold = value
                    }
                    if let value = dict["Times"] as? Int32 {
                        self.times = value
                    }
                }
            }
            public class Warn : Tea.TeaModel {
                public var comparisonOperator: String?

                public var n: String?

                public var preCondition: String?

                public var statistics: String?

                public var threshold: String?

                public var times: Int32?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.comparisonOperator != nil {
                        map["ComparisonOperator"] = self.comparisonOperator!
                    }
                    if self.n != nil {
                        map["N"] = self.n!
                    }
                    if self.preCondition != nil {
                        map["PreCondition"] = self.preCondition!
                    }
                    if self.statistics != nil {
                        map["Statistics"] = self.statistics!
                    }
                    if self.threshold != nil {
                        map["Threshold"] = self.threshold!
                    }
                    if self.times != nil {
                        map["Times"] = self.times!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["ComparisonOperator"] as? String {
                        self.comparisonOperator = value
                    }
                    if let value = dict["N"] as? String {
                        self.n = value
                    }
                    if let value = dict["PreCondition"] as? String {
                        self.preCondition = value
                    }
                    if let value = dict["Statistics"] as? String {
                        self.statistics = value
                    }
                    if let value = dict["Threshold"] as? String {
                        self.threshold = value
                    }
                    if let value = dict["Times"] as? Int32 {
                        self.times = value
                    }
                }
            }
            public var critical: CreateGroupMetricRulesRequest.GroupMetricRules.Escalations.Critical?

            public var info: CreateGroupMetricRulesRequest.GroupMetricRules.Escalations.Info?

            public var warn: CreateGroupMetricRulesRequest.GroupMetricRules.Escalations.Warn?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.critical?.validate()
                try self.info?.validate()
                try self.warn?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.critical != nil {
                    map["Critical"] = self.critical?.toMap()
                }
                if self.info != nil {
                    map["Info"] = self.info?.toMap()
                }
                if self.warn != nil {
                    map["Warn"] = self.warn?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Critical"] as? [String: Any?] {
                    var model = CreateGroupMetricRulesRequest.GroupMetricRules.Escalations.Critical()
                    model.fromMap(value)
                    self.critical = model
                }
                if let value = dict["Info"] as? [String: Any?] {
                    var model = CreateGroupMetricRulesRequest.GroupMetricRules.Escalations.Info()
                    model.fromMap(value)
                    self.info = model
                }
                if let value = dict["Warn"] as? [String: Any?] {
                    var model = CreateGroupMetricRulesRequest.GroupMetricRules.Escalations.Warn()
                    model.fromMap(value)
                    self.warn = model
                }
            }
        }
        public class Labels : Tea.TeaModel {
            public var key: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.key != nil {
                    map["Key"] = self.key!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Key"] as? String {
                    self.key = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public var escalations: CreateGroupMetricRulesRequest.GroupMetricRules.Escalations?

        public var category: String?

        public var contactGroups: String?

        public var dimensions: String?

        public var effectiveInterval: String?

        public var emailSubject: String?

        public var interval: String?

        public var labels: [CreateGroupMetricRulesRequest.GroupMetricRules.Labels]?

        public var metricName: String?

        public var namespace: String?

        public var noDataPolicy: String?

        public var noEffectiveInterval: String?

        public var options: String?

        public var period: String?

        public var ruleId: String?

        public var ruleName: String?

        public var silenceTime: Int32?

        public var webhook: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.escalations?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.escalations != nil {
                map["Escalations"] = self.escalations?.toMap()
            }
            if self.category != nil {
                map["Category"] = self.category!
            }
            if self.contactGroups != nil {
                map["ContactGroups"] = self.contactGroups!
            }
            if self.dimensions != nil {
                map["Dimensions"] = self.dimensions!
            }
            if self.effectiveInterval != nil {
                map["EffectiveInterval"] = self.effectiveInterval!
            }
            if self.emailSubject != nil {
                map["EmailSubject"] = self.emailSubject!
            }
            if self.interval != nil {
                map["Interval"] = self.interval!
            }
            if self.labels != nil {
                var tmp : [Any] = []
                for k in self.labels! {
                    tmp.append(k.toMap())
                }
                map["Labels"] = tmp
            }
            if self.metricName != nil {
                map["MetricName"] = self.metricName!
            }
            if self.namespace != nil {
                map["Namespace"] = self.namespace!
            }
            if self.noDataPolicy != nil {
                map["NoDataPolicy"] = self.noDataPolicy!
            }
            if self.noEffectiveInterval != nil {
                map["NoEffectiveInterval"] = self.noEffectiveInterval!
            }
            if self.options != nil {
                map["Options"] = self.options!
            }
            if self.period != nil {
                map["Period"] = self.period!
            }
            if self.ruleId != nil {
                map["RuleId"] = self.ruleId!
            }
            if self.ruleName != nil {
                map["RuleName"] = self.ruleName!
            }
            if self.silenceTime != nil {
                map["SilenceTime"] = self.silenceTime!
            }
            if self.webhook != nil {
                map["Webhook"] = self.webhook!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Escalations"] as? [String: Any?] {
                var model = CreateGroupMetricRulesRequest.GroupMetricRules.Escalations()
                model.fromMap(value)
                self.escalations = model
            }
            if let value = dict["Category"] as? String {
                self.category = value
            }
            if let value = dict["ContactGroups"] as? String {
                self.contactGroups = value
            }
            if let value = dict["Dimensions"] as? String {
                self.dimensions = value
            }
            if let value = dict["EffectiveInterval"] as? String {
                self.effectiveInterval = value
            }
            if let value = dict["EmailSubject"] as? String {
                self.emailSubject = value
            }
            if let value = dict["Interval"] as? String {
                self.interval = value
            }
            if let value = dict["Labels"] as? [Any?] {
                var tmp : [CreateGroupMetricRulesRequest.GroupMetricRules.Labels] = []
                for v in value {
                    if v != nil {
                        var model = CreateGroupMetricRulesRequest.GroupMetricRules.Labels()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.labels = tmp
            }
            if let value = dict["MetricName"] as? String {
                self.metricName = value
            }
            if let value = dict["Namespace"] as? String {
                self.namespace = value
            }
            if let value = dict["NoDataPolicy"] as? String {
                self.noDataPolicy = value
            }
            if let value = dict["NoEffectiveInterval"] as? String {
                self.noEffectiveInterval = value
            }
            if let value = dict["Options"] as? String {
                self.options = value
            }
            if let value = dict["Period"] as? String {
                self.period = value
            }
            if let value = dict["RuleId"] as? String {
                self.ruleId = value
            }
            if let value = dict["RuleName"] as? String {
                self.ruleName = value
            }
            if let value = dict["SilenceTime"] as? Int32 {
                self.silenceTime = value
            }
            if let value = dict["Webhook"] as? String {
                self.webhook = value
            }
        }
    }
    public var groupId: Int64?

    public var groupMetricRules: [CreateGroupMetricRulesRequest.GroupMetricRules]?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.groupMetricRules != nil {
            var tmp : [Any] = []
            for k in self.groupMetricRules! {
                tmp.append(k.toMap())
            }
            map["GroupMetricRules"] = tmp
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["GroupId"] as? Int64 {
            self.groupId = value
        }
        if let value = dict["GroupMetricRules"] as? [Any?] {
            var tmp : [CreateGroupMetricRulesRequest.GroupMetricRules] = []
            for v in value {
                if v != nil {
                    var model = CreateGroupMetricRulesRequest.GroupMetricRules()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.groupMetricRules = tmp
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class CreateGroupMetricRulesResponseBody : Tea.TeaModel {
    public class Resources : Tea.TeaModel {
        public class AlertResult : Tea.TeaModel {
            public var code: Int32?

            public var message: String?

            public var ruleId: String?

            public var ruleName: String?

            public var success: Bool?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.code != nil {
                    map["Code"] = self.code!
                }
                if self.message != nil {
                    map["Message"] = self.message!
                }
                if self.ruleId != nil {
                    map["RuleId"] = self.ruleId!
                }
                if self.ruleName != nil {
                    map["RuleName"] = self.ruleName!
                }
                if self.success != nil {
                    map["Success"] = self.success!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Code"] as? Int32 {
                    self.code = value
                }
                if let value = dict["Message"] as? String {
                    self.message = value
                }
                if let value = dict["RuleId"] as? String {
                    self.ruleId = value
                }
                if let value = dict["RuleName"] as? String {
                    self.ruleName = value
                }
                if let value = dict["Success"] as? Bool {
                    self.success = value
                }
            }
        }
        public var alertResult: [CreateGroupMetricRulesResponseBody.Resources.AlertResult]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.alertResult != nil {
                var tmp : [Any] = []
                for k in self.alertResult! {
                    tmp.append(k.toMap())
                }
                map["AlertResult"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AlertResult"] as? [Any?] {
                var tmp : [CreateGroupMetricRulesResponseBody.Resources.AlertResult] = []
                for v in value {
                    if v != nil {
                        var model = CreateGroupMetricRulesResponseBody.Resources.AlertResult()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.alertResult = tmp
            }
        }
    }
    public var code: Int32?

    public var message: String?

    public var requestId: String?

    public var resources: CreateGroupMetricRulesResponseBody.Resources?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.resources?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resources != nil {
            map["Resources"] = self.resources?.toMap()
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Resources"] as? [String: Any?] {
            var model = CreateGroupMetricRulesResponseBody.Resources()
            model.fromMap(value)
            self.resources = model
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class CreateGroupMetricRulesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateGroupMetricRulesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateGroupMetricRulesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateGroupMonitoringAgentProcessRequest : Tea.TeaModel {
    public class AlertConfig : Tea.TeaModel {
        public class TargetList : Tea.TeaModel {
            public var arn: String?

            public var id: String?

            public var jsonParams: String?

            public var level: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.arn != nil {
                    map["Arn"] = self.arn!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.jsonParams != nil {
                    map["JsonParams"] = self.jsonParams!
                }
                if self.level != nil {
                    map["Level"] = self.level!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Arn"] as? String {
                    self.arn = value
                }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
                if let value = dict["JsonParams"] as? String {
                    self.jsonParams = value
                }
                if let value = dict["Level"] as? String {
                    self.level = value
                }
            }
        }
        public var comparisonOperator: String?

        public var effectiveInterval: String?

        public var escalationsLevel: String?

        public var noEffectiveInterval: String?

        public var silenceTime: String?

        public var statistics: String?

        public var targetList: [CreateGroupMonitoringAgentProcessRequest.AlertConfig.TargetList]?

        public var threshold: String?

        public var times: String?

        public var webhook: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.comparisonOperator != nil {
                map["ComparisonOperator"] = self.comparisonOperator!
            }
            if self.effectiveInterval != nil {
                map["EffectiveInterval"] = self.effectiveInterval!
            }
            if self.escalationsLevel != nil {
                map["EscalationsLevel"] = self.escalationsLevel!
            }
            if self.noEffectiveInterval != nil {
                map["NoEffectiveInterval"] = self.noEffectiveInterval!
            }
            if self.silenceTime != nil {
                map["SilenceTime"] = self.silenceTime!
            }
            if self.statistics != nil {
                map["Statistics"] = self.statistics!
            }
            if self.targetList != nil {
                var tmp : [Any] = []
                for k in self.targetList! {
                    tmp.append(k.toMap())
                }
                map["TargetList"] = tmp
            }
            if self.threshold != nil {
                map["Threshold"] = self.threshold!
            }
            if self.times != nil {
                map["Times"] = self.times!
            }
            if self.webhook != nil {
                map["Webhook"] = self.webhook!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ComparisonOperator"] as? String {
                self.comparisonOperator = value
            }
            if let value = dict["EffectiveInterval"] as? String {
                self.effectiveInterval = value
            }
            if let value = dict["EscalationsLevel"] as? String {
                self.escalationsLevel = value
            }
            if let value = dict["NoEffectiveInterval"] as? String {
                self.noEffectiveInterval = value
            }
            if let value = dict["SilenceTime"] as? String {
                self.silenceTime = value
            }
            if let value = dict["Statistics"] as? String {
                self.statistics = value
            }
            if let value = dict["TargetList"] as? [Any?] {
                var tmp : [CreateGroupMonitoringAgentProcessRequest.AlertConfig.TargetList] = []
                for v in value {
                    if v != nil {
                        var model = CreateGroupMonitoringAgentProcessRequest.AlertConfig.TargetList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.targetList = tmp
            }
            if let value = dict["Threshold"] as? String {
                self.threshold = value
            }
            if let value = dict["Times"] as? String {
                self.times = value
            }
            if let value = dict["Webhook"] as? String {
                self.webhook = value
            }
        }
    }
    public class MatchExpress : Tea.TeaModel {
        public var function: String?

        public var name: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.function != nil {
                map["Function"] = self.function!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Function"] as? String {
                self.function = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var alertConfig: [CreateGroupMonitoringAgentProcessRequest.AlertConfig]?

    public var groupId: String?

    public var matchExpress: [CreateGroupMonitoringAgentProcessRequest.MatchExpress]?

    public var matchExpressFilterRelation: String?

    public var processName: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.alertConfig != nil {
            var tmp : [Any] = []
            for k in self.alertConfig! {
                tmp.append(k.toMap())
            }
            map["AlertConfig"] = tmp
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.matchExpress != nil {
            var tmp : [Any] = []
            for k in self.matchExpress! {
                tmp.append(k.toMap())
            }
            map["MatchExpress"] = tmp
        }
        if self.matchExpressFilterRelation != nil {
            map["MatchExpressFilterRelation"] = self.matchExpressFilterRelation!
        }
        if self.processName != nil {
            map["ProcessName"] = self.processName!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AlertConfig"] as? [Any?] {
            var tmp : [CreateGroupMonitoringAgentProcessRequest.AlertConfig] = []
            for v in value {
                if v != nil {
                    var model = CreateGroupMonitoringAgentProcessRequest.AlertConfig()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.alertConfig = tmp
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["MatchExpress"] as? [Any?] {
            var tmp : [CreateGroupMonitoringAgentProcessRequest.MatchExpress] = []
            for v in value {
                if v != nil {
                    var model = CreateGroupMonitoringAgentProcessRequest.MatchExpress()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.matchExpress = tmp
        }
        if let value = dict["MatchExpressFilterRelation"] as? String {
            self.matchExpressFilterRelation = value
        }
        if let value = dict["ProcessName"] as? String {
            self.processName = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class CreateGroupMonitoringAgentProcessResponseBody : Tea.TeaModel {
    public class Resource : Tea.TeaModel {
        public var groupProcessId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.groupProcessId != nil {
                map["GroupProcessId"] = self.groupProcessId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["GroupProcessId"] as? String {
                self.groupProcessId = value
            }
        }
    }
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var resource: CreateGroupMonitoringAgentProcessResponseBody.Resource?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.resource?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resource != nil {
            map["Resource"] = self.resource?.toMap()
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Resource"] as? [String: Any?] {
            var model = CreateGroupMonitoringAgentProcessResponseBody.Resource()
            model.fromMap(value)
            self.resource = model
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class CreateGroupMonitoringAgentProcessResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateGroupMonitoringAgentProcessResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateGroupMonitoringAgentProcessResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateHostAvailabilityRequest : Tea.TeaModel {
    public class AlertConfig : Tea.TeaModel {
        public var endTime: Int32?

        public var notifyType: Int32?

        public var silenceTime: Int32?

        public var startTime: Int32?

        public var webHook: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.endTime != nil {
                map["EndTime"] = self.endTime!
            }
            if self.notifyType != nil {
                map["NotifyType"] = self.notifyType!
            }
            if self.silenceTime != nil {
                map["SilenceTime"] = self.silenceTime!
            }
            if self.startTime != nil {
                map["StartTime"] = self.startTime!
            }
            if self.webHook != nil {
                map["WebHook"] = self.webHook!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["EndTime"] as? Int32 {
                self.endTime = value
            }
            if let value = dict["NotifyType"] as? Int32 {
                self.notifyType = value
            }
            if let value = dict["SilenceTime"] as? Int32 {
                self.silenceTime = value
            }
            if let value = dict["StartTime"] as? Int32 {
                self.startTime = value
            }
            if let value = dict["WebHook"] as? String {
                self.webHook = value
            }
        }
    }
    public class TaskOption : Tea.TeaModel {
        public var httpHeader: String?

        public var httpMethod: String?

        public var httpNegative: Bool?

        public var httpPostContent: String?

        public var httpResponseCharset: String?

        public var httpResponseMatchContent: String?

        public var httpURI: String?

        public var interval: Int32?

        public var telnetOrPingHost: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.httpHeader != nil {
                map["HttpHeader"] = self.httpHeader!
            }
            if self.httpMethod != nil {
                map["HttpMethod"] = self.httpMethod!
            }
            if self.httpNegative != nil {
                map["HttpNegative"] = self.httpNegative!
            }
            if self.httpPostContent != nil {
                map["HttpPostContent"] = self.httpPostContent!
            }
            if self.httpResponseCharset != nil {
                map["HttpResponseCharset"] = self.httpResponseCharset!
            }
            if self.httpResponseMatchContent != nil {
                map["HttpResponseMatchContent"] = self.httpResponseMatchContent!
            }
            if self.httpURI != nil {
                map["HttpURI"] = self.httpURI!
            }
            if self.interval != nil {
                map["Interval"] = self.interval!
            }
            if self.telnetOrPingHost != nil {
                map["TelnetOrPingHost"] = self.telnetOrPingHost!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["HttpHeader"] as? String {
                self.httpHeader = value
            }
            if let value = dict["HttpMethod"] as? String {
                self.httpMethod = value
            }
            if let value = dict["HttpNegative"] as? Bool {
                self.httpNegative = value
            }
            if let value = dict["HttpPostContent"] as? String {
                self.httpPostContent = value
            }
            if let value = dict["HttpResponseCharset"] as? String {
                self.httpResponseCharset = value
            }
            if let value = dict["HttpResponseMatchContent"] as? String {
                self.httpResponseMatchContent = value
            }
            if let value = dict["HttpURI"] as? String {
                self.httpURI = value
            }
            if let value = dict["Interval"] as? Int32 {
                self.interval = value
            }
            if let value = dict["TelnetOrPingHost"] as? String {
                self.telnetOrPingHost = value
            }
        }
    }
    public class AlertConfigEscalationList : Tea.TeaModel {
        public var aggregate: String?

        public var metricName: String?

        public var operator_: String?

        public var times: Int32?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.aggregate != nil {
                map["Aggregate"] = self.aggregate!
            }
            if self.metricName != nil {
                map["MetricName"] = self.metricName!
            }
            if self.operator_ != nil {
                map["Operator"] = self.operator_!
            }
            if self.times != nil {
                map["Times"] = self.times!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Aggregate"] as? String {
                self.aggregate = value
            }
            if let value = dict["MetricName"] as? String {
                self.metricName = value
            }
            if let value = dict["Operator"] as? String {
                self.operator_ = value
            }
            if let value = dict["Times"] as? Int32 {
                self.times = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public class AlertConfigTargetList : Tea.TeaModel {
        public var arn: String?

        public var id: String?

        public var jsonParams: String?

        public var level: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.arn != nil {
                map["Arn"] = self.arn!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.jsonParams != nil {
                map["JsonParams"] = self.jsonParams!
            }
            if self.level != nil {
                map["Level"] = self.level!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Arn"] as? String {
                self.arn = value
            }
            if let value = dict["Id"] as? String {
                self.id = value
            }
            if let value = dict["JsonParams"] as? String {
                self.jsonParams = value
            }
            if let value = dict["Level"] as? String {
                self.level = value
            }
        }
    }
    public var alertConfig: CreateHostAvailabilityRequest.AlertConfig?

    public var taskOption: CreateHostAvailabilityRequest.TaskOption?

    public var alertConfigEscalationList: [CreateHostAvailabilityRequest.AlertConfigEscalationList]?

    public var alertConfigTargetList: [CreateHostAvailabilityRequest.AlertConfigTargetList]?

    public var groupId: Int64?

    public var instanceList: [String]?

    public var regionId: String?

    public var taskName: String?

    public var taskScope: String?

    public var taskType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.alertConfig?.validate()
        try self.taskOption?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.alertConfig != nil {
            map["AlertConfig"] = self.alertConfig?.toMap()
        }
        if self.taskOption != nil {
            map["TaskOption"] = self.taskOption?.toMap()
        }
        if self.alertConfigEscalationList != nil {
            var tmp : [Any] = []
            for k in self.alertConfigEscalationList! {
                tmp.append(k.toMap())
            }
            map["AlertConfigEscalationList"] = tmp
        }
        if self.alertConfigTargetList != nil {
            var tmp : [Any] = []
            for k in self.alertConfigTargetList! {
                tmp.append(k.toMap())
            }
            map["AlertConfigTargetList"] = tmp
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.instanceList != nil {
            map["InstanceList"] = self.instanceList!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.taskName != nil {
            map["TaskName"] = self.taskName!
        }
        if self.taskScope != nil {
            map["TaskScope"] = self.taskScope!
        }
        if self.taskType != nil {
            map["TaskType"] = self.taskType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AlertConfig"] as? [String: Any?] {
            var model = CreateHostAvailabilityRequest.AlertConfig()
            model.fromMap(value)
            self.alertConfig = model
        }
        if let value = dict["TaskOption"] as? [String: Any?] {
            var model = CreateHostAvailabilityRequest.TaskOption()
            model.fromMap(value)
            self.taskOption = model
        }
        if let value = dict["AlertConfigEscalationList"] as? [Any?] {
            var tmp : [CreateHostAvailabilityRequest.AlertConfigEscalationList] = []
            for v in value {
                if v != nil {
                    var model = CreateHostAvailabilityRequest.AlertConfigEscalationList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.alertConfigEscalationList = tmp
        }
        if let value = dict["AlertConfigTargetList"] as? [Any?] {
            var tmp : [CreateHostAvailabilityRequest.AlertConfigTargetList] = []
            for v in value {
                if v != nil {
                    var model = CreateHostAvailabilityRequest.AlertConfigTargetList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.alertConfigTargetList = tmp
        }
        if let value = dict["GroupId"] as? Int64 {
            self.groupId = value
        }
        if let value = dict["InstanceList"] as? [String] {
            self.instanceList = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["TaskName"] as? String {
            self.taskName = value
        }
        if let value = dict["TaskScope"] as? String {
            self.taskScope = value
        }
        if let value = dict["TaskType"] as? String {
            self.taskType = value
        }
    }
}

public class CreateHostAvailabilityResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public var taskId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
        if let value = dict["TaskId"] as? Int64 {
            self.taskId = value
        }
    }
}

public class CreateHostAvailabilityResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateHostAvailabilityResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateHostAvailabilityResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateHybridMonitorNamespaceRequest : Tea.TeaModel {
    public var description_: String?

    public var namespace: String?

    public var namespaceRegion: String?

    public var namespaceType: String?

    public var regionId: String?

    public var spec: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.namespace != nil {
            map["Namespace"] = self.namespace!
        }
        if self.namespaceRegion != nil {
            map["NamespaceRegion"] = self.namespaceRegion!
        }
        if self.namespaceType != nil {
            map["NamespaceType"] = self.namespaceType!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.spec != nil {
            map["Spec"] = self.spec!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["Namespace"] as? String {
            self.namespace = value
        }
        if let value = dict["NamespaceRegion"] as? String {
            self.namespaceRegion = value
        }
        if let value = dict["NamespaceType"] as? String {
            self.namespaceType = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Spec"] as? String {
            self.spec = value
        }
    }
}

public class CreateHybridMonitorNamespaceResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? String {
            self.success = value
        }
    }
}

public class CreateHybridMonitorNamespaceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateHybridMonitorNamespaceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateHybridMonitorNamespaceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateHybridMonitorSLSGroupRequest : Tea.TeaModel {
    public class SLSGroupConfig : Tea.TeaModel {
        public var SLSLogstore: String?

        public var SLSProject: String?

        public var SLSRegion: String?

        public var SLSUserId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.SLSLogstore != nil {
                map["SLSLogstore"] = self.SLSLogstore!
            }
            if self.SLSProject != nil {
                map["SLSProject"] = self.SLSProject!
            }
            if self.SLSRegion != nil {
                map["SLSRegion"] = self.SLSRegion!
            }
            if self.SLSUserId != nil {
                map["SLSUserId"] = self.SLSUserId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["SLSLogstore"] as? String {
                self.SLSLogstore = value
            }
            if let value = dict["SLSProject"] as? String {
                self.SLSProject = value
            }
            if let value = dict["SLSRegion"] as? String {
                self.SLSRegion = value
            }
            if let value = dict["SLSUserId"] as? String {
                self.SLSUserId = value
            }
        }
    }
    public var regionId: String?

    public var SLSGroupConfig: [CreateHybridMonitorSLSGroupRequest.SLSGroupConfig]?

    public var SLSGroupDescription: String?

    public var SLSGroupName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.SLSGroupConfig != nil {
            var tmp : [Any] = []
            for k in self.SLSGroupConfig! {
                tmp.append(k.toMap())
            }
            map["SLSGroupConfig"] = tmp
        }
        if self.SLSGroupDescription != nil {
            map["SLSGroupDescription"] = self.SLSGroupDescription!
        }
        if self.SLSGroupName != nil {
            map["SLSGroupName"] = self.SLSGroupName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["SLSGroupConfig"] as? [Any?] {
            var tmp : [CreateHybridMonitorSLSGroupRequest.SLSGroupConfig] = []
            for v in value {
                if v != nil {
                    var model = CreateHybridMonitorSLSGroupRequest.SLSGroupConfig()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.SLSGroupConfig = tmp
        }
        if let value = dict["SLSGroupDescription"] as? String {
            self.SLSGroupDescription = value
        }
        if let value = dict["SLSGroupName"] as? String {
            self.SLSGroupName = value
        }
    }
}

public class CreateHybridMonitorSLSGroupResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? String {
            self.success = value
        }
    }
}

public class CreateHybridMonitorSLSGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateHybridMonitorSLSGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateHybridMonitorSLSGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateHybridMonitorTaskRequest : Tea.TeaModel {
    public class AttachLabels : Tea.TeaModel {
        public var name: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public class SLSProcessConfig : Tea.TeaModel {
        public class Express : Tea.TeaModel {
            public var alias: String?

            public var express: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.alias != nil {
                    map["Alias"] = self.alias!
                }
                if self.express != nil {
                    map["Express"] = self.express!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Alias"] as? String {
                    self.alias = value
                }
                if let value = dict["Express"] as? String {
                    self.express = value
                }
            }
        }
        public class Filter : Tea.TeaModel {
            public class Filters : Tea.TeaModel {
                public var operator_: String?

                public var SLSKeyName: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.operator_ != nil {
                        map["Operator"] = self.operator_!
                    }
                    if self.SLSKeyName != nil {
                        map["SLSKeyName"] = self.SLSKeyName!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Operator"] as? String {
                        self.operator_ = value
                    }
                    if let value = dict["SLSKeyName"] as? String {
                        self.SLSKeyName = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public var filters: [CreateHybridMonitorTaskRequest.SLSProcessConfig.Filter.Filters]?

            public var relation: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.filters != nil {
                    var tmp : [Any] = []
                    for k in self.filters! {
                        tmp.append(k.toMap())
                    }
                    map["Filters"] = tmp
                }
                if self.relation != nil {
                    map["Relation"] = self.relation!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Filters"] as? [Any?] {
                    var tmp : [CreateHybridMonitorTaskRequest.SLSProcessConfig.Filter.Filters] = []
                    for v in value {
                        if v != nil {
                            var model = CreateHybridMonitorTaskRequest.SLSProcessConfig.Filter.Filters()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.filters = tmp
                }
                if let value = dict["Relation"] as? String {
                    self.relation = value
                }
            }
        }
        public class GroupBy : Tea.TeaModel {
            public var alias: String?

            public var SLSKeyName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.alias != nil {
                    map["Alias"] = self.alias!
                }
                if self.SLSKeyName != nil {
                    map["SLSKeyName"] = self.SLSKeyName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Alias"] as? String {
                    self.alias = value
                }
                if let value = dict["SLSKeyName"] as? String {
                    self.SLSKeyName = value
                }
            }
        }
        public class Statistics : Tea.TeaModel {
            public var alias: String?

            public var function: String?

            public var parameter1: String?

            public var parameter2: String?

            public var SLSKeyName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.alias != nil {
                    map["Alias"] = self.alias!
                }
                if self.function != nil {
                    map["Function"] = self.function!
                }
                if self.parameter1 != nil {
                    map["Parameter1"] = self.parameter1!
                }
                if self.parameter2 != nil {
                    map["Parameter2"] = self.parameter2!
                }
                if self.SLSKeyName != nil {
                    map["SLSKeyName"] = self.SLSKeyName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Alias"] as? String {
                    self.alias = value
                }
                if let value = dict["Function"] as? String {
                    self.function = value
                }
                if let value = dict["Parameter1"] as? String {
                    self.parameter1 = value
                }
                if let value = dict["Parameter2"] as? String {
                    self.parameter2 = value
                }
                if let value = dict["SLSKeyName"] as? String {
                    self.SLSKeyName = value
                }
            }
        }
        public var express: [CreateHybridMonitorTaskRequest.SLSProcessConfig.Express]?

        public var filter: CreateHybridMonitorTaskRequest.SLSProcessConfig.Filter?

        public var groupBy: [CreateHybridMonitorTaskRequest.SLSProcessConfig.GroupBy]?

        public var statistics: [CreateHybridMonitorTaskRequest.SLSProcessConfig.Statistics]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.filter?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.express != nil {
                var tmp : [Any] = []
                for k in self.express! {
                    tmp.append(k.toMap())
                }
                map["Express"] = tmp
            }
            if self.filter != nil {
                map["Filter"] = self.filter?.toMap()
            }
            if self.groupBy != nil {
                var tmp : [Any] = []
                for k in self.groupBy! {
                    tmp.append(k.toMap())
                }
                map["GroupBy"] = tmp
            }
            if self.statistics != nil {
                var tmp : [Any] = []
                for k in self.statistics! {
                    tmp.append(k.toMap())
                }
                map["Statistics"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Express"] as? [Any?] {
                var tmp : [CreateHybridMonitorTaskRequest.SLSProcessConfig.Express] = []
                for v in value {
                    if v != nil {
                        var model = CreateHybridMonitorTaskRequest.SLSProcessConfig.Express()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.express = tmp
            }
            if let value = dict["Filter"] as? [String: Any?] {
                var model = CreateHybridMonitorTaskRequest.SLSProcessConfig.Filter()
                model.fromMap(value)
                self.filter = model
            }
            if let value = dict["GroupBy"] as? [Any?] {
                var tmp : [CreateHybridMonitorTaskRequest.SLSProcessConfig.GroupBy] = []
                for v in value {
                    if v != nil {
                        var model = CreateHybridMonitorTaskRequest.SLSProcessConfig.GroupBy()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.groupBy = tmp
            }
            if let value = dict["Statistics"] as? [Any?] {
                var tmp : [CreateHybridMonitorTaskRequest.SLSProcessConfig.Statistics] = []
                for v in value {
                    if v != nil {
                        var model = CreateHybridMonitorTaskRequest.SLSProcessConfig.Statistics()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.statistics = tmp
            }
        }
    }
    public var attachLabels: [CreateHybridMonitorTaskRequest.AttachLabels]?

    public var cloudAccessId: [String]?

    public var collectInterval: String?

    public var collectTargetType: String?

    public var description_: String?

    public var groupId: String?

    public var namespace: String?

    public var regionId: String?

    public var SLSProcessConfig: CreateHybridMonitorTaskRequest.SLSProcessConfig?

    public var targetUserId: String?

    public var targetUserIdList: String?

    public var taskName: String?

    public var taskType: String?

    public var YARMConfig: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.SLSProcessConfig?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.attachLabels != nil {
            var tmp : [Any] = []
            for k in self.attachLabels! {
                tmp.append(k.toMap())
            }
            map["AttachLabels"] = tmp
        }
        if self.cloudAccessId != nil {
            map["CloudAccessId"] = self.cloudAccessId!
        }
        if self.collectInterval != nil {
            map["CollectInterval"] = self.collectInterval!
        }
        if self.collectTargetType != nil {
            map["CollectTargetType"] = self.collectTargetType!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.namespace != nil {
            map["Namespace"] = self.namespace!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.SLSProcessConfig != nil {
            map["SLSProcessConfig"] = self.SLSProcessConfig?.toMap()
        }
        if self.targetUserId != nil {
            map["TargetUserId"] = self.targetUserId!
        }
        if self.targetUserIdList != nil {
            map["TargetUserIdList"] = self.targetUserIdList!
        }
        if self.taskName != nil {
            map["TaskName"] = self.taskName!
        }
        if self.taskType != nil {
            map["TaskType"] = self.taskType!
        }
        if self.YARMConfig != nil {
            map["YARMConfig"] = self.YARMConfig!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AttachLabels"] as? [Any?] {
            var tmp : [CreateHybridMonitorTaskRequest.AttachLabels] = []
            for v in value {
                if v != nil {
                    var model = CreateHybridMonitorTaskRequest.AttachLabels()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.attachLabels = tmp
        }
        if let value = dict["CloudAccessId"] as? [String] {
            self.cloudAccessId = value
        }
        if let value = dict["CollectInterval"] as? String {
            self.collectInterval = value
        }
        if let value = dict["CollectTargetType"] as? String {
            self.collectTargetType = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["Namespace"] as? String {
            self.namespace = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["SLSProcessConfig"] as? [String: Any?] {
            var model = CreateHybridMonitorTaskRequest.SLSProcessConfig()
            model.fromMap(value)
            self.SLSProcessConfig = model
        }
        if let value = dict["TargetUserId"] as? String {
            self.targetUserId = value
        }
        if let value = dict["TargetUserIdList"] as? String {
            self.targetUserIdList = value
        }
        if let value = dict["TaskName"] as? String {
            self.taskName = value
        }
        if let value = dict["TaskType"] as? String {
            self.taskType = value
        }
        if let value = dict["YARMConfig"] as? String {
            self.YARMConfig = value
        }
    }
}

public class CreateHybridMonitorTaskResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: String?

    public var taskId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? String {
            self.success = value
        }
        if let value = dict["TaskId"] as? Int64 {
            self.taskId = value
        }
    }
}

public class CreateHybridMonitorTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateHybridMonitorTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateHybridMonitorTaskResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateInstantSiteMonitorRequest : Tea.TeaModel {
    public var address: String?

    public var ispCities: String?

    public var optionsJson: String?

    public var randomIspCity: Int32?

    public var regionId: String?

    public var taskName: String?

    public var taskType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.address != nil {
            map["Address"] = self.address!
        }
        if self.ispCities != nil {
            map["IspCities"] = self.ispCities!
        }
        if self.optionsJson != nil {
            map["OptionsJson"] = self.optionsJson!
        }
        if self.randomIspCity != nil {
            map["RandomIspCity"] = self.randomIspCity!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.taskName != nil {
            map["TaskName"] = self.taskName!
        }
        if self.taskType != nil {
            map["TaskType"] = self.taskType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Address"] as? String {
            self.address = value
        }
        if let value = dict["IspCities"] as? String {
            self.ispCities = value
        }
        if let value = dict["OptionsJson"] as? String {
            self.optionsJson = value
        }
        if let value = dict["RandomIspCity"] as? Int32 {
            self.randomIspCity = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["TaskName"] as? String {
            self.taskName = value
        }
        if let value = dict["TaskType"] as? String {
            self.taskType = value
        }
    }
}

public class CreateInstantSiteMonitorResponseBody : Tea.TeaModel {
    public class CreateResultList : Tea.TeaModel {
        public var taskId: String?

        public var taskName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            if self.taskName != nil {
                map["TaskName"] = self.taskName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["TaskId"] as? String {
                self.taskId = value
            }
            if let value = dict["TaskName"] as? String {
                self.taskName = value
            }
        }
    }
    public var code: String?

    public var createResultList: [CreateInstantSiteMonitorResponseBody.CreateResultList]?

    public var message: String?

    public var requestId: String?

    public var success: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.createResultList != nil {
            var tmp : [Any] = []
            for k in self.createResultList! {
                tmp.append(k.toMap())
            }
            map["CreateResultList"] = tmp
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["CreateResultList"] as? [Any?] {
            var tmp : [CreateInstantSiteMonitorResponseBody.CreateResultList] = []
            for v in value {
                if v != nil {
                    var model = CreateInstantSiteMonitorResponseBody.CreateResultList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.createResultList = tmp
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? String {
            self.success = value
        }
    }
}

public class CreateInstantSiteMonitorResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateInstantSiteMonitorResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateInstantSiteMonitorResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateMetricRuleBlackListRequest : Tea.TeaModel {
    public class Metrics : Tea.TeaModel {
        public var metricName: String?

        public var resource: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.metricName != nil {
                map["MetricName"] = self.metricName!
            }
            if self.resource != nil {
                map["Resource"] = self.resource!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["MetricName"] as? String {
                self.metricName = value
            }
            if let value = dict["Resource"] as? String {
                self.resource = value
            }
        }
    }
    public var category: String?

    public var effectiveTime: String?

    public var enableEndTime: String?

    public var enableStartTime: String?

    public var instances: [String]?

    public var metrics: [CreateMetricRuleBlackListRequest.Metrics]?

    public var name: String?

    public var namespace: String?

    public var regionId: String?

    public var scopeType: String?

    public var scopeValue: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.category != nil {
            map["Category"] = self.category!
        }
        if self.effectiveTime != nil {
            map["EffectiveTime"] = self.effectiveTime!
        }
        if self.enableEndTime != nil {
            map["EnableEndTime"] = self.enableEndTime!
        }
        if self.enableStartTime != nil {
            map["EnableStartTime"] = self.enableStartTime!
        }
        if self.instances != nil {
            map["Instances"] = self.instances!
        }
        if self.metrics != nil {
            var tmp : [Any] = []
            for k in self.metrics! {
                tmp.append(k.toMap())
            }
            map["Metrics"] = tmp
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.namespace != nil {
            map["Namespace"] = self.namespace!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.scopeType != nil {
            map["ScopeType"] = self.scopeType!
        }
        if self.scopeValue != nil {
            map["ScopeValue"] = self.scopeValue!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Category"] as? String {
            self.category = value
        }
        if let value = dict["EffectiveTime"] as? String {
            self.effectiveTime = value
        }
        if let value = dict["EnableEndTime"] as? String {
            self.enableEndTime = value
        }
        if let value = dict["EnableStartTime"] as? String {
            self.enableStartTime = value
        }
        if let value = dict["Instances"] as? [String] {
            self.instances = value
        }
        if let value = dict["Metrics"] as? [Any?] {
            var tmp : [CreateMetricRuleBlackListRequest.Metrics] = []
            for v in value {
                if v != nil {
                    var model = CreateMetricRuleBlackListRequest.Metrics()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.metrics = tmp
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["Namespace"] as? String {
            self.namespace = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ScopeType"] as? String {
            self.scopeType = value
        }
        if let value = dict["ScopeValue"] as? String {
            self.scopeValue = value
        }
    }
}

public class CreateMetricRuleBlackListResponseBody : Tea.TeaModel {
    public var code: String?

    public var id: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Id"] as? String {
            self.id = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class CreateMetricRuleBlackListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateMetricRuleBlackListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateMetricRuleBlackListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateMetricRuleResourcesRequest : Tea.TeaModel {
    public var overwrite: String?

    public var resources: String?

    public var ruleId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.overwrite != nil {
            map["Overwrite"] = self.overwrite!
        }
        if self.resources != nil {
            map["Resources"] = self.resources!
        }
        if self.ruleId != nil {
            map["RuleId"] = self.ruleId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Overwrite"] as? String {
            self.overwrite = value
        }
        if let value = dict["Resources"] as? String {
            self.resources = value
        }
        if let value = dict["RuleId"] as? String {
            self.ruleId = value
        }
    }
}

public class CreateMetricRuleResourcesResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class CreateMetricRuleResourcesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateMetricRuleResourcesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateMetricRuleResourcesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateMetricRuleTemplateRequest : Tea.TeaModel {
    public class AlertTemplates : Tea.TeaModel {
        public class Escalations : Tea.TeaModel {
            public class Critical : Tea.TeaModel {
                public var comparisonOperator: String?

                public var n: Int32?

                public var statistics: String?

                public var threshold: String?

                public var times: Int32?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.comparisonOperator != nil {
                        map["ComparisonOperator"] = self.comparisonOperator!
                    }
                    if self.n != nil {
                        map["N"] = self.n!
                    }
                    if self.statistics != nil {
                        map["Statistics"] = self.statistics!
                    }
                    if self.threshold != nil {
                        map["Threshold"] = self.threshold!
                    }
                    if self.times != nil {
                        map["Times"] = self.times!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["ComparisonOperator"] as? String {
                        self.comparisonOperator = value
                    }
                    if let value = dict["N"] as? Int32 {
                        self.n = value
                    }
                    if let value = dict["Statistics"] as? String {
                        self.statistics = value
                    }
                    if let value = dict["Threshold"] as? String {
                        self.threshold = value
                    }
                    if let value = dict["Times"] as? Int32 {
                        self.times = value
                    }
                }
            }
            public class Info : Tea.TeaModel {
                public var comparisonOperator: String?

                public var n: Int32?

                public var statistics: String?

                public var threshold: String?

                public var times: Int32?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.comparisonOperator != nil {
                        map["ComparisonOperator"] = self.comparisonOperator!
                    }
                    if self.n != nil {
                        map["N"] = self.n!
                    }
                    if self.statistics != nil {
                        map["Statistics"] = self.statistics!
                    }
                    if self.threshold != nil {
                        map["Threshold"] = self.threshold!
                    }
                    if self.times != nil {
                        map["Times"] = self.times!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["ComparisonOperator"] as? String {
                        self.comparisonOperator = value
                    }
                    if let value = dict["N"] as? Int32 {
                        self.n = value
                    }
                    if let value = dict["Statistics"] as? String {
                        self.statistics = value
                    }
                    if let value = dict["Threshold"] as? String {
                        self.threshold = value
                    }
                    if let value = dict["Times"] as? Int32 {
                        self.times = value
                    }
                }
            }
            public class Warn : Tea.TeaModel {
                public var comparisonOperator: String?

                public var n: Int32?

                public var statistics: String?

                public var threshold: String?

                public var times: Int32?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.comparisonOperator != nil {
                        map["ComparisonOperator"] = self.comparisonOperator!
                    }
                    if self.n != nil {
                        map["N"] = self.n!
                    }
                    if self.statistics != nil {
                        map["Statistics"] = self.statistics!
                    }
                    if self.threshold != nil {
                        map["Threshold"] = self.threshold!
                    }
                    if self.times != nil {
                        map["Times"] = self.times!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["ComparisonOperator"] as? String {
                        self.comparisonOperator = value
                    }
                    if let value = dict["N"] as? Int32 {
                        self.n = value
                    }
                    if let value = dict["Statistics"] as? String {
                        self.statistics = value
                    }
                    if let value = dict["Threshold"] as? String {
                        self.threshold = value
                    }
                    if let value = dict["Times"] as? Int32 {
                        self.times = value
                    }
                }
            }
            public var critical: CreateMetricRuleTemplateRequest.AlertTemplates.Escalations.Critical?

            public var info: CreateMetricRuleTemplateRequest.AlertTemplates.Escalations.Info?

            public var warn: CreateMetricRuleTemplateRequest.AlertTemplates.Escalations.Warn?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.critical?.validate()
                try self.info?.validate()
                try self.warn?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.critical != nil {
                    map["Critical"] = self.critical?.toMap()
                }
                if self.info != nil {
                    map["Info"] = self.info?.toMap()
                }
                if self.warn != nil {
                    map["Warn"] = self.warn?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Critical"] as? [String: Any?] {
                    var model = CreateMetricRuleTemplateRequest.AlertTemplates.Escalations.Critical()
                    model.fromMap(value)
                    self.critical = model
                }
                if let value = dict["Info"] as? [String: Any?] {
                    var model = CreateMetricRuleTemplateRequest.AlertTemplates.Escalations.Info()
                    model.fromMap(value)
                    self.info = model
                }
                if let value = dict["Warn"] as? [String: Any?] {
                    var model = CreateMetricRuleTemplateRequest.AlertTemplates.Escalations.Warn()
                    model.fromMap(value)
                    self.warn = model
                }
            }
        }
        public var escalations: CreateMetricRuleTemplateRequest.AlertTemplates.Escalations?

        public var category: String?

        public var metricName: String?

        public var namespace: String?

        public var period: Int32?

        public var ruleName: String?

        public var selector: String?

        public var webhook: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.escalations?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.escalations != nil {
                map["Escalations"] = self.escalations?.toMap()
            }
            if self.category != nil {
                map["Category"] = self.category!
            }
            if self.metricName != nil {
                map["MetricName"] = self.metricName!
            }
            if self.namespace != nil {
                map["Namespace"] = self.namespace!
            }
            if self.period != nil {
                map["Period"] = self.period!
            }
            if self.ruleName != nil {
                map["RuleName"] = self.ruleName!
            }
            if self.selector != nil {
                map["Selector"] = self.selector!
            }
            if self.webhook != nil {
                map["Webhook"] = self.webhook!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Escalations"] as? [String: Any?] {
                var model = CreateMetricRuleTemplateRequest.AlertTemplates.Escalations()
                model.fromMap(value)
                self.escalations = model
            }
            if let value = dict["Category"] as? String {
                self.category = value
            }
            if let value = dict["MetricName"] as? String {
                self.metricName = value
            }
            if let value = dict["Namespace"] as? String {
                self.namespace = value
            }
            if let value = dict["Period"] as? Int32 {
                self.period = value
            }
            if let value = dict["RuleName"] as? String {
                self.ruleName = value
            }
            if let value = dict["Selector"] as? String {
                self.selector = value
            }
            if let value = dict["Webhook"] as? String {
                self.webhook = value
            }
        }
    }
    public var alertTemplates: [CreateMetricRuleTemplateRequest.AlertTemplates]?

    public var description_: String?

    public var name: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.alertTemplates != nil {
            var tmp : [Any] = []
            for k in self.alertTemplates! {
                tmp.append(k.toMap())
            }
            map["AlertTemplates"] = tmp
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AlertTemplates"] as? [Any?] {
            var tmp : [CreateMetricRuleTemplateRequest.AlertTemplates] = []
            for v in value {
                if v != nil {
                    var model = CreateMetricRuleTemplateRequest.AlertTemplates()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.alertTemplates = tmp
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class CreateMetricRuleTemplateResponseBody : Tea.TeaModel {
    public var code: Int32?

    public var id: Int64?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class CreateMetricRuleTemplateResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateMetricRuleTemplateResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateMetricRuleTemplateResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateMonitorAgentProcessRequest : Tea.TeaModel {
    public var instanceId: String?

    public var processName: String?

    public var processUser: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.processName != nil {
            map["ProcessName"] = self.processName!
        }
        if self.processUser != nil {
            map["ProcessUser"] = self.processUser!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["ProcessName"] as? String {
            self.processName = value
        }
        if let value = dict["ProcessUser"] as? String {
            self.processUser = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class CreateMonitorAgentProcessResponseBody : Tea.TeaModel {
    public var code: String?

    public var id: Int64?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class CreateMonitorAgentProcessResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateMonitorAgentProcessResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateMonitorAgentProcessResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateMonitorGroupRequest : Tea.TeaModel {
    public var contactGroups: String?

    public var groupName: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.contactGroups != nil {
            map["ContactGroups"] = self.contactGroups!
        }
        if self.groupName != nil {
            map["GroupName"] = self.groupName!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ContactGroups"] as? String {
            self.contactGroups = value
        }
        if let value = dict["GroupName"] as? String {
            self.groupName = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class CreateMonitorGroupResponseBody : Tea.TeaModel {
    public var code: Int32?

    public var groupId: Int64?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["GroupId"] as? Int64 {
            self.groupId = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class CreateMonitorGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateMonitorGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateMonitorGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateMonitorGroupByResourceGroupIdRequest : Tea.TeaModel {
    public var contactGroupList: [String]?

    public var enableInstallAgent: Bool?

    public var enableSubscribeEvent: Bool?

    public var regionId: String?

    public var resourceGroupId: String?

    public var resourceGroupName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.contactGroupList != nil {
            map["ContactGroupList"] = self.contactGroupList!
        }
        if self.enableInstallAgent != nil {
            map["EnableInstallAgent"] = self.enableInstallAgent!
        }
        if self.enableSubscribeEvent != nil {
            map["EnableSubscribeEvent"] = self.enableSubscribeEvent!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceGroupId != nil {
            map["ResourceGroupId"] = self.resourceGroupId!
        }
        if self.resourceGroupName != nil {
            map["ResourceGroupName"] = self.resourceGroupName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ContactGroupList"] as? [String] {
            self.contactGroupList = value
        }
        if let value = dict["EnableInstallAgent"] as? Bool {
            self.enableInstallAgent = value
        }
        if let value = dict["EnableSubscribeEvent"] as? Bool {
            self.enableSubscribeEvent = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceGroupId"] as? String {
            self.resourceGroupId = value
        }
        if let value = dict["ResourceGroupName"] as? String {
            self.resourceGroupName = value
        }
    }
}

public class CreateMonitorGroupByResourceGroupIdResponseBody : Tea.TeaModel {
    public var code: String?

    public var id: Int64?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class CreateMonitorGroupByResourceGroupIdResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateMonitorGroupByResourceGroupIdResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateMonitorGroupByResourceGroupIdResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateMonitorGroupInstancesRequest : Tea.TeaModel {
    public class Instances : Tea.TeaModel {
        public var category: String?

        public var instanceId: String?

        public var instanceName: String?

        public var regionId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.category != nil {
                map["Category"] = self.category!
            }
            if self.instanceId != nil {
                map["InstanceId"] = self.instanceId!
            }
            if self.instanceName != nil {
                map["InstanceName"] = self.instanceName!
            }
            if self.regionId != nil {
                map["RegionId"] = self.regionId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Category"] as? String {
                self.category = value
            }
            if let value = dict["InstanceId"] as? String {
                self.instanceId = value
            }
            if let value = dict["InstanceName"] as? String {
                self.instanceName = value
            }
            if let value = dict["RegionId"] as? String {
                self.regionId = value
            }
        }
    }
    public var groupId: String?

    public var instances: [CreateMonitorGroupInstancesRequest.Instances]?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.instances != nil {
            var tmp : [Any] = []
            for k in self.instances! {
                tmp.append(k.toMap())
            }
            map["Instances"] = tmp
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["Instances"] as? [Any?] {
            var tmp : [CreateMonitorGroupInstancesRequest.Instances] = []
            for v in value {
                if v != nil {
                    var model = CreateMonitorGroupInstancesRequest.Instances()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.instances = tmp
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class CreateMonitorGroupInstancesResponseBody : Tea.TeaModel {
    public var code: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class CreateMonitorGroupInstancesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateMonitorGroupInstancesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateMonitorGroupInstancesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateMonitorGroupNotifyPolicyRequest : Tea.TeaModel {
    public var endTime: Int64?

    public var groupId: String?

    public var policyType: String?

    public var regionId: String?

    public var startTime: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.policyType != nil {
            map["PolicyType"] = self.policyType!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["PolicyType"] as? String {
            self.policyType = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
    }
}

public class CreateMonitorGroupNotifyPolicyResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var result: Int32?

    public var success: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.result != nil {
            map["Result"] = self.result!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Result"] as? Int32 {
            self.result = value
        }
        if let value = dict["Success"] as? String {
            self.success = value
        }
    }
}

public class CreateMonitorGroupNotifyPolicyResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateMonitorGroupNotifyPolicyResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateMonitorGroupNotifyPolicyResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateMonitoringAgentProcessRequest : Tea.TeaModel {
    public var instanceId: String?

    public var processName: String?

    public var processUser: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.processName != nil {
            map["ProcessName"] = self.processName!
        }
        if self.processUser != nil {
            map["ProcessUser"] = self.processUser!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["ProcessName"] as? String {
            self.processName = value
        }
        if let value = dict["ProcessUser"] as? String {
            self.processUser = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class CreateMonitoringAgentProcessResponseBody : Tea.TeaModel {
    public var code: String?

    public var id: Int64?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class CreateMonitoringAgentProcessResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateMonitoringAgentProcessResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateMonitoringAgentProcessResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateSiteMonitorRequest : Tea.TeaModel {
    public var address: String?

    public var alertIds: String?

    public var customSchedule: String?

    public var interval: String?

    public var ispCities: String?

    public var optionsJson: String?

    public var regionId: String?

    public var taskName: String?

    public var taskType: String?

    public var vpcConfig: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.address != nil {
            map["Address"] = self.address!
        }
        if self.alertIds != nil {
            map["AlertIds"] = self.alertIds!
        }
        if self.customSchedule != nil {
            map["CustomSchedule"] = self.customSchedule!
        }
        if self.interval != nil {
            map["Interval"] = self.interval!
        }
        if self.ispCities != nil {
            map["IspCities"] = self.ispCities!
        }
        if self.optionsJson != nil {
            map["OptionsJson"] = self.optionsJson!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.taskName != nil {
            map["TaskName"] = self.taskName!
        }
        if self.taskType != nil {
            map["TaskType"] = self.taskType!
        }
        if self.vpcConfig != nil {
            map["VpcConfig"] = self.vpcConfig!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Address"] as? String {
            self.address = value
        }
        if let value = dict["AlertIds"] as? String {
            self.alertIds = value
        }
        if let value = dict["CustomSchedule"] as? String {
            self.customSchedule = value
        }
        if let value = dict["Interval"] as? String {
            self.interval = value
        }
        if let value = dict["IspCities"] as? String {
            self.ispCities = value
        }
        if let value = dict["OptionsJson"] as? String {
            self.optionsJson = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["TaskName"] as? String {
            self.taskName = value
        }
        if let value = dict["TaskType"] as? String {
            self.taskType = value
        }
        if let value = dict["VpcConfig"] as? String {
            self.vpcConfig = value
        }
    }
}

public class CreateSiteMonitorResponseBody : Tea.TeaModel {
    public class CreateResultList : Tea.TeaModel {
        public class CreateResultList : Tea.TeaModel {
            public var taskId: String?

            public var taskName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.taskId != nil {
                    map["TaskId"] = self.taskId!
                }
                if self.taskName != nil {
                    map["TaskName"] = self.taskName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["TaskId"] as? String {
                    self.taskId = value
                }
                if let value = dict["TaskName"] as? String {
                    self.taskName = value
                }
            }
        }
        public var createResultList: [CreateSiteMonitorResponseBody.CreateResultList.CreateResultList]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.createResultList != nil {
                var tmp : [Any] = []
                for k in self.createResultList! {
                    tmp.append(k.toMap())
                }
                map["CreateResultList"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CreateResultList"] as? [Any?] {
                var tmp : [CreateSiteMonitorResponseBody.CreateResultList.CreateResultList] = []
                for v in value {
                    if v != nil {
                        var model = CreateSiteMonitorResponseBody.CreateResultList.CreateResultList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.createResultList = tmp
            }
        }
    }
    public class Data : Tea.TeaModel {
        public class AttachAlertResult : Tea.TeaModel {
            public class Contact : Tea.TeaModel {
                public var code: String?

                public var message: String?

                public var requestId: String?

                public var ruleId: String?

                public var success: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.code != nil {
                        map["Code"] = self.code!
                    }
                    if self.message != nil {
                        map["Message"] = self.message!
                    }
                    if self.requestId != nil {
                        map["RequestId"] = self.requestId!
                    }
                    if self.ruleId != nil {
                        map["RuleId"] = self.ruleId!
                    }
                    if self.success != nil {
                        map["Success"] = self.success!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Code"] as? String {
                        self.code = value
                    }
                    if let value = dict["Message"] as? String {
                        self.message = value
                    }
                    if let value = dict["RequestId"] as? String {
                        self.requestId = value
                    }
                    if let value = dict["RuleId"] as? String {
                        self.ruleId = value
                    }
                    if let value = dict["Success"] as? String {
                        self.success = value
                    }
                }
            }
            public var contact: [CreateSiteMonitorResponseBody.Data.AttachAlertResult.Contact]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.contact != nil {
                    var tmp : [Any] = []
                    for k in self.contact! {
                        tmp.append(k.toMap())
                    }
                    map["Contact"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Contact"] as? [Any?] {
                    var tmp : [CreateSiteMonitorResponseBody.Data.AttachAlertResult.Contact] = []
                    for v in value {
                        if v != nil {
                            var model = CreateSiteMonitorResponseBody.Data.AttachAlertResult.Contact()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.contact = tmp
                }
            }
        }
        public var attachAlertResult: CreateSiteMonitorResponseBody.Data.AttachAlertResult?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.attachAlertResult?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.attachAlertResult != nil {
                map["AttachAlertResult"] = self.attachAlertResult?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AttachAlertResult"] as? [String: Any?] {
                var model = CreateSiteMonitorResponseBody.Data.AttachAlertResult()
                model.fromMap(value)
                self.attachAlertResult = model
            }
        }
    }
    public var code: String?

    public var createResultList: CreateSiteMonitorResponseBody.CreateResultList?

    public var data: CreateSiteMonitorResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.createResultList?.validate()
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.createResultList != nil {
            map["CreateResultList"] = self.createResultList?.toMap()
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["CreateResultList"] as? [String: Any?] {
            var model = CreateSiteMonitorResponseBody.CreateResultList()
            model.fromMap(value)
            self.createResultList = model
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = CreateSiteMonitorResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? String {
            self.success = value
        }
    }
}

public class CreateSiteMonitorResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateSiteMonitorResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateSiteMonitorResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CursorRequest : Tea.TeaModel {
    public var endTime: String?

    public var matchers: [Matcher]?

    public var metric: String?

    public var namespace: String?

    public var period: Int32?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.matchers != nil {
            var tmp : [Any] = []
            for k in self.matchers! {
                tmp.append(k.toMap())
            }
            map["Matchers"] = tmp
        }
        if self.metric != nil {
            map["Metric"] = self.metric!
        }
        if self.namespace != nil {
            map["Namespace"] = self.namespace!
        }
        if self.period != nil {
            map["Period"] = self.period!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["Matchers"] as? [Any?] {
            var tmp : [Matcher] = []
            for v in value {
                if v != nil {
                    var model = Matcher()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.matchers = tmp
        }
        if let value = dict["Metric"] as? String {
            self.metric = value
        }
        if let value = dict["Namespace"] as? String {
            self.namespace = value
        }
        if let value = dict["Period"] as? Int32 {
            self.period = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
    }
}

public class CursorShrinkRequest : Tea.TeaModel {
    public var endTime: String?

    public var matchersShrink: String?

    public var metric: String?

    public var namespace: String?

    public var period: Int32?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.matchersShrink != nil {
            map["Matchers"] = self.matchersShrink!
        }
        if self.metric != nil {
            map["Metric"] = self.metric!
        }
        if self.namespace != nil {
            map["Namespace"] = self.namespace!
        }
        if self.period != nil {
            map["Period"] = self.period!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["Matchers"] as? String {
            self.matchersShrink = value
        }
        if let value = dict["Metric"] as? String {
            self.metric = value
        }
        if let value = dict["Namespace"] as? String {
            self.namespace = value
        }
        if let value = dict["Period"] as? Int32 {
            self.period = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
    }
}

public class CursorResponseBody : Tea.TeaModel {
    public var code: Int32?

    public var cursor: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.cursor != nil {
            map["Cursor"] = self.cursor!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Cursor"] as? String {
            self.cursor = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class CursorResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CursorResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CursorResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteContactRequest : Tea.TeaModel {
    public var contactName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.contactName != nil {
            map["ContactName"] = self.contactName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ContactName"] as? String {
            self.contactName = value
        }
    }
}

public class DeleteContactResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DeleteContactResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteContactResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteContactResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteContactGroupRequest : Tea.TeaModel {
    public var contactGroupName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.contactGroupName != nil {
            map["ContactGroupName"] = self.contactGroupName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ContactGroupName"] as? String {
            self.contactGroupName = value
        }
    }
}

public class DeleteContactGroupResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DeleteContactGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteContactGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteContactGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteCustomMetricRequest : Tea.TeaModel {
    public var groupId: String?

    public var md5: String?

    public var metricName: String?

    public var regionId: String?

    public var UUID: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.md5 != nil {
            map["Md5"] = self.md5!
        }
        if self.metricName != nil {
            map["MetricName"] = self.metricName!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.UUID != nil {
            map["UUID"] = self.UUID!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["Md5"] as? String {
            self.md5 = value
        }
        if let value = dict["MetricName"] as? String {
            self.metricName = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["UUID"] as? String {
            self.UUID = value
        }
    }
}

public class DeleteCustomMetricResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteCustomMetricResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteCustomMetricResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteCustomMetricResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteDynamicTagGroupRequest : Tea.TeaModel {
    public var dynamicTagRuleId: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dynamicTagRuleId != nil {
            map["DynamicTagRuleId"] = self.dynamicTagRuleId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DynamicTagRuleId"] as? String {
            self.dynamicTagRuleId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DeleteDynamicTagGroupResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DeleteDynamicTagGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteDynamicTagGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteDynamicTagGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteEventRuleTargetsRequest : Tea.TeaModel {
    public var ids: [String]?

    public var regionId: String?

    public var ruleName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ids != nil {
            map["Ids"] = self.ids!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.ruleName != nil {
            map["RuleName"] = self.ruleName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Ids"] as? [String] {
            self.ids = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["RuleName"] as? String {
            self.ruleName = value
        }
    }
}

public class DeleteEventRuleTargetsResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DeleteEventRuleTargetsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteEventRuleTargetsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteEventRuleTargetsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteEventRulesRequest : Tea.TeaModel {
    public var ruleNames: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ruleNames != nil {
            map["RuleNames"] = self.ruleNames!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RuleNames"] as? [String] {
            self.ruleNames = value
        }
    }
}

public class DeleteEventRulesResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DeleteEventRulesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteEventRulesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteEventRulesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteExporterOutputRequest : Tea.TeaModel {
    public var destName: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.destName != nil {
            map["DestName"] = self.destName!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DestName"] as? String {
            self.destName = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DeleteExporterOutputResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DeleteExporterOutputResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteExporterOutputResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteExporterOutputResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteExporterRuleRequest : Tea.TeaModel {
    public var regionId: String?

    public var ruleName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.ruleName != nil {
            map["RuleName"] = self.ruleName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["RuleName"] as? String {
            self.ruleName = value
        }
    }
}

public class DeleteExporterRuleResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DeleteExporterRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteExporterRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteExporterRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteGroupMonitoringAgentProcessRequest : Tea.TeaModel {
    public var groupId: String?

    public var id: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["Id"] as? String {
            self.id = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DeleteGroupMonitoringAgentProcessResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DeleteGroupMonitoringAgentProcessResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteGroupMonitoringAgentProcessResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteGroupMonitoringAgentProcessResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteHostAvailabilityRequest : Tea.TeaModel {
    public var id: [Int64]?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? [Int64] {
            self.id = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DeleteHostAvailabilityResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DeleteHostAvailabilityResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteHostAvailabilityResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteHostAvailabilityResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteHybridMonitorNamespaceRequest : Tea.TeaModel {
    public var namespace: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.namespace != nil {
            map["Namespace"] = self.namespace!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Namespace"] as? String {
            self.namespace = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DeleteHybridMonitorNamespaceResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? String {
            self.success = value
        }
    }
}

public class DeleteHybridMonitorNamespaceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteHybridMonitorNamespaceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteHybridMonitorNamespaceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteHybridMonitorSLSGroupRequest : Tea.TeaModel {
    public var regionId: String?

    public var SLSGroupName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.SLSGroupName != nil {
            map["SLSGroupName"] = self.SLSGroupName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["SLSGroupName"] as? String {
            self.SLSGroupName = value
        }
    }
}

public class DeleteHybridMonitorSLSGroupResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? String {
            self.success = value
        }
    }
}

public class DeleteHybridMonitorSLSGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteHybridMonitorSLSGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteHybridMonitorSLSGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteHybridMonitorTaskRequest : Tea.TeaModel {
    public var namespace: String?

    public var regionId: String?

    public var targetUserId: String?

    public var taskId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.namespace != nil {
            map["Namespace"] = self.namespace!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.targetUserId != nil {
            map["TargetUserId"] = self.targetUserId!
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Namespace"] as? String {
            self.namespace = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["TargetUserId"] as? String {
            self.targetUserId = value
        }
        if let value = dict["TaskId"] as? String {
            self.taskId = value
        }
    }
}

public class DeleteHybridMonitorTaskResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? String {
            self.success = value
        }
    }
}

public class DeleteHybridMonitorTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteHybridMonitorTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteHybridMonitorTaskResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteLogMonitorRequest : Tea.TeaModel {
    public var logId: Int64?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.logId != nil {
            map["LogId"] = self.logId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["LogId"] as? Int64 {
            self.logId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DeleteLogMonitorResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DeleteLogMonitorResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteLogMonitorResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteLogMonitorResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteMetricRuleBlackListRequest : Tea.TeaModel {
    public var id: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? String {
            self.id = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DeleteMetricRuleBlackListResponseBody : Tea.TeaModel {
    public var code: String?

    public var count: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.count != nil {
            map["Count"] = self.count!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Count"] as? Int32 {
            self.count = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DeleteMetricRuleBlackListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteMetricRuleBlackListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteMetricRuleBlackListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteMetricRuleResourcesRequest : Tea.TeaModel {
    public var resources: String?

    public var ruleId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.resources != nil {
            map["Resources"] = self.resources!
        }
        if self.ruleId != nil {
            map["RuleId"] = self.ruleId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Resources"] as? String {
            self.resources = value
        }
        if let value = dict["RuleId"] as? String {
            self.ruleId = value
        }
    }
}

public class DeleteMetricRuleResourcesResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DeleteMetricRuleResourcesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteMetricRuleResourcesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteMetricRuleResourcesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteMetricRuleTargetsRequest : Tea.TeaModel {
    public var regionId: String?

    public var ruleId: String?

    public var targetIds: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.ruleId != nil {
            map["RuleId"] = self.ruleId!
        }
        if self.targetIds != nil {
            map["TargetIds"] = self.targetIds!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["RuleId"] as? String {
            self.ruleId = value
        }
        if let value = dict["TargetIds"] as? [String] {
            self.targetIds = value
        }
    }
}

public class DeleteMetricRuleTargetsResponseBody : Tea.TeaModel {
    public class FailIds : Tea.TeaModel {
        public class TargetIds : Tea.TeaModel {
            public var targetId: [String]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.targetId != nil {
                    map["TargetId"] = self.targetId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["TargetId"] as? [String] {
                    self.targetId = value
                }
            }
        }
        public var targetIds: DeleteMetricRuleTargetsResponseBody.FailIds.TargetIds?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.targetIds?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.targetIds != nil {
                map["TargetIds"] = self.targetIds?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["TargetIds"] as? [String: Any?] {
                var model = DeleteMetricRuleTargetsResponseBody.FailIds.TargetIds()
                model.fromMap(value)
                self.targetIds = model
            }
        }
    }
    public var code: String?

    public var failIds: DeleteMetricRuleTargetsResponseBody.FailIds?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.failIds?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.failIds != nil {
            map["FailIds"] = self.failIds?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["FailIds"] as? [String: Any?] {
            var model = DeleteMetricRuleTargetsResponseBody.FailIds()
            model.fromMap(value)
            self.failIds = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DeleteMetricRuleTargetsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteMetricRuleTargetsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteMetricRuleTargetsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteMetricRuleTemplateRequest : Tea.TeaModel {
    public var regionId: String?

    public var templateId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.templateId != nil {
            map["TemplateId"] = self.templateId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["TemplateId"] as? String {
            self.templateId = value
        }
    }
}

public class DeleteMetricRuleTemplateResponseBody : Tea.TeaModel {
    public class Resource : Tea.TeaModel {
        public var templateId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.templateId != nil {
                map["TemplateId"] = self.templateId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["TemplateId"] as? String {
                self.templateId = value
            }
        }
    }
    public var code: Int32?

    public var message: String?

    public var requestId: String?

    public var resource: DeleteMetricRuleTemplateResponseBody.Resource?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.resource?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resource != nil {
            map["Resource"] = self.resource?.toMap()
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Resource"] as? [String: Any?] {
            var model = DeleteMetricRuleTemplateResponseBody.Resource()
            model.fromMap(value)
            self.resource = model
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DeleteMetricRuleTemplateResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteMetricRuleTemplateResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteMetricRuleTemplateResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteMetricRulesRequest : Tea.TeaModel {
    public var id: [String]?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? [String] {
            self.id = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DeleteMetricRulesResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DeleteMetricRulesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteMetricRulesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteMetricRulesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteMonitorGroupRequest : Tea.TeaModel {
    public var groupId: Int64?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["GroupId"] as? Int64 {
            self.groupId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DeleteMonitorGroupResponseBody : Tea.TeaModel {
    public class Group : Tea.TeaModel {
        public class ContactGroups : Tea.TeaModel {
            public class ContactGroup : Tea.TeaModel {
                public var name: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.name != nil {
                        map["Name"] = self.name!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Name"] as? String {
                        self.name = value
                    }
                }
            }
            public var contactGroup: [DeleteMonitorGroupResponseBody.Group.ContactGroups.ContactGroup]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.contactGroup != nil {
                    var tmp : [Any] = []
                    for k in self.contactGroup! {
                        tmp.append(k.toMap())
                    }
                    map["ContactGroup"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ContactGroup"] as? [Any?] {
                    var tmp : [DeleteMonitorGroupResponseBody.Group.ContactGroups.ContactGroup] = []
                    for v in value {
                        if v != nil {
                            var model = DeleteMonitorGroupResponseBody.Group.ContactGroups.ContactGroup()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.contactGroup = tmp
                }
            }
        }
        public var contactGroups: DeleteMonitorGroupResponseBody.Group.ContactGroups?

        public var groupName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.contactGroups?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.contactGroups != nil {
                map["ContactGroups"] = self.contactGroups?.toMap()
            }
            if self.groupName != nil {
                map["GroupName"] = self.groupName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ContactGroups"] as? [String: Any?] {
                var model = DeleteMonitorGroupResponseBody.Group.ContactGroups()
                model.fromMap(value)
                self.contactGroups = model
            }
            if let value = dict["GroupName"] as? String {
                self.groupName = value
            }
        }
    }
    public var code: Int32?

    public var group: DeleteMonitorGroupResponseBody.Group?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.group?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.group != nil {
            map["Group"] = self.group?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Group"] as? [String: Any?] {
            var model = DeleteMonitorGroupResponseBody.Group()
            model.fromMap(value)
            self.group = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DeleteMonitorGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteMonitorGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteMonitorGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteMonitorGroupDynamicRuleRequest : Tea.TeaModel {
    public var category: String?

    public var groupId: Int64?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.category != nil {
            map["Category"] = self.category!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Category"] as? String {
            self.category = value
        }
        if let value = dict["GroupId"] as? Int64 {
            self.groupId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DeleteMonitorGroupDynamicRuleResponseBody : Tea.TeaModel {
    public var code: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DeleteMonitorGroupDynamicRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteMonitorGroupDynamicRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteMonitorGroupDynamicRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteMonitorGroupInstancesRequest : Tea.TeaModel {
    public var category: String?

    public var groupId: Int64?

    public var instanceIdList: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.category != nil {
            map["Category"] = self.category!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.instanceIdList != nil {
            map["InstanceIdList"] = self.instanceIdList!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Category"] as? String {
            self.category = value
        }
        if let value = dict["GroupId"] as? Int64 {
            self.groupId = value
        }
        if let value = dict["InstanceIdList"] as? String {
            self.instanceIdList = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DeleteMonitorGroupInstancesResponseBody : Tea.TeaModel {
    public var code: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DeleteMonitorGroupInstancesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteMonitorGroupInstancesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteMonitorGroupInstancesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteMonitorGroupNotifyPolicyRequest : Tea.TeaModel {
    public var groupId: String?

    public var policyType: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.policyType != nil {
            map["PolicyType"] = self.policyType!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["PolicyType"] as? String {
            self.policyType = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DeleteMonitorGroupNotifyPolicyResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var result: Int32?

    public var success: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.result != nil {
            map["Result"] = self.result!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Result"] as? Int32 {
            self.result = value
        }
        if let value = dict["Success"] as? String {
            self.success = value
        }
    }
}

public class DeleteMonitorGroupNotifyPolicyResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteMonitorGroupNotifyPolicyResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteMonitorGroupNotifyPolicyResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteMonitoringAgentProcessRequest : Tea.TeaModel {
    public var instanceId: String?

    public var processId: String?

    public var processName: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.processId != nil {
            map["ProcessId"] = self.processId!
        }
        if self.processName != nil {
            map["ProcessName"] = self.processName!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["ProcessId"] as? String {
            self.processId = value
        }
        if let value = dict["ProcessName"] as? String {
            self.processName = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DeleteMonitoringAgentProcessResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DeleteMonitoringAgentProcessResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteMonitoringAgentProcessResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteMonitoringAgentProcessResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteSiteMonitorsRequest : Tea.TeaModel {
    public var isDeleteAlarms: Bool?

    public var regionId: String?

    public var taskIds: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.isDeleteAlarms != nil {
            map["IsDeleteAlarms"] = self.isDeleteAlarms!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.taskIds != nil {
            map["TaskIds"] = self.taskIds!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["IsDeleteAlarms"] as? Bool {
            self.isDeleteAlarms = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["TaskIds"] as? String {
            self.taskIds = value
        }
    }
}

public class DeleteSiteMonitorsResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var count: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.count != nil {
                map["count"] = self.count!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["count"] as? Int32 {
                self.count = value
            }
        }
    }
    public var code: String?

    public var data: DeleteSiteMonitorsResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = DeleteSiteMonitorsResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? String {
            self.success = value
        }
    }
}

public class DeleteSiteMonitorsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteSiteMonitorsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteSiteMonitorsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeActiveMetricRuleListRequest : Tea.TeaModel {
    public var product: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.product != nil {
            map["Product"] = self.product!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Product"] as? String {
            self.product = value
        }
    }
}

public class DescribeActiveMetricRuleListResponseBody : Tea.TeaModel {
    public class AlertList : Tea.TeaModel {
        public class Alert : Tea.TeaModel {
            public class Escalations : Tea.TeaModel {
                public class Critical : Tea.TeaModel {
                    public var comparisonOperator: String?

                    public var statistics: String?

                    public var threshold: String?

                    public var times: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.comparisonOperator != nil {
                            map["ComparisonOperator"] = self.comparisonOperator!
                        }
                        if self.statistics != nil {
                            map["Statistics"] = self.statistics!
                        }
                        if self.threshold != nil {
                            map["Threshold"] = self.threshold!
                        }
                        if self.times != nil {
                            map["Times"] = self.times!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["ComparisonOperator"] as? String {
                            self.comparisonOperator = value
                        }
                        if let value = dict["Statistics"] as? String {
                            self.statistics = value
                        }
                        if let value = dict["Threshold"] as? String {
                            self.threshold = value
                        }
                        if let value = dict["Times"] as? String {
                            self.times = value
                        }
                    }
                }
                public class Info : Tea.TeaModel {
                    public var comparisonOperator: String?

                    public var statistics: String?

                    public var threshold: String?

                    public var times: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.comparisonOperator != nil {
                            map["ComparisonOperator"] = self.comparisonOperator!
                        }
                        if self.statistics != nil {
                            map["Statistics"] = self.statistics!
                        }
                        if self.threshold != nil {
                            map["Threshold"] = self.threshold!
                        }
                        if self.times != nil {
                            map["Times"] = self.times!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["ComparisonOperator"] as? String {
                            self.comparisonOperator = value
                        }
                        if let value = dict["Statistics"] as? String {
                            self.statistics = value
                        }
                        if let value = dict["Threshold"] as? String {
                            self.threshold = value
                        }
                        if let value = dict["Times"] as? String {
                            self.times = value
                        }
                    }
                }
                public class Warn : Tea.TeaModel {
                    public var comparisonOperator: String?

                    public var statistics: String?

                    public var threshold: String?

                    public var times: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.comparisonOperator != nil {
                            map["ComparisonOperator"] = self.comparisonOperator!
                        }
                        if self.statistics != nil {
                            map["Statistics"] = self.statistics!
                        }
                        if self.threshold != nil {
                            map["Threshold"] = self.threshold!
                        }
                        if self.times != nil {
                            map["Times"] = self.times!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["ComparisonOperator"] as? String {
                            self.comparisonOperator = value
                        }
                        if let value = dict["Statistics"] as? String {
                            self.statistics = value
                        }
                        if let value = dict["Threshold"] as? String {
                            self.threshold = value
                        }
                        if let value = dict["Times"] as? String {
                            self.times = value
                        }
                    }
                }
                public var critical: DescribeActiveMetricRuleListResponseBody.AlertList.Alert.Escalations.Critical?

                public var info: DescribeActiveMetricRuleListResponseBody.AlertList.Alert.Escalations.Info?

                public var warn: DescribeActiveMetricRuleListResponseBody.AlertList.Alert.Escalations.Warn?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.critical?.validate()
                    try self.info?.validate()
                    try self.warn?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.critical != nil {
                        map["Critical"] = self.critical?.toMap()
                    }
                    if self.info != nil {
                        map["Info"] = self.info?.toMap()
                    }
                    if self.warn != nil {
                        map["Warn"] = self.warn?.toMap()
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Critical"] as? [String: Any?] {
                        var model = DescribeActiveMetricRuleListResponseBody.AlertList.Alert.Escalations.Critical()
                        model.fromMap(value)
                        self.critical = model
                    }
                    if let value = dict["Info"] as? [String: Any?] {
                        var model = DescribeActiveMetricRuleListResponseBody.AlertList.Alert.Escalations.Info()
                        model.fromMap(value)
                        self.info = model
                    }
                    if let value = dict["Warn"] as? [String: Any?] {
                        var model = DescribeActiveMetricRuleListResponseBody.AlertList.Alert.Escalations.Warn()
                        model.fromMap(value)
                        self.warn = model
                    }
                }
            }
            public var alertState: String?

            public var contactGroups: String?

            public var dimensions: String?

            public var effectiveInterval: String?

            public var enableState: Bool?

            public var escalations: DescribeActiveMetricRuleListResponseBody.AlertList.Alert.Escalations?

            public var mailSubject: String?

            public var metricName: String?

            public var namespace: String?

            public var noEffectiveInterval: String?

            public var period: String?

            public var resources: String?

            public var ruleId: String?

            public var ruleName: String?

            public var silenceTime: String?

            public var webhook: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.escalations?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.alertState != nil {
                    map["AlertState"] = self.alertState!
                }
                if self.contactGroups != nil {
                    map["ContactGroups"] = self.contactGroups!
                }
                if self.dimensions != nil {
                    map["Dimensions"] = self.dimensions!
                }
                if self.effectiveInterval != nil {
                    map["EffectiveInterval"] = self.effectiveInterval!
                }
                if self.enableState != nil {
                    map["EnableState"] = self.enableState!
                }
                if self.escalations != nil {
                    map["Escalations"] = self.escalations?.toMap()
                }
                if self.mailSubject != nil {
                    map["MailSubject"] = self.mailSubject!
                }
                if self.metricName != nil {
                    map["MetricName"] = self.metricName!
                }
                if self.namespace != nil {
                    map["Namespace"] = self.namespace!
                }
                if self.noEffectiveInterval != nil {
                    map["NoEffectiveInterval"] = self.noEffectiveInterval!
                }
                if self.period != nil {
                    map["Period"] = self.period!
                }
                if self.resources != nil {
                    map["Resources"] = self.resources!
                }
                if self.ruleId != nil {
                    map["RuleId"] = self.ruleId!
                }
                if self.ruleName != nil {
                    map["RuleName"] = self.ruleName!
                }
                if self.silenceTime != nil {
                    map["SilenceTime"] = self.silenceTime!
                }
                if self.webhook != nil {
                    map["Webhook"] = self.webhook!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AlertState"] as? String {
                    self.alertState = value
                }
                if let value = dict["ContactGroups"] as? String {
                    self.contactGroups = value
                }
                if let value = dict["Dimensions"] as? String {
                    self.dimensions = value
                }
                if let value = dict["EffectiveInterval"] as? String {
                    self.effectiveInterval = value
                }
                if let value = dict["EnableState"] as? Bool {
                    self.enableState = value
                }
                if let value = dict["Escalations"] as? [String: Any?] {
                    var model = DescribeActiveMetricRuleListResponseBody.AlertList.Alert.Escalations()
                    model.fromMap(value)
                    self.escalations = model
                }
                if let value = dict["MailSubject"] as? String {
                    self.mailSubject = value
                }
                if let value = dict["MetricName"] as? String {
                    self.metricName = value
                }
                if let value = dict["Namespace"] as? String {
                    self.namespace = value
                }
                if let value = dict["NoEffectiveInterval"] as? String {
                    self.noEffectiveInterval = value
                }
                if let value = dict["Period"] as? String {
                    self.period = value
                }
                if let value = dict["Resources"] as? String {
                    self.resources = value
                }
                if let value = dict["RuleId"] as? String {
                    self.ruleId = value
                }
                if let value = dict["RuleName"] as? String {
                    self.ruleName = value
                }
                if let value = dict["SilenceTime"] as? String {
                    self.silenceTime = value
                }
                if let value = dict["Webhook"] as? String {
                    self.webhook = value
                }
            }
        }
        public var alert: [DescribeActiveMetricRuleListResponseBody.AlertList.Alert]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.alert != nil {
                var tmp : [Any] = []
                for k in self.alert! {
                    tmp.append(k.toMap())
                }
                map["Alert"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Alert"] as? [Any?] {
                var tmp : [DescribeActiveMetricRuleListResponseBody.AlertList.Alert] = []
                for v in value {
                    if v != nil {
                        var model = DescribeActiveMetricRuleListResponseBody.AlertList.Alert()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.alert = tmp
            }
        }
    }
    public class Datapoints : Tea.TeaModel {
        public class Alarm : Tea.TeaModel {
            public var comparisonOperator: String?

            public var contactGroups: String?

            public var enable: String?

            public var endTime: String?

            public var evaluationCount: String?

            public var metricName: String?

            public var namespace: String?

            public var period: String?

            public var ruleId: String?

            public var ruleName: String?

            public var silenceTime: String?

            public var startTime: String?

            public var state: String?

            public var statistics: String?

            public var threshold: String?

            public var webhook: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.comparisonOperator != nil {
                    map["ComparisonOperator"] = self.comparisonOperator!
                }
                if self.contactGroups != nil {
                    map["ContactGroups"] = self.contactGroups!
                }
                if self.enable != nil {
                    map["Enable"] = self.enable!
                }
                if self.endTime != nil {
                    map["EndTime"] = self.endTime!
                }
                if self.evaluationCount != nil {
                    map["EvaluationCount"] = self.evaluationCount!
                }
                if self.metricName != nil {
                    map["MetricName"] = self.metricName!
                }
                if self.namespace != nil {
                    map["Namespace"] = self.namespace!
                }
                if self.period != nil {
                    map["Period"] = self.period!
                }
                if self.ruleId != nil {
                    map["RuleId"] = self.ruleId!
                }
                if self.ruleName != nil {
                    map["RuleName"] = self.ruleName!
                }
                if self.silenceTime != nil {
                    map["SilenceTime"] = self.silenceTime!
                }
                if self.startTime != nil {
                    map["StartTime"] = self.startTime!
                }
                if self.state != nil {
                    map["State"] = self.state!
                }
                if self.statistics != nil {
                    map["Statistics"] = self.statistics!
                }
                if self.threshold != nil {
                    map["Threshold"] = self.threshold!
                }
                if self.webhook != nil {
                    map["Webhook"] = self.webhook!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ComparisonOperator"] as? String {
                    self.comparisonOperator = value
                }
                if let value = dict["ContactGroups"] as? String {
                    self.contactGroups = value
                }
                if let value = dict["Enable"] as? String {
                    self.enable = value
                }
                if let value = dict["EndTime"] as? String {
                    self.endTime = value
                }
                if let value = dict["EvaluationCount"] as? String {
                    self.evaluationCount = value
                }
                if let value = dict["MetricName"] as? String {
                    self.metricName = value
                }
                if let value = dict["Namespace"] as? String {
                    self.namespace = value
                }
                if let value = dict["Period"] as? String {
                    self.period = value
                }
                if let value = dict["RuleId"] as? String {
                    self.ruleId = value
                }
                if let value = dict["RuleName"] as? String {
                    self.ruleName = value
                }
                if let value = dict["SilenceTime"] as? String {
                    self.silenceTime = value
                }
                if let value = dict["StartTime"] as? String {
                    self.startTime = value
                }
                if let value = dict["State"] as? String {
                    self.state = value
                }
                if let value = dict["Statistics"] as? String {
                    self.statistics = value
                }
                if let value = dict["Threshold"] as? String {
                    self.threshold = value
                }
                if let value = dict["Webhook"] as? String {
                    self.webhook = value
                }
            }
        }
        public var alarm: [DescribeActiveMetricRuleListResponseBody.Datapoints.Alarm]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.alarm != nil {
                var tmp : [Any] = []
                for k in self.alarm! {
                    tmp.append(k.toMap())
                }
                map["Alarm"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Alarm"] as? [Any?] {
                var tmp : [DescribeActiveMetricRuleListResponseBody.Datapoints.Alarm] = []
                for v in value {
                    if v != nil {
                        var model = DescribeActiveMetricRuleListResponseBody.Datapoints.Alarm()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.alarm = tmp
            }
        }
    }
    public var alertList: DescribeActiveMetricRuleListResponseBody.AlertList?

    public var code: String?

    public var datapoints: DescribeActiveMetricRuleListResponseBody.Datapoints?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.alertList?.validate()
        try self.datapoints?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.alertList != nil {
            map["AlertList"] = self.alertList?.toMap()
        }
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.datapoints != nil {
            map["Datapoints"] = self.datapoints?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AlertList"] as? [String: Any?] {
            var model = DescribeActiveMetricRuleListResponseBody.AlertList()
            model.fromMap(value)
            self.alertList = model
        }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Datapoints"] as? [String: Any?] {
            var model = DescribeActiveMetricRuleListResponseBody.Datapoints()
            model.fromMap(value)
            self.datapoints = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DescribeActiveMetricRuleListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeActiveMetricRuleListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeActiveMetricRuleListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeAlertHistoryListRequest : Tea.TeaModel {
    public var ascending: Bool?

    public var endTime: String?

    public var groupId: String?

    public var metricName: String?

    public var namespace: String?

    public var page: Int32?

    public var pageSize: Int32?

    public var regionId: String?

    public var ruleId: String?

    public var ruleName: String?

    public var startTime: String?

    public var state: String?

    public var status: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ascending != nil {
            map["Ascending"] = self.ascending!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.metricName != nil {
            map["MetricName"] = self.metricName!
        }
        if self.namespace != nil {
            map["Namespace"] = self.namespace!
        }
        if self.page != nil {
            map["Page"] = self.page!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.ruleId != nil {
            map["RuleId"] = self.ruleId!
        }
        if self.ruleName != nil {
            map["RuleName"] = self.ruleName!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.state != nil {
            map["State"] = self.state!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Ascending"] as? Bool {
            self.ascending = value
        }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["MetricName"] as? String {
            self.metricName = value
        }
        if let value = dict["Namespace"] as? String {
            self.namespace = value
        }
        if let value = dict["Page"] as? Int32 {
            self.page = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["RuleId"] as? String {
            self.ruleId = value
        }
        if let value = dict["RuleName"] as? String {
            self.ruleName = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
        if let value = dict["State"] as? String {
            self.state = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
    }
}

public class DescribeAlertHistoryListResponseBody : Tea.TeaModel {
    public class AlarmHistoryList : Tea.TeaModel {
        public class AlarmHistory : Tea.TeaModel {
            public class ContactALIIMs : Tea.TeaModel {
                public var contactALIIM: [String]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.contactALIIM != nil {
                        map["ContactALIIM"] = self.contactALIIM!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["ContactALIIM"] as? [String] {
                        self.contactALIIM = value
                    }
                }
            }
            public class ContactGroups : Tea.TeaModel {
                public var contactGroup: [String]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.contactGroup != nil {
                        map["ContactGroup"] = self.contactGroup!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["ContactGroup"] as? [String] {
                        self.contactGroup = value
                    }
                }
            }
            public class ContactMails : Tea.TeaModel {
                public var contactMail: [String]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.contactMail != nil {
                        map["ContactMail"] = self.contactMail!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["ContactMail"] as? [String] {
                        self.contactMail = value
                    }
                }
            }
            public class ContactSmses : Tea.TeaModel {
                public var contactSms: [String]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.contactSms != nil {
                        map["ContactSms"] = self.contactSms!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["ContactSms"] as? [String] {
                        self.contactSms = value
                    }
                }
            }
            public class Contacts : Tea.TeaModel {
                public var contact: [String]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.contact != nil {
                        map["Contact"] = self.contact!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Contact"] as? [String] {
                        self.contact = value
                    }
                }
            }
            public var alertTime: Int64?

            public var contactALIIMs: DescribeAlertHistoryListResponseBody.AlarmHistoryList.AlarmHistory.ContactALIIMs?

            public var contactGroups: DescribeAlertHistoryListResponseBody.AlarmHistoryList.AlarmHistory.ContactGroups?

            public var contactMails: DescribeAlertHistoryListResponseBody.AlarmHistoryList.AlarmHistory.ContactMails?

            public var contactSmses: DescribeAlertHistoryListResponseBody.AlarmHistoryList.AlarmHistory.ContactSmses?

            public var contacts: DescribeAlertHistoryListResponseBody.AlarmHistoryList.AlarmHistory.Contacts?

            public var dimensions: String?

            public var evaluationCount: Int32?

            public var expression: String?

            public var groupId: String?

            public var instanceName: String?

            public var lastTime: Int64?

            public var level: String?

            public var metricName: String?

            public var namespace: String?

            public var ruleId: String?

            public var ruleName: String?

            public var state: String?

            public var status: Int32?

            public var value: String?

            public var webhooks: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.contactALIIMs?.validate()
                try self.contactGroups?.validate()
                try self.contactMails?.validate()
                try self.contactSmses?.validate()
                try self.contacts?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.alertTime != nil {
                    map["AlertTime"] = self.alertTime!
                }
                if self.contactALIIMs != nil {
                    map["ContactALIIMs"] = self.contactALIIMs?.toMap()
                }
                if self.contactGroups != nil {
                    map["ContactGroups"] = self.contactGroups?.toMap()
                }
                if self.contactMails != nil {
                    map["ContactMails"] = self.contactMails?.toMap()
                }
                if self.contactSmses != nil {
                    map["ContactSmses"] = self.contactSmses?.toMap()
                }
                if self.contacts != nil {
                    map["Contacts"] = self.contacts?.toMap()
                }
                if self.dimensions != nil {
                    map["Dimensions"] = self.dimensions!
                }
                if self.evaluationCount != nil {
                    map["EvaluationCount"] = self.evaluationCount!
                }
                if self.expression != nil {
                    map["Expression"] = self.expression!
                }
                if self.groupId != nil {
                    map["GroupId"] = self.groupId!
                }
                if self.instanceName != nil {
                    map["InstanceName"] = self.instanceName!
                }
                if self.lastTime != nil {
                    map["LastTime"] = self.lastTime!
                }
                if self.level != nil {
                    map["Level"] = self.level!
                }
                if self.metricName != nil {
                    map["MetricName"] = self.metricName!
                }
                if self.namespace != nil {
                    map["Namespace"] = self.namespace!
                }
                if self.ruleId != nil {
                    map["RuleId"] = self.ruleId!
                }
                if self.ruleName != nil {
                    map["RuleName"] = self.ruleName!
                }
                if self.state != nil {
                    map["State"] = self.state!
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                if self.webhooks != nil {
                    map["Webhooks"] = self.webhooks!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AlertTime"] as? Int64 {
                    self.alertTime = value
                }
                if let value = dict["ContactALIIMs"] as? [String: Any?] {
                    var model = DescribeAlertHistoryListResponseBody.AlarmHistoryList.AlarmHistory.ContactALIIMs()
                    model.fromMap(value)
                    self.contactALIIMs = model
                }
                if let value = dict["ContactGroups"] as? [String: Any?] {
                    var model = DescribeAlertHistoryListResponseBody.AlarmHistoryList.AlarmHistory.ContactGroups()
                    model.fromMap(value)
                    self.contactGroups = model
                }
                if let value = dict["ContactMails"] as? [String: Any?] {
                    var model = DescribeAlertHistoryListResponseBody.AlarmHistoryList.AlarmHistory.ContactMails()
                    model.fromMap(value)
                    self.contactMails = model
                }
                if let value = dict["ContactSmses"] as? [String: Any?] {
                    var model = DescribeAlertHistoryListResponseBody.AlarmHistoryList.AlarmHistory.ContactSmses()
                    model.fromMap(value)
                    self.contactSmses = model
                }
                if let value = dict["Contacts"] as? [String: Any?] {
                    var model = DescribeAlertHistoryListResponseBody.AlarmHistoryList.AlarmHistory.Contacts()
                    model.fromMap(value)
                    self.contacts = model
                }
                if let value = dict["Dimensions"] as? String {
                    self.dimensions = value
                }
                if let value = dict["EvaluationCount"] as? Int32 {
                    self.evaluationCount = value
                }
                if let value = dict["Expression"] as? String {
                    self.expression = value
                }
                if let value = dict["GroupId"] as? String {
                    self.groupId = value
                }
                if let value = dict["InstanceName"] as? String {
                    self.instanceName = value
                }
                if let value = dict["LastTime"] as? Int64 {
                    self.lastTime = value
                }
                if let value = dict["Level"] as? String {
                    self.level = value
                }
                if let value = dict["MetricName"] as? String {
                    self.metricName = value
                }
                if let value = dict["Namespace"] as? String {
                    self.namespace = value
                }
                if let value = dict["RuleId"] as? String {
                    self.ruleId = value
                }
                if let value = dict["RuleName"] as? String {
                    self.ruleName = value
                }
                if let value = dict["State"] as? String {
                    self.state = value
                }
                if let value = dict["Status"] as? Int32 {
                    self.status = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
                if let value = dict["Webhooks"] as? String {
                    self.webhooks = value
                }
            }
        }
        public var alarmHistory: [DescribeAlertHistoryListResponseBody.AlarmHistoryList.AlarmHistory]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.alarmHistory != nil {
                var tmp : [Any] = []
                for k in self.alarmHistory! {
                    tmp.append(k.toMap())
                }
                map["AlarmHistory"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AlarmHistory"] as? [Any?] {
                var tmp : [DescribeAlertHistoryListResponseBody.AlarmHistoryList.AlarmHistory] = []
                for v in value {
                    if v != nil {
                        var model = DescribeAlertHistoryListResponseBody.AlarmHistoryList.AlarmHistory()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.alarmHistory = tmp
            }
        }
    }
    public var alarmHistoryList: DescribeAlertHistoryListResponseBody.AlarmHistoryList?

    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public var total: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.alarmHistoryList?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.alarmHistoryList != nil {
            map["AlarmHistoryList"] = self.alarmHistoryList?.toMap()
        }
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.total != nil {
            map["Total"] = self.total!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AlarmHistoryList"] as? [String: Any?] {
            var model = DescribeAlertHistoryListResponseBody.AlarmHistoryList()
            model.fromMap(value)
            self.alarmHistoryList = model
        }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
        if let value = dict["Total"] as? String {
            self.total = value
        }
    }
}

public class DescribeAlertHistoryListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeAlertHistoryListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeAlertHistoryListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeAlertLogCountRequest : Tea.TeaModel {
    public var contactGroup: String?

    public var endTime: Int64?

    public var eventType: String?

    public var groupBy: String?

    public var groupId: String?

    public var lastMin: String?

    public var level: String?

    public var metricName: String?

    public var namespace: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var product: String?

    public var regionId: String?

    public var ruleId: String?

    public var ruleName: String?

    public var searchKey: String?

    public var sendStatus: String?

    public var sourceType: String?

    public var startTime: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.contactGroup != nil {
            map["ContactGroup"] = self.contactGroup!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.eventType != nil {
            map["EventType"] = self.eventType!
        }
        if self.groupBy != nil {
            map["GroupBy"] = self.groupBy!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.lastMin != nil {
            map["LastMin"] = self.lastMin!
        }
        if self.level != nil {
            map["Level"] = self.level!
        }
        if self.metricName != nil {
            map["MetricName"] = self.metricName!
        }
        if self.namespace != nil {
            map["Namespace"] = self.namespace!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.product != nil {
            map["Product"] = self.product!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.ruleId != nil {
            map["RuleId"] = self.ruleId!
        }
        if self.ruleName != nil {
            map["RuleName"] = self.ruleName!
        }
        if self.searchKey != nil {
            map["SearchKey"] = self.searchKey!
        }
        if self.sendStatus != nil {
            map["SendStatus"] = self.sendStatus!
        }
        if self.sourceType != nil {
            map["SourceType"] = self.sourceType!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ContactGroup"] as? String {
            self.contactGroup = value
        }
        if let value = dict["EndTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["EventType"] as? String {
            self.eventType = value
        }
        if let value = dict["GroupBy"] as? String {
            self.groupBy = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["LastMin"] as? String {
            self.lastMin = value
        }
        if let value = dict["Level"] as? String {
            self.level = value
        }
        if let value = dict["MetricName"] as? String {
            self.metricName = value
        }
        if let value = dict["Namespace"] as? String {
            self.namespace = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["Product"] as? String {
            self.product = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["RuleId"] as? String {
            self.ruleId = value
        }
        if let value = dict["RuleName"] as? String {
            self.ruleName = value
        }
        if let value = dict["SearchKey"] as? String {
            self.searchKey = value
        }
        if let value = dict["SendStatus"] as? String {
            self.sendStatus = value
        }
        if let value = dict["SourceType"] as? String {
            self.sourceType = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
    }
}

public class DescribeAlertLogCountResponseBody : Tea.TeaModel {
    public class AlertLogCount : Tea.TeaModel {
        public class Logs : Tea.TeaModel {
            public var name: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public var count: Int32?

        public var logs: [DescribeAlertLogCountResponseBody.AlertLogCount.Logs]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.count != nil {
                map["Count"] = self.count!
            }
            if self.logs != nil {
                var tmp : [Any] = []
                for k in self.logs! {
                    tmp.append(k.toMap())
                }
                map["Logs"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Count"] as? Int32 {
                self.count = value
            }
            if let value = dict["Logs"] as? [Any?] {
                var tmp : [DescribeAlertLogCountResponseBody.AlertLogCount.Logs] = []
                for v in value {
                    if v != nil {
                        var model = DescribeAlertLogCountResponseBody.AlertLogCount.Logs()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.logs = tmp
            }
        }
    }
    public var alertLogCount: [DescribeAlertLogCountResponseBody.AlertLogCount]?

    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.alertLogCount != nil {
            var tmp : [Any] = []
            for k in self.alertLogCount! {
                tmp.append(k.toMap())
            }
            map["AlertLogCount"] = tmp
        }
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AlertLogCount"] as? [Any?] {
            var tmp : [DescribeAlertLogCountResponseBody.AlertLogCount] = []
            for v in value {
                if v != nil {
                    var model = DescribeAlertLogCountResponseBody.AlertLogCount()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.alertLogCount = tmp
        }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DescribeAlertLogCountResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeAlertLogCountResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeAlertLogCountResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeAlertLogHistogramRequest : Tea.TeaModel {
    public var contactGroup: String?

    public var endTime: Int64?

    public var eventType: String?

    public var groupBy: String?

    public var groupId: String?

    public var lastMin: String?

    public var level: String?

    public var metricName: String?

    public var namespace: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var product: String?

    public var regionId: String?

    public var ruleId: String?

    public var ruleName: String?

    public var searchKey: String?

    public var sendStatus: String?

    public var sourceType: String?

    public var startTime: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.contactGroup != nil {
            map["ContactGroup"] = self.contactGroup!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.eventType != nil {
            map["EventType"] = self.eventType!
        }
        if self.groupBy != nil {
            map["GroupBy"] = self.groupBy!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.lastMin != nil {
            map["LastMin"] = self.lastMin!
        }
        if self.level != nil {
            map["Level"] = self.level!
        }
        if self.metricName != nil {
            map["MetricName"] = self.metricName!
        }
        if self.namespace != nil {
            map["Namespace"] = self.namespace!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.product != nil {
            map["Product"] = self.product!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.ruleId != nil {
            map["RuleId"] = self.ruleId!
        }
        if self.ruleName != nil {
            map["RuleName"] = self.ruleName!
        }
        if self.searchKey != nil {
            map["SearchKey"] = self.searchKey!
        }
        if self.sendStatus != nil {
            map["SendStatus"] = self.sendStatus!
        }
        if self.sourceType != nil {
            map["SourceType"] = self.sourceType!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ContactGroup"] as? String {
            self.contactGroup = value
        }
        if let value = dict["EndTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["EventType"] as? String {
            self.eventType = value
        }
        if let value = dict["GroupBy"] as? String {
            self.groupBy = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["LastMin"] as? String {
            self.lastMin = value
        }
        if let value = dict["Level"] as? String {
            self.level = value
        }
        if let value = dict["MetricName"] as? String {
            self.metricName = value
        }
        if let value = dict["Namespace"] as? String {
            self.namespace = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["Product"] as? String {
            self.product = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["RuleId"] as? String {
            self.ruleId = value
        }
        if let value = dict["RuleName"] as? String {
            self.ruleName = value
        }
        if let value = dict["SearchKey"] as? String {
            self.searchKey = value
        }
        if let value = dict["SendStatus"] as? String {
            self.sendStatus = value
        }
        if let value = dict["SourceType"] as? String {
            self.sourceType = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
    }
}

public class DescribeAlertLogHistogramResponseBody : Tea.TeaModel {
    public class AlertLogHistogramList : Tea.TeaModel {
        public var count: Int32?

        public var from: Int64?

        public var to: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.count != nil {
                map["Count"] = self.count!
            }
            if self.from != nil {
                map["From"] = self.from!
            }
            if self.to != nil {
                map["To"] = self.to!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Count"] as? Int32 {
                self.count = value
            }
            if let value = dict["From"] as? Int64 {
                self.from = value
            }
            if let value = dict["To"] as? Int64 {
                self.to = value
            }
        }
    }
    public var alertLogHistogramList: [DescribeAlertLogHistogramResponseBody.AlertLogHistogramList]?

    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.alertLogHistogramList != nil {
            var tmp : [Any] = []
            for k in self.alertLogHistogramList! {
                tmp.append(k.toMap())
            }
            map["AlertLogHistogramList"] = tmp
        }
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AlertLogHistogramList"] as? [Any?] {
            var tmp : [DescribeAlertLogHistogramResponseBody.AlertLogHistogramList] = []
            for v in value {
                if v != nil {
                    var model = DescribeAlertLogHistogramResponseBody.AlertLogHistogramList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.alertLogHistogramList = tmp
        }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DescribeAlertLogHistogramResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeAlertLogHistogramResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeAlertLogHistogramResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeAlertLogListRequest : Tea.TeaModel {
    public var contactGroup: String?

    public var endTime: Int64?

    public var eventType: String?

    public var groupBy: String?

    public var groupId: String?

    public var lastMin: String?

    public var level: String?

    public var metricName: String?

    public var namespace: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var product: String?

    public var regionId: String?

    public var ruleId: String?

    public var ruleName: String?

    public var searchKey: String?

    public var sendStatus: String?

    public var sourceType: String?

    public var startTime: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.contactGroup != nil {
            map["ContactGroup"] = self.contactGroup!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.eventType != nil {
            map["EventType"] = self.eventType!
        }
        if self.groupBy != nil {
            map["GroupBy"] = self.groupBy!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.lastMin != nil {
            map["LastMin"] = self.lastMin!
        }
        if self.level != nil {
            map["Level"] = self.level!
        }
        if self.metricName != nil {
            map["MetricName"] = self.metricName!
        }
        if self.namespace != nil {
            map["Namespace"] = self.namespace!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.product != nil {
            map["Product"] = self.product!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.ruleId != nil {
            map["RuleId"] = self.ruleId!
        }
        if self.ruleName != nil {
            map["RuleName"] = self.ruleName!
        }
        if self.searchKey != nil {
            map["SearchKey"] = self.searchKey!
        }
        if self.sendStatus != nil {
            map["SendStatus"] = self.sendStatus!
        }
        if self.sourceType != nil {
            map["SourceType"] = self.sourceType!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ContactGroup"] as? String {
            self.contactGroup = value
        }
        if let value = dict["EndTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["EventType"] as? String {
            self.eventType = value
        }
        if let value = dict["GroupBy"] as? String {
            self.groupBy = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["LastMin"] as? String {
            self.lastMin = value
        }
        if let value = dict["Level"] as? String {
            self.level = value
        }
        if let value = dict["MetricName"] as? String {
            self.metricName = value
        }
        if let value = dict["Namespace"] as? String {
            self.namespace = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["Product"] as? String {
            self.product = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["RuleId"] as? String {
            self.ruleId = value
        }
        if let value = dict["RuleName"] as? String {
            self.ruleName = value
        }
        if let value = dict["SearchKey"] as? String {
            self.searchKey = value
        }
        if let value = dict["SendStatus"] as? String {
            self.sendStatus = value
        }
        if let value = dict["SourceType"] as? String {
            self.sourceType = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
    }
}

public class DescribeAlertLogListResponseBody : Tea.TeaModel {
    public class AlertLogList : Tea.TeaModel {
        public class Dimensions : Tea.TeaModel {
            public var key: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.key != nil {
                    map["Key"] = self.key!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Key"] as? String {
                    self.key = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public class Escalation : Tea.TeaModel {
            public var expression: String?

            public var level: String?

            public var times: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.expression != nil {
                    map["Expression"] = self.expression!
                }
                if self.level != nil {
                    map["Level"] = self.level!
                }
                if self.times != nil {
                    map["Times"] = self.times!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Expression"] as? String {
                    self.expression = value
                }
                if let value = dict["Level"] as? String {
                    self.level = value
                }
                if let value = dict["Times"] as? Int32 {
                    self.times = value
                }
            }
        }
        public class ExtendedInfo : Tea.TeaModel {
            public var name: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public class SendDetail : Tea.TeaModel {
            public class ChannelResultList : Tea.TeaModel {
                public class ResultList : Tea.TeaModel {
                    public var code: String?

                    public var detail: String?

                    public var requestId: String?

                    public var success: Bool?

                    public var notifyTargetList: [String]?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.code != nil {
                            map["Code"] = self.code!
                        }
                        if self.detail != nil {
                            map["Detail"] = self.detail!
                        }
                        if self.requestId != nil {
                            map["RequestId"] = self.requestId!
                        }
                        if self.success != nil {
                            map["Success"] = self.success!
                        }
                        if self.notifyTargetList != nil {
                            map["notifyTargetList"] = self.notifyTargetList!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Code"] as? String {
                            self.code = value
                        }
                        if let value = dict["Detail"] as? String {
                            self.detail = value
                        }
                        if let value = dict["RequestId"] as? String {
                            self.requestId = value
                        }
                        if let value = dict["Success"] as? Bool {
                            self.success = value
                        }
                        if let value = dict["notifyTargetList"] as? [String] {
                            self.notifyTargetList = value
                        }
                    }
                }
                public var channel: String?

                public var resultList: [DescribeAlertLogListResponseBody.AlertLogList.SendDetail.ChannelResultList.ResultList]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.channel != nil {
                        map["Channel"] = self.channel!
                    }
                    if self.resultList != nil {
                        var tmp : [Any] = []
                        for k in self.resultList! {
                            tmp.append(k.toMap())
                        }
                        map["ResultList"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Channel"] as? String {
                        self.channel = value
                    }
                    if let value = dict["ResultList"] as? [Any?] {
                        var tmp : [DescribeAlertLogListResponseBody.AlertLogList.SendDetail.ChannelResultList.ResultList] = []
                        for v in value {
                            if v != nil {
                                var model = DescribeAlertLogListResponseBody.AlertLogList.SendDetail.ChannelResultList.ResultList()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.resultList = tmp
                    }
                }
            }
            public var channelResultList: [DescribeAlertLogListResponseBody.AlertLogList.SendDetail.ChannelResultList]?

            public var resultCode: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.channelResultList != nil {
                    var tmp : [Any] = []
                    for k in self.channelResultList! {
                        tmp.append(k.toMap())
                    }
                    map["ChannelResultList"] = tmp
                }
                if self.resultCode != nil {
                    map["ResultCode"] = self.resultCode!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ChannelResultList"] as? [Any?] {
                    var tmp : [DescribeAlertLogListResponseBody.AlertLogList.SendDetail.ChannelResultList] = []
                    for v in value {
                        if v != nil {
                            var model = DescribeAlertLogListResponseBody.AlertLogList.SendDetail.ChannelResultList()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.channelResultList = tmp
                }
                if let value = dict["ResultCode"] as? String {
                    self.resultCode = value
                }
            }
        }
        public class SendResultList : Tea.TeaModel {
            public var key: String?

            public var value: [String]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.key != nil {
                    map["Key"] = self.key!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Key"] as? String {
                    self.key = value
                }
                if let value = dict["Value"] as? [String] {
                    self.value = value
                }
            }
        }
        public class WebhookList : Tea.TeaModel {
            public var code: String?

            public var message: String?

            public var url: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.code != nil {
                    map["code"] = self.code!
                }
                if self.message != nil {
                    map["message"] = self.message!
                }
                if self.url != nil {
                    map["url"] = self.url!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["code"] as? String {
                    self.code = value
                }
                if let value = dict["message"] as? String {
                    self.message = value
                }
                if let value = dict["url"] as? String {
                    self.url = value
                }
            }
        }
        public var alertTime: String?

        public var blackListDetail: String?

        public var blackListName: String?

        public var blackListUUID: String?

        public var contactALIIWWList: [String]?

        public var contactDingList: [String]?

        public var contactGroups: [String]?

        public var contactMailList: [String]?

        public var contactOnCallList: [String]?

        public var contactSMSList: [String]?

        public var dimensions: [DescribeAlertLogListResponseBody.AlertLogList.Dimensions]?

        public var dingdingWebhookList: [String]?

        public var escalation: DescribeAlertLogListResponseBody.AlertLogList.Escalation?

        public var eventName: String?

        public var extendedInfo: [DescribeAlertLogListResponseBody.AlertLogList.ExtendedInfo]?

        public var groupId: String?

        public var groupName: String?

        public var instanceId: String?

        public var instanceName: String?

        public var level: String?

        public var levelChange: String?

        public var logId: String?

        public var message: String?

        public var metricName: String?

        public var namespace: String?

        public var product: String?

        public var ruleId: String?

        public var ruleName: String?

        public var sendDetail: DescribeAlertLogListResponseBody.AlertLogList.SendDetail?

        public var sendResultList: [DescribeAlertLogListResponseBody.AlertLogList.SendResultList]?

        public var sendStatus: String?

        public var webhookList: [DescribeAlertLogListResponseBody.AlertLogList.WebhookList]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.escalation?.validate()
            try self.sendDetail?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.alertTime != nil {
                map["AlertTime"] = self.alertTime!
            }
            if self.blackListDetail != nil {
                map["BlackListDetail"] = self.blackListDetail!
            }
            if self.blackListName != nil {
                map["BlackListName"] = self.blackListName!
            }
            if self.blackListUUID != nil {
                map["BlackListUUID"] = self.blackListUUID!
            }
            if self.contactALIIWWList != nil {
                map["ContactALIIWWList"] = self.contactALIIWWList!
            }
            if self.contactDingList != nil {
                map["ContactDingList"] = self.contactDingList!
            }
            if self.contactGroups != nil {
                map["ContactGroups"] = self.contactGroups!
            }
            if self.contactMailList != nil {
                map["ContactMailList"] = self.contactMailList!
            }
            if self.contactOnCallList != nil {
                map["ContactOnCallList"] = self.contactOnCallList!
            }
            if self.contactSMSList != nil {
                map["ContactSMSList"] = self.contactSMSList!
            }
            if self.dimensions != nil {
                var tmp : [Any] = []
                for k in self.dimensions! {
                    tmp.append(k.toMap())
                }
                map["Dimensions"] = tmp
            }
            if self.dingdingWebhookList != nil {
                map["DingdingWebhookList"] = self.dingdingWebhookList!
            }
            if self.escalation != nil {
                map["Escalation"] = self.escalation?.toMap()
            }
            if self.eventName != nil {
                map["EventName"] = self.eventName!
            }
            if self.extendedInfo != nil {
                var tmp : [Any] = []
                for k in self.extendedInfo! {
                    tmp.append(k.toMap())
                }
                map["ExtendedInfo"] = tmp
            }
            if self.groupId != nil {
                map["GroupId"] = self.groupId!
            }
            if self.groupName != nil {
                map["GroupName"] = self.groupName!
            }
            if self.instanceId != nil {
                map["InstanceId"] = self.instanceId!
            }
            if self.instanceName != nil {
                map["InstanceName"] = self.instanceName!
            }
            if self.level != nil {
                map["Level"] = self.level!
            }
            if self.levelChange != nil {
                map["LevelChange"] = self.levelChange!
            }
            if self.logId != nil {
                map["LogId"] = self.logId!
            }
            if self.message != nil {
                map["Message"] = self.message!
            }
            if self.metricName != nil {
                map["MetricName"] = self.metricName!
            }
            if self.namespace != nil {
                map["Namespace"] = self.namespace!
            }
            if self.product != nil {
                map["Product"] = self.product!
            }
            if self.ruleId != nil {
                map["RuleId"] = self.ruleId!
            }
            if self.ruleName != nil {
                map["RuleName"] = self.ruleName!
            }
            if self.sendDetail != nil {
                map["SendDetail"] = self.sendDetail?.toMap()
            }
            if self.sendResultList != nil {
                var tmp : [Any] = []
                for k in self.sendResultList! {
                    tmp.append(k.toMap())
                }
                map["SendResultList"] = tmp
            }
            if self.sendStatus != nil {
                map["SendStatus"] = self.sendStatus!
            }
            if self.webhookList != nil {
                var tmp : [Any] = []
                for k in self.webhookList! {
                    tmp.append(k.toMap())
                }
                map["WebhookList"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AlertTime"] as? String {
                self.alertTime = value
            }
            if let value = dict["BlackListDetail"] as? String {
                self.blackListDetail = value
            }
            if let value = dict["BlackListName"] as? String {
                self.blackListName = value
            }
            if let value = dict["BlackListUUID"] as? String {
                self.blackListUUID = value
            }
            if let value = dict["ContactALIIWWList"] as? [String] {
                self.contactALIIWWList = value
            }
            if let value = dict["ContactDingList"] as? [String] {
                self.contactDingList = value
            }
            if let value = dict["ContactGroups"] as? [String] {
                self.contactGroups = value
            }
            if let value = dict["ContactMailList"] as? [String] {
                self.contactMailList = value
            }
            if let value = dict["ContactOnCallList"] as? [String] {
                self.contactOnCallList = value
            }
            if let value = dict["ContactSMSList"] as? [String] {
                self.contactSMSList = value
            }
            if let value = dict["Dimensions"] as? [Any?] {
                var tmp : [DescribeAlertLogListResponseBody.AlertLogList.Dimensions] = []
                for v in value {
                    if v != nil {
                        var model = DescribeAlertLogListResponseBody.AlertLogList.Dimensions()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.dimensions = tmp
            }
            if let value = dict["DingdingWebhookList"] as? [String] {
                self.dingdingWebhookList = value
            }
            if let value = dict["Escalation"] as? [String: Any?] {
                var model = DescribeAlertLogListResponseBody.AlertLogList.Escalation()
                model.fromMap(value)
                self.escalation = model
            }
            if let value = dict["EventName"] as? String {
                self.eventName = value
            }
            if let value = dict["ExtendedInfo"] as? [Any?] {
                var tmp : [DescribeAlertLogListResponseBody.AlertLogList.ExtendedInfo] = []
                for v in value {
                    if v != nil {
                        var model = DescribeAlertLogListResponseBody.AlertLogList.ExtendedInfo()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.extendedInfo = tmp
            }
            if let value = dict["GroupId"] as? String {
                self.groupId = value
            }
            if let value = dict["GroupName"] as? String {
                self.groupName = value
            }
            if let value = dict["InstanceId"] as? String {
                self.instanceId = value
            }
            if let value = dict["InstanceName"] as? String {
                self.instanceName = value
            }
            if let value = dict["Level"] as? String {
                self.level = value
            }
            if let value = dict["LevelChange"] as? String {
                self.levelChange = value
            }
            if let value = dict["LogId"] as? String {
                self.logId = value
            }
            if let value = dict["Message"] as? String {
                self.message = value
            }
            if let value = dict["MetricName"] as? String {
                self.metricName = value
            }
            if let value = dict["Namespace"] as? String {
                self.namespace = value
            }
            if let value = dict["Product"] as? String {
                self.product = value
            }
            if let value = dict["RuleId"] as? String {
                self.ruleId = value
            }
            if let value = dict["RuleName"] as? String {
                self.ruleName = value
            }
            if let value = dict["SendDetail"] as? [String: Any?] {
                var model = DescribeAlertLogListResponseBody.AlertLogList.SendDetail()
                model.fromMap(value)
                self.sendDetail = model
            }
            if let value = dict["SendResultList"] as? [Any?] {
                var tmp : [DescribeAlertLogListResponseBody.AlertLogList.SendResultList] = []
                for v in value {
                    if v != nil {
                        var model = DescribeAlertLogListResponseBody.AlertLogList.SendResultList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.sendResultList = tmp
            }
            if let value = dict["SendStatus"] as? String {
                self.sendStatus = value
            }
            if let value = dict["WebhookList"] as? [Any?] {
                var tmp : [DescribeAlertLogListResponseBody.AlertLogList.WebhookList] = []
                for v in value {
                    if v != nil {
                        var model = DescribeAlertLogListResponseBody.AlertLogList.WebhookList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.webhookList = tmp
            }
        }
    }
    public var alertLogList: [DescribeAlertLogListResponseBody.AlertLogList]?

    public var code: String?

    public var message: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.alertLogList != nil {
            var tmp : [Any] = []
            for k in self.alertLogList! {
                tmp.append(k.toMap())
            }
            map["AlertLogList"] = tmp
        }
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AlertLogList"] as? [Any?] {
            var tmp : [DescribeAlertLogListResponseBody.AlertLogList] = []
            for v in value {
                if v != nil {
                    var model = DescribeAlertLogListResponseBody.AlertLogList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.alertLogList = tmp
        }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DescribeAlertLogListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeAlertLogListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeAlertLogListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeAlertingMetricRuleResourcesRequest : Tea.TeaModel {
    public var alertBeforeTime: String?

    public var dimensions: String?

    public var groupId: String?

    public var namespace: String?

    public var page: Int32?

    public var pageSize: Int32?

    public var regionId: String?

    public var ruleId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.alertBeforeTime != nil {
            map["AlertBeforeTime"] = self.alertBeforeTime!
        }
        if self.dimensions != nil {
            map["Dimensions"] = self.dimensions!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.namespace != nil {
            map["Namespace"] = self.namespace!
        }
        if self.page != nil {
            map["Page"] = self.page!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.ruleId != nil {
            map["RuleId"] = self.ruleId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AlertBeforeTime"] as? String {
            self.alertBeforeTime = value
        }
        if let value = dict["Dimensions"] as? String {
            self.dimensions = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["Namespace"] as? String {
            self.namespace = value
        }
        if let value = dict["Page"] as? Int32 {
            self.page = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["RuleId"] as? String {
            self.ruleId = value
        }
    }
}

public class DescribeAlertingMetricRuleResourcesResponseBody : Tea.TeaModel {
    public class Resources : Tea.TeaModel {
        public class Resource : Tea.TeaModel {
            public class Escalation : Tea.TeaModel {
                public class Resource : Tea.TeaModel {
                    public class ExpressionList : Tea.TeaModel {
                        public class ExpressionList : Tea.TeaModel {
                            public var comparisonOperator: String?

                            public var metricName: String?

                            public var period: String?

                            public var statistics: String?

                            public var threshold: String?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.comparisonOperator != nil {
                                    map["ComparisonOperator"] = self.comparisonOperator!
                                }
                                if self.metricName != nil {
                                    map["MetricName"] = self.metricName!
                                }
                                if self.period != nil {
                                    map["Period"] = self.period!
                                }
                                if self.statistics != nil {
                                    map["Statistics"] = self.statistics!
                                }
                                if self.threshold != nil {
                                    map["Threshold"] = self.threshold!
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                guard let dict else { return }
                                if let value = dict["ComparisonOperator"] as? String {
                                    self.comparisonOperator = value
                                }
                                if let value = dict["MetricName"] as? String {
                                    self.metricName = value
                                }
                                if let value = dict["Period"] as? String {
                                    self.period = value
                                }
                                if let value = dict["Statistics"] as? String {
                                    self.statistics = value
                                }
                                if let value = dict["Threshold"] as? String {
                                    self.threshold = value
                                }
                            }
                        }
                        public var expressionList: [DescribeAlertingMetricRuleResourcesResponseBody.Resources.Resource.Escalation.Resource.ExpressionList.ExpressionList]?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.expressionList != nil {
                                var tmp : [Any] = []
                                for k in self.expressionList! {
                                    tmp.append(k.toMap())
                                }
                                map["ExpressionList"] = tmp
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["ExpressionList"] as? [Any?] {
                                var tmp : [DescribeAlertingMetricRuleResourcesResponseBody.Resources.Resource.Escalation.Resource.ExpressionList.ExpressionList] = []
                                for v in value {
                                    if v != nil {
                                        var model = DescribeAlertingMetricRuleResourcesResponseBody.Resources.Resource.Escalation.Resource.ExpressionList.ExpressionList()
                                        if v != nil {
                                            model.fromMap(v as? [String: Any?])
                                        }
                                        tmp.append(model)
                                    }
                                }
                                self.expressionList = tmp
                            }
                        }
                    }
                    public var comparisonOperator: String?

                    public var expression: String?

                    public var expressionList: DescribeAlertingMetricRuleResourcesResponseBody.Resources.Resource.Escalation.Resource.ExpressionList?

                    public var expressionListJoin: String?

                    public var expressionRaw: String?

                    public var level: Int32?

                    public var preCondition: String?

                    public var tag: String?

                    public var threshold: String?

                    public var times: Int32?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                        try self.expressionList?.validate()
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.comparisonOperator != nil {
                            map["ComparisonOperator"] = self.comparisonOperator!
                        }
                        if self.expression != nil {
                            map["Expression"] = self.expression!
                        }
                        if self.expressionList != nil {
                            map["ExpressionList"] = self.expressionList?.toMap()
                        }
                        if self.expressionListJoin != nil {
                            map["ExpressionListJoin"] = self.expressionListJoin!
                        }
                        if self.expressionRaw != nil {
                            map["ExpressionRaw"] = self.expressionRaw!
                        }
                        if self.level != nil {
                            map["Level"] = self.level!
                        }
                        if self.preCondition != nil {
                            map["PreCondition"] = self.preCondition!
                        }
                        if self.tag != nil {
                            map["Tag"] = self.tag!
                        }
                        if self.threshold != nil {
                            map["Threshold"] = self.threshold!
                        }
                        if self.times != nil {
                            map["Times"] = self.times!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["ComparisonOperator"] as? String {
                            self.comparisonOperator = value
                        }
                        if let value = dict["Expression"] as? String {
                            self.expression = value
                        }
                        if let value = dict["ExpressionList"] as? [String: Any?] {
                            var model = DescribeAlertingMetricRuleResourcesResponseBody.Resources.Resource.Escalation.Resource.ExpressionList()
                            model.fromMap(value)
                            self.expressionList = model
                        }
                        if let value = dict["ExpressionListJoin"] as? String {
                            self.expressionListJoin = value
                        }
                        if let value = dict["ExpressionRaw"] as? String {
                            self.expressionRaw = value
                        }
                        if let value = dict["Level"] as? Int32 {
                            self.level = value
                        }
                        if let value = dict["PreCondition"] as? String {
                            self.preCondition = value
                        }
                        if let value = dict["Tag"] as? String {
                            self.tag = value
                        }
                        if let value = dict["Threshold"] as? String {
                            self.threshold = value
                        }
                        if let value = dict["Times"] as? Int32 {
                            self.times = value
                        }
                    }
                }
                public var resource: [DescribeAlertingMetricRuleResourcesResponseBody.Resources.Resource.Escalation.Resource]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.resource != nil {
                        var tmp : [Any] = []
                        for k in self.resource! {
                            tmp.append(k.toMap())
                        }
                        map["Resource"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Resource"] as? [Any?] {
                        var tmp : [DescribeAlertingMetricRuleResourcesResponseBody.Resources.Resource.Escalation.Resource] = []
                        for v in value {
                            if v != nil {
                                var model = DescribeAlertingMetricRuleResourcesResponseBody.Resources.Resource.Escalation.Resource()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.resource = tmp
                    }
                }
            }
            public var dimensions: String?

            public var enable: String?

            public var escalation: DescribeAlertingMetricRuleResourcesResponseBody.Resources.Resource.Escalation?

            public var groupId: String?

            public var lastAlertTime: String?

            public var lastModifyTime: String?

            public var level: Int32?

            public var metricName: String?

            public var metricValues: String?

            public var namespace: String?

            public var productCategory: String?

            public var resource: String?

            public var retryTimes: String?

            public var ruleId: String?

            public var ruleName: String?

            public var startTime: String?

            public var statistics: String?

            public var threshold: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.escalation?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.dimensions != nil {
                    map["Dimensions"] = self.dimensions!
                }
                if self.enable != nil {
                    map["Enable"] = self.enable!
                }
                if self.escalation != nil {
                    map["Escalation"] = self.escalation?.toMap()
                }
                if self.groupId != nil {
                    map["GroupId"] = self.groupId!
                }
                if self.lastAlertTime != nil {
                    map["LastAlertTime"] = self.lastAlertTime!
                }
                if self.lastModifyTime != nil {
                    map["LastModifyTime"] = self.lastModifyTime!
                }
                if self.level != nil {
                    map["Level"] = self.level!
                }
                if self.metricName != nil {
                    map["MetricName"] = self.metricName!
                }
                if self.metricValues != nil {
                    map["MetricValues"] = self.metricValues!
                }
                if self.namespace != nil {
                    map["Namespace"] = self.namespace!
                }
                if self.productCategory != nil {
                    map["ProductCategory"] = self.productCategory!
                }
                if self.resource != nil {
                    map["Resource"] = self.resource!
                }
                if self.retryTimes != nil {
                    map["RetryTimes"] = self.retryTimes!
                }
                if self.ruleId != nil {
                    map["RuleId"] = self.ruleId!
                }
                if self.ruleName != nil {
                    map["RuleName"] = self.ruleName!
                }
                if self.startTime != nil {
                    map["StartTime"] = self.startTime!
                }
                if self.statistics != nil {
                    map["Statistics"] = self.statistics!
                }
                if self.threshold != nil {
                    map["Threshold"] = self.threshold!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Dimensions"] as? String {
                    self.dimensions = value
                }
                if let value = dict["Enable"] as? String {
                    self.enable = value
                }
                if let value = dict["Escalation"] as? [String: Any?] {
                    var model = DescribeAlertingMetricRuleResourcesResponseBody.Resources.Resource.Escalation()
                    model.fromMap(value)
                    self.escalation = model
                }
                if let value = dict["GroupId"] as? String {
                    self.groupId = value
                }
                if let value = dict["LastAlertTime"] as? String {
                    self.lastAlertTime = value
                }
                if let value = dict["LastModifyTime"] as? String {
                    self.lastModifyTime = value
                }
                if let value = dict["Level"] as? Int32 {
                    self.level = value
                }
                if let value = dict["MetricName"] as? String {
                    self.metricName = value
                }
                if let value = dict["MetricValues"] as? String {
                    self.metricValues = value
                }
                if let value = dict["Namespace"] as? String {
                    self.namespace = value
                }
                if let value = dict["ProductCategory"] as? String {
                    self.productCategory = value
                }
                if let value = dict["Resource"] as? String {
                    self.resource = value
                }
                if let value = dict["RetryTimes"] as? String {
                    self.retryTimes = value
                }
                if let value = dict["RuleId"] as? String {
                    self.ruleId = value
                }
                if let value = dict["RuleName"] as? String {
                    self.ruleName = value
                }
                if let value = dict["StartTime"] as? String {
                    self.startTime = value
                }
                if let value = dict["Statistics"] as? String {
                    self.statistics = value
                }
                if let value = dict["Threshold"] as? String {
                    self.threshold = value
                }
            }
        }
        public var resource: [DescribeAlertingMetricRuleResourcesResponseBody.Resources.Resource]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.resource != nil {
                var tmp : [Any] = []
                for k in self.resource! {
                    tmp.append(k.toMap())
                }
                map["Resource"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Resource"] as? [Any?] {
                var tmp : [DescribeAlertingMetricRuleResourcesResponseBody.Resources.Resource] = []
                for v in value {
                    if v != nil {
                        var model = DescribeAlertingMetricRuleResourcesResponseBody.Resources.Resource()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.resource = tmp
            }
        }
    }
    public var code: Int32?

    public var message: String?

    public var requestId: String?

    public var resources: DescribeAlertingMetricRuleResourcesResponseBody.Resources?

    public var success: Bool?

    public var total: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.resources?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resources != nil {
            map["Resources"] = self.resources?.toMap()
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.total != nil {
            map["Total"] = self.total!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Resources"] as? [String: Any?] {
            var model = DescribeAlertingMetricRuleResourcesResponseBody.Resources()
            model.fromMap(value)
            self.resources = model
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
        if let value = dict["Total"] as? Int32 {
            self.total = value
        }
    }
}

public class DescribeAlertingMetricRuleResourcesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeAlertingMetricRuleResourcesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeAlertingMetricRuleResourcesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeContactGroupListRequest : Tea.TeaModel {
    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DescribeContactGroupListResponseBody : Tea.TeaModel {
    public class ContactGroupList : Tea.TeaModel {
        public class ContactGroup : Tea.TeaModel {
            public class Contacts : Tea.TeaModel {
                public var contact: [String]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.contact != nil {
                        map["Contact"] = self.contact!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Contact"] as? [String] {
                        self.contact = value
                    }
                }
            }
            public var contacts: DescribeContactGroupListResponseBody.ContactGroupList.ContactGroup.Contacts?

            public var createTime: Int64?

            public var describe: String?

            public var enableSubscribed: Bool?

            public var enabledWeeklyReport: Bool?

            public var name: String?

            public var updateTime: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.contacts?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.contacts != nil {
                    map["Contacts"] = self.contacts?.toMap()
                }
                if self.createTime != nil {
                    map["CreateTime"] = self.createTime!
                }
                if self.describe != nil {
                    map["Describe"] = self.describe!
                }
                if self.enableSubscribed != nil {
                    map["EnableSubscribed"] = self.enableSubscribed!
                }
                if self.enabledWeeklyReport != nil {
                    map["EnabledWeeklyReport"] = self.enabledWeeklyReport!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.updateTime != nil {
                    map["UpdateTime"] = self.updateTime!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Contacts"] as? [String: Any?] {
                    var model = DescribeContactGroupListResponseBody.ContactGroupList.ContactGroup.Contacts()
                    model.fromMap(value)
                    self.contacts = model
                }
                if let value = dict["CreateTime"] as? Int64 {
                    self.createTime = value
                }
                if let value = dict["Describe"] as? String {
                    self.describe = value
                }
                if let value = dict["EnableSubscribed"] as? Bool {
                    self.enableSubscribed = value
                }
                if let value = dict["EnabledWeeklyReport"] as? Bool {
                    self.enabledWeeklyReport = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["UpdateTime"] as? Int64 {
                    self.updateTime = value
                }
            }
        }
        public var contactGroup: [DescribeContactGroupListResponseBody.ContactGroupList.ContactGroup]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.contactGroup != nil {
                var tmp : [Any] = []
                for k in self.contactGroup! {
                    tmp.append(k.toMap())
                }
                map["ContactGroup"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ContactGroup"] as? [Any?] {
                var tmp : [DescribeContactGroupListResponseBody.ContactGroupList.ContactGroup] = []
                for v in value {
                    if v != nil {
                        var model = DescribeContactGroupListResponseBody.ContactGroupList.ContactGroup()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.contactGroup = tmp
            }
        }
    }
    public class ContactGroups : Tea.TeaModel {
        public var contactGroup: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.contactGroup != nil {
                map["ContactGroup"] = self.contactGroup!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ContactGroup"] as? [String] {
                self.contactGroup = value
            }
        }
    }
    public var code: String?

    public var contactGroupList: DescribeContactGroupListResponseBody.ContactGroupList?

    public var contactGroups: DescribeContactGroupListResponseBody.ContactGroups?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public var total: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.contactGroupList?.validate()
        try self.contactGroups?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.contactGroupList != nil {
            map["ContactGroupList"] = self.contactGroupList?.toMap()
        }
        if self.contactGroups != nil {
            map["ContactGroups"] = self.contactGroups?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.total != nil {
            map["Total"] = self.total!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["ContactGroupList"] as? [String: Any?] {
            var model = DescribeContactGroupListResponseBody.ContactGroupList()
            model.fromMap(value)
            self.contactGroupList = model
        }
        if let value = dict["ContactGroups"] as? [String: Any?] {
            var model = DescribeContactGroupListResponseBody.ContactGroups()
            model.fromMap(value)
            self.contactGroups = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
        if let value = dict["Total"] as? Int32 {
            self.total = value
        }
    }
}

public class DescribeContactGroupListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeContactGroupListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeContactGroupListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeContactListRequest : Tea.TeaModel {
    public var chanelType: String?

    public var chanelValue: String?

    public var contactName: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.chanelType != nil {
            map["ChanelType"] = self.chanelType!
        }
        if self.chanelValue != nil {
            map["ChanelValue"] = self.chanelValue!
        }
        if self.contactName != nil {
            map["ContactName"] = self.contactName!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ChanelType"] as? String {
            self.chanelType = value
        }
        if let value = dict["ChanelValue"] as? String {
            self.chanelValue = value
        }
        if let value = dict["ContactName"] as? String {
            self.contactName = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DescribeContactListResponseBody : Tea.TeaModel {
    public class Contacts : Tea.TeaModel {
        public class Contact : Tea.TeaModel {
            public class Channels : Tea.TeaModel {
                public var aliIM: String?

                public var dingWebHook: String?

                public var mail: String?

                public var SMS: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.aliIM != nil {
                        map["AliIM"] = self.aliIM!
                    }
                    if self.dingWebHook != nil {
                        map["DingWebHook"] = self.dingWebHook!
                    }
                    if self.mail != nil {
                        map["Mail"] = self.mail!
                    }
                    if self.SMS != nil {
                        map["SMS"] = self.SMS!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["AliIM"] as? String {
                        self.aliIM = value
                    }
                    if let value = dict["DingWebHook"] as? String {
                        self.dingWebHook = value
                    }
                    if let value = dict["Mail"] as? String {
                        self.mail = value
                    }
                    if let value = dict["SMS"] as? String {
                        self.SMS = value
                    }
                }
            }
            public class ChannelsState : Tea.TeaModel {
                public var aliIM: String?

                public var dingWebHook: String?

                public var mail: String?

                public var SMS: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.aliIM != nil {
                        map["AliIM"] = self.aliIM!
                    }
                    if self.dingWebHook != nil {
                        map["DingWebHook"] = self.dingWebHook!
                    }
                    if self.mail != nil {
                        map["Mail"] = self.mail!
                    }
                    if self.SMS != nil {
                        map["SMS"] = self.SMS!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["AliIM"] as? String {
                        self.aliIM = value
                    }
                    if let value = dict["DingWebHook"] as? String {
                        self.dingWebHook = value
                    }
                    if let value = dict["Mail"] as? String {
                        self.mail = value
                    }
                    if let value = dict["SMS"] as? String {
                        self.SMS = value
                    }
                }
            }
            public class ContactGroups : Tea.TeaModel {
                public var contactGroup: [String]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.contactGroup != nil {
                        map["ContactGroup"] = self.contactGroup!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["ContactGroup"] as? [String] {
                        self.contactGroup = value
                    }
                }
            }
            public var channels: DescribeContactListResponseBody.Contacts.Contact.Channels?

            public var channelsState: DescribeContactListResponseBody.Contacts.Contact.ChannelsState?

            public var contactGroups: DescribeContactListResponseBody.Contacts.Contact.ContactGroups?

            public var createTime: Int64?

            public var desc: String?

            public var lang: String?

            public var name: String?

            public var updateTime: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.channels?.validate()
                try self.channelsState?.validate()
                try self.contactGroups?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.channels != nil {
                    map["Channels"] = self.channels?.toMap()
                }
                if self.channelsState != nil {
                    map["ChannelsState"] = self.channelsState?.toMap()
                }
                if self.contactGroups != nil {
                    map["ContactGroups"] = self.contactGroups?.toMap()
                }
                if self.createTime != nil {
                    map["CreateTime"] = self.createTime!
                }
                if self.desc != nil {
                    map["Desc"] = self.desc!
                }
                if self.lang != nil {
                    map["Lang"] = self.lang!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.updateTime != nil {
                    map["UpdateTime"] = self.updateTime!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Channels"] as? [String: Any?] {
                    var model = DescribeContactListResponseBody.Contacts.Contact.Channels()
                    model.fromMap(value)
                    self.channels = model
                }
                if let value = dict["ChannelsState"] as? [String: Any?] {
                    var model = DescribeContactListResponseBody.Contacts.Contact.ChannelsState()
                    model.fromMap(value)
                    self.channelsState = model
                }
                if let value = dict["ContactGroups"] as? [String: Any?] {
                    var model = DescribeContactListResponseBody.Contacts.Contact.ContactGroups()
                    model.fromMap(value)
                    self.contactGroups = model
                }
                if let value = dict["CreateTime"] as? Int64 {
                    self.createTime = value
                }
                if let value = dict["Desc"] as? String {
                    self.desc = value
                }
                if let value = dict["Lang"] as? String {
                    self.lang = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["UpdateTime"] as? Int64 {
                    self.updateTime = value
                }
            }
        }
        public var contact: [DescribeContactListResponseBody.Contacts.Contact]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.contact != nil {
                var tmp : [Any] = []
                for k in self.contact! {
                    tmp.append(k.toMap())
                }
                map["Contact"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Contact"] as? [Any?] {
                var tmp : [DescribeContactListResponseBody.Contacts.Contact] = []
                for v in value {
                    if v != nil {
                        var model = DescribeContactListResponseBody.Contacts.Contact()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.contact = tmp
            }
        }
    }
    public var code: String?

    public var contacts: DescribeContactListResponseBody.Contacts?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public var total: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.contacts?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.contacts != nil {
            map["Contacts"] = self.contacts?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.total != nil {
            map["Total"] = self.total!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Contacts"] as? [String: Any?] {
            var model = DescribeContactListResponseBody.Contacts()
            model.fromMap(value)
            self.contacts = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
        if let value = dict["Total"] as? Int32 {
            self.total = value
        }
    }
}

public class DescribeContactListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeContactListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeContactListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeContactListByContactGroupRequest : Tea.TeaModel {
    public var contactGroupName: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.contactGroupName != nil {
            map["ContactGroupName"] = self.contactGroupName!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ContactGroupName"] as? String {
            self.contactGroupName = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DescribeContactListByContactGroupResponseBody : Tea.TeaModel {
    public class Contacts : Tea.TeaModel {
        public class Contact : Tea.TeaModel {
            public class Channels : Tea.TeaModel {
                public var aliIM: String?

                public var dingWebHook: String?

                public var mail: String?

                public var SMS: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.aliIM != nil {
                        map["AliIM"] = self.aliIM!
                    }
                    if self.dingWebHook != nil {
                        map["DingWebHook"] = self.dingWebHook!
                    }
                    if self.mail != nil {
                        map["Mail"] = self.mail!
                    }
                    if self.SMS != nil {
                        map["SMS"] = self.SMS!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["AliIM"] as? String {
                        self.aliIM = value
                    }
                    if let value = dict["DingWebHook"] as? String {
                        self.dingWebHook = value
                    }
                    if let value = dict["Mail"] as? String {
                        self.mail = value
                    }
                    if let value = dict["SMS"] as? String {
                        self.SMS = value
                    }
                }
            }
            public var channels: DescribeContactListByContactGroupResponseBody.Contacts.Contact.Channels?

            public var createTime: Int64?

            public var desc: String?

            public var name: String?

            public var updateTime: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.channels?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.channels != nil {
                    map["Channels"] = self.channels?.toMap()
                }
                if self.createTime != nil {
                    map["CreateTime"] = self.createTime!
                }
                if self.desc != nil {
                    map["Desc"] = self.desc!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.updateTime != nil {
                    map["UpdateTime"] = self.updateTime!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Channels"] as? [String: Any?] {
                    var model = DescribeContactListByContactGroupResponseBody.Contacts.Contact.Channels()
                    model.fromMap(value)
                    self.channels = model
                }
                if let value = dict["CreateTime"] as? Int64 {
                    self.createTime = value
                }
                if let value = dict["Desc"] as? String {
                    self.desc = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["UpdateTime"] as? Int64 {
                    self.updateTime = value
                }
            }
        }
        public var contact: [DescribeContactListByContactGroupResponseBody.Contacts.Contact]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.contact != nil {
                var tmp : [Any] = []
                for k in self.contact! {
                    tmp.append(k.toMap())
                }
                map["Contact"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Contact"] as? [Any?] {
                var tmp : [DescribeContactListByContactGroupResponseBody.Contacts.Contact] = []
                for v in value {
                    if v != nil {
                        var model = DescribeContactListByContactGroupResponseBody.Contacts.Contact()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.contact = tmp
            }
        }
    }
    public var code: String?

    public var contacts: DescribeContactListByContactGroupResponseBody.Contacts?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.contacts?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.contacts != nil {
            map["Contacts"] = self.contacts?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Contacts"] as? [String: Any?] {
            var model = DescribeContactListByContactGroupResponseBody.Contacts()
            model.fromMap(value)
            self.contacts = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DescribeContactListByContactGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeContactListByContactGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeContactListByContactGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeCustomEventAttributeRequest : Tea.TeaModel {
    public var endTime: String?

    public var eventId: String?

    public var groupId: String?

    public var name: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var regionId: String?

    public var searchKeywords: String?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.eventId != nil {
            map["EventId"] = self.eventId!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.searchKeywords != nil {
            map["SearchKeywords"] = self.searchKeywords!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["EventId"] as? String {
            self.eventId = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["SearchKeywords"] as? String {
            self.searchKeywords = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
    }
}

public class DescribeCustomEventAttributeResponseBody : Tea.TeaModel {
    public class CustomEvents : Tea.TeaModel {
        public class CustomEvent : Tea.TeaModel {
            public var content: String?

            public var groupId: String?

            public var id: String?

            public var name: String?

            public var time: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.content != nil {
                    map["Content"] = self.content!
                }
                if self.groupId != nil {
                    map["GroupId"] = self.groupId!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.time != nil {
                    map["Time"] = self.time!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Content"] as? String {
                    self.content = value
                }
                if let value = dict["GroupId"] as? String {
                    self.groupId = value
                }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["Time"] as? String {
                    self.time = value
                }
            }
        }
        public var customEvent: [DescribeCustomEventAttributeResponseBody.CustomEvents.CustomEvent]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.customEvent != nil {
                var tmp : [Any] = []
                for k in self.customEvent! {
                    tmp.append(k.toMap())
                }
                map["CustomEvent"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CustomEvent"] as? [Any?] {
                var tmp : [DescribeCustomEventAttributeResponseBody.CustomEvents.CustomEvent] = []
                for v in value {
                    if v != nil {
                        var model = DescribeCustomEventAttributeResponseBody.CustomEvents.CustomEvent()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.customEvent = tmp
            }
        }
    }
    public var code: String?

    public var customEvents: DescribeCustomEventAttributeResponseBody.CustomEvents?

    public var message: String?

    public var requestId: String?

    public var success: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.customEvents?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.customEvents != nil {
            map["CustomEvents"] = self.customEvents?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["CustomEvents"] as? [String: Any?] {
            var model = DescribeCustomEventAttributeResponseBody.CustomEvents()
            model.fromMap(value)
            self.customEvents = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? String {
            self.success = value
        }
    }
}

public class DescribeCustomEventAttributeResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeCustomEventAttributeResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeCustomEventAttributeResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeCustomEventCountRequest : Tea.TeaModel {
    public var endTime: String?

    public var eventId: String?

    public var groupId: String?

    public var name: String?

    public var regionId: String?

    public var searchKeywords: String?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.eventId != nil {
            map["EventId"] = self.eventId!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.searchKeywords != nil {
            map["SearchKeywords"] = self.searchKeywords!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["EventId"] as? String {
            self.eventId = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["SearchKeywords"] as? String {
            self.searchKeywords = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
    }
}

public class DescribeCustomEventCountResponseBody : Tea.TeaModel {
    public class CustomEventCounts : Tea.TeaModel {
        public class CustomEventCount : Tea.TeaModel {
            public var name: String?

            public var num: Int32?

            public var time: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.num != nil {
                    map["Num"] = self.num!
                }
                if self.time != nil {
                    map["Time"] = self.time!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["Num"] as? Int32 {
                    self.num = value
                }
                if let value = dict["Time"] as? Int64 {
                    self.time = value
                }
            }
        }
        public var customEventCount: [DescribeCustomEventCountResponseBody.CustomEventCounts.CustomEventCount]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.customEventCount != nil {
                var tmp : [Any] = []
                for k in self.customEventCount! {
                    tmp.append(k.toMap())
                }
                map["CustomEventCount"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CustomEventCount"] as? [Any?] {
                var tmp : [DescribeCustomEventCountResponseBody.CustomEventCounts.CustomEventCount] = []
                for v in value {
                    if v != nil {
                        var model = DescribeCustomEventCountResponseBody.CustomEventCounts.CustomEventCount()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.customEventCount = tmp
            }
        }
    }
    public var code: String?

    public var customEventCounts: DescribeCustomEventCountResponseBody.CustomEventCounts?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.customEventCounts?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.customEventCounts != nil {
            map["CustomEventCounts"] = self.customEventCounts?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["CustomEventCounts"] as? [String: Any?] {
            var model = DescribeCustomEventCountResponseBody.CustomEventCounts()
            model.fromMap(value)
            self.customEventCounts = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DescribeCustomEventCountResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeCustomEventCountResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeCustomEventCountResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeCustomEventHistogramRequest : Tea.TeaModel {
    public var endTime: String?

    public var eventId: String?

    public var groupId: String?

    public var level: String?

    public var name: String?

    public var regionId: String?

    public var searchKeywords: String?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.eventId != nil {
            map["EventId"] = self.eventId!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.level != nil {
            map["Level"] = self.level!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.searchKeywords != nil {
            map["SearchKeywords"] = self.searchKeywords!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["EventId"] as? String {
            self.eventId = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["Level"] as? String {
            self.level = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["SearchKeywords"] as? String {
            self.searchKeywords = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
    }
}

public class DescribeCustomEventHistogramResponseBody : Tea.TeaModel {
    public class EventHistograms : Tea.TeaModel {
        public class EventHistogram : Tea.TeaModel {
            public var count: Int64?

            public var endTime: Int64?

            public var startTime: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.count != nil {
                    map["Count"] = self.count!
                }
                if self.endTime != nil {
                    map["EndTime"] = self.endTime!
                }
                if self.startTime != nil {
                    map["StartTime"] = self.startTime!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Count"] as? Int64 {
                    self.count = value
                }
                if let value = dict["EndTime"] as? Int64 {
                    self.endTime = value
                }
                if let value = dict["StartTime"] as? Int64 {
                    self.startTime = value
                }
            }
        }
        public var eventHistogram: [DescribeCustomEventHistogramResponseBody.EventHistograms.EventHistogram]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.eventHistogram != nil {
                var tmp : [Any] = []
                for k in self.eventHistogram! {
                    tmp.append(k.toMap())
                }
                map["EventHistogram"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["EventHistogram"] as? [Any?] {
                var tmp : [DescribeCustomEventHistogramResponseBody.EventHistograms.EventHistogram] = []
                for v in value {
                    if v != nil {
                        var model = DescribeCustomEventHistogramResponseBody.EventHistograms.EventHistogram()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.eventHistogram = tmp
            }
        }
    }
    public var code: String?

    public var eventHistograms: DescribeCustomEventHistogramResponseBody.EventHistograms?

    public var message: String?

    public var requestId: String?

    public var success: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.eventHistograms?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.eventHistograms != nil {
            map["EventHistograms"] = self.eventHistograms?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["EventHistograms"] as? [String: Any?] {
            var model = DescribeCustomEventHistogramResponseBody.EventHistograms()
            model.fromMap(value)
            self.eventHistograms = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? String {
            self.success = value
        }
    }
}

public class DescribeCustomEventHistogramResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeCustomEventHistogramResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeCustomEventHistogramResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeCustomMetricListRequest : Tea.TeaModel {
    public var dimension: String?

    public var groupId: String?

    public var md5: String?

    public var metricName: String?

    public var pageNumber: String?

    public var pageSize: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dimension != nil {
            map["Dimension"] = self.dimension!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.md5 != nil {
            map["Md5"] = self.md5!
        }
        if self.metricName != nil {
            map["MetricName"] = self.metricName!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Dimension"] as? String {
            self.dimension = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["Md5"] as? String {
            self.md5 = value
        }
        if let value = dict["MetricName"] as? String {
            self.metricName = value
        }
        if let value = dict["PageNumber"] as? String {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? String {
            self.pageSize = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DescribeCustomMetricListResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var result: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.result != nil {
            map["Result"] = self.result!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Result"] as? String {
            self.result = value
        }
    }
}

public class DescribeCustomMetricListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeCustomMetricListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeCustomMetricListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeDynamicTagRuleListRequest : Tea.TeaModel {
    public var dynamicTagRuleId: String?

    public var pageNumber: String?

    public var pageSize: String?

    public var tagKey: String?

    public var tagRegionId: String?

    public var tagValue: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dynamicTagRuleId != nil {
            map["DynamicTagRuleId"] = self.dynamicTagRuleId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.tagKey != nil {
            map["TagKey"] = self.tagKey!
        }
        if self.tagRegionId != nil {
            map["TagRegionId"] = self.tagRegionId!
        }
        if self.tagValue != nil {
            map["TagValue"] = self.tagValue!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DynamicTagRuleId"] as? String {
            self.dynamicTagRuleId = value
        }
        if let value = dict["PageNumber"] as? String {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? String {
            self.pageSize = value
        }
        if let value = dict["TagKey"] as? String {
            self.tagKey = value
        }
        if let value = dict["TagRegionId"] as? String {
            self.tagRegionId = value
        }
        if let value = dict["TagValue"] as? String {
            self.tagValue = value
        }
    }
}

public class DescribeDynamicTagRuleListResponseBody : Tea.TeaModel {
    public class TagGroupList : Tea.TeaModel {
        public class TagGroup : Tea.TeaModel {
            public class ContactGroupList : Tea.TeaModel {
                public var contactGroupList: [String]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.contactGroupList != nil {
                        map["ContactGroupList"] = self.contactGroupList!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["ContactGroupList"] as? [String] {
                        self.contactGroupList = value
                    }
                }
            }
            public class MatchExpress : Tea.TeaModel {
                public class MatchExpress : Tea.TeaModel {
                    public var tagKey: String?

                    public var tagValue: String?

                    public var tagValueMatchFunction: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.tagKey != nil {
                            map["TagKey"] = self.tagKey!
                        }
                        if self.tagValue != nil {
                            map["TagValue"] = self.tagValue!
                        }
                        if self.tagValueMatchFunction != nil {
                            map["TagValueMatchFunction"] = self.tagValueMatchFunction!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["TagKey"] as? String {
                            self.tagKey = value
                        }
                        if let value = dict["TagValue"] as? String {
                            self.tagValue = value
                        }
                        if let value = dict["TagValueMatchFunction"] as? String {
                            self.tagValueMatchFunction = value
                        }
                    }
                }
                public var matchExpress: [DescribeDynamicTagRuleListResponseBody.TagGroupList.TagGroup.MatchExpress.MatchExpress]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.matchExpress != nil {
                        var tmp : [Any] = []
                        for k in self.matchExpress! {
                            tmp.append(k.toMap())
                        }
                        map["MatchExpress"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["MatchExpress"] as? [Any?] {
                        var tmp : [DescribeDynamicTagRuleListResponseBody.TagGroupList.TagGroup.MatchExpress.MatchExpress] = []
                        for v in value {
                            if v != nil {
                                var model = DescribeDynamicTagRuleListResponseBody.TagGroupList.TagGroup.MatchExpress.MatchExpress()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.matchExpress = tmp
                    }
                }
            }
            public class TagValueBlacklist : Tea.TeaModel {
                public var tagValueBlacklist: [String]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.tagValueBlacklist != nil {
                        map["TagValueBlacklist"] = self.tagValueBlacklist!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["TagValueBlacklist"] as? [String] {
                        self.tagValueBlacklist = value
                    }
                }
            }
            public class TemplateIdList : Tea.TeaModel {
                public var templateIdList: [String]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.templateIdList != nil {
                        map["TemplateIdList"] = self.templateIdList!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["TemplateIdList"] as? [String] {
                        self.templateIdList = value
                    }
                }
            }
            public var contactGroupList: DescribeDynamicTagRuleListResponseBody.TagGroupList.TagGroup.ContactGroupList?

            public var dynamicTagRuleId: String?

            public var matchExpress: DescribeDynamicTagRuleListResponseBody.TagGroupList.TagGroup.MatchExpress?

            public var matchExpressFilterRelation: String?

            public var regionId: String?

            public var status: String?

            public var tagKey: String?

            public var tagValueBlacklist: DescribeDynamicTagRuleListResponseBody.TagGroupList.TagGroup.TagValueBlacklist?

            public var templateIdList: DescribeDynamicTagRuleListResponseBody.TagGroupList.TagGroup.TemplateIdList?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.contactGroupList?.validate()
                try self.matchExpress?.validate()
                try self.tagValueBlacklist?.validate()
                try self.templateIdList?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.contactGroupList != nil {
                    map["ContactGroupList"] = self.contactGroupList?.toMap()
                }
                if self.dynamicTagRuleId != nil {
                    map["DynamicTagRuleId"] = self.dynamicTagRuleId!
                }
                if self.matchExpress != nil {
                    map["MatchExpress"] = self.matchExpress?.toMap()
                }
                if self.matchExpressFilterRelation != nil {
                    map["MatchExpressFilterRelation"] = self.matchExpressFilterRelation!
                }
                if self.regionId != nil {
                    map["RegionId"] = self.regionId!
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                if self.tagKey != nil {
                    map["TagKey"] = self.tagKey!
                }
                if self.tagValueBlacklist != nil {
                    map["TagValueBlacklist"] = self.tagValueBlacklist?.toMap()
                }
                if self.templateIdList != nil {
                    map["TemplateIdList"] = self.templateIdList?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ContactGroupList"] as? [String: Any?] {
                    var model = DescribeDynamicTagRuleListResponseBody.TagGroupList.TagGroup.ContactGroupList()
                    model.fromMap(value)
                    self.contactGroupList = model
                }
                if let value = dict["DynamicTagRuleId"] as? String {
                    self.dynamicTagRuleId = value
                }
                if let value = dict["MatchExpress"] as? [String: Any?] {
                    var model = DescribeDynamicTagRuleListResponseBody.TagGroupList.TagGroup.MatchExpress()
                    model.fromMap(value)
                    self.matchExpress = model
                }
                if let value = dict["MatchExpressFilterRelation"] as? String {
                    self.matchExpressFilterRelation = value
                }
                if let value = dict["RegionId"] as? String {
                    self.regionId = value
                }
                if let value = dict["Status"] as? String {
                    self.status = value
                }
                if let value = dict["TagKey"] as? String {
                    self.tagKey = value
                }
                if let value = dict["TagValueBlacklist"] as? [String: Any?] {
                    var model = DescribeDynamicTagRuleListResponseBody.TagGroupList.TagGroup.TagValueBlacklist()
                    model.fromMap(value)
                    self.tagValueBlacklist = model
                }
                if let value = dict["TemplateIdList"] as? [String: Any?] {
                    var model = DescribeDynamicTagRuleListResponseBody.TagGroupList.TagGroup.TemplateIdList()
                    model.fromMap(value)
                    self.templateIdList = model
                }
            }
        }
        public var tagGroup: [DescribeDynamicTagRuleListResponseBody.TagGroupList.TagGroup]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tagGroup != nil {
                var tmp : [Any] = []
                for k in self.tagGroup! {
                    tmp.append(k.toMap())
                }
                map["TagGroup"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["TagGroup"] as? [Any?] {
                var tmp : [DescribeDynamicTagRuleListResponseBody.TagGroupList.TagGroup] = []
                for v in value {
                    if v != nil {
                        var model = DescribeDynamicTagRuleListResponseBody.TagGroupList.TagGroup()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.tagGroup = tmp
            }
        }
    }
    public var code: String?

    public var message: String?

    public var pageNumber: String?

    public var pageSize: String?

    public var requestId: String?

    public var success: Bool?

    public var tagGroupList: DescribeDynamicTagRuleListResponseBody.TagGroupList?

    public var total: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tagGroupList?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.tagGroupList != nil {
            map["TagGroupList"] = self.tagGroupList?.toMap()
        }
        if self.total != nil {
            map["Total"] = self.total!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["PageNumber"] as? String {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? String {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
        if let value = dict["TagGroupList"] as? [String: Any?] {
            var model = DescribeDynamicTagRuleListResponseBody.TagGroupList()
            model.fromMap(value)
            self.tagGroupList = model
        }
        if let value = dict["Total"] as? Int32 {
            self.total = value
        }
    }
}

public class DescribeDynamicTagRuleListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeDynamicTagRuleListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeDynamicTagRuleListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeEventRuleAttributeRequest : Tea.TeaModel {
    public var regionId: String?

    public var ruleName: String?

    public var silenceTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.ruleName != nil {
            map["RuleName"] = self.ruleName!
        }
        if self.silenceTime != nil {
            map["SilenceTime"] = self.silenceTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["RuleName"] as? String {
            self.ruleName = value
        }
        if let value = dict["SilenceTime"] as? String {
            self.silenceTime = value
        }
    }
}

public class DescribeEventRuleAttributeResponseBody : Tea.TeaModel {
    public class Result : Tea.TeaModel {
        public class EventPattern : Tea.TeaModel {
            public class EventTypeList : Tea.TeaModel {
                public var eventTypeList: [String]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.eventTypeList != nil {
                        map["EventTypeList"] = self.eventTypeList!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["EventTypeList"] as? [String] {
                        self.eventTypeList = value
                    }
                }
            }
            public class KeywordFilterObj : Tea.TeaModel {
                public class Keywords : Tea.TeaModel {
                    public var keyword: [String]?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.keyword != nil {
                            map["keyword"] = self.keyword!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["keyword"] as? [String] {
                            self.keyword = value
                        }
                    }
                }
                public var keywords: DescribeEventRuleAttributeResponseBody.Result.EventPattern.KeywordFilterObj.Keywords?

                public var relation: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.keywords?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.keywords != nil {
                        map["Keywords"] = self.keywords?.toMap()
                    }
                    if self.relation != nil {
                        map["Relation"] = self.relation!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Keywords"] as? [String: Any?] {
                        var model = DescribeEventRuleAttributeResponseBody.Result.EventPattern.KeywordFilterObj.Keywords()
                        model.fromMap(value)
                        self.keywords = model
                    }
                    if let value = dict["Relation"] as? String {
                        self.relation = value
                    }
                }
            }
            public class LevelList : Tea.TeaModel {
                public var levelList: [String]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.levelList != nil {
                        map["LevelList"] = self.levelList!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["LevelList"] as? [String] {
                        self.levelList = value
                    }
                }
            }
            public class NameList : Tea.TeaModel {
                public var nameList: [String]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.nameList != nil {
                        map["NameList"] = self.nameList!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["NameList"] as? [String] {
                        self.nameList = value
                    }
                }
            }
            public class StatusList : Tea.TeaModel {
                public var statusList: [String]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.statusList != nil {
                        map["StatusList"] = self.statusList!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["StatusList"] as? [String] {
                        self.statusList = value
                    }
                }
            }
            public var eventTypeList: DescribeEventRuleAttributeResponseBody.Result.EventPattern.EventTypeList?

            public var keywordFilterObj: DescribeEventRuleAttributeResponseBody.Result.EventPattern.KeywordFilterObj?

            public var levelList: DescribeEventRuleAttributeResponseBody.Result.EventPattern.LevelList?

            public var nameList: DescribeEventRuleAttributeResponseBody.Result.EventPattern.NameList?

            public var product: String?

            public var SQLFilter: String?

            public var statusList: DescribeEventRuleAttributeResponseBody.Result.EventPattern.StatusList?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.eventTypeList?.validate()
                try self.keywordFilterObj?.validate()
                try self.levelList?.validate()
                try self.nameList?.validate()
                try self.statusList?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.eventTypeList != nil {
                    map["EventTypeList"] = self.eventTypeList?.toMap()
                }
                if self.keywordFilterObj != nil {
                    map["KeywordFilterObj"] = self.keywordFilterObj?.toMap()
                }
                if self.levelList != nil {
                    map["LevelList"] = self.levelList?.toMap()
                }
                if self.nameList != nil {
                    map["NameList"] = self.nameList?.toMap()
                }
                if self.product != nil {
                    map["Product"] = self.product!
                }
                if self.SQLFilter != nil {
                    map["SQLFilter"] = self.SQLFilter!
                }
                if self.statusList != nil {
                    map["StatusList"] = self.statusList?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["EventTypeList"] as? [String: Any?] {
                    var model = DescribeEventRuleAttributeResponseBody.Result.EventPattern.EventTypeList()
                    model.fromMap(value)
                    self.eventTypeList = model
                }
                if let value = dict["KeywordFilterObj"] as? [String: Any?] {
                    var model = DescribeEventRuleAttributeResponseBody.Result.EventPattern.KeywordFilterObj()
                    model.fromMap(value)
                    self.keywordFilterObj = model
                }
                if let value = dict["LevelList"] as? [String: Any?] {
                    var model = DescribeEventRuleAttributeResponseBody.Result.EventPattern.LevelList()
                    model.fromMap(value)
                    self.levelList = model
                }
                if let value = dict["NameList"] as? [String: Any?] {
                    var model = DescribeEventRuleAttributeResponseBody.Result.EventPattern.NameList()
                    model.fromMap(value)
                    self.nameList = model
                }
                if let value = dict["Product"] as? String {
                    self.product = value
                }
                if let value = dict["SQLFilter"] as? String {
                    self.SQLFilter = value
                }
                if let value = dict["StatusList"] as? [String: Any?] {
                    var model = DescribeEventRuleAttributeResponseBody.Result.EventPattern.StatusList()
                    model.fromMap(value)
                    self.statusList = model
                }
            }
        }
        public var description_: String?

        public var eventPattern: DescribeEventRuleAttributeResponseBody.Result.EventPattern?

        public var eventType: String?

        public var groupId: String?

        public var name: String?

        public var state: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.eventPattern?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.eventPattern != nil {
                map["EventPattern"] = self.eventPattern?.toMap()
            }
            if self.eventType != nil {
                map["EventType"] = self.eventType!
            }
            if self.groupId != nil {
                map["GroupId"] = self.groupId!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.state != nil {
                map["State"] = self.state!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["EventPattern"] as? [String: Any?] {
                var model = DescribeEventRuleAttributeResponseBody.Result.EventPattern()
                model.fromMap(value)
                self.eventPattern = model
            }
            if let value = dict["EventType"] as? String {
                self.eventType = value
            }
            if let value = dict["GroupId"] as? String {
                self.groupId = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["State"] as? String {
                self.state = value
            }
        }
    }
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var result: DescribeEventRuleAttributeResponseBody.Result?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.result?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.result != nil {
            map["Result"] = self.result?.toMap()
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Result"] as? [String: Any?] {
            var model = DescribeEventRuleAttributeResponseBody.Result()
            model.fromMap(value)
            self.result = model
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DescribeEventRuleAttributeResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeEventRuleAttributeResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeEventRuleAttributeResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeEventRuleListRequest : Tea.TeaModel {
    public var groupId: String?

    public var isEnable: Bool?

    public var namePrefix: String?

    public var pageNumber: String?

    public var pageSize: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.isEnable != nil {
            map["IsEnable"] = self.isEnable!
        }
        if self.namePrefix != nil {
            map["NamePrefix"] = self.namePrefix!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["IsEnable"] as? Bool {
            self.isEnable = value
        }
        if let value = dict["NamePrefix"] as? String {
            self.namePrefix = value
        }
        if let value = dict["PageNumber"] as? String {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? String {
            self.pageSize = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DescribeEventRuleListResponseBody : Tea.TeaModel {
    public class EventRules : Tea.TeaModel {
        public class EventRule : Tea.TeaModel {
            public class EventPattern : Tea.TeaModel {
                public class EventPattern : Tea.TeaModel {
                    public class EventTypeList : Tea.TeaModel {
                        public var eventTypeList: [String]?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.eventTypeList != nil {
                                map["EventTypeList"] = self.eventTypeList!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["EventTypeList"] as? [String] {
                                self.eventTypeList = value
                            }
                        }
                    }
                    public class KeywordFilter : Tea.TeaModel {
                        public class Keywords : Tea.TeaModel {
                            public var keywords: [String]?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.keywords != nil {
                                    map["Keywords"] = self.keywords!
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                guard let dict else { return }
                                if let value = dict["Keywords"] as? [String] {
                                    self.keywords = value
                                }
                            }
                        }
                        public var keywords: DescribeEventRuleListResponseBody.EventRules.EventRule.EventPattern.EventPattern.KeywordFilter.Keywords?

                        public var relation: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                            try self.keywords?.validate()
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.keywords != nil {
                                map["Keywords"] = self.keywords?.toMap()
                            }
                            if self.relation != nil {
                                map["Relation"] = self.relation!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Keywords"] as? [String: Any?] {
                                var model = DescribeEventRuleListResponseBody.EventRules.EventRule.EventPattern.EventPattern.KeywordFilter.Keywords()
                                model.fromMap(value)
                                self.keywords = model
                            }
                            if let value = dict["Relation"] as? String {
                                self.relation = value
                            }
                        }
                    }
                    public class LevelList : Tea.TeaModel {
                        public var levelList: [String]?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.levelList != nil {
                                map["LevelList"] = self.levelList!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["LevelList"] as? [String] {
                                self.levelList = value
                            }
                        }
                    }
                    public class NameList : Tea.TeaModel {
                        public var nameList: [String]?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.nameList != nil {
                                map["NameList"] = self.nameList!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["NameList"] as? [String] {
                                self.nameList = value
                            }
                        }
                    }
                    public var customFilters: String?

                    public var eventTypeList: DescribeEventRuleListResponseBody.EventRules.EventRule.EventPattern.EventPattern.EventTypeList?

                    public var keywordFilter: DescribeEventRuleListResponseBody.EventRules.EventRule.EventPattern.EventPattern.KeywordFilter?

                    public var levelList: DescribeEventRuleListResponseBody.EventRules.EventRule.EventPattern.EventPattern.LevelList?

                    public var nameList: DescribeEventRuleListResponseBody.EventRules.EventRule.EventPattern.EventPattern.NameList?

                    public var product: String?

                    public var SQLFilter: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                        try self.eventTypeList?.validate()
                        try self.keywordFilter?.validate()
                        try self.levelList?.validate()
                        try self.nameList?.validate()
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.customFilters != nil {
                            map["CustomFilters"] = self.customFilters!
                        }
                        if self.eventTypeList != nil {
                            map["EventTypeList"] = self.eventTypeList?.toMap()
                        }
                        if self.keywordFilter != nil {
                            map["KeywordFilter"] = self.keywordFilter?.toMap()
                        }
                        if self.levelList != nil {
                            map["LevelList"] = self.levelList?.toMap()
                        }
                        if self.nameList != nil {
                            map["NameList"] = self.nameList?.toMap()
                        }
                        if self.product != nil {
                            map["Product"] = self.product!
                        }
                        if self.SQLFilter != nil {
                            map["SQLFilter"] = self.SQLFilter!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["CustomFilters"] as? String {
                            self.customFilters = value
                        }
                        if let value = dict["EventTypeList"] as? [String: Any?] {
                            var model = DescribeEventRuleListResponseBody.EventRules.EventRule.EventPattern.EventPattern.EventTypeList()
                            model.fromMap(value)
                            self.eventTypeList = model
                        }
                        if let value = dict["KeywordFilter"] as? [String: Any?] {
                            var model = DescribeEventRuleListResponseBody.EventRules.EventRule.EventPattern.EventPattern.KeywordFilter()
                            model.fromMap(value)
                            self.keywordFilter = model
                        }
                        if let value = dict["LevelList"] as? [String: Any?] {
                            var model = DescribeEventRuleListResponseBody.EventRules.EventRule.EventPattern.EventPattern.LevelList()
                            model.fromMap(value)
                            self.levelList = model
                        }
                        if let value = dict["NameList"] as? [String: Any?] {
                            var model = DescribeEventRuleListResponseBody.EventRules.EventRule.EventPattern.EventPattern.NameList()
                            model.fromMap(value)
                            self.nameList = model
                        }
                        if let value = dict["Product"] as? String {
                            self.product = value
                        }
                        if let value = dict["SQLFilter"] as? String {
                            self.SQLFilter = value
                        }
                    }
                }
                public var eventPattern: [DescribeEventRuleListResponseBody.EventRules.EventRule.EventPattern.EventPattern]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.eventPattern != nil {
                        var tmp : [Any] = []
                        for k in self.eventPattern! {
                            tmp.append(k.toMap())
                        }
                        map["EventPattern"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["EventPattern"] as? [Any?] {
                        var tmp : [DescribeEventRuleListResponseBody.EventRules.EventRule.EventPattern.EventPattern] = []
                        for v in value {
                            if v != nil {
                                var model = DescribeEventRuleListResponseBody.EventRules.EventRule.EventPattern.EventPattern()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.eventPattern = tmp
                    }
                }
            }
            public var description_: String?

            public var eventPattern: DescribeEventRuleListResponseBody.EventRules.EventRule.EventPattern?

            public var eventType: String?

            public var groupId: String?

            public var name: String?

            public var silenceTime: Int64?

            public var state: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.eventPattern?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.eventPattern != nil {
                    map["EventPattern"] = self.eventPattern?.toMap()
                }
                if self.eventType != nil {
                    map["EventType"] = self.eventType!
                }
                if self.groupId != nil {
                    map["GroupId"] = self.groupId!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.silenceTime != nil {
                    map["SilenceTime"] = self.silenceTime!
                }
                if self.state != nil {
                    map["State"] = self.state!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["EventPattern"] as? [String: Any?] {
                    var model = DescribeEventRuleListResponseBody.EventRules.EventRule.EventPattern()
                    model.fromMap(value)
                    self.eventPattern = model
                }
                if let value = dict["EventType"] as? String {
                    self.eventType = value
                }
                if let value = dict["GroupId"] as? String {
                    self.groupId = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["SilenceTime"] as? Int64 {
                    self.silenceTime = value
                }
                if let value = dict["State"] as? String {
                    self.state = value
                }
            }
        }
        public var eventRule: [DescribeEventRuleListResponseBody.EventRules.EventRule]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.eventRule != nil {
                var tmp : [Any] = []
                for k in self.eventRule! {
                    tmp.append(k.toMap())
                }
                map["EventRule"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["EventRule"] as? [Any?] {
                var tmp : [DescribeEventRuleListResponseBody.EventRules.EventRule] = []
                for v in value {
                    if v != nil {
                        var model = DescribeEventRuleListResponseBody.EventRules.EventRule()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.eventRule = tmp
            }
        }
    }
    public var code: String?

    public var eventRules: DescribeEventRuleListResponseBody.EventRules?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public var total: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.eventRules?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.eventRules != nil {
            map["EventRules"] = self.eventRules?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.total != nil {
            map["Total"] = self.total!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["EventRules"] as? [String: Any?] {
            var model = DescribeEventRuleListResponseBody.EventRules()
            model.fromMap(value)
            self.eventRules = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
        if let value = dict["Total"] as? Int32 {
            self.total = value
        }
    }
}

public class DescribeEventRuleListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeEventRuleListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeEventRuleListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeEventRuleTargetListRequest : Tea.TeaModel {
    public var regionId: String?

    public var ruleName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.ruleName != nil {
            map["RuleName"] = self.ruleName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["RuleName"] as? String {
            self.ruleName = value
        }
    }
}

public class DescribeEventRuleTargetListResponseBody : Tea.TeaModel {
    public class ContactParameters : Tea.TeaModel {
        public class ContactParameter : Tea.TeaModel {
            public var contactGroupName: String?

            public var id: String?

            public var level: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.contactGroupName != nil {
                    map["ContactGroupName"] = self.contactGroupName!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.level != nil {
                    map["Level"] = self.level!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ContactGroupName"] as? String {
                    self.contactGroupName = value
                }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
                if let value = dict["Level"] as? String {
                    self.level = value
                }
            }
        }
        public var contactParameter: [DescribeEventRuleTargetListResponseBody.ContactParameters.ContactParameter]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.contactParameter != nil {
                var tmp : [Any] = []
                for k in self.contactParameter! {
                    tmp.append(k.toMap())
                }
                map["ContactParameter"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ContactParameter"] as? [Any?] {
                var tmp : [DescribeEventRuleTargetListResponseBody.ContactParameters.ContactParameter] = []
                for v in value {
                    if v != nil {
                        var model = DescribeEventRuleTargetListResponseBody.ContactParameters.ContactParameter()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.contactParameter = tmp
            }
        }
    }
    public class FcParameters : Tea.TeaModel {
        public class FCParameter : Tea.TeaModel {
            public var arn: String?

            public var functionName: String?

            public var id: String?

            public var region: String?

            public var serviceName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.arn != nil {
                    map["Arn"] = self.arn!
                }
                if self.functionName != nil {
                    map["FunctionName"] = self.functionName!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.region != nil {
                    map["Region"] = self.region!
                }
                if self.serviceName != nil {
                    map["ServiceName"] = self.serviceName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Arn"] as? String {
                    self.arn = value
                }
                if let value = dict["FunctionName"] as? String {
                    self.functionName = value
                }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
                if let value = dict["Region"] as? String {
                    self.region = value
                }
                if let value = dict["ServiceName"] as? String {
                    self.serviceName = value
                }
            }
        }
        public var FCParameter: [DescribeEventRuleTargetListResponseBody.FcParameters.FCParameter]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.FCParameter != nil {
                var tmp : [Any] = []
                for k in self.FCParameter! {
                    tmp.append(k.toMap())
                }
                map["FCParameter"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["FCParameter"] as? [Any?] {
                var tmp : [DescribeEventRuleTargetListResponseBody.FcParameters.FCParameter] = []
                for v in value {
                    if v != nil {
                        var model = DescribeEventRuleTargetListResponseBody.FcParameters.FCParameter()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.FCParameter = tmp
            }
        }
    }
    public class MnsParameters : Tea.TeaModel {
        public class MnsParameter : Tea.TeaModel {
            public var arn: String?

            public var id: String?

            public var queue: String?

            public var region: String?

            public var topic: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.arn != nil {
                    map["Arn"] = self.arn!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.queue != nil {
                    map["Queue"] = self.queue!
                }
                if self.region != nil {
                    map["Region"] = self.region!
                }
                if self.topic != nil {
                    map["Topic"] = self.topic!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Arn"] as? String {
                    self.arn = value
                }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
                if let value = dict["Queue"] as? String {
                    self.queue = value
                }
                if let value = dict["Region"] as? String {
                    self.region = value
                }
                if let value = dict["Topic"] as? String {
                    self.topic = value
                }
            }
        }
        public var mnsParameter: [DescribeEventRuleTargetListResponseBody.MnsParameters.MnsParameter]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.mnsParameter != nil {
                var tmp : [Any] = []
                for k in self.mnsParameter! {
                    tmp.append(k.toMap())
                }
                map["MnsParameter"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["MnsParameter"] as? [Any?] {
                var tmp : [DescribeEventRuleTargetListResponseBody.MnsParameters.MnsParameter] = []
                for v in value {
                    if v != nil {
                        var model = DescribeEventRuleTargetListResponseBody.MnsParameters.MnsParameter()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.mnsParameter = tmp
            }
        }
    }
    public class OpenApiParameters : Tea.TeaModel {
        public class OpenApiParameters : Tea.TeaModel {
            public var action: String?

            public var arn: String?

            public var id: String?

            public var product: String?

            public var region: String?

            public var role: String?

            public var version: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.action != nil {
                    map["Action"] = self.action!
                }
                if self.arn != nil {
                    map["Arn"] = self.arn!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.product != nil {
                    map["Product"] = self.product!
                }
                if self.region != nil {
                    map["Region"] = self.region!
                }
                if self.role != nil {
                    map["Role"] = self.role!
                }
                if self.version != nil {
                    map["Version"] = self.version!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Action"] as? String {
                    self.action = value
                }
                if let value = dict["Arn"] as? String {
                    self.arn = value
                }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
                if let value = dict["Product"] as? String {
                    self.product = value
                }
                if let value = dict["Region"] as? String {
                    self.region = value
                }
                if let value = dict["Role"] as? String {
                    self.role = value
                }
                if let value = dict["Version"] as? String {
                    self.version = value
                }
            }
        }
        public var openApiParameters: [DescribeEventRuleTargetListResponseBody.OpenApiParameters.OpenApiParameters]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.openApiParameters != nil {
                var tmp : [Any] = []
                for k in self.openApiParameters! {
                    tmp.append(k.toMap())
                }
                map["OpenApiParameters"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["OpenApiParameters"] as? [Any?] {
                var tmp : [DescribeEventRuleTargetListResponseBody.OpenApiParameters.OpenApiParameters] = []
                for v in value {
                    if v != nil {
                        var model = DescribeEventRuleTargetListResponseBody.OpenApiParameters.OpenApiParameters()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.openApiParameters = tmp
            }
        }
    }
    public class SlsParameters : Tea.TeaModel {
        public class SlsParameter : Tea.TeaModel {
            public var arn: String?

            public var id: String?

            public var logStore: String?

            public var project: String?

            public var region: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.arn != nil {
                    map["Arn"] = self.arn!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.logStore != nil {
                    map["LogStore"] = self.logStore!
                }
                if self.project != nil {
                    map["Project"] = self.project!
                }
                if self.region != nil {
                    map["Region"] = self.region!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Arn"] as? String {
                    self.arn = value
                }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
                if let value = dict["LogStore"] as? String {
                    self.logStore = value
                }
                if let value = dict["Project"] as? String {
                    self.project = value
                }
                if let value = dict["Region"] as? String {
                    self.region = value
                }
            }
        }
        public var slsParameter: [DescribeEventRuleTargetListResponseBody.SlsParameters.SlsParameter]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.slsParameter != nil {
                var tmp : [Any] = []
                for k in self.slsParameter! {
                    tmp.append(k.toMap())
                }
                map["SlsParameter"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["SlsParameter"] as? [Any?] {
                var tmp : [DescribeEventRuleTargetListResponseBody.SlsParameters.SlsParameter] = []
                for v in value {
                    if v != nil {
                        var model = DescribeEventRuleTargetListResponseBody.SlsParameters.SlsParameter()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.slsParameter = tmp
            }
        }
    }
    public class WebhookParameters : Tea.TeaModel {
        public class WebhookParameter : Tea.TeaModel {
            public var id: String?

            public var method: String?

            public var protocol_: String?

            public var url: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.method != nil {
                    map["Method"] = self.method!
                }
                if self.protocol_ != nil {
                    map["Protocol"] = self.protocol_!
                }
                if self.url != nil {
                    map["Url"] = self.url!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
                if let value = dict["Method"] as? String {
                    self.method = value
                }
                if let value = dict["Protocol"] as? String {
                    self.protocol_ = value
                }
                if let value = dict["Url"] as? String {
                    self.url = value
                }
            }
        }
        public var webhookParameter: [DescribeEventRuleTargetListResponseBody.WebhookParameters.WebhookParameter]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.webhookParameter != nil {
                var tmp : [Any] = []
                for k in self.webhookParameter! {
                    tmp.append(k.toMap())
                }
                map["WebhookParameter"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["WebhookParameter"] as? [Any?] {
                var tmp : [DescribeEventRuleTargetListResponseBody.WebhookParameters.WebhookParameter] = []
                for v in value {
                    if v != nil {
                        var model = DescribeEventRuleTargetListResponseBody.WebhookParameters.WebhookParameter()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.webhookParameter = tmp
            }
        }
    }
    public var code: String?

    public var contactParameters: DescribeEventRuleTargetListResponseBody.ContactParameters?

    public var fcParameters: DescribeEventRuleTargetListResponseBody.FcParameters?

    public var message: String?

    public var mnsParameters: DescribeEventRuleTargetListResponseBody.MnsParameters?

    public var openApiParameters: DescribeEventRuleTargetListResponseBody.OpenApiParameters?

    public var requestId: String?

    public var slsParameters: DescribeEventRuleTargetListResponseBody.SlsParameters?

    public var webhookParameters: DescribeEventRuleTargetListResponseBody.WebhookParameters?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.contactParameters?.validate()
        try self.fcParameters?.validate()
        try self.mnsParameters?.validate()
        try self.openApiParameters?.validate()
        try self.slsParameters?.validate()
        try self.webhookParameters?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.contactParameters != nil {
            map["ContactParameters"] = self.contactParameters?.toMap()
        }
        if self.fcParameters != nil {
            map["FcParameters"] = self.fcParameters?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.mnsParameters != nil {
            map["MnsParameters"] = self.mnsParameters?.toMap()
        }
        if self.openApiParameters != nil {
            map["OpenApiParameters"] = self.openApiParameters?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.slsParameters != nil {
            map["SlsParameters"] = self.slsParameters?.toMap()
        }
        if self.webhookParameters != nil {
            map["WebhookParameters"] = self.webhookParameters?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["ContactParameters"] as? [String: Any?] {
            var model = DescribeEventRuleTargetListResponseBody.ContactParameters()
            model.fromMap(value)
            self.contactParameters = model
        }
        if let value = dict["FcParameters"] as? [String: Any?] {
            var model = DescribeEventRuleTargetListResponseBody.FcParameters()
            model.fromMap(value)
            self.fcParameters = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["MnsParameters"] as? [String: Any?] {
            var model = DescribeEventRuleTargetListResponseBody.MnsParameters()
            model.fromMap(value)
            self.mnsParameters = model
        }
        if let value = dict["OpenApiParameters"] as? [String: Any?] {
            var model = DescribeEventRuleTargetListResponseBody.OpenApiParameters()
            model.fromMap(value)
            self.openApiParameters = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SlsParameters"] as? [String: Any?] {
            var model = DescribeEventRuleTargetListResponseBody.SlsParameters()
            model.fromMap(value)
            self.slsParameters = model
        }
        if let value = dict["WebhookParameters"] as? [String: Any?] {
            var model = DescribeEventRuleTargetListResponseBody.WebhookParameters()
            model.fromMap(value)
            self.webhookParameters = model
        }
    }
}

public class DescribeEventRuleTargetListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeEventRuleTargetListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeEventRuleTargetListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeExporterOutputListRequest : Tea.TeaModel {
    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DescribeExporterOutputListResponseBody : Tea.TeaModel {
    public class Datapoints : Tea.TeaModel {
        public class Datapoint : Tea.TeaModel {
            public class ConfigJson : Tea.TeaModel {
                public var ak: String?

                public var endpoint: String?

                public var logstore: String?

                public var project: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.ak != nil {
                        map["ak"] = self.ak!
                    }
                    if self.endpoint != nil {
                        map["endpoint"] = self.endpoint!
                    }
                    if self.logstore != nil {
                        map["logstore"] = self.logstore!
                    }
                    if self.project != nil {
                        map["project"] = self.project!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["ak"] as? String {
                        self.ak = value
                    }
                    if let value = dict["endpoint"] as? String {
                        self.endpoint = value
                    }
                    if let value = dict["logstore"] as? String {
                        self.logstore = value
                    }
                    if let value = dict["project"] as? String {
                        self.project = value
                    }
                }
            }
            public var configJson: DescribeExporterOutputListResponseBody.Datapoints.Datapoint.ConfigJson?

            public var createTime: Int64?

            public var destName: String?

            public var destType: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.configJson?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.configJson != nil {
                    map["ConfigJson"] = self.configJson?.toMap()
                }
                if self.createTime != nil {
                    map["CreateTime"] = self.createTime!
                }
                if self.destName != nil {
                    map["DestName"] = self.destName!
                }
                if self.destType != nil {
                    map["DestType"] = self.destType!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ConfigJson"] as? [String: Any?] {
                    var model = DescribeExporterOutputListResponseBody.Datapoints.Datapoint.ConfigJson()
                    model.fromMap(value)
                    self.configJson = model
                }
                if let value = dict["CreateTime"] as? Int64 {
                    self.createTime = value
                }
                if let value = dict["DestName"] as? String {
                    self.destName = value
                }
                if let value = dict["DestType"] as? String {
                    self.destType = value
                }
            }
        }
        public var datapoint: [DescribeExporterOutputListResponseBody.Datapoints.Datapoint]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.datapoint != nil {
                var tmp : [Any] = []
                for k in self.datapoint! {
                    tmp.append(k.toMap())
                }
                map["Datapoint"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Datapoint"] as? [Any?] {
                var tmp : [DescribeExporterOutputListResponseBody.Datapoints.Datapoint] = []
                for v in value {
                    if v != nil {
                        var model = DescribeExporterOutputListResponseBody.Datapoints.Datapoint()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.datapoint = tmp
            }
        }
    }
    public var code: String?

    public var datapoints: DescribeExporterOutputListResponseBody.Datapoints?

    public var message: String?

    public var pageNumber: Int32?

    public var requestId: String?

    public var success: Bool?

    public var total: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.datapoints?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.datapoints != nil {
            map["Datapoints"] = self.datapoints?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.total != nil {
            map["Total"] = self.total!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Datapoints"] as? [String: Any?] {
            var model = DescribeExporterOutputListResponseBody.Datapoints()
            model.fromMap(value)
            self.datapoints = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
        if let value = dict["Total"] as? Int32 {
            self.total = value
        }
    }
}

public class DescribeExporterOutputListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeExporterOutputListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeExporterOutputListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeExporterRuleListRequest : Tea.TeaModel {
    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DescribeExporterRuleListResponseBody : Tea.TeaModel {
    public class Datapoints : Tea.TeaModel {
        public class Datapoint : Tea.TeaModel {
            public class DstName : Tea.TeaModel {
                public var dstName: [String]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.dstName != nil {
                        map["DstName"] = self.dstName!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["DstName"] as? [String] {
                        self.dstName = value
                    }
                }
            }
            public var createTime: Int64?

            public var describe: String?

            public var dimension: String?

            public var dstName: DescribeExporterRuleListResponseBody.Datapoints.Datapoint.DstName?

            public var enabled: Bool?

            public var metricName: String?

            public var namespace: String?

            public var ruleName: String?

            public var targetWindows: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.dstName?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.createTime != nil {
                    map["CreateTime"] = self.createTime!
                }
                if self.describe != nil {
                    map["Describe"] = self.describe!
                }
                if self.dimension != nil {
                    map["Dimension"] = self.dimension!
                }
                if self.dstName != nil {
                    map["DstName"] = self.dstName?.toMap()
                }
                if self.enabled != nil {
                    map["Enabled"] = self.enabled!
                }
                if self.metricName != nil {
                    map["MetricName"] = self.metricName!
                }
                if self.namespace != nil {
                    map["Namespace"] = self.namespace!
                }
                if self.ruleName != nil {
                    map["RuleName"] = self.ruleName!
                }
                if self.targetWindows != nil {
                    map["TargetWindows"] = self.targetWindows!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CreateTime"] as? Int64 {
                    self.createTime = value
                }
                if let value = dict["Describe"] as? String {
                    self.describe = value
                }
                if let value = dict["Dimension"] as? String {
                    self.dimension = value
                }
                if let value = dict["DstName"] as? [String: Any?] {
                    var model = DescribeExporterRuleListResponseBody.Datapoints.Datapoint.DstName()
                    model.fromMap(value)
                    self.dstName = model
                }
                if let value = dict["Enabled"] as? Bool {
                    self.enabled = value
                }
                if let value = dict["MetricName"] as? String {
                    self.metricName = value
                }
                if let value = dict["Namespace"] as? String {
                    self.namespace = value
                }
                if let value = dict["RuleName"] as? String {
                    self.ruleName = value
                }
                if let value = dict["TargetWindows"] as? String {
                    self.targetWindows = value
                }
            }
        }
        public var datapoint: [DescribeExporterRuleListResponseBody.Datapoints.Datapoint]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.datapoint != nil {
                var tmp : [Any] = []
                for k in self.datapoint! {
                    tmp.append(k.toMap())
                }
                map["Datapoint"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Datapoint"] as? [Any?] {
                var tmp : [DescribeExporterRuleListResponseBody.Datapoints.Datapoint] = []
                for v in value {
                    if v != nil {
                        var model = DescribeExporterRuleListResponseBody.Datapoints.Datapoint()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.datapoint = tmp
            }
        }
    }
    public var code: String?

    public var datapoints: DescribeExporterRuleListResponseBody.Datapoints?

    public var message: String?

    public var pageNumber: Int32?

    public var requestId: String?

    public var success: Bool?

    public var total: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.datapoints?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.datapoints != nil {
            map["Datapoints"] = self.datapoints?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.total != nil {
            map["Total"] = self.total!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Datapoints"] as? [String: Any?] {
            var model = DescribeExporterRuleListResponseBody.Datapoints()
            model.fromMap(value)
            self.datapoints = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
        if let value = dict["Total"] as? Int32 {
            self.total = value
        }
    }
}

public class DescribeExporterRuleListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeExporterRuleListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeExporterRuleListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeGroupMonitoringAgentProcessRequest : Tea.TeaModel {
    public var groupId: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var processName: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.processName != nil {
            map["ProcessName"] = self.processName!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["ProcessName"] as? String {
            self.processName = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DescribeGroupMonitoringAgentProcessResponseBody : Tea.TeaModel {
    public class Processes : Tea.TeaModel {
        public class Process : Tea.TeaModel {
            public class AlertConfig : Tea.TeaModel {
                public class AlertConfig : Tea.TeaModel {
                    public class TargetList : Tea.TeaModel {
                        public class Target : Tea.TeaModel {
                            public var arn: String?

                            public var id: String?

                            public var jsonParmas: String?

                            public var level: String?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.arn != nil {
                                    map["Arn"] = self.arn!
                                }
                                if self.id != nil {
                                    map["Id"] = self.id!
                                }
                                if self.jsonParmas != nil {
                                    map["JsonParmas"] = self.jsonParmas!
                                }
                                if self.level != nil {
                                    map["Level"] = self.level!
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                guard let dict else { return }
                                if let value = dict["Arn"] as? String {
                                    self.arn = value
                                }
                                if let value = dict["Id"] as? String {
                                    self.id = value
                                }
                                if let value = dict["JsonParmas"] as? String {
                                    self.jsonParmas = value
                                }
                                if let value = dict["Level"] as? String {
                                    self.level = value
                                }
                            }
                        }
                        public var target: [DescribeGroupMonitoringAgentProcessResponseBody.Processes.Process.AlertConfig.AlertConfig.TargetList.Target]?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.target != nil {
                                var tmp : [Any] = []
                                for k in self.target! {
                                    tmp.append(k.toMap())
                                }
                                map["Target"] = tmp
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Target"] as? [Any?] {
                                var tmp : [DescribeGroupMonitoringAgentProcessResponseBody.Processes.Process.AlertConfig.AlertConfig.TargetList.Target] = []
                                for v in value {
                                    if v != nil {
                                        var model = DescribeGroupMonitoringAgentProcessResponseBody.Processes.Process.AlertConfig.AlertConfig.TargetList.Target()
                                        if v != nil {
                                            model.fromMap(v as? [String: Any?])
                                        }
                                        tmp.append(model)
                                    }
                                }
                                self.target = tmp
                            }
                        }
                    }
                    public var comparisonOperator: String?

                    public var effectiveInterval: String?

                    public var escalationsLevel: String?

                    public var noEffectiveInterval: String?

                    public var silenceTime: String?

                    public var statistics: String?

                    public var targetList: DescribeGroupMonitoringAgentProcessResponseBody.Processes.Process.AlertConfig.AlertConfig.TargetList?

                    public var threshold: String?

                    public var times: String?

                    public var webhook: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                        try self.targetList?.validate()
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.comparisonOperator != nil {
                            map["ComparisonOperator"] = self.comparisonOperator!
                        }
                        if self.effectiveInterval != nil {
                            map["EffectiveInterval"] = self.effectiveInterval!
                        }
                        if self.escalationsLevel != nil {
                            map["EscalationsLevel"] = self.escalationsLevel!
                        }
                        if self.noEffectiveInterval != nil {
                            map["NoEffectiveInterval"] = self.noEffectiveInterval!
                        }
                        if self.silenceTime != nil {
                            map["SilenceTime"] = self.silenceTime!
                        }
                        if self.statistics != nil {
                            map["Statistics"] = self.statistics!
                        }
                        if self.targetList != nil {
                            map["TargetList"] = self.targetList?.toMap()
                        }
                        if self.threshold != nil {
                            map["Threshold"] = self.threshold!
                        }
                        if self.times != nil {
                            map["Times"] = self.times!
                        }
                        if self.webhook != nil {
                            map["Webhook"] = self.webhook!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["ComparisonOperator"] as? String {
                            self.comparisonOperator = value
                        }
                        if let value = dict["EffectiveInterval"] as? String {
                            self.effectiveInterval = value
                        }
                        if let value = dict["EscalationsLevel"] as? String {
                            self.escalationsLevel = value
                        }
                        if let value = dict["NoEffectiveInterval"] as? String {
                            self.noEffectiveInterval = value
                        }
                        if let value = dict["SilenceTime"] as? String {
                            self.silenceTime = value
                        }
                        if let value = dict["Statistics"] as? String {
                            self.statistics = value
                        }
                        if let value = dict["TargetList"] as? [String: Any?] {
                            var model = DescribeGroupMonitoringAgentProcessResponseBody.Processes.Process.AlertConfig.AlertConfig.TargetList()
                            model.fromMap(value)
                            self.targetList = model
                        }
                        if let value = dict["Threshold"] as? String {
                            self.threshold = value
                        }
                        if let value = dict["Times"] as? String {
                            self.times = value
                        }
                        if let value = dict["Webhook"] as? String {
                            self.webhook = value
                        }
                    }
                }
                public var alertConfig: [DescribeGroupMonitoringAgentProcessResponseBody.Processes.Process.AlertConfig.AlertConfig]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.alertConfig != nil {
                        var tmp : [Any] = []
                        for k in self.alertConfig! {
                            tmp.append(k.toMap())
                        }
                        map["AlertConfig"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["AlertConfig"] as? [Any?] {
                        var tmp : [DescribeGroupMonitoringAgentProcessResponseBody.Processes.Process.AlertConfig.AlertConfig] = []
                        for v in value {
                            if v != nil {
                                var model = DescribeGroupMonitoringAgentProcessResponseBody.Processes.Process.AlertConfig.AlertConfig()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.alertConfig = tmp
                    }
                }
            }
            public class MatchExpress : Tea.TeaModel {
                public class MatchExpress : Tea.TeaModel {
                    public var function: String?

                    public var name: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.function != nil {
                            map["Function"] = self.function!
                        }
                        if self.name != nil {
                            map["Name"] = self.name!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Function"] as? String {
                            self.function = value
                        }
                        if let value = dict["Name"] as? String {
                            self.name = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public var matchExpress: [DescribeGroupMonitoringAgentProcessResponseBody.Processes.Process.MatchExpress.MatchExpress]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.matchExpress != nil {
                        var tmp : [Any] = []
                        for k in self.matchExpress! {
                            tmp.append(k.toMap())
                        }
                        map["MatchExpress"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["MatchExpress"] as? [Any?] {
                        var tmp : [DescribeGroupMonitoringAgentProcessResponseBody.Processes.Process.MatchExpress.MatchExpress] = []
                        for v in value {
                            if v != nil {
                                var model = DescribeGroupMonitoringAgentProcessResponseBody.Processes.Process.MatchExpress.MatchExpress()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.matchExpress = tmp
                    }
                }
            }
            public var alertConfig: DescribeGroupMonitoringAgentProcessResponseBody.Processes.Process.AlertConfig?

            public var groupId: String?

            public var id: String?

            public var matchExpress: DescribeGroupMonitoringAgentProcessResponseBody.Processes.Process.MatchExpress?

            public var matchExpressFilterRelation: String?

            public var processName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.alertConfig?.validate()
                try self.matchExpress?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.alertConfig != nil {
                    map["AlertConfig"] = self.alertConfig?.toMap()
                }
                if self.groupId != nil {
                    map["GroupId"] = self.groupId!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.matchExpress != nil {
                    map["MatchExpress"] = self.matchExpress?.toMap()
                }
                if self.matchExpressFilterRelation != nil {
                    map["MatchExpressFilterRelation"] = self.matchExpressFilterRelation!
                }
                if self.processName != nil {
                    map["ProcessName"] = self.processName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AlertConfig"] as? [String: Any?] {
                    var model = DescribeGroupMonitoringAgentProcessResponseBody.Processes.Process.AlertConfig()
                    model.fromMap(value)
                    self.alertConfig = model
                }
                if let value = dict["GroupId"] as? String {
                    self.groupId = value
                }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
                if let value = dict["MatchExpress"] as? [String: Any?] {
                    var model = DescribeGroupMonitoringAgentProcessResponseBody.Processes.Process.MatchExpress()
                    model.fromMap(value)
                    self.matchExpress = model
                }
                if let value = dict["MatchExpressFilterRelation"] as? String {
                    self.matchExpressFilterRelation = value
                }
                if let value = dict["ProcessName"] as? String {
                    self.processName = value
                }
            }
        }
        public var process: [DescribeGroupMonitoringAgentProcessResponseBody.Processes.Process]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.process != nil {
                var tmp : [Any] = []
                for k in self.process! {
                    tmp.append(k.toMap())
                }
                map["Process"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Process"] as? [Any?] {
                var tmp : [DescribeGroupMonitoringAgentProcessResponseBody.Processes.Process] = []
                for v in value {
                    if v != nil {
                        var model = DescribeGroupMonitoringAgentProcessResponseBody.Processes.Process()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.process = tmp
            }
        }
    }
    public var code: String?

    public var message: String?

    public var pageNumber: String?

    public var pageSize: String?

    public var processes: DescribeGroupMonitoringAgentProcessResponseBody.Processes?

    public var requestId: String?

    public var success: Bool?

    public var total: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.processes?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.processes != nil {
            map["Processes"] = self.processes?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.total != nil {
            map["Total"] = self.total!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["PageNumber"] as? String {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? String {
            self.pageSize = value
        }
        if let value = dict["Processes"] as? [String: Any?] {
            var model = DescribeGroupMonitoringAgentProcessResponseBody.Processes()
            model.fromMap(value)
            self.processes = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
        if let value = dict["Total"] as? String {
            self.total = value
        }
    }
}

public class DescribeGroupMonitoringAgentProcessResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeGroupMonitoringAgentProcessResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeGroupMonitoringAgentProcessResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeHostAvailabilityListRequest : Tea.TeaModel {
    public var groupId: Int64?

    public var id: Int64?

    public var ids: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var regionId: String?

    public var taskName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.ids != nil {
            map["Ids"] = self.ids!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.taskName != nil {
            map["TaskName"] = self.taskName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["GroupId"] as? Int64 {
            self.groupId = value
        }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["Ids"] as? String {
            self.ids = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["TaskName"] as? String {
            self.taskName = value
        }
    }
}

public class DescribeHostAvailabilityListResponseBody : Tea.TeaModel {
    public class TaskList : Tea.TeaModel {
        public class NodeTaskConfig : Tea.TeaModel {
            public class AlertConfig : Tea.TeaModel {
                public class EscalationList : Tea.TeaModel {
                    public class EscalationList : Tea.TeaModel {
                        public var aggregate: String?

                        public var metricName: String?

                        public var operator_: String?

                        public var times: String?

                        public var value: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.aggregate != nil {
                                map["Aggregate"] = self.aggregate!
                            }
                            if self.metricName != nil {
                                map["MetricName"] = self.metricName!
                            }
                            if self.operator_ != nil {
                                map["Operator"] = self.operator_!
                            }
                            if self.times != nil {
                                map["Times"] = self.times!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Aggregate"] as? String {
                                self.aggregate = value
                            }
                            if let value = dict["MetricName"] as? String {
                                self.metricName = value
                            }
                            if let value = dict["Operator"] as? String {
                                self.operator_ = value
                            }
                            if let value = dict["Times"] as? String {
                                self.times = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                        }
                    }
                    public var escalationList: [DescribeHostAvailabilityListResponseBody.TaskList.NodeTaskConfig.AlertConfig.EscalationList.EscalationList]?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.escalationList != nil {
                            var tmp : [Any] = []
                            for k in self.escalationList! {
                                tmp.append(k.toMap())
                            }
                            map["escalationList"] = tmp
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["escalationList"] as? [Any?] {
                            var tmp : [DescribeHostAvailabilityListResponseBody.TaskList.NodeTaskConfig.AlertConfig.EscalationList.EscalationList] = []
                            for v in value {
                                if v != nil {
                                    var model = DescribeHostAvailabilityListResponseBody.TaskList.NodeTaskConfig.AlertConfig.EscalationList.EscalationList()
                                    if v != nil {
                                        model.fromMap(v as? [String: Any?])
                                    }
                                    tmp.append(model)
                                }
                            }
                            self.escalationList = tmp
                        }
                    }
                }
                public class TargetList : Tea.TeaModel {
                    public class Target : Tea.TeaModel {
                        public var arn: String?

                        public var id: String?

                        public var jsonParams: String?

                        public var level: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.arn != nil {
                                map["Arn"] = self.arn!
                            }
                            if self.id != nil {
                                map["Id"] = self.id!
                            }
                            if self.jsonParams != nil {
                                map["JsonParams"] = self.jsonParams!
                            }
                            if self.level != nil {
                                map["Level"] = self.level!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Arn"] as? String {
                                self.arn = value
                            }
                            if let value = dict["Id"] as? String {
                                self.id = value
                            }
                            if let value = dict["JsonParams"] as? String {
                                self.jsonParams = value
                            }
                            if let value = dict["Level"] as? String {
                                self.level = value
                            }
                        }
                    }
                    public var target: [DescribeHostAvailabilityListResponseBody.TaskList.NodeTaskConfig.AlertConfig.TargetList.Target]?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.target != nil {
                            var tmp : [Any] = []
                            for k in self.target! {
                                tmp.append(k.toMap())
                            }
                            map["Target"] = tmp
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Target"] as? [Any?] {
                            var tmp : [DescribeHostAvailabilityListResponseBody.TaskList.NodeTaskConfig.AlertConfig.TargetList.Target] = []
                            for v in value {
                                if v != nil {
                                    var model = DescribeHostAvailabilityListResponseBody.TaskList.NodeTaskConfig.AlertConfig.TargetList.Target()
                                    if v != nil {
                                        model.fromMap(v as? [String: Any?])
                                    }
                                    tmp.append(model)
                                }
                            }
                            self.target = tmp
                        }
                    }
                }
                public var endTime: Int32?

                public var escalationList: DescribeHostAvailabilityListResponseBody.TaskList.NodeTaskConfig.AlertConfig.EscalationList?

                public var notifyType: Int32?

                public var silenceTime: Int32?

                public var startTime: Int32?

                public var targetList: DescribeHostAvailabilityListResponseBody.TaskList.NodeTaskConfig.AlertConfig.TargetList?

                public var webHook: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.escalationList?.validate()
                    try self.targetList?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.endTime != nil {
                        map["EndTime"] = self.endTime!
                    }
                    if self.escalationList != nil {
                        map["EscalationList"] = self.escalationList?.toMap()
                    }
                    if self.notifyType != nil {
                        map["NotifyType"] = self.notifyType!
                    }
                    if self.silenceTime != nil {
                        map["SilenceTime"] = self.silenceTime!
                    }
                    if self.startTime != nil {
                        map["StartTime"] = self.startTime!
                    }
                    if self.targetList != nil {
                        map["TargetList"] = self.targetList?.toMap()
                    }
                    if self.webHook != nil {
                        map["WebHook"] = self.webHook!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["EndTime"] as? Int32 {
                        self.endTime = value
                    }
                    if let value = dict["EscalationList"] as? [String: Any?] {
                        var model = DescribeHostAvailabilityListResponseBody.TaskList.NodeTaskConfig.AlertConfig.EscalationList()
                        model.fromMap(value)
                        self.escalationList = model
                    }
                    if let value = dict["NotifyType"] as? Int32 {
                        self.notifyType = value
                    }
                    if let value = dict["SilenceTime"] as? Int32 {
                        self.silenceTime = value
                    }
                    if let value = dict["StartTime"] as? Int32 {
                        self.startTime = value
                    }
                    if let value = dict["TargetList"] as? [String: Any?] {
                        var model = DescribeHostAvailabilityListResponseBody.TaskList.NodeTaskConfig.AlertConfig.TargetList()
                        model.fromMap(value)
                        self.targetList = model
                    }
                    if let value = dict["WebHook"] as? String {
                        self.webHook = value
                    }
                }
            }
            public class Instances : Tea.TeaModel {
                public var instance: [String]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.instance != nil {
                        map["Instance"] = self.instance!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Instance"] as? [String] {
                        self.instance = value
                    }
                }
            }
            public class TaskOption : Tea.TeaModel {
                public var httpKeyword: String?

                public var httpMethod: String?

                public var httpNegative: Bool?

                public var httpPostContent: String?

                public var httpResponseCharset: String?

                public var httpURI: String?

                public var interval: Int32?

                public var telnetOrPingHost: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.httpKeyword != nil {
                        map["HttpKeyword"] = self.httpKeyword!
                    }
                    if self.httpMethod != nil {
                        map["HttpMethod"] = self.httpMethod!
                    }
                    if self.httpNegative != nil {
                        map["HttpNegative"] = self.httpNegative!
                    }
                    if self.httpPostContent != nil {
                        map["HttpPostContent"] = self.httpPostContent!
                    }
                    if self.httpResponseCharset != nil {
                        map["HttpResponseCharset"] = self.httpResponseCharset!
                    }
                    if self.httpURI != nil {
                        map["HttpURI"] = self.httpURI!
                    }
                    if self.interval != nil {
                        map["Interval"] = self.interval!
                    }
                    if self.telnetOrPingHost != nil {
                        map["TelnetOrPingHost"] = self.telnetOrPingHost!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["HttpKeyword"] as? String {
                        self.httpKeyword = value
                    }
                    if let value = dict["HttpMethod"] as? String {
                        self.httpMethod = value
                    }
                    if let value = dict["HttpNegative"] as? Bool {
                        self.httpNegative = value
                    }
                    if let value = dict["HttpPostContent"] as? String {
                        self.httpPostContent = value
                    }
                    if let value = dict["HttpResponseCharset"] as? String {
                        self.httpResponseCharset = value
                    }
                    if let value = dict["HttpURI"] as? String {
                        self.httpURI = value
                    }
                    if let value = dict["Interval"] as? Int32 {
                        self.interval = value
                    }
                    if let value = dict["TelnetOrPingHost"] as? String {
                        self.telnetOrPingHost = value
                    }
                }
            }
            public var alertConfig: DescribeHostAvailabilityListResponseBody.TaskList.NodeTaskConfig.AlertConfig?

            public var disabled: Bool?

            public var groupId: Int64?

            public var groupName: String?

            public var id: Int64?

            public var instances: DescribeHostAvailabilityListResponseBody.TaskList.NodeTaskConfig.Instances?

            public var taskName: String?

            public var taskOption: DescribeHostAvailabilityListResponseBody.TaskList.NodeTaskConfig.TaskOption?

            public var taskScope: String?

            public var taskType: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.alertConfig?.validate()
                try self.instances?.validate()
                try self.taskOption?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.alertConfig != nil {
                    map["AlertConfig"] = self.alertConfig?.toMap()
                }
                if self.disabled != nil {
                    map["Disabled"] = self.disabled!
                }
                if self.groupId != nil {
                    map["GroupId"] = self.groupId!
                }
                if self.groupName != nil {
                    map["GroupName"] = self.groupName!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.instances != nil {
                    map["Instances"] = self.instances?.toMap()
                }
                if self.taskName != nil {
                    map["TaskName"] = self.taskName!
                }
                if self.taskOption != nil {
                    map["TaskOption"] = self.taskOption?.toMap()
                }
                if self.taskScope != nil {
                    map["TaskScope"] = self.taskScope!
                }
                if self.taskType != nil {
                    map["TaskType"] = self.taskType!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AlertConfig"] as? [String: Any?] {
                    var model = DescribeHostAvailabilityListResponseBody.TaskList.NodeTaskConfig.AlertConfig()
                    model.fromMap(value)
                    self.alertConfig = model
                }
                if let value = dict["Disabled"] as? Bool {
                    self.disabled = value
                }
                if let value = dict["GroupId"] as? Int64 {
                    self.groupId = value
                }
                if let value = dict["GroupName"] as? String {
                    self.groupName = value
                }
                if let value = dict["Id"] as? Int64 {
                    self.id = value
                }
                if let value = dict["Instances"] as? [String: Any?] {
                    var model = DescribeHostAvailabilityListResponseBody.TaskList.NodeTaskConfig.Instances()
                    model.fromMap(value)
                    self.instances = model
                }
                if let value = dict["TaskName"] as? String {
                    self.taskName = value
                }
                if let value = dict["TaskOption"] as? [String: Any?] {
                    var model = DescribeHostAvailabilityListResponseBody.TaskList.NodeTaskConfig.TaskOption()
                    model.fromMap(value)
                    self.taskOption = model
                }
                if let value = dict["TaskScope"] as? String {
                    self.taskScope = value
                }
                if let value = dict["TaskType"] as? String {
                    self.taskType = value
                }
            }
        }
        public var nodeTaskConfig: [DescribeHostAvailabilityListResponseBody.TaskList.NodeTaskConfig]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.nodeTaskConfig != nil {
                var tmp : [Any] = []
                for k in self.nodeTaskConfig! {
                    tmp.append(k.toMap())
                }
                map["NodeTaskConfig"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["NodeTaskConfig"] as? [Any?] {
                var tmp : [DescribeHostAvailabilityListResponseBody.TaskList.NodeTaskConfig] = []
                for v in value {
                    if v != nil {
                        var model = DescribeHostAvailabilityListResponseBody.TaskList.NodeTaskConfig()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.nodeTaskConfig = tmp
            }
        }
    }
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public var taskList: DescribeHostAvailabilityListResponseBody.TaskList?

    public var total: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.taskList?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.taskList != nil {
            map["TaskList"] = self.taskList?.toMap()
        }
        if self.total != nil {
            map["Total"] = self.total!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
        if let value = dict["TaskList"] as? [String: Any?] {
            var model = DescribeHostAvailabilityListResponseBody.TaskList()
            model.fromMap(value)
            self.taskList = model
        }
        if let value = dict["Total"] as? Int32 {
            self.total = value
        }
    }
}

public class DescribeHostAvailabilityListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeHostAvailabilityListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeHostAvailabilityListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeHybridMonitorDataListRequest : Tea.TeaModel {
    public var end: Int64?

    public var namespace: String?

    public var period: String?

    public var promSQL: String?

    public var regionId: String?

    public var start: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.end != nil {
            map["End"] = self.end!
        }
        if self.namespace != nil {
            map["Namespace"] = self.namespace!
        }
        if self.period != nil {
            map["Period"] = self.period!
        }
        if self.promSQL != nil {
            map["PromSQL"] = self.promSQL!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.start != nil {
            map["Start"] = self.start!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["End"] as? Int64 {
            self.end = value
        }
        if let value = dict["Namespace"] as? String {
            self.namespace = value
        }
        if let value = dict["Period"] as? String {
            self.period = value
        }
        if let value = dict["PromSQL"] as? String {
            self.promSQL = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Start"] as? Int64 {
            self.start = value
        }
    }
}

public class DescribeHybridMonitorDataListResponseBody : Tea.TeaModel {
    public class TimeSeries : Tea.TeaModel {
        public class Labels : Tea.TeaModel {
            public var k: String?

            public var v: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.k != nil {
                    map["K"] = self.k!
                }
                if self.v != nil {
                    map["V"] = self.v!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["K"] as? String {
                    self.k = value
                }
                if let value = dict["V"] as? String {
                    self.v = value
                }
            }
        }
        public class Values : Tea.TeaModel {
            public var ts: String?

            public var v: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.ts != nil {
                    map["Ts"] = self.ts!
                }
                if self.v != nil {
                    map["V"] = self.v!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Ts"] as? String {
                    self.ts = value
                }
                if let value = dict["V"] as? String {
                    self.v = value
                }
            }
        }
        public var labels: [DescribeHybridMonitorDataListResponseBody.TimeSeries.Labels]?

        public var metricName: String?

        public var values: [DescribeHybridMonitorDataListResponseBody.TimeSeries.Values]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.labels != nil {
                var tmp : [Any] = []
                for k in self.labels! {
                    tmp.append(k.toMap())
                }
                map["Labels"] = tmp
            }
            if self.metricName != nil {
                map["MetricName"] = self.metricName!
            }
            if self.values != nil {
                var tmp : [Any] = []
                for k in self.values! {
                    tmp.append(k.toMap())
                }
                map["Values"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Labels"] as? [Any?] {
                var tmp : [DescribeHybridMonitorDataListResponseBody.TimeSeries.Labels] = []
                for v in value {
                    if v != nil {
                        var model = DescribeHybridMonitorDataListResponseBody.TimeSeries.Labels()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.labels = tmp
            }
            if let value = dict["MetricName"] as? String {
                self.metricName = value
            }
            if let value = dict["Values"] as? [Any?] {
                var tmp : [DescribeHybridMonitorDataListResponseBody.TimeSeries.Values] = []
                for v in value {
                    if v != nil {
                        var model = DescribeHybridMonitorDataListResponseBody.TimeSeries.Values()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.values = tmp
            }
        }
    }
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: String?

    public var timeSeries: [DescribeHybridMonitorDataListResponseBody.TimeSeries]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.timeSeries != nil {
            var tmp : [Any] = []
            for k in self.timeSeries! {
                tmp.append(k.toMap())
            }
            map["TimeSeries"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? String {
            self.success = value
        }
        if let value = dict["TimeSeries"] as? [Any?] {
            var tmp : [DescribeHybridMonitorDataListResponseBody.TimeSeries] = []
            for v in value {
                if v != nil {
                    var model = DescribeHybridMonitorDataListResponseBody.TimeSeries()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.timeSeries = tmp
        }
    }
}

public class DescribeHybridMonitorDataListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeHybridMonitorDataListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeHybridMonitorDataListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeHybridMonitorNamespaceListRequest : Tea.TeaModel {
    public var keyword: String?

    public var namespace: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var regionId: String?

    public var showTaskStatistic: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.keyword != nil {
            map["Keyword"] = self.keyword!
        }
        if self.namespace != nil {
            map["Namespace"] = self.namespace!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.showTaskStatistic != nil {
            map["ShowTaskStatistic"] = self.showTaskStatistic!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Keyword"] as? String {
            self.keyword = value
        }
        if let value = dict["Namespace"] as? String {
            self.namespace = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ShowTaskStatistic"] as? Bool {
            self.showTaskStatistic = value
        }
    }
}

public class DescribeHybridMonitorNamespaceListResponseBody : Tea.TeaModel {
    public class DescribeHybridMonitorNamespace : Tea.TeaModel {
        public class AliyunProductMetricList : Tea.TeaModel {
            public class NamespaceList : Tea.TeaModel {
                public class MetricList : Tea.TeaModel {
                    public var list: [String]?

                    public var period: Int64?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.list != nil {
                            map["List"] = self.list!
                        }
                        if self.period != nil {
                            map["Period"] = self.period!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["List"] as? [String] {
                            self.list = value
                        }
                        if let value = dict["Period"] as? Int64 {
                            self.period = value
                        }
                    }
                }
                public var metricList: [DescribeHybridMonitorNamespaceListResponseBody.DescribeHybridMonitorNamespace.AliyunProductMetricList.NamespaceList.MetricList]?

                public var namespace: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.metricList != nil {
                        var tmp : [Any] = []
                        for k in self.metricList! {
                            tmp.append(k.toMap())
                        }
                        map["MetricList"] = tmp
                    }
                    if self.namespace != nil {
                        map["Namespace"] = self.namespace!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["MetricList"] as? [Any?] {
                        var tmp : [DescribeHybridMonitorNamespaceListResponseBody.DescribeHybridMonitorNamespace.AliyunProductMetricList.NamespaceList.MetricList] = []
                        for v in value {
                            if v != nil {
                                var model = DescribeHybridMonitorNamespaceListResponseBody.DescribeHybridMonitorNamespace.AliyunProductMetricList.NamespaceList.MetricList()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.metricList = tmp
                    }
                    if let value = dict["Namespace"] as? String {
                        self.namespace = value
                    }
                }
            }
            public var namespaceList: [DescribeHybridMonitorNamespaceListResponseBody.DescribeHybridMonitorNamespace.AliyunProductMetricList.NamespaceList]?

            public var userId: Int64?

            public var YAMLConfig: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.namespaceList != nil {
                    var tmp : [Any] = []
                    for k in self.namespaceList! {
                        tmp.append(k.toMap())
                    }
                    map["NamespaceList"] = tmp
                }
                if self.userId != nil {
                    map["UserId"] = self.userId!
                }
                if self.YAMLConfig != nil {
                    map["YAMLConfig"] = self.YAMLConfig!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["NamespaceList"] as? [Any?] {
                    var tmp : [DescribeHybridMonitorNamespaceListResponseBody.DescribeHybridMonitorNamespace.AliyunProductMetricList.NamespaceList] = []
                    for v in value {
                        if v != nil {
                            var model = DescribeHybridMonitorNamespaceListResponseBody.DescribeHybridMonitorNamespace.AliyunProductMetricList.NamespaceList()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.namespaceList = tmp
                }
                if let value = dict["UserId"] as? Int64 {
                    self.userId = value
                }
                if let value = dict["YAMLConfig"] as? String {
                    self.YAMLConfig = value
                }
            }
        }
        public class Detail : Tea.TeaModel {
            public var namespaceRegion: String?

            public var prometheusInstanceId: String?

            public var SLSProject: String?

            public var spec: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.namespaceRegion != nil {
                    map["NamespaceRegion"] = self.namespaceRegion!
                }
                if self.prometheusInstanceId != nil {
                    map["PrometheusInstanceId"] = self.prometheusInstanceId!
                }
                if self.SLSProject != nil {
                    map["SLSProject"] = self.SLSProject!
                }
                if self.spec != nil {
                    map["Spec"] = self.spec!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["NamespaceRegion"] as? String {
                    self.namespaceRegion = value
                }
                if let value = dict["PrometheusInstanceId"] as? String {
                    self.prometheusInstanceId = value
                }
                if let value = dict["SLSProject"] as? String {
                    self.SLSProject = value
                }
                if let value = dict["Spec"] as? String {
                    self.spec = value
                }
            }
        }
        public var aliyunProductMetricList: [DescribeHybridMonitorNamespaceListResponseBody.DescribeHybridMonitorNamespace.AliyunProductMetricList]?

        public var createTime: String?

        public var description_: String?

        public var detail: DescribeHybridMonitorNamespaceListResponseBody.DescribeHybridMonitorNamespace.Detail?

        public var id: String?

        public var isDelete: Int32?

        public var modifyTime: String?

        public var namespace: String?

        public var namespaceType: String?

        public var notAliyunTaskNumber: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.detail?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.aliyunProductMetricList != nil {
                var tmp : [Any] = []
                for k in self.aliyunProductMetricList! {
                    tmp.append(k.toMap())
                }
                map["AliyunProductMetricList"] = tmp
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.detail != nil {
                map["Detail"] = self.detail?.toMap()
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.isDelete != nil {
                map["IsDelete"] = self.isDelete!
            }
            if self.modifyTime != nil {
                map["ModifyTime"] = self.modifyTime!
            }
            if self.namespace != nil {
                map["Namespace"] = self.namespace!
            }
            if self.namespaceType != nil {
                map["NamespaceType"] = self.namespaceType!
            }
            if self.notAliyunTaskNumber != nil {
                map["NotAliyunTaskNumber"] = self.notAliyunTaskNumber!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AliyunProductMetricList"] as? [Any?] {
                var tmp : [DescribeHybridMonitorNamespaceListResponseBody.DescribeHybridMonitorNamespace.AliyunProductMetricList] = []
                for v in value {
                    if v != nil {
                        var model = DescribeHybridMonitorNamespaceListResponseBody.DescribeHybridMonitorNamespace.AliyunProductMetricList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.aliyunProductMetricList = tmp
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["Detail"] as? [String: Any?] {
                var model = DescribeHybridMonitorNamespaceListResponseBody.DescribeHybridMonitorNamespace.Detail()
                model.fromMap(value)
                self.detail = model
            }
            if let value = dict["Id"] as? String {
                self.id = value
            }
            if let value = dict["IsDelete"] as? Int32 {
                self.isDelete = value
            }
            if let value = dict["ModifyTime"] as? String {
                self.modifyTime = value
            }
            if let value = dict["Namespace"] as? String {
                self.namespace = value
            }
            if let value = dict["NamespaceType"] as? String {
                self.namespaceType = value
            }
            if let value = dict["NotAliyunTaskNumber"] as? Int64 {
                self.notAliyunTaskNumber = value
            }
        }
    }
    public var code: String?

    public var describeHybridMonitorNamespace: [DescribeHybridMonitorNamespaceListResponseBody.DescribeHybridMonitorNamespace]?

    public var message: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var success: String?

    public var total: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.describeHybridMonitorNamespace != nil {
            var tmp : [Any] = []
            for k in self.describeHybridMonitorNamespace! {
                tmp.append(k.toMap())
            }
            map["DescribeHybridMonitorNamespace"] = tmp
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.total != nil {
            map["Total"] = self.total!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["DescribeHybridMonitorNamespace"] as? [Any?] {
            var tmp : [DescribeHybridMonitorNamespaceListResponseBody.DescribeHybridMonitorNamespace] = []
            for v in value {
                if v != nil {
                    var model = DescribeHybridMonitorNamespaceListResponseBody.DescribeHybridMonitorNamespace()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.describeHybridMonitorNamespace = tmp
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? String {
            self.success = value
        }
        if let value = dict["Total"] as? Int32 {
            self.total = value
        }
    }
}

public class DescribeHybridMonitorNamespaceListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeHybridMonitorNamespaceListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeHybridMonitorNamespaceListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeHybridMonitorSLSGroupRequest : Tea.TeaModel {
    public var keyword: String?

    public var pageNumber: String?

    public var pageSize: String?

    public var regionId: String?

    public var SLSGroupName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.keyword != nil {
            map["Keyword"] = self.keyword!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.SLSGroupName != nil {
            map["SLSGroupName"] = self.SLSGroupName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Keyword"] as? String {
            self.keyword = value
        }
        if let value = dict["PageNumber"] as? String {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? String {
            self.pageSize = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["SLSGroupName"] as? String {
            self.SLSGroupName = value
        }
    }
}

public class DescribeHybridMonitorSLSGroupResponseBody : Tea.TeaModel {
    public class List : Tea.TeaModel {
        public class SLSGroupConfig : Tea.TeaModel {
            public var SLSLogstore: String?

            public var SLSProject: String?

            public var SLSRegion: String?

            public var SLSUserId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.SLSLogstore != nil {
                    map["SLSLogstore"] = self.SLSLogstore!
                }
                if self.SLSProject != nil {
                    map["SLSProject"] = self.SLSProject!
                }
                if self.SLSRegion != nil {
                    map["SLSRegion"] = self.SLSRegion!
                }
                if self.SLSUserId != nil {
                    map["SLSUserId"] = self.SLSUserId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["SLSLogstore"] as? String {
                    self.SLSLogstore = value
                }
                if let value = dict["SLSProject"] as? String {
                    self.SLSProject = value
                }
                if let value = dict["SLSRegion"] as? String {
                    self.SLSRegion = value
                }
                if let value = dict["SLSUserId"] as? String {
                    self.SLSUserId = value
                }
            }
        }
        public var createTime: String?

        public var SLSGroupConfig: [DescribeHybridMonitorSLSGroupResponseBody.List.SLSGroupConfig]?

        public var SLSGroupDescription: String?

        public var SLSGroupName: String?

        public var updateTime: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.SLSGroupConfig != nil {
                var tmp : [Any] = []
                for k in self.SLSGroupConfig! {
                    tmp.append(k.toMap())
                }
                map["SLSGroupConfig"] = tmp
            }
            if self.SLSGroupDescription != nil {
                map["SLSGroupDescription"] = self.SLSGroupDescription!
            }
            if self.SLSGroupName != nil {
                map["SLSGroupName"] = self.SLSGroupName!
            }
            if self.updateTime != nil {
                map["UpdateTime"] = self.updateTime!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["SLSGroupConfig"] as? [Any?] {
                var tmp : [DescribeHybridMonitorSLSGroupResponseBody.List.SLSGroupConfig] = []
                for v in value {
                    if v != nil {
                        var model = DescribeHybridMonitorSLSGroupResponseBody.List.SLSGroupConfig()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.SLSGroupConfig = tmp
            }
            if let value = dict["SLSGroupDescription"] as? String {
                self.SLSGroupDescription = value
            }
            if let value = dict["SLSGroupName"] as? String {
                self.SLSGroupName = value
            }
            if let value = dict["UpdateTime"] as? String {
                self.updateTime = value
            }
        }
    }
    public var code: String?

    public var list: [DescribeHybridMonitorSLSGroupResponseBody.List]?

    public var message: String?

    public var pageNumber: Int64?

    public var pageSize: Int64?

    public var requestId: String?

    public var success: String?

    public var total: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.list != nil {
            var tmp : [Any] = []
            for k in self.list! {
                tmp.append(k.toMap())
            }
            map["List"] = tmp
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.total != nil {
            map["Total"] = self.total!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["List"] as? [Any?] {
            var tmp : [DescribeHybridMonitorSLSGroupResponseBody.List] = []
            for v in value {
                if v != nil {
                    var model = DescribeHybridMonitorSLSGroupResponseBody.List()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.list = tmp
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["PageNumber"] as? Int64 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? String {
            self.success = value
        }
        if let value = dict["Total"] as? Int64 {
            self.total = value
        }
    }
}

public class DescribeHybridMonitorSLSGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeHybridMonitorSLSGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeHybridMonitorSLSGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeHybridMonitorTaskListRequest : Tea.TeaModel {
    public var groupId: String?

    public var includeAliyunTask: Bool?

    public var keyword: String?

    public var namespace: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var regionId: String?

    public var targetUserId: Int64?

    public var taskId: String?

    public var taskType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.includeAliyunTask != nil {
            map["IncludeAliyunTask"] = self.includeAliyunTask!
        }
        if self.keyword != nil {
            map["Keyword"] = self.keyword!
        }
        if self.namespace != nil {
            map["Namespace"] = self.namespace!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.targetUserId != nil {
            map["TargetUserId"] = self.targetUserId!
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        if self.taskType != nil {
            map["TaskType"] = self.taskType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["IncludeAliyunTask"] as? Bool {
            self.includeAliyunTask = value
        }
        if let value = dict["Keyword"] as? String {
            self.keyword = value
        }
        if let value = dict["Namespace"] as? String {
            self.namespace = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["TargetUserId"] as? Int64 {
            self.targetUserId = value
        }
        if let value = dict["TaskId"] as? String {
            self.taskId = value
        }
        if let value = dict["TaskType"] as? String {
            self.taskType = value
        }
    }
}

public class DescribeHybridMonitorTaskListResponseBody : Tea.TeaModel {
    public class TaskList : Tea.TeaModel {
        public class AttachLabels : Tea.TeaModel {
            public var name: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public class MatchExpress : Tea.TeaModel {
            public var function: String?

            public var name: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.function != nil {
                    map["Function"] = self.function!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Function"] as? String {
                    self.function = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public class SLSProcessConfig : Tea.TeaModel {
            public class Express : Tea.TeaModel {
                public var alias: String?

                public var express: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.alias != nil {
                        map["Alias"] = self.alias!
                    }
                    if self.express != nil {
                        map["Express"] = self.express!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Alias"] as? String {
                        self.alias = value
                    }
                    if let value = dict["Express"] as? String {
                        self.express = value
                    }
                }
            }
            public class Filter : Tea.TeaModel {
                public class Filters : Tea.TeaModel {
                    public var operator_: String?

                    public var SLSKeyName: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.operator_ != nil {
                            map["Operator"] = self.operator_!
                        }
                        if self.SLSKeyName != nil {
                            map["SLSKeyName"] = self.SLSKeyName!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Operator"] as? String {
                            self.operator_ = value
                        }
                        if let value = dict["SLSKeyName"] as? String {
                            self.SLSKeyName = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public var filters: [DescribeHybridMonitorTaskListResponseBody.TaskList.SLSProcessConfig.Filter.Filters]?

                public var relation: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.filters != nil {
                        var tmp : [Any] = []
                        for k in self.filters! {
                            tmp.append(k.toMap())
                        }
                        map["Filters"] = tmp
                    }
                    if self.relation != nil {
                        map["Relation"] = self.relation!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Filters"] as? [Any?] {
                        var tmp : [DescribeHybridMonitorTaskListResponseBody.TaskList.SLSProcessConfig.Filter.Filters] = []
                        for v in value {
                            if v != nil {
                                var model = DescribeHybridMonitorTaskListResponseBody.TaskList.SLSProcessConfig.Filter.Filters()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.filters = tmp
                    }
                    if let value = dict["Relation"] as? String {
                        self.relation = value
                    }
                }
            }
            public class GroupBy : Tea.TeaModel {
                public var alias: String?

                public var SLSKeyName: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.alias != nil {
                        map["Alias"] = self.alias!
                    }
                    if self.SLSKeyName != nil {
                        map["SLSKeyName"] = self.SLSKeyName!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Alias"] as? String {
                        self.alias = value
                    }
                    if let value = dict["SLSKeyName"] as? String {
                        self.SLSKeyName = value
                    }
                }
            }
            public class Statistics : Tea.TeaModel {
                public var alias: String?

                public var function: String?

                public var parameter1: String?

                public var parameter2: String?

                public var SLSKeyName: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.alias != nil {
                        map["Alias"] = self.alias!
                    }
                    if self.function != nil {
                        map["Function"] = self.function!
                    }
                    if self.parameter1 != nil {
                        map["Parameter1"] = self.parameter1!
                    }
                    if self.parameter2 != nil {
                        map["Parameter2"] = self.parameter2!
                    }
                    if self.SLSKeyName != nil {
                        map["SLSKeyName"] = self.SLSKeyName!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Alias"] as? String {
                        self.alias = value
                    }
                    if let value = dict["Function"] as? String {
                        self.function = value
                    }
                    if let value = dict["Parameter1"] as? String {
                        self.parameter1 = value
                    }
                    if let value = dict["Parameter2"] as? String {
                        self.parameter2 = value
                    }
                    if let value = dict["SLSKeyName"] as? String {
                        self.SLSKeyName = value
                    }
                }
            }
            public var express: [DescribeHybridMonitorTaskListResponseBody.TaskList.SLSProcessConfig.Express]?

            public var filter: DescribeHybridMonitorTaskListResponseBody.TaskList.SLSProcessConfig.Filter?

            public var groupBy: [DescribeHybridMonitorTaskListResponseBody.TaskList.SLSProcessConfig.GroupBy]?

            public var statistics: [DescribeHybridMonitorTaskListResponseBody.TaskList.SLSProcessConfig.Statistics]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.filter?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.express != nil {
                    var tmp : [Any] = []
                    for k in self.express! {
                        tmp.append(k.toMap())
                    }
                    map["Express"] = tmp
                }
                if self.filter != nil {
                    map["Filter"] = self.filter?.toMap()
                }
                if self.groupBy != nil {
                    var tmp : [Any] = []
                    for k in self.groupBy! {
                        tmp.append(k.toMap())
                    }
                    map["GroupBy"] = tmp
                }
                if self.statistics != nil {
                    var tmp : [Any] = []
                    for k in self.statistics! {
                        tmp.append(k.toMap())
                    }
                    map["Statistics"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Express"] as? [Any?] {
                    var tmp : [DescribeHybridMonitorTaskListResponseBody.TaskList.SLSProcessConfig.Express] = []
                    for v in value {
                        if v != nil {
                            var model = DescribeHybridMonitorTaskListResponseBody.TaskList.SLSProcessConfig.Express()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.express = tmp
                }
                if let value = dict["Filter"] as? [String: Any?] {
                    var model = DescribeHybridMonitorTaskListResponseBody.TaskList.SLSProcessConfig.Filter()
                    model.fromMap(value)
                    self.filter = model
                }
                if let value = dict["GroupBy"] as? [Any?] {
                    var tmp : [DescribeHybridMonitorTaskListResponseBody.TaskList.SLSProcessConfig.GroupBy] = []
                    for v in value {
                        if v != nil {
                            var model = DescribeHybridMonitorTaskListResponseBody.TaskList.SLSProcessConfig.GroupBy()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.groupBy = tmp
                }
                if let value = dict["Statistics"] as? [Any?] {
                    var tmp : [DescribeHybridMonitorTaskListResponseBody.TaskList.SLSProcessConfig.Statistics] = []
                    for v in value {
                        if v != nil {
                            var model = DescribeHybridMonitorTaskListResponseBody.TaskList.SLSProcessConfig.Statistics()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.statistics = tmp
                }
            }
        }
        public var attachLabels: [DescribeHybridMonitorTaskListResponseBody.TaskList.AttachLabels]?

        public var collectInterval: Int32?

        public var collectTargetEndpoint: String?

        public var collectTargetPath: String?

        public var collectTargetType: String?

        public var collectTimout: Int32?

        public var createTime: String?

        public var description_: String?

        public var extraInfo: String?

        public var groupId: String?

        public var instances: [String]?

        public var logFilePath: String?

        public var logProcess: String?

        public var logSample: String?

        public var logSplit: String?

        public var matchExpress: [DescribeHybridMonitorTaskListResponseBody.TaskList.MatchExpress]?

        public var matchExpressRelation: String?

        public var namespace: String?

        public var networkType: String?

        public var SLSProcess: String?

        public var SLSProcessConfig: DescribeHybridMonitorTaskListResponseBody.TaskList.SLSProcessConfig?

        public var targetUserId: String?

        public var taskId: String?

        public var taskName: String?

        public var taskType: String?

        public var uploadRegion: String?

        public var YARMConfig: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.SLSProcessConfig?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.attachLabels != nil {
                var tmp : [Any] = []
                for k in self.attachLabels! {
                    tmp.append(k.toMap())
                }
                map["AttachLabels"] = tmp
            }
            if self.collectInterval != nil {
                map["CollectInterval"] = self.collectInterval!
            }
            if self.collectTargetEndpoint != nil {
                map["CollectTargetEndpoint"] = self.collectTargetEndpoint!
            }
            if self.collectTargetPath != nil {
                map["CollectTargetPath"] = self.collectTargetPath!
            }
            if self.collectTargetType != nil {
                map["CollectTargetType"] = self.collectTargetType!
            }
            if self.collectTimout != nil {
                map["CollectTimout"] = self.collectTimout!
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.extraInfo != nil {
                map["ExtraInfo"] = self.extraInfo!
            }
            if self.groupId != nil {
                map["GroupId"] = self.groupId!
            }
            if self.instances != nil {
                map["Instances"] = self.instances!
            }
            if self.logFilePath != nil {
                map["LogFilePath"] = self.logFilePath!
            }
            if self.logProcess != nil {
                map["LogProcess"] = self.logProcess!
            }
            if self.logSample != nil {
                map["LogSample"] = self.logSample!
            }
            if self.logSplit != nil {
                map["LogSplit"] = self.logSplit!
            }
            if self.matchExpress != nil {
                var tmp : [Any] = []
                for k in self.matchExpress! {
                    tmp.append(k.toMap())
                }
                map["MatchExpress"] = tmp
            }
            if self.matchExpressRelation != nil {
                map["MatchExpressRelation"] = self.matchExpressRelation!
            }
            if self.namespace != nil {
                map["Namespace"] = self.namespace!
            }
            if self.networkType != nil {
                map["NetworkType"] = self.networkType!
            }
            if self.SLSProcess != nil {
                map["SLSProcess"] = self.SLSProcess!
            }
            if self.SLSProcessConfig != nil {
                map["SLSProcessConfig"] = self.SLSProcessConfig?.toMap()
            }
            if self.targetUserId != nil {
                map["TargetUserId"] = self.targetUserId!
            }
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            if self.taskName != nil {
                map["TaskName"] = self.taskName!
            }
            if self.taskType != nil {
                map["TaskType"] = self.taskType!
            }
            if self.uploadRegion != nil {
                map["UploadRegion"] = self.uploadRegion!
            }
            if self.YARMConfig != nil {
                map["YARMConfig"] = self.YARMConfig!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AttachLabels"] as? [Any?] {
                var tmp : [DescribeHybridMonitorTaskListResponseBody.TaskList.AttachLabels] = []
                for v in value {
                    if v != nil {
                        var model = DescribeHybridMonitorTaskListResponseBody.TaskList.AttachLabels()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.attachLabels = tmp
            }
            if let value = dict["CollectInterval"] as? Int32 {
                self.collectInterval = value
            }
            if let value = dict["CollectTargetEndpoint"] as? String {
                self.collectTargetEndpoint = value
            }
            if let value = dict["CollectTargetPath"] as? String {
                self.collectTargetPath = value
            }
            if let value = dict["CollectTargetType"] as? String {
                self.collectTargetType = value
            }
            if let value = dict["CollectTimout"] as? Int32 {
                self.collectTimout = value
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["ExtraInfo"] as? String {
                self.extraInfo = value
            }
            if let value = dict["GroupId"] as? String {
                self.groupId = value
            }
            if let value = dict["Instances"] as? [String] {
                self.instances = value
            }
            if let value = dict["LogFilePath"] as? String {
                self.logFilePath = value
            }
            if let value = dict["LogProcess"] as? String {
                self.logProcess = value
            }
            if let value = dict["LogSample"] as? String {
                self.logSample = value
            }
            if let value = dict["LogSplit"] as? String {
                self.logSplit = value
            }
            if let value = dict["MatchExpress"] as? [Any?] {
                var tmp : [DescribeHybridMonitorTaskListResponseBody.TaskList.MatchExpress] = []
                for v in value {
                    if v != nil {
                        var model = DescribeHybridMonitorTaskListResponseBody.TaskList.MatchExpress()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.matchExpress = tmp
            }
            if let value = dict["MatchExpressRelation"] as? String {
                self.matchExpressRelation = value
            }
            if let value = dict["Namespace"] as? String {
                self.namespace = value
            }
            if let value = dict["NetworkType"] as? String {
                self.networkType = value
            }
            if let value = dict["SLSProcess"] as? String {
                self.SLSProcess = value
            }
            if let value = dict["SLSProcessConfig"] as? [String: Any?] {
                var model = DescribeHybridMonitorTaskListResponseBody.TaskList.SLSProcessConfig()
                model.fromMap(value)
                self.SLSProcessConfig = model
            }
            if let value = dict["TargetUserId"] as? String {
                self.targetUserId = value
            }
            if let value = dict["TaskId"] as? String {
                self.taskId = value
            }
            if let value = dict["TaskName"] as? String {
                self.taskName = value
            }
            if let value = dict["TaskType"] as? String {
                self.taskType = value
            }
            if let value = dict["UploadRegion"] as? String {
                self.uploadRegion = value
            }
            if let value = dict["YARMConfig"] as? String {
                self.YARMConfig = value
            }
        }
    }
    public var code: String?

    public var message: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var success: String?

    public var taskList: [DescribeHybridMonitorTaskListResponseBody.TaskList]?

    public var total: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.taskList != nil {
            var tmp : [Any] = []
            for k in self.taskList! {
                tmp.append(k.toMap())
            }
            map["TaskList"] = tmp
        }
        if self.total != nil {
            map["Total"] = self.total!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? String {
            self.success = value
        }
        if let value = dict["TaskList"] as? [Any?] {
            var tmp : [DescribeHybridMonitorTaskListResponseBody.TaskList] = []
            for v in value {
                if v != nil {
                    var model = DescribeHybridMonitorTaskListResponseBody.TaskList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.taskList = tmp
        }
        if let value = dict["Total"] as? Int32 {
            self.total = value
        }
    }
}

public class DescribeHybridMonitorTaskListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeHybridMonitorTaskListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeHybridMonitorTaskListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeLogMonitorAttributeRequest : Tea.TeaModel {
    public var metricName: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.metricName != nil {
            map["MetricName"] = self.metricName!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["MetricName"] as? String {
            self.metricName = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DescribeLogMonitorAttributeResponseBody : Tea.TeaModel {
    public class LogMonitor : Tea.TeaModel {
        public class Aggregates : Tea.TeaModel {
            public var alias: String?

            public var fieldName: String?

            public var function: String?

            public var max: String?

            public var min: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.alias != nil {
                    map["Alias"] = self.alias!
                }
                if self.fieldName != nil {
                    map["FieldName"] = self.fieldName!
                }
                if self.function != nil {
                    map["Function"] = self.function!
                }
                if self.max != nil {
                    map["Max"] = self.max!
                }
                if self.min != nil {
                    map["Min"] = self.min!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Alias"] as? String {
                    self.alias = value
                }
                if let value = dict["FieldName"] as? String {
                    self.fieldName = value
                }
                if let value = dict["Function"] as? String {
                    self.function = value
                }
                if let value = dict["Max"] as? String {
                    self.max = value
                }
                if let value = dict["Min"] as? String {
                    self.min = value
                }
            }
        }
        public class ValueFilter : Tea.TeaModel {
            public var key: String?

            public var operator_: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.key != nil {
                    map["Key"] = self.key!
                }
                if self.operator_ != nil {
                    map["Operator"] = self.operator_!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Key"] as? String {
                    self.key = value
                }
                if let value = dict["Operator"] as? String {
                    self.operator_ = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public var aggregates: [DescribeLogMonitorAttributeResponseBody.LogMonitor.Aggregates]?

        public var gmtCreate: Int64?

        public var groupId: Int64?

        public var groupbys: [String]?

        public var logId: Int64?

        public var metricExpress: String?

        public var metricName: String?

        public var slsLogstore: String?

        public var slsProject: String?

        public var slsRegionId: String?

        public var tumblingwindows: [String]?

        public var valueFilter: [DescribeLogMonitorAttributeResponseBody.LogMonitor.ValueFilter]?

        public var valueFilterRelation: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.aggregates != nil {
                var tmp : [Any] = []
                for k in self.aggregates! {
                    tmp.append(k.toMap())
                }
                map["Aggregates"] = tmp
            }
            if self.gmtCreate != nil {
                map["GmtCreate"] = self.gmtCreate!
            }
            if self.groupId != nil {
                map["GroupId"] = self.groupId!
            }
            if self.groupbys != nil {
                map["Groupbys"] = self.groupbys!
            }
            if self.logId != nil {
                map["LogId"] = self.logId!
            }
            if self.metricExpress != nil {
                map["MetricExpress"] = self.metricExpress!
            }
            if self.metricName != nil {
                map["MetricName"] = self.metricName!
            }
            if self.slsLogstore != nil {
                map["SlsLogstore"] = self.slsLogstore!
            }
            if self.slsProject != nil {
                map["SlsProject"] = self.slsProject!
            }
            if self.slsRegionId != nil {
                map["SlsRegionId"] = self.slsRegionId!
            }
            if self.tumblingwindows != nil {
                map["Tumblingwindows"] = self.tumblingwindows!
            }
            if self.valueFilter != nil {
                var tmp : [Any] = []
                for k in self.valueFilter! {
                    tmp.append(k.toMap())
                }
                map["ValueFilter"] = tmp
            }
            if self.valueFilterRelation != nil {
                map["ValueFilterRelation"] = self.valueFilterRelation!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Aggregates"] as? [Any?] {
                var tmp : [DescribeLogMonitorAttributeResponseBody.LogMonitor.Aggregates] = []
                for v in value {
                    if v != nil {
                        var model = DescribeLogMonitorAttributeResponseBody.LogMonitor.Aggregates()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.aggregates = tmp
            }
            if let value = dict["GmtCreate"] as? Int64 {
                self.gmtCreate = value
            }
            if let value = dict["GroupId"] as? Int64 {
                self.groupId = value
            }
            if let value = dict["Groupbys"] as? [String] {
                self.groupbys = value
            }
            if let value = dict["LogId"] as? Int64 {
                self.logId = value
            }
            if let value = dict["MetricExpress"] as? String {
                self.metricExpress = value
            }
            if let value = dict["MetricName"] as? String {
                self.metricName = value
            }
            if let value = dict["SlsLogstore"] as? String {
                self.slsLogstore = value
            }
            if let value = dict["SlsProject"] as? String {
                self.slsProject = value
            }
            if let value = dict["SlsRegionId"] as? String {
                self.slsRegionId = value
            }
            if let value = dict["Tumblingwindows"] as? [String] {
                self.tumblingwindows = value
            }
            if let value = dict["ValueFilter"] as? [Any?] {
                var tmp : [DescribeLogMonitorAttributeResponseBody.LogMonitor.ValueFilter] = []
                for v in value {
                    if v != nil {
                        var model = DescribeLogMonitorAttributeResponseBody.LogMonitor.ValueFilter()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.valueFilter = tmp
            }
            if let value = dict["ValueFilterRelation"] as? String {
                self.valueFilterRelation = value
            }
        }
    }
    public var code: String?

    public var logMonitor: DescribeLogMonitorAttributeResponseBody.LogMonitor?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.logMonitor?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.logMonitor != nil {
            map["LogMonitor"] = self.logMonitor?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["LogMonitor"] as? [String: Any?] {
            var model = DescribeLogMonitorAttributeResponseBody.LogMonitor()
            model.fromMap(value)
            self.logMonitor = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DescribeLogMonitorAttributeResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeLogMonitorAttributeResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeLogMonitorAttributeResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeLogMonitorListRequest : Tea.TeaModel {
    public var groupId: Int64?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var regionId: String?

    public var searchValue: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.searchValue != nil {
            map["SearchValue"] = self.searchValue!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["GroupId"] as? Int64 {
            self.groupId = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["SearchValue"] as? String {
            self.searchValue = value
        }
    }
}

public class DescribeLogMonitorListResponseBody : Tea.TeaModel {
    public class LogMonitorList : Tea.TeaModel {
        public class ValueFilter : Tea.TeaModel {
            public var key: String?

            public var operator_: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.key != nil {
                    map["Key"] = self.key!
                }
                if self.operator_ != nil {
                    map["Operator"] = self.operator_!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Key"] as? String {
                    self.key = value
                }
                if let value = dict["Operator"] as? String {
                    self.operator_ = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public var gmtCreate: Int64?

        public var groupId: Int64?

        public var logId: Int64?

        public var metricName: String?

        public var slsLogstore: String?

        public var slsProject: String?

        public var slsRegionId: String?

        public var valueFilter: [DescribeLogMonitorListResponseBody.LogMonitorList.ValueFilter]?

        public var valueFilterRelation: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.gmtCreate != nil {
                map["GmtCreate"] = self.gmtCreate!
            }
            if self.groupId != nil {
                map["GroupId"] = self.groupId!
            }
            if self.logId != nil {
                map["LogId"] = self.logId!
            }
            if self.metricName != nil {
                map["MetricName"] = self.metricName!
            }
            if self.slsLogstore != nil {
                map["SlsLogstore"] = self.slsLogstore!
            }
            if self.slsProject != nil {
                map["SlsProject"] = self.slsProject!
            }
            if self.slsRegionId != nil {
                map["SlsRegionId"] = self.slsRegionId!
            }
            if self.valueFilter != nil {
                var tmp : [Any] = []
                for k in self.valueFilter! {
                    tmp.append(k.toMap())
                }
                map["ValueFilter"] = tmp
            }
            if self.valueFilterRelation != nil {
                map["ValueFilterRelation"] = self.valueFilterRelation!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["GmtCreate"] as? Int64 {
                self.gmtCreate = value
            }
            if let value = dict["GroupId"] as? Int64 {
                self.groupId = value
            }
            if let value = dict["LogId"] as? Int64 {
                self.logId = value
            }
            if let value = dict["MetricName"] as? String {
                self.metricName = value
            }
            if let value = dict["SlsLogstore"] as? String {
                self.slsLogstore = value
            }
            if let value = dict["SlsProject"] as? String {
                self.slsProject = value
            }
            if let value = dict["SlsRegionId"] as? String {
                self.slsRegionId = value
            }
            if let value = dict["ValueFilter"] as? [Any?] {
                var tmp : [DescribeLogMonitorListResponseBody.LogMonitorList.ValueFilter] = []
                for v in value {
                    if v != nil {
                        var model = DescribeLogMonitorListResponseBody.LogMonitorList.ValueFilter()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.valueFilter = tmp
            }
            if let value = dict["ValueFilterRelation"] as? String {
                self.valueFilterRelation = value
            }
        }
    }
    public var code: String?

    public var logMonitorList: [DescribeLogMonitorListResponseBody.LogMonitorList]?

    public var message: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var success: Bool?

    public var total: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.logMonitorList != nil {
            var tmp : [Any] = []
            for k in self.logMonitorList! {
                tmp.append(k.toMap())
            }
            map["LogMonitorList"] = tmp
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.total != nil {
            map["Total"] = self.total!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["LogMonitorList"] as? [Any?] {
            var tmp : [DescribeLogMonitorListResponseBody.LogMonitorList] = []
            for v in value {
                if v != nil {
                    var model = DescribeLogMonitorListResponseBody.LogMonitorList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.logMonitorList = tmp
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
        if let value = dict["Total"] as? Int64 {
            self.total = value
        }
    }
}

public class DescribeLogMonitorListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeLogMonitorListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeLogMonitorListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeMetricDataRequest : Tea.TeaModel {
    public var dimensions: String?

    public var endTime: String?

    public var express: String?

    public var length: String?

    public var metricName: String?

    public var namespace: String?

    public var period: String?

    public var regionId: String?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dimensions != nil {
            map["Dimensions"] = self.dimensions!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.express != nil {
            map["Express"] = self.express!
        }
        if self.length != nil {
            map["Length"] = self.length!
        }
        if self.metricName != nil {
            map["MetricName"] = self.metricName!
        }
        if self.namespace != nil {
            map["Namespace"] = self.namespace!
        }
        if self.period != nil {
            map["Period"] = self.period!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Dimensions"] as? String {
            self.dimensions = value
        }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["Express"] as? String {
            self.express = value
        }
        if let value = dict["Length"] as? String {
            self.length = value
        }
        if let value = dict["MetricName"] as? String {
            self.metricName = value
        }
        if let value = dict["Namespace"] as? String {
            self.namespace = value
        }
        if let value = dict["Period"] as? String {
            self.period = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
    }
}

public class DescribeMetricDataResponseBody : Tea.TeaModel {
    public var code: String?

    public var datapoints: String?

    public var message: String?

    public var period: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.datapoints != nil {
            map["Datapoints"] = self.datapoints!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.period != nil {
            map["Period"] = self.period!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Datapoints"] as? String {
            self.datapoints = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Period"] as? String {
            self.period = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeMetricDataResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeMetricDataResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeMetricDataResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeMetricLastRequest : Tea.TeaModel {
    public var dimensions: String?

    public var endTime: String?

    public var express: String?

    public var length: String?

    public var metricName: String?

    public var namespace: String?

    public var nextToken: String?

    public var period: String?

    public var regionId: String?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dimensions != nil {
            map["Dimensions"] = self.dimensions!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.express != nil {
            map["Express"] = self.express!
        }
        if self.length != nil {
            map["Length"] = self.length!
        }
        if self.metricName != nil {
            map["MetricName"] = self.metricName!
        }
        if self.namespace != nil {
            map["Namespace"] = self.namespace!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.period != nil {
            map["Period"] = self.period!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Dimensions"] as? String {
            self.dimensions = value
        }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["Express"] as? String {
            self.express = value
        }
        if let value = dict["Length"] as? String {
            self.length = value
        }
        if let value = dict["MetricName"] as? String {
            self.metricName = value
        }
        if let value = dict["Namespace"] as? String {
            self.namespace = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["Period"] as? String {
            self.period = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
    }
}

public class DescribeMetricLastResponseBody : Tea.TeaModel {
    public var code: String?

    public var datapoints: String?

    public var message: String?

    public var nextToken: String?

    public var period: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.datapoints != nil {
            map["Datapoints"] = self.datapoints!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.period != nil {
            map["Period"] = self.period!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Datapoints"] as? String {
            self.datapoints = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["Period"] as? String {
            self.period = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DescribeMetricLastResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeMetricLastResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeMetricLastResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeMetricListRequest : Tea.TeaModel {
    public var dimensions: String?

    public var endTime: String?

    public var express: String?

    public var length: String?

    public var metricName: String?

    public var namespace: String?

    public var nextToken: String?

    public var period: String?

    public var regionId: String?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dimensions != nil {
            map["Dimensions"] = self.dimensions!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.express != nil {
            map["Express"] = self.express!
        }
        if self.length != nil {
            map["Length"] = self.length!
        }
        if self.metricName != nil {
            map["MetricName"] = self.metricName!
        }
        if self.namespace != nil {
            map["Namespace"] = self.namespace!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.period != nil {
            map["Period"] = self.period!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Dimensions"] as? String {
            self.dimensions = value
        }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["Express"] as? String {
            self.express = value
        }
        if let value = dict["Length"] as? String {
            self.length = value
        }
        if let value = dict["MetricName"] as? String {
            self.metricName = value
        }
        if let value = dict["Namespace"] as? String {
            self.namespace = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["Period"] as? String {
            self.period = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
    }
}

public class DescribeMetricListResponseBody : Tea.TeaModel {
    public var code: String?

    public var datapoints: String?

    public var message: String?

    public var nextToken: String?

    public var period: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.datapoints != nil {
            map["Datapoints"] = self.datapoints!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.period != nil {
            map["Period"] = self.period!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Datapoints"] as? String {
            self.datapoints = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["Period"] as? String {
            self.period = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DescribeMetricListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeMetricListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeMetricListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeMetricMetaListRequest : Tea.TeaModel {
    public var labels: String?

    public var metricName: String?

    public var namespace: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.labels != nil {
            map["Labels"] = self.labels!
        }
        if self.metricName != nil {
            map["MetricName"] = self.metricName!
        }
        if self.namespace != nil {
            map["Namespace"] = self.namespace!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Labels"] as? String {
            self.labels = value
        }
        if let value = dict["MetricName"] as? String {
            self.metricName = value
        }
        if let value = dict["Namespace"] as? String {
            self.namespace = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
    }
}

public class DescribeMetricMetaListResponseBody : Tea.TeaModel {
    public class Resources : Tea.TeaModel {
        public class Resource : Tea.TeaModel {
            public var description_: String?

            public var dimensions: String?

            public var labels: String?

            public var metricName: String?

            public var namespace: String?

            public var periods: String?

            public var statistics: String?

            public var unit: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.dimensions != nil {
                    map["Dimensions"] = self.dimensions!
                }
                if self.labels != nil {
                    map["Labels"] = self.labels!
                }
                if self.metricName != nil {
                    map["MetricName"] = self.metricName!
                }
                if self.namespace != nil {
                    map["Namespace"] = self.namespace!
                }
                if self.periods != nil {
                    map["Periods"] = self.periods!
                }
                if self.statistics != nil {
                    map["Statistics"] = self.statistics!
                }
                if self.unit != nil {
                    map["Unit"] = self.unit!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["Dimensions"] as? String {
                    self.dimensions = value
                }
                if let value = dict["Labels"] as? String {
                    self.labels = value
                }
                if let value = dict["MetricName"] as? String {
                    self.metricName = value
                }
                if let value = dict["Namespace"] as? String {
                    self.namespace = value
                }
                if let value = dict["Periods"] as? String {
                    self.periods = value
                }
                if let value = dict["Statistics"] as? String {
                    self.statistics = value
                }
                if let value = dict["Unit"] as? String {
                    self.unit = value
                }
            }
        }
        public var resource: [DescribeMetricMetaListResponseBody.Resources.Resource]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.resource != nil {
                var tmp : [Any] = []
                for k in self.resource! {
                    tmp.append(k.toMap())
                }
                map["Resource"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Resource"] as? [Any?] {
                var tmp : [DescribeMetricMetaListResponseBody.Resources.Resource] = []
                for v in value {
                    if v != nil {
                        var model = DescribeMetricMetaListResponseBody.Resources.Resource()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.resource = tmp
            }
        }
    }
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var resources: DescribeMetricMetaListResponseBody.Resources?

    public var success: Bool?

    public var totalCount: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.resources?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resources != nil {
            map["Resources"] = self.resources?.toMap()
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Resources"] as? [String: Any?] {
            var model = DescribeMetricMetaListResponseBody.Resources()
            model.fromMap(value)
            self.resources = model
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
        if let value = dict["TotalCount"] as? String {
            self.totalCount = value
        }
    }
}

public class DescribeMetricMetaListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeMetricMetaListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeMetricMetaListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeMetricRuleBlackListRequest : Tea.TeaModel {
    public var category: String?

    public var ids: [String]?

    public var instanceIds: [String]?

    public var isEnable: Bool?

    public var name: String?

    public var namespace: String?

    public var order: Int32?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var regionId: String?

    public var scopeType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.category != nil {
            map["Category"] = self.category!
        }
        if self.ids != nil {
            map["Ids"] = self.ids!
        }
        if self.instanceIds != nil {
            map["InstanceIds"] = self.instanceIds!
        }
        if self.isEnable != nil {
            map["IsEnable"] = self.isEnable!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.namespace != nil {
            map["Namespace"] = self.namespace!
        }
        if self.order != nil {
            map["Order"] = self.order!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.scopeType != nil {
            map["ScopeType"] = self.scopeType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Category"] as? String {
            self.category = value
        }
        if let value = dict["Ids"] as? [String] {
            self.ids = value
        }
        if let value = dict["InstanceIds"] as? [String] {
            self.instanceIds = value
        }
        if let value = dict["IsEnable"] as? Bool {
            self.isEnable = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["Namespace"] as? String {
            self.namespace = value
        }
        if let value = dict["Order"] as? Int32 {
            self.order = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ScopeType"] as? String {
            self.scopeType = value
        }
    }
}

public class DescribeMetricRuleBlackListResponseBody : Tea.TeaModel {
    public class DescribeMetricRuleBlackList : Tea.TeaModel {
        public class Metrics : Tea.TeaModel {
            public var metricName: String?

            public var resource: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.metricName != nil {
                    map["MetricName"] = self.metricName!
                }
                if self.resource != nil {
                    map["Resource"] = self.resource!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["MetricName"] as? String {
                    self.metricName = value
                }
                if let value = dict["Resource"] as? String {
                    self.resource = value
                }
            }
        }
        public var category: String?

        public var createTime: String?

        public var effectiveTime: String?

        public var enableEndTime: Int64?

        public var enableStartTime: Int64?

        public var id: String?

        public var instances: [String]?

        public var isEnable: Bool?

        public var metrics: [DescribeMetricRuleBlackListResponseBody.DescribeMetricRuleBlackList.Metrics]?

        public var name: String?

        public var namespace: String?

        public var scopeType: String?

        public var scopeValue: [String]?

        public var updateTime: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.category != nil {
                map["Category"] = self.category!
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.effectiveTime != nil {
                map["EffectiveTime"] = self.effectiveTime!
            }
            if self.enableEndTime != nil {
                map["EnableEndTime"] = self.enableEndTime!
            }
            if self.enableStartTime != nil {
                map["EnableStartTime"] = self.enableStartTime!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.instances != nil {
                map["Instances"] = self.instances!
            }
            if self.isEnable != nil {
                map["IsEnable"] = self.isEnable!
            }
            if self.metrics != nil {
                var tmp : [Any] = []
                for k in self.metrics! {
                    tmp.append(k.toMap())
                }
                map["Metrics"] = tmp
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.namespace != nil {
                map["Namespace"] = self.namespace!
            }
            if self.scopeType != nil {
                map["ScopeType"] = self.scopeType!
            }
            if self.scopeValue != nil {
                map["ScopeValue"] = self.scopeValue!
            }
            if self.updateTime != nil {
                map["UpdateTime"] = self.updateTime!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Category"] as? String {
                self.category = value
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["EffectiveTime"] as? String {
                self.effectiveTime = value
            }
            if let value = dict["EnableEndTime"] as? Int64 {
                self.enableEndTime = value
            }
            if let value = dict["EnableStartTime"] as? Int64 {
                self.enableStartTime = value
            }
            if let value = dict["Id"] as? String {
                self.id = value
            }
            if let value = dict["Instances"] as? [String] {
                self.instances = value
            }
            if let value = dict["IsEnable"] as? Bool {
                self.isEnable = value
            }
            if let value = dict["Metrics"] as? [Any?] {
                var tmp : [DescribeMetricRuleBlackListResponseBody.DescribeMetricRuleBlackList.Metrics] = []
                for v in value {
                    if v != nil {
                        var model = DescribeMetricRuleBlackListResponseBody.DescribeMetricRuleBlackList.Metrics()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.metrics = tmp
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["Namespace"] as? String {
                self.namespace = value
            }
            if let value = dict["ScopeType"] as? String {
                self.scopeType = value
            }
            if let value = dict["ScopeValue"] as? [String] {
                self.scopeValue = value
            }
            if let value = dict["UpdateTime"] as? String {
                self.updateTime = value
            }
        }
    }
    public var code: String?

    public var describeMetricRuleBlackList: [DescribeMetricRuleBlackListResponseBody.DescribeMetricRuleBlackList]?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public var total: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.describeMetricRuleBlackList != nil {
            var tmp : [Any] = []
            for k in self.describeMetricRuleBlackList! {
                tmp.append(k.toMap())
            }
            map["DescribeMetricRuleBlackList"] = tmp
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.total != nil {
            map["Total"] = self.total!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["DescribeMetricRuleBlackList"] as? [Any?] {
            var tmp : [DescribeMetricRuleBlackListResponseBody.DescribeMetricRuleBlackList] = []
            for v in value {
                if v != nil {
                    var model = DescribeMetricRuleBlackListResponseBody.DescribeMetricRuleBlackList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.describeMetricRuleBlackList = tmp
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
        if let value = dict["Total"] as? Int32 {
            self.total = value
        }
    }
}

public class DescribeMetricRuleBlackListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeMetricRuleBlackListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeMetricRuleBlackListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeMetricRuleCountRequest : Tea.TeaModel {
    public var metricName: String?

    public var namespace: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.metricName != nil {
            map["MetricName"] = self.metricName!
        }
        if self.namespace != nil {
            map["Namespace"] = self.namespace!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["MetricName"] as? String {
            self.metricName = value
        }
        if let value = dict["Namespace"] as? String {
            self.namespace = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DescribeMetricRuleCountResponseBody : Tea.TeaModel {
    public class MetricRuleCount : Tea.TeaModel {
        public var alarm: Int32?

        public var disable: Int32?

        public var nodata: Int32?

        public var ok: Int32?

        public var total: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.alarm != nil {
                map["Alarm"] = self.alarm!
            }
            if self.disable != nil {
                map["Disable"] = self.disable!
            }
            if self.nodata != nil {
                map["Nodata"] = self.nodata!
            }
            if self.ok != nil {
                map["Ok"] = self.ok!
            }
            if self.total != nil {
                map["Total"] = self.total!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Alarm"] as? Int32 {
                self.alarm = value
            }
            if let value = dict["Disable"] as? Int32 {
                self.disable = value
            }
            if let value = dict["Nodata"] as? Int32 {
                self.nodata = value
            }
            if let value = dict["Ok"] as? Int32 {
                self.ok = value
            }
            if let value = dict["Total"] as? Int32 {
                self.total = value
            }
        }
    }
    public var code: String?

    public var message: String?

    public var metricRuleCount: DescribeMetricRuleCountResponseBody.MetricRuleCount?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.metricRuleCount?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.metricRuleCount != nil {
            map["MetricRuleCount"] = self.metricRuleCount?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["MetricRuleCount"] as? [String: Any?] {
            var model = DescribeMetricRuleCountResponseBody.MetricRuleCount()
            model.fromMap(value)
            self.metricRuleCount = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DescribeMetricRuleCountResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeMetricRuleCountResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeMetricRuleCountResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeMetricRuleListRequest : Tea.TeaModel {
    public var alertState: String?

    public var dimensions: String?

    public var enableState: Bool?

    public var groupId: String?

    public var metricName: String?

    public var namespace: String?

    public var page: Int32?

    public var pageSize: Int32?

    public var regionId: String?

    public var ruleIds: String?

    public var ruleName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.alertState != nil {
            map["AlertState"] = self.alertState!
        }
        if self.dimensions != nil {
            map["Dimensions"] = self.dimensions!
        }
        if self.enableState != nil {
            map["EnableState"] = self.enableState!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.metricName != nil {
            map["MetricName"] = self.metricName!
        }
        if self.namespace != nil {
            map["Namespace"] = self.namespace!
        }
        if self.page != nil {
            map["Page"] = self.page!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.ruleIds != nil {
            map["RuleIds"] = self.ruleIds!
        }
        if self.ruleName != nil {
            map["RuleName"] = self.ruleName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AlertState"] as? String {
            self.alertState = value
        }
        if let value = dict["Dimensions"] as? String {
            self.dimensions = value
        }
        if let value = dict["EnableState"] as? Bool {
            self.enableState = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["MetricName"] as? String {
            self.metricName = value
        }
        if let value = dict["Namespace"] as? String {
            self.namespace = value
        }
        if let value = dict["Page"] as? Int32 {
            self.page = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["RuleIds"] as? String {
            self.ruleIds = value
        }
        if let value = dict["RuleName"] as? String {
            self.ruleName = value
        }
    }
}

public class DescribeMetricRuleListResponseBody : Tea.TeaModel {
    public class Alarms : Tea.TeaModel {
        public class Alarm : Tea.TeaModel {
            public class CompositeExpression : Tea.TeaModel {
                public class ExpressionList : Tea.TeaModel {
                    public class ExpressionList : Tea.TeaModel {
                        public var comparisonOperator: String?

                        public var metricName: String?

                        public var period: Int32?

                        public var statistics: String?

                        public var threshold: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.comparisonOperator != nil {
                                map["ComparisonOperator"] = self.comparisonOperator!
                            }
                            if self.metricName != nil {
                                map["MetricName"] = self.metricName!
                            }
                            if self.period != nil {
                                map["Period"] = self.period!
                            }
                            if self.statistics != nil {
                                map["Statistics"] = self.statistics!
                            }
                            if self.threshold != nil {
                                map["Threshold"] = self.threshold!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["ComparisonOperator"] as? String {
                                self.comparisonOperator = value
                            }
                            if let value = dict["MetricName"] as? String {
                                self.metricName = value
                            }
                            if let value = dict["Period"] as? Int32 {
                                self.period = value
                            }
                            if let value = dict["Statistics"] as? String {
                                self.statistics = value
                            }
                            if let value = dict["Threshold"] as? String {
                                self.threshold = value
                            }
                        }
                    }
                    public var expressionList: [DescribeMetricRuleListResponseBody.Alarms.Alarm.CompositeExpression.ExpressionList.ExpressionList]?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.expressionList != nil {
                            var tmp : [Any] = []
                            for k in self.expressionList! {
                                tmp.append(k.toMap())
                            }
                            map["ExpressionList"] = tmp
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["ExpressionList"] as? [Any?] {
                            var tmp : [DescribeMetricRuleListResponseBody.Alarms.Alarm.CompositeExpression.ExpressionList.ExpressionList] = []
                            for v in value {
                                if v != nil {
                                    var model = DescribeMetricRuleListResponseBody.Alarms.Alarm.CompositeExpression.ExpressionList.ExpressionList()
                                    if v != nil {
                                        model.fromMap(v as? [String: Any?])
                                    }
                                    tmp.append(model)
                                }
                            }
                            self.expressionList = tmp
                        }
                    }
                }
                public var expressionList: DescribeMetricRuleListResponseBody.Alarms.Alarm.CompositeExpression.ExpressionList?

                public var expressionListJoin: String?

                public var expressionRaw: String?

                public var level: String?

                public var times: Int32?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.expressionList?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.expressionList != nil {
                        map["ExpressionList"] = self.expressionList?.toMap()
                    }
                    if self.expressionListJoin != nil {
                        map["ExpressionListJoin"] = self.expressionListJoin!
                    }
                    if self.expressionRaw != nil {
                        map["ExpressionRaw"] = self.expressionRaw!
                    }
                    if self.level != nil {
                        map["Level"] = self.level!
                    }
                    if self.times != nil {
                        map["Times"] = self.times!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["ExpressionList"] as? [String: Any?] {
                        var model = DescribeMetricRuleListResponseBody.Alarms.Alarm.CompositeExpression.ExpressionList()
                        model.fromMap(value)
                        self.expressionList = model
                    }
                    if let value = dict["ExpressionListJoin"] as? String {
                        self.expressionListJoin = value
                    }
                    if let value = dict["ExpressionRaw"] as? String {
                        self.expressionRaw = value
                    }
                    if let value = dict["Level"] as? String {
                        self.level = value
                    }
                    if let value = dict["Times"] as? Int32 {
                        self.times = value
                    }
                }
            }
            public class Escalations : Tea.TeaModel {
                public class Critical : Tea.TeaModel {
                    public var comparisonOperator: String?

                    public var preCondition: String?

                    public var statistics: String?

                    public var threshold: String?

                    public var times: Int32?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.comparisonOperator != nil {
                            map["ComparisonOperator"] = self.comparisonOperator!
                        }
                        if self.preCondition != nil {
                            map["PreCondition"] = self.preCondition!
                        }
                        if self.statistics != nil {
                            map["Statistics"] = self.statistics!
                        }
                        if self.threshold != nil {
                            map["Threshold"] = self.threshold!
                        }
                        if self.times != nil {
                            map["Times"] = self.times!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["ComparisonOperator"] as? String {
                            self.comparisonOperator = value
                        }
                        if let value = dict["PreCondition"] as? String {
                            self.preCondition = value
                        }
                        if let value = dict["Statistics"] as? String {
                            self.statistics = value
                        }
                        if let value = dict["Threshold"] as? String {
                            self.threshold = value
                        }
                        if let value = dict["Times"] as? Int32 {
                            self.times = value
                        }
                    }
                }
                public class Info : Tea.TeaModel {
                    public var comparisonOperator: String?

                    public var preCondition: String?

                    public var statistics: String?

                    public var threshold: String?

                    public var times: Int32?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.comparisonOperator != nil {
                            map["ComparisonOperator"] = self.comparisonOperator!
                        }
                        if self.preCondition != nil {
                            map["PreCondition"] = self.preCondition!
                        }
                        if self.statistics != nil {
                            map["Statistics"] = self.statistics!
                        }
                        if self.threshold != nil {
                            map["Threshold"] = self.threshold!
                        }
                        if self.times != nil {
                            map["Times"] = self.times!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["ComparisonOperator"] as? String {
                            self.comparisonOperator = value
                        }
                        if let value = dict["PreCondition"] as? String {
                            self.preCondition = value
                        }
                        if let value = dict["Statistics"] as? String {
                            self.statistics = value
                        }
                        if let value = dict["Threshold"] as? String {
                            self.threshold = value
                        }
                        if let value = dict["Times"] as? Int32 {
                            self.times = value
                        }
                    }
                }
                public class Warn : Tea.TeaModel {
                    public var comparisonOperator: String?

                    public var preCondition: String?

                    public var statistics: String?

                    public var threshold: String?

                    public var times: Int32?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.comparisonOperator != nil {
                            map["ComparisonOperator"] = self.comparisonOperator!
                        }
                        if self.preCondition != nil {
                            map["PreCondition"] = self.preCondition!
                        }
                        if self.statistics != nil {
                            map["Statistics"] = self.statistics!
                        }
                        if self.threshold != nil {
                            map["Threshold"] = self.threshold!
                        }
                        if self.times != nil {
                            map["Times"] = self.times!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["ComparisonOperator"] as? String {
                            self.comparisonOperator = value
                        }
                        if let value = dict["PreCondition"] as? String {
                            self.preCondition = value
                        }
                        if let value = dict["Statistics"] as? String {
                            self.statistics = value
                        }
                        if let value = dict["Threshold"] as? String {
                            self.threshold = value
                        }
                        if let value = dict["Times"] as? Int32 {
                            self.times = value
                        }
                    }
                }
                public var critical: DescribeMetricRuleListResponseBody.Alarms.Alarm.Escalations.Critical?

                public var info: DescribeMetricRuleListResponseBody.Alarms.Alarm.Escalations.Info?

                public var warn: DescribeMetricRuleListResponseBody.Alarms.Alarm.Escalations.Warn?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.critical?.validate()
                    try self.info?.validate()
                    try self.warn?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.critical != nil {
                        map["Critical"] = self.critical?.toMap()
                    }
                    if self.info != nil {
                        map["Info"] = self.info?.toMap()
                    }
                    if self.warn != nil {
                        map["Warn"] = self.warn?.toMap()
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Critical"] as? [String: Any?] {
                        var model = DescribeMetricRuleListResponseBody.Alarms.Alarm.Escalations.Critical()
                        model.fromMap(value)
                        self.critical = model
                    }
                    if let value = dict["Info"] as? [String: Any?] {
                        var model = DescribeMetricRuleListResponseBody.Alarms.Alarm.Escalations.Info()
                        model.fromMap(value)
                        self.info = model
                    }
                    if let value = dict["Warn"] as? [String: Any?] {
                        var model = DescribeMetricRuleListResponseBody.Alarms.Alarm.Escalations.Warn()
                        model.fromMap(value)
                        self.warn = model
                    }
                }
            }
            public class Labels : Tea.TeaModel {
                public class Labels : Tea.TeaModel {
                    public var key: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.key != nil {
                            map["Key"] = self.key!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Key"] as? String {
                            self.key = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public var labels: [DescribeMetricRuleListResponseBody.Alarms.Alarm.Labels.Labels]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.labels != nil {
                        var tmp : [Any] = []
                        for k in self.labels! {
                            tmp.append(k.toMap())
                        }
                        map["Labels"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Labels"] as? [Any?] {
                        var tmp : [DescribeMetricRuleListResponseBody.Alarms.Alarm.Labels.Labels] = []
                        for v in value {
                            if v != nil {
                                var model = DescribeMetricRuleListResponseBody.Alarms.Alarm.Labels.Labels()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.labels = tmp
                    }
                }
            }
            public class Prometheus : Tea.TeaModel {
                public class Annotations : Tea.TeaModel {
                    public class Annotations : Tea.TeaModel {
                        public var key: String?

                        public var value: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.key != nil {
                                map["Key"] = self.key!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Key"] as? String {
                                self.key = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                        }
                    }
                    public var annotations: [DescribeMetricRuleListResponseBody.Alarms.Alarm.Prometheus.Annotations.Annotations]?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.annotations != nil {
                            var tmp : [Any] = []
                            for k in self.annotations! {
                                tmp.append(k.toMap())
                            }
                            map["Annotations"] = tmp
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Annotations"] as? [Any?] {
                            var tmp : [DescribeMetricRuleListResponseBody.Alarms.Alarm.Prometheus.Annotations.Annotations] = []
                            for v in value {
                                if v != nil {
                                    var model = DescribeMetricRuleListResponseBody.Alarms.Alarm.Prometheus.Annotations.Annotations()
                                    if v != nil {
                                        model.fromMap(v as? [String: Any?])
                                    }
                                    tmp.append(model)
                                }
                            }
                            self.annotations = tmp
                        }
                    }
                }
                public var annotations: DescribeMetricRuleListResponseBody.Alarms.Alarm.Prometheus.Annotations?

                public var level: String?

                public var promQL: String?

                public var times: Int64?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.annotations?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.annotations != nil {
                        map["Annotations"] = self.annotations?.toMap()
                    }
                    if self.level != nil {
                        map["Level"] = self.level!
                    }
                    if self.promQL != nil {
                        map["PromQL"] = self.promQL!
                    }
                    if self.times != nil {
                        map["Times"] = self.times!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Annotations"] as? [String: Any?] {
                        var model = DescribeMetricRuleListResponseBody.Alarms.Alarm.Prometheus.Annotations()
                        model.fromMap(value)
                        self.annotations = model
                    }
                    if let value = dict["Level"] as? String {
                        self.level = value
                    }
                    if let value = dict["PromQL"] as? String {
                        self.promQL = value
                    }
                    if let value = dict["Times"] as? Int64 {
                        self.times = value
                    }
                }
            }
            public var alertState: String?

            public var compositeExpression: DescribeMetricRuleListResponseBody.Alarms.Alarm.CompositeExpression?

            public var contactGroups: String?

            public var dimensions: String?

            public var effectiveInterval: String?

            public var enableState: Bool?

            public var escalations: DescribeMetricRuleListResponseBody.Alarms.Alarm.Escalations?

            public var gmtCreate: Int64?

            public var gmtUpdate: String?

            public var groupId: String?

            public var groupName: String?

            public var labels: DescribeMetricRuleListResponseBody.Alarms.Alarm.Labels?

            public var mailSubject: String?

            public var metricName: String?

            public var namespace: String?

            public var noDataPolicy: String?

            public var noEffectiveInterval: String?

            public var period: String?

            public var productCategory: String?

            public var prometheus: DescribeMetricRuleListResponseBody.Alarms.Alarm.Prometheus?

            public var resources: String?

            public var ruleId: String?

            public var ruleName: String?

            public var silenceTime: Int32?

            public var sourceType: String?

            public var webhook: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.compositeExpression?.validate()
                try self.escalations?.validate()
                try self.labels?.validate()
                try self.prometheus?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.alertState != nil {
                    map["AlertState"] = self.alertState!
                }
                if self.compositeExpression != nil {
                    map["CompositeExpression"] = self.compositeExpression?.toMap()
                }
                if self.contactGroups != nil {
                    map["ContactGroups"] = self.contactGroups!
                }
                if self.dimensions != nil {
                    map["Dimensions"] = self.dimensions!
                }
                if self.effectiveInterval != nil {
                    map["EffectiveInterval"] = self.effectiveInterval!
                }
                if self.enableState != nil {
                    map["EnableState"] = self.enableState!
                }
                if self.escalations != nil {
                    map["Escalations"] = self.escalations?.toMap()
                }
                if self.gmtCreate != nil {
                    map["GmtCreate"] = self.gmtCreate!
                }
                if self.gmtUpdate != nil {
                    map["GmtUpdate"] = self.gmtUpdate!
                }
                if self.groupId != nil {
                    map["GroupId"] = self.groupId!
                }
                if self.groupName != nil {
                    map["GroupName"] = self.groupName!
                }
                if self.labels != nil {
                    map["Labels"] = self.labels?.toMap()
                }
                if self.mailSubject != nil {
                    map["MailSubject"] = self.mailSubject!
                }
                if self.metricName != nil {
                    map["MetricName"] = self.metricName!
                }
                if self.namespace != nil {
                    map["Namespace"] = self.namespace!
                }
                if self.noDataPolicy != nil {
                    map["NoDataPolicy"] = self.noDataPolicy!
                }
                if self.noEffectiveInterval != nil {
                    map["NoEffectiveInterval"] = self.noEffectiveInterval!
                }
                if self.period != nil {
                    map["Period"] = self.period!
                }
                if self.productCategory != nil {
                    map["ProductCategory"] = self.productCategory!
                }
                if self.prometheus != nil {
                    map["Prometheus"] = self.prometheus?.toMap()
                }
                if self.resources != nil {
                    map["Resources"] = self.resources!
                }
                if self.ruleId != nil {
                    map["RuleId"] = self.ruleId!
                }
                if self.ruleName != nil {
                    map["RuleName"] = self.ruleName!
                }
                if self.silenceTime != nil {
                    map["SilenceTime"] = self.silenceTime!
                }
                if self.sourceType != nil {
                    map["SourceType"] = self.sourceType!
                }
                if self.webhook != nil {
                    map["Webhook"] = self.webhook!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AlertState"] as? String {
                    self.alertState = value
                }
                if let value = dict["CompositeExpression"] as? [String: Any?] {
                    var model = DescribeMetricRuleListResponseBody.Alarms.Alarm.CompositeExpression()
                    model.fromMap(value)
                    self.compositeExpression = model
                }
                if let value = dict["ContactGroups"] as? String {
                    self.contactGroups = value
                }
                if let value = dict["Dimensions"] as? String {
                    self.dimensions = value
                }
                if let value = dict["EffectiveInterval"] as? String {
                    self.effectiveInterval = value
                }
                if let value = dict["EnableState"] as? Bool {
                    self.enableState = value
                }
                if let value = dict["Escalations"] as? [String: Any?] {
                    var model = DescribeMetricRuleListResponseBody.Alarms.Alarm.Escalations()
                    model.fromMap(value)
                    self.escalations = model
                }
                if let value = dict["GmtCreate"] as? Int64 {
                    self.gmtCreate = value
                }
                if let value = dict["GmtUpdate"] as? String {
                    self.gmtUpdate = value
                }
                if let value = dict["GroupId"] as? String {
                    self.groupId = value
                }
                if let value = dict["GroupName"] as? String {
                    self.groupName = value
                }
                if let value = dict["Labels"] as? [String: Any?] {
                    var model = DescribeMetricRuleListResponseBody.Alarms.Alarm.Labels()
                    model.fromMap(value)
                    self.labels = model
                }
                if let value = dict["MailSubject"] as? String {
                    self.mailSubject = value
                }
                if let value = dict["MetricName"] as? String {
                    self.metricName = value
                }
                if let value = dict["Namespace"] as? String {
                    self.namespace = value
                }
                if let value = dict["NoDataPolicy"] as? String {
                    self.noDataPolicy = value
                }
                if let value = dict["NoEffectiveInterval"] as? String {
                    self.noEffectiveInterval = value
                }
                if let value = dict["Period"] as? String {
                    self.period = value
                }
                if let value = dict["ProductCategory"] as? String {
                    self.productCategory = value
                }
                if let value = dict["Prometheus"] as? [String: Any?] {
                    var model = DescribeMetricRuleListResponseBody.Alarms.Alarm.Prometheus()
                    model.fromMap(value)
                    self.prometheus = model
                }
                if let value = dict["Resources"] as? String {
                    self.resources = value
                }
                if let value = dict["RuleId"] as? String {
                    self.ruleId = value
                }
                if let value = dict["RuleName"] as? String {
                    self.ruleName = value
                }
                if let value = dict["SilenceTime"] as? Int32 {
                    self.silenceTime = value
                }
                if let value = dict["SourceType"] as? String {
                    self.sourceType = value
                }
                if let value = dict["Webhook"] as? String {
                    self.webhook = value
                }
            }
        }
        public var alarm: [DescribeMetricRuleListResponseBody.Alarms.Alarm]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.alarm != nil {
                var tmp : [Any] = []
                for k in self.alarm! {
                    tmp.append(k.toMap())
                }
                map["Alarm"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Alarm"] as? [Any?] {
                var tmp : [DescribeMetricRuleListResponseBody.Alarms.Alarm] = []
                for v in value {
                    if v != nil {
                        var model = DescribeMetricRuleListResponseBody.Alarms.Alarm()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.alarm = tmp
            }
        }
    }
    public var alarms: DescribeMetricRuleListResponseBody.Alarms?

    public var code: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public var total: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.alarms?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.alarms != nil {
            map["Alarms"] = self.alarms?.toMap()
        }
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.total != nil {
            map["Total"] = self.total!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Alarms"] as? [String: Any?] {
            var model = DescribeMetricRuleListResponseBody.Alarms()
            model.fromMap(value)
            self.alarms = model
        }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
        if let value = dict["Total"] as? String {
            self.total = value
        }
    }
}

public class DescribeMetricRuleListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeMetricRuleListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeMetricRuleListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeMetricRuleTargetsRequest : Tea.TeaModel {
    public var regionId: String?

    public var ruleId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.ruleId != nil {
            map["RuleId"] = self.ruleId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["RuleId"] as? String {
            self.ruleId = value
        }
    }
}

public class DescribeMetricRuleTargetsResponseBody : Tea.TeaModel {
    public class Targets : Tea.TeaModel {
        public class Target : Tea.TeaModel {
            public var arn: String?

            public var id: String?

            public var jsonParams: String?

            public var level: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.arn != nil {
                    map["Arn"] = self.arn!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.jsonParams != nil {
                    map["JsonParams"] = self.jsonParams!
                }
                if self.level != nil {
                    map["Level"] = self.level!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Arn"] as? String {
                    self.arn = value
                }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
                if let value = dict["JsonParams"] as? String {
                    self.jsonParams = value
                }
                if let value = dict["Level"] as? String {
                    self.level = value
                }
            }
        }
        public var target: [DescribeMetricRuleTargetsResponseBody.Targets.Target]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.target != nil {
                var tmp : [Any] = []
                for k in self.target! {
                    tmp.append(k.toMap())
                }
                map["Target"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Target"] as? [Any?] {
                var tmp : [DescribeMetricRuleTargetsResponseBody.Targets.Target] = []
                for v in value {
                    if v != nil {
                        var model = DescribeMetricRuleTargetsResponseBody.Targets.Target()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.target = tmp
            }
        }
    }
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public var targets: DescribeMetricRuleTargetsResponseBody.Targets?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.targets?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.targets != nil {
            map["Targets"] = self.targets?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
        if let value = dict["Targets"] as? [String: Any?] {
            var model = DescribeMetricRuleTargetsResponseBody.Targets()
            model.fromMap(value)
            self.targets = model
        }
    }
}

public class DescribeMetricRuleTargetsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeMetricRuleTargetsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeMetricRuleTargetsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeMetricRuleTemplateAttributeRequest : Tea.TeaModel {
    public var name: String?

    public var regionId: String?

    public var templateId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.templateId != nil {
            map["TemplateId"] = self.templateId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["TemplateId"] as? String {
            self.templateId = value
        }
    }
}

public class DescribeMetricRuleTemplateAttributeResponseBody : Tea.TeaModel {
    public class Resource : Tea.TeaModel {
        public class AlertTemplates : Tea.TeaModel {
            public class AlertTemplate : Tea.TeaModel {
                public class Escalations : Tea.TeaModel {
                    public class Critical : Tea.TeaModel {
                        public var comparisonOperator: String?

                        public var statistics: String?

                        public var threshold: String?

                        public var times: Int32?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.comparisonOperator != nil {
                                map["ComparisonOperator"] = self.comparisonOperator!
                            }
                            if self.statistics != nil {
                                map["Statistics"] = self.statistics!
                            }
                            if self.threshold != nil {
                                map["Threshold"] = self.threshold!
                            }
                            if self.times != nil {
                                map["Times"] = self.times!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["ComparisonOperator"] as? String {
                                self.comparisonOperator = value
                            }
                            if let value = dict["Statistics"] as? String {
                                self.statistics = value
                            }
                            if let value = dict["Threshold"] as? String {
                                self.threshold = value
                            }
                            if let value = dict["Times"] as? Int32 {
                                self.times = value
                            }
                        }
                    }
                    public class Info : Tea.TeaModel {
                        public var comparisonOperator: String?

                        public var statistics: String?

                        public var threshold: String?

                        public var times: Int32?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.comparisonOperator != nil {
                                map["ComparisonOperator"] = self.comparisonOperator!
                            }
                            if self.statistics != nil {
                                map["Statistics"] = self.statistics!
                            }
                            if self.threshold != nil {
                                map["Threshold"] = self.threshold!
                            }
                            if self.times != nil {
                                map["Times"] = self.times!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["ComparisonOperator"] as? String {
                                self.comparisonOperator = value
                            }
                            if let value = dict["Statistics"] as? String {
                                self.statistics = value
                            }
                            if let value = dict["Threshold"] as? String {
                                self.threshold = value
                            }
                            if let value = dict["Times"] as? Int32 {
                                self.times = value
                            }
                        }
                    }
                    public class Warn : Tea.TeaModel {
                        public var comparisonOperator: String?

                        public var statistics: String?

                        public var threshold: String?

                        public var times: Int32?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.comparisonOperator != nil {
                                map["ComparisonOperator"] = self.comparisonOperator!
                            }
                            if self.statistics != nil {
                                map["Statistics"] = self.statistics!
                            }
                            if self.threshold != nil {
                                map["Threshold"] = self.threshold!
                            }
                            if self.times != nil {
                                map["Times"] = self.times!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["ComparisonOperator"] as? String {
                                self.comparisonOperator = value
                            }
                            if let value = dict["Statistics"] as? String {
                                self.statistics = value
                            }
                            if let value = dict["Threshold"] as? String {
                                self.threshold = value
                            }
                            if let value = dict["Times"] as? Int32 {
                                self.times = value
                            }
                        }
                    }
                    public var critical: DescribeMetricRuleTemplateAttributeResponseBody.Resource.AlertTemplates.AlertTemplate.Escalations.Critical?

                    public var info: DescribeMetricRuleTemplateAttributeResponseBody.Resource.AlertTemplates.AlertTemplate.Escalations.Info?

                    public var warn: DescribeMetricRuleTemplateAttributeResponseBody.Resource.AlertTemplates.AlertTemplate.Escalations.Warn?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                        try self.critical?.validate()
                        try self.info?.validate()
                        try self.warn?.validate()
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.critical != nil {
                            map["Critical"] = self.critical?.toMap()
                        }
                        if self.info != nil {
                            map["Info"] = self.info?.toMap()
                        }
                        if self.warn != nil {
                            map["Warn"] = self.warn?.toMap()
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Critical"] as? [String: Any?] {
                            var model = DescribeMetricRuleTemplateAttributeResponseBody.Resource.AlertTemplates.AlertTemplate.Escalations.Critical()
                            model.fromMap(value)
                            self.critical = model
                        }
                        if let value = dict["Info"] as? [String: Any?] {
                            var model = DescribeMetricRuleTemplateAttributeResponseBody.Resource.AlertTemplates.AlertTemplate.Escalations.Info()
                            model.fromMap(value)
                            self.info = model
                        }
                        if let value = dict["Warn"] as? [String: Any?] {
                            var model = DescribeMetricRuleTemplateAttributeResponseBody.Resource.AlertTemplates.AlertTemplate.Escalations.Warn()
                            model.fromMap(value)
                            self.warn = model
                        }
                    }
                }
                public class Labels : Tea.TeaModel {
                    public class Labels : Tea.TeaModel {
                        public var key: String?

                        public var value: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.key != nil {
                                map["Key"] = self.key!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Key"] as? String {
                                self.key = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                        }
                    }
                    public var labels: [DescribeMetricRuleTemplateAttributeResponseBody.Resource.AlertTemplates.AlertTemplate.Labels.Labels]?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.labels != nil {
                            var tmp : [Any] = []
                            for k in self.labels! {
                                tmp.append(k.toMap())
                            }
                            map["Labels"] = tmp
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Labels"] as? [Any?] {
                            var tmp : [DescribeMetricRuleTemplateAttributeResponseBody.Resource.AlertTemplates.AlertTemplate.Labels.Labels] = []
                            for v in value {
                                if v != nil {
                                    var model = DescribeMetricRuleTemplateAttributeResponseBody.Resource.AlertTemplates.AlertTemplate.Labels.Labels()
                                    if v != nil {
                                        model.fromMap(v as? [String: Any?])
                                    }
                                    tmp.append(model)
                                }
                            }
                            self.labels = tmp
                        }
                    }
                }
                public var category: String?

                public var escalations: DescribeMetricRuleTemplateAttributeResponseBody.Resource.AlertTemplates.AlertTemplate.Escalations?

                public var labels: DescribeMetricRuleTemplateAttributeResponseBody.Resource.AlertTemplates.AlertTemplate.Labels?

                public var metricName: String?

                public var namespace: String?

                public var noDataPolicy: String?

                public var ruleName: String?

                public var selector: String?

                public var silenceTime: Int32?

                public var webhook: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.escalations?.validate()
                    try self.labels?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.category != nil {
                        map["Category"] = self.category!
                    }
                    if self.escalations != nil {
                        map["Escalations"] = self.escalations?.toMap()
                    }
                    if self.labels != nil {
                        map["Labels"] = self.labels?.toMap()
                    }
                    if self.metricName != nil {
                        map["MetricName"] = self.metricName!
                    }
                    if self.namespace != nil {
                        map["Namespace"] = self.namespace!
                    }
                    if self.noDataPolicy != nil {
                        map["NoDataPolicy"] = self.noDataPolicy!
                    }
                    if self.ruleName != nil {
                        map["RuleName"] = self.ruleName!
                    }
                    if self.selector != nil {
                        map["Selector"] = self.selector!
                    }
                    if self.silenceTime != nil {
                        map["SilenceTime"] = self.silenceTime!
                    }
                    if self.webhook != nil {
                        map["Webhook"] = self.webhook!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Category"] as? String {
                        self.category = value
                    }
                    if let value = dict["Escalations"] as? [String: Any?] {
                        var model = DescribeMetricRuleTemplateAttributeResponseBody.Resource.AlertTemplates.AlertTemplate.Escalations()
                        model.fromMap(value)
                        self.escalations = model
                    }
                    if let value = dict["Labels"] as? [String: Any?] {
                        var model = DescribeMetricRuleTemplateAttributeResponseBody.Resource.AlertTemplates.AlertTemplate.Labels()
                        model.fromMap(value)
                        self.labels = model
                    }
                    if let value = dict["MetricName"] as? String {
                        self.metricName = value
                    }
                    if let value = dict["Namespace"] as? String {
                        self.namespace = value
                    }
                    if let value = dict["NoDataPolicy"] as? String {
                        self.noDataPolicy = value
                    }
                    if let value = dict["RuleName"] as? String {
                        self.ruleName = value
                    }
                    if let value = dict["Selector"] as? String {
                        self.selector = value
                    }
                    if let value = dict["SilenceTime"] as? Int32 {
                        self.silenceTime = value
                    }
                    if let value = dict["Webhook"] as? String {
                        self.webhook = value
                    }
                }
            }
            public var alertTemplate: [DescribeMetricRuleTemplateAttributeResponseBody.Resource.AlertTemplates.AlertTemplate]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.alertTemplate != nil {
                    var tmp : [Any] = []
                    for k in self.alertTemplate! {
                        tmp.append(k.toMap())
                    }
                    map["AlertTemplate"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AlertTemplate"] as? [Any?] {
                    var tmp : [DescribeMetricRuleTemplateAttributeResponseBody.Resource.AlertTemplates.AlertTemplate] = []
                    for v in value {
                        if v != nil {
                            var model = DescribeMetricRuleTemplateAttributeResponseBody.Resource.AlertTemplates.AlertTemplate()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.alertTemplate = tmp
                }
            }
        }
        public var alertTemplates: DescribeMetricRuleTemplateAttributeResponseBody.Resource.AlertTemplates?

        public var description_: String?

        public var name: String?

        public var restVersion: String?

        public var templateId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.alertTemplates?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.alertTemplates != nil {
                map["AlertTemplates"] = self.alertTemplates?.toMap()
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.restVersion != nil {
                map["RestVersion"] = self.restVersion!
            }
            if self.templateId != nil {
                map["TemplateId"] = self.templateId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AlertTemplates"] as? [String: Any?] {
                var model = DescribeMetricRuleTemplateAttributeResponseBody.Resource.AlertTemplates()
                model.fromMap(value)
                self.alertTemplates = model
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["RestVersion"] as? String {
                self.restVersion = value
            }
            if let value = dict["TemplateId"] as? String {
                self.templateId = value
            }
        }
    }
    public var code: Int32?

    public var message: String?

    public var requestId: String?

    public var resource: DescribeMetricRuleTemplateAttributeResponseBody.Resource?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.resource?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resource != nil {
            map["Resource"] = self.resource?.toMap()
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Resource"] as? [String: Any?] {
            var model = DescribeMetricRuleTemplateAttributeResponseBody.Resource()
            model.fromMap(value)
            self.resource = model
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DescribeMetricRuleTemplateAttributeResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeMetricRuleTemplateAttributeResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeMetricRuleTemplateAttributeResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeMetricRuleTemplateListRequest : Tea.TeaModel {
    public var history: Bool?

    public var keyword: String?

    public var name: String?

    public var order: Bool?

    public var orderBy: String?

    public var pageNumber: Int64?

    public var pageSize: Int64?

    public var regionId: String?

    public var templateId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.history != nil {
            map["History"] = self.history!
        }
        if self.keyword != nil {
            map["Keyword"] = self.keyword!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.order != nil {
            map["Order"] = self.order!
        }
        if self.orderBy != nil {
            map["OrderBy"] = self.orderBy!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.templateId != nil {
            map["TemplateId"] = self.templateId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["History"] as? Bool {
            self.history = value
        }
        if let value = dict["Keyword"] as? String {
            self.keyword = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["Order"] as? Bool {
            self.order = value
        }
        if let value = dict["OrderBy"] as? String {
            self.orderBy = value
        }
        if let value = dict["PageNumber"] as? Int64 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["TemplateId"] as? Int64 {
            self.templateId = value
        }
    }
}

public class DescribeMetricRuleTemplateListResponseBody : Tea.TeaModel {
    public class Templates : Tea.TeaModel {
        public class Template : Tea.TeaModel {
            public class ApplyHistories : Tea.TeaModel {
                public class ApplyHistory : Tea.TeaModel {
                    public var applyTime: Int64?

                    public var groupId: Int64?

                    public var groupName: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.applyTime != nil {
                            map["ApplyTime"] = self.applyTime!
                        }
                        if self.groupId != nil {
                            map["GroupId"] = self.groupId!
                        }
                        if self.groupName != nil {
                            map["GroupName"] = self.groupName!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["ApplyTime"] as? Int64 {
                            self.applyTime = value
                        }
                        if let value = dict["GroupId"] as? Int64 {
                            self.groupId = value
                        }
                        if let value = dict["GroupName"] as? String {
                            self.groupName = value
                        }
                    }
                }
                public var applyHistory: [DescribeMetricRuleTemplateListResponseBody.Templates.Template.ApplyHistories.ApplyHistory]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.applyHistory != nil {
                        var tmp : [Any] = []
                        for k in self.applyHistory! {
                            tmp.append(k.toMap())
                        }
                        map["ApplyHistory"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["ApplyHistory"] as? [Any?] {
                        var tmp : [DescribeMetricRuleTemplateListResponseBody.Templates.Template.ApplyHistories.ApplyHistory] = []
                        for v in value {
                            if v != nil {
                                var model = DescribeMetricRuleTemplateListResponseBody.Templates.Template.ApplyHistories.ApplyHistory()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.applyHistory = tmp
                    }
                }
            }
            public var applyHistories: DescribeMetricRuleTemplateListResponseBody.Templates.Template.ApplyHistories?

            public var description_: String?

            public var gmtCreate: Int64?

            public var gmtModified: Int64?

            public var name: String?

            public var restVersion: Int64?

            public var templateId: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.applyHistories?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.applyHistories != nil {
                    map["ApplyHistories"] = self.applyHistories?.toMap()
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.gmtCreate != nil {
                    map["GmtCreate"] = self.gmtCreate!
                }
                if self.gmtModified != nil {
                    map["GmtModified"] = self.gmtModified!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.restVersion != nil {
                    map["RestVersion"] = self.restVersion!
                }
                if self.templateId != nil {
                    map["TemplateId"] = self.templateId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ApplyHistories"] as? [String: Any?] {
                    var model = DescribeMetricRuleTemplateListResponseBody.Templates.Template.ApplyHistories()
                    model.fromMap(value)
                    self.applyHistories = model
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["GmtCreate"] as? Int64 {
                    self.gmtCreate = value
                }
                if let value = dict["GmtModified"] as? Int64 {
                    self.gmtModified = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["RestVersion"] as? Int64 {
                    self.restVersion = value
                }
                if let value = dict["TemplateId"] as? Int64 {
                    self.templateId = value
                }
            }
        }
        public var template: [DescribeMetricRuleTemplateListResponseBody.Templates.Template]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.template != nil {
                var tmp : [Any] = []
                for k in self.template! {
                    tmp.append(k.toMap())
                }
                map["Template"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Template"] as? [Any?] {
                var tmp : [DescribeMetricRuleTemplateListResponseBody.Templates.Template] = []
                for v in value {
                    if v != nil {
                        var model = DescribeMetricRuleTemplateListResponseBody.Templates.Template()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.template = tmp
            }
        }
    }
    public var code: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public var templates: DescribeMetricRuleTemplateListResponseBody.Templates?

    public var total: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.templates?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.templates != nil {
            map["Templates"] = self.templates?.toMap()
        }
        if self.total != nil {
            map["Total"] = self.total!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
        if let value = dict["Templates"] as? [String: Any?] {
            var model = DescribeMetricRuleTemplateListResponseBody.Templates()
            model.fromMap(value)
            self.templates = model
        }
        if let value = dict["Total"] as? Int64 {
            self.total = value
        }
    }
}

public class DescribeMetricRuleTemplateListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeMetricRuleTemplateListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeMetricRuleTemplateListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeMetricTopRequest : Tea.TeaModel {
    public var dimensions: String?

    public var endTime: String?

    public var express: String?

    public var length: String?

    public var metricName: String?

    public var namespace: String?

    public var orderDesc: String?

    public var orderby: String?

    public var period: String?

    public var regionId: String?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dimensions != nil {
            map["Dimensions"] = self.dimensions!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.express != nil {
            map["Express"] = self.express!
        }
        if self.length != nil {
            map["Length"] = self.length!
        }
        if self.metricName != nil {
            map["MetricName"] = self.metricName!
        }
        if self.namespace != nil {
            map["Namespace"] = self.namespace!
        }
        if self.orderDesc != nil {
            map["OrderDesc"] = self.orderDesc!
        }
        if self.orderby != nil {
            map["Orderby"] = self.orderby!
        }
        if self.period != nil {
            map["Period"] = self.period!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Dimensions"] as? String {
            self.dimensions = value
        }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["Express"] as? String {
            self.express = value
        }
        if let value = dict["Length"] as? String {
            self.length = value
        }
        if let value = dict["MetricName"] as? String {
            self.metricName = value
        }
        if let value = dict["Namespace"] as? String {
            self.namespace = value
        }
        if let value = dict["OrderDesc"] as? String {
            self.orderDesc = value
        }
        if let value = dict["Orderby"] as? String {
            self.orderby = value
        }
        if let value = dict["Period"] as? String {
            self.period = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
    }
}

public class DescribeMetricTopResponseBody : Tea.TeaModel {
    public var code: String?

    public var datapoints: String?

    public var message: String?

    public var period: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.datapoints != nil {
            map["Datapoints"] = self.datapoints!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.period != nil {
            map["Period"] = self.period!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Datapoints"] as? String {
            self.datapoints = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Period"] as? String {
            self.period = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeMetricTopResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeMetricTopResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeMetricTopResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeMonitorGroupCategoriesRequest : Tea.TeaModel {
    public var groupId: Int64?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["GroupId"] as? Int64 {
            self.groupId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DescribeMonitorGroupCategoriesResponseBody : Tea.TeaModel {
    public class MonitorGroupCategories : Tea.TeaModel {
        public class MonitorGroupCategory : Tea.TeaModel {
            public class CategoryItem : Tea.TeaModel {
                public var category: String?

                public var count: Int32?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.category != nil {
                        map["Category"] = self.category!
                    }
                    if self.count != nil {
                        map["Count"] = self.count!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Category"] as? String {
                        self.category = value
                    }
                    if let value = dict["Count"] as? Int32 {
                        self.count = value
                    }
                }
            }
            public var categoryItem: [DescribeMonitorGroupCategoriesResponseBody.MonitorGroupCategories.MonitorGroupCategory.CategoryItem]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.categoryItem != nil {
                    var tmp : [Any] = []
                    for k in self.categoryItem! {
                        tmp.append(k.toMap())
                    }
                    map["CategoryItem"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CategoryItem"] as? [Any?] {
                    var tmp : [DescribeMonitorGroupCategoriesResponseBody.MonitorGroupCategories.MonitorGroupCategory.CategoryItem] = []
                    for v in value {
                        if v != nil {
                            var model = DescribeMonitorGroupCategoriesResponseBody.MonitorGroupCategories.MonitorGroupCategory.CategoryItem()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.categoryItem = tmp
                }
            }
        }
        public var groupId: Int64?

        public var monitorGroupCategory: DescribeMonitorGroupCategoriesResponseBody.MonitorGroupCategories.MonitorGroupCategory?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.monitorGroupCategory?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.groupId != nil {
                map["GroupId"] = self.groupId!
            }
            if self.monitorGroupCategory != nil {
                map["MonitorGroupCategory"] = self.monitorGroupCategory?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["GroupId"] as? Int64 {
                self.groupId = value
            }
            if let value = dict["MonitorGroupCategory"] as? [String: Any?] {
                var model = DescribeMonitorGroupCategoriesResponseBody.MonitorGroupCategories.MonitorGroupCategory()
                model.fromMap(value)
                self.monitorGroupCategory = model
            }
        }
    }
    public var code: Int32?

    public var message: String?

    public var monitorGroupCategories: DescribeMonitorGroupCategoriesResponseBody.MonitorGroupCategories?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.monitorGroupCategories?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.monitorGroupCategories != nil {
            map["MonitorGroupCategories"] = self.monitorGroupCategories?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["MonitorGroupCategories"] as? [String: Any?] {
            var model = DescribeMonitorGroupCategoriesResponseBody.MonitorGroupCategories()
            model.fromMap(value)
            self.monitorGroupCategories = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DescribeMonitorGroupCategoriesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeMonitorGroupCategoriesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeMonitorGroupCategoriesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeMonitorGroupDynamicRulesRequest : Tea.TeaModel {
    public var groupId: Int64?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["GroupId"] as? Int64 {
            self.groupId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DescribeMonitorGroupDynamicRulesResponseBody : Tea.TeaModel {
    public class Resource : Tea.TeaModel {
        public class Resource : Tea.TeaModel {
            public class Filters : Tea.TeaModel {
                public class Filter : Tea.TeaModel {
                    public var function: String?

                    public var name: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.function != nil {
                            map["Function"] = self.function!
                        }
                        if self.name != nil {
                            map["Name"] = self.name!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Function"] as? String {
                            self.function = value
                        }
                        if let value = dict["Name"] as? String {
                            self.name = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public var filter: [DescribeMonitorGroupDynamicRulesResponseBody.Resource.Resource.Filters.Filter]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.filter != nil {
                        var tmp : [Any] = []
                        for k in self.filter! {
                            tmp.append(k.toMap())
                        }
                        map["Filter"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Filter"] as? [Any?] {
                        var tmp : [DescribeMonitorGroupDynamicRulesResponseBody.Resource.Resource.Filters.Filter] = []
                        for v in value {
                            if v != nil {
                                var model = DescribeMonitorGroupDynamicRulesResponseBody.Resource.Resource.Filters.Filter()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.filter = tmp
                    }
                }
            }
            public var category: String?

            public var filterRelation: String?

            public var filters: DescribeMonitorGroupDynamicRulesResponseBody.Resource.Resource.Filters?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.filters?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.category != nil {
                    map["Category"] = self.category!
                }
                if self.filterRelation != nil {
                    map["FilterRelation"] = self.filterRelation!
                }
                if self.filters != nil {
                    map["Filters"] = self.filters?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Category"] as? String {
                    self.category = value
                }
                if let value = dict["FilterRelation"] as? String {
                    self.filterRelation = value
                }
                if let value = dict["Filters"] as? [String: Any?] {
                    var model = DescribeMonitorGroupDynamicRulesResponseBody.Resource.Resource.Filters()
                    model.fromMap(value)
                    self.filters = model
                }
            }
        }
        public var resource: [DescribeMonitorGroupDynamicRulesResponseBody.Resource.Resource]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.resource != nil {
                var tmp : [Any] = []
                for k in self.resource! {
                    tmp.append(k.toMap())
                }
                map["Resource"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Resource"] as? [Any?] {
                var tmp : [DescribeMonitorGroupDynamicRulesResponseBody.Resource.Resource] = []
                for v in value {
                    if v != nil {
                        var model = DescribeMonitorGroupDynamicRulesResponseBody.Resource.Resource()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.resource = tmp
            }
        }
    }
    public var code: Int32?

    public var message: String?

    public var requestId: String?

    public var resource: DescribeMonitorGroupDynamicRulesResponseBody.Resource?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.resource?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resource != nil {
            map["Resource"] = self.resource?.toMap()
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Resource"] as? [String: Any?] {
            var model = DescribeMonitorGroupDynamicRulesResponseBody.Resource()
            model.fromMap(value)
            self.resource = model
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DescribeMonitorGroupDynamicRulesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeMonitorGroupDynamicRulesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeMonitorGroupDynamicRulesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeMonitorGroupInstanceAttributeRequest : Tea.TeaModel {
    public var category: String?

    public var groupId: Int64?

    public var instanceIds: String?

    public var keyword: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var regionId: String?

    public var total: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.category != nil {
            map["Category"] = self.category!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.instanceIds != nil {
            map["InstanceIds"] = self.instanceIds!
        }
        if self.keyword != nil {
            map["Keyword"] = self.keyword!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.total != nil {
            map["Total"] = self.total!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Category"] as? String {
            self.category = value
        }
        if let value = dict["GroupId"] as? Int64 {
            self.groupId = value
        }
        if let value = dict["InstanceIds"] as? String {
            self.instanceIds = value
        }
        if let value = dict["Keyword"] as? String {
            self.keyword = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Total"] as? Bool {
            self.total = value
        }
    }
}

public class DescribeMonitorGroupInstanceAttributeResponseBody : Tea.TeaModel {
    public class Resources : Tea.TeaModel {
        public class Resource : Tea.TeaModel {
            public class Region : Tea.TeaModel {
                public var availabilityZone: String?

                public var regionId: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.availabilityZone != nil {
                        map["AvailabilityZone"] = self.availabilityZone!
                    }
                    if self.regionId != nil {
                        map["RegionId"] = self.regionId!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["AvailabilityZone"] as? String {
                        self.availabilityZone = value
                    }
                    if let value = dict["RegionId"] as? String {
                        self.regionId = value
                    }
                }
            }
            public class Tags : Tea.TeaModel {
                public class Tag : Tea.TeaModel {
                    public var key: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.key != nil {
                            map["Key"] = self.key!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Key"] as? String {
                            self.key = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public var tag: [DescribeMonitorGroupInstanceAttributeResponseBody.Resources.Resource.Tags.Tag]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.tag != nil {
                        var tmp : [Any] = []
                        for k in self.tag! {
                            tmp.append(k.toMap())
                        }
                        map["Tag"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Tag"] as? [Any?] {
                        var tmp : [DescribeMonitorGroupInstanceAttributeResponseBody.Resources.Resource.Tags.Tag] = []
                        for v in value {
                            if v != nil {
                                var model = DescribeMonitorGroupInstanceAttributeResponseBody.Resources.Resource.Tags.Tag()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.tag = tmp
                    }
                }
            }
            public class Vpc : Tea.TeaModel {
                public var vpcInstanceId: String?

                public var vswitchInstanceId: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.vpcInstanceId != nil {
                        map["VpcInstanceId"] = self.vpcInstanceId!
                    }
                    if self.vswitchInstanceId != nil {
                        map["VswitchInstanceId"] = self.vswitchInstanceId!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["VpcInstanceId"] as? String {
                        self.vpcInstanceId = value
                    }
                    if let value = dict["VswitchInstanceId"] as? String {
                        self.vswitchInstanceId = value
                    }
                }
            }
            public var category: String?

            public var desc: String?

            public var dimension: String?

            public var instanceId: String?

            public var instanceName: String?

            public var networkType: String?

            public var region: DescribeMonitorGroupInstanceAttributeResponseBody.Resources.Resource.Region?

            public var tags: DescribeMonitorGroupInstanceAttributeResponseBody.Resources.Resource.Tags?

            public var vpc: DescribeMonitorGroupInstanceAttributeResponseBody.Resources.Resource.Vpc?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.region?.validate()
                try self.tags?.validate()
                try self.vpc?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.category != nil {
                    map["Category"] = self.category!
                }
                if self.desc != nil {
                    map["Desc"] = self.desc!
                }
                if self.dimension != nil {
                    map["Dimension"] = self.dimension!
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.instanceName != nil {
                    map["InstanceName"] = self.instanceName!
                }
                if self.networkType != nil {
                    map["NetworkType"] = self.networkType!
                }
                if self.region != nil {
                    map["Region"] = self.region?.toMap()
                }
                if self.tags != nil {
                    map["Tags"] = self.tags?.toMap()
                }
                if self.vpc != nil {
                    map["Vpc"] = self.vpc?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Category"] as? String {
                    self.category = value
                }
                if let value = dict["Desc"] as? String {
                    self.desc = value
                }
                if let value = dict["Dimension"] as? String {
                    self.dimension = value
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["InstanceName"] as? String {
                    self.instanceName = value
                }
                if let value = dict["NetworkType"] as? String {
                    self.networkType = value
                }
                if let value = dict["Region"] as? [String: Any?] {
                    var model = DescribeMonitorGroupInstanceAttributeResponseBody.Resources.Resource.Region()
                    model.fromMap(value)
                    self.region = model
                }
                if let value = dict["Tags"] as? [String: Any?] {
                    var model = DescribeMonitorGroupInstanceAttributeResponseBody.Resources.Resource.Tags()
                    model.fromMap(value)
                    self.tags = model
                }
                if let value = dict["Vpc"] as? [String: Any?] {
                    var model = DescribeMonitorGroupInstanceAttributeResponseBody.Resources.Resource.Vpc()
                    model.fromMap(value)
                    self.vpc = model
                }
            }
        }
        public var resource: [DescribeMonitorGroupInstanceAttributeResponseBody.Resources.Resource]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.resource != nil {
                var tmp : [Any] = []
                for k in self.resource! {
                    tmp.append(k.toMap())
                }
                map["Resource"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Resource"] as? [Any?] {
                var tmp : [DescribeMonitorGroupInstanceAttributeResponseBody.Resources.Resource] = []
                for v in value {
                    if v != nil {
                        var model = DescribeMonitorGroupInstanceAttributeResponseBody.Resources.Resource()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.resource = tmp
            }
        }
    }
    public var code: Int32?

    public var message: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var resources: DescribeMonitorGroupInstanceAttributeResponseBody.Resources?

    public var success: Bool?

    public var total: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.resources?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resources != nil {
            map["Resources"] = self.resources?.toMap()
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.total != nil {
            map["Total"] = self.total!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Resources"] as? [String: Any?] {
            var model = DescribeMonitorGroupInstanceAttributeResponseBody.Resources()
            model.fromMap(value)
            self.resources = model
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
        if let value = dict["Total"] as? Int32 {
            self.total = value
        }
    }
}

public class DescribeMonitorGroupInstanceAttributeResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeMonitorGroupInstanceAttributeResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeMonitorGroupInstanceAttributeResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeMonitorGroupInstancesRequest : Tea.TeaModel {
    public var category: String?

    public var groupId: Int64?

    public var instanceIds: String?

    public var keyword: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.category != nil {
            map["Category"] = self.category!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.instanceIds != nil {
            map["InstanceIds"] = self.instanceIds!
        }
        if self.keyword != nil {
            map["Keyword"] = self.keyword!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Category"] as? String {
            self.category = value
        }
        if let value = dict["GroupId"] as? Int64 {
            self.groupId = value
        }
        if let value = dict["InstanceIds"] as? String {
            self.instanceIds = value
        }
        if let value = dict["Keyword"] as? String {
            self.keyword = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DescribeMonitorGroupInstancesResponseBody : Tea.TeaModel {
    public class Resources : Tea.TeaModel {
        public class Resource : Tea.TeaModel {
            public var category: String?

            public var id: Int64?

            public var instanceId: String?

            public var instanceName: String?

            public var regionId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.category != nil {
                    map["Category"] = self.category!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.instanceName != nil {
                    map["InstanceName"] = self.instanceName!
                }
                if self.regionId != nil {
                    map["RegionId"] = self.regionId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Category"] as? String {
                    self.category = value
                }
                if let value = dict["Id"] as? Int64 {
                    self.id = value
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["InstanceName"] as? String {
                    self.instanceName = value
                }
                if let value = dict["RegionId"] as? String {
                    self.regionId = value
                }
            }
        }
        public var resource: [DescribeMonitorGroupInstancesResponseBody.Resources.Resource]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.resource != nil {
                var tmp : [Any] = []
                for k in self.resource! {
                    tmp.append(k.toMap())
                }
                map["Resource"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Resource"] as? [Any?] {
                var tmp : [DescribeMonitorGroupInstancesResponseBody.Resources.Resource] = []
                for v in value {
                    if v != nil {
                        var model = DescribeMonitorGroupInstancesResponseBody.Resources.Resource()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.resource = tmp
            }
        }
    }
    public var code: Int32?

    public var message: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var resources: DescribeMonitorGroupInstancesResponseBody.Resources?

    public var success: Bool?

    public var total: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.resources?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resources != nil {
            map["Resources"] = self.resources?.toMap()
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.total != nil {
            map["Total"] = self.total!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Resources"] as? [String: Any?] {
            var model = DescribeMonitorGroupInstancesResponseBody.Resources()
            model.fromMap(value)
            self.resources = model
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
        if let value = dict["Total"] as? Int32 {
            self.total = value
        }
    }
}

public class DescribeMonitorGroupInstancesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeMonitorGroupInstancesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeMonitorGroupInstancesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeMonitorGroupNotifyPolicyListRequest : Tea.TeaModel {
    public var groupId: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var policyType: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.policyType != nil {
            map["PolicyType"] = self.policyType!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["PolicyType"] as? String {
            self.policyType = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DescribeMonitorGroupNotifyPolicyListResponseBody : Tea.TeaModel {
    public class NotifyPolicyList : Tea.TeaModel {
        public class NotifyPolicy : Tea.TeaModel {
            public var endTime: Int64?

            public var groupId: String?

            public var id: String?

            public var startTime: Int64?

            public var type: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.endTime != nil {
                    map["EndTime"] = self.endTime!
                }
                if self.groupId != nil {
                    map["GroupId"] = self.groupId!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.startTime != nil {
                    map["StartTime"] = self.startTime!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["EndTime"] as? Int64 {
                    self.endTime = value
                }
                if let value = dict["GroupId"] as? String {
                    self.groupId = value
                }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
                if let value = dict["StartTime"] as? Int64 {
                    self.startTime = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
            }
        }
        public var notifyPolicy: [DescribeMonitorGroupNotifyPolicyListResponseBody.NotifyPolicyList.NotifyPolicy]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.notifyPolicy != nil {
                var tmp : [Any] = []
                for k in self.notifyPolicy! {
                    tmp.append(k.toMap())
                }
                map["NotifyPolicy"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["NotifyPolicy"] as? [Any?] {
                var tmp : [DescribeMonitorGroupNotifyPolicyListResponseBody.NotifyPolicyList.NotifyPolicy] = []
                for v in value {
                    if v != nil {
                        var model = DescribeMonitorGroupNotifyPolicyListResponseBody.NotifyPolicyList.NotifyPolicy()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.notifyPolicy = tmp
            }
        }
    }
    public var code: String?

    public var message: String?

    public var notifyPolicyList: DescribeMonitorGroupNotifyPolicyListResponseBody.NotifyPolicyList?

    public var requestId: String?

    public var success: String?

    public var total: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.notifyPolicyList?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.notifyPolicyList != nil {
            map["NotifyPolicyList"] = self.notifyPolicyList?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.total != nil {
            map["Total"] = self.total!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["NotifyPolicyList"] as? [String: Any?] {
            var model = DescribeMonitorGroupNotifyPolicyListResponseBody.NotifyPolicyList()
            model.fromMap(value)
            self.notifyPolicyList = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? String {
            self.success = value
        }
        if let value = dict["Total"] as? Int32 {
            self.total = value
        }
    }
}

public class DescribeMonitorGroupNotifyPolicyListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeMonitorGroupNotifyPolicyListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeMonitorGroupNotifyPolicyListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeMonitorGroupsRequest : Tea.TeaModel {
    public class Tag : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var dynamicTagRuleId: String?

    public var groupFounderTagKey: String?

    public var groupFounderTagValue: String?

    public var groupId: String?

    public var groupName: String?

    public var includeTemplateHistory: Bool?

    public var instanceId: String?

    public var keyword: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var regionId: String?

    public var selectContactGroups: Bool?

    public var tag: [DescribeMonitorGroupsRequest.Tag]?

    public var type: String?

    public var types: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dynamicTagRuleId != nil {
            map["DynamicTagRuleId"] = self.dynamicTagRuleId!
        }
        if self.groupFounderTagKey != nil {
            map["GroupFounderTagKey"] = self.groupFounderTagKey!
        }
        if self.groupFounderTagValue != nil {
            map["GroupFounderTagValue"] = self.groupFounderTagValue!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.groupName != nil {
            map["GroupName"] = self.groupName!
        }
        if self.includeTemplateHistory != nil {
            map["IncludeTemplateHistory"] = self.includeTemplateHistory!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.keyword != nil {
            map["Keyword"] = self.keyword!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.selectContactGroups != nil {
            map["SelectContactGroups"] = self.selectContactGroups!
        }
        if self.tag != nil {
            var tmp : [Any] = []
            for k in self.tag! {
                tmp.append(k.toMap())
            }
            map["Tag"] = tmp
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        if self.types != nil {
            map["Types"] = self.types!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DynamicTagRuleId"] as? String {
            self.dynamicTagRuleId = value
        }
        if let value = dict["GroupFounderTagKey"] as? String {
            self.groupFounderTagKey = value
        }
        if let value = dict["GroupFounderTagValue"] as? String {
            self.groupFounderTagValue = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["GroupName"] as? String {
            self.groupName = value
        }
        if let value = dict["IncludeTemplateHistory"] as? Bool {
            self.includeTemplateHistory = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["Keyword"] as? String {
            self.keyword = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["SelectContactGroups"] as? Bool {
            self.selectContactGroups = value
        }
        if let value = dict["Tag"] as? [Any?] {
            var tmp : [DescribeMonitorGroupsRequest.Tag] = []
            for v in value {
                if v != nil {
                    var model = DescribeMonitorGroupsRequest.Tag()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tag = tmp
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
        if let value = dict["Types"] as? String {
            self.types = value
        }
    }
}

public class DescribeMonitorGroupsResponseBody : Tea.TeaModel {
    public class Resources : Tea.TeaModel {
        public class Resource : Tea.TeaModel {
            public class ContactGroups : Tea.TeaModel {
                public class ContactGroup : Tea.TeaModel {
                    public var name: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.name != nil {
                            map["Name"] = self.name!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Name"] as? String {
                            self.name = value
                        }
                    }
                }
                public var contactGroup: [DescribeMonitorGroupsResponseBody.Resources.Resource.ContactGroups.ContactGroup]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.contactGroup != nil {
                        var tmp : [Any] = []
                        for k in self.contactGroup! {
                            tmp.append(k.toMap())
                        }
                        map["ContactGroup"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["ContactGroup"] as? [Any?] {
                        var tmp : [DescribeMonitorGroupsResponseBody.Resources.Resource.ContactGroups.ContactGroup] = []
                        for v in value {
                            if v != nil {
                                var model = DescribeMonitorGroupsResponseBody.Resources.Resource.ContactGroups.ContactGroup()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.contactGroup = tmp
                    }
                }
            }
            public class Tags : Tea.TeaModel {
                public class Tag : Tea.TeaModel {
                    public var key: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.key != nil {
                            map["Key"] = self.key!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Key"] as? String {
                            self.key = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public var tag: [DescribeMonitorGroupsResponseBody.Resources.Resource.Tags.Tag]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.tag != nil {
                        var tmp : [Any] = []
                        for k in self.tag! {
                            tmp.append(k.toMap())
                        }
                        map["Tag"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Tag"] as? [Any?] {
                        var tmp : [DescribeMonitorGroupsResponseBody.Resources.Resource.Tags.Tag] = []
                        for v in value {
                            if v != nil {
                                var model = DescribeMonitorGroupsResponseBody.Resources.Resource.Tags.Tag()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.tag = tmp
                    }
                }
            }
            public class TemplateIds : Tea.TeaModel {
                public var templateId: [String]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.templateId != nil {
                        map["TemplateId"] = self.templateId!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["TemplateId"] as? [String] {
                        self.templateId = value
                    }
                }
            }
            public class TemplateInfos : Tea.TeaModel {
                public class TemplateInfo : Tea.TeaModel {
                    public var effectTime: Int64?

                    public var templateId: String?

                    public var ver: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.effectTime != nil {
                            map["EffectTime"] = self.effectTime!
                        }
                        if self.templateId != nil {
                            map["TemplateId"] = self.templateId!
                        }
                        if self.ver != nil {
                            map["Ver"] = self.ver!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["EffectTime"] as? Int64 {
                            self.effectTime = value
                        }
                        if let value = dict["TemplateId"] as? String {
                            self.templateId = value
                        }
                        if let value = dict["Ver"] as? String {
                            self.ver = value
                        }
                    }
                }
                public var templateInfo: [DescribeMonitorGroupsResponseBody.Resources.Resource.TemplateInfos.TemplateInfo]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.templateInfo != nil {
                        var tmp : [Any] = []
                        for k in self.templateInfo! {
                            tmp.append(k.toMap())
                        }
                        map["TemplateInfo"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["TemplateInfo"] as? [Any?] {
                        var tmp : [DescribeMonitorGroupsResponseBody.Resources.Resource.TemplateInfos.TemplateInfo] = []
                        for v in value {
                            if v != nil {
                                var model = DescribeMonitorGroupsResponseBody.Resources.Resource.TemplateInfos.TemplateInfo()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.templateInfo = tmp
                    }
                }
            }
            public var bindUrl: String?

            public var contactGroups: DescribeMonitorGroupsResponseBody.Resources.Resource.ContactGroups?

            public var dynamicTagRuleId: String?

            public var gmtCreate: Int64?

            public var gmtModified: Int64?

            public var groupFounderTagKey: String?

            public var groupFounderTagValue: String?

            public var groupId: Int64?

            public var groupName: String?

            public var resourceGroupId: String?

            public var serviceId: String?

            public var tags: DescribeMonitorGroupsResponseBody.Resources.Resource.Tags?

            public var templateIds: DescribeMonitorGroupsResponseBody.Resources.Resource.TemplateIds?

            public var templateInfos: DescribeMonitorGroupsResponseBody.Resources.Resource.TemplateInfos?

            public var type: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.contactGroups?.validate()
                try self.tags?.validate()
                try self.templateIds?.validate()
                try self.templateInfos?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.bindUrl != nil {
                    map["BindUrl"] = self.bindUrl!
                }
                if self.contactGroups != nil {
                    map["ContactGroups"] = self.contactGroups?.toMap()
                }
                if self.dynamicTagRuleId != nil {
                    map["DynamicTagRuleId"] = self.dynamicTagRuleId!
                }
                if self.gmtCreate != nil {
                    map["GmtCreate"] = self.gmtCreate!
                }
                if self.gmtModified != nil {
                    map["GmtModified"] = self.gmtModified!
                }
                if self.groupFounderTagKey != nil {
                    map["GroupFounderTagKey"] = self.groupFounderTagKey!
                }
                if self.groupFounderTagValue != nil {
                    map["GroupFounderTagValue"] = self.groupFounderTagValue!
                }
                if self.groupId != nil {
                    map["GroupId"] = self.groupId!
                }
                if self.groupName != nil {
                    map["GroupName"] = self.groupName!
                }
                if self.resourceGroupId != nil {
                    map["ResourceGroupId"] = self.resourceGroupId!
                }
                if self.serviceId != nil {
                    map["ServiceId"] = self.serviceId!
                }
                if self.tags != nil {
                    map["Tags"] = self.tags?.toMap()
                }
                if self.templateIds != nil {
                    map["TemplateIds"] = self.templateIds?.toMap()
                }
                if self.templateInfos != nil {
                    map["TemplateInfos"] = self.templateInfos?.toMap()
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["BindUrl"] as? String {
                    self.bindUrl = value
                }
                if let value = dict["ContactGroups"] as? [String: Any?] {
                    var model = DescribeMonitorGroupsResponseBody.Resources.Resource.ContactGroups()
                    model.fromMap(value)
                    self.contactGroups = model
                }
                if let value = dict["DynamicTagRuleId"] as? String {
                    self.dynamicTagRuleId = value
                }
                if let value = dict["GmtCreate"] as? Int64 {
                    self.gmtCreate = value
                }
                if let value = dict["GmtModified"] as? Int64 {
                    self.gmtModified = value
                }
                if let value = dict["GroupFounderTagKey"] as? String {
                    self.groupFounderTagKey = value
                }
                if let value = dict["GroupFounderTagValue"] as? String {
                    self.groupFounderTagValue = value
                }
                if let value = dict["GroupId"] as? Int64 {
                    self.groupId = value
                }
                if let value = dict["GroupName"] as? String {
                    self.groupName = value
                }
                if let value = dict["ResourceGroupId"] as? String {
                    self.resourceGroupId = value
                }
                if let value = dict["ServiceId"] as? String {
                    self.serviceId = value
                }
                if let value = dict["Tags"] as? [String: Any?] {
                    var model = DescribeMonitorGroupsResponseBody.Resources.Resource.Tags()
                    model.fromMap(value)
                    self.tags = model
                }
                if let value = dict["TemplateIds"] as? [String: Any?] {
                    var model = DescribeMonitorGroupsResponseBody.Resources.Resource.TemplateIds()
                    model.fromMap(value)
                    self.templateIds = model
                }
                if let value = dict["TemplateInfos"] as? [String: Any?] {
                    var model = DescribeMonitorGroupsResponseBody.Resources.Resource.TemplateInfos()
                    model.fromMap(value)
                    self.templateInfos = model
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
            }
        }
        public var resource: [DescribeMonitorGroupsResponseBody.Resources.Resource]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.resource != nil {
                var tmp : [Any] = []
                for k in self.resource! {
                    tmp.append(k.toMap())
                }
                map["Resource"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Resource"] as? [Any?] {
                var tmp : [DescribeMonitorGroupsResponseBody.Resources.Resource] = []
                for v in value {
                    if v != nil {
                        var model = DescribeMonitorGroupsResponseBody.Resources.Resource()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.resource = tmp
            }
        }
    }
    public var code: Int32?

    public var message: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var resources: DescribeMonitorGroupsResponseBody.Resources?

    public var success: Bool?

    public var total: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.resources?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resources != nil {
            map["Resources"] = self.resources?.toMap()
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.total != nil {
            map["Total"] = self.total!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Resources"] as? [String: Any?] {
            var model = DescribeMonitorGroupsResponseBody.Resources()
            model.fromMap(value)
            self.resources = model
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
        if let value = dict["Total"] as? Int32 {
            self.total = value
        }
    }
}

public class DescribeMonitorGroupsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeMonitorGroupsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeMonitorGroupsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeMonitorResourceQuotaAttributeRequest : Tea.TeaModel {
    public var regionId: String?

    public var showUsed: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.showUsed != nil {
            map["ShowUsed"] = self.showUsed!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ShowUsed"] as? Bool {
            self.showUsed = value
        }
    }
}

public class DescribeMonitorResourceQuotaAttributeResponseBody : Tea.TeaModel {
    public class ResourceQuota : Tea.TeaModel {
        public class Api : Tea.TeaModel {
            public var quotaLimit: Int32?

            public var quotaPackage: Int32?

            public var quotaUsed: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.quotaLimit != nil {
                    map["QuotaLimit"] = self.quotaLimit!
                }
                if self.quotaPackage != nil {
                    map["QuotaPackage"] = self.quotaPackage!
                }
                if self.quotaUsed != nil {
                    map["QuotaUsed"] = self.quotaUsed!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["QuotaLimit"] as? Int32 {
                    self.quotaLimit = value
                }
                if let value = dict["QuotaPackage"] as? Int32 {
                    self.quotaPackage = value
                }
                if let value = dict["QuotaUsed"] as? Int32 {
                    self.quotaUsed = value
                }
            }
        }
        public class CustomMonitor : Tea.TeaModel {
            public var quotaLimit: Int32?

            public var quotaPackage: Int32?

            public var quotaUsed: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.quotaLimit != nil {
                    map["QuotaLimit"] = self.quotaLimit!
                }
                if self.quotaPackage != nil {
                    map["QuotaPackage"] = self.quotaPackage!
                }
                if self.quotaUsed != nil {
                    map["QuotaUsed"] = self.quotaUsed!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["QuotaLimit"] as? Int32 {
                    self.quotaLimit = value
                }
                if let value = dict["QuotaPackage"] as? Int32 {
                    self.quotaPackage = value
                }
                if let value = dict["QuotaUsed"] as? Int32 {
                    self.quotaUsed = value
                }
            }
        }
        public class EnterpriseQuota : Tea.TeaModel {
            public var instanceId: String?

            public var suitInfo: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.suitInfo != nil {
                    map["SuitInfo"] = self.suitInfo!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["SuitInfo"] as? String {
                    self.suitInfo = value
                }
            }
        }
        public class EventMonitor : Tea.TeaModel {
            public var quotaLimit: Int32?

            public var quotaPackage: Int32?

            public var quotaUsed: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.quotaLimit != nil {
                    map["QuotaLimit"] = self.quotaLimit!
                }
                if self.quotaPackage != nil {
                    map["QuotaPackage"] = self.quotaPackage!
                }
                if self.quotaUsed != nil {
                    map["QuotaUsed"] = self.quotaUsed!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["QuotaLimit"] as? Int32 {
                    self.quotaLimit = value
                }
                if let value = dict["QuotaPackage"] as? Int32 {
                    self.quotaPackage = value
                }
                if let value = dict["QuotaUsed"] as? Int32 {
                    self.quotaUsed = value
                }
            }
        }
        public class LogMonitor : Tea.TeaModel {
            public var quotaLimit: Int32?

            public var quotaPackage: Int32?

            public var quotaUsed: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.quotaLimit != nil {
                    map["QuotaLimit"] = self.quotaLimit!
                }
                if self.quotaPackage != nil {
                    map["QuotaPackage"] = self.quotaPackage!
                }
                if self.quotaUsed != nil {
                    map["QuotaUsed"] = self.quotaUsed!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["QuotaLimit"] as? Int32 {
                    self.quotaLimit = value
                }
                if let value = dict["QuotaPackage"] as? Int32 {
                    self.quotaPackage = value
                }
                if let value = dict["QuotaUsed"] as? Int32 {
                    self.quotaUsed = value
                }
            }
        }
        public class Phone : Tea.TeaModel {
            public var quotaLimit: Int32?

            public var quotaPackage: Int32?

            public var quotaUsed: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.quotaLimit != nil {
                    map["QuotaLimit"] = self.quotaLimit!
                }
                if self.quotaPackage != nil {
                    map["QuotaPackage"] = self.quotaPackage!
                }
                if self.quotaUsed != nil {
                    map["QuotaUsed"] = self.quotaUsed!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["QuotaLimit"] as? Int32 {
                    self.quotaLimit = value
                }
                if let value = dict["QuotaPackage"] as? Int32 {
                    self.quotaPackage = value
                }
                if let value = dict["QuotaUsed"] as? Int32 {
                    self.quotaUsed = value
                }
            }
        }
        public class SMS : Tea.TeaModel {
            public var quotaLimit: Int32?

            public var quotaPackage: Int32?

            public var quotaUsed: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.quotaLimit != nil {
                    map["QuotaLimit"] = self.quotaLimit!
                }
                if self.quotaPackage != nil {
                    map["QuotaPackage"] = self.quotaPackage!
                }
                if self.quotaUsed != nil {
                    map["QuotaUsed"] = self.quotaUsed!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["QuotaLimit"] as? Int32 {
                    self.quotaLimit = value
                }
                if let value = dict["QuotaPackage"] as? Int32 {
                    self.quotaPackage = value
                }
                if let value = dict["QuotaUsed"] as? Int32 {
                    self.quotaUsed = value
                }
            }
        }
        public class SiteMonitorBrowser : Tea.TeaModel {
            public var quotaLimit: Int32?

            public var quotaPackage: Int32?

            public var quotaUsed: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.quotaLimit != nil {
                    map["QuotaLimit"] = self.quotaLimit!
                }
                if self.quotaPackage != nil {
                    map["QuotaPackage"] = self.quotaPackage!
                }
                if self.quotaUsed != nil {
                    map["QuotaUsed"] = self.quotaUsed!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["QuotaLimit"] as? Int32 {
                    self.quotaLimit = value
                }
                if let value = dict["QuotaPackage"] as? Int32 {
                    self.quotaPackage = value
                }
                if let value = dict["QuotaUsed"] as? Int32 {
                    self.quotaUsed = value
                }
            }
        }
        public class SiteMonitorEcsProbe : Tea.TeaModel {
            public var quotaLimit: Int32?

            public var quotaPackage: Int32?

            public var quotaUsed: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.quotaLimit != nil {
                    map["QuotaLimit"] = self.quotaLimit!
                }
                if self.quotaPackage != nil {
                    map["QuotaPackage"] = self.quotaPackage!
                }
                if self.quotaUsed != nil {
                    map["QuotaUsed"] = self.quotaUsed!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["QuotaLimit"] as? Int32 {
                    self.quotaLimit = value
                }
                if let value = dict["QuotaPackage"] as? Int32 {
                    self.quotaPackage = value
                }
                if let value = dict["QuotaUsed"] as? Int32 {
                    self.quotaUsed = value
                }
            }
        }
        public class SiteMonitorMobile : Tea.TeaModel {
            public var quotaLimit: Int32?

            public var quotaPackage: Int32?

            public var quotaUsed: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.quotaLimit != nil {
                    map["QuotaLimit"] = self.quotaLimit!
                }
                if self.quotaPackage != nil {
                    map["QuotaPackage"] = self.quotaPackage!
                }
                if self.quotaUsed != nil {
                    map["QuotaUsed"] = self.quotaUsed!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["QuotaLimit"] as? Int32 {
                    self.quotaLimit = value
                }
                if let value = dict["QuotaPackage"] as? Int32 {
                    self.quotaPackage = value
                }
                if let value = dict["QuotaUsed"] as? Int32 {
                    self.quotaUsed = value
                }
            }
        }
        public class SiteMonitorOperatorProbe : Tea.TeaModel {
            public var quotaLimit: Int32?

            public var quotaPackage: Int32?

            public var quotaUsed: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.quotaLimit != nil {
                    map["QuotaLimit"] = self.quotaLimit!
                }
                if self.quotaPackage != nil {
                    map["QuotaPackage"] = self.quotaPackage!
                }
                if self.quotaUsed != nil {
                    map["QuotaUsed"] = self.quotaUsed!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["QuotaLimit"] as? Int32 {
                    self.quotaLimit = value
                }
                if let value = dict["QuotaPackage"] as? Int32 {
                    self.quotaPackage = value
                }
                if let value = dict["QuotaUsed"] as? Int32 {
                    self.quotaUsed = value
                }
            }
        }
        public class SiteMonitorTask : Tea.TeaModel {
            public var quotaLimit: Int32?

            public var quotaPackage: Int32?

            public var quotaUsed: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.quotaLimit != nil {
                    map["QuotaLimit"] = self.quotaLimit!
                }
                if self.quotaPackage != nil {
                    map["QuotaPackage"] = self.quotaPackage!
                }
                if self.quotaUsed != nil {
                    map["QuotaUsed"] = self.quotaUsed!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["QuotaLimit"] as? Int32 {
                    self.quotaLimit = value
                }
                if let value = dict["QuotaPackage"] as? Int32 {
                    self.quotaPackage = value
                }
                if let value = dict["QuotaUsed"] as? Int32 {
                    self.quotaUsed = value
                }
            }
        }
        public var api: DescribeMonitorResourceQuotaAttributeResponseBody.ResourceQuota.Api?

        public var customMonitor: DescribeMonitorResourceQuotaAttributeResponseBody.ResourceQuota.CustomMonitor?

        public var enterpriseQuota: DescribeMonitorResourceQuotaAttributeResponseBody.ResourceQuota.EnterpriseQuota?

        public var eventMonitor: DescribeMonitorResourceQuotaAttributeResponseBody.ResourceQuota.EventMonitor?

        public var expireTime: String?

        public var instanceId: String?

        public var logMonitor: DescribeMonitorResourceQuotaAttributeResponseBody.ResourceQuota.LogMonitor?

        public var phone: DescribeMonitorResourceQuotaAttributeResponseBody.ResourceQuota.Phone?

        public var SMS: DescribeMonitorResourceQuotaAttributeResponseBody.ResourceQuota.SMS?

        public var siteMonitorBrowser: DescribeMonitorResourceQuotaAttributeResponseBody.ResourceQuota.SiteMonitorBrowser?

        public var siteMonitorEcsProbe: DescribeMonitorResourceQuotaAttributeResponseBody.ResourceQuota.SiteMonitorEcsProbe?

        public var siteMonitorMobile: DescribeMonitorResourceQuotaAttributeResponseBody.ResourceQuota.SiteMonitorMobile?

        public var siteMonitorOperatorProbe: DescribeMonitorResourceQuotaAttributeResponseBody.ResourceQuota.SiteMonitorOperatorProbe?

        public var siteMonitorTask: DescribeMonitorResourceQuotaAttributeResponseBody.ResourceQuota.SiteMonitorTask?

        public var suitInfo: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.api?.validate()
            try self.customMonitor?.validate()
            try self.enterpriseQuota?.validate()
            try self.eventMonitor?.validate()
            try self.logMonitor?.validate()
            try self.phone?.validate()
            try self.SMS?.validate()
            try self.siteMonitorBrowser?.validate()
            try self.siteMonitorEcsProbe?.validate()
            try self.siteMonitorMobile?.validate()
            try self.siteMonitorOperatorProbe?.validate()
            try self.siteMonitorTask?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.api != nil {
                map["Api"] = self.api?.toMap()
            }
            if self.customMonitor != nil {
                map["CustomMonitor"] = self.customMonitor?.toMap()
            }
            if self.enterpriseQuota != nil {
                map["EnterpriseQuota"] = self.enterpriseQuota?.toMap()
            }
            if self.eventMonitor != nil {
                map["EventMonitor"] = self.eventMonitor?.toMap()
            }
            if self.expireTime != nil {
                map["ExpireTime"] = self.expireTime!
            }
            if self.instanceId != nil {
                map["InstanceId"] = self.instanceId!
            }
            if self.logMonitor != nil {
                map["LogMonitor"] = self.logMonitor?.toMap()
            }
            if self.phone != nil {
                map["Phone"] = self.phone?.toMap()
            }
            if self.SMS != nil {
                map["SMS"] = self.SMS?.toMap()
            }
            if self.siteMonitorBrowser != nil {
                map["SiteMonitorBrowser"] = self.siteMonitorBrowser?.toMap()
            }
            if self.siteMonitorEcsProbe != nil {
                map["SiteMonitorEcsProbe"] = self.siteMonitorEcsProbe?.toMap()
            }
            if self.siteMonitorMobile != nil {
                map["SiteMonitorMobile"] = self.siteMonitorMobile?.toMap()
            }
            if self.siteMonitorOperatorProbe != nil {
                map["SiteMonitorOperatorProbe"] = self.siteMonitorOperatorProbe?.toMap()
            }
            if self.siteMonitorTask != nil {
                map["SiteMonitorTask"] = self.siteMonitorTask?.toMap()
            }
            if self.suitInfo != nil {
                map["SuitInfo"] = self.suitInfo!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Api"] as? [String: Any?] {
                var model = DescribeMonitorResourceQuotaAttributeResponseBody.ResourceQuota.Api()
                model.fromMap(value)
                self.api = model
            }
            if let value = dict["CustomMonitor"] as? [String: Any?] {
                var model = DescribeMonitorResourceQuotaAttributeResponseBody.ResourceQuota.CustomMonitor()
                model.fromMap(value)
                self.customMonitor = model
            }
            if let value = dict["EnterpriseQuota"] as? [String: Any?] {
                var model = DescribeMonitorResourceQuotaAttributeResponseBody.ResourceQuota.EnterpriseQuota()
                model.fromMap(value)
                self.enterpriseQuota = model
            }
            if let value = dict["EventMonitor"] as? [String: Any?] {
                var model = DescribeMonitorResourceQuotaAttributeResponseBody.ResourceQuota.EventMonitor()
                model.fromMap(value)
                self.eventMonitor = model
            }
            if let value = dict["ExpireTime"] as? String {
                self.expireTime = value
            }
            if let value = dict["InstanceId"] as? String {
                self.instanceId = value
            }
            if let value = dict["LogMonitor"] as? [String: Any?] {
                var model = DescribeMonitorResourceQuotaAttributeResponseBody.ResourceQuota.LogMonitor()
                model.fromMap(value)
                self.logMonitor = model
            }
            if let value = dict["Phone"] as? [String: Any?] {
                var model = DescribeMonitorResourceQuotaAttributeResponseBody.ResourceQuota.Phone()
                model.fromMap(value)
                self.phone = model
            }
            if let value = dict["SMS"] as? [String: Any?] {
                var model = DescribeMonitorResourceQuotaAttributeResponseBody.ResourceQuota.SMS()
                model.fromMap(value)
                self.SMS = model
            }
            if let value = dict["SiteMonitorBrowser"] as? [String: Any?] {
                var model = DescribeMonitorResourceQuotaAttributeResponseBody.ResourceQuota.SiteMonitorBrowser()
                model.fromMap(value)
                self.siteMonitorBrowser = model
            }
            if let value = dict["SiteMonitorEcsProbe"] as? [String: Any?] {
                var model = DescribeMonitorResourceQuotaAttributeResponseBody.ResourceQuota.SiteMonitorEcsProbe()
                model.fromMap(value)
                self.siteMonitorEcsProbe = model
            }
            if let value = dict["SiteMonitorMobile"] as? [String: Any?] {
                var model = DescribeMonitorResourceQuotaAttributeResponseBody.ResourceQuota.SiteMonitorMobile()
                model.fromMap(value)
                self.siteMonitorMobile = model
            }
            if let value = dict["SiteMonitorOperatorProbe"] as? [String: Any?] {
                var model = DescribeMonitorResourceQuotaAttributeResponseBody.ResourceQuota.SiteMonitorOperatorProbe()
                model.fromMap(value)
                self.siteMonitorOperatorProbe = model
            }
            if let value = dict["SiteMonitorTask"] as? [String: Any?] {
                var model = DescribeMonitorResourceQuotaAttributeResponseBody.ResourceQuota.SiteMonitorTask()
                model.fromMap(value)
                self.siteMonitorTask = model
            }
            if let value = dict["SuitInfo"] as? String {
                self.suitInfo = value
            }
        }
    }
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var resourceQuota: DescribeMonitorResourceQuotaAttributeResponseBody.ResourceQuota?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.resourceQuota?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resourceQuota != nil {
            map["ResourceQuota"] = self.resourceQuota?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["ResourceQuota"] as? [String: Any?] {
            var model = DescribeMonitorResourceQuotaAttributeResponseBody.ResourceQuota()
            model.fromMap(value)
            self.resourceQuota = model
        }
    }
}

public class DescribeMonitorResourceQuotaAttributeResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeMonitorResourceQuotaAttributeResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeMonitorResourceQuotaAttributeResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeMonitoringAgentAccessKeyRequest : Tea.TeaModel {
    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DescribeMonitoringAgentAccessKeyResponseBody : Tea.TeaModel {
    public var accessKey: String?

    public var code: Int32?

    public var message: String?

    public var requestId: String?

    public var secretKey: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.accessKey != nil {
            map["AccessKey"] = self.accessKey!
        }
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.secretKey != nil {
            map["SecretKey"] = self.secretKey!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AccessKey"] as? String {
            self.accessKey = value
        }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SecretKey"] as? String {
            self.secretKey = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DescribeMonitoringAgentAccessKeyResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeMonitoringAgentAccessKeyResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeMonitoringAgentAccessKeyResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeMonitoringAgentConfigRequest : Tea.TeaModel {
    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DescribeMonitoringAgentConfigResponseBody : Tea.TeaModel {
    public var autoInstall: Bool?

    public var code: String?

    public var enableActiveAlert: String?

    public var enableInstallAgentNewECS: Bool?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.autoInstall != nil {
            map["AutoInstall"] = self.autoInstall!
        }
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.enableActiveAlert != nil {
            map["EnableActiveAlert"] = self.enableActiveAlert!
        }
        if self.enableInstallAgentNewECS != nil {
            map["EnableInstallAgentNewECS"] = self.enableInstallAgentNewECS!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AutoInstall"] as? Bool {
            self.autoInstall = value
        }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["EnableActiveAlert"] as? String {
            self.enableActiveAlert = value
        }
        if let value = dict["EnableInstallAgentNewECS"] as? Bool {
            self.enableInstallAgentNewECS = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DescribeMonitoringAgentConfigResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeMonitoringAgentConfigResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeMonitoringAgentConfigResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeMonitoringAgentHostsRequest : Tea.TeaModel {
    public var aliyunHost: Bool?

    public var hostName: String?

    public var instanceIds: String?

    public var instanceRegionId: String?

    public var keyWord: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var regionId: String?

    public var serialNumbers: String?

    public var status: String?

    public var sysomStatus: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.aliyunHost != nil {
            map["AliyunHost"] = self.aliyunHost!
        }
        if self.hostName != nil {
            map["HostName"] = self.hostName!
        }
        if self.instanceIds != nil {
            map["InstanceIds"] = self.instanceIds!
        }
        if self.instanceRegionId != nil {
            map["InstanceRegionId"] = self.instanceRegionId!
        }
        if self.keyWord != nil {
            map["KeyWord"] = self.keyWord!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.serialNumbers != nil {
            map["SerialNumbers"] = self.serialNumbers!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        if self.sysomStatus != nil {
            map["SysomStatus"] = self.sysomStatus!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AliyunHost"] as? Bool {
            self.aliyunHost = value
        }
        if let value = dict["HostName"] as? String {
            self.hostName = value
        }
        if let value = dict["InstanceIds"] as? String {
            self.instanceIds = value
        }
        if let value = dict["InstanceRegionId"] as? String {
            self.instanceRegionId = value
        }
        if let value = dict["KeyWord"] as? String {
            self.keyWord = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["SerialNumbers"] as? String {
            self.serialNumbers = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
        if let value = dict["SysomStatus"] as? String {
            self.sysomStatus = value
        }
    }
}

public class DescribeMonitoringAgentHostsResponseBody : Tea.TeaModel {
    public class Hosts : Tea.TeaModel {
        public class Host : Tea.TeaModel {
            public var agentVersion: String?

            public var aliUid: Int64?

            public var eipAddress: String?

            public var eipId: String?

            public var hostName: String?

            public var instanceId: String?

            public var instanceTypeFamily: String?

            public var ipGroup: String?

            public var natIp: String?

            public var networkType: String?

            public var operatingSystem: String?

            public var region: String?

            public var serialNumber: String?

            public var isAliyunHost: Bool?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.agentVersion != nil {
                    map["AgentVersion"] = self.agentVersion!
                }
                if self.aliUid != nil {
                    map["AliUid"] = self.aliUid!
                }
                if self.eipAddress != nil {
                    map["EipAddress"] = self.eipAddress!
                }
                if self.eipId != nil {
                    map["EipId"] = self.eipId!
                }
                if self.hostName != nil {
                    map["HostName"] = self.hostName!
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.instanceTypeFamily != nil {
                    map["InstanceTypeFamily"] = self.instanceTypeFamily!
                }
                if self.ipGroup != nil {
                    map["IpGroup"] = self.ipGroup!
                }
                if self.natIp != nil {
                    map["NatIp"] = self.natIp!
                }
                if self.networkType != nil {
                    map["NetworkType"] = self.networkType!
                }
                if self.operatingSystem != nil {
                    map["OperatingSystem"] = self.operatingSystem!
                }
                if self.region != nil {
                    map["Region"] = self.region!
                }
                if self.serialNumber != nil {
                    map["SerialNumber"] = self.serialNumber!
                }
                if self.isAliyunHost != nil {
                    map["isAliyunHost"] = self.isAliyunHost!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AgentVersion"] as? String {
                    self.agentVersion = value
                }
                if let value = dict["AliUid"] as? Int64 {
                    self.aliUid = value
                }
                if let value = dict["EipAddress"] as? String {
                    self.eipAddress = value
                }
                if let value = dict["EipId"] as? String {
                    self.eipId = value
                }
                if let value = dict["HostName"] as? String {
                    self.hostName = value
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["InstanceTypeFamily"] as? String {
                    self.instanceTypeFamily = value
                }
                if let value = dict["IpGroup"] as? String {
                    self.ipGroup = value
                }
                if let value = dict["NatIp"] as? String {
                    self.natIp = value
                }
                if let value = dict["NetworkType"] as? String {
                    self.networkType = value
                }
                if let value = dict["OperatingSystem"] as? String {
                    self.operatingSystem = value
                }
                if let value = dict["Region"] as? String {
                    self.region = value
                }
                if let value = dict["SerialNumber"] as? String {
                    self.serialNumber = value
                }
                if let value = dict["isAliyunHost"] as? Bool {
                    self.isAliyunHost = value
                }
            }
        }
        public var host: [DescribeMonitoringAgentHostsResponseBody.Hosts.Host]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.host != nil {
                var tmp : [Any] = []
                for k in self.host! {
                    tmp.append(k.toMap())
                }
                map["Host"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Host"] as? [Any?] {
                var tmp : [DescribeMonitoringAgentHostsResponseBody.Hosts.Host] = []
                for v in value {
                    if v != nil {
                        var model = DescribeMonitoringAgentHostsResponseBody.Hosts.Host()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.host = tmp
            }
        }
    }
    public var code: String?

    public var hosts: DescribeMonitoringAgentHostsResponseBody.Hosts?

    public var message: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var pageTotal: Int32?

    public var requestId: String?

    public var success: Bool?

    public var total: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.hosts?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.hosts != nil {
            map["Hosts"] = self.hosts?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.pageTotal != nil {
            map["PageTotal"] = self.pageTotal!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.total != nil {
            map["Total"] = self.total!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Hosts"] as? [String: Any?] {
            var model = DescribeMonitoringAgentHostsResponseBody.Hosts()
            model.fromMap(value)
            self.hosts = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["PageTotal"] as? Int32 {
            self.pageTotal = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
        if let value = dict["Total"] as? Int32 {
            self.total = value
        }
    }
}

public class DescribeMonitoringAgentHostsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeMonitoringAgentHostsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeMonitoringAgentHostsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeMonitoringAgentProcessesRequest : Tea.TeaModel {
    public var instanceId: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DescribeMonitoringAgentProcessesResponseBody : Tea.TeaModel {
    public class NodeProcesses : Tea.TeaModel {
        public class NodeProcess : Tea.TeaModel {
            public var command: String?

            public var groupId: String?

            public var instanceId: String?

            public var processId: Int64?

            public var processName: String?

            public var processUser: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.command != nil {
                    map["Command"] = self.command!
                }
                if self.groupId != nil {
                    map["GroupId"] = self.groupId!
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.processId != nil {
                    map["ProcessId"] = self.processId!
                }
                if self.processName != nil {
                    map["ProcessName"] = self.processName!
                }
                if self.processUser != nil {
                    map["ProcessUser"] = self.processUser!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Command"] as? String {
                    self.command = value
                }
                if let value = dict["GroupId"] as? String {
                    self.groupId = value
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["ProcessId"] as? Int64 {
                    self.processId = value
                }
                if let value = dict["ProcessName"] as? String {
                    self.processName = value
                }
                if let value = dict["ProcessUser"] as? String {
                    self.processUser = value
                }
            }
        }
        public var nodeProcess: [DescribeMonitoringAgentProcessesResponseBody.NodeProcesses.NodeProcess]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.nodeProcess != nil {
                var tmp : [Any] = []
                for k in self.nodeProcess! {
                    tmp.append(k.toMap())
                }
                map["NodeProcess"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["NodeProcess"] as? [Any?] {
                var tmp : [DescribeMonitoringAgentProcessesResponseBody.NodeProcesses.NodeProcess] = []
                for v in value {
                    if v != nil {
                        var model = DescribeMonitoringAgentProcessesResponseBody.NodeProcesses.NodeProcess()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.nodeProcess = tmp
            }
        }
    }
    public var code: String?

    public var message: String?

    public var nodeProcesses: DescribeMonitoringAgentProcessesResponseBody.NodeProcesses?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.nodeProcesses?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.nodeProcesses != nil {
            map["NodeProcesses"] = self.nodeProcesses?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["NodeProcesses"] as? [String: Any?] {
            var model = DescribeMonitoringAgentProcessesResponseBody.NodeProcesses()
            model.fromMap(value)
            self.nodeProcesses = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DescribeMonitoringAgentProcessesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeMonitoringAgentProcessesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeMonitoringAgentProcessesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeMonitoringAgentStatusesRequest : Tea.TeaModel {
    public var hostAvailabilityTaskId: String?

    public var instanceIds: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.hostAvailabilityTaskId != nil {
            map["HostAvailabilityTaskId"] = self.hostAvailabilityTaskId!
        }
        if self.instanceIds != nil {
            map["InstanceIds"] = self.instanceIds!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["HostAvailabilityTaskId"] as? String {
            self.hostAvailabilityTaskId = value
        }
        if let value = dict["InstanceIds"] as? String {
            self.instanceIds = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DescribeMonitoringAgentStatusesResponseBody : Tea.TeaModel {
    public class NodeStatusList : Tea.TeaModel {
        public class NodeStatus : Tea.TeaModel {
            public var agentInstallErrorCode: String?

            public var autoInstall: Bool?

            public var instanceId: String?

            public var osMonitorConfig: String?

            public var osMonitorErrorCode: String?

            public var osMonitorErrorDetail: String?

            public var osMonitorStatus: String?

            public var osMonitorVersion: String?

            public var status: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.agentInstallErrorCode != nil {
                    map["AgentInstallErrorCode"] = self.agentInstallErrorCode!
                }
                if self.autoInstall != nil {
                    map["AutoInstall"] = self.autoInstall!
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.osMonitorConfig != nil {
                    map["OsMonitorConfig"] = self.osMonitorConfig!
                }
                if self.osMonitorErrorCode != nil {
                    map["OsMonitorErrorCode"] = self.osMonitorErrorCode!
                }
                if self.osMonitorErrorDetail != nil {
                    map["OsMonitorErrorDetail"] = self.osMonitorErrorDetail!
                }
                if self.osMonitorStatus != nil {
                    map["OsMonitorStatus"] = self.osMonitorStatus!
                }
                if self.osMonitorVersion != nil {
                    map["OsMonitorVersion"] = self.osMonitorVersion!
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AgentInstallErrorCode"] as? String {
                    self.agentInstallErrorCode = value
                }
                if let value = dict["AutoInstall"] as? Bool {
                    self.autoInstall = value
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["OsMonitorConfig"] as? String {
                    self.osMonitorConfig = value
                }
                if let value = dict["OsMonitorErrorCode"] as? String {
                    self.osMonitorErrorCode = value
                }
                if let value = dict["OsMonitorErrorDetail"] as? String {
                    self.osMonitorErrorDetail = value
                }
                if let value = dict["OsMonitorStatus"] as? String {
                    self.osMonitorStatus = value
                }
                if let value = dict["OsMonitorVersion"] as? String {
                    self.osMonitorVersion = value
                }
                if let value = dict["Status"] as? String {
                    self.status = value
                }
            }
        }
        public var nodeStatus: [DescribeMonitoringAgentStatusesResponseBody.NodeStatusList.NodeStatus]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.nodeStatus != nil {
                var tmp : [Any] = []
                for k in self.nodeStatus! {
                    tmp.append(k.toMap())
                }
                map["NodeStatus"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["NodeStatus"] as? [Any?] {
                var tmp : [DescribeMonitoringAgentStatusesResponseBody.NodeStatusList.NodeStatus] = []
                for v in value {
                    if v != nil {
                        var model = DescribeMonitoringAgentStatusesResponseBody.NodeStatusList.NodeStatus()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.nodeStatus = tmp
            }
        }
    }
    public var code: String?

    public var message: String?

    public var nodeStatusList: DescribeMonitoringAgentStatusesResponseBody.NodeStatusList?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.nodeStatusList?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.nodeStatusList != nil {
            map["NodeStatusList"] = self.nodeStatusList?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["NodeStatusList"] as? [String: Any?] {
            var model = DescribeMonitoringAgentStatusesResponseBody.NodeStatusList()
            model.fromMap(value)
            self.nodeStatusList = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DescribeMonitoringAgentStatusesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeMonitoringAgentStatusesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeMonitoringAgentStatusesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeMonitoringConfigRequest : Tea.TeaModel {
    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DescribeMonitoringConfigResponseBody : Tea.TeaModel {
    public var autoInstall: Bool?

    public var code: String?

    public var enableInstallAgentNewECS: Bool?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.autoInstall != nil {
            map["AutoInstall"] = self.autoInstall!
        }
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.enableInstallAgentNewECS != nil {
            map["EnableInstallAgentNewECS"] = self.enableInstallAgentNewECS!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AutoInstall"] as? Bool {
            self.autoInstall = value
        }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["EnableInstallAgentNewECS"] as? Bool {
            self.enableInstallAgentNewECS = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DescribeMonitoringConfigResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeMonitoringConfigResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeMonitoringConfigResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeProductResourceTagKeyListRequest : Tea.TeaModel {
    public var nextToken: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DescribeProductResourceTagKeyListResponseBody : Tea.TeaModel {
    public class TagKeys : Tea.TeaModel {
        public var tagKey: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tagKey != nil {
                map["TagKey"] = self.tagKey!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["TagKey"] as? [String] {
                self.tagKey = value
            }
        }
    }
    public var code: String?

    public var message: String?

    public var nextToken: String?

    public var requestId: String?

    public var success: Bool?

    public var tagKeys: DescribeProductResourceTagKeyListResponseBody.TagKeys?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tagKeys?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.tagKeys != nil {
            map["TagKeys"] = self.tagKeys?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
        if let value = dict["TagKeys"] as? [String: Any?] {
            var model = DescribeProductResourceTagKeyListResponseBody.TagKeys()
            model.fromMap(value)
            self.tagKeys = model
        }
    }
}

public class DescribeProductResourceTagKeyListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeProductResourceTagKeyListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeProductResourceTagKeyListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeProductsOfActiveMetricRuleRequest : Tea.TeaModel {
    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DescribeProductsOfActiveMetricRuleResponseBody : Tea.TeaModel {
    public class AllProductInitMetricRuleList : Tea.TeaModel {
        public class AllProductInitMetricRule : Tea.TeaModel {
            public class AlertInitConfigList : Tea.TeaModel {
                public class AlertInitConfig : Tea.TeaModel {
                    public var comparisonOperator: String?

                    public var evaluationCount: String?

                    public var level: String?

                    public var metricName: String?

                    public var namespace: String?

                    public var period: String?

                    public var statistics: String?

                    public var threshold: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.comparisonOperator != nil {
                            map["ComparisonOperator"] = self.comparisonOperator!
                        }
                        if self.evaluationCount != nil {
                            map["EvaluationCount"] = self.evaluationCount!
                        }
                        if self.level != nil {
                            map["Level"] = self.level!
                        }
                        if self.metricName != nil {
                            map["MetricName"] = self.metricName!
                        }
                        if self.namespace != nil {
                            map["Namespace"] = self.namespace!
                        }
                        if self.period != nil {
                            map["Period"] = self.period!
                        }
                        if self.statistics != nil {
                            map["Statistics"] = self.statistics!
                        }
                        if self.threshold != nil {
                            map["Threshold"] = self.threshold!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["ComparisonOperator"] as? String {
                            self.comparisonOperator = value
                        }
                        if let value = dict["EvaluationCount"] as? String {
                            self.evaluationCount = value
                        }
                        if let value = dict["Level"] as? String {
                            self.level = value
                        }
                        if let value = dict["MetricName"] as? String {
                            self.metricName = value
                        }
                        if let value = dict["Namespace"] as? String {
                            self.namespace = value
                        }
                        if let value = dict["Period"] as? String {
                            self.period = value
                        }
                        if let value = dict["Statistics"] as? String {
                            self.statistics = value
                        }
                        if let value = dict["Threshold"] as? String {
                            self.threshold = value
                        }
                    }
                }
                public var alertInitConfig: [DescribeProductsOfActiveMetricRuleResponseBody.AllProductInitMetricRuleList.AllProductInitMetricRule.AlertInitConfigList.AlertInitConfig]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.alertInitConfig != nil {
                        var tmp : [Any] = []
                        for k in self.alertInitConfig! {
                            tmp.append(k.toMap())
                        }
                        map["AlertInitConfig"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["AlertInitConfig"] as? [Any?] {
                        var tmp : [DescribeProductsOfActiveMetricRuleResponseBody.AllProductInitMetricRuleList.AllProductInitMetricRule.AlertInitConfigList.AlertInitConfig] = []
                        for v in value {
                            if v != nil {
                                var model = DescribeProductsOfActiveMetricRuleResponseBody.AllProductInitMetricRuleList.AllProductInitMetricRule.AlertInitConfigList.AlertInitConfig()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.alertInitConfig = tmp
                    }
                }
            }
            public var alertInitConfigList: DescribeProductsOfActiveMetricRuleResponseBody.AllProductInitMetricRuleList.AllProductInitMetricRule.AlertInitConfigList?

            public var product: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.alertInitConfigList?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.alertInitConfigList != nil {
                    map["AlertInitConfigList"] = self.alertInitConfigList?.toMap()
                }
                if self.product != nil {
                    map["Product"] = self.product!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AlertInitConfigList"] as? [String: Any?] {
                    var model = DescribeProductsOfActiveMetricRuleResponseBody.AllProductInitMetricRuleList.AllProductInitMetricRule.AlertInitConfigList()
                    model.fromMap(value)
                    self.alertInitConfigList = model
                }
                if let value = dict["Product"] as? String {
                    self.product = value
                }
            }
        }
        public var allProductInitMetricRule: [DescribeProductsOfActiveMetricRuleResponseBody.AllProductInitMetricRuleList.AllProductInitMetricRule]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.allProductInitMetricRule != nil {
                var tmp : [Any] = []
                for k in self.allProductInitMetricRule! {
                    tmp.append(k.toMap())
                }
                map["AllProductInitMetricRule"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AllProductInitMetricRule"] as? [Any?] {
                var tmp : [DescribeProductsOfActiveMetricRuleResponseBody.AllProductInitMetricRuleList.AllProductInitMetricRule] = []
                for v in value {
                    if v != nil {
                        var model = DescribeProductsOfActiveMetricRuleResponseBody.AllProductInitMetricRuleList.AllProductInitMetricRule()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.allProductInitMetricRule = tmp
            }
        }
    }
    public var allProductInitMetricRuleList: DescribeProductsOfActiveMetricRuleResponseBody.AllProductInitMetricRuleList?

    public var code: Int32?

    public var datapoints: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.allProductInitMetricRuleList?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.allProductInitMetricRuleList != nil {
            map["AllProductInitMetricRuleList"] = self.allProductInitMetricRuleList?.toMap()
        }
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.datapoints != nil {
            map["Datapoints"] = self.datapoints!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AllProductInitMetricRuleList"] as? [String: Any?] {
            var model = DescribeProductsOfActiveMetricRuleResponseBody.AllProductInitMetricRuleList()
            model.fromMap(value)
            self.allProductInitMetricRuleList = model
        }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Datapoints"] as? String {
            self.datapoints = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DescribeProductsOfActiveMetricRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeProductsOfActiveMetricRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeProductsOfActiveMetricRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeProjectMetaRequest : Tea.TeaModel {
    public var labels: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.labels != nil {
            map["Labels"] = self.labels!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Labels"] as? String {
            self.labels = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
    }
}

public class DescribeProjectMetaResponseBody : Tea.TeaModel {
    public class Resources : Tea.TeaModel {
        public class Resource : Tea.TeaModel {
            public var description_: String?

            public var labels: String?

            public var namespace: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.labels != nil {
                    map["Labels"] = self.labels!
                }
                if self.namespace != nil {
                    map["Namespace"] = self.namespace!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["Labels"] as? String {
                    self.labels = value
                }
                if let value = dict["Namespace"] as? String {
                    self.namespace = value
                }
            }
        }
        public var resource: [DescribeProjectMetaResponseBody.Resources.Resource]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.resource != nil {
                var tmp : [Any] = []
                for k in self.resource! {
                    tmp.append(k.toMap())
                }
                map["Resource"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Resource"] as? [Any?] {
                var tmp : [DescribeProjectMetaResponseBody.Resources.Resource] = []
                for v in value {
                    if v != nil {
                        var model = DescribeProjectMetaResponseBody.Resources.Resource()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.resource = tmp
            }
        }
    }
    public var code: String?

    public var message: String?

    public var pageNumber: String?

    public var pageSize: String?

    public var requestId: String?

    public var resources: DescribeProjectMetaResponseBody.Resources?

    public var success: Bool?

    public var total: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.resources?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resources != nil {
            map["Resources"] = self.resources?.toMap()
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.total != nil {
            map["Total"] = self.total!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["PageNumber"] as? String {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? String {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Resources"] as? [String: Any?] {
            var model = DescribeProjectMetaResponseBody.Resources()
            model.fromMap(value)
            self.resources = model
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
        if let value = dict["Total"] as? String {
            self.total = value
        }
    }
}

public class DescribeProjectMetaResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeProjectMetaResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeProjectMetaResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeSiteMonitorAttributeRequest : Tea.TeaModel {
    public var includeAlert: Bool?

    public var regionId: String?

    public var taskId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.includeAlert != nil {
            map["IncludeAlert"] = self.includeAlert!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["IncludeAlert"] as? Bool {
            self.includeAlert = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["TaskId"] as? String {
            self.taskId = value
        }
    }
}

public class DescribeSiteMonitorAttributeResponseBody : Tea.TeaModel {
    public class MetricRules : Tea.TeaModel {
        public class MetricRule : Tea.TeaModel {
            public var actionEnable: String?

            public var alarmActions: String?

            public var comparisonOperator: String?

            public var dimensions: String?

            public var evaluationCount: String?

            public var expression: String?

            public var level: String?

            public var metricName: String?

            public var namespace: String?

            public var okActions: String?

            public var period: String?

            public var ruleId: String?

            public var ruleName: String?

            public var stateValue: String?

            public var statistics: String?

            public var threshold: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.actionEnable != nil {
                    map["ActionEnable"] = self.actionEnable!
                }
                if self.alarmActions != nil {
                    map["AlarmActions"] = self.alarmActions!
                }
                if self.comparisonOperator != nil {
                    map["ComparisonOperator"] = self.comparisonOperator!
                }
                if self.dimensions != nil {
                    map["Dimensions"] = self.dimensions!
                }
                if self.evaluationCount != nil {
                    map["EvaluationCount"] = self.evaluationCount!
                }
                if self.expression != nil {
                    map["Expression"] = self.expression!
                }
                if self.level != nil {
                    map["Level"] = self.level!
                }
                if self.metricName != nil {
                    map["MetricName"] = self.metricName!
                }
                if self.namespace != nil {
                    map["Namespace"] = self.namespace!
                }
                if self.okActions != nil {
                    map["OkActions"] = self.okActions!
                }
                if self.period != nil {
                    map["Period"] = self.period!
                }
                if self.ruleId != nil {
                    map["RuleId"] = self.ruleId!
                }
                if self.ruleName != nil {
                    map["RuleName"] = self.ruleName!
                }
                if self.stateValue != nil {
                    map["StateValue"] = self.stateValue!
                }
                if self.statistics != nil {
                    map["Statistics"] = self.statistics!
                }
                if self.threshold != nil {
                    map["Threshold"] = self.threshold!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ActionEnable"] as? String {
                    self.actionEnable = value
                }
                if let value = dict["AlarmActions"] as? String {
                    self.alarmActions = value
                }
                if let value = dict["ComparisonOperator"] as? String {
                    self.comparisonOperator = value
                }
                if let value = dict["Dimensions"] as? String {
                    self.dimensions = value
                }
                if let value = dict["EvaluationCount"] as? String {
                    self.evaluationCount = value
                }
                if let value = dict["Expression"] as? String {
                    self.expression = value
                }
                if let value = dict["Level"] as? String {
                    self.level = value
                }
                if let value = dict["MetricName"] as? String {
                    self.metricName = value
                }
                if let value = dict["Namespace"] as? String {
                    self.namespace = value
                }
                if let value = dict["OkActions"] as? String {
                    self.okActions = value
                }
                if let value = dict["Period"] as? String {
                    self.period = value
                }
                if let value = dict["RuleId"] as? String {
                    self.ruleId = value
                }
                if let value = dict["RuleName"] as? String {
                    self.ruleName = value
                }
                if let value = dict["StateValue"] as? String {
                    self.stateValue = value
                }
                if let value = dict["Statistics"] as? String {
                    self.statistics = value
                }
                if let value = dict["Threshold"] as? String {
                    self.threshold = value
                }
            }
        }
        public var metricRule: [DescribeSiteMonitorAttributeResponseBody.MetricRules.MetricRule]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.metricRule != nil {
                var tmp : [Any] = []
                for k in self.metricRule! {
                    tmp.append(k.toMap())
                }
                map["MetricRule"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["MetricRule"] as? [Any?] {
                var tmp : [DescribeSiteMonitorAttributeResponseBody.MetricRules.MetricRule] = []
                for v in value {
                    if v != nil {
                        var model = DescribeSiteMonitorAttributeResponseBody.MetricRules.MetricRule()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.metricRule = tmp
            }
        }
    }
    public class SiteMonitors : Tea.TeaModel {
        public class CustomSchedule : Tea.TeaModel {
            public class Days : Tea.TeaModel {
                public var days: [Int32]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.days != nil {
                        map["days"] = self.days!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["days"] as? [Int32] {
                        self.days = value
                    }
                }
            }
            public var days: DescribeSiteMonitorAttributeResponseBody.SiteMonitors.CustomSchedule.Days?

            public var endHour: Int32?

            public var startHour: Int32?

            public var timeZone: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.days?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.days != nil {
                    map["days"] = self.days?.toMap()
                }
                if self.endHour != nil {
                    map["end_hour"] = self.endHour!
                }
                if self.startHour != nil {
                    map["start_hour"] = self.startHour!
                }
                if self.timeZone != nil {
                    map["time_zone"] = self.timeZone!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["days"] as? [String: Any?] {
                    var model = DescribeSiteMonitorAttributeResponseBody.SiteMonitors.CustomSchedule.Days()
                    model.fromMap(value)
                    self.days = model
                }
                if let value = dict["end_hour"] as? Int32 {
                    self.endHour = value
                }
                if let value = dict["start_hour"] as? Int32 {
                    self.startHour = value
                }
                if let value = dict["time_zone"] as? String {
                    self.timeZone = value
                }
            }
        }
        public class IspCities : Tea.TeaModel {
            public class IspCity : Tea.TeaModel {
                public var city: String?

                public var cityName: String?

                public var isp: String?

                public var ispName: String?

                public var type: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.city != nil {
                        map["City"] = self.city!
                    }
                    if self.cityName != nil {
                        map["CityName"] = self.cityName!
                    }
                    if self.isp != nil {
                        map["Isp"] = self.isp!
                    }
                    if self.ispName != nil {
                        map["IspName"] = self.ispName!
                    }
                    if self.type != nil {
                        map["Type"] = self.type!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["City"] as? String {
                        self.city = value
                    }
                    if let value = dict["CityName"] as? String {
                        self.cityName = value
                    }
                    if let value = dict["Isp"] as? String {
                        self.isp = value
                    }
                    if let value = dict["IspName"] as? String {
                        self.ispName = value
                    }
                    if let value = dict["Type"] as? String {
                        self.type = value
                    }
                }
            }
            public var ispCity: [DescribeSiteMonitorAttributeResponseBody.SiteMonitors.IspCities.IspCity]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.ispCity != nil {
                    var tmp : [Any] = []
                    for k in self.ispCity! {
                        tmp.append(k.toMap())
                    }
                    map["IspCity"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["IspCity"] as? [Any?] {
                    var tmp : [DescribeSiteMonitorAttributeResponseBody.SiteMonitors.IspCities.IspCity] = []
                    for v in value {
                        if v != nil {
                            var model = DescribeSiteMonitorAttributeResponseBody.SiteMonitors.IspCities.IspCity()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.ispCity = tmp
                }
            }
        }
        public class OptionJson : Tea.TeaModel {
            public class Assertions : Tea.TeaModel {
                public class Assertions : Tea.TeaModel {
                    public var operator_: String?

                    public var property: String?

                    public var target: String?

                    public var type: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.operator_ != nil {
                            map["operator"] = self.operator_!
                        }
                        if self.property != nil {
                            map["property"] = self.property!
                        }
                        if self.target != nil {
                            map["target"] = self.target!
                        }
                        if self.type != nil {
                            map["type"] = self.type!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["operator"] as? String {
                            self.operator_ = value
                        }
                        if let value = dict["property"] as? String {
                            self.property = value
                        }
                        if let value = dict["target"] as? String {
                            self.target = value
                        }
                        if let value = dict["type"] as? String {
                            self.type = value
                        }
                    }
                }
                public var assertions: [DescribeSiteMonitorAttributeResponseBody.SiteMonitors.OptionJson.Assertions.Assertions]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.assertions != nil {
                        var tmp : [Any] = []
                        for k in self.assertions! {
                            tmp.append(k.toMap())
                        }
                        map["assertions"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["assertions"] as? [Any?] {
                        var tmp : [DescribeSiteMonitorAttributeResponseBody.SiteMonitors.OptionJson.Assertions.Assertions] = []
                        for v in value {
                            if v != nil {
                                var model = DescribeSiteMonitorAttributeResponseBody.SiteMonitors.OptionJson.Assertions.Assertions()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.assertions = tmp
                    }
                }
            }
            public class AuthInfo : Tea.TeaModel {
                public class Scopes : Tea.TeaModel {
                    public var scopes: [String]?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.scopes != nil {
                            map["scopes"] = self.scopes!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["scopes"] as? [String] {
                            self.scopes = value
                        }
                    }
                }
                public var accessKeyId: String?

                public var accessKeySecret: String?

                public var apiAction: String?

                public var apiVersion: String?

                public var authStyle: String?

                public var clientId: String?

                public var clientSecret: String?

                public var grantType: String?

                public var password: String?

                public var regionId: String?

                public var scopes: DescribeSiteMonitorAttributeResponseBody.SiteMonitors.OptionJson.AuthInfo.Scopes?

                public var serviceName: String?

                public var sessionToken: String?

                public var tokenUrl: String?

                public var type: String?

                public var useCookieSessionKey: Bool?

                public var username: String?

                public var withAddonResources: Bool?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.scopes?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.accessKeyId != nil {
                        map["access_key_id"] = self.accessKeyId!
                    }
                    if self.accessKeySecret != nil {
                        map["access_key_secret"] = self.accessKeySecret!
                    }
                    if self.apiAction != nil {
                        map["api_action"] = self.apiAction!
                    }
                    if self.apiVersion != nil {
                        map["api_version"] = self.apiVersion!
                    }
                    if self.authStyle != nil {
                        map["auth_style"] = self.authStyle!
                    }
                    if self.clientId != nil {
                        map["client_id"] = self.clientId!
                    }
                    if self.clientSecret != nil {
                        map["client_secret"] = self.clientSecret!
                    }
                    if self.grantType != nil {
                        map["grant_type"] = self.grantType!
                    }
                    if self.password != nil {
                        map["password"] = self.password!
                    }
                    if self.regionId != nil {
                        map["region_id"] = self.regionId!
                    }
                    if self.scopes != nil {
                        map["scopes"] = self.scopes?.toMap()
                    }
                    if self.serviceName != nil {
                        map["service_name"] = self.serviceName!
                    }
                    if self.sessionToken != nil {
                        map["session_token"] = self.sessionToken!
                    }
                    if self.tokenUrl != nil {
                        map["token_url"] = self.tokenUrl!
                    }
                    if self.type != nil {
                        map["type"] = self.type!
                    }
                    if self.useCookieSessionKey != nil {
                        map["use_cookie_session_key"] = self.useCookieSessionKey!
                    }
                    if self.username != nil {
                        map["username"] = self.username!
                    }
                    if self.withAddonResources != nil {
                        map["with_addon_resources"] = self.withAddonResources!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["access_key_id"] as? String {
                        self.accessKeyId = value
                    }
                    if let value = dict["access_key_secret"] as? String {
                        self.accessKeySecret = value
                    }
                    if let value = dict["api_action"] as? String {
                        self.apiAction = value
                    }
                    if let value = dict["api_version"] as? String {
                        self.apiVersion = value
                    }
                    if let value = dict["auth_style"] as? String {
                        self.authStyle = value
                    }
                    if let value = dict["client_id"] as? String {
                        self.clientId = value
                    }
                    if let value = dict["client_secret"] as? String {
                        self.clientSecret = value
                    }
                    if let value = dict["grant_type"] as? String {
                        self.grantType = value
                    }
                    if let value = dict["password"] as? String {
                        self.password = value
                    }
                    if let value = dict["region_id"] as? String {
                        self.regionId = value
                    }
                    if let value = dict["scopes"] as? [String: Any?] {
                        var model = DescribeSiteMonitorAttributeResponseBody.SiteMonitors.OptionJson.AuthInfo.Scopes()
                        model.fromMap(value)
                        self.scopes = model
                    }
                    if let value = dict["service_name"] as? String {
                        self.serviceName = value
                    }
                    if let value = dict["session_token"] as? String {
                        self.sessionToken = value
                    }
                    if let value = dict["token_url"] as? String {
                        self.tokenUrl = value
                    }
                    if let value = dict["type"] as? String {
                        self.type = value
                    }
                    if let value = dict["use_cookie_session_key"] as? Bool {
                        self.useCookieSessionKey = value
                    }
                    if let value = dict["username"] as? String {
                        self.username = value
                    }
                    if let value = dict["with_addon_resources"] as? Bool {
                        self.withAddonResources = value
                    }
                }
            }
            public class BlockedUrlList : Tea.TeaModel {
                public var blockedUrlList: [String]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.blockedUrlList != nil {
                        map["blocked_url_list"] = self.blockedUrlList!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["blocked_url_list"] as? [String] {
                        self.blockedUrlList = value
                    }
                }
            }
            public class BrowserHeaders : Tea.TeaModel {
                public var browserHeaders: [[String: Any]]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.browserHeaders != nil {
                        map["browser_headers"] = self.browserHeaders!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["browser_headers"] as? [[String: Any]] {
                        self.browserHeaders = value
                    }
                }
            }
            public class BrowserHosts : Tea.TeaModel {
                public var browserHosts: [String]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.browserHosts != nil {
                        map["browser_hosts"] = self.browserHosts!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["browser_hosts"] as? [String] {
                        self.browserHosts = value
                    }
                }
            }
            public class BrowserInfo : Tea.TeaModel {
                public class BrowserInfo : Tea.TeaModel {
                    public var browser: String?

                    public var device: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.browser != nil {
                            map["browser"] = self.browser!
                        }
                        if self.device != nil {
                            map["device"] = self.device!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["browser"] as? String {
                            self.browser = value
                        }
                        if let value = dict["device"] as? String {
                            self.device = value
                        }
                    }
                }
                public var browserInfo: [DescribeSiteMonitorAttributeResponseBody.SiteMonitors.OptionJson.BrowserInfo.BrowserInfo]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.browserInfo != nil {
                        var tmp : [Any] = []
                        for k in self.browserInfo! {
                            tmp.append(k.toMap())
                        }
                        map["browser_info"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["browser_info"] as? [Any?] {
                        var tmp : [DescribeSiteMonitorAttributeResponseBody.SiteMonitors.OptionJson.BrowserInfo.BrowserInfo] = []
                        for v in value {
                            if v != nil {
                                var model = DescribeSiteMonitorAttributeResponseBody.SiteMonitors.OptionJson.BrowserInfo.BrowserInfo()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.browserInfo = tmp
                    }
                }
            }
            public class ConfigVariables : Tea.TeaModel {
                public class ConfigVariables : Tea.TeaModel {
                    public var name: String?

                    public var secure: Bool?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.name != nil {
                            map["name"] = self.name!
                        }
                        if self.secure != nil {
                            map["secure"] = self.secure!
                        }
                        if self.value != nil {
                            map["value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["name"] as? String {
                            self.name = value
                        }
                        if let value = dict["secure"] as? Bool {
                            self.secure = value
                        }
                        if let value = dict["value"] as? String {
                            self.value = value
                        }
                    }
                }
                public var configVariables: [DescribeSiteMonitorAttributeResponseBody.SiteMonitors.OptionJson.ConfigVariables.ConfigVariables]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.configVariables != nil {
                        var tmp : [Any] = []
                        for k in self.configVariables! {
                            tmp.append(k.toMap())
                        }
                        map["config_variables"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["config_variables"] as? [Any?] {
                        var tmp : [DescribeSiteMonitorAttributeResponseBody.SiteMonitors.OptionJson.ConfigVariables.ConfigVariables] = []
                        for v in value {
                            if v != nil {
                                var model = DescribeSiteMonitorAttributeResponseBody.SiteMonitors.OptionJson.ConfigVariables.ConfigVariables()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.configVariables = tmp
                    }
                }
            }
            public class ExpectExistString : Tea.TeaModel {
                public var expectExistString: [String]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.expectExistString != nil {
                        map["expect_exist_string"] = self.expectExistString!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["expect_exist_string"] as? [String] {
                        self.expectExistString = value
                    }
                }
            }
            public class ExpectNonExistString : Tea.TeaModel {
                public var expectNonExistString: [String]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.expectNonExistString != nil {
                        map["expect_non_exist_string"] = self.expectNonExistString!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["expect_non_exist_string"] as? [String] {
                        self.expectNonExistString = value
                    }
                }
            }
            public class QuicTarget : Tea.TeaModel {
                public var quicTarget: [String]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.quicTarget != nil {
                        map["quic_target"] = self.quicTarget!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["quic_target"] as? [String] {
                        self.quicTarget = value
                    }
                }
            }
            public class Steps : Tea.TeaModel {
                public class Steps : Tea.TeaModel {
                    public class ExtractedVariables : Tea.TeaModel {
                        public class ExtractedVariables : Tea.TeaModel {
                            public class Parser : Tea.TeaModel {
                                public var parserType: String?

                                public var value: String?

                                public override init() {
                                    super.init()
                                }

                                public init(_ dict: [String: Any]) {
                                    super.init()
                                    self.fromMap(dict)
                                }

                                public override func validate() throws -> Void {
                                }

                                public override func toMap() -> [String : Any] {
                                    var map = super.toMap()
                                    if self.parserType != nil {
                                        map["parser_type"] = self.parserType!
                                    }
                                    if self.value != nil {
                                        map["value"] = self.value!
                                    }
                                    return map
                                }

                                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                    guard let dict else { return }
                                    if let value = dict["parser_type"] as? String {
                                        self.parserType = value
                                    }
                                    if let value = dict["value"] as? String {
                                        self.value = value
                                    }
                                }
                            }
                            public var extractedType: String?

                            public var field: String?

                            public var name: String?

                            public var parser: DescribeSiteMonitorAttributeResponseBody.SiteMonitors.OptionJson.Steps.Steps.ExtractedVariables.ExtractedVariables.Parser?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                                try self.parser?.validate()
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.extractedType != nil {
                                    map["extracted_type"] = self.extractedType!
                                }
                                if self.field != nil {
                                    map["field"] = self.field!
                                }
                                if self.name != nil {
                                    map["name"] = self.name!
                                }
                                if self.parser != nil {
                                    map["parser"] = self.parser?.toMap()
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                guard let dict else { return }
                                if let value = dict["extracted_type"] as? String {
                                    self.extractedType = value
                                }
                                if let value = dict["field"] as? String {
                                    self.field = value
                                }
                                if let value = dict["name"] as? String {
                                    self.name = value
                                }
                                if let value = dict["parser"] as? [String: Any?] {
                                    var model = DescribeSiteMonitorAttributeResponseBody.SiteMonitors.OptionJson.Steps.Steps.ExtractedVariables.ExtractedVariables.Parser()
                                    model.fromMap(value)
                                    self.parser = model
                                }
                            }
                        }
                        public var extractedVariables: [DescribeSiteMonitorAttributeResponseBody.SiteMonitors.OptionJson.Steps.Steps.ExtractedVariables.ExtractedVariables]?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.extractedVariables != nil {
                                var tmp : [Any] = []
                                for k in self.extractedVariables! {
                                    tmp.append(k.toMap())
                                }
                                map["extracted_variables"] = tmp
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["extracted_variables"] as? [Any?] {
                                var tmp : [DescribeSiteMonitorAttributeResponseBody.SiteMonitors.OptionJson.Steps.Steps.ExtractedVariables.ExtractedVariables] = []
                                for v in value {
                                    if v != nil {
                                        var model = DescribeSiteMonitorAttributeResponseBody.SiteMonitors.OptionJson.Steps.Steps.ExtractedVariables.ExtractedVariables()
                                        if v != nil {
                                            model.fromMap(v as? [String: Any?])
                                        }
                                        tmp.append(model)
                                    }
                                }
                                self.extractedVariables = tmp
                            }
                        }
                    }
                    public var allowFailure: Bool?

                    public var autoExtractCookie: Bool?

                    public var extractedVariables: DescribeSiteMonitorAttributeResponseBody.SiteMonitors.OptionJson.Steps.Steps.ExtractedVariables?

                    public var isCritical: Bool?

                    public var name: String?

                    public var option: String?

                    public var stepName: String?

                    public var stepType: String?

                    public var url: String?

                    public var useGeneratedCookie: Bool?

                    public var waitTimeInSecs: Int32?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                        try self.extractedVariables?.validate()
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.allowFailure != nil {
                            map["allow_failure"] = self.allowFailure!
                        }
                        if self.autoExtractCookie != nil {
                            map["auto_extract_cookie"] = self.autoExtractCookie!
                        }
                        if self.extractedVariables != nil {
                            map["extracted_variables"] = self.extractedVariables?.toMap()
                        }
                        if self.isCritical != nil {
                            map["is_critical"] = self.isCritical!
                        }
                        if self.name != nil {
                            map["name"] = self.name!
                        }
                        if self.option != nil {
                            map["option"] = self.option!
                        }
                        if self.stepName != nil {
                            map["step_name"] = self.stepName!
                        }
                        if self.stepType != nil {
                            map["step_type"] = self.stepType!
                        }
                        if self.url != nil {
                            map["url"] = self.url!
                        }
                        if self.useGeneratedCookie != nil {
                            map["use_generated_cookie"] = self.useGeneratedCookie!
                        }
                        if self.waitTimeInSecs != nil {
                            map["wait_time_in_secs"] = self.waitTimeInSecs!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["allow_failure"] as? Bool {
                            self.allowFailure = value
                        }
                        if let value = dict["auto_extract_cookie"] as? Bool {
                            self.autoExtractCookie = value
                        }
                        if let value = dict["extracted_variables"] as? [String: Any?] {
                            var model = DescribeSiteMonitorAttributeResponseBody.SiteMonitors.OptionJson.Steps.Steps.ExtractedVariables()
                            model.fromMap(value)
                            self.extractedVariables = model
                        }
                        if let value = dict["is_critical"] as? Bool {
                            self.isCritical = value
                        }
                        if let value = dict["name"] as? String {
                            self.name = value
                        }
                        if let value = dict["option"] as? String {
                            self.option = value
                        }
                        if let value = dict["step_name"] as? String {
                            self.stepName = value
                        }
                        if let value = dict["step_type"] as? String {
                            self.stepType = value
                        }
                        if let value = dict["url"] as? String {
                            self.url = value
                        }
                        if let value = dict["use_generated_cookie"] as? Bool {
                            self.useGeneratedCookie = value
                        }
                        if let value = dict["wait_time_in_secs"] as? Int32 {
                            self.waitTimeInSecs = value
                        }
                    }
                }
                public var steps: [DescribeSiteMonitorAttributeResponseBody.SiteMonitors.OptionJson.Steps.Steps]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.steps != nil {
                        var tmp : [Any] = []
                        for k in self.steps! {
                            tmp.append(k.toMap())
                        }
                        map["steps"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["steps"] as? [Any?] {
                        var tmp : [DescribeSiteMonitorAttributeResponseBody.SiteMonitors.OptionJson.Steps.Steps] = []
                        for v in value {
                            if v != nil {
                                var model = DescribeSiteMonitorAttributeResponseBody.SiteMonitors.OptionJson.Steps.Steps()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.steps = tmp
                    }
                }
            }
            public class TrafficHijackElementBlacklist : Tea.TeaModel {
                public var trafficHijackElementBlacklist: [String]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.trafficHijackElementBlacklist != nil {
                        map["traffic_hijack_element_blacklist"] = self.trafficHijackElementBlacklist!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["traffic_hijack_element_blacklist"] as? [String] {
                        self.trafficHijackElementBlacklist = value
                    }
                }
            }
            public class TrafficHijackElementWhitelist : Tea.TeaModel {
                public var trafficHijackElementWhitelist: [String]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.trafficHijackElementWhitelist != nil {
                        map["traffic_hijack_element_whitelist"] = self.trafficHijackElementWhitelist!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["traffic_hijack_element_whitelist"] as? [String] {
                        self.trafficHijackElementWhitelist = value
                    }
                }
            }
            public var assertions: DescribeSiteMonitorAttributeResponseBody.SiteMonitors.OptionJson.Assertions?

            public var attempts: Int64?

            public var authInfo: DescribeSiteMonitorAttributeResponseBody.SiteMonitors.OptionJson.AuthInfo?

            public var blockedUrlList: DescribeSiteMonitorAttributeResponseBody.SiteMonitors.OptionJson.BlockedUrlList?

            public var browserHeaders: DescribeSiteMonitorAttributeResponseBody.SiteMonitors.OptionJson.BrowserHeaders?

            public var browserHosts: DescribeSiteMonitorAttributeResponseBody.SiteMonitors.OptionJson.BrowserHosts?

            public var browserInfo: DescribeSiteMonitorAttributeResponseBody.SiteMonitors.OptionJson.BrowserInfo?

            public var browserInsecure: Bool?

            public var browserTaskVersion: String?

            public var configVariables: DescribeSiteMonitorAttributeResponseBody.SiteMonitors.OptionJson.ConfigVariables?

            public var cookie: String?

            public var diagnosisMtr: Bool?

            public var diagnosisPing: Bool?

            public var dnsHijackWhitelist: String?

            public var dnsMatchRule: String?

            public var dnsServer: String?

            public var dnsType: String?

            public var emptyMessage: Bool?

            public var expectExistString: DescribeSiteMonitorAttributeResponseBody.SiteMonitors.OptionJson.ExpectExistString?

            public var expectNonExistString: DescribeSiteMonitorAttributeResponseBody.SiteMonitors.OptionJson.ExpectNonExistString?

            public var expectValue: String?

            public var failureRate: Double?

            public var header: String?

            public var hops: Int32?

            public var hostBinding: String?

            public var hostBindingType: Int32?

            public var httpMethod: String?

            public var icmpTimeoutMillis: Int32?

            public var ipNetwork: String?

            public var isBase64Encode: String?

            public var matchRule: Int32?

            public var minTlsVersion: String?

            public var password: String?

            public var pingNum: Int32?

            public var pingPort: Int32?

            public var pingType: String?

            public var port: Int32?

            public var protocol_: String?

            public var quicEnabled: Bool?

            public var quicTarget: DescribeSiteMonitorAttributeResponseBody.SiteMonitors.OptionJson.QuicTarget?

            public var requestContent: String?

            public var requestFormat: String?

            public var responseContent: String?

            public var responseFormat: String?

            public var retryDelay: Int32?

            public var screenShot: Bool?

            public var scrollEnd: Bool?

            public var steps: DescribeSiteMonitorAttributeResponseBody.SiteMonitors.OptionJson.Steps?

            public var strictMode: Bool?

            public var timeOut: Int64?

            public var traceRegion: String?

            public var traceType: String?

            public var trafficHijackElementBlacklist: DescribeSiteMonitorAttributeResponseBody.SiteMonitors.OptionJson.TrafficHijackElementBlacklist?

            public var trafficHijackElementCount: Int32?

            public var trafficHijackElementWhitelist: DescribeSiteMonitorAttributeResponseBody.SiteMonitors.OptionJson.TrafficHijackElementWhitelist?

            public var username: String?

            public var waitTimeAfterCompletion: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.assertions?.validate()
                try self.authInfo?.validate()
                try self.blockedUrlList?.validate()
                try self.browserHeaders?.validate()
                try self.browserHosts?.validate()
                try self.browserInfo?.validate()
                try self.configVariables?.validate()
                try self.expectExistString?.validate()
                try self.expectNonExistString?.validate()
                try self.quicTarget?.validate()
                try self.steps?.validate()
                try self.trafficHijackElementBlacklist?.validate()
                try self.trafficHijackElementWhitelist?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.assertions != nil {
                    map["assertions"] = self.assertions?.toMap()
                }
                if self.attempts != nil {
                    map["attempts"] = self.attempts!
                }
                if self.authInfo != nil {
                    map["auth_info"] = self.authInfo?.toMap()
                }
                if self.blockedUrlList != nil {
                    map["blocked_url_list"] = self.blockedUrlList?.toMap()
                }
                if self.browserHeaders != nil {
                    map["browser_headers"] = self.browserHeaders?.toMap()
                }
                if self.browserHosts != nil {
                    map["browser_hosts"] = self.browserHosts?.toMap()
                }
                if self.browserInfo != nil {
                    map["browser_info"] = self.browserInfo?.toMap()
                }
                if self.browserInsecure != nil {
                    map["browser_insecure"] = self.browserInsecure!
                }
                if self.browserTaskVersion != nil {
                    map["browser_task_version"] = self.browserTaskVersion!
                }
                if self.configVariables != nil {
                    map["config_variables"] = self.configVariables?.toMap()
                }
                if self.cookie != nil {
                    map["cookie"] = self.cookie!
                }
                if self.diagnosisMtr != nil {
                    map["diagnosis_mtr"] = self.diagnosisMtr!
                }
                if self.diagnosisPing != nil {
                    map["diagnosis_ping"] = self.diagnosisPing!
                }
                if self.dnsHijackWhitelist != nil {
                    map["dns_hijack_whitelist"] = self.dnsHijackWhitelist!
                }
                if self.dnsMatchRule != nil {
                    map["dns_match_rule"] = self.dnsMatchRule!
                }
                if self.dnsServer != nil {
                    map["dns_server"] = self.dnsServer!
                }
                if self.dnsType != nil {
                    map["dns_type"] = self.dnsType!
                }
                if self.emptyMessage != nil {
                    map["empty_message"] = self.emptyMessage!
                }
                if self.expectExistString != nil {
                    map["expect_exist_string"] = self.expectExistString?.toMap()
                }
                if self.expectNonExistString != nil {
                    map["expect_non_exist_string"] = self.expectNonExistString?.toMap()
                }
                if self.expectValue != nil {
                    map["expect_value"] = self.expectValue!
                }
                if self.failureRate != nil {
                    map["failure_rate"] = self.failureRate!
                }
                if self.header != nil {
                    map["header"] = self.header!
                }
                if self.hops != nil {
                    map["hops"] = self.hops!
                }
                if self.hostBinding != nil {
                    map["host_binding"] = self.hostBinding!
                }
                if self.hostBindingType != nil {
                    map["host_binding_type"] = self.hostBindingType!
                }
                if self.httpMethod != nil {
                    map["http_method"] = self.httpMethod!
                }
                if self.icmpTimeoutMillis != nil {
                    map["icmp_timeout_millis"] = self.icmpTimeoutMillis!
                }
                if self.ipNetwork != nil {
                    map["ip_network"] = self.ipNetwork!
                }
                if self.isBase64Encode != nil {
                    map["isBase64Encode"] = self.isBase64Encode!
                }
                if self.matchRule != nil {
                    map["match_rule"] = self.matchRule!
                }
                if self.minTlsVersion != nil {
                    map["min_tls_version"] = self.minTlsVersion!
                }
                if self.password != nil {
                    map["password"] = self.password!
                }
                if self.pingNum != nil {
                    map["ping_num"] = self.pingNum!
                }
                if self.pingPort != nil {
                    map["ping_port"] = self.pingPort!
                }
                if self.pingType != nil {
                    map["ping_type"] = self.pingType!
                }
                if self.port != nil {
                    map["port"] = self.port!
                }
                if self.protocol_ != nil {
                    map["protocol"] = self.protocol_!
                }
                if self.quicEnabled != nil {
                    map["quic_enabled"] = self.quicEnabled!
                }
                if self.quicTarget != nil {
                    map["quic_target"] = self.quicTarget?.toMap()
                }
                if self.requestContent != nil {
                    map["request_content"] = self.requestContent!
                }
                if self.requestFormat != nil {
                    map["request_format"] = self.requestFormat!
                }
                if self.responseContent != nil {
                    map["response_content"] = self.responseContent!
                }
                if self.responseFormat != nil {
                    map["response_format"] = self.responseFormat!
                }
                if self.retryDelay != nil {
                    map["retry_delay"] = self.retryDelay!
                }
                if self.screenShot != nil {
                    map["screen_shot"] = self.screenShot!
                }
                if self.scrollEnd != nil {
                    map["scroll_end"] = self.scrollEnd!
                }
                if self.steps != nil {
                    map["steps"] = self.steps?.toMap()
                }
                if self.strictMode != nil {
                    map["strict_mode"] = self.strictMode!
                }
                if self.timeOut != nil {
                    map["time_out"] = self.timeOut!
                }
                if self.traceRegion != nil {
                    map["trace_region"] = self.traceRegion!
                }
                if self.traceType != nil {
                    map["trace_type"] = self.traceType!
                }
                if self.trafficHijackElementBlacklist != nil {
                    map["traffic_hijack_element_blacklist"] = self.trafficHijackElementBlacklist?.toMap()
                }
                if self.trafficHijackElementCount != nil {
                    map["traffic_hijack_element_count"] = self.trafficHijackElementCount!
                }
                if self.trafficHijackElementWhitelist != nil {
                    map["traffic_hijack_element_whitelist"] = self.trafficHijackElementWhitelist?.toMap()
                }
                if self.username != nil {
                    map["username"] = self.username!
                }
                if self.waitTimeAfterCompletion != nil {
                    map["waitTime_after_completion"] = self.waitTimeAfterCompletion!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["assertions"] as? [String: Any?] {
                    var model = DescribeSiteMonitorAttributeResponseBody.SiteMonitors.OptionJson.Assertions()
                    model.fromMap(value)
                    self.assertions = model
                }
                if let value = dict["attempts"] as? Int64 {
                    self.attempts = value
                }
                if let value = dict["auth_info"] as? [String: Any?] {
                    var model = DescribeSiteMonitorAttributeResponseBody.SiteMonitors.OptionJson.AuthInfo()
                    model.fromMap(value)
                    self.authInfo = model
                }
                if let value = dict["blocked_url_list"] as? [String: Any?] {
                    var model = DescribeSiteMonitorAttributeResponseBody.SiteMonitors.OptionJson.BlockedUrlList()
                    model.fromMap(value)
                    self.blockedUrlList = model
                }
                if let value = dict["browser_headers"] as? [String: Any?] {
                    var model = DescribeSiteMonitorAttributeResponseBody.SiteMonitors.OptionJson.BrowserHeaders()
                    model.fromMap(value)
                    self.browserHeaders = model
                }
                if let value = dict["browser_hosts"] as? [String: Any?] {
                    var model = DescribeSiteMonitorAttributeResponseBody.SiteMonitors.OptionJson.BrowserHosts()
                    model.fromMap(value)
                    self.browserHosts = model
                }
                if let value = dict["browser_info"] as? [String: Any?] {
                    var model = DescribeSiteMonitorAttributeResponseBody.SiteMonitors.OptionJson.BrowserInfo()
                    model.fromMap(value)
                    self.browserInfo = model
                }
                if let value = dict["browser_insecure"] as? Bool {
                    self.browserInsecure = value
                }
                if let value = dict["browser_task_version"] as? String {
                    self.browserTaskVersion = value
                }
                if let value = dict["config_variables"] as? [String: Any?] {
                    var model = DescribeSiteMonitorAttributeResponseBody.SiteMonitors.OptionJson.ConfigVariables()
                    model.fromMap(value)
                    self.configVariables = model
                }
                if let value = dict["cookie"] as? String {
                    self.cookie = value
                }
                if let value = dict["diagnosis_mtr"] as? Bool {
                    self.diagnosisMtr = value
                }
                if let value = dict["diagnosis_ping"] as? Bool {
                    self.diagnosisPing = value
                }
                if let value = dict["dns_hijack_whitelist"] as? String {
                    self.dnsHijackWhitelist = value
                }
                if let value = dict["dns_match_rule"] as? String {
                    self.dnsMatchRule = value
                }
                if let value = dict["dns_server"] as? String {
                    self.dnsServer = value
                }
                if let value = dict["dns_type"] as? String {
                    self.dnsType = value
                }
                if let value = dict["empty_message"] as? Bool {
                    self.emptyMessage = value
                }
                if let value = dict["expect_exist_string"] as? [String: Any?] {
                    var model = DescribeSiteMonitorAttributeResponseBody.SiteMonitors.OptionJson.ExpectExistString()
                    model.fromMap(value)
                    self.expectExistString = model
                }
                if let value = dict["expect_non_exist_string"] as? [String: Any?] {
                    var model = DescribeSiteMonitorAttributeResponseBody.SiteMonitors.OptionJson.ExpectNonExistString()
                    model.fromMap(value)
                    self.expectNonExistString = model
                }
                if let value = dict["expect_value"] as? String {
                    self.expectValue = value
                }
                if let value = dict["failure_rate"] as? Double {
                    self.failureRate = value
                }
                if let value = dict["header"] as? String {
                    self.header = value
                }
                if let value = dict["hops"] as? Int32 {
                    self.hops = value
                }
                if let value = dict["host_binding"] as? String {
                    self.hostBinding = value
                }
                if let value = dict["host_binding_type"] as? Int32 {
                    self.hostBindingType = value
                }
                if let value = dict["http_method"] as? String {
                    self.httpMethod = value
                }
                if let value = dict["icmp_timeout_millis"] as? Int32 {
                    self.icmpTimeoutMillis = value
                }
                if let value = dict["ip_network"] as? String {
                    self.ipNetwork = value
                }
                if let value = dict["isBase64Encode"] as? String {
                    self.isBase64Encode = value
                }
                if let value = dict["match_rule"] as? Int32 {
                    self.matchRule = value
                }
                if let value = dict["min_tls_version"] as? String {
                    self.minTlsVersion = value
                }
                if let value = dict["password"] as? String {
                    self.password = value
                }
                if let value = dict["ping_num"] as? Int32 {
                    self.pingNum = value
                }
                if let value = dict["ping_port"] as? Int32 {
                    self.pingPort = value
                }
                if let value = dict["ping_type"] as? String {
                    self.pingType = value
                }
                if let value = dict["port"] as? Int32 {
                    self.port = value
                }
                if let value = dict["protocol"] as? String {
                    self.protocol_ = value
                }
                if let value = dict["quic_enabled"] as? Bool {
                    self.quicEnabled = value
                }
                if let value = dict["quic_target"] as? [String: Any?] {
                    var model = DescribeSiteMonitorAttributeResponseBody.SiteMonitors.OptionJson.QuicTarget()
                    model.fromMap(value)
                    self.quicTarget = model
                }
                if let value = dict["request_content"] as? String {
                    self.requestContent = value
                }
                if let value = dict["request_format"] as? String {
                    self.requestFormat = value
                }
                if let value = dict["response_content"] as? String {
                    self.responseContent = value
                }
                if let value = dict["response_format"] as? String {
                    self.responseFormat = value
                }
                if let value = dict["retry_delay"] as? Int32 {
                    self.retryDelay = value
                }
                if let value = dict["screen_shot"] as? Bool {
                    self.screenShot = value
                }
                if let value = dict["scroll_end"] as? Bool {
                    self.scrollEnd = value
                }
                if let value = dict["steps"] as? [String: Any?] {
                    var model = DescribeSiteMonitorAttributeResponseBody.SiteMonitors.OptionJson.Steps()
                    model.fromMap(value)
                    self.steps = model
                }
                if let value = dict["strict_mode"] as? Bool {
                    self.strictMode = value
                }
                if let value = dict["time_out"] as? Int64 {
                    self.timeOut = value
                }
                if let value = dict["trace_region"] as? String {
                    self.traceRegion = value
                }
                if let value = dict["trace_type"] as? String {
                    self.traceType = value
                }
                if let value = dict["traffic_hijack_element_blacklist"] as? [String: Any?] {
                    var model = DescribeSiteMonitorAttributeResponseBody.SiteMonitors.OptionJson.TrafficHijackElementBlacklist()
                    model.fromMap(value)
                    self.trafficHijackElementBlacklist = model
                }
                if let value = dict["traffic_hijack_element_count"] as? Int32 {
                    self.trafficHijackElementCount = value
                }
                if let value = dict["traffic_hijack_element_whitelist"] as? [String: Any?] {
                    var model = DescribeSiteMonitorAttributeResponseBody.SiteMonitors.OptionJson.TrafficHijackElementWhitelist()
                    model.fromMap(value)
                    self.trafficHijackElementWhitelist = model
                }
                if let value = dict["username"] as? String {
                    self.username = value
                }
                if let value = dict["waitTime_after_completion"] as? Int32 {
                    self.waitTimeAfterCompletion = value
                }
            }
        }
        public class VpcConfig : Tea.TeaModel {
            public var region: String?

            public var securityGroupId: String?

            public var vpcId: String?

            public var vswitchId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.region != nil {
                    map["Region"] = self.region!
                }
                if self.securityGroupId != nil {
                    map["SecurityGroupId"] = self.securityGroupId!
                }
                if self.vpcId != nil {
                    map["VpcId"] = self.vpcId!
                }
                if self.vswitchId != nil {
                    map["VswitchId"] = self.vswitchId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Region"] as? String {
                    self.region = value
                }
                if let value = dict["SecurityGroupId"] as? String {
                    self.securityGroupId = value
                }
                if let value = dict["VpcId"] as? String {
                    self.vpcId = value
                }
                if let value = dict["VswitchId"] as? String {
                    self.vswitchId = value
                }
            }
        }
        public var address: String?

        public var agentGroup: String?

        public var customSchedule: DescribeSiteMonitorAttributeResponseBody.SiteMonitors.CustomSchedule?

        public var interval: String?

        public var ispCities: DescribeSiteMonitorAttributeResponseBody.SiteMonitors.IspCities?

        public var optionJson: DescribeSiteMonitorAttributeResponseBody.SiteMonitors.OptionJson?

        public var taskId: String?

        public var taskName: String?

        public var taskState: String?

        public var taskType: String?

        public var vpcConfig: DescribeSiteMonitorAttributeResponseBody.SiteMonitors.VpcConfig?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.customSchedule?.validate()
            try self.ispCities?.validate()
            try self.optionJson?.validate()
            try self.vpcConfig?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.address != nil {
                map["Address"] = self.address!
            }
            if self.agentGroup != nil {
                map["AgentGroup"] = self.agentGroup!
            }
            if self.customSchedule != nil {
                map["CustomSchedule"] = self.customSchedule?.toMap()
            }
            if self.interval != nil {
                map["Interval"] = self.interval!
            }
            if self.ispCities != nil {
                map["IspCities"] = self.ispCities?.toMap()
            }
            if self.optionJson != nil {
                map["OptionJson"] = self.optionJson?.toMap()
            }
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            if self.taskName != nil {
                map["TaskName"] = self.taskName!
            }
            if self.taskState != nil {
                map["TaskState"] = self.taskState!
            }
            if self.taskType != nil {
                map["TaskType"] = self.taskType!
            }
            if self.vpcConfig != nil {
                map["VpcConfig"] = self.vpcConfig?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Address"] as? String {
                self.address = value
            }
            if let value = dict["AgentGroup"] as? String {
                self.agentGroup = value
            }
            if let value = dict["CustomSchedule"] as? [String: Any?] {
                var model = DescribeSiteMonitorAttributeResponseBody.SiteMonitors.CustomSchedule()
                model.fromMap(value)
                self.customSchedule = model
            }
            if let value = dict["Interval"] as? String {
                self.interval = value
            }
            if let value = dict["IspCities"] as? [String: Any?] {
                var model = DescribeSiteMonitorAttributeResponseBody.SiteMonitors.IspCities()
                model.fromMap(value)
                self.ispCities = model
            }
            if let value = dict["OptionJson"] as? [String: Any?] {
                var model = DescribeSiteMonitorAttributeResponseBody.SiteMonitors.OptionJson()
                model.fromMap(value)
                self.optionJson = model
            }
            if let value = dict["TaskId"] as? String {
                self.taskId = value
            }
            if let value = dict["TaskName"] as? String {
                self.taskName = value
            }
            if let value = dict["TaskState"] as? String {
                self.taskState = value
            }
            if let value = dict["TaskType"] as? String {
                self.taskType = value
            }
            if let value = dict["VpcConfig"] as? [String: Any?] {
                var model = DescribeSiteMonitorAttributeResponseBody.SiteMonitors.VpcConfig()
                model.fromMap(value)
                self.vpcConfig = model
            }
        }
    }
    public var code: String?

    public var message: String?

    public var metricRules: DescribeSiteMonitorAttributeResponseBody.MetricRules?

    public var requestId: String?

    public var siteMonitors: DescribeSiteMonitorAttributeResponseBody.SiteMonitors?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.metricRules?.validate()
        try self.siteMonitors?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.metricRules != nil {
            map["MetricRules"] = self.metricRules?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.siteMonitors != nil {
            map["SiteMonitors"] = self.siteMonitors?.toMap()
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["MetricRules"] as? [String: Any?] {
            var model = DescribeSiteMonitorAttributeResponseBody.MetricRules()
            model.fromMap(value)
            self.metricRules = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SiteMonitors"] as? [String: Any?] {
            var model = DescribeSiteMonitorAttributeResponseBody.SiteMonitors()
            model.fromMap(value)
            self.siteMonitors = model
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DescribeSiteMonitorAttributeResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeSiteMonitorAttributeResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeSiteMonitorAttributeResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeSiteMonitorDataRequest : Tea.TeaModel {
    public var endTime: String?

    public var length: Int32?

    public var metricName: String?

    public var nextToken: String?

    public var period: String?

    public var regionId: String?

    public var startTime: String?

    public var taskId: String?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.length != nil {
            map["Length"] = self.length!
        }
        if self.metricName != nil {
            map["MetricName"] = self.metricName!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.period != nil {
            map["Period"] = self.period!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["Length"] as? Int32 {
            self.length = value
        }
        if let value = dict["MetricName"] as? String {
            self.metricName = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["Period"] as? String {
            self.period = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
        if let value = dict["TaskId"] as? String {
            self.taskId = value
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
    }
}

public class DescribeSiteMonitorDataResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: String?

    public var message: String?

    public var nextToken: String?

    public var requestId: String?

    public var success: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? String {
            self.success = value
        }
    }
}

public class DescribeSiteMonitorDataResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeSiteMonitorDataResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeSiteMonitorDataResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeSiteMonitorISPCityListRequest : Tea.TeaModel {
    public var city: String?

    public var IPV4: Bool?

    public var IPV6: Bool?

    public var isp: String?

    public var regionId: String?

    public var viewAll: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.city != nil {
            map["City"] = self.city!
        }
        if self.IPV4 != nil {
            map["IPV4"] = self.IPV4!
        }
        if self.IPV6 != nil {
            map["IPV6"] = self.IPV6!
        }
        if self.isp != nil {
            map["Isp"] = self.isp!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.viewAll != nil {
            map["ViewAll"] = self.viewAll!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["City"] as? String {
            self.city = value
        }
        if let value = dict["IPV4"] as? Bool {
            self.IPV4 = value
        }
        if let value = dict["IPV6"] as? Bool {
            self.IPV6 = value
        }
        if let value = dict["Isp"] as? String {
            self.isp = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ViewAll"] as? Bool {
            self.viewAll = value
        }
    }
}

public class DescribeSiteMonitorISPCityListResponseBody : Tea.TeaModel {
    public class IspCityList : Tea.TeaModel {
        public class IspCity : Tea.TeaModel {
            public class IPPool : Tea.TeaModel {
                public var IPPool: [String]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.IPPool != nil {
                        map["IPPool"] = self.IPPool!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["IPPool"] as? [String] {
                        self.IPPool = value
                    }
                }
            }
            public var area_en: String?

            public var area_zh_cN: String?

            public var city: String?

            public var cityName_en: String?

            public var cityName_zh_cN: String?

            public var country: String?

            public var country_en: String?

            public var country_zh_cN: String?

            public var IPPool: DescribeSiteMonitorISPCityListResponseBody.IspCityList.IspCity.IPPool?

            public var IPV4ProbeCount: String?

            public var IPV6ProbeCount: String?

            public var isp: String?

            public var ispName_en: String?

            public var ispName_zh_cN: String?

            public var region: String?

            public var region_en: String?

            public var region_zh_cN: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.IPPool?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.area_en != nil {
                    map["Area.en"] = self.area_en!
                }
                if self.area_zh_cN != nil {
                    map["Area.zh_CN"] = self.area_zh_cN!
                }
                if self.city != nil {
                    map["City"] = self.city!
                }
                if self.cityName_en != nil {
                    map["CityName.en"] = self.cityName_en!
                }
                if self.cityName_zh_cN != nil {
                    map["CityName.zh_CN"] = self.cityName_zh_cN!
                }
                if self.country != nil {
                    map["Country"] = self.country!
                }
                if self.country_en != nil {
                    map["Country.en"] = self.country_en!
                }
                if self.country_zh_cN != nil {
                    map["Country.zh_CN"] = self.country_zh_cN!
                }
                if self.IPPool != nil {
                    map["IPPool"] = self.IPPool?.toMap()
                }
                if self.IPV4ProbeCount != nil {
                    map["IPV4ProbeCount"] = self.IPV4ProbeCount!
                }
                if self.IPV6ProbeCount != nil {
                    map["IPV6ProbeCount"] = self.IPV6ProbeCount!
                }
                if self.isp != nil {
                    map["Isp"] = self.isp!
                }
                if self.ispName_en != nil {
                    map["IspName.en"] = self.ispName_en!
                }
                if self.ispName_zh_cN != nil {
                    map["IspName.zh_CN"] = self.ispName_zh_cN!
                }
                if self.region != nil {
                    map["Region"] = self.region!
                }
                if self.region_en != nil {
                    map["Region.en"] = self.region_en!
                }
                if self.region_zh_cN != nil {
                    map["Region.zh_CN"] = self.region_zh_cN!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Area.en"] as? String {
                    self.area_en = value
                }
                if let value = dict["Area.zh_CN"] as? String {
                    self.area_zh_cN = value
                }
                if let value = dict["City"] as? String {
                    self.city = value
                }
                if let value = dict["CityName.en"] as? String {
                    self.cityName_en = value
                }
                if let value = dict["CityName.zh_CN"] as? String {
                    self.cityName_zh_cN = value
                }
                if let value = dict["Country"] as? String {
                    self.country = value
                }
                if let value = dict["Country.en"] as? String {
                    self.country_en = value
                }
                if let value = dict["Country.zh_CN"] as? String {
                    self.country_zh_cN = value
                }
                if let value = dict["IPPool"] as? [String: Any?] {
                    var model = DescribeSiteMonitorISPCityListResponseBody.IspCityList.IspCity.IPPool()
                    model.fromMap(value)
                    self.IPPool = model
                }
                if let value = dict["IPV4ProbeCount"] as? String {
                    self.IPV4ProbeCount = value
                }
                if let value = dict["IPV6ProbeCount"] as? String {
                    self.IPV6ProbeCount = value
                }
                if let value = dict["Isp"] as? String {
                    self.isp = value
                }
                if let value = dict["IspName.en"] as? String {
                    self.ispName_en = value
                }
                if let value = dict["IspName.zh_CN"] as? String {
                    self.ispName_zh_cN = value
                }
                if let value = dict["Region"] as? String {
                    self.region = value
                }
                if let value = dict["Region.en"] as? String {
                    self.region_en = value
                }
                if let value = dict["Region.zh_CN"] as? String {
                    self.region_zh_cN = value
                }
            }
        }
        public var ispCity: [DescribeSiteMonitorISPCityListResponseBody.IspCityList.IspCity]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.ispCity != nil {
                var tmp : [Any] = []
                for k in self.ispCity! {
                    tmp.append(k.toMap())
                }
                map["IspCity"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["IspCity"] as? [Any?] {
                var tmp : [DescribeSiteMonitorISPCityListResponseBody.IspCityList.IspCity] = []
                for v in value {
                    if v != nil {
                        var model = DescribeSiteMonitorISPCityListResponseBody.IspCityList.IspCity()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.ispCity = tmp
            }
        }
    }
    public var code: String?

    public var ispCityList: DescribeSiteMonitorISPCityListResponseBody.IspCityList?

    public var message: String?

    public var requestId: String?

    public var success: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.ispCityList?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.ispCityList != nil {
            map["IspCityList"] = self.ispCityList?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["IspCityList"] as? [String: Any?] {
            var model = DescribeSiteMonitorISPCityListResponseBody.IspCityList()
            model.fromMap(value)
            self.ispCityList = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? String {
            self.success = value
        }
    }
}

public class DescribeSiteMonitorISPCityListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeSiteMonitorISPCityListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeSiteMonitorISPCityListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeSiteMonitorListRequest : Tea.TeaModel {
    public var agentGroup: String?

    public var keyword: String?

    public var page: Int32?

    public var pageSize: Int32?

    public var regionId: String?

    public var taskId: String?

    public var taskState: String?

    public var taskType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentGroup != nil {
            map["AgentGroup"] = self.agentGroup!
        }
        if self.keyword != nil {
            map["Keyword"] = self.keyword!
        }
        if self.page != nil {
            map["Page"] = self.page!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        if self.taskState != nil {
            map["TaskState"] = self.taskState!
        }
        if self.taskType != nil {
            map["TaskType"] = self.taskType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentGroup"] as? String {
            self.agentGroup = value
        }
        if let value = dict["Keyword"] as? String {
            self.keyword = value
        }
        if let value = dict["Page"] as? Int32 {
            self.page = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["TaskId"] as? String {
            self.taskId = value
        }
        if let value = dict["TaskState"] as? String {
            self.taskState = value
        }
        if let value = dict["TaskType"] as? String {
            self.taskType = value
        }
    }
}

public class DescribeSiteMonitorListResponseBody : Tea.TeaModel {
    public class SiteMonitors : Tea.TeaModel {
        public class SiteMonitor : Tea.TeaModel {
            public class OptionsJson : Tea.TeaModel {
                public class Assertions : Tea.TeaModel {
                    public class Assertions : Tea.TeaModel {
                        public var operator_: String?

                        public var property: String?

                        public var target: String?

                        public var type: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.operator_ != nil {
                                map["operator"] = self.operator_!
                            }
                            if self.property != nil {
                                map["property"] = self.property!
                            }
                            if self.target != nil {
                                map["target"] = self.target!
                            }
                            if self.type != nil {
                                map["type"] = self.type!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["operator"] as? String {
                                self.operator_ = value
                            }
                            if let value = dict["property"] as? String {
                                self.property = value
                            }
                            if let value = dict["target"] as? String {
                                self.target = value
                            }
                            if let value = dict["type"] as? String {
                                self.type = value
                            }
                        }
                    }
                    public var assertions: [DescribeSiteMonitorListResponseBody.SiteMonitors.SiteMonitor.OptionsJson.Assertions.Assertions]?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.assertions != nil {
                            var tmp : [Any] = []
                            for k in self.assertions! {
                                tmp.append(k.toMap())
                            }
                            map["assertions"] = tmp
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["assertions"] as? [Any?] {
                            var tmp : [DescribeSiteMonitorListResponseBody.SiteMonitors.SiteMonitor.OptionsJson.Assertions.Assertions] = []
                            for v in value {
                                if v != nil {
                                    var model = DescribeSiteMonitorListResponseBody.SiteMonitors.SiteMonitor.OptionsJson.Assertions.Assertions()
                                    if v != nil {
                                        model.fromMap(v as? [String: Any?])
                                    }
                                    tmp.append(model)
                                }
                            }
                            self.assertions = tmp
                        }
                    }
                }
                public var acceptableResponseCode: String?

                public var assertions: DescribeSiteMonitorListResponseBody.SiteMonitors.SiteMonitor.OptionsJson.Assertions?

                public var attempts: Int64?

                public var authentication: Int32?

                public var certVerify: Bool?

                public var cookie: String?

                public var diagnosisMtr: Bool?

                public var diagnosisPing: Bool?

                public var dnsMatchRule: String?

                public var dnsServer: String?

                public var dnsType: String?

                public var enableOperatorDns: Bool?

                public var failureRate: Double?

                public var header: String?

                public var httpMethod: String?

                public var isBase64Encode: String?

                public var matchRule: Int32?

                public var password: String?

                public var pingNum: Int32?

                public var port: Int32?

                public var protocol_: String?

                public var proxyProtocol: Bool?

                public var requestContent: String?

                public var requestFormat: String?

                public var responseContent: String?

                public var responseFormat: String?

                public var retryDelay: Int32?

                public var timeOut: Int64?

                public var unfollowRedirect: Bool?

                public var username: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.assertions?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.acceptableResponseCode != nil {
                        map["acceptable_response_code"] = self.acceptableResponseCode!
                    }
                    if self.assertions != nil {
                        map["assertions"] = self.assertions?.toMap()
                    }
                    if self.attempts != nil {
                        map["attempts"] = self.attempts!
                    }
                    if self.authentication != nil {
                        map["authentication"] = self.authentication!
                    }
                    if self.certVerify != nil {
                        map["cert_verify"] = self.certVerify!
                    }
                    if self.cookie != nil {
                        map["cookie"] = self.cookie!
                    }
                    if self.diagnosisMtr != nil {
                        map["diagnosis_mtr"] = self.diagnosisMtr!
                    }
                    if self.diagnosisPing != nil {
                        map["diagnosis_ping"] = self.diagnosisPing!
                    }
                    if self.dnsMatchRule != nil {
                        map["dns_match_rule"] = self.dnsMatchRule!
                    }
                    if self.dnsServer != nil {
                        map["dns_server"] = self.dnsServer!
                    }
                    if self.dnsType != nil {
                        map["dns_type"] = self.dnsType!
                    }
                    if self.enableOperatorDns != nil {
                        map["enable_operator_dns"] = self.enableOperatorDns!
                    }
                    if self.failureRate != nil {
                        map["failure_rate"] = self.failureRate!
                    }
                    if self.header != nil {
                        map["header"] = self.header!
                    }
                    if self.httpMethod != nil {
                        map["http_method"] = self.httpMethod!
                    }
                    if self.isBase64Encode != nil {
                        map["isBase64Encode"] = self.isBase64Encode!
                    }
                    if self.matchRule != nil {
                        map["match_rule"] = self.matchRule!
                    }
                    if self.password != nil {
                        map["password"] = self.password!
                    }
                    if self.pingNum != nil {
                        map["ping_num"] = self.pingNum!
                    }
                    if self.port != nil {
                        map["port"] = self.port!
                    }
                    if self.protocol_ != nil {
                        map["protocol"] = self.protocol_!
                    }
                    if self.proxyProtocol != nil {
                        map["proxy_protocol"] = self.proxyProtocol!
                    }
                    if self.requestContent != nil {
                        map["request_content"] = self.requestContent!
                    }
                    if self.requestFormat != nil {
                        map["request_format"] = self.requestFormat!
                    }
                    if self.responseContent != nil {
                        map["response_content"] = self.responseContent!
                    }
                    if self.responseFormat != nil {
                        map["response_format"] = self.responseFormat!
                    }
                    if self.retryDelay != nil {
                        map["retry_delay"] = self.retryDelay!
                    }
                    if self.timeOut != nil {
                        map["time_out"] = self.timeOut!
                    }
                    if self.unfollowRedirect != nil {
                        map["unfollow_redirect"] = self.unfollowRedirect!
                    }
                    if self.username != nil {
                        map["username"] = self.username!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["acceptable_response_code"] as? String {
                        self.acceptableResponseCode = value
                    }
                    if let value = dict["assertions"] as? [String: Any?] {
                        var model = DescribeSiteMonitorListResponseBody.SiteMonitors.SiteMonitor.OptionsJson.Assertions()
                        model.fromMap(value)
                        self.assertions = model
                    }
                    if let value = dict["attempts"] as? Int64 {
                        self.attempts = value
                    }
                    if let value = dict["authentication"] as? Int32 {
                        self.authentication = value
                    }
                    if let value = dict["cert_verify"] as? Bool {
                        self.certVerify = value
                    }
                    if let value = dict["cookie"] as? String {
                        self.cookie = value
                    }
                    if let value = dict["diagnosis_mtr"] as? Bool {
                        self.diagnosisMtr = value
                    }
                    if let value = dict["diagnosis_ping"] as? Bool {
                        self.diagnosisPing = value
                    }
                    if let value = dict["dns_match_rule"] as? String {
                        self.dnsMatchRule = value
                    }
                    if let value = dict["dns_server"] as? String {
                        self.dnsServer = value
                    }
                    if let value = dict["dns_type"] as? String {
                        self.dnsType = value
                    }
                    if let value = dict["enable_operator_dns"] as? Bool {
                        self.enableOperatorDns = value
                    }
                    if let value = dict["failure_rate"] as? Double {
                        self.failureRate = value
                    }
                    if let value = dict["header"] as? String {
                        self.header = value
                    }
                    if let value = dict["http_method"] as? String {
                        self.httpMethod = value
                    }
                    if let value = dict["isBase64Encode"] as? String {
                        self.isBase64Encode = value
                    }
                    if let value = dict["match_rule"] as? Int32 {
                        self.matchRule = value
                    }
                    if let value = dict["password"] as? String {
                        self.password = value
                    }
                    if let value = dict["ping_num"] as? Int32 {
                        self.pingNum = value
                    }
                    if let value = dict["port"] as? Int32 {
                        self.port = value
                    }
                    if let value = dict["protocol"] as? String {
                        self.protocol_ = value
                    }
                    if let value = dict["proxy_protocol"] as? Bool {
                        self.proxyProtocol = value
                    }
                    if let value = dict["request_content"] as? String {
                        self.requestContent = value
                    }
                    if let value = dict["request_format"] as? String {
                        self.requestFormat = value
                    }
                    if let value = dict["response_content"] as? String {
                        self.responseContent = value
                    }
                    if let value = dict["response_format"] as? String {
                        self.responseFormat = value
                    }
                    if let value = dict["retry_delay"] as? Int32 {
                        self.retryDelay = value
                    }
                    if let value = dict["time_out"] as? Int64 {
                        self.timeOut = value
                    }
                    if let value = dict["unfollow_redirect"] as? Bool {
                        self.unfollowRedirect = value
                    }
                    if let value = dict["username"] as? String {
                        self.username = value
                    }
                }
            }
            public var address: String?

            public var agentGroup: String?

            public var createTime: String?

            public var interval: String?

            public var optionsJson: DescribeSiteMonitorListResponseBody.SiteMonitors.SiteMonitor.OptionsJson?

            public var taskId: String?

            public var taskName: String?

            public var taskState: String?

            public var taskType: String?

            public var updateTime: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.optionsJson?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.address != nil {
                    map["Address"] = self.address!
                }
                if self.agentGroup != nil {
                    map["AgentGroup"] = self.agentGroup!
                }
                if self.createTime != nil {
                    map["CreateTime"] = self.createTime!
                }
                if self.interval != nil {
                    map["Interval"] = self.interval!
                }
                if self.optionsJson != nil {
                    map["OptionsJson"] = self.optionsJson?.toMap()
                }
                if self.taskId != nil {
                    map["TaskId"] = self.taskId!
                }
                if self.taskName != nil {
                    map["TaskName"] = self.taskName!
                }
                if self.taskState != nil {
                    map["TaskState"] = self.taskState!
                }
                if self.taskType != nil {
                    map["TaskType"] = self.taskType!
                }
                if self.updateTime != nil {
                    map["UpdateTime"] = self.updateTime!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Address"] as? String {
                    self.address = value
                }
                if let value = dict["AgentGroup"] as? String {
                    self.agentGroup = value
                }
                if let value = dict["CreateTime"] as? String {
                    self.createTime = value
                }
                if let value = dict["Interval"] as? String {
                    self.interval = value
                }
                if let value = dict["OptionsJson"] as? [String: Any?] {
                    var model = DescribeSiteMonitorListResponseBody.SiteMonitors.SiteMonitor.OptionsJson()
                    model.fromMap(value)
                    self.optionsJson = model
                }
                if let value = dict["TaskId"] as? String {
                    self.taskId = value
                }
                if let value = dict["TaskName"] as? String {
                    self.taskName = value
                }
                if let value = dict["TaskState"] as? String {
                    self.taskState = value
                }
                if let value = dict["TaskType"] as? String {
                    self.taskType = value
                }
                if let value = dict["UpdateTime"] as? String {
                    self.updateTime = value
                }
            }
        }
        public var siteMonitor: [DescribeSiteMonitorListResponseBody.SiteMonitors.SiteMonitor]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.siteMonitor != nil {
                var tmp : [Any] = []
                for k in self.siteMonitor! {
                    tmp.append(k.toMap())
                }
                map["SiteMonitor"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["SiteMonitor"] as? [Any?] {
                var tmp : [DescribeSiteMonitorListResponseBody.SiteMonitors.SiteMonitor] = []
                for v in value {
                    if v != nil {
                        var model = DescribeSiteMonitorListResponseBody.SiteMonitors.SiteMonitor()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.siteMonitor = tmp
            }
        }
    }
    public var code: String?

    public var message: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var siteMonitors: DescribeSiteMonitorListResponseBody.SiteMonitors?

    public var success: String?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.siteMonitors?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.siteMonitors != nil {
            map["SiteMonitors"] = self.siteMonitors?.toMap()
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SiteMonitors"] as? [String: Any?] {
            var model = DescribeSiteMonitorListResponseBody.SiteMonitors()
            model.fromMap(value)
            self.siteMonitors = model
        }
        if let value = dict["Success"] as? String {
            self.success = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class DescribeSiteMonitorListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeSiteMonitorListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeSiteMonitorListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeSiteMonitorLogRequest : Tea.TeaModel {
    public var browser: String?

    public var browserInfo: String?

    public var city: String?

    public var device: String?

    public var endTime: String?

    public var filter: String?

    public var isp: String?

    public var length: Int32?

    public var metricName: String?

    public var nextToken: String?

    public var regionId: String?

    public var startTime: String?

    public var taskIds: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.browser != nil {
            map["Browser"] = self.browser!
        }
        if self.browserInfo != nil {
            map["BrowserInfo"] = self.browserInfo!
        }
        if self.city != nil {
            map["City"] = self.city!
        }
        if self.device != nil {
            map["Device"] = self.device!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.filter != nil {
            map["Filter"] = self.filter!
        }
        if self.isp != nil {
            map["Isp"] = self.isp!
        }
        if self.length != nil {
            map["Length"] = self.length!
        }
        if self.metricName != nil {
            map["MetricName"] = self.metricName!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.taskIds != nil {
            map["TaskIds"] = self.taskIds!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Browser"] as? String {
            self.browser = value
        }
        if let value = dict["BrowserInfo"] as? String {
            self.browserInfo = value
        }
        if let value = dict["City"] as? String {
            self.city = value
        }
        if let value = dict["Device"] as? String {
            self.device = value
        }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["Filter"] as? String {
            self.filter = value
        }
        if let value = dict["Isp"] as? String {
            self.isp = value
        }
        if let value = dict["Length"] as? Int32 {
            self.length = value
        }
        if let value = dict["MetricName"] as? String {
            self.metricName = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
        if let value = dict["TaskIds"] as? String {
            self.taskIds = value
        }
    }
}

public class DescribeSiteMonitorLogResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: String?

    public var message: String?

    public var nextToken: String?

    public var requestId: String?

    public var success: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? String {
            self.success = value
        }
    }
}

public class DescribeSiteMonitorLogResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeSiteMonitorLogResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeSiteMonitorLogResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeSiteMonitorQuotaRequest : Tea.TeaModel {
    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DescribeSiteMonitorQuotaResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var secondMonitor: Bool?

        public var siteMonitorIdcQuota: Int32?

        public var siteMonitorOperatorQuotaQuota: Int32?

        public var siteMonitorQuotaTaskUsed: Int32?

        public var siteMonitorTaskQuota: Int32?

        public var siteMonitorVersion: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.secondMonitor != nil {
                map["SecondMonitor"] = self.secondMonitor!
            }
            if self.siteMonitorIdcQuota != nil {
                map["SiteMonitorIdcQuota"] = self.siteMonitorIdcQuota!
            }
            if self.siteMonitorOperatorQuotaQuota != nil {
                map["SiteMonitorOperatorQuotaQuota"] = self.siteMonitorOperatorQuotaQuota!
            }
            if self.siteMonitorQuotaTaskUsed != nil {
                map["SiteMonitorQuotaTaskUsed"] = self.siteMonitorQuotaTaskUsed!
            }
            if self.siteMonitorTaskQuota != nil {
                map["SiteMonitorTaskQuota"] = self.siteMonitorTaskQuota!
            }
            if self.siteMonitorVersion != nil {
                map["SiteMonitorVersion"] = self.siteMonitorVersion!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["SecondMonitor"] as? Bool {
                self.secondMonitor = value
            }
            if let value = dict["SiteMonitorIdcQuota"] as? Int32 {
                self.siteMonitorIdcQuota = value
            }
            if let value = dict["SiteMonitorOperatorQuotaQuota"] as? Int32 {
                self.siteMonitorOperatorQuotaQuota = value
            }
            if let value = dict["SiteMonitorQuotaTaskUsed"] as? Int32 {
                self.siteMonitorQuotaTaskUsed = value
            }
            if let value = dict["SiteMonitorTaskQuota"] as? Int32 {
                self.siteMonitorTaskQuota = value
            }
            if let value = dict["SiteMonitorVersion"] as? String {
                self.siteMonitorVersion = value
            }
        }
    }
    public var code: String?

    public var data: DescribeSiteMonitorQuotaResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = DescribeSiteMonitorQuotaResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? String {
            self.success = value
        }
    }
}

public class DescribeSiteMonitorQuotaResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeSiteMonitorQuotaResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeSiteMonitorQuotaResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeSiteMonitorStatisticsRequest : Tea.TeaModel {
    public var metricName: String?

    public var regionId: String?

    public var startTime: String?

    public var taskId: String?

    public var timeRange: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.metricName != nil {
            map["MetricName"] = self.metricName!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        if self.timeRange != nil {
            map["TimeRange"] = self.timeRange!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["MetricName"] as? String {
            self.metricName = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
        if let value = dict["TaskId"] as? String {
            self.taskId = value
        }
        if let value = dict["TimeRange"] as? String {
            self.timeRange = value
        }
    }
}

public class DescribeSiteMonitorStatisticsResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: String?

    public var message: String?

    public var requestId: String?

    public var success: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? String {
            self.success = value
        }
    }
}

public class DescribeSiteMonitorStatisticsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeSiteMonitorStatisticsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeSiteMonitorStatisticsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeSyntheticProbeListRequest : Tea.TeaModel {
    public var city: String?

    public var idcProbe: Bool?

    public var ipv4: Bool?

    public var ipv6: Bool?

    public var isp: String?

    public var lmProbe: Bool?

    public var mbProbe: Bool?

    public var regionId: String?

    public var viewAll: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.city != nil {
            map["City"] = self.city!
        }
        if self.idcProbe != nil {
            map["IdcProbe"] = self.idcProbe!
        }
        if self.ipv4 != nil {
            map["Ipv4"] = self.ipv4!
        }
        if self.ipv6 != nil {
            map["Ipv6"] = self.ipv6!
        }
        if self.isp != nil {
            map["Isp"] = self.isp!
        }
        if self.lmProbe != nil {
            map["LmProbe"] = self.lmProbe!
        }
        if self.mbProbe != nil {
            map["MbProbe"] = self.mbProbe!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.viewAll != nil {
            map["ViewAll"] = self.viewAll!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["City"] as? String {
            self.city = value
        }
        if let value = dict["IdcProbe"] as? Bool {
            self.idcProbe = value
        }
        if let value = dict["Ipv4"] as? Bool {
            self.ipv4 = value
        }
        if let value = dict["Ipv6"] as? Bool {
            self.ipv6 = value
        }
        if let value = dict["Isp"] as? String {
            self.isp = value
        }
        if let value = dict["LmProbe"] as? Bool {
            self.lmProbe = value
        }
        if let value = dict["MbProbe"] as? Bool {
            self.mbProbe = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ViewAll"] as? Bool {
            self.viewAll = value
        }
    }
}

public class DescribeSyntheticProbeListResponseBody : Tea.TeaModel {
    public class IspCityList : Tea.TeaModel {
        public var areaCn: String?

        public var areaEn: String?

        public var city: String?

        public var cityCn: String?

        public var cityEn: String?

        public var country: String?

        public var countryCn: String?

        public var countryEn: String?

        public var idcV4ProbeCount: Int32?

        public var idcV6ProbeCount: Int32?

        public var ipPool: [String]?

        public var isp: String?

        public var ispCn: String?

        public var ispEn: String?

        public var lmProbeCount: Int32?

        public var mbProbeCount: Int32?

        public var region: String?

        public var regionCn: String?

        public var regionEn: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.areaCn != nil {
                map["AreaCn"] = self.areaCn!
            }
            if self.areaEn != nil {
                map["AreaEn"] = self.areaEn!
            }
            if self.city != nil {
                map["City"] = self.city!
            }
            if self.cityCn != nil {
                map["CityCn"] = self.cityCn!
            }
            if self.cityEn != nil {
                map["CityEn"] = self.cityEn!
            }
            if self.country != nil {
                map["Country"] = self.country!
            }
            if self.countryCn != nil {
                map["CountryCn"] = self.countryCn!
            }
            if self.countryEn != nil {
                map["CountryEn"] = self.countryEn!
            }
            if self.idcV4ProbeCount != nil {
                map["IdcV4ProbeCount"] = self.idcV4ProbeCount!
            }
            if self.idcV6ProbeCount != nil {
                map["IdcV6ProbeCount"] = self.idcV6ProbeCount!
            }
            if self.ipPool != nil {
                map["IpPool"] = self.ipPool!
            }
            if self.isp != nil {
                map["Isp"] = self.isp!
            }
            if self.ispCn != nil {
                map["IspCn"] = self.ispCn!
            }
            if self.ispEn != nil {
                map["IspEn"] = self.ispEn!
            }
            if self.lmProbeCount != nil {
                map["LmProbeCount"] = self.lmProbeCount!
            }
            if self.mbProbeCount != nil {
                map["MbProbeCount"] = self.mbProbeCount!
            }
            if self.region != nil {
                map["Region"] = self.region!
            }
            if self.regionCn != nil {
                map["RegionCn"] = self.regionCn!
            }
            if self.regionEn != nil {
                map["RegionEn"] = self.regionEn!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AreaCn"] as? String {
                self.areaCn = value
            }
            if let value = dict["AreaEn"] as? String {
                self.areaEn = value
            }
            if let value = dict["City"] as? String {
                self.city = value
            }
            if let value = dict["CityCn"] as? String {
                self.cityCn = value
            }
            if let value = dict["CityEn"] as? String {
                self.cityEn = value
            }
            if let value = dict["Country"] as? String {
                self.country = value
            }
            if let value = dict["CountryCn"] as? String {
                self.countryCn = value
            }
            if let value = dict["CountryEn"] as? String {
                self.countryEn = value
            }
            if let value = dict["IdcV4ProbeCount"] as? Int32 {
                self.idcV4ProbeCount = value
            }
            if let value = dict["IdcV6ProbeCount"] as? Int32 {
                self.idcV6ProbeCount = value
            }
            if let value = dict["IpPool"] as? [String] {
                self.ipPool = value
            }
            if let value = dict["Isp"] as? String {
                self.isp = value
            }
            if let value = dict["IspCn"] as? String {
                self.ispCn = value
            }
            if let value = dict["IspEn"] as? String {
                self.ispEn = value
            }
            if let value = dict["LmProbeCount"] as? Int32 {
                self.lmProbeCount = value
            }
            if let value = dict["MbProbeCount"] as? Int32 {
                self.mbProbeCount = value
            }
            if let value = dict["Region"] as? String {
                self.region = value
            }
            if let value = dict["RegionCn"] as? String {
                self.regionCn = value
            }
            if let value = dict["RegionEn"] as? String {
                self.regionEn = value
            }
        }
    }
    public var code: String?

    public var ispCityList: [DescribeSyntheticProbeListResponseBody.IspCityList]?

    public var message: String?

    public var requestId: String?

    public var success: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.ispCityList != nil {
            var tmp : [Any] = []
            for k in self.ispCityList! {
                tmp.append(k.toMap())
            }
            map["IspCityList"] = tmp
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["IspCityList"] as? [Any?] {
            var tmp : [DescribeSyntheticProbeListResponseBody.IspCityList] = []
            for v in value {
                if v != nil {
                    var model = DescribeSyntheticProbeListResponseBody.IspCityList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.ispCityList = tmp
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? String {
            self.success = value
        }
    }
}

public class DescribeSyntheticProbeListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeSyntheticProbeListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeSyntheticProbeListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeSystemEventAttributeRequest : Tea.TeaModel {
    public var endTime: String?

    public var eventType: String?

    public var groupId: String?

    public var level: String?

    public var name: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var product: String?

    public var regionId: String?

    public var searchKeywords: String?

    public var startTime: String?

    public var status: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.eventType != nil {
            map["EventType"] = self.eventType!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.level != nil {
            map["Level"] = self.level!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.product != nil {
            map["Product"] = self.product!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.searchKeywords != nil {
            map["SearchKeywords"] = self.searchKeywords!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["EventType"] as? String {
            self.eventType = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["Level"] as? String {
            self.level = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["Product"] as? String {
            self.product = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["SearchKeywords"] as? String {
            self.searchKeywords = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
    }
}

public class DescribeSystemEventAttributeResponseBody : Tea.TeaModel {
    public class SystemEvents : Tea.TeaModel {
        public class SystemEvent : Tea.TeaModel {
            public var content: String?

            public var groupId: String?

            public var id: String?

            public var instanceName: String?

            public var level: String?

            public var name: String?

            public var product: String?

            public var regionId: String?

            public var resourceId: String?

            public var status: String?

            public var time: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.content != nil {
                    map["Content"] = self.content!
                }
                if self.groupId != nil {
                    map["GroupId"] = self.groupId!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.instanceName != nil {
                    map["InstanceName"] = self.instanceName!
                }
                if self.level != nil {
                    map["Level"] = self.level!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.product != nil {
                    map["Product"] = self.product!
                }
                if self.regionId != nil {
                    map["RegionId"] = self.regionId!
                }
                if self.resourceId != nil {
                    map["ResourceId"] = self.resourceId!
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                if self.time != nil {
                    map["Time"] = self.time!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Content"] as? String {
                    self.content = value
                }
                if let value = dict["GroupId"] as? String {
                    self.groupId = value
                }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
                if let value = dict["InstanceName"] as? String {
                    self.instanceName = value
                }
                if let value = dict["Level"] as? String {
                    self.level = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["Product"] as? String {
                    self.product = value
                }
                if let value = dict["RegionId"] as? String {
                    self.regionId = value
                }
                if let value = dict["ResourceId"] as? String {
                    self.resourceId = value
                }
                if let value = dict["Status"] as? String {
                    self.status = value
                }
                if let value = dict["Time"] as? Int64 {
                    self.time = value
                }
            }
        }
        public var systemEvent: [DescribeSystemEventAttributeResponseBody.SystemEvents.SystemEvent]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.systemEvent != nil {
                var tmp : [Any] = []
                for k in self.systemEvent! {
                    tmp.append(k.toMap())
                }
                map["SystemEvent"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["SystemEvent"] as? [Any?] {
                var tmp : [DescribeSystemEventAttributeResponseBody.SystemEvents.SystemEvent] = []
                for v in value {
                    if v != nil {
                        var model = DescribeSystemEventAttributeResponseBody.SystemEvents.SystemEvent()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.systemEvent = tmp
            }
        }
    }
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: String?

    public var systemEvents: DescribeSystemEventAttributeResponseBody.SystemEvents?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.systemEvents?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.systemEvents != nil {
            map["SystemEvents"] = self.systemEvents?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? String {
            self.success = value
        }
        if let value = dict["SystemEvents"] as? [String: Any?] {
            var model = DescribeSystemEventAttributeResponseBody.SystemEvents()
            model.fromMap(value)
            self.systemEvents = model
        }
    }
}

public class DescribeSystemEventAttributeResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeSystemEventAttributeResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeSystemEventAttributeResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeSystemEventCountRequest : Tea.TeaModel {
    public var endTime: String?

    public var eventType: String?

    public var groupId: String?

    public var level: String?

    public var name: String?

    public var product: String?

    public var regionId: String?

    public var searchKeywords: String?

    public var startTime: String?

    public var status: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.eventType != nil {
            map["EventType"] = self.eventType!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.level != nil {
            map["Level"] = self.level!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.product != nil {
            map["Product"] = self.product!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.searchKeywords != nil {
            map["SearchKeywords"] = self.searchKeywords!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["EventType"] as? String {
            self.eventType = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["Level"] as? String {
            self.level = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["Product"] as? String {
            self.product = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["SearchKeywords"] as? String {
            self.searchKeywords = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
    }
}

public class DescribeSystemEventCountResponseBody : Tea.TeaModel {
    public class SystemEventCounts : Tea.TeaModel {
        public class SystemEventCount : Tea.TeaModel {
            public var content: String?

            public var groupId: String?

            public var instanceName: String?

            public var level: String?

            public var name: String?

            public var num: Int64?

            public var product: String?

            public var regionId: String?

            public var resourceId: String?

            public var status: String?

            public var time: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.content != nil {
                    map["Content"] = self.content!
                }
                if self.groupId != nil {
                    map["GroupId"] = self.groupId!
                }
                if self.instanceName != nil {
                    map["InstanceName"] = self.instanceName!
                }
                if self.level != nil {
                    map["Level"] = self.level!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.num != nil {
                    map["Num"] = self.num!
                }
                if self.product != nil {
                    map["Product"] = self.product!
                }
                if self.regionId != nil {
                    map["RegionId"] = self.regionId!
                }
                if self.resourceId != nil {
                    map["ResourceId"] = self.resourceId!
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                if self.time != nil {
                    map["Time"] = self.time!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Content"] as? String {
                    self.content = value
                }
                if let value = dict["GroupId"] as? String {
                    self.groupId = value
                }
                if let value = dict["InstanceName"] as? String {
                    self.instanceName = value
                }
                if let value = dict["Level"] as? String {
                    self.level = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["Num"] as? Int64 {
                    self.num = value
                }
                if let value = dict["Product"] as? String {
                    self.product = value
                }
                if let value = dict["RegionId"] as? String {
                    self.regionId = value
                }
                if let value = dict["ResourceId"] as? String {
                    self.resourceId = value
                }
                if let value = dict["Status"] as? String {
                    self.status = value
                }
                if let value = dict["Time"] as? Int64 {
                    self.time = value
                }
            }
        }
        public var systemEventCount: [DescribeSystemEventCountResponseBody.SystemEventCounts.SystemEventCount]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.systemEventCount != nil {
                var tmp : [Any] = []
                for k in self.systemEventCount! {
                    tmp.append(k.toMap())
                }
                map["SystemEventCount"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["SystemEventCount"] as? [Any?] {
                var tmp : [DescribeSystemEventCountResponseBody.SystemEventCounts.SystemEventCount] = []
                for v in value {
                    if v != nil {
                        var model = DescribeSystemEventCountResponseBody.SystemEventCounts.SystemEventCount()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.systemEventCount = tmp
            }
        }
    }
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: String?

    public var systemEventCounts: DescribeSystemEventCountResponseBody.SystemEventCounts?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.systemEventCounts?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.systemEventCounts != nil {
            map["SystemEventCounts"] = self.systemEventCounts?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? String {
            self.success = value
        }
        if let value = dict["SystemEventCounts"] as? [String: Any?] {
            var model = DescribeSystemEventCountResponseBody.SystemEventCounts()
            model.fromMap(value)
            self.systemEventCounts = model
        }
    }
}

public class DescribeSystemEventCountResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeSystemEventCountResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeSystemEventCountResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeSystemEventHistogramRequest : Tea.TeaModel {
    public var endTime: String?

    public var eventType: String?

    public var groupId: String?

    public var level: String?

    public var name: String?

    public var product: String?

    public var regionId: String?

    public var searchKeywords: String?

    public var startTime: String?

    public var status: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.eventType != nil {
            map["EventType"] = self.eventType!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.level != nil {
            map["Level"] = self.level!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.product != nil {
            map["Product"] = self.product!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.searchKeywords != nil {
            map["SearchKeywords"] = self.searchKeywords!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["EventType"] as? String {
            self.eventType = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["Level"] as? String {
            self.level = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["Product"] as? String {
            self.product = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["SearchKeywords"] as? String {
            self.searchKeywords = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
    }
}

public class DescribeSystemEventHistogramResponseBody : Tea.TeaModel {
    public class SystemEventHistograms : Tea.TeaModel {
        public class SystemEventHistogram : Tea.TeaModel {
            public var count: Int64?

            public var endTime: Int64?

            public var startTime: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.count != nil {
                    map["Count"] = self.count!
                }
                if self.endTime != nil {
                    map["EndTime"] = self.endTime!
                }
                if self.startTime != nil {
                    map["StartTime"] = self.startTime!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Count"] as? Int64 {
                    self.count = value
                }
                if let value = dict["EndTime"] as? Int64 {
                    self.endTime = value
                }
                if let value = dict["StartTime"] as? Int64 {
                    self.startTime = value
                }
            }
        }
        public var systemEventHistogram: [DescribeSystemEventHistogramResponseBody.SystemEventHistograms.SystemEventHistogram]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.systemEventHistogram != nil {
                var tmp : [Any] = []
                for k in self.systemEventHistogram! {
                    tmp.append(k.toMap())
                }
                map["SystemEventHistogram"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["SystemEventHistogram"] as? [Any?] {
                var tmp : [DescribeSystemEventHistogramResponseBody.SystemEventHistograms.SystemEventHistogram] = []
                for v in value {
                    if v != nil {
                        var model = DescribeSystemEventHistogramResponseBody.SystemEventHistograms.SystemEventHistogram()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.systemEventHistogram = tmp
            }
        }
    }
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: String?

    public var systemEventHistograms: DescribeSystemEventHistogramResponseBody.SystemEventHistograms?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.systemEventHistograms?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.systemEventHistograms != nil {
            map["SystemEventHistograms"] = self.systemEventHistograms?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? String {
            self.success = value
        }
        if let value = dict["SystemEventHistograms"] as? [String: Any?] {
            var model = DescribeSystemEventHistogramResponseBody.SystemEventHistograms()
            model.fromMap(value)
            self.systemEventHistograms = model
        }
    }
}

public class DescribeSystemEventHistogramResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeSystemEventHistogramResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeSystemEventHistogramResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeSystemEventMetaListRequest : Tea.TeaModel {
    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DescribeSystemEventMetaListResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Resource : Tea.TeaModel {
            public var eventType: String?

            public var level: String?

            public var name: String?

            public var nameDesc: String?

            public var nameDesc_en: String?

            public var product: String?

            public var status: String?

            public var statusDesc: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.eventType != nil {
                    map["EventType"] = self.eventType!
                }
                if self.level != nil {
                    map["Level"] = self.level!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.nameDesc != nil {
                    map["NameDesc"] = self.nameDesc!
                }
                if self.nameDesc_en != nil {
                    map["NameDesc.En"] = self.nameDesc_en!
                }
                if self.product != nil {
                    map["Product"] = self.product!
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                if self.statusDesc != nil {
                    map["StatusDesc"] = self.statusDesc!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["EventType"] as? String {
                    self.eventType = value
                }
                if let value = dict["Level"] as? String {
                    self.level = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["NameDesc"] as? String {
                    self.nameDesc = value
                }
                if let value = dict["NameDesc.En"] as? String {
                    self.nameDesc_en = value
                }
                if let value = dict["Product"] as? String {
                    self.product = value
                }
                if let value = dict["Status"] as? String {
                    self.status = value
                }
                if let value = dict["StatusDesc"] as? String {
                    self.statusDesc = value
                }
            }
        }
        public var resource: [DescribeSystemEventMetaListResponseBody.Data.Resource]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.resource != nil {
                var tmp : [Any] = []
                for k in self.resource! {
                    tmp.append(k.toMap())
                }
                map["Resource"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Resource"] as? [Any?] {
                var tmp : [DescribeSystemEventMetaListResponseBody.Data.Resource] = []
                for v in value {
                    if v != nil {
                        var model = DescribeSystemEventMetaListResponseBody.Data.Resource()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.resource = tmp
            }
        }
    }
    public var code: Int32?

    public var data: DescribeSystemEventMetaListResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = DescribeSystemEventMetaListResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DescribeSystemEventMetaListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeSystemEventMetaListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeSystemEventMetaListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeTagKeyListRequest : Tea.TeaModel {
    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DescribeTagKeyListResponseBody : Tea.TeaModel {
    public class TagKeys : Tea.TeaModel {
        public var tagKey: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tagKey != nil {
                map["TagKey"] = self.tagKey!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["TagKey"] as? [String] {
                self.tagKey = value
            }
        }
    }
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public var tagKeys: DescribeTagKeyListResponseBody.TagKeys?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tagKeys?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.tagKeys != nil {
            map["TagKeys"] = self.tagKeys?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
        if let value = dict["TagKeys"] as? [String: Any?] {
            var model = DescribeTagKeyListResponseBody.TagKeys()
            model.fromMap(value)
            self.tagKeys = model
        }
    }
}

public class DescribeTagKeyListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeTagKeyListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeTagKeyListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeTagValueListRequest : Tea.TeaModel {
    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var regionId: String?

    public var tagKey: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.tagKey != nil {
            map["TagKey"] = self.tagKey!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["TagKey"] as? String {
            self.tagKey = value
        }
    }
}

public class DescribeTagValueListResponseBody : Tea.TeaModel {
    public class TagValues : Tea.TeaModel {
        public var tagValue: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tagValue != nil {
                map["TagValue"] = self.tagValue!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["TagValue"] as? [String] {
                self.tagValue = value
            }
        }
    }
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public var tagValues: DescribeTagValueListResponseBody.TagValues?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tagValues?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.tagValues != nil {
            map["TagValues"] = self.tagValues?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
        if let value = dict["TagValues"] as? [String: Any?] {
            var model = DescribeTagValueListResponseBody.TagValues()
            model.fromMap(value)
            self.tagValues = model
        }
    }
}

public class DescribeTagValueListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeTagValueListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeTagValueListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeUnhealthyHostAvailabilityRequest : Tea.TeaModel {
    public var id: [Int64]?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? [Int64] {
            self.id = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DescribeUnhealthyHostAvailabilityResponseBody : Tea.TeaModel {
    public class UnhealthyList : Tea.TeaModel {
        public class NodeTaskInstance : Tea.TeaModel {
            public class InstanceList : Tea.TeaModel {
                public var string: [String]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.string != nil {
                        map["String"] = self.string!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["String"] as? [String] {
                        self.string = value
                    }
                }
            }
            public var id: Int64?

            public var instanceList: DescribeUnhealthyHostAvailabilityResponseBody.UnhealthyList.NodeTaskInstance.InstanceList?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.instanceList?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.instanceList != nil {
                    map["InstanceList"] = self.instanceList?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Id"] as? Int64 {
                    self.id = value
                }
                if let value = dict["InstanceList"] as? [String: Any?] {
                    var model = DescribeUnhealthyHostAvailabilityResponseBody.UnhealthyList.NodeTaskInstance.InstanceList()
                    model.fromMap(value)
                    self.instanceList = model
                }
            }
        }
        public var nodeTaskInstance: [DescribeUnhealthyHostAvailabilityResponseBody.UnhealthyList.NodeTaskInstance]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.nodeTaskInstance != nil {
                var tmp : [Any] = []
                for k in self.nodeTaskInstance! {
                    tmp.append(k.toMap())
                }
                map["NodeTaskInstance"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["NodeTaskInstance"] as? [Any?] {
                var tmp : [DescribeUnhealthyHostAvailabilityResponseBody.UnhealthyList.NodeTaskInstance] = []
                for v in value {
                    if v != nil {
                        var model = DescribeUnhealthyHostAvailabilityResponseBody.UnhealthyList.NodeTaskInstance()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.nodeTaskInstance = tmp
            }
        }
    }
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public var unhealthyList: DescribeUnhealthyHostAvailabilityResponseBody.UnhealthyList?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.unhealthyList?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.unhealthyList != nil {
            map["UnhealthyList"] = self.unhealthyList?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
        if let value = dict["UnhealthyList"] as? [String: Any?] {
            var model = DescribeUnhealthyHostAvailabilityResponseBody.UnhealthyList()
            model.fromMap(value)
            self.unhealthyList = model
        }
    }
}

public class DescribeUnhealthyHostAvailabilityResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeUnhealthyHostAvailabilityResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeUnhealthyHostAvailabilityResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DisableActiveMetricRuleRequest : Tea.TeaModel {
    public var product: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.product != nil {
            map["Product"] = self.product!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Product"] as? String {
            self.product = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DisableActiveMetricRuleResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DisableActiveMetricRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DisableActiveMetricRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DisableActiveMetricRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DisableEventRulesRequest : Tea.TeaModel {
    public var regionId: String?

    public var ruleNames: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.ruleNames != nil {
            map["RuleNames"] = self.ruleNames!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["RuleNames"] as? [String] {
            self.ruleNames = value
        }
    }
}

public class DisableEventRulesResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DisableEventRulesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DisableEventRulesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DisableEventRulesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DisableHostAvailabilityRequest : Tea.TeaModel {
    public var id: [Int64]?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? [Int64] {
            self.id = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DisableHostAvailabilityResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DisableHostAvailabilityResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DisableHostAvailabilityResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DisableHostAvailabilityResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DisableMetricRulesRequest : Tea.TeaModel {
    public var regionId: String?

    public var ruleId: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.ruleId != nil {
            map["RuleId"] = self.ruleId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["RuleId"] as? [String] {
            self.ruleId = value
        }
    }
}

public class DisableMetricRulesResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DisableMetricRulesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DisableMetricRulesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DisableMetricRulesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DisableSiteMonitorsRequest : Tea.TeaModel {
    public var regionId: String?

    public var taskIds: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.taskIds != nil {
            map["TaskIds"] = self.taskIds!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["TaskIds"] as? String {
            self.taskIds = value
        }
    }
}

public class DisableSiteMonitorsResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var count: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.count != nil {
                map["count"] = self.count!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["count"] as? Int32 {
                self.count = value
            }
        }
    }
    public var code: String?

    public var data: DisableSiteMonitorsResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = DisableSiteMonitorsResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? String {
            self.success = value
        }
    }
}

public class DisableSiteMonitorsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DisableSiteMonitorsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DisableSiteMonitorsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class EnableActiveMetricRuleRequest : Tea.TeaModel {
    public var product: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.product != nil {
            map["Product"] = self.product!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Product"] as? String {
            self.product = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class EnableActiveMetricRuleResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class EnableActiveMetricRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: EnableActiveMetricRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = EnableActiveMetricRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class EnableEventRulesRequest : Tea.TeaModel {
    public var regionId: String?

    public var ruleNames: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.ruleNames != nil {
            map["RuleNames"] = self.ruleNames!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["RuleNames"] as? [String] {
            self.ruleNames = value
        }
    }
}

public class EnableEventRulesResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class EnableEventRulesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: EnableEventRulesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = EnableEventRulesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class EnableHostAvailabilityRequest : Tea.TeaModel {
    public var id: [Int64]?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? [Int64] {
            self.id = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class EnableHostAvailabilityResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class EnableHostAvailabilityResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: EnableHostAvailabilityResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = EnableHostAvailabilityResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class EnableMetricRuleBlackListRequest : Tea.TeaModel {
    public var id: String?

    public var isEnable: Bool?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.isEnable != nil {
            map["IsEnable"] = self.isEnable!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? String {
            self.id = value
        }
        if let value = dict["IsEnable"] as? Bool {
            self.isEnable = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class EnableMetricRuleBlackListResponseBody : Tea.TeaModel {
    public var code: String?

    public var count: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.count != nil {
            map["Count"] = self.count!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Count"] as? Int32 {
            self.count = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class EnableMetricRuleBlackListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: EnableMetricRuleBlackListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = EnableMetricRuleBlackListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class EnableMetricRulesRequest : Tea.TeaModel {
    public var regionId: String?

    public var ruleId: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.ruleId != nil {
            map["RuleId"] = self.ruleId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["RuleId"] as? [String] {
            self.ruleId = value
        }
    }
}

public class EnableMetricRulesResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class EnableMetricRulesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: EnableMetricRulesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = EnableMetricRulesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class EnableSiteMonitorsRequest : Tea.TeaModel {
    public var regionId: String?

    public var taskIds: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.taskIds != nil {
            map["TaskIds"] = self.taskIds!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["TaskIds"] as? String {
            self.taskIds = value
        }
    }
}

public class EnableSiteMonitorsResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var count: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.count != nil {
                map["count"] = self.count!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["count"] as? Int32 {
                self.count = value
            }
        }
    }
    public var code: String?

    public var data: EnableSiteMonitorsResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = EnableSiteMonitorsResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? String {
            self.success = value
        }
    }
}

public class EnableSiteMonitorsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: EnableSiteMonitorsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = EnableSiteMonitorsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class InstallMonitoringAgentRequest : Tea.TeaModel {
    public var force: Bool?

    public var installCommand: String?

    public var instanceIds: [String]?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.force != nil {
            map["Force"] = self.force!
        }
        if self.installCommand != nil {
            map["InstallCommand"] = self.installCommand!
        }
        if self.instanceIds != nil {
            map["InstanceIds"] = self.instanceIds!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Force"] as? Bool {
            self.force = value
        }
        if let value = dict["InstallCommand"] as? String {
            self.installCommand = value
        }
        if let value = dict["InstanceIds"] as? [String] {
            self.instanceIds = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class InstallMonitoringAgentResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class InstallMonitoringAgentResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: InstallMonitoringAgentResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = InstallMonitoringAgentResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyGroupMonitoringAgentProcessRequest : Tea.TeaModel {
    public class AlertConfig : Tea.TeaModel {
        public class TargetList : Tea.TeaModel {
            public var arn: String?

            public var id: String?

            public var jsonParams: String?

            public var level: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.arn != nil {
                    map["Arn"] = self.arn!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.jsonParams != nil {
                    map["JsonParams"] = self.jsonParams!
                }
                if self.level != nil {
                    map["Level"] = self.level!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Arn"] as? String {
                    self.arn = value
                }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
                if let value = dict["JsonParams"] as? String {
                    self.jsonParams = value
                }
                if let value = dict["Level"] as? String {
                    self.level = value
                }
            }
        }
        public var comparisonOperator: String?

        public var effectiveInterval: String?

        public var escalationsLevel: String?

        public var noEffectiveInterval: String?

        public var silenceTime: String?

        public var statistics: String?

        public var targetList: [ModifyGroupMonitoringAgentProcessRequest.AlertConfig.TargetList]?

        public var threshold: String?

        public var times: String?

        public var webhook: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.comparisonOperator != nil {
                map["ComparisonOperator"] = self.comparisonOperator!
            }
            if self.effectiveInterval != nil {
                map["EffectiveInterval"] = self.effectiveInterval!
            }
            if self.escalationsLevel != nil {
                map["EscalationsLevel"] = self.escalationsLevel!
            }
            if self.noEffectiveInterval != nil {
                map["NoEffectiveInterval"] = self.noEffectiveInterval!
            }
            if self.silenceTime != nil {
                map["SilenceTime"] = self.silenceTime!
            }
            if self.statistics != nil {
                map["Statistics"] = self.statistics!
            }
            if self.targetList != nil {
                var tmp : [Any] = []
                for k in self.targetList! {
                    tmp.append(k.toMap())
                }
                map["TargetList"] = tmp
            }
            if self.threshold != nil {
                map["Threshold"] = self.threshold!
            }
            if self.times != nil {
                map["Times"] = self.times!
            }
            if self.webhook != nil {
                map["Webhook"] = self.webhook!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ComparisonOperator"] as? String {
                self.comparisonOperator = value
            }
            if let value = dict["EffectiveInterval"] as? String {
                self.effectiveInterval = value
            }
            if let value = dict["EscalationsLevel"] as? String {
                self.escalationsLevel = value
            }
            if let value = dict["NoEffectiveInterval"] as? String {
                self.noEffectiveInterval = value
            }
            if let value = dict["SilenceTime"] as? String {
                self.silenceTime = value
            }
            if let value = dict["Statistics"] as? String {
                self.statistics = value
            }
            if let value = dict["TargetList"] as? [Any?] {
                var tmp : [ModifyGroupMonitoringAgentProcessRequest.AlertConfig.TargetList] = []
                for v in value {
                    if v != nil {
                        var model = ModifyGroupMonitoringAgentProcessRequest.AlertConfig.TargetList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.targetList = tmp
            }
            if let value = dict["Threshold"] as? String {
                self.threshold = value
            }
            if let value = dict["Times"] as? String {
                self.times = value
            }
            if let value = dict["Webhook"] as? String {
                self.webhook = value
            }
        }
    }
    public var alertConfig: [ModifyGroupMonitoringAgentProcessRequest.AlertConfig]?

    public var groupId: String?

    public var id: String?

    public var matchExpressFilterRelation: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.alertConfig != nil {
            var tmp : [Any] = []
            for k in self.alertConfig! {
                tmp.append(k.toMap())
            }
            map["AlertConfig"] = tmp
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.matchExpressFilterRelation != nil {
            map["MatchExpressFilterRelation"] = self.matchExpressFilterRelation!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AlertConfig"] as? [Any?] {
            var tmp : [ModifyGroupMonitoringAgentProcessRequest.AlertConfig] = []
            for v in value {
                if v != nil {
                    var model = ModifyGroupMonitoringAgentProcessRequest.AlertConfig()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.alertConfig = tmp
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["Id"] as? String {
            self.id = value
        }
        if let value = dict["MatchExpressFilterRelation"] as? String {
            self.matchExpressFilterRelation = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class ModifyGroupMonitoringAgentProcessResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ModifyGroupMonitoringAgentProcessResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyGroupMonitoringAgentProcessResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyGroupMonitoringAgentProcessResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyHostAvailabilityRequest : Tea.TeaModel {
    public class AlertConfig : Tea.TeaModel {
        public var endTime: Int32?

        public var notifyType: Int32?

        public var silenceTime: Int32?

        public var startTime: Int32?

        public var webHook: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.endTime != nil {
                map["EndTime"] = self.endTime!
            }
            if self.notifyType != nil {
                map["NotifyType"] = self.notifyType!
            }
            if self.silenceTime != nil {
                map["SilenceTime"] = self.silenceTime!
            }
            if self.startTime != nil {
                map["StartTime"] = self.startTime!
            }
            if self.webHook != nil {
                map["WebHook"] = self.webHook!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["EndTime"] as? Int32 {
                self.endTime = value
            }
            if let value = dict["NotifyType"] as? Int32 {
                self.notifyType = value
            }
            if let value = dict["SilenceTime"] as? Int32 {
                self.silenceTime = value
            }
            if let value = dict["StartTime"] as? Int32 {
                self.startTime = value
            }
            if let value = dict["WebHook"] as? String {
                self.webHook = value
            }
        }
    }
    public class TaskOption : Tea.TeaModel {
        public var httpHeader: String?

        public var httpMethod: String?

        public var httpNegative: Bool?

        public var httpPostContent: String?

        public var httpResponseCharset: String?

        public var httpResponseMatchContent: String?

        public var httpURI: String?

        public var interval: Int32?

        public var telnetOrPingHost: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.httpHeader != nil {
                map["HttpHeader"] = self.httpHeader!
            }
            if self.httpMethod != nil {
                map["HttpMethod"] = self.httpMethod!
            }
            if self.httpNegative != nil {
                map["HttpNegative"] = self.httpNegative!
            }
            if self.httpPostContent != nil {
                map["HttpPostContent"] = self.httpPostContent!
            }
            if self.httpResponseCharset != nil {
                map["HttpResponseCharset"] = self.httpResponseCharset!
            }
            if self.httpResponseMatchContent != nil {
                map["HttpResponseMatchContent"] = self.httpResponseMatchContent!
            }
            if self.httpURI != nil {
                map["HttpURI"] = self.httpURI!
            }
            if self.interval != nil {
                map["Interval"] = self.interval!
            }
            if self.telnetOrPingHost != nil {
                map["TelnetOrPingHost"] = self.telnetOrPingHost!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["HttpHeader"] as? String {
                self.httpHeader = value
            }
            if let value = dict["HttpMethod"] as? String {
                self.httpMethod = value
            }
            if let value = dict["HttpNegative"] as? Bool {
                self.httpNegative = value
            }
            if let value = dict["HttpPostContent"] as? String {
                self.httpPostContent = value
            }
            if let value = dict["HttpResponseCharset"] as? String {
                self.httpResponseCharset = value
            }
            if let value = dict["HttpResponseMatchContent"] as? String {
                self.httpResponseMatchContent = value
            }
            if let value = dict["HttpURI"] as? String {
                self.httpURI = value
            }
            if let value = dict["Interval"] as? Int32 {
                self.interval = value
            }
            if let value = dict["TelnetOrPingHost"] as? String {
                self.telnetOrPingHost = value
            }
        }
    }
    public class AlertConfigEscalationList : Tea.TeaModel {
        public var aggregate: String?

        public var metricName: String?

        public var operator_: String?

        public var times: Int32?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.aggregate != nil {
                map["Aggregate"] = self.aggregate!
            }
            if self.metricName != nil {
                map["MetricName"] = self.metricName!
            }
            if self.operator_ != nil {
                map["Operator"] = self.operator_!
            }
            if self.times != nil {
                map["Times"] = self.times!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Aggregate"] as? String {
                self.aggregate = value
            }
            if let value = dict["MetricName"] as? String {
                self.metricName = value
            }
            if let value = dict["Operator"] as? String {
                self.operator_ = value
            }
            if let value = dict["Times"] as? Int32 {
                self.times = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public class AlertConfigTargetList : Tea.TeaModel {
        public var arn: String?

        public var id: String?

        public var jsonParams: String?

        public var level: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.arn != nil {
                map["Arn"] = self.arn!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.jsonParams != nil {
                map["JsonParams"] = self.jsonParams!
            }
            if self.level != nil {
                map["Level"] = self.level!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Arn"] as? String {
                self.arn = value
            }
            if let value = dict["Id"] as? String {
                self.id = value
            }
            if let value = dict["JsonParams"] as? String {
                self.jsonParams = value
            }
            if let value = dict["Level"] as? String {
                self.level = value
            }
        }
    }
    public var alertConfig: ModifyHostAvailabilityRequest.AlertConfig?

    public var taskOption: ModifyHostAvailabilityRequest.TaskOption?

    public var alertConfigEscalationList: [ModifyHostAvailabilityRequest.AlertConfigEscalationList]?

    public var alertConfigTargetList: [ModifyHostAvailabilityRequest.AlertConfigTargetList]?

    public var groupId: Int64?

    public var id: Int64?

    public var instanceList: [String]?

    public var regionId: String?

    public var taskName: String?

    public var taskScope: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.alertConfig?.validate()
        try self.taskOption?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.alertConfig != nil {
            map["AlertConfig"] = self.alertConfig?.toMap()
        }
        if self.taskOption != nil {
            map["TaskOption"] = self.taskOption?.toMap()
        }
        if self.alertConfigEscalationList != nil {
            var tmp : [Any] = []
            for k in self.alertConfigEscalationList! {
                tmp.append(k.toMap())
            }
            map["AlertConfigEscalationList"] = tmp
        }
        if self.alertConfigTargetList != nil {
            var tmp : [Any] = []
            for k in self.alertConfigTargetList! {
                tmp.append(k.toMap())
            }
            map["AlertConfigTargetList"] = tmp
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.instanceList != nil {
            map["InstanceList"] = self.instanceList!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.taskName != nil {
            map["TaskName"] = self.taskName!
        }
        if self.taskScope != nil {
            map["TaskScope"] = self.taskScope!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AlertConfig"] as? [String: Any?] {
            var model = ModifyHostAvailabilityRequest.AlertConfig()
            model.fromMap(value)
            self.alertConfig = model
        }
        if let value = dict["TaskOption"] as? [String: Any?] {
            var model = ModifyHostAvailabilityRequest.TaskOption()
            model.fromMap(value)
            self.taskOption = model
        }
        if let value = dict["AlertConfigEscalationList"] as? [Any?] {
            var tmp : [ModifyHostAvailabilityRequest.AlertConfigEscalationList] = []
            for v in value {
                if v != nil {
                    var model = ModifyHostAvailabilityRequest.AlertConfigEscalationList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.alertConfigEscalationList = tmp
        }
        if let value = dict["AlertConfigTargetList"] as? [Any?] {
            var tmp : [ModifyHostAvailabilityRequest.AlertConfigTargetList] = []
            for v in value {
                if v != nil {
                    var model = ModifyHostAvailabilityRequest.AlertConfigTargetList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.alertConfigTargetList = tmp
        }
        if let value = dict["GroupId"] as? Int64 {
            self.groupId = value
        }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["InstanceList"] as? [String] {
            self.instanceList = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["TaskName"] as? String {
            self.taskName = value
        }
        if let value = dict["TaskScope"] as? String {
            self.taskScope = value
        }
    }
}

public class ModifyHostAvailabilityResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ModifyHostAvailabilityResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyHostAvailabilityResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyHostAvailabilityResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyHostInfoRequest : Tea.TeaModel {
    public var hostName: String?

    public var instanceId: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.hostName != nil {
            map["HostName"] = self.hostName!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["HostName"] as? String {
            self.hostName = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class ModifyHostInfoResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ModifyHostInfoResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyHostInfoResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyHostInfoResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyHybridMonitorNamespaceRequest : Tea.TeaModel {
    public var description_: String?

    public var namespace: String?

    public var regionId: String?

    public var spec: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.namespace != nil {
            map["Namespace"] = self.namespace!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.spec != nil {
            map["Spec"] = self.spec!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["Namespace"] as? String {
            self.namespace = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Spec"] as? String {
            self.spec = value
        }
    }
}

public class ModifyHybridMonitorNamespaceResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? String {
            self.success = value
        }
    }
}

public class ModifyHybridMonitorNamespaceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyHybridMonitorNamespaceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyHybridMonitorNamespaceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyHybridMonitorSLSGroupRequest : Tea.TeaModel {
    public class SLSGroupConfig : Tea.TeaModel {
        public var SLSLogstore: String?

        public var SLSProject: String?

        public var SLSRegion: String?

        public var SLSUserId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.SLSLogstore != nil {
                map["SLSLogstore"] = self.SLSLogstore!
            }
            if self.SLSProject != nil {
                map["SLSProject"] = self.SLSProject!
            }
            if self.SLSRegion != nil {
                map["SLSRegion"] = self.SLSRegion!
            }
            if self.SLSUserId != nil {
                map["SLSUserId"] = self.SLSUserId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["SLSLogstore"] as? String {
                self.SLSLogstore = value
            }
            if let value = dict["SLSProject"] as? String {
                self.SLSProject = value
            }
            if let value = dict["SLSRegion"] as? String {
                self.SLSRegion = value
            }
            if let value = dict["SLSUserId"] as? String {
                self.SLSUserId = value
            }
        }
    }
    public var regionId: String?

    public var SLSGroupConfig: [ModifyHybridMonitorSLSGroupRequest.SLSGroupConfig]?

    public var SLSGroupDescription: String?

    public var SLSGroupName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.SLSGroupConfig != nil {
            var tmp : [Any] = []
            for k in self.SLSGroupConfig! {
                tmp.append(k.toMap())
            }
            map["SLSGroupConfig"] = tmp
        }
        if self.SLSGroupDescription != nil {
            map["SLSGroupDescription"] = self.SLSGroupDescription!
        }
        if self.SLSGroupName != nil {
            map["SLSGroupName"] = self.SLSGroupName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["SLSGroupConfig"] as? [Any?] {
            var tmp : [ModifyHybridMonitorSLSGroupRequest.SLSGroupConfig] = []
            for v in value {
                if v != nil {
                    var model = ModifyHybridMonitorSLSGroupRequest.SLSGroupConfig()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.SLSGroupConfig = tmp
        }
        if let value = dict["SLSGroupDescription"] as? String {
            self.SLSGroupDescription = value
        }
        if let value = dict["SLSGroupName"] as? String {
            self.SLSGroupName = value
        }
    }
}

public class ModifyHybridMonitorSLSGroupResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? String {
            self.success = value
        }
    }
}

public class ModifyHybridMonitorSLSGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyHybridMonitorSLSGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyHybridMonitorSLSGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyHybridMonitorTaskRequest : Tea.TeaModel {
    public class AttachLabels : Tea.TeaModel {
        public var name: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public class SLSProcessConfig : Tea.TeaModel {
        public class Express : Tea.TeaModel {
            public var alias: String?

            public var express: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.alias != nil {
                    map["Alias"] = self.alias!
                }
                if self.express != nil {
                    map["Express"] = self.express!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Alias"] as? String {
                    self.alias = value
                }
                if let value = dict["Express"] as? String {
                    self.express = value
                }
            }
        }
        public class Filter : Tea.TeaModel {
            public class Filters : Tea.TeaModel {
                public var operator_: String?

                public var SLSKeyName: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.operator_ != nil {
                        map["Operator"] = self.operator_!
                    }
                    if self.SLSKeyName != nil {
                        map["SLSKeyName"] = self.SLSKeyName!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Operator"] as? String {
                        self.operator_ = value
                    }
                    if let value = dict["SLSKeyName"] as? String {
                        self.SLSKeyName = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public var filters: [ModifyHybridMonitorTaskRequest.SLSProcessConfig.Filter.Filters]?

            public var relation: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.filters != nil {
                    var tmp : [Any] = []
                    for k in self.filters! {
                        tmp.append(k.toMap())
                    }
                    map["Filters"] = tmp
                }
                if self.relation != nil {
                    map["Relation"] = self.relation!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Filters"] as? [Any?] {
                    var tmp : [ModifyHybridMonitorTaskRequest.SLSProcessConfig.Filter.Filters] = []
                    for v in value {
                        if v != nil {
                            var model = ModifyHybridMonitorTaskRequest.SLSProcessConfig.Filter.Filters()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.filters = tmp
                }
                if let value = dict["Relation"] as? String {
                    self.relation = value
                }
            }
        }
        public class GroupBy : Tea.TeaModel {
            public var alias: String?

            public var SLSKeyName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.alias != nil {
                    map["Alias"] = self.alias!
                }
                if self.SLSKeyName != nil {
                    map["SLSKeyName"] = self.SLSKeyName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Alias"] as? String {
                    self.alias = value
                }
                if let value = dict["SLSKeyName"] as? String {
                    self.SLSKeyName = value
                }
            }
        }
        public class Statistics : Tea.TeaModel {
            public var alias: String?

            public var function: String?

            public var parameter1: String?

            public var parameter2: String?

            public var SLSKeyName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.alias != nil {
                    map["Alias"] = self.alias!
                }
                if self.function != nil {
                    map["Function"] = self.function!
                }
                if self.parameter1 != nil {
                    map["Parameter1"] = self.parameter1!
                }
                if self.parameter2 != nil {
                    map["Parameter2"] = self.parameter2!
                }
                if self.SLSKeyName != nil {
                    map["SLSKeyName"] = self.SLSKeyName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Alias"] as? String {
                    self.alias = value
                }
                if let value = dict["Function"] as? String {
                    self.function = value
                }
                if let value = dict["Parameter1"] as? String {
                    self.parameter1 = value
                }
                if let value = dict["Parameter2"] as? String {
                    self.parameter2 = value
                }
                if let value = dict["SLSKeyName"] as? String {
                    self.SLSKeyName = value
                }
            }
        }
        public var express: [ModifyHybridMonitorTaskRequest.SLSProcessConfig.Express]?

        public var filter: ModifyHybridMonitorTaskRequest.SLSProcessConfig.Filter?

        public var groupBy: [ModifyHybridMonitorTaskRequest.SLSProcessConfig.GroupBy]?

        public var statistics: [ModifyHybridMonitorTaskRequest.SLSProcessConfig.Statistics]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.filter?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.express != nil {
                var tmp : [Any] = []
                for k in self.express! {
                    tmp.append(k.toMap())
                }
                map["Express"] = tmp
            }
            if self.filter != nil {
                map["Filter"] = self.filter?.toMap()
            }
            if self.groupBy != nil {
                var tmp : [Any] = []
                for k in self.groupBy! {
                    tmp.append(k.toMap())
                }
                map["GroupBy"] = tmp
            }
            if self.statistics != nil {
                var tmp : [Any] = []
                for k in self.statistics! {
                    tmp.append(k.toMap())
                }
                map["Statistics"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Express"] as? [Any?] {
                var tmp : [ModifyHybridMonitorTaskRequest.SLSProcessConfig.Express] = []
                for v in value {
                    if v != nil {
                        var model = ModifyHybridMonitorTaskRequest.SLSProcessConfig.Express()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.express = tmp
            }
            if let value = dict["Filter"] as? [String: Any?] {
                var model = ModifyHybridMonitorTaskRequest.SLSProcessConfig.Filter()
                model.fromMap(value)
                self.filter = model
            }
            if let value = dict["GroupBy"] as? [Any?] {
                var tmp : [ModifyHybridMonitorTaskRequest.SLSProcessConfig.GroupBy] = []
                for v in value {
                    if v != nil {
                        var model = ModifyHybridMonitorTaskRequest.SLSProcessConfig.GroupBy()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.groupBy = tmp
            }
            if let value = dict["Statistics"] as? [Any?] {
                var tmp : [ModifyHybridMonitorTaskRequest.SLSProcessConfig.Statistics] = []
                for v in value {
                    if v != nil {
                        var model = ModifyHybridMonitorTaskRequest.SLSProcessConfig.Statistics()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.statistics = tmp
            }
        }
    }
    public var attachLabels: [ModifyHybridMonitorTaskRequest.AttachLabels]?

    public var collectInterval: String?

    public var description_: String?

    public var regionId: String?

    public var SLSProcessConfig: ModifyHybridMonitorTaskRequest.SLSProcessConfig?

    public var taskId: String?

    public var taskName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.SLSProcessConfig?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.attachLabels != nil {
            var tmp : [Any] = []
            for k in self.attachLabels! {
                tmp.append(k.toMap())
            }
            map["AttachLabels"] = tmp
        }
        if self.collectInterval != nil {
            map["CollectInterval"] = self.collectInterval!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.SLSProcessConfig != nil {
            map["SLSProcessConfig"] = self.SLSProcessConfig?.toMap()
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        if self.taskName != nil {
            map["TaskName"] = self.taskName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AttachLabels"] as? [Any?] {
            var tmp : [ModifyHybridMonitorTaskRequest.AttachLabels] = []
            for v in value {
                if v != nil {
                    var model = ModifyHybridMonitorTaskRequest.AttachLabels()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.attachLabels = tmp
        }
        if let value = dict["CollectInterval"] as? String {
            self.collectInterval = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["SLSProcessConfig"] as? [String: Any?] {
            var model = ModifyHybridMonitorTaskRequest.SLSProcessConfig()
            model.fromMap(value)
            self.SLSProcessConfig = model
        }
        if let value = dict["TaskId"] as? String {
            self.taskId = value
        }
        if let value = dict["TaskName"] as? String {
            self.taskName = value
        }
    }
}

public class ModifyHybridMonitorTaskResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? String {
            self.success = value
        }
    }
}

public class ModifyHybridMonitorTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyHybridMonitorTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyHybridMonitorTaskResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyMetricRuleBlackListRequest : Tea.TeaModel {
    public class Metrics : Tea.TeaModel {
        public var metricName: String?

        public var resource: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.metricName != nil {
                map["MetricName"] = self.metricName!
            }
            if self.resource != nil {
                map["Resource"] = self.resource!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["MetricName"] as? String {
                self.metricName = value
            }
            if let value = dict["Resource"] as? String {
                self.resource = value
            }
        }
    }
    public var category: String?

    public var effectiveTime: String?

    public var enableEndTime: String?

    public var enableStartTime: String?

    public var id: String?

    public var instances: [String]?

    public var metrics: [ModifyMetricRuleBlackListRequest.Metrics]?

    public var name: String?

    public var namespace: String?

    public var regionId: String?

    public var scopeType: String?

    public var scopeValue: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.category != nil {
            map["Category"] = self.category!
        }
        if self.effectiveTime != nil {
            map["EffectiveTime"] = self.effectiveTime!
        }
        if self.enableEndTime != nil {
            map["EnableEndTime"] = self.enableEndTime!
        }
        if self.enableStartTime != nil {
            map["EnableStartTime"] = self.enableStartTime!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.instances != nil {
            map["Instances"] = self.instances!
        }
        if self.metrics != nil {
            var tmp : [Any] = []
            for k in self.metrics! {
                tmp.append(k.toMap())
            }
            map["Metrics"] = tmp
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.namespace != nil {
            map["Namespace"] = self.namespace!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.scopeType != nil {
            map["ScopeType"] = self.scopeType!
        }
        if self.scopeValue != nil {
            map["ScopeValue"] = self.scopeValue!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Category"] as? String {
            self.category = value
        }
        if let value = dict["EffectiveTime"] as? String {
            self.effectiveTime = value
        }
        if let value = dict["EnableEndTime"] as? String {
            self.enableEndTime = value
        }
        if let value = dict["EnableStartTime"] as? String {
            self.enableStartTime = value
        }
        if let value = dict["Id"] as? String {
            self.id = value
        }
        if let value = dict["Instances"] as? [String] {
            self.instances = value
        }
        if let value = dict["Metrics"] as? [Any?] {
            var tmp : [ModifyMetricRuleBlackListRequest.Metrics] = []
            for v in value {
                if v != nil {
                    var model = ModifyMetricRuleBlackListRequest.Metrics()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.metrics = tmp
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["Namespace"] as? String {
            self.namespace = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ScopeType"] as? String {
            self.scopeType = value
        }
        if let value = dict["ScopeValue"] as? String {
            self.scopeValue = value
        }
    }
}

public class ModifyMetricRuleBlackListResponseBody : Tea.TeaModel {
    public var code: String?

    public var count: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.count != nil {
            map["Count"] = self.count!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Count"] as? String {
            self.count = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ModifyMetricRuleBlackListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyMetricRuleBlackListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyMetricRuleBlackListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyMetricRuleTemplateRequest : Tea.TeaModel {
    public class AlertTemplates : Tea.TeaModel {
        public class Escalations : Tea.TeaModel {
            public class Critical : Tea.TeaModel {
                public var comparisonOperator: String?

                public var n: Int32?

                public var statistics: String?

                public var threshold: String?

                public var times: Int32?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.comparisonOperator != nil {
                        map["ComparisonOperator"] = self.comparisonOperator!
                    }
                    if self.n != nil {
                        map["N"] = self.n!
                    }
                    if self.statistics != nil {
                        map["Statistics"] = self.statistics!
                    }
                    if self.threshold != nil {
                        map["Threshold"] = self.threshold!
                    }
                    if self.times != nil {
                        map["Times"] = self.times!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["ComparisonOperator"] as? String {
                        self.comparisonOperator = value
                    }
                    if let value = dict["N"] as? Int32 {
                        self.n = value
                    }
                    if let value = dict["Statistics"] as? String {
                        self.statistics = value
                    }
                    if let value = dict["Threshold"] as? String {
                        self.threshold = value
                    }
                    if let value = dict["Times"] as? Int32 {
                        self.times = value
                    }
                }
            }
            public class Info : Tea.TeaModel {
                public var comparisonOperator: String?

                public var n: Int32?

                public var statistics: String?

                public var threshold: String?

                public var times: Int32?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.comparisonOperator != nil {
                        map["ComparisonOperator"] = self.comparisonOperator!
                    }
                    if self.n != nil {
                        map["N"] = self.n!
                    }
                    if self.statistics != nil {
                        map["Statistics"] = self.statistics!
                    }
                    if self.threshold != nil {
                        map["Threshold"] = self.threshold!
                    }
                    if self.times != nil {
                        map["Times"] = self.times!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["ComparisonOperator"] as? String {
                        self.comparisonOperator = value
                    }
                    if let value = dict["N"] as? Int32 {
                        self.n = value
                    }
                    if let value = dict["Statistics"] as? String {
                        self.statistics = value
                    }
                    if let value = dict["Threshold"] as? String {
                        self.threshold = value
                    }
                    if let value = dict["Times"] as? Int32 {
                        self.times = value
                    }
                }
            }
            public class Warn : Tea.TeaModel {
                public var comparisonOperator: String?

                public var n: Int32?

                public var statistics: String?

                public var threshold: String?

                public var times: Int32?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.comparisonOperator != nil {
                        map["ComparisonOperator"] = self.comparisonOperator!
                    }
                    if self.n != nil {
                        map["N"] = self.n!
                    }
                    if self.statistics != nil {
                        map["Statistics"] = self.statistics!
                    }
                    if self.threshold != nil {
                        map["Threshold"] = self.threshold!
                    }
                    if self.times != nil {
                        map["Times"] = self.times!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["ComparisonOperator"] as? String {
                        self.comparisonOperator = value
                    }
                    if let value = dict["N"] as? Int32 {
                        self.n = value
                    }
                    if let value = dict["Statistics"] as? String {
                        self.statistics = value
                    }
                    if let value = dict["Threshold"] as? String {
                        self.threshold = value
                    }
                    if let value = dict["Times"] as? Int32 {
                        self.times = value
                    }
                }
            }
            public var critical: ModifyMetricRuleTemplateRequest.AlertTemplates.Escalations.Critical?

            public var info: ModifyMetricRuleTemplateRequest.AlertTemplates.Escalations.Info?

            public var warn: ModifyMetricRuleTemplateRequest.AlertTemplates.Escalations.Warn?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.critical?.validate()
                try self.info?.validate()
                try self.warn?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.critical != nil {
                    map["Critical"] = self.critical?.toMap()
                }
                if self.info != nil {
                    map["Info"] = self.info?.toMap()
                }
                if self.warn != nil {
                    map["Warn"] = self.warn?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Critical"] as? [String: Any?] {
                    var model = ModifyMetricRuleTemplateRequest.AlertTemplates.Escalations.Critical()
                    model.fromMap(value)
                    self.critical = model
                }
                if let value = dict["Info"] as? [String: Any?] {
                    var model = ModifyMetricRuleTemplateRequest.AlertTemplates.Escalations.Info()
                    model.fromMap(value)
                    self.info = model
                }
                if let value = dict["Warn"] as? [String: Any?] {
                    var model = ModifyMetricRuleTemplateRequest.AlertTemplates.Escalations.Warn()
                    model.fromMap(value)
                    self.warn = model
                }
            }
        }
        public var escalations: ModifyMetricRuleTemplateRequest.AlertTemplates.Escalations?

        public var category: String?

        public var metricName: String?

        public var namespace: String?

        public var period: Int32?

        public var ruleName: String?

        public var selector: String?

        public var webhook: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.escalations?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.escalations != nil {
                map["Escalations"] = self.escalations?.toMap()
            }
            if self.category != nil {
                map["Category"] = self.category!
            }
            if self.metricName != nil {
                map["MetricName"] = self.metricName!
            }
            if self.namespace != nil {
                map["Namespace"] = self.namespace!
            }
            if self.period != nil {
                map["Period"] = self.period!
            }
            if self.ruleName != nil {
                map["RuleName"] = self.ruleName!
            }
            if self.selector != nil {
                map["Selector"] = self.selector!
            }
            if self.webhook != nil {
                map["Webhook"] = self.webhook!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Escalations"] as? [String: Any?] {
                var model = ModifyMetricRuleTemplateRequest.AlertTemplates.Escalations()
                model.fromMap(value)
                self.escalations = model
            }
            if let value = dict["Category"] as? String {
                self.category = value
            }
            if let value = dict["MetricName"] as? String {
                self.metricName = value
            }
            if let value = dict["Namespace"] as? String {
                self.namespace = value
            }
            if let value = dict["Period"] as? Int32 {
                self.period = value
            }
            if let value = dict["RuleName"] as? String {
                self.ruleName = value
            }
            if let value = dict["Selector"] as? String {
                self.selector = value
            }
            if let value = dict["Webhook"] as? String {
                self.webhook = value
            }
        }
    }
    public var alertTemplates: [ModifyMetricRuleTemplateRequest.AlertTemplates]?

    public var description_: String?

    public var name: String?

    public var regionId: String?

    public var restVersion: Int64?

    public var templateId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.alertTemplates != nil {
            var tmp : [Any] = []
            for k in self.alertTemplates! {
                tmp.append(k.toMap())
            }
            map["AlertTemplates"] = tmp
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.restVersion != nil {
            map["RestVersion"] = self.restVersion!
        }
        if self.templateId != nil {
            map["TemplateId"] = self.templateId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AlertTemplates"] as? [Any?] {
            var tmp : [ModifyMetricRuleTemplateRequest.AlertTemplates] = []
            for v in value {
                if v != nil {
                    var model = ModifyMetricRuleTemplateRequest.AlertTemplates()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.alertTemplates = tmp
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["RestVersion"] as? Int64 {
            self.restVersion = value
        }
        if let value = dict["TemplateId"] as? Int64 {
            self.templateId = value
        }
    }
}

public class ModifyMetricRuleTemplateResponseBody : Tea.TeaModel {
    public var code: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ModifyMetricRuleTemplateResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyMetricRuleTemplateResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyMetricRuleTemplateResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyMonitorGroupRequest : Tea.TeaModel {
    public var contactGroups: String?

    public var groupId: String?

    public var groupName: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.contactGroups != nil {
            map["ContactGroups"] = self.contactGroups!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.groupName != nil {
            map["GroupName"] = self.groupName!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ContactGroups"] as? String {
            self.contactGroups = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["GroupName"] as? String {
            self.groupName = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class ModifyMonitorGroupResponseBody : Tea.TeaModel {
    public var code: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ModifyMonitorGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyMonitorGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyMonitorGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyMonitorGroupInstancesRequest : Tea.TeaModel {
    public class Instances : Tea.TeaModel {
        public var category: String?

        public var instanceId: String?

        public var instanceName: String?

        public var regionId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.category != nil {
                map["Category"] = self.category!
            }
            if self.instanceId != nil {
                map["InstanceId"] = self.instanceId!
            }
            if self.instanceName != nil {
                map["InstanceName"] = self.instanceName!
            }
            if self.regionId != nil {
                map["RegionId"] = self.regionId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Category"] as? String {
                self.category = value
            }
            if let value = dict["InstanceId"] as? String {
                self.instanceId = value
            }
            if let value = dict["InstanceName"] as? String {
                self.instanceName = value
            }
            if let value = dict["RegionId"] as? String {
                self.regionId = value
            }
        }
    }
    public var groupId: Int64?

    public var instances: [ModifyMonitorGroupInstancesRequest.Instances]?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.instances != nil {
            var tmp : [Any] = []
            for k in self.instances! {
                tmp.append(k.toMap())
            }
            map["Instances"] = tmp
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["GroupId"] as? Int64 {
            self.groupId = value
        }
        if let value = dict["Instances"] as? [Any?] {
            var tmp : [ModifyMonitorGroupInstancesRequest.Instances] = []
            for v in value {
                if v != nil {
                    var model = ModifyMonitorGroupInstancesRequest.Instances()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.instances = tmp
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class ModifyMonitorGroupInstancesResponseBody : Tea.TeaModel {
    public var code: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ModifyMonitorGroupInstancesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyMonitorGroupInstancesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyMonitorGroupInstancesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifySiteMonitorRequest : Tea.TeaModel {
    public var address: String?

    public var alertIds: String?

    public var customSchedule: String?

    public var interval: String?

    public var intervalUnit: String?

    public var ispCities: String?

    public var optionsJson: String?

    public var regionId: String?

    public var taskId: String?

    public var taskName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.address != nil {
            map["Address"] = self.address!
        }
        if self.alertIds != nil {
            map["AlertIds"] = self.alertIds!
        }
        if self.customSchedule != nil {
            map["CustomSchedule"] = self.customSchedule!
        }
        if self.interval != nil {
            map["Interval"] = self.interval!
        }
        if self.intervalUnit != nil {
            map["IntervalUnit"] = self.intervalUnit!
        }
        if self.ispCities != nil {
            map["IspCities"] = self.ispCities!
        }
        if self.optionsJson != nil {
            map["OptionsJson"] = self.optionsJson!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        if self.taskName != nil {
            map["TaskName"] = self.taskName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Address"] as? String {
            self.address = value
        }
        if let value = dict["AlertIds"] as? String {
            self.alertIds = value
        }
        if let value = dict["CustomSchedule"] as? String {
            self.customSchedule = value
        }
        if let value = dict["Interval"] as? String {
            self.interval = value
        }
        if let value = dict["IntervalUnit"] as? String {
            self.intervalUnit = value
        }
        if let value = dict["IspCities"] as? String {
            self.ispCities = value
        }
        if let value = dict["OptionsJson"] as? String {
            self.optionsJson = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["TaskId"] as? String {
            self.taskId = value
        }
        if let value = dict["TaskName"] as? String {
            self.taskName = value
        }
    }
}

public class ModifySiteMonitorResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var count: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.count != nil {
                map["count"] = self.count!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["count"] as? Int32 {
                self.count = value
            }
        }
    }
    public var code: String?

    public var data: ModifySiteMonitorResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ModifySiteMonitorResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? String {
            self.success = value
        }
    }
}

public class ModifySiteMonitorResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifySiteMonitorResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifySiteMonitorResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class PutContactRequest : Tea.TeaModel {
    public class Channels : Tea.TeaModel {
        public var aliIM: String?

        public var dingWebHook: String?

        public var mail: String?

        public var SMS: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.aliIM != nil {
                map["AliIM"] = self.aliIM!
            }
            if self.dingWebHook != nil {
                map["DingWebHook"] = self.dingWebHook!
            }
            if self.mail != nil {
                map["Mail"] = self.mail!
            }
            if self.SMS != nil {
                map["SMS"] = self.SMS!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AliIM"] as? String {
                self.aliIM = value
            }
            if let value = dict["DingWebHook"] as? String {
                self.dingWebHook = value
            }
            if let value = dict["Mail"] as? String {
                self.mail = value
            }
            if let value = dict["SMS"] as? String {
                self.SMS = value
            }
        }
    }
    public var channels: PutContactRequest.Channels?

    public var contactName: String?

    public var describe: String?

    public var lang: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.channels?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.channels != nil {
            map["Channels"] = self.channels?.toMap()
        }
        if self.contactName != nil {
            map["ContactName"] = self.contactName!
        }
        if self.describe != nil {
            map["Describe"] = self.describe!
        }
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Channels"] as? [String: Any?] {
            var model = PutContactRequest.Channels()
            model.fromMap(value)
            self.channels = model
        }
        if let value = dict["ContactName"] as? String {
            self.contactName = value
        }
        if let value = dict["Describe"] as? String {
            self.describe = value
        }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
    }
}

public class PutContactResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class PutContactResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: PutContactResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = PutContactResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class PutContactGroupRequest : Tea.TeaModel {
    public var contactGroupName: String?

    public var contactNames: [String]?

    public var describe: String?

    public var enableSubscribed: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.contactGroupName != nil {
            map["ContactGroupName"] = self.contactGroupName!
        }
        if self.contactNames != nil {
            map["ContactNames"] = self.contactNames!
        }
        if self.describe != nil {
            map["Describe"] = self.describe!
        }
        if self.enableSubscribed != nil {
            map["EnableSubscribed"] = self.enableSubscribed!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ContactGroupName"] as? String {
            self.contactGroupName = value
        }
        if let value = dict["ContactNames"] as? [String] {
            self.contactNames = value
        }
        if let value = dict["Describe"] as? String {
            self.describe = value
        }
        if let value = dict["EnableSubscribed"] as? Bool {
            self.enableSubscribed = value
        }
    }
}

public class PutContactGroupResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class PutContactGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: PutContactGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = PutContactGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class PutCustomEventRequest : Tea.TeaModel {
    public class EventInfo : Tea.TeaModel {
        public var content: String?

        public var eventName: String?

        public var groupId: String?

        public var time: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.content != nil {
                map["Content"] = self.content!
            }
            if self.eventName != nil {
                map["EventName"] = self.eventName!
            }
            if self.groupId != nil {
                map["GroupId"] = self.groupId!
            }
            if self.time != nil {
                map["Time"] = self.time!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Content"] as? String {
                self.content = value
            }
            if let value = dict["EventName"] as? String {
                self.eventName = value
            }
            if let value = dict["GroupId"] as? String {
                self.groupId = value
            }
            if let value = dict["Time"] as? String {
                self.time = value
            }
        }
    }
    public var eventInfo: [PutCustomEventRequest.EventInfo]?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.eventInfo != nil {
            var tmp : [Any] = []
            for k in self.eventInfo! {
                tmp.append(k.toMap())
            }
            map["EventInfo"] = tmp
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EventInfo"] as? [Any?] {
            var tmp : [PutCustomEventRequest.EventInfo] = []
            for v in value {
                if v != nil {
                    var model = PutCustomEventRequest.EventInfo()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.eventInfo = tmp
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class PutCustomEventResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class PutCustomEventResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: PutCustomEventResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = PutCustomEventResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class PutCustomEventRuleRequest : Tea.TeaModel {
    public var contactGroups: String?

    public var effectiveInterval: String?

    public var emailSubject: String?

    public var eventName: String?

    public var groupId: String?

    public var level: String?

    public var period: String?

    public var ruleId: String?

    public var ruleName: String?

    public var threshold: String?

    public var webhook: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.contactGroups != nil {
            map["ContactGroups"] = self.contactGroups!
        }
        if self.effectiveInterval != nil {
            map["EffectiveInterval"] = self.effectiveInterval!
        }
        if self.emailSubject != nil {
            map["EmailSubject"] = self.emailSubject!
        }
        if self.eventName != nil {
            map["EventName"] = self.eventName!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.level != nil {
            map["Level"] = self.level!
        }
        if self.period != nil {
            map["Period"] = self.period!
        }
        if self.ruleId != nil {
            map["RuleId"] = self.ruleId!
        }
        if self.ruleName != nil {
            map["RuleName"] = self.ruleName!
        }
        if self.threshold != nil {
            map["Threshold"] = self.threshold!
        }
        if self.webhook != nil {
            map["Webhook"] = self.webhook!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ContactGroups"] as? String {
            self.contactGroups = value
        }
        if let value = dict["EffectiveInterval"] as? String {
            self.effectiveInterval = value
        }
        if let value = dict["EmailSubject"] as? String {
            self.emailSubject = value
        }
        if let value = dict["EventName"] as? String {
            self.eventName = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["Level"] as? String {
            self.level = value
        }
        if let value = dict["Period"] as? String {
            self.period = value
        }
        if let value = dict["RuleId"] as? String {
            self.ruleId = value
        }
        if let value = dict["RuleName"] as? String {
            self.ruleName = value
        }
        if let value = dict["Threshold"] as? String {
            self.threshold = value
        }
        if let value = dict["Webhook"] as? String {
            self.webhook = value
        }
    }
}

public class PutCustomEventRuleResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class PutCustomEventRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: PutCustomEventRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = PutCustomEventRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class PutCustomMetricRequest : Tea.TeaModel {
    public class MetricList : Tea.TeaModel {
        public var dimensions: String?

        public var groupId: String?

        public var metricName: String?

        public var period: String?

        public var time: String?

        public var type: String?

        public var values: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.dimensions != nil {
                map["Dimensions"] = self.dimensions!
            }
            if self.groupId != nil {
                map["GroupId"] = self.groupId!
            }
            if self.metricName != nil {
                map["MetricName"] = self.metricName!
            }
            if self.period != nil {
                map["Period"] = self.period!
            }
            if self.time != nil {
                map["Time"] = self.time!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            if self.values != nil {
                map["Values"] = self.values!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Dimensions"] as? String {
                self.dimensions = value
            }
            if let value = dict["GroupId"] as? String {
                self.groupId = value
            }
            if let value = dict["MetricName"] as? String {
                self.metricName = value
            }
            if let value = dict["Period"] as? String {
                self.period = value
            }
            if let value = dict["Time"] as? String {
                self.time = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
            if let value = dict["Values"] as? String {
                self.values = value
            }
        }
    }
    public var metricList: [PutCustomMetricRequest.MetricList]?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.metricList != nil {
            var tmp : [Any] = []
            for k in self.metricList! {
                tmp.append(k.toMap())
            }
            map["MetricList"] = tmp
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["MetricList"] as? [Any?] {
            var tmp : [PutCustomMetricRequest.MetricList] = []
            for v in value {
                if v != nil {
                    var model = PutCustomMetricRequest.MetricList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.metricList = tmp
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class PutCustomMetricResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class PutCustomMetricResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: PutCustomMetricResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = PutCustomMetricResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class PutCustomMetricRuleRequest : Tea.TeaModel {
    public var comparisonOperator: String?

    public var contactGroups: String?

    public var effectiveInterval: String?

    public var emailSubject: String?

    public var evaluationCount: Int32?

    public var groupId: String?

    public var level: String?

    public var metricName: String?

    public var period: String?

    public var resources: String?

    public var ruleId: String?

    public var ruleName: String?

    public var silenceTime: Int32?

    public var statistics: String?

    public var threshold: String?

    public var webhook: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.comparisonOperator != nil {
            map["ComparisonOperator"] = self.comparisonOperator!
        }
        if self.contactGroups != nil {
            map["ContactGroups"] = self.contactGroups!
        }
        if self.effectiveInterval != nil {
            map["EffectiveInterval"] = self.effectiveInterval!
        }
        if self.emailSubject != nil {
            map["EmailSubject"] = self.emailSubject!
        }
        if self.evaluationCount != nil {
            map["EvaluationCount"] = self.evaluationCount!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.level != nil {
            map["Level"] = self.level!
        }
        if self.metricName != nil {
            map["MetricName"] = self.metricName!
        }
        if self.period != nil {
            map["Period"] = self.period!
        }
        if self.resources != nil {
            map["Resources"] = self.resources!
        }
        if self.ruleId != nil {
            map["RuleId"] = self.ruleId!
        }
        if self.ruleName != nil {
            map["RuleName"] = self.ruleName!
        }
        if self.silenceTime != nil {
            map["SilenceTime"] = self.silenceTime!
        }
        if self.statistics != nil {
            map["Statistics"] = self.statistics!
        }
        if self.threshold != nil {
            map["Threshold"] = self.threshold!
        }
        if self.webhook != nil {
            map["Webhook"] = self.webhook!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ComparisonOperator"] as? String {
            self.comparisonOperator = value
        }
        if let value = dict["ContactGroups"] as? String {
            self.contactGroups = value
        }
        if let value = dict["EffectiveInterval"] as? String {
            self.effectiveInterval = value
        }
        if let value = dict["EmailSubject"] as? String {
            self.emailSubject = value
        }
        if let value = dict["EvaluationCount"] as? Int32 {
            self.evaluationCount = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["Level"] as? String {
            self.level = value
        }
        if let value = dict["MetricName"] as? String {
            self.metricName = value
        }
        if let value = dict["Period"] as? String {
            self.period = value
        }
        if let value = dict["Resources"] as? String {
            self.resources = value
        }
        if let value = dict["RuleId"] as? String {
            self.ruleId = value
        }
        if let value = dict["RuleName"] as? String {
            self.ruleName = value
        }
        if let value = dict["SilenceTime"] as? Int32 {
            self.silenceTime = value
        }
        if let value = dict["Statistics"] as? String {
            self.statistics = value
        }
        if let value = dict["Threshold"] as? String {
            self.threshold = value
        }
        if let value = dict["Webhook"] as? String {
            self.webhook = value
        }
    }
}

public class PutCustomMetricRuleResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class PutCustomMetricRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: PutCustomMetricRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = PutCustomMetricRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class PutEventRuleRequest : Tea.TeaModel {
    public class EventPattern : Tea.TeaModel {
        public var customFilters: String?

        public var eventTypeList: [String]?

        public var levelList: [String]?

        public var nameList: [String]?

        public var product: String?

        public var SQLFilter: String?

        public var statusList: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.customFilters != nil {
                map["CustomFilters"] = self.customFilters!
            }
            if self.eventTypeList != nil {
                map["EventTypeList"] = self.eventTypeList!
            }
            if self.levelList != nil {
                map["LevelList"] = self.levelList!
            }
            if self.nameList != nil {
                map["NameList"] = self.nameList!
            }
            if self.product != nil {
                map["Product"] = self.product!
            }
            if self.SQLFilter != nil {
                map["SQLFilter"] = self.SQLFilter!
            }
            if self.statusList != nil {
                map["StatusList"] = self.statusList!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CustomFilters"] as? String {
                self.customFilters = value
            }
            if let value = dict["EventTypeList"] as? [String] {
                self.eventTypeList = value
            }
            if let value = dict["LevelList"] as? [String] {
                self.levelList = value
            }
            if let value = dict["NameList"] as? [String] {
                self.nameList = value
            }
            if let value = dict["Product"] as? String {
                self.product = value
            }
            if let value = dict["SQLFilter"] as? String {
                self.SQLFilter = value
            }
            if let value = dict["StatusList"] as? [String] {
                self.statusList = value
            }
        }
    }
    public var description_: String?

    public var eventPattern: [PutEventRuleRequest.EventPattern]?

    public var eventType: String?

    public var groupId: String?

    public var regionId: String?

    public var ruleName: String?

    public var silenceTime: Int64?

    public var state: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.eventPattern != nil {
            var tmp : [Any] = []
            for k in self.eventPattern! {
                tmp.append(k.toMap())
            }
            map["EventPattern"] = tmp
        }
        if self.eventType != nil {
            map["EventType"] = self.eventType!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.ruleName != nil {
            map["RuleName"] = self.ruleName!
        }
        if self.silenceTime != nil {
            map["SilenceTime"] = self.silenceTime!
        }
        if self.state != nil {
            map["State"] = self.state!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["EventPattern"] as? [Any?] {
            var tmp : [PutEventRuleRequest.EventPattern] = []
            for v in value {
                if v != nil {
                    var model = PutEventRuleRequest.EventPattern()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.eventPattern = tmp
        }
        if let value = dict["EventType"] as? String {
            self.eventType = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["RuleName"] as? String {
            self.ruleName = value
        }
        if let value = dict["SilenceTime"] as? Int64 {
            self.silenceTime = value
        }
        if let value = dict["State"] as? String {
            self.state = value
        }
    }
}

public class PutEventRuleResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class PutEventRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: PutEventRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = PutEventRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class PutEventRuleTargetsRequest : Tea.TeaModel {
    public class ContactParameters : Tea.TeaModel {
        public var contactGroupName: String?

        public var id: String?

        public var level: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.contactGroupName != nil {
                map["ContactGroupName"] = self.contactGroupName!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.level != nil {
                map["Level"] = self.level!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ContactGroupName"] as? String {
                self.contactGroupName = value
            }
            if let value = dict["Id"] as? String {
                self.id = value
            }
            if let value = dict["Level"] as? String {
                self.level = value
            }
        }
    }
    public class FcParameters : Tea.TeaModel {
        public var functionName: String?

        public var id: String?

        public var region: String?

        public var serviceName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.functionName != nil {
                map["FunctionName"] = self.functionName!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.region != nil {
                map["Region"] = self.region!
            }
            if self.serviceName != nil {
                map["ServiceName"] = self.serviceName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["FunctionName"] as? String {
                self.functionName = value
            }
            if let value = dict["Id"] as? String {
                self.id = value
            }
            if let value = dict["Region"] as? String {
                self.region = value
            }
            if let value = dict["ServiceName"] as? String {
                self.serviceName = value
            }
        }
    }
    public class MnsParameters : Tea.TeaModel {
        public var id: String?

        public var queue: String?

        public var region: String?

        public var topic: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.queue != nil {
                map["Queue"] = self.queue!
            }
            if self.region != nil {
                map["Region"] = self.region!
            }
            if self.topic != nil {
                map["Topic"] = self.topic!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Id"] as? String {
                self.id = value
            }
            if let value = dict["Queue"] as? String {
                self.queue = value
            }
            if let value = dict["Region"] as? String {
                self.region = value
            }
            if let value = dict["Topic"] as? String {
                self.topic = value
            }
        }
    }
    public class OpenApiParameters : Tea.TeaModel {
        public var action: String?

        public var arn: String?

        public var id: String?

        public var jsonParams: String?

        public var product: String?

        public var region: String?

        public var role: String?

        public var version: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.action != nil {
                map["Action"] = self.action!
            }
            if self.arn != nil {
                map["Arn"] = self.arn!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.jsonParams != nil {
                map["JsonParams"] = self.jsonParams!
            }
            if self.product != nil {
                map["Product"] = self.product!
            }
            if self.region != nil {
                map["Region"] = self.region!
            }
            if self.role != nil {
                map["Role"] = self.role!
            }
            if self.version != nil {
                map["Version"] = self.version!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Action"] as? String {
                self.action = value
            }
            if let value = dict["Arn"] as? String {
                self.arn = value
            }
            if let value = dict["Id"] as? String {
                self.id = value
            }
            if let value = dict["JsonParams"] as? String {
                self.jsonParams = value
            }
            if let value = dict["Product"] as? String {
                self.product = value
            }
            if let value = dict["Region"] as? String {
                self.region = value
            }
            if let value = dict["Role"] as? String {
                self.role = value
            }
            if let value = dict["Version"] as? String {
                self.version = value
            }
        }
    }
    public class SlsParameters : Tea.TeaModel {
        public var id: String?

        public var logStore: String?

        public var project: String?

        public var region: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.logStore != nil {
                map["LogStore"] = self.logStore!
            }
            if self.project != nil {
                map["Project"] = self.project!
            }
            if self.region != nil {
                map["Region"] = self.region!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Id"] as? String {
                self.id = value
            }
            if let value = dict["LogStore"] as? String {
                self.logStore = value
            }
            if let value = dict["Project"] as? String {
                self.project = value
            }
            if let value = dict["Region"] as? String {
                self.region = value
            }
        }
    }
    public class WebhookParameters : Tea.TeaModel {
        public var id: String?

        public var method: String?

        public var protocol_: String?

        public var url: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.method != nil {
                map["Method"] = self.method!
            }
            if self.protocol_ != nil {
                map["Protocol"] = self.protocol_!
            }
            if self.url != nil {
                map["Url"] = self.url!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Id"] as? String {
                self.id = value
            }
            if let value = dict["Method"] as? String {
                self.method = value
            }
            if let value = dict["Protocol"] as? String {
                self.protocol_ = value
            }
            if let value = dict["Url"] as? String {
                self.url = value
            }
        }
    }
    public var contactParameters: [PutEventRuleTargetsRequest.ContactParameters]?

    public var fcParameters: [PutEventRuleTargetsRequest.FcParameters]?

    public var mnsParameters: [PutEventRuleTargetsRequest.MnsParameters]?

    public var openApiParameters: [PutEventRuleTargetsRequest.OpenApiParameters]?

    public var regionId: String?

    public var ruleName: String?

    public var slsParameters: [PutEventRuleTargetsRequest.SlsParameters]?

    public var webhookParameters: [PutEventRuleTargetsRequest.WebhookParameters]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.contactParameters != nil {
            var tmp : [Any] = []
            for k in self.contactParameters! {
                tmp.append(k.toMap())
            }
            map["ContactParameters"] = tmp
        }
        if self.fcParameters != nil {
            var tmp : [Any] = []
            for k in self.fcParameters! {
                tmp.append(k.toMap())
            }
            map["FcParameters"] = tmp
        }
        if self.mnsParameters != nil {
            var tmp : [Any] = []
            for k in self.mnsParameters! {
                tmp.append(k.toMap())
            }
            map["MnsParameters"] = tmp
        }
        if self.openApiParameters != nil {
            var tmp : [Any] = []
            for k in self.openApiParameters! {
                tmp.append(k.toMap())
            }
            map["OpenApiParameters"] = tmp
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.ruleName != nil {
            map["RuleName"] = self.ruleName!
        }
        if self.slsParameters != nil {
            var tmp : [Any] = []
            for k in self.slsParameters! {
                tmp.append(k.toMap())
            }
            map["SlsParameters"] = tmp
        }
        if self.webhookParameters != nil {
            var tmp : [Any] = []
            for k in self.webhookParameters! {
                tmp.append(k.toMap())
            }
            map["WebhookParameters"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ContactParameters"] as? [Any?] {
            var tmp : [PutEventRuleTargetsRequest.ContactParameters] = []
            for v in value {
                if v != nil {
                    var model = PutEventRuleTargetsRequest.ContactParameters()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.contactParameters = tmp
        }
        if let value = dict["FcParameters"] as? [Any?] {
            var tmp : [PutEventRuleTargetsRequest.FcParameters] = []
            for v in value {
                if v != nil {
                    var model = PutEventRuleTargetsRequest.FcParameters()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.fcParameters = tmp
        }
        if let value = dict["MnsParameters"] as? [Any?] {
            var tmp : [PutEventRuleTargetsRequest.MnsParameters] = []
            for v in value {
                if v != nil {
                    var model = PutEventRuleTargetsRequest.MnsParameters()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.mnsParameters = tmp
        }
        if let value = dict["OpenApiParameters"] as? [Any?] {
            var tmp : [PutEventRuleTargetsRequest.OpenApiParameters] = []
            for v in value {
                if v != nil {
                    var model = PutEventRuleTargetsRequest.OpenApiParameters()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.openApiParameters = tmp
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["RuleName"] as? String {
            self.ruleName = value
        }
        if let value = dict["SlsParameters"] as? [Any?] {
            var tmp : [PutEventRuleTargetsRequest.SlsParameters] = []
            for v in value {
                if v != nil {
                    var model = PutEventRuleTargetsRequest.SlsParameters()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.slsParameters = tmp
        }
        if let value = dict["WebhookParameters"] as? [Any?] {
            var tmp : [PutEventRuleTargetsRequest.WebhookParameters] = []
            for v in value {
                if v != nil {
                    var model = PutEventRuleTargetsRequest.WebhookParameters()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.webhookParameters = tmp
        }
    }
}

public class PutEventRuleTargetsResponseBody : Tea.TeaModel {
    public class FailedContactParameters : Tea.TeaModel {
        public class ContactParameter : Tea.TeaModel {
            public var contactGroupName: String?

            public var id: Int32?

            public var level: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.contactGroupName != nil {
                    map["ContactGroupName"] = self.contactGroupName!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.level != nil {
                    map["Level"] = self.level!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ContactGroupName"] as? String {
                    self.contactGroupName = value
                }
                if let value = dict["Id"] as? Int32 {
                    self.id = value
                }
                if let value = dict["Level"] as? String {
                    self.level = value
                }
            }
        }
        public var contactParameter: [PutEventRuleTargetsResponseBody.FailedContactParameters.ContactParameter]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.contactParameter != nil {
                var tmp : [Any] = []
                for k in self.contactParameter! {
                    tmp.append(k.toMap())
                }
                map["ContactParameter"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ContactParameter"] as? [Any?] {
                var tmp : [PutEventRuleTargetsResponseBody.FailedContactParameters.ContactParameter] = []
                for v in value {
                    if v != nil {
                        var model = PutEventRuleTargetsResponseBody.FailedContactParameters.ContactParameter()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.contactParameter = tmp
            }
        }
    }
    public class FailedFcParameters : Tea.TeaModel {
        public class FcParameter : Tea.TeaModel {
            public var functionName: String?

            public var id: Int32?

            public var region: String?

            public var serviceName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.functionName != nil {
                    map["FunctionName"] = self.functionName!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.region != nil {
                    map["Region"] = self.region!
                }
                if self.serviceName != nil {
                    map["ServiceName"] = self.serviceName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["FunctionName"] as? String {
                    self.functionName = value
                }
                if let value = dict["Id"] as? Int32 {
                    self.id = value
                }
                if let value = dict["Region"] as? String {
                    self.region = value
                }
                if let value = dict["ServiceName"] as? String {
                    self.serviceName = value
                }
            }
        }
        public var fcParameter: [PutEventRuleTargetsResponseBody.FailedFcParameters.FcParameter]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.fcParameter != nil {
                var tmp : [Any] = []
                for k in self.fcParameter! {
                    tmp.append(k.toMap())
                }
                map["FcParameter"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["FcParameter"] as? [Any?] {
                var tmp : [PutEventRuleTargetsResponseBody.FailedFcParameters.FcParameter] = []
                for v in value {
                    if v != nil {
                        var model = PutEventRuleTargetsResponseBody.FailedFcParameters.FcParameter()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.fcParameter = tmp
            }
        }
    }
    public class FailedMnsParameters : Tea.TeaModel {
        public class MnsParameter : Tea.TeaModel {
            public var id: Int32?

            public var queue: String?

            public var region: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.queue != nil {
                    map["Queue"] = self.queue!
                }
                if self.region != nil {
                    map["Region"] = self.region!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Id"] as? Int32 {
                    self.id = value
                }
                if let value = dict["Queue"] as? String {
                    self.queue = value
                }
                if let value = dict["Region"] as? String {
                    self.region = value
                }
            }
        }
        public var mnsParameter: [PutEventRuleTargetsResponseBody.FailedMnsParameters.MnsParameter]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.mnsParameter != nil {
                var tmp : [Any] = []
                for k in self.mnsParameter! {
                    tmp.append(k.toMap())
                }
                map["MnsParameter"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["MnsParameter"] as? [Any?] {
                var tmp : [PutEventRuleTargetsResponseBody.FailedMnsParameters.MnsParameter] = []
                for v in value {
                    if v != nil {
                        var model = PutEventRuleTargetsResponseBody.FailedMnsParameters.MnsParameter()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.mnsParameter = tmp
            }
        }
    }
    public var code: String?

    public var failedContactParameters: PutEventRuleTargetsResponseBody.FailedContactParameters?

    public var failedFcParameters: PutEventRuleTargetsResponseBody.FailedFcParameters?

    public var failedMnsParameters: PutEventRuleTargetsResponseBody.FailedMnsParameters?

    public var failedParameterCount: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.failedContactParameters?.validate()
        try self.failedFcParameters?.validate()
        try self.failedMnsParameters?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.failedContactParameters != nil {
            map["FailedContactParameters"] = self.failedContactParameters?.toMap()
        }
        if self.failedFcParameters != nil {
            map["FailedFcParameters"] = self.failedFcParameters?.toMap()
        }
        if self.failedMnsParameters != nil {
            map["FailedMnsParameters"] = self.failedMnsParameters?.toMap()
        }
        if self.failedParameterCount != nil {
            map["FailedParameterCount"] = self.failedParameterCount!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["FailedContactParameters"] as? [String: Any?] {
            var model = PutEventRuleTargetsResponseBody.FailedContactParameters()
            model.fromMap(value)
            self.failedContactParameters = model
        }
        if let value = dict["FailedFcParameters"] as? [String: Any?] {
            var model = PutEventRuleTargetsResponseBody.FailedFcParameters()
            model.fromMap(value)
            self.failedFcParameters = model
        }
        if let value = dict["FailedMnsParameters"] as? [String: Any?] {
            var model = PutEventRuleTargetsResponseBody.FailedMnsParameters()
            model.fromMap(value)
            self.failedMnsParameters = model
        }
        if let value = dict["FailedParameterCount"] as? String {
            self.failedParameterCount = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class PutEventRuleTargetsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: PutEventRuleTargetsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = PutEventRuleTargetsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class PutExporterOutputRequest : Tea.TeaModel {
    public var configJson: String?

    public var desc: String?

    public var destName: String?

    public var destType: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configJson != nil {
            map["ConfigJson"] = self.configJson!
        }
        if self.desc != nil {
            map["Desc"] = self.desc!
        }
        if self.destName != nil {
            map["DestName"] = self.destName!
        }
        if self.destType != nil {
            map["DestType"] = self.destType!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConfigJson"] as? String {
            self.configJson = value
        }
        if let value = dict["Desc"] as? String {
            self.desc = value
        }
        if let value = dict["DestName"] as? String {
            self.destName = value
        }
        if let value = dict["DestType"] as? String {
            self.destType = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class PutExporterOutputResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class PutExporterOutputResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: PutExporterOutputResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = PutExporterOutputResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class PutExporterRuleRequest : Tea.TeaModel {
    public var describe: String?

    public var dstNames: [String]?

    public var metricName: String?

    public var namespace: String?

    public var regionId: String?

    public var ruleName: String?

    public var targetWindows: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.describe != nil {
            map["Describe"] = self.describe!
        }
        if self.dstNames != nil {
            map["DstNames"] = self.dstNames!
        }
        if self.metricName != nil {
            map["MetricName"] = self.metricName!
        }
        if self.namespace != nil {
            map["Namespace"] = self.namespace!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.ruleName != nil {
            map["RuleName"] = self.ruleName!
        }
        if self.targetWindows != nil {
            map["TargetWindows"] = self.targetWindows!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Describe"] as? String {
            self.describe = value
        }
        if let value = dict["DstNames"] as? [String] {
            self.dstNames = value
        }
        if let value = dict["MetricName"] as? String {
            self.metricName = value
        }
        if let value = dict["Namespace"] as? String {
            self.namespace = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["RuleName"] as? String {
            self.ruleName = value
        }
        if let value = dict["TargetWindows"] as? String {
            self.targetWindows = value
        }
    }
}

public class PutExporterRuleResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class PutExporterRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: PutExporterRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = PutExporterRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class PutGroupMetricRuleRequest : Tea.TeaModel {
    public class Escalations : Tea.TeaModel {
        public class Critical : Tea.TeaModel {
            public var comparisonOperator: String?

            public var statistics: String?

            public var threshold: String?

            public var times: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.comparisonOperator != nil {
                    map["ComparisonOperator"] = self.comparisonOperator!
                }
                if self.statistics != nil {
                    map["Statistics"] = self.statistics!
                }
                if self.threshold != nil {
                    map["Threshold"] = self.threshold!
                }
                if self.times != nil {
                    map["Times"] = self.times!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ComparisonOperator"] as? String {
                    self.comparisonOperator = value
                }
                if let value = dict["Statistics"] as? String {
                    self.statistics = value
                }
                if let value = dict["Threshold"] as? String {
                    self.threshold = value
                }
                if let value = dict["Times"] as? Int32 {
                    self.times = value
                }
            }
        }
        public class Info : Tea.TeaModel {
            public var comparisonOperator: String?

            public var statistics: String?

            public var threshold: String?

            public var times: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.comparisonOperator != nil {
                    map["ComparisonOperator"] = self.comparisonOperator!
                }
                if self.statistics != nil {
                    map["Statistics"] = self.statistics!
                }
                if self.threshold != nil {
                    map["Threshold"] = self.threshold!
                }
                if self.times != nil {
                    map["Times"] = self.times!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ComparisonOperator"] as? String {
                    self.comparisonOperator = value
                }
                if let value = dict["Statistics"] as? String {
                    self.statistics = value
                }
                if let value = dict["Threshold"] as? String {
                    self.threshold = value
                }
                if let value = dict["Times"] as? Int32 {
                    self.times = value
                }
            }
        }
        public class Warn : Tea.TeaModel {
            public var comparisonOperator: String?

            public var statistics: String?

            public var threshold: String?

            public var times: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.comparisonOperator != nil {
                    map["ComparisonOperator"] = self.comparisonOperator!
                }
                if self.statistics != nil {
                    map["Statistics"] = self.statistics!
                }
                if self.threshold != nil {
                    map["Threshold"] = self.threshold!
                }
                if self.times != nil {
                    map["Times"] = self.times!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ComparisonOperator"] as? String {
                    self.comparisonOperator = value
                }
                if let value = dict["Statistics"] as? String {
                    self.statistics = value
                }
                if let value = dict["Threshold"] as? String {
                    self.threshold = value
                }
                if let value = dict["Times"] as? Int32 {
                    self.times = value
                }
            }
        }
        public var critical: PutGroupMetricRuleRequest.Escalations.Critical?

        public var info: PutGroupMetricRuleRequest.Escalations.Info?

        public var warn: PutGroupMetricRuleRequest.Escalations.Warn?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.critical?.validate()
            try self.info?.validate()
            try self.warn?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.critical != nil {
                map["Critical"] = self.critical?.toMap()
            }
            if self.info != nil {
                map["Info"] = self.info?.toMap()
            }
            if self.warn != nil {
                map["Warn"] = self.warn?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Critical"] as? [String: Any?] {
                var model = PutGroupMetricRuleRequest.Escalations.Critical()
                model.fromMap(value)
                self.critical = model
            }
            if let value = dict["Info"] as? [String: Any?] {
                var model = PutGroupMetricRuleRequest.Escalations.Info()
                model.fromMap(value)
                self.info = model
            }
            if let value = dict["Warn"] as? [String: Any?] {
                var model = PutGroupMetricRuleRequest.Escalations.Warn()
                model.fromMap(value)
                self.warn = model
            }
        }
    }
    public class Labels : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var escalations: PutGroupMetricRuleRequest.Escalations?

    public var category: String?

    public var contactGroups: String?

    public var dimensions: String?

    public var effectiveInterval: String?

    public var emailSubject: String?

    public var extraDimensionJson: String?

    public var groupId: String?

    public var interval: String?

    public var labels: [PutGroupMetricRuleRequest.Labels]?

    public var metricName: String?

    public var namespace: String?

    public var noDataPolicy: String?

    public var noEffectiveInterval: String?

    public var options: String?

    public var period: String?

    public var ruleId: String?

    public var ruleName: String?

    public var silenceTime: Int32?

    public var webhook: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.escalations?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.escalations != nil {
            map["Escalations"] = self.escalations?.toMap()
        }
        if self.category != nil {
            map["Category"] = self.category!
        }
        if self.contactGroups != nil {
            map["ContactGroups"] = self.contactGroups!
        }
        if self.dimensions != nil {
            map["Dimensions"] = self.dimensions!
        }
        if self.effectiveInterval != nil {
            map["EffectiveInterval"] = self.effectiveInterval!
        }
        if self.emailSubject != nil {
            map["EmailSubject"] = self.emailSubject!
        }
        if self.extraDimensionJson != nil {
            map["ExtraDimensionJson"] = self.extraDimensionJson!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.interval != nil {
            map["Interval"] = self.interval!
        }
        if self.labels != nil {
            var tmp : [Any] = []
            for k in self.labels! {
                tmp.append(k.toMap())
            }
            map["Labels"] = tmp
        }
        if self.metricName != nil {
            map["MetricName"] = self.metricName!
        }
        if self.namespace != nil {
            map["Namespace"] = self.namespace!
        }
        if self.noDataPolicy != nil {
            map["NoDataPolicy"] = self.noDataPolicy!
        }
        if self.noEffectiveInterval != nil {
            map["NoEffectiveInterval"] = self.noEffectiveInterval!
        }
        if self.options != nil {
            map["Options"] = self.options!
        }
        if self.period != nil {
            map["Period"] = self.period!
        }
        if self.ruleId != nil {
            map["RuleId"] = self.ruleId!
        }
        if self.ruleName != nil {
            map["RuleName"] = self.ruleName!
        }
        if self.silenceTime != nil {
            map["SilenceTime"] = self.silenceTime!
        }
        if self.webhook != nil {
            map["Webhook"] = self.webhook!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Escalations"] as? [String: Any?] {
            var model = PutGroupMetricRuleRequest.Escalations()
            model.fromMap(value)
            self.escalations = model
        }
        if let value = dict["Category"] as? String {
            self.category = value
        }
        if let value = dict["ContactGroups"] as? String {
            self.contactGroups = value
        }
        if let value = dict["Dimensions"] as? String {
            self.dimensions = value
        }
        if let value = dict["EffectiveInterval"] as? String {
            self.effectiveInterval = value
        }
        if let value = dict["EmailSubject"] as? String {
            self.emailSubject = value
        }
        if let value = dict["ExtraDimensionJson"] as? String {
            self.extraDimensionJson = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["Interval"] as? String {
            self.interval = value
        }
        if let value = dict["Labels"] as? [Any?] {
            var tmp : [PutGroupMetricRuleRequest.Labels] = []
            for v in value {
                if v != nil {
                    var model = PutGroupMetricRuleRequest.Labels()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.labels = tmp
        }
        if let value = dict["MetricName"] as? String {
            self.metricName = value
        }
        if let value = dict["Namespace"] as? String {
            self.namespace = value
        }
        if let value = dict["NoDataPolicy"] as? String {
            self.noDataPolicy = value
        }
        if let value = dict["NoEffectiveInterval"] as? String {
            self.noEffectiveInterval = value
        }
        if let value = dict["Options"] as? String {
            self.options = value
        }
        if let value = dict["Period"] as? String {
            self.period = value
        }
        if let value = dict["RuleId"] as? String {
            self.ruleId = value
        }
        if let value = dict["RuleName"] as? String {
            self.ruleName = value
        }
        if let value = dict["SilenceTime"] as? Int32 {
            self.silenceTime = value
        }
        if let value = dict["Webhook"] as? String {
            self.webhook = value
        }
    }
}

public class PutGroupMetricRuleResponseBody : Tea.TeaModel {
    public class Result : Tea.TeaModel {
        public var ruleId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.ruleId != nil {
                map["RuleId"] = self.ruleId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["RuleId"] as? String {
                self.ruleId = value
            }
        }
    }
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var result: PutGroupMetricRuleResponseBody.Result?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.result?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.result != nil {
            map["Result"] = self.result?.toMap()
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Result"] as? [String: Any?] {
            var model = PutGroupMetricRuleResponseBody.Result()
            model.fromMap(value)
            self.result = model
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class PutGroupMetricRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: PutGroupMetricRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = PutGroupMetricRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class PutHybridMonitorMetricDataRequest : Tea.TeaModel {
    public class MetricList : Tea.TeaModel {
        public class Labels : Tea.TeaModel {
            public var key: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.key != nil {
                    map["Key"] = self.key!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Key"] as? String {
                    self.key = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public var labels: [PutHybridMonitorMetricDataRequest.MetricList.Labels]?

        public var name: String?

        public var TS: Int64?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.labels != nil {
                var tmp : [Any] = []
                for k in self.labels! {
                    tmp.append(k.toMap())
                }
                map["Labels"] = tmp
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.TS != nil {
                map["TS"] = self.TS!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Labels"] as? [Any?] {
                var tmp : [PutHybridMonitorMetricDataRequest.MetricList.Labels] = []
                for v in value {
                    if v != nil {
                        var model = PutHybridMonitorMetricDataRequest.MetricList.Labels()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.labels = tmp
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["TS"] as? Int64 {
                self.TS = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var metricList: [PutHybridMonitorMetricDataRequest.MetricList]?

    public var namespace: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.metricList != nil {
            var tmp : [Any] = []
            for k in self.metricList! {
                tmp.append(k.toMap())
            }
            map["MetricList"] = tmp
        }
        if self.namespace != nil {
            map["Namespace"] = self.namespace!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["MetricList"] as? [Any?] {
            var tmp : [PutHybridMonitorMetricDataRequest.MetricList] = []
            for v in value {
                if v != nil {
                    var model = PutHybridMonitorMetricDataRequest.MetricList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.metricList = tmp
        }
        if let value = dict["Namespace"] as? String {
            self.namespace = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class PutHybridMonitorMetricDataResponseBody : Tea.TeaModel {
    public class ErrorDetail : Tea.TeaModel {
        public var errorMessage: String?

        public var index: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.errorMessage != nil {
                map["ErrorMessage"] = self.errorMessage!
            }
            if self.index != nil {
                map["Index"] = self.index!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ErrorMessage"] as? String {
                self.errorMessage = value
            }
            if let value = dict["Index"] as? Int64 {
                self.index = value
            }
        }
    }
    public var code: String?

    public var errorDetail: [PutHybridMonitorMetricDataResponseBody.ErrorDetail]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.errorDetail != nil {
            var tmp : [Any] = []
            for k in self.errorDetail! {
                tmp.append(k.toMap())
            }
            map["ErrorDetail"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["ErrorDetail"] as? [Any?] {
            var tmp : [PutHybridMonitorMetricDataResponseBody.ErrorDetail] = []
            for v in value {
                if v != nil {
                    var model = PutHybridMonitorMetricDataResponseBody.ErrorDetail()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.errorDetail = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class PutHybridMonitorMetricDataResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: PutHybridMonitorMetricDataResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = PutHybridMonitorMetricDataResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class PutLogMonitorRequest : Tea.TeaModel {
    public class Aggregates : Tea.TeaModel {
        public var alias: String?

        public var fieldName: String?

        public var function: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.alias != nil {
                map["Alias"] = self.alias!
            }
            if self.fieldName != nil {
                map["FieldName"] = self.fieldName!
            }
            if self.function != nil {
                map["Function"] = self.function!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Alias"] as? String {
                self.alias = value
            }
            if let value = dict["FieldName"] as? String {
                self.fieldName = value
            }
            if let value = dict["Function"] as? String {
                self.function = value
            }
        }
    }
    public class Groupbys : Tea.TeaModel {
        public var alias: String?

        public var fieldName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.alias != nil {
                map["Alias"] = self.alias!
            }
            if self.fieldName != nil {
                map["FieldName"] = self.fieldName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Alias"] as? String {
                self.alias = value
            }
            if let value = dict["FieldName"] as? String {
                self.fieldName = value
            }
        }
    }
    public class ValueFilter : Tea.TeaModel {
        public var key: String?

        public var operator_: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.operator_ != nil {
                map["Operator"] = self.operator_!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Operator"] as? String {
                self.operator_ = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var aggregates: [PutLogMonitorRequest.Aggregates]?

    public var groupId: String?

    public var groupbys: [PutLogMonitorRequest.Groupbys]?

    public var logId: String?

    public var metricExpress: String?

    public var metricName: String?

    public var regionId: String?

    public var slsLogstore: String?

    public var slsProject: String?

    public var slsRegionId: String?

    public var tumblingwindows: String?

    public var unit: String?

    public var valueFilter: [PutLogMonitorRequest.ValueFilter]?

    public var valueFilterRelation: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.aggregates != nil {
            var tmp : [Any] = []
            for k in self.aggregates! {
                tmp.append(k.toMap())
            }
            map["Aggregates"] = tmp
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.groupbys != nil {
            var tmp : [Any] = []
            for k in self.groupbys! {
                tmp.append(k.toMap())
            }
            map["Groupbys"] = tmp
        }
        if self.logId != nil {
            map["LogId"] = self.logId!
        }
        if self.metricExpress != nil {
            map["MetricExpress"] = self.metricExpress!
        }
        if self.metricName != nil {
            map["MetricName"] = self.metricName!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.slsLogstore != nil {
            map["SlsLogstore"] = self.slsLogstore!
        }
        if self.slsProject != nil {
            map["SlsProject"] = self.slsProject!
        }
        if self.slsRegionId != nil {
            map["SlsRegionId"] = self.slsRegionId!
        }
        if self.tumblingwindows != nil {
            map["Tumblingwindows"] = self.tumblingwindows!
        }
        if self.unit != nil {
            map["Unit"] = self.unit!
        }
        if self.valueFilter != nil {
            var tmp : [Any] = []
            for k in self.valueFilter! {
                tmp.append(k.toMap())
            }
            map["ValueFilter"] = tmp
        }
        if self.valueFilterRelation != nil {
            map["ValueFilterRelation"] = self.valueFilterRelation!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Aggregates"] as? [Any?] {
            var tmp : [PutLogMonitorRequest.Aggregates] = []
            for v in value {
                if v != nil {
                    var model = PutLogMonitorRequest.Aggregates()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.aggregates = tmp
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["Groupbys"] as? [Any?] {
            var tmp : [PutLogMonitorRequest.Groupbys] = []
            for v in value {
                if v != nil {
                    var model = PutLogMonitorRequest.Groupbys()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.groupbys = tmp
        }
        if let value = dict["LogId"] as? String {
            self.logId = value
        }
        if let value = dict["MetricExpress"] as? String {
            self.metricExpress = value
        }
        if let value = dict["MetricName"] as? String {
            self.metricName = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["SlsLogstore"] as? String {
            self.slsLogstore = value
        }
        if let value = dict["SlsProject"] as? String {
            self.slsProject = value
        }
        if let value = dict["SlsRegionId"] as? String {
            self.slsRegionId = value
        }
        if let value = dict["Tumblingwindows"] as? String {
            self.tumblingwindows = value
        }
        if let value = dict["Unit"] as? String {
            self.unit = value
        }
        if let value = dict["ValueFilter"] as? [Any?] {
            var tmp : [PutLogMonitorRequest.ValueFilter] = []
            for v in value {
                if v != nil {
                    var model = PutLogMonitorRequest.ValueFilter()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.valueFilter = tmp
        }
        if let value = dict["ValueFilterRelation"] as? String {
            self.valueFilterRelation = value
        }
    }
}

public class PutLogMonitorResponseBody : Tea.TeaModel {
    public var code: String?

    public var logId: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.logId != nil {
            map["LogId"] = self.logId!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["LogId"] as? String {
            self.logId = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class PutLogMonitorResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: PutLogMonitorResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = PutLogMonitorResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class PutMetricRuleTargetsRequest : Tea.TeaModel {
    public class Targets : Tea.TeaModel {
        public var arn: String?

        public var id: String?

        public var jsonParams: String?

        public var level: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.arn != nil {
                map["Arn"] = self.arn!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.jsonParams != nil {
                map["JsonParams"] = self.jsonParams!
            }
            if self.level != nil {
                map["Level"] = self.level!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Arn"] as? String {
                self.arn = value
            }
            if let value = dict["Id"] as? String {
                self.id = value
            }
            if let value = dict["JsonParams"] as? String {
                self.jsonParams = value
            }
            if let value = dict["Level"] as? String {
                self.level = value
            }
        }
    }
    public var regionId: String?

    public var ruleId: String?

    public var targets: [PutMetricRuleTargetsRequest.Targets]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.ruleId != nil {
            map["RuleId"] = self.ruleId!
        }
        if self.targets != nil {
            var tmp : [Any] = []
            for k in self.targets! {
                tmp.append(k.toMap())
            }
            map["Targets"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["RuleId"] as? String {
            self.ruleId = value
        }
        if let value = dict["Targets"] as? [Any?] {
            var tmp : [PutMetricRuleTargetsRequest.Targets] = []
            for v in value {
                if v != nil {
                    var model = PutMetricRuleTargetsRequest.Targets()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.targets = tmp
        }
    }
}

public class PutMetricRuleTargetsResponseBody : Tea.TeaModel {
    public class FailData : Tea.TeaModel {
        public class Targets : Tea.TeaModel {
            public class Target : Tea.TeaModel {
                public var arn: String?

                public var id: String?

                public var level: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.arn != nil {
                        map["Arn"] = self.arn!
                    }
                    if self.id != nil {
                        map["Id"] = self.id!
                    }
                    if self.level != nil {
                        map["Level"] = self.level!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Arn"] as? String {
                        self.arn = value
                    }
                    if let value = dict["Id"] as? String {
                        self.id = value
                    }
                    if let value = dict["Level"] as? String {
                        self.level = value
                    }
                }
            }
            public var target: [PutMetricRuleTargetsResponseBody.FailData.Targets.Target]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.target != nil {
                    var tmp : [Any] = []
                    for k in self.target! {
                        tmp.append(k.toMap())
                    }
                    map["Target"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Target"] as? [Any?] {
                    var tmp : [PutMetricRuleTargetsResponseBody.FailData.Targets.Target] = []
                    for v in value {
                        if v != nil {
                            var model = PutMetricRuleTargetsResponseBody.FailData.Targets.Target()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.target = tmp
                }
            }
        }
        public var targets: PutMetricRuleTargetsResponseBody.FailData.Targets?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.targets?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.targets != nil {
                map["Targets"] = self.targets?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Targets"] as? [String: Any?] {
                var model = PutMetricRuleTargetsResponseBody.FailData.Targets()
                model.fromMap(value)
                self.targets = model
            }
        }
    }
    public var code: String?

    public var failData: PutMetricRuleTargetsResponseBody.FailData?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.failData?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.failData != nil {
            map["FailData"] = self.failData?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["FailData"] as? [String: Any?] {
            var model = PutMetricRuleTargetsResponseBody.FailData()
            model.fromMap(value)
            self.failData = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class PutMetricRuleTargetsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: PutMetricRuleTargetsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = PutMetricRuleTargetsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class PutMonitorGroupDynamicRuleRequest : Tea.TeaModel {
    public class GroupRules : Tea.TeaModel {
        public class Filters : Tea.TeaModel {
            public var function: String?

            public var name: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.function != nil {
                    map["Function"] = self.function!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Function"] as? String {
                    self.function = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public var category: String?

        public var filterRelation: String?

        public var filters: [PutMonitorGroupDynamicRuleRequest.GroupRules.Filters]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.category != nil {
                map["Category"] = self.category!
            }
            if self.filterRelation != nil {
                map["FilterRelation"] = self.filterRelation!
            }
            if self.filters != nil {
                var tmp : [Any] = []
                for k in self.filters! {
                    tmp.append(k.toMap())
                }
                map["Filters"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Category"] as? String {
                self.category = value
            }
            if let value = dict["FilterRelation"] as? String {
                self.filterRelation = value
            }
            if let value = dict["Filters"] as? [Any?] {
                var tmp : [PutMonitorGroupDynamicRuleRequest.GroupRules.Filters] = []
                for v in value {
                    if v != nil {
                        var model = PutMonitorGroupDynamicRuleRequest.GroupRules.Filters()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.filters = tmp
            }
        }
    }
    public var groupId: Int64?

    public var groupRules: [PutMonitorGroupDynamicRuleRequest.GroupRules]?

    public var isAsync: Bool?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.groupRules != nil {
            var tmp : [Any] = []
            for k in self.groupRules! {
                tmp.append(k.toMap())
            }
            map["GroupRules"] = tmp
        }
        if self.isAsync != nil {
            map["IsAsync"] = self.isAsync!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["GroupId"] as? Int64 {
            self.groupId = value
        }
        if let value = dict["GroupRules"] as? [Any?] {
            var tmp : [PutMonitorGroupDynamicRuleRequest.GroupRules] = []
            for v in value {
                if v != nil {
                    var model = PutMonitorGroupDynamicRuleRequest.GroupRules()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.groupRules = tmp
        }
        if let value = dict["IsAsync"] as? Bool {
            self.isAsync = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class PutMonitorGroupDynamicRuleResponseBody : Tea.TeaModel {
    public var code: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class PutMonitorGroupDynamicRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: PutMonitorGroupDynamicRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = PutMonitorGroupDynamicRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class PutMonitoringConfigRequest : Tea.TeaModel {
    public var autoInstall: Bool?

    public var enableInstallAgentNewECS: Bool?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.autoInstall != nil {
            map["AutoInstall"] = self.autoInstall!
        }
        if self.enableInstallAgentNewECS != nil {
            map["EnableInstallAgentNewECS"] = self.enableInstallAgentNewECS!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AutoInstall"] as? Bool {
            self.autoInstall = value
        }
        if let value = dict["EnableInstallAgentNewECS"] as? Bool {
            self.enableInstallAgentNewECS = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class PutMonitoringConfigResponseBody : Tea.TeaModel {
    public var code: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int32 {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class PutMonitoringConfigResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: PutMonitoringConfigResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = PutMonitoringConfigResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class PutResourceMetricRuleRequest : Tea.TeaModel {
    public class Escalations : Tea.TeaModel {
        public class Critical : Tea.TeaModel {
            public var comparisonOperator: String?

            public var statistics: String?

            public var threshold: String?

            public var times: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.comparisonOperator != nil {
                    map["ComparisonOperator"] = self.comparisonOperator!
                }
                if self.statistics != nil {
                    map["Statistics"] = self.statistics!
                }
                if self.threshold != nil {
                    map["Threshold"] = self.threshold!
                }
                if self.times != nil {
                    map["Times"] = self.times!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ComparisonOperator"] as? String {
                    self.comparisonOperator = value
                }
                if let value = dict["Statistics"] as? String {
                    self.statistics = value
                }
                if let value = dict["Threshold"] as? String {
                    self.threshold = value
                }
                if let value = dict["Times"] as? Int32 {
                    self.times = value
                }
            }
        }
        public class Info : Tea.TeaModel {
            public var comparisonOperator: String?

            public var statistics: String?

            public var threshold: String?

            public var times: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.comparisonOperator != nil {
                    map["ComparisonOperator"] = self.comparisonOperator!
                }
                if self.statistics != nil {
                    map["Statistics"] = self.statistics!
                }
                if self.threshold != nil {
                    map["Threshold"] = self.threshold!
                }
                if self.times != nil {
                    map["Times"] = self.times!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ComparisonOperator"] as? String {
                    self.comparisonOperator = value
                }
                if let value = dict["Statistics"] as? String {
                    self.statistics = value
                }
                if let value = dict["Threshold"] as? String {
                    self.threshold = value
                }
                if let value = dict["Times"] as? Int32 {
                    self.times = value
                }
            }
        }
        public class Warn : Tea.TeaModel {
            public var comparisonOperator: String?

            public var statistics: String?

            public var threshold: String?

            public var times: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.comparisonOperator != nil {
                    map["ComparisonOperator"] = self.comparisonOperator!
                }
                if self.statistics != nil {
                    map["Statistics"] = self.statistics!
                }
                if self.threshold != nil {
                    map["Threshold"] = self.threshold!
                }
                if self.times != nil {
                    map["Times"] = self.times!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ComparisonOperator"] as? String {
                    self.comparisonOperator = value
                }
                if let value = dict["Statistics"] as? String {
                    self.statistics = value
                }
                if let value = dict["Threshold"] as? String {
                    self.threshold = value
                }
                if let value = dict["Times"] as? Int32 {
                    self.times = value
                }
            }
        }
        public var critical: PutResourceMetricRuleRequest.Escalations.Critical?

        public var info: PutResourceMetricRuleRequest.Escalations.Info?

        public var warn: PutResourceMetricRuleRequest.Escalations.Warn?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.critical?.validate()
            try self.info?.validate()
            try self.warn?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.critical != nil {
                map["Critical"] = self.critical?.toMap()
            }
            if self.info != nil {
                map["Info"] = self.info?.toMap()
            }
            if self.warn != nil {
                map["Warn"] = self.warn?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Critical"] as? [String: Any?] {
                var model = PutResourceMetricRuleRequest.Escalations.Critical()
                model.fromMap(value)
                self.critical = model
            }
            if let value = dict["Info"] as? [String: Any?] {
                var model = PutResourceMetricRuleRequest.Escalations.Info()
                model.fromMap(value)
                self.info = model
            }
            if let value = dict["Warn"] as? [String: Any?] {
                var model = PutResourceMetricRuleRequest.Escalations.Warn()
                model.fromMap(value)
                self.warn = model
            }
        }
    }
    public class CompositeExpression : Tea.TeaModel {
        public class ExpressionList : Tea.TeaModel {
            public var comparisonOperator: String?

            public var metricName: String?

            public var period: Int64?

            public var statistics: String?

            public var threshold: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.comparisonOperator != nil {
                    map["ComparisonOperator"] = self.comparisonOperator!
                }
                if self.metricName != nil {
                    map["MetricName"] = self.metricName!
                }
                if self.period != nil {
                    map["Period"] = self.period!
                }
                if self.statistics != nil {
                    map["Statistics"] = self.statistics!
                }
                if self.threshold != nil {
                    map["Threshold"] = self.threshold!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ComparisonOperator"] as? String {
                    self.comparisonOperator = value
                }
                if let value = dict["MetricName"] as? String {
                    self.metricName = value
                }
                if let value = dict["Period"] as? Int64 {
                    self.period = value
                }
                if let value = dict["Statistics"] as? String {
                    self.statistics = value
                }
                if let value = dict["Threshold"] as? String {
                    self.threshold = value
                }
            }
        }
        public var expressionList: [PutResourceMetricRuleRequest.CompositeExpression.ExpressionList]?

        public var expressionListJoin: String?

        public var expressionRaw: String?

        public var level: String?

        public var times: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.expressionList != nil {
                var tmp : [Any] = []
                for k in self.expressionList! {
                    tmp.append(k.toMap())
                }
                map["ExpressionList"] = tmp
            }
            if self.expressionListJoin != nil {
                map["ExpressionListJoin"] = self.expressionListJoin!
            }
            if self.expressionRaw != nil {
                map["ExpressionRaw"] = self.expressionRaw!
            }
            if self.level != nil {
                map["Level"] = self.level!
            }
            if self.times != nil {
                map["Times"] = self.times!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ExpressionList"] as? [Any?] {
                var tmp : [PutResourceMetricRuleRequest.CompositeExpression.ExpressionList] = []
                for v in value {
                    if v != nil {
                        var model = PutResourceMetricRuleRequest.CompositeExpression.ExpressionList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.expressionList = tmp
            }
            if let value = dict["ExpressionListJoin"] as? String {
                self.expressionListJoin = value
            }
            if let value = dict["ExpressionRaw"] as? String {
                self.expressionRaw = value
            }
            if let value = dict["Level"] as? String {
                self.level = value
            }
            if let value = dict["Times"] as? Int32 {
                self.times = value
            }
        }
    }
    public class Labels : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public class Prometheus : Tea.TeaModel {
        public class Annotations : Tea.TeaModel {
            public var key: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.key != nil {
                    map["Key"] = self.key!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Key"] as? String {
                    self.key = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public var annotations: [PutResourceMetricRuleRequest.Prometheus.Annotations]?

        public var level: String?

        public var promQL: String?

        public var times: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.annotations != nil {
                var tmp : [Any] = []
                for k in self.annotations! {
                    tmp.append(k.toMap())
                }
                map["Annotations"] = tmp
            }
            if self.level != nil {
                map["Level"] = self.level!
            }
            if self.promQL != nil {
                map["PromQL"] = self.promQL!
            }
            if self.times != nil {
                map["Times"] = self.times!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Annotations"] as? [Any?] {
                var tmp : [PutResourceMetricRuleRequest.Prometheus.Annotations] = []
                for v in value {
                    if v != nil {
                        var model = PutResourceMetricRuleRequest.Prometheus.Annotations()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.annotations = tmp
            }
            if let value = dict["Level"] as? String {
                self.level = value
            }
            if let value = dict["PromQL"] as? String {
                self.promQL = value
            }
            if let value = dict["Times"] as? Int32 {
                self.times = value
            }
        }
    }
    public var escalations: PutResourceMetricRuleRequest.Escalations?

    public var compositeExpression: PutResourceMetricRuleRequest.CompositeExpression?

    public var contactGroups: String?

    public var effectiveInterval: String?

    public var emailSubject: String?

    public var interval: String?

    public var labels: [PutResourceMetricRuleRequest.Labels]?

    public var metricName: String?

    public var namespace: String?

    public var noDataPolicy: String?

    public var noEffectiveInterval: String?

    public var period: String?

    public var prometheus: PutResourceMetricRuleRequest.Prometheus?

    public var resources: String?

    public var ruleId: String?

    public var ruleName: String?

    public var silenceTime: Int32?

    public var webhook: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.escalations?.validate()
        try self.compositeExpression?.validate()
        try self.prometheus?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.escalations != nil {
            map["Escalations"] = self.escalations?.toMap()
        }
        if self.compositeExpression != nil {
            map["CompositeExpression"] = self.compositeExpression?.toMap()
        }
        if self.contactGroups != nil {
            map["ContactGroups"] = self.contactGroups!
        }
        if self.effectiveInterval != nil {
            map["EffectiveInterval"] = self.effectiveInterval!
        }
        if self.emailSubject != nil {
            map["EmailSubject"] = self.emailSubject!
        }
        if self.interval != nil {
            map["Interval"] = self.interval!
        }
        if self.labels != nil {
            var tmp : [Any] = []
            for k in self.labels! {
                tmp.append(k.toMap())
            }
            map["Labels"] = tmp
        }
        if self.metricName != nil {
            map["MetricName"] = self.metricName!
        }
        if self.namespace != nil {
            map["Namespace"] = self.namespace!
        }
        if self.noDataPolicy != nil {
            map["NoDataPolicy"] = self.noDataPolicy!
        }
        if self.noEffectiveInterval != nil {
            map["NoEffectiveInterval"] = self.noEffectiveInterval!
        }
        if self.period != nil {
            map["Period"] = self.period!
        }
        if self.prometheus != nil {
            map["Prometheus"] = self.prometheus?.toMap()
        }
        if self.resources != nil {
            map["Resources"] = self.resources!
        }
        if self.ruleId != nil {
            map["RuleId"] = self.ruleId!
        }
        if self.ruleName != nil {
            map["RuleName"] = self.ruleName!
        }
        if self.silenceTime != nil {
            map["SilenceTime"] = self.silenceTime!
        }
        if self.webhook != nil {
            map["Webhook"] = self.webhook!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Escalations"] as? [String: Any?] {
            var model = PutResourceMetricRuleRequest.Escalations()
            model.fromMap(value)
            self.escalations = model
        }
        if let value = dict["CompositeExpression"] as? [String: Any?] {
            var model = PutResourceMetricRuleRequest.CompositeExpression()
            model.fromMap(value)
            self.compositeExpression = model
        }
        if let value = dict["ContactGroups"] as? String {
            self.contactGroups = value
        }
        if let value = dict["EffectiveInterval"] as? String {
            self.effectiveInterval = value
        }
        if let value = dict["EmailSubject"] as? String {
            self.emailSubject = value
        }
        if let value = dict["Interval"] as? String {
            self.interval = value
        }
        if let value = dict["Labels"] as? [Any?] {
            var tmp : [PutResourceMetricRuleRequest.Labels] = []
            for v in value {
                if v != nil {
                    var model = PutResourceMetricRuleRequest.Labels()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.labels = tmp
        }
        if let value = dict["MetricName"] as? String {
            self.metricName = value
        }
        if let value = dict["Namespace"] as? String {
            self.namespace = value
        }
        if let value = dict["NoDataPolicy"] as? String {
            self.noDataPolicy = value
        }
        if let value = dict["NoEffectiveInterval"] as? String {
            self.noEffectiveInterval = value
        }
        if let value = dict["Period"] as? String {
            self.period = value
        }
        if let value = dict["Prometheus"] as? [String: Any?] {
            var model = PutResourceMetricRuleRequest.Prometheus()
            model.fromMap(value)
            self.prometheus = model
        }
        if let value = dict["Resources"] as? String {
            self.resources = value
        }
        if let value = dict["RuleId"] as? String {
            self.ruleId = value
        }
        if let value = dict["RuleName"] as? String {
            self.ruleName = value
        }
        if let value = dict["SilenceTime"] as? Int32 {
            self.silenceTime = value
        }
        if let value = dict["Webhook"] as? String {
            self.webhook = value
        }
    }
}

public class PutResourceMetricRuleShrinkRequest : Tea.TeaModel {
    public class Escalations : Tea.TeaModel {
        public class Critical : Tea.TeaModel {
            public var comparisonOperator: String?

            public var statistics: String?

            public var threshold: String?

            public var times: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.comparisonOperator != nil {
                    map["ComparisonOperator"] = self.comparisonOperator!
                }
                if self.statistics != nil {
                    map["Statistics"] = self.statistics!
                }
                if self.threshold != nil {
                    map["Threshold"] = self.threshold!
                }
                if self.times != nil {
                    map["Times"] = self.times!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ComparisonOperator"] as? String {
                    self.comparisonOperator = value
                }
                if let value = dict["Statistics"] as? String {
                    self.statistics = value
                }
                if let value = dict["Threshold"] as? String {
                    self.threshold = value
                }
                if let value = dict["Times"] as? Int32 {
                    self.times = value
                }
            }
        }
        public class Info : Tea.TeaModel {
            public var comparisonOperator: String?

            public var statistics: String?

            public var threshold: String?

            public var times: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.comparisonOperator != nil {
                    map["ComparisonOperator"] = self.comparisonOperator!
                }
                if self.statistics != nil {
                    map["Statistics"] = self.statistics!
                }
                if self.threshold != nil {
                    map["Threshold"] = self.threshold!
                }
                if self.times != nil {
                    map["Times"] = self.times!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ComparisonOperator"] as? String {
                    self.comparisonOperator = value
                }
                if let value = dict["Statistics"] as? String {
                    self.statistics = value
                }
                if let value = dict["Threshold"] as? String {
                    self.threshold = value
                }
                if let value = dict["Times"] as? Int32 {
                    self.times = value
                }
            }
        }
        public class Warn : Tea.TeaModel {
            public var comparisonOperator: String?

            public var statistics: String?

            public var threshold: String?

            public var times: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.comparisonOperator != nil {
                    map["ComparisonOperator"] = self.comparisonOperator!
                }
                if self.statistics != nil {
                    map["Statistics"] = self.statistics!
                }
                if self.threshold != nil {
                    map["Threshold"] = self.threshold!
                }
                if self.times != nil {
                    map["Times"] = self.times!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ComparisonOperator"] as? String {
                    self.comparisonOperator = value
                }
                if let value = dict["Statistics"] as? String {
                    self.statistics = value
                }
                if let value = dict["Threshold"] as? String {
                    self.threshold = value
                }
                if let value = dict["Times"] as? Int32 {
                    self.times = value
                }
            }
        }
        public var critical: PutResourceMetricRuleShrinkRequest.Escalations.Critical?

        public var info: PutResourceMetricRuleShrinkRequest.Escalations.Info?

        public var warn: PutResourceMetricRuleShrinkRequest.Escalations.Warn?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.critical?.validate()
            try self.info?.validate()
            try self.warn?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.critical != nil {
                map["Critical"] = self.critical?.toMap()
            }
            if self.info != nil {
                map["Info"] = self.info?.toMap()
            }
            if self.warn != nil {
                map["Warn"] = self.warn?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Critical"] as? [String: Any?] {
                var model = PutResourceMetricRuleShrinkRequest.Escalations.Critical()
                model.fromMap(value)
                self.critical = model
            }
            if let value = dict["Info"] as? [String: Any?] {
                var model = PutResourceMetricRuleShrinkRequest.Escalations.Info()
                model.fromMap(value)
                self.info = model
            }
            if let value = dict["Warn"] as? [String: Any?] {
                var model = PutResourceMetricRuleShrinkRequest.Escalations.Warn()
                model.fromMap(value)
                self.warn = model
            }
        }
    }
    public class Labels : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var escalations: PutResourceMetricRuleShrinkRequest.Escalations?

    public var compositeExpressionShrink: String?

    public var contactGroups: String?

    public var effectiveInterval: String?

    public var emailSubject: String?

    public var interval: String?

    public var labels: [PutResourceMetricRuleShrinkRequest.Labels]?

    public var metricName: String?

    public var namespace: String?

    public var noDataPolicy: String?

    public var noEffectiveInterval: String?

    public var period: String?

    public var prometheusShrink: String?

    public var resources: String?

    public var ruleId: String?

    public var ruleName: String?

    public var silenceTime: Int32?

    public var webhook: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.escalations?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.escalations != nil {
            map["Escalations"] = self.escalations?.toMap()
        }
        if self.compositeExpressionShrink != nil {
            map["CompositeExpression"] = self.compositeExpressionShrink!
        }
        if self.contactGroups != nil {
            map["ContactGroups"] = self.contactGroups!
        }
        if self.effectiveInterval != nil {
            map["EffectiveInterval"] = self.effectiveInterval!
        }
        if self.emailSubject != nil {
            map["EmailSubject"] = self.emailSubject!
        }
        if self.interval != nil {
            map["Interval"] = self.interval!
        }
        if self.labels != nil {
            var tmp : [Any] = []
            for k in self.labels! {
                tmp.append(k.toMap())
            }
            map["Labels"] = tmp
        }
        if self.metricName != nil {
            map["MetricName"] = self.metricName!
        }
        if self.namespace != nil {
            map["Namespace"] = self.namespace!
        }
        if self.noDataPolicy != nil {
            map["NoDataPolicy"] = self.noDataPolicy!
        }
        if self.noEffectiveInterval != nil {
            map["NoEffectiveInterval"] = self.noEffectiveInterval!
        }
        if self.period != nil {
            map["Period"] = self.period!
        }
        if self.prometheusShrink != nil {
            map["Prometheus"] = self.prometheusShrink!
        }
        if self.resources != nil {
            map["Resources"] = self.resources!
        }
        if self.ruleId != nil {
            map["RuleId"] = self.ruleId!
        }
        if self.ruleName != nil {
            map["RuleName"] = self.ruleName!
        }
        if self.silenceTime != nil {
            map["SilenceTime"] = self.silenceTime!
        }
        if self.webhook != nil {
            map["Webhook"] = self.webhook!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Escalations"] as? [String: Any?] {
            var model = PutResourceMetricRuleShrinkRequest.Escalations()
            model.fromMap(value)
            self.escalations = model
        }
        if let value = dict["CompositeExpression"] as? String {
            self.compositeExpressionShrink = value
        }
        if let value = dict["ContactGroups"] as? String {
            self.contactGroups = value
        }
        if let value = dict["EffectiveInterval"] as? String {
            self.effectiveInterval = value
        }
        if let value = dict["EmailSubject"] as? String {
            self.emailSubject = value
        }
        if let value = dict["Interval"] as? String {
            self.interval = value
        }
        if let value = dict["Labels"] as? [Any?] {
            var tmp : [PutResourceMetricRuleShrinkRequest.Labels] = []
            for v in value {
                if v != nil {
                    var model = PutResourceMetricRuleShrinkRequest.Labels()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.labels = tmp
        }
        if let value = dict["MetricName"] as? String {
            self.metricName = value
        }
        if let value = dict["Namespace"] as? String {
            self.namespace = value
        }
        if let value = dict["NoDataPolicy"] as? String {
            self.noDataPolicy = value
        }
        if let value = dict["NoEffectiveInterval"] as? String {
            self.noEffectiveInterval = value
        }
        if let value = dict["Period"] as? String {
            self.period = value
        }
        if let value = dict["Prometheus"] as? String {
            self.prometheusShrink = value
        }
        if let value = dict["Resources"] as? String {
            self.resources = value
        }
        if let value = dict["RuleId"] as? String {
            self.ruleId = value
        }
        if let value = dict["RuleName"] as? String {
            self.ruleName = value
        }
        if let value = dict["SilenceTime"] as? Int32 {
            self.silenceTime = value
        }
        if let value = dict["Webhook"] as? String {
            self.webhook = value
        }
    }
}

public class PutResourceMetricRuleResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class PutResourceMetricRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: PutResourceMetricRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = PutResourceMetricRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class PutResourceMetricRulesRequest : Tea.TeaModel {
    public class Rules : Tea.TeaModel {
        public class Escalations : Tea.TeaModel {
            public class Critical : Tea.TeaModel {
                public var comparisonOperator: String?

                public var n: Int32?

                public var preCondition: String?

                public var statistics: String?

                public var threshold: String?

                public var times: Int32?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.comparisonOperator != nil {
                        map["ComparisonOperator"] = self.comparisonOperator!
                    }
                    if self.n != nil {
                        map["N"] = self.n!
                    }
                    if self.preCondition != nil {
                        map["PreCondition"] = self.preCondition!
                    }
                    if self.statistics != nil {
                        map["Statistics"] = self.statistics!
                    }
                    if self.threshold != nil {
                        map["Threshold"] = self.threshold!
                    }
                    if self.times != nil {
                        map["Times"] = self.times!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["ComparisonOperator"] as? String {
                        self.comparisonOperator = value
                    }
                    if let value = dict["N"] as? Int32 {
                        self.n = value
                    }
                    if let value = dict["PreCondition"] as? String {
                        self.preCondition = value
                    }
                    if let value = dict["Statistics"] as? String {
                        self.statistics = value
                    }
                    if let value = dict["Threshold"] as? String {
                        self.threshold = value
                    }
                    if let value = dict["Times"] as? Int32 {
                        self.times = value
                    }
                }
            }
            public class Info : Tea.TeaModel {
                public var comparisonOperator: String?

                public var n: Int32?

                public var preCondition: String?

                public var statistics: String?

                public var threshold: String?

                public var times: Int32?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.comparisonOperator != nil {
                        map["ComparisonOperator"] = self.comparisonOperator!
                    }
                    if self.n != nil {
                        map["N"] = self.n!
                    }
                    if self.preCondition != nil {
                        map["PreCondition"] = self.preCondition!
                    }
                    if self.statistics != nil {
                        map["Statistics"] = self.statistics!
                    }
                    if self.threshold != nil {
                        map["Threshold"] = self.threshold!
                    }
                    if self.times != nil {
                        map["Times"] = self.times!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["ComparisonOperator"] as? String {
                        self.comparisonOperator = value
                    }
                    if let value = dict["N"] as? Int32 {
                        self.n = value
                    }
                    if let value = dict["PreCondition"] as? String {
                        self.preCondition = value
                    }
                    if let value = dict["Statistics"] as? String {
                        self.statistics = value
                    }
                    if let value = dict["Threshold"] as? String {
                        self.threshold = value
                    }
                    if let value = dict["Times"] as? Int32 {
                        self.times = value
                    }
                }
            }
            public class Warn : Tea.TeaModel {
                public var comparisonOperator: String?

                public var n: Int32?

                public var preCondition: String?

                public var statistics: String?

                public var threshold: String?

                public var times: Int32?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.comparisonOperator != nil {
                        map["ComparisonOperator"] = self.comparisonOperator!
                    }
                    if self.n != nil {
                        map["N"] = self.n!
                    }
                    if self.preCondition != nil {
                        map["PreCondition"] = self.preCondition!
                    }
                    if self.statistics != nil {
                        map["Statistics"] = self.statistics!
                    }
                    if self.threshold != nil {
                        map["Threshold"] = self.threshold!
                    }
                    if self.times != nil {
                        map["Times"] = self.times!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["ComparisonOperator"] as? String {
                        self.comparisonOperator = value
                    }
                    if let value = dict["N"] as? Int32 {
                        self.n = value
                    }
                    if let value = dict["PreCondition"] as? String {
                        self.preCondition = value
                    }
                    if let value = dict["Statistics"] as? String {
                        self.statistics = value
                    }
                    if let value = dict["Threshold"] as? String {
                        self.threshold = value
                    }
                    if let value = dict["Times"] as? Int32 {
                        self.times = value
                    }
                }
            }
            public var critical: PutResourceMetricRulesRequest.Rules.Escalations.Critical?

            public var info: PutResourceMetricRulesRequest.Rules.Escalations.Info?

            public var warn: PutResourceMetricRulesRequest.Rules.Escalations.Warn?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.critical?.validate()
                try self.info?.validate()
                try self.warn?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.critical != nil {
                    map["Critical"] = self.critical?.toMap()
                }
                if self.info != nil {
                    map["Info"] = self.info?.toMap()
                }
                if self.warn != nil {
                    map["Warn"] = self.warn?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Critical"] as? [String: Any?] {
                    var model = PutResourceMetricRulesRequest.Rules.Escalations.Critical()
                    model.fromMap(value)
                    self.critical = model
                }
                if let value = dict["Info"] as? [String: Any?] {
                    var model = PutResourceMetricRulesRequest.Rules.Escalations.Info()
                    model.fromMap(value)
                    self.info = model
                }
                if let value = dict["Warn"] as? [String: Any?] {
                    var model = PutResourceMetricRulesRequest.Rules.Escalations.Warn()
                    model.fromMap(value)
                    self.warn = model
                }
            }
        }
        public class Labels : Tea.TeaModel {
            public var key: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.key != nil {
                    map["Key"] = self.key!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Key"] as? String {
                    self.key = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public var escalations: PutResourceMetricRulesRequest.Rules.Escalations?

        public var contactGroups: String?

        public var effectiveInterval: String?

        public var emailSubject: String?

        public var interval: String?

        public var labels: [PutResourceMetricRulesRequest.Rules.Labels]?

        public var metricName: String?

        public var namespace: String?

        public var noDataPolicy: String?

        public var noEffectiveInterval: String?

        public var period: String?

        public var resources: String?

        public var ruleId: String?

        public var ruleName: String?

        public var silenceTime: Int32?

        public var webhook: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.escalations?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.escalations != nil {
                map["Escalations"] = self.escalations?.toMap()
            }
            if self.contactGroups != nil {
                map["ContactGroups"] = self.contactGroups!
            }
            if self.effectiveInterval != nil {
                map["EffectiveInterval"] = self.effectiveInterval!
            }
            if self.emailSubject != nil {
                map["EmailSubject"] = self.emailSubject!
            }
            if self.interval != nil {
                map["Interval"] = self.interval!
            }
            if self.labels != nil {
                var tmp : [Any] = []
                for k in self.labels! {
                    tmp.append(k.toMap())
                }
                map["Labels"] = tmp
            }
            if self.metricName != nil {
                map["MetricName"] = self.metricName!
            }
            if self.namespace != nil {
                map["Namespace"] = self.namespace!
            }
            if self.noDataPolicy != nil {
                map["NoDataPolicy"] = self.noDataPolicy!
            }
            if self.noEffectiveInterval != nil {
                map["NoEffectiveInterval"] = self.noEffectiveInterval!
            }
            if self.period != nil {
                map["Period"] = self.period!
            }
            if self.resources != nil {
                map["Resources"] = self.resources!
            }
            if self.ruleId != nil {
                map["RuleId"] = self.ruleId!
            }
            if self.ruleName != nil {
                map["RuleName"] = self.ruleName!
            }
            if self.silenceTime != nil {
                map["SilenceTime"] = self.silenceTime!
            }
            if self.webhook != nil {
                map["Webhook"] = self.webhook!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Escalations"] as? [String: Any?] {
                var model = PutResourceMetricRulesRequest.Rules.Escalations()
                model.fromMap(value)
                self.escalations = model
            }
            if let value = dict["ContactGroups"] as? String {
                self.contactGroups = value
            }
            if let value = dict["EffectiveInterval"] as? String {
                self.effectiveInterval = value
            }
            if let value = dict["EmailSubject"] as? String {
                self.emailSubject = value
            }
            if let value = dict["Interval"] as? String {
                self.interval = value
            }
            if let value = dict["Labels"] as? [Any?] {
                var tmp : [PutResourceMetricRulesRequest.Rules.Labels] = []
                for v in value {
                    if v != nil {
                        var model = PutResourceMetricRulesRequest.Rules.Labels()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.labels = tmp
            }
            if let value = dict["MetricName"] as? String {
                self.metricName = value
            }
            if let value = dict["Namespace"] as? String {
                self.namespace = value
            }
            if let value = dict["NoDataPolicy"] as? String {
                self.noDataPolicy = value
            }
            if let value = dict["NoEffectiveInterval"] as? String {
                self.noEffectiveInterval = value
            }
            if let value = dict["Period"] as? String {
                self.period = value
            }
            if let value = dict["Resources"] as? String {
                self.resources = value
            }
            if let value = dict["RuleId"] as? String {
                self.ruleId = value
            }
            if let value = dict["RuleName"] as? String {
                self.ruleName = value
            }
            if let value = dict["SilenceTime"] as? Int32 {
                self.silenceTime = value
            }
            if let value = dict["Webhook"] as? String {
                self.webhook = value
            }
        }
    }
    public var rules: [PutResourceMetricRulesRequest.Rules]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.rules != nil {
            var tmp : [Any] = []
            for k in self.rules! {
                tmp.append(k.toMap())
            }
            map["Rules"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Rules"] as? [Any?] {
            var tmp : [PutResourceMetricRulesRequest.Rules] = []
            for v in value {
                if v != nil {
                    var model = PutResourceMetricRulesRequest.Rules()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.rules = tmp
        }
    }
}

public class PutResourceMetricRulesResponseBody : Tea.TeaModel {
    public class FailedListResult : Tea.TeaModel {
        public class Target : Tea.TeaModel {
            public class Result : Tea.TeaModel {
                public var code: String?

                public var message: String?

                public var success: Bool?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.code != nil {
                        map["Code"] = self.code!
                    }
                    if self.message != nil {
                        map["Message"] = self.message!
                    }
                    if self.success != nil {
                        map["Success"] = self.success!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Code"] as? String {
                        self.code = value
                    }
                    if let value = dict["Message"] as? String {
                        self.message = value
                    }
                    if let value = dict["Success"] as? Bool {
                        self.success = value
                    }
                }
            }
            public var result: PutResourceMetricRulesResponseBody.FailedListResult.Target.Result?

            public var ruleId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.result?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.result != nil {
                    map["Result"] = self.result?.toMap()
                }
                if self.ruleId != nil {
                    map["RuleId"] = self.ruleId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Result"] as? [String: Any?] {
                    var model = PutResourceMetricRulesResponseBody.FailedListResult.Target.Result()
                    model.fromMap(value)
                    self.result = model
                }
                if let value = dict["RuleId"] as? String {
                    self.ruleId = value
                }
            }
        }
        public var target: [PutResourceMetricRulesResponseBody.FailedListResult.Target]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.target != nil {
                var tmp : [Any] = []
                for k in self.target! {
                    tmp.append(k.toMap())
                }
                map["Target"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Target"] as? [Any?] {
                var tmp : [PutResourceMetricRulesResponseBody.FailedListResult.Target] = []
                for v in value {
                    if v != nil {
                        var model = PutResourceMetricRulesResponseBody.FailedListResult.Target()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.target = tmp
            }
        }
    }
    public var code: String?

    public var failedListResult: PutResourceMetricRulesResponseBody.FailedListResult?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.failedListResult?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.failedListResult != nil {
            map["FailedListResult"] = self.failedListResult?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["FailedListResult"] as? [String: Any?] {
            var model = PutResourceMetricRulesResponseBody.FailedListResult()
            model.fromMap(value)
            self.failedListResult = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class PutResourceMetricRulesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: PutResourceMetricRulesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = PutResourceMetricRulesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RemoveTagsRequest : Tea.TeaModel {
    public class Tag : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var groupIds: [String]?

    public var regionId: String?

    public var tag: [RemoveTagsRequest.Tag]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.groupIds != nil {
            map["GroupIds"] = self.groupIds!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.tag != nil {
            var tmp : [Any] = []
            for k in self.tag! {
                tmp.append(k.toMap())
            }
            map["Tag"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["GroupIds"] as? [String] {
            self.groupIds = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Tag"] as? [Any?] {
            var tmp : [RemoveTagsRequest.Tag] = []
            for v in value {
                if v != nil {
                    var model = RemoveTagsRequest.Tag()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tag = tmp
        }
    }
}

public class RemoveTagsResponseBody : Tea.TeaModel {
    public class Tag : Tea.TeaModel {
        public var tags: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tags != nil {
                map["Tags"] = self.tags!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Tags"] as? [String] {
                self.tags = value
            }
        }
    }
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public var tag: RemoveTagsResponseBody.Tag?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tag?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.tag != nil {
            map["Tag"] = self.tag?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
        if let value = dict["Tag"] as? [String: Any?] {
            var model = RemoveTagsResponseBody.Tag()
            model.fromMap(value)
            self.tag = model
        }
    }
}

public class RemoveTagsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RemoveTagsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RemoveTagsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SendDryRunSystemEventRequest : Tea.TeaModel {
    public var eventContent: String?

    public var eventName: String?

    public var groupId: String?

    public var product: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.eventContent != nil {
            map["EventContent"] = self.eventContent!
        }
        if self.eventName != nil {
            map["EventName"] = self.eventName!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.product != nil {
            map["Product"] = self.product!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EventContent"] as? String {
            self.eventContent = value
        }
        if let value = dict["EventName"] as? String {
            self.eventName = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["Product"] as? String {
            self.product = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class SendDryRunSystemEventResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? String {
            self.success = value
        }
    }
}

public class SendDryRunSystemEventResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SendDryRunSystemEventResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SendDryRunSystemEventResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UninstallMonitoringAgentRequest : Tea.TeaModel {
    public var instanceId: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class UninstallMonitoringAgentResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class UninstallMonitoringAgentResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UninstallMonitoringAgentResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UninstallMonitoringAgentResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}
