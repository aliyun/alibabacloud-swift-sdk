import Foundation
import Tea
import TeaUtils
import AlibabacloudOpenApi
import AlibabaCloudOpenApiUtil
import AlibabacloudEndpointUtil

public class AuthReportInterval : Tea.TeaModel {
    public var timeUnit: String?

    public var value: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.timeUnit != nil {
            map["TimeUnit"] = self.timeUnit!
        }
        if self.value != nil {
            map["Value"] = self.value!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["TimeUnit"] as? String {
            self.timeUnit = value
        }
        if let value = dict["Value"] as? Int64 {
            self.value = value
        }
    }
}

public class CommonConfig : Tea.TeaModel {
    public class Idp : Tea.TeaModel {
        public class Dingtalk : Tea.TeaModel {
            public var eventCallbackBase: String?

            public var eventLabel: String?

            public var homePage: String?

            public var loginRedirect: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.eventCallbackBase != nil {
                    map["EventCallbackBase"] = self.eventCallbackBase!
                }
                if self.eventLabel != nil {
                    map["EventLabel"] = self.eventLabel!
                }
                if self.homePage != nil {
                    map["HomePage"] = self.homePage!
                }
                if self.loginRedirect != nil {
                    map["LoginRedirect"] = self.loginRedirect!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["EventCallbackBase"] as? String {
                    self.eventCallbackBase = value
                }
                if let value = dict["EventLabel"] as? String {
                    self.eventLabel = value
                }
                if let value = dict["HomePage"] as? String {
                    self.homePage = value
                }
                if let value = dict["LoginRedirect"] as? String {
                    self.loginRedirect = value
                }
            }
        }
        public class Feishu : Tea.TeaModel {
            public var eventCallbackBase: String?

            public var eventLabel: String?

            public var homePage: String?

            public var loginRedirect: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.eventCallbackBase != nil {
                    map["EventCallbackBase"] = self.eventCallbackBase!
                }
                if self.eventLabel != nil {
                    map["EventLabel"] = self.eventLabel!
                }
                if self.homePage != nil {
                    map["HomePage"] = self.homePage!
                }
                if self.loginRedirect != nil {
                    map["LoginRedirect"] = self.loginRedirect!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["EventCallbackBase"] as? String {
                    self.eventCallbackBase = value
                }
                if let value = dict["EventLabel"] as? String {
                    self.eventLabel = value
                }
                if let value = dict["HomePage"] as? String {
                    self.homePage = value
                }
                if let value = dict["LoginRedirect"] as? String {
                    self.loginRedirect = value
                }
            }
        }
        public class Idaas2 : Tea.TeaModel {
            public var eventCallbackBase: String?

            public var eventLabel: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.eventCallbackBase != nil {
                    map["EventCallbackBase"] = self.eventCallbackBase!
                }
                if self.eventLabel != nil {
                    map["EventLabel"] = self.eventLabel!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["EventCallbackBase"] as? String {
                    self.eventCallbackBase = value
                }
                if let value = dict["EventLabel"] as? String {
                    self.eventLabel = value
                }
            }
        }
        public class Saml : Tea.TeaModel {
            public var acs: String?

            public var metadata: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.acs != nil {
                    map["Acs"] = self.acs!
                }
                if self.metadata != nil {
                    map["Metadata"] = self.metadata!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Acs"] as? String {
                    self.acs = value
                }
                if let value = dict["Metadata"] as? String {
                    self.metadata = value
                }
            }
        }
        public var apOidcCallbackUrl: String?

        public var dingtalk: CommonConfig.Idp.Dingtalk?

        public var feishu: CommonConfig.Idp.Feishu?

        public var idaas2: CommonConfig.Idp.Idaas2?

        public var saml: CommonConfig.Idp.Saml?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.dingtalk?.validate()
            try self.feishu?.validate()
            try self.idaas2?.validate()
            try self.saml?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.apOidcCallbackUrl != nil {
                map["ApOidcCallbackUrl"] = self.apOidcCallbackUrl!
            }
            if self.dingtalk != nil {
                map["Dingtalk"] = self.dingtalk?.toMap()
            }
            if self.feishu != nil {
                map["Feishu"] = self.feishu?.toMap()
            }
            if self.idaas2 != nil {
                map["Idaas2"] = self.idaas2?.toMap()
            }
            if self.saml != nil {
                map["Saml"] = self.saml?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ApOidcCallbackUrl"] as? String {
                self.apOidcCallbackUrl = value
            }
            if let value = dict["Dingtalk"] as? [String: Any?] {
                var model = CommonConfig.Idp.Dingtalk()
                model.fromMap(value)
                self.dingtalk = model
            }
            if let value = dict["Feishu"] as? [String: Any?] {
                var model = CommonConfig.Idp.Feishu()
                model.fromMap(value)
                self.feishu = model
            }
            if let value = dict["Idaas2"] as? [String: Any?] {
                var model = CommonConfig.Idp.Idaas2()
                model.fromMap(value)
                self.idaas2 = model
            }
            if let value = dict["Saml"] as? [String: Any?] {
                var model = CommonConfig.Idp.Saml()
                model.fromMap(value)
                self.saml = model
            }
        }
    }
    public var idp: CommonConfig.Idp?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.idp?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.idp != nil {
            map["Idp"] = self.idp?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Idp"] as? [String: Any?] {
            var model = CommonConfig.Idp()
            model.fromMap(value)
            self.idp = model
        }
    }
}

public class DisposalContent : Tea.TeaModel {
    public var alertContent: String?

    public var alertContentEn: String?

    public var alertTitle: String?

    public var alertTitleEn: String?

    public var nacDemotionPolicyIds: [String]?

    public var noticeContent: String?

    public var noticeContentEn: String?

    public var notifyActions: [String]?

    public var prohibitActions: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.alertContent != nil {
            map["AlertContent"] = self.alertContent!
        }
        if self.alertContentEn != nil {
            map["AlertContentEn"] = self.alertContentEn!
        }
        if self.alertTitle != nil {
            map["AlertTitle"] = self.alertTitle!
        }
        if self.alertTitleEn != nil {
            map["AlertTitleEn"] = self.alertTitleEn!
        }
        if self.nacDemotionPolicyIds != nil {
            map["NacDemotionPolicyIds"] = self.nacDemotionPolicyIds!
        }
        if self.noticeContent != nil {
            map["NoticeContent"] = self.noticeContent!
        }
        if self.noticeContentEn != nil {
            map["NoticeContentEn"] = self.noticeContentEn!
        }
        if self.notifyActions != nil {
            map["NotifyActions"] = self.notifyActions!
        }
        if self.prohibitActions != nil {
            map["ProhibitActions"] = self.prohibitActions!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AlertContent"] as? String {
            self.alertContent = value
        }
        if let value = dict["AlertContentEn"] as? String {
            self.alertContentEn = value
        }
        if let value = dict["AlertTitle"] as? String {
            self.alertTitle = value
        }
        if let value = dict["AlertTitleEn"] as? String {
            self.alertTitleEn = value
        }
        if let value = dict["NacDemotionPolicyIds"] as? [String] {
            self.nacDemotionPolicyIds = value
        }
        if let value = dict["NoticeContent"] as? String {
            self.noticeContent = value
        }
        if let value = dict["NoticeContentEn"] as? String {
            self.noticeContentEn = value
        }
        if let value = dict["NotifyActions"] as? [String] {
            self.notifyActions = value
        }
        if let value = dict["ProhibitActions"] as? [String] {
            self.prohibitActions = value
        }
    }
}

public class IdpAttrMapConfig : Tea.TeaModel {
    public var mapItems: [IdpAttrMapConfigItem]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.mapItems != nil {
            var tmp : [Any] = []
            for k in self.mapItems! {
                tmp.append(k.toMap())
            }
            map["MapItems"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["MapItems"] as? [Any?] {
            var tmp : [IdpAttrMapConfigItem] = []
            for v in value {
                if v != nil {
                    var model = IdpAttrMapConfigItem()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.mapItems = tmp
        }
    }
}

public class IdpAttrMapConfigItem : Tea.TeaModel {
    public var source: String?

    public var target: String?

    public var targetType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.source != nil {
            map["Source"] = self.source!
        }
        if self.target != nil {
            map["Target"] = self.target!
        }
        if self.targetType != nil {
            map["TargetType"] = self.targetType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Source"] as? String {
            self.source = value
        }
        if let value = dict["Target"] as? String {
            self.target = value
        }
        if let value = dict["TargetType"] as? String {
            self.targetType = value
        }
    }
}

public class IdpConfig : Tea.TeaModel {
    public var attrMapConfig: IdpAttrMapConfig?

    public var connectConfig: IdpConnectConfig?

    public var description_: String?

    public var dingtalkConfig: IdpDingtalkSubConfig?

    public var enabled: Bool?

    public var feishuConfig: IdpFeishuSubConfig?

    public var idaasConfig: IdpIdaas2SubConfig?

    public var idpConfigId: String?

    public var lastSyncTimeUnix: Int64?

    public var ldapConfig: IdpLdapSubConfig?

    public var loginConfig: IdpLoginConfig?

    public var name: String?

    public var syncConfig: IdpSyncConfig?

    public var syncStatus: String?

    public var type: String?

    public var weixinConfig: IdpWeixin2SubConfig?

    public var wuyingConfig: OpenStructIdpWuyingSubConfig?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.attrMapConfig?.validate()
        try self.connectConfig?.validate()
        try self.dingtalkConfig?.validate()
        try self.feishuConfig?.validate()
        try self.idaasConfig?.validate()
        try self.ldapConfig?.validate()
        try self.loginConfig?.validate()
        try self.syncConfig?.validate()
        try self.weixinConfig?.validate()
        try self.wuyingConfig?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.attrMapConfig != nil {
            map["AttrMapConfig"] = self.attrMapConfig?.toMap()
        }
        if self.connectConfig != nil {
            map["ConnectConfig"] = self.connectConfig?.toMap()
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.dingtalkConfig != nil {
            map["DingtalkConfig"] = self.dingtalkConfig?.toMap()
        }
        if self.enabled != nil {
            map["Enabled"] = self.enabled!
        }
        if self.feishuConfig != nil {
            map["FeishuConfig"] = self.feishuConfig?.toMap()
        }
        if self.idaasConfig != nil {
            map["IdaasConfig"] = self.idaasConfig?.toMap()
        }
        if self.idpConfigId != nil {
            map["IdpConfigId"] = self.idpConfigId!
        }
        if self.lastSyncTimeUnix != nil {
            map["LastSyncTimeUnix"] = self.lastSyncTimeUnix!
        }
        if self.ldapConfig != nil {
            map["LdapConfig"] = self.ldapConfig?.toMap()
        }
        if self.loginConfig != nil {
            map["LoginConfig"] = self.loginConfig?.toMap()
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.syncConfig != nil {
            map["SyncConfig"] = self.syncConfig?.toMap()
        }
        if self.syncStatus != nil {
            map["SyncStatus"] = self.syncStatus!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        if self.weixinConfig != nil {
            map["WeixinConfig"] = self.weixinConfig?.toMap()
        }
        if self.wuyingConfig != nil {
            map["WuyingConfig"] = self.wuyingConfig?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AttrMapConfig"] as? [String: Any?] {
            var model = IdpAttrMapConfig()
            model.fromMap(value)
            self.attrMapConfig = model
        }
        if let value = dict["ConnectConfig"] as? [String: Any?] {
            var model = IdpConnectConfig()
            model.fromMap(value)
            self.connectConfig = model
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["DingtalkConfig"] as? [String: Any?] {
            var model = IdpDingtalkSubConfig()
            model.fromMap(value)
            self.dingtalkConfig = model
        }
        if let value = dict["Enabled"] as? Bool {
            self.enabled = value
        }
        if let value = dict["FeishuConfig"] as? [String: Any?] {
            var model = IdpFeishuSubConfig()
            model.fromMap(value)
            self.feishuConfig = model
        }
        if let value = dict["IdaasConfig"] as? [String: Any?] {
            var model = IdpIdaas2SubConfig()
            model.fromMap(value)
            self.idaasConfig = model
        }
        if let value = dict["IdpConfigId"] as? String {
            self.idpConfigId = value
        }
        if let value = dict["LastSyncTimeUnix"] as? Int64 {
            self.lastSyncTimeUnix = value
        }
        if let value = dict["LdapConfig"] as? [String: Any?] {
            var model = IdpLdapSubConfig()
            model.fromMap(value)
            self.ldapConfig = model
        }
        if let value = dict["LoginConfig"] as? [String: Any?] {
            var model = IdpLoginConfig()
            model.fromMap(value)
            self.loginConfig = model
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["SyncConfig"] as? [String: Any?] {
            var model = IdpSyncConfig()
            model.fromMap(value)
            self.syncConfig = model
        }
        if let value = dict["SyncStatus"] as? String {
            self.syncStatus = value
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
        if let value = dict["WeixinConfig"] as? [String: Any?] {
            var model = IdpWeixin2SubConfig()
            model.fromMap(value)
            self.weixinConfig = model
        }
        if let value = dict["WuyingConfig"] as? [String: Any?] {
            var model = OpenStructIdpWuyingSubConfig()
            model.fromMap(value)
            self.wuyingConfig = model
        }
    }
}

public class IdpConnectConfig : Tea.TeaModel {
    public var connectorId: String?

    public var useConnector: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.connectorId != nil {
            map["ConnectorId"] = self.connectorId!
        }
        if self.useConnector != nil {
            map["UseConnector"] = self.useConnector!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConnectorId"] as? String {
            self.connectorId = value
        }
        if let value = dict["UseConnector"] as? Bool {
            self.useConnector = value
        }
    }
}

public class IdpCustomField : Tea.TeaModel {
    public var description_: String?

    public var key: String?

    public var name: String?

    public var type: String?

    public var value: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.key != nil {
            map["Key"] = self.key!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        if self.value != nil {
            map["Value"] = self.value!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["Key"] as? String {
            self.key = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
        if let value = dict["Value"] as? String {
            self.value = value
        }
    }
}

public class IdpDingtalkSubConfig : Tea.TeaModel {
    public var appKey: String?

    public var appSecret: String?

    public var corpId: String?

    public var eventAesKey: String?

    public var eventLabel: String?

    public var eventVerifyToken: String?

    public var exclusive: Bool?

    public var redirectUri: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appKey != nil {
            map["AppKey"] = self.appKey!
        }
        if self.appSecret != nil {
            map["AppSecret"] = self.appSecret!
        }
        if self.corpId != nil {
            map["CorpId"] = self.corpId!
        }
        if self.eventAesKey != nil {
            map["EventAesKey"] = self.eventAesKey!
        }
        if self.eventLabel != nil {
            map["EventLabel"] = self.eventLabel!
        }
        if self.eventVerifyToken != nil {
            map["EventVerifyToken"] = self.eventVerifyToken!
        }
        if self.exclusive != nil {
            map["Exclusive"] = self.exclusive!
        }
        if self.redirectUri != nil {
            map["RedirectUri"] = self.redirectUri!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppKey"] as? String {
            self.appKey = value
        }
        if let value = dict["AppSecret"] as? String {
            self.appSecret = value
        }
        if let value = dict["CorpId"] as? String {
            self.corpId = value
        }
        if let value = dict["EventAesKey"] as? String {
            self.eventAesKey = value
        }
        if let value = dict["EventLabel"] as? String {
            self.eventLabel = value
        }
        if let value = dict["EventVerifyToken"] as? String {
            self.eventVerifyToken = value
        }
        if let value = dict["Exclusive"] as? Bool {
            self.exclusive = value
        }
        if let value = dict["RedirectUri"] as? String {
            self.redirectUri = value
        }
    }
}

public class IdpFeishuSubConfig : Tea.TeaModel {
    public var appId: String?

    public var appSecret: String?

    public var corpId: String?

    public var eventAesKey: String?

    public var eventLabel: String?

    public var eventVerifyToken: String?

    public var redirectUri: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        if self.appSecret != nil {
            map["AppSecret"] = self.appSecret!
        }
        if self.corpId != nil {
            map["CorpId"] = self.corpId!
        }
        if self.eventAesKey != nil {
            map["EventAesKey"] = self.eventAesKey!
        }
        if self.eventLabel != nil {
            map["EventLabel"] = self.eventLabel!
        }
        if self.eventVerifyToken != nil {
            map["EventVerifyToken"] = self.eventVerifyToken!
        }
        if self.redirectUri != nil {
            map["RedirectUri"] = self.redirectUri!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppId"] as? String {
            self.appId = value
        }
        if let value = dict["AppSecret"] as? String {
            self.appSecret = value
        }
        if let value = dict["CorpId"] as? String {
            self.corpId = value
        }
        if let value = dict["EventAesKey"] as? String {
            self.eventAesKey = value
        }
        if let value = dict["EventLabel"] as? String {
            self.eventLabel = value
        }
        if let value = dict["EventVerifyToken"] as? String {
            self.eventVerifyToken = value
        }
        if let value = dict["RedirectUri"] as? String {
            self.redirectUri = value
        }
    }
}

public class IdpIdaas2SubConfig : Tea.TeaModel {
    public var applicationId: String?

    public var clientId: String?

    public var clientSecret: String?

    public var eventAesKey: String?

    public var eventLabel: String?

    public var instanceId: String?

    public var publicKeyEndpoint: String?

    public var region: String?

    public var samlMetadata: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.applicationId != nil {
            map["ApplicationId"] = self.applicationId!
        }
        if self.clientId != nil {
            map["ClientId"] = self.clientId!
        }
        if self.clientSecret != nil {
            map["ClientSecret"] = self.clientSecret!
        }
        if self.eventAesKey != nil {
            map["EventAesKey"] = self.eventAesKey!
        }
        if self.eventLabel != nil {
            map["EventLabel"] = self.eventLabel!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.publicKeyEndpoint != nil {
            map["PublicKeyEndpoint"] = self.publicKeyEndpoint!
        }
        if self.region != nil {
            map["Region"] = self.region!
        }
        if self.samlMetadata != nil {
            map["SamlMetadata"] = self.samlMetadata!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApplicationId"] as? String {
            self.applicationId = value
        }
        if let value = dict["ClientId"] as? String {
            self.clientId = value
        }
        if let value = dict["ClientSecret"] as? String {
            self.clientSecret = value
        }
        if let value = dict["EventAesKey"] as? String {
            self.eventAesKey = value
        }
        if let value = dict["EventLabel"] as? String {
            self.eventLabel = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["PublicKeyEndpoint"] as? String {
            self.publicKeyEndpoint = value
        }
        if let value = dict["Region"] as? String {
            self.region = value
        }
        if let value = dict["SamlMetadata"] as? String {
            self.samlMetadata = value
        }
    }
}

public class IdpLdapSubConfig : Tea.TeaModel {
    public var baseDn: String?

    public var groupBaseDn: String?

    public var groupFilter: String?

    public var groupMembershipAttr: String?

    public var groupNameAttr: String?

    public var loginNameAttr: String?

    public var serverAddr: String?

    public var serverPort: String?

    public var serverType: String?

    public var useSsl: Bool?

    public var userDn: String?

    public var userFilter: String?

    public var userPassword: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseDn != nil {
            map["BaseDn"] = self.baseDn!
        }
        if self.groupBaseDn != nil {
            map["GroupBaseDn"] = self.groupBaseDn!
        }
        if self.groupFilter != nil {
            map["GroupFilter"] = self.groupFilter!
        }
        if self.groupMembershipAttr != nil {
            map["GroupMembershipAttr"] = self.groupMembershipAttr!
        }
        if self.groupNameAttr != nil {
            map["GroupNameAttr"] = self.groupNameAttr!
        }
        if self.loginNameAttr != nil {
            map["LoginNameAttr"] = self.loginNameAttr!
        }
        if self.serverAddr != nil {
            map["ServerAddr"] = self.serverAddr!
        }
        if self.serverPort != nil {
            map["ServerPort"] = self.serverPort!
        }
        if self.serverType != nil {
            map["ServerType"] = self.serverType!
        }
        if self.useSsl != nil {
            map["UseSsl"] = self.useSsl!
        }
        if self.userDn != nil {
            map["UserDn"] = self.userDn!
        }
        if self.userFilter != nil {
            map["UserFilter"] = self.userFilter!
        }
        if self.userPassword != nil {
            map["UserPassword"] = self.userPassword!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseDn"] as? String {
            self.baseDn = value
        }
        if let value = dict["GroupBaseDn"] as? String {
            self.groupBaseDn = value
        }
        if let value = dict["GroupFilter"] as? String {
            self.groupFilter = value
        }
        if let value = dict["GroupMembershipAttr"] as? String {
            self.groupMembershipAttr = value
        }
        if let value = dict["GroupNameAttr"] as? String {
            self.groupNameAttr = value
        }
        if let value = dict["LoginNameAttr"] as? String {
            self.loginNameAttr = value
        }
        if let value = dict["ServerAddr"] as? String {
            self.serverAddr = value
        }
        if let value = dict["ServerPort"] as? String {
            self.serverPort = value
        }
        if let value = dict["ServerType"] as? String {
            self.serverType = value
        }
        if let value = dict["UseSsl"] as? Bool {
            self.useSsl = value
        }
        if let value = dict["UserDn"] as? String {
            self.userDn = value
        }
        if let value = dict["UserFilter"] as? String {
            self.userFilter = value
        }
        if let value = dict["UserPassword"] as? String {
            self.userPassword = value
        }
    }
}

public class IdpLoginConfig : Tea.TeaModel {
    public var mobileLoginType: String?

    public var mobileMfaTypes: String?

    public var pcLoginType: String?

    public var pcMfaTypes: String?

    public var totpCorpVerifyAesKey: String?

    public var totpCorpVerifyToken: String?

    public var totpCorpVerifyUrl: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.mobileLoginType != nil {
            map["MobileLoginType"] = self.mobileLoginType!
        }
        if self.mobileMfaTypes != nil {
            map["MobileMfaTypes"] = self.mobileMfaTypes!
        }
        if self.pcLoginType != nil {
            map["PcLoginType"] = self.pcLoginType!
        }
        if self.pcMfaTypes != nil {
            map["PcMfaTypes"] = self.pcMfaTypes!
        }
        if self.totpCorpVerifyAesKey != nil {
            map["TotpCorpVerifyAesKey"] = self.totpCorpVerifyAesKey!
        }
        if self.totpCorpVerifyToken != nil {
            map["TotpCorpVerifyToken"] = self.totpCorpVerifyToken!
        }
        if self.totpCorpVerifyUrl != nil {
            map["TotpCorpVerifyUrl"] = self.totpCorpVerifyUrl!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["MobileLoginType"] as? String {
            self.mobileLoginType = value
        }
        if let value = dict["MobileMfaTypes"] as? String {
            self.mobileMfaTypes = value
        }
        if let value = dict["PcLoginType"] as? String {
            self.pcLoginType = value
        }
        if let value = dict["PcMfaTypes"] as? String {
            self.pcMfaTypes = value
        }
        if let value = dict["TotpCorpVerifyAesKey"] as? String {
            self.totpCorpVerifyAesKey = value
        }
        if let value = dict["TotpCorpVerifyToken"] as? String {
            self.totpCorpVerifyToken = value
        }
        if let value = dict["TotpCorpVerifyUrl"] as? String {
            self.totpCorpVerifyUrl = value
        }
    }
}

public class IdpLoginOrderItem : Tea.TeaModel {
    public var class_: String?

    public var configId: String?

    public var desc: String?

    public var enabled: Bool?

    public var name: String?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.class_ != nil {
            map["Class"] = self.class_!
        }
        if self.configId != nil {
            map["ConfigId"] = self.configId!
        }
        if self.desc != nil {
            map["Desc"] = self.desc!
        }
        if self.enabled != nil {
            map["Enabled"] = self.enabled!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Class"] as? String {
            self.class_ = value
        }
        if let value = dict["ConfigId"] as? String {
            self.configId = value
        }
        if let value = dict["Desc"] as? String {
            self.desc = value
        }
        if let value = dict["Enabled"] as? Bool {
            self.enabled = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
    }
}

public class IdpSyncConfig : Tea.TeaModel {
    public class IdpDepartmentInfos : Tea.TeaModel {
        public var id: String?

        public var name: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Id"] as? String {
                self.id = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
        }
    }
    public var autoSyncEnabled: Bool?

    public var idpDepartmentInfos: [IdpSyncConfig.IdpDepartmentInfos]?

    public var scheduleSyncIntervalSecond: Int64?

    public var userSyncEnabled: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.autoSyncEnabled != nil {
            map["AutoSyncEnabled"] = self.autoSyncEnabled!
        }
        if self.idpDepartmentInfos != nil {
            var tmp : [Any] = []
            for k in self.idpDepartmentInfos! {
                tmp.append(k.toMap())
            }
            map["IdpDepartmentInfos"] = tmp
        }
        if self.scheduleSyncIntervalSecond != nil {
            map["ScheduleSyncIntervalSecond"] = self.scheduleSyncIntervalSecond!
        }
        if self.userSyncEnabled != nil {
            map["UserSyncEnabled"] = self.userSyncEnabled!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AutoSyncEnabled"] as? Bool {
            self.autoSyncEnabled = value
        }
        if let value = dict["IdpDepartmentInfos"] as? [Any?] {
            var tmp : [IdpSyncConfig.IdpDepartmentInfos] = []
            for v in value {
                if v != nil {
                    var model = IdpSyncConfig.IdpDepartmentInfos()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.idpDepartmentInfos = tmp
        }
        if let value = dict["ScheduleSyncIntervalSecond"] as? Int64 {
            self.scheduleSyncIntervalSecond = value
        }
        if let value = dict["UserSyncEnabled"] as? Bool {
            self.userSyncEnabled = value
        }
    }
}

public class IdpWeixin2SubConfig : Tea.TeaModel {
    public var agentId: String?

    public var appSchema: String?

    public var appSecret: String?

    public var corpId: String?

    public var eventAesKey: String?

    public var eventLabel: String?

    public var eventVerifyToken: String?

    public var redirectUri: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentId != nil {
            map["AgentId"] = self.agentId!
        }
        if self.appSchema != nil {
            map["AppSchema"] = self.appSchema!
        }
        if self.appSecret != nil {
            map["AppSecret"] = self.appSecret!
        }
        if self.corpId != nil {
            map["CorpId"] = self.corpId!
        }
        if self.eventAesKey != nil {
            map["EventAesKey"] = self.eventAesKey!
        }
        if self.eventLabel != nil {
            map["EventLabel"] = self.eventLabel!
        }
        if self.eventVerifyToken != nil {
            map["EventVerifyToken"] = self.eventVerifyToken!
        }
        if self.redirectUri != nil {
            map["RedirectUri"] = self.redirectUri!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentId"] as? String {
            self.agentId = value
        }
        if let value = dict["AppSchema"] as? String {
            self.appSchema = value
        }
        if let value = dict["AppSecret"] as? String {
            self.appSecret = value
        }
        if let value = dict["CorpId"] as? String {
            self.corpId = value
        }
        if let value = dict["EventAesKey"] as? String {
            self.eventAesKey = value
        }
        if let value = dict["EventLabel"] as? String {
            self.eventLabel = value
        }
        if let value = dict["EventVerifyToken"] as? String {
            self.eventVerifyToken = value
        }
        if let value = dict["RedirectUri"] as? String {
            self.redirectUri = value
        }
    }
}

public class OpenStructIdpSyncRecord : Tea.TeaModel {
    public var action: String?

    public var idpRawJson: String?

    public var idpResourceId: String?

    public var name: String?

    public var recordType: String?

    public var saseRawJson: String?

    public var saseResourceId: String?

    public var success: Bool?

    public var syncRecordId: String?

    public var syncTaskId: String?

    public var timeUnix: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.action != nil {
            map["Action"] = self.action!
        }
        if self.idpRawJson != nil {
            map["IdpRawJson"] = self.idpRawJson!
        }
        if self.idpResourceId != nil {
            map["IdpResourceId"] = self.idpResourceId!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.recordType != nil {
            map["RecordType"] = self.recordType!
        }
        if self.saseRawJson != nil {
            map["SaseRawJson"] = self.saseRawJson!
        }
        if self.saseResourceId != nil {
            map["SaseResourceId"] = self.saseResourceId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.syncRecordId != nil {
            map["SyncRecordId"] = self.syncRecordId!
        }
        if self.syncTaskId != nil {
            map["SyncTaskId"] = self.syncTaskId!
        }
        if self.timeUnix != nil {
            map["TimeUnix"] = self.timeUnix!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Action"] as? String {
            self.action = value
        }
        if let value = dict["IdpRawJson"] as? String {
            self.idpRawJson = value
        }
        if let value = dict["IdpResourceId"] as? String {
            self.idpResourceId = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["RecordType"] as? String {
            self.recordType = value
        }
        if let value = dict["SaseRawJson"] as? String {
            self.saseRawJson = value
        }
        if let value = dict["SaseResourceId"] as? String {
            self.saseResourceId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
        if let value = dict["SyncRecordId"] as? String {
            self.syncRecordId = value
        }
        if let value = dict["SyncTaskId"] as? String {
            self.syncTaskId = value
        }
        if let value = dict["TimeUnix"] as? String {
            self.timeUnix = value
        }
    }
}

public class OpenStructIdpSyncTask : Tea.TeaModel {
    public var departmentFailed: Int64?

    public var departmentTotal: Int64?

    public var endTimeUnix: Int64?

    public var failType: String?

    public var idpConfigId: [UInt8]?

    public var startTimeUnix: Int64?

    public var status: String?

    public var syncTaskId: String?

    public var updateTimeUnix: Int64?

    public var userFailed: Int64?

    public var userTotal: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.departmentFailed != nil {
            map["DepartmentFailed"] = self.departmentFailed!
        }
        if self.departmentTotal != nil {
            map["DepartmentTotal"] = self.departmentTotal!
        }
        if self.endTimeUnix != nil {
            map["EndTimeUnix"] = self.endTimeUnix!
        }
        if self.failType != nil {
            map["FailType"] = self.failType!
        }
        if self.idpConfigId != nil {
            map["IdpConfigId"] = self.idpConfigId!
        }
        if self.startTimeUnix != nil {
            map["StartTimeUnix"] = self.startTimeUnix!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        if self.syncTaskId != nil {
            map["SyncTaskId"] = self.syncTaskId!
        }
        if self.updateTimeUnix != nil {
            map["UpdateTimeUnix"] = self.updateTimeUnix!
        }
        if self.userFailed != nil {
            map["UserFailed"] = self.userFailed!
        }
        if self.userTotal != nil {
            map["UserTotal"] = self.userTotal!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DepartmentFailed"] as? Int64 {
            self.departmentFailed = value
        }
        if let value = dict["DepartmentTotal"] as? Int64 {
            self.departmentTotal = value
        }
        if let value = dict["EndTimeUnix"] as? Int64 {
            self.endTimeUnix = value
        }
        if let value = dict["FailType"] as? String {
            self.failType = value
        }
        if let value = dict["IdpConfigId"] as? [UInt8] {
            self.idpConfigId = value
        }
        if let value = dict["StartTimeUnix"] as? Int64 {
            self.startTimeUnix = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
        if let value = dict["SyncTaskId"] as? String {
            self.syncTaskId = value
        }
        if let value = dict["UpdateTimeUnix"] as? Int64 {
            self.updateTimeUnix = value
        }
        if let value = dict["UserFailed"] as? Int64 {
            self.userFailed = value
        }
        if let value = dict["UserTotal"] as? Int64 {
            self.userTotal = value
        }
    }
}

public class OpenStructIdpWuyingSubConfig : Tea.TeaModel {
    public var aliuids: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.aliuids != nil {
            map["Aliuids"] = self.aliuids!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Aliuids"] as? [String] {
            self.aliuids = value
        }
    }
}

public class OpenStructSaseDepartment : Tea.TeaModel {
    public var departmentId: String?

    public var fullDn: String?

    public var name: String?

    public var parentDepartmentId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.departmentId != nil {
            map["DepartmentId"] = self.departmentId!
        }
        if self.fullDn != nil {
            map["FullDn"] = self.fullDn!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.parentDepartmentId != nil {
            map["ParentDepartmentId"] = self.parentDepartmentId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DepartmentId"] as? String {
            self.departmentId = value
        }
        if let value = dict["FullDn"] as? String {
            self.fullDn = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["ParentDepartmentId"] as? String {
            self.parentDepartmentId = value
        }
    }
}

public class OpenStructSaseUser : Tea.TeaModel {
    public var createTimeUnix: Int64?

    public var customFields: [IdpCustomField]?

    public var departments: [OpenStructSaseDepartment]?

    public var email: String?

    public var idpConfigId: String?

    public var leaveTimeUnix: Int64?

    public var loginTimeUnix: Int64?

    public var saseUserId: String?

    public var saseUserStatus: String?

    public var syncTimeUnix: Int64?

    public var telephone: String?

    public var title: String?

    public var updateTimeUnix: Int64?

    public var username: String?

    public var workStatus: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.createTimeUnix != nil {
            map["CreateTimeUnix"] = self.createTimeUnix!
        }
        if self.customFields != nil {
            var tmp : [Any] = []
            for k in self.customFields! {
                tmp.append(k.toMap())
            }
            map["CustomFields"] = tmp
        }
        if self.departments != nil {
            var tmp : [Any] = []
            for k in self.departments! {
                tmp.append(k.toMap())
            }
            map["Departments"] = tmp
        }
        if self.email != nil {
            map["Email"] = self.email!
        }
        if self.idpConfigId != nil {
            map["IdpConfigId"] = self.idpConfigId!
        }
        if self.leaveTimeUnix != nil {
            map["LeaveTimeUnix"] = self.leaveTimeUnix!
        }
        if self.loginTimeUnix != nil {
            map["LoginTimeUnix"] = self.loginTimeUnix!
        }
        if self.saseUserId != nil {
            map["SaseUserId"] = self.saseUserId!
        }
        if self.saseUserStatus != nil {
            map["SaseUserStatus"] = self.saseUserStatus!
        }
        if self.syncTimeUnix != nil {
            map["SyncTimeUnix"] = self.syncTimeUnix!
        }
        if self.telephone != nil {
            map["Telephone"] = self.telephone!
        }
        if self.title != nil {
            map["Title"] = self.title!
        }
        if self.updateTimeUnix != nil {
            map["UpdateTimeUnix"] = self.updateTimeUnix!
        }
        if self.username != nil {
            map["Username"] = self.username!
        }
        if self.workStatus != nil {
            map["WorkStatus"] = self.workStatus!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CreateTimeUnix"] as? Int64 {
            self.createTimeUnix = value
        }
        if let value = dict["CustomFields"] as? [Any?] {
            var tmp : [IdpCustomField] = []
            for v in value {
                if v != nil {
                    var model = IdpCustomField()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.customFields = tmp
        }
        if let value = dict["Departments"] as? [Any?] {
            var tmp : [OpenStructSaseDepartment] = []
            for v in value {
                if v != nil {
                    var model = OpenStructSaseDepartment()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.departments = tmp
        }
        if let value = dict["Email"] as? String {
            self.email = value
        }
        if let value = dict["IdpConfigId"] as? String {
            self.idpConfigId = value
        }
        if let value = dict["LeaveTimeUnix"] as? Int64 {
            self.leaveTimeUnix = value
        }
        if let value = dict["LoginTimeUnix"] as? Int64 {
            self.loginTimeUnix = value
        }
        if let value = dict["SaseUserId"] as? String {
            self.saseUserId = value
        }
        if let value = dict["SaseUserStatus"] as? String {
            self.saseUserStatus = value
        }
        if let value = dict["SyncTimeUnix"] as? Int64 {
            self.syncTimeUnix = value
        }
        if let value = dict["Telephone"] as? String {
            self.telephone = value
        }
        if let value = dict["Title"] as? String {
            self.title = value
        }
        if let value = dict["UpdateTimeUnix"] as? Int64 {
            self.updateTimeUnix = value
        }
        if let value = dict["Username"] as? String {
            self.username = value
        }
        if let value = dict["WorkStatus"] as? String {
            self.workStatus = value
        }
    }
}

public class OpenStructSaseUserSimple : Tea.TeaModel {
    public class Departments : Tea.TeaModel {
        public var departmentId: String?

        public var name: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.departmentId != nil {
                map["DepartmentId"] = self.departmentId!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DepartmentId"] as? String {
                self.departmentId = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
        }
    }
    public var departments: [OpenStructSaseUserSimple.Departments]?

    public var email: String?

    public var idpConfigId: String?

    public var saseUserId: String?

    public var telephone: String?

    public var username: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.departments != nil {
            var tmp : [Any] = []
            for k in self.departments! {
                tmp.append(k.toMap())
            }
            map["Departments"] = tmp
        }
        if self.email != nil {
            map["Email"] = self.email!
        }
        if self.idpConfigId != nil {
            map["IdpConfigId"] = self.idpConfigId!
        }
        if self.saseUserId != nil {
            map["SaseUserId"] = self.saseUserId!
        }
        if self.telephone != nil {
            map["Telephone"] = self.telephone!
        }
        if self.username != nil {
            map["Username"] = self.username!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Departments"] as? [Any?] {
            var tmp : [OpenStructSaseUserSimple.Departments] = []
            for v in value {
                if v != nil {
                    var model = OpenStructSaseUserSimple.Departments()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.departments = tmp
        }
        if let value = dict["Email"] as? String {
            self.email = value
        }
        if let value = dict["IdpConfigId"] as? String {
            self.idpConfigId = value
        }
        if let value = dict["SaseUserId"] as? String {
            self.saseUserId = value
        }
        if let value = dict["Telephone"] as? String {
            self.telephone = value
        }
        if let value = dict["Username"] as? String {
            self.username = value
        }
    }
}

public class PAL7Config : Tea.TeaModel {
    public class BypassConfig : Tea.TeaModel {
        public class UrlBypassRules : Tea.TeaModel {
            public var froms: [String]?

            public var paths: [String]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.froms != nil {
                    map["Froms"] = self.froms!
                }
                if self.paths != nil {
                    map["Paths"] = self.paths!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Froms"] as? [String] {
                    self.froms = value
                }
                if let value = dict["Paths"] as? [String] {
                    self.paths = value
                }
            }
        }
        public var appBypassFroms: [String]?

        public var mode: String?

        public var urlBypassRules: [PAL7Config.BypassConfig.UrlBypassRules]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.appBypassFroms != nil {
                map["AppBypassFroms"] = self.appBypassFroms!
            }
            if self.mode != nil {
                map["Mode"] = self.mode!
            }
            if self.urlBypassRules != nil {
                var tmp : [Any] = []
                for k in self.urlBypassRules! {
                    tmp.append(k.toMap())
                }
                map["UrlBypassRules"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AppBypassFroms"] as? [String] {
                self.appBypassFroms = value
            }
            if let value = dict["Mode"] as? String {
                self.mode = value
            }
            if let value = dict["UrlBypassRules"] as? [Any?] {
                var tmp : [PAL7Config.BypassConfig.UrlBypassRules] = []
                for v in value {
                    if v != nil {
                        var model = PAL7Config.BypassConfig.UrlBypassRules()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.urlBypassRules = tmp
            }
        }
    }
    public class DnsConfig : Tea.TeaModel {
        public var dnsServers: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.dnsServers != nil {
                map["DnsServers"] = self.dnsServers!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DnsServers"] as? [String] {
                self.dnsServers = value
            }
        }
    }
    public class JsHookConfig : Tea.TeaModel {
        public var mode: String?

        public var replaceRules: [PAL7ConfigReplaceRule]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.mode != nil {
                map["Mode"] = self.mode!
            }
            if self.replaceRules != nil {
                var tmp : [Any] = []
                for k in self.replaceRules! {
                    tmp.append(k.toMap())
                }
                map["ReplaceRules"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Mode"] as? String {
                self.mode = value
            }
            if let value = dict["ReplaceRules"] as? [Any?] {
                var tmp : [PAL7ConfigReplaceRule] = []
                for v in value {
                    if v != nil {
                        var model = PAL7ConfigReplaceRule()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.replaceRules = tmp
            }
        }
    }
    public class RequestHeaderRewriteConfig : Tea.TeaModel {
        public var ops: [PAL7ConfigRewriteOp]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.ops != nil {
                var tmp : [Any] = []
                for k in self.ops! {
                    tmp.append(k.toMap())
                }
                map["Ops"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Ops"] as? [Any?] {
                var tmp : [PAL7ConfigRewriteOp] = []
                for v in value {
                    if v != nil {
                        var model = PAL7ConfigRewriteOp()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.ops = tmp
            }
        }
    }
    public class RequestQueryRewriteConfig : Tea.TeaModel {
        public var ops: [PAL7ConfigRewriteOp]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.ops != nil {
                var tmp : [Any] = []
                for k in self.ops! {
                    tmp.append(k.toMap())
                }
                map["Ops"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Ops"] as? [Any?] {
                var tmp : [PAL7ConfigRewriteOp] = []
                for v in value {
                    if v != nil {
                        var model = PAL7ConfigRewriteOp()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.ops = tmp
            }
        }
    }
    public class ResponseHeaderRewriteConfig : Tea.TeaModel {
        public var ops: [PAL7ConfigRewriteOp]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.ops != nil {
                var tmp : [Any] = []
                for k in self.ops! {
                    tmp.append(k.toMap())
                }
                map["Ops"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Ops"] as? [Any?] {
                var tmp : [PAL7ConfigRewriteOp] = []
                for v in value {
                    if v != nil {
                        var model = PAL7ConfigRewriteOp()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.ops = tmp
            }
        }
    }
    public class ResponseRewriteConfig : Tea.TeaModel {
        public var mode: String?

        public var replaceRules: [PAL7ConfigReplaceRule]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.mode != nil {
                map["Mode"] = self.mode!
            }
            if self.replaceRules != nil {
                var tmp : [Any] = []
                for k in self.replaceRules! {
                    tmp.append(k.toMap())
                }
                map["ReplaceRules"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Mode"] as? String {
                self.mode = value
            }
            if let value = dict["ReplaceRules"] as? [Any?] {
                var tmp : [PAL7ConfigReplaceRule] = []
                for v in value {
                    if v != nil {
                        var model = PAL7ConfigReplaceRule()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.replaceRules = tmp
            }
        }
    }
    public var bypassConfig: PAL7Config.BypassConfig?

    public var certId: String?

    public var dnsConfig: PAL7Config.DnsConfig?

    public var jsHookConfig: PAL7Config.JsHookConfig?

    public var proxyDomainTypes: [UInt8]?

    public var requestHeaderRewriteConfig: PAL7Config.RequestHeaderRewriteConfig?

    public var requestQueryRewriteConfig: PAL7Config.RequestQueryRewriteConfig?

    public var responseHeaderRewriteConfig: PAL7Config.ResponseHeaderRewriteConfig?

    public var responseRewriteConfig: PAL7Config.ResponseRewriteConfig?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.bypassConfig?.validate()
        try self.dnsConfig?.validate()
        try self.jsHookConfig?.validate()
        try self.requestHeaderRewriteConfig?.validate()
        try self.requestQueryRewriteConfig?.validate()
        try self.responseHeaderRewriteConfig?.validate()
        try self.responseRewriteConfig?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.bypassConfig != nil {
            map["BypassConfig"] = self.bypassConfig?.toMap()
        }
        if self.certId != nil {
            map["CertId"] = self.certId!
        }
        if self.dnsConfig != nil {
            map["DnsConfig"] = self.dnsConfig?.toMap()
        }
        if self.jsHookConfig != nil {
            map["JsHookConfig"] = self.jsHookConfig?.toMap()
        }
        if self.proxyDomainTypes != nil {
            map["ProxyDomainTypes"] = self.proxyDomainTypes!
        }
        if self.requestHeaderRewriteConfig != nil {
            map["RequestHeaderRewriteConfig"] = self.requestHeaderRewriteConfig?.toMap()
        }
        if self.requestQueryRewriteConfig != nil {
            map["RequestQueryRewriteConfig"] = self.requestQueryRewriteConfig?.toMap()
        }
        if self.responseHeaderRewriteConfig != nil {
            map["ResponseHeaderRewriteConfig"] = self.responseHeaderRewriteConfig?.toMap()
        }
        if self.responseRewriteConfig != nil {
            map["ResponseRewriteConfig"] = self.responseRewriteConfig?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BypassConfig"] as? [String: Any?] {
            var model = PAL7Config.BypassConfig()
            model.fromMap(value)
            self.bypassConfig = model
        }
        if let value = dict["CertId"] as? String {
            self.certId = value
        }
        if let value = dict["DnsConfig"] as? [String: Any?] {
            var model = PAL7Config.DnsConfig()
            model.fromMap(value)
            self.dnsConfig = model
        }
        if let value = dict["JsHookConfig"] as? [String: Any?] {
            var model = PAL7Config.JsHookConfig()
            model.fromMap(value)
            self.jsHookConfig = model
        }
        if let value = dict["ProxyDomainTypes"] as? [UInt8] {
            self.proxyDomainTypes = value
        }
        if let value = dict["RequestHeaderRewriteConfig"] as? [String: Any?] {
            var model = PAL7Config.RequestHeaderRewriteConfig()
            model.fromMap(value)
            self.requestHeaderRewriteConfig = model
        }
        if let value = dict["RequestQueryRewriteConfig"] as? [String: Any?] {
            var model = PAL7Config.RequestQueryRewriteConfig()
            model.fromMap(value)
            self.requestQueryRewriteConfig = model
        }
        if let value = dict["ResponseHeaderRewriteConfig"] as? [String: Any?] {
            var model = PAL7Config.ResponseHeaderRewriteConfig()
            model.fromMap(value)
            self.responseHeaderRewriteConfig = model
        }
        if let value = dict["ResponseRewriteConfig"] as? [String: Any?] {
            var model = PAL7Config.ResponseRewriteConfig()
            model.fromMap(value)
            self.responseRewriteConfig = model
        }
    }
}

public class PAL7ConfigReplaceRule : Tea.TeaModel {
    public var from: String?

    public var to: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.from != nil {
            map["From"] = self.from!
        }
        if self.to != nil {
            map["To"] = self.to!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["From"] as? String {
            self.from = value
        }
        if let value = dict["To"] as? String {
            self.to = value
        }
    }
}

public class PAL7ConfigRewriteOp : Tea.TeaModel {
    public var key: String?

    public var oldValue: String?

    public var op: String?

    public var value: String?

    public var valueVariable: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.key != nil {
            map["Key"] = self.key!
        }
        if self.oldValue != nil {
            map["OldValue"] = self.oldValue!
        }
        if self.op != nil {
            map["Op"] = self.op!
        }
        if self.value != nil {
            map["Value"] = self.value!
        }
        if self.valueVariable != nil {
            map["ValueVariable"] = self.valueVariable!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Key"] as? String {
            self.key = value
        }
        if let value = dict["OldValue"] as? String {
            self.oldValue = value
        }
        if let value = dict["Op"] as? String {
            self.op = value
        }
        if let value = dict["Value"] as? String {
            self.value = value
        }
        if let value = dict["ValueVariable"] as? String {
            self.valueVariable = value
        }
    }
}

public class ProcessGroup : Tea.TeaModel {
    public var description_: String?

    public var gmtCreate: String?

    public var gmtModified: String?

    public var name: String?

    public var processGroupId: String?

    public var processes: [ProcessItem]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.gmtCreate != nil {
            map["GmtCreate"] = self.gmtCreate!
        }
        if self.gmtModified != nil {
            map["GmtModified"] = self.gmtModified!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.processGroupId != nil {
            map["ProcessGroupId"] = self.processGroupId!
        }
        if self.processes != nil {
            var tmp : [Any] = []
            for k in self.processes! {
                tmp.append(k.toMap())
            }
            map["Processes"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["GmtCreate"] as? String {
            self.gmtCreate = value
        }
        if let value = dict["GmtModified"] as? String {
            self.gmtModified = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["ProcessGroupId"] as? String {
            self.processGroupId = value
        }
        if let value = dict["Processes"] as? [Any?] {
            var tmp : [ProcessItem] = []
            for v in value {
                if v != nil {
                    var model = ProcessItem()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.processes = tmp
        }
    }
}

public class ProcessItem : Tea.TeaModel {
    public var bundleId: String?

    public var devType: String?

    public var directory: String?

    public var process: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.bundleId != nil {
            map["BundleId"] = self.bundleId!
        }
        if self.devType != nil {
            map["DevType"] = self.devType!
        }
        if self.directory != nil {
            map["Directory"] = self.directory!
        }
        if self.process != nil {
            map["Process"] = self.process!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BundleId"] as? String {
            self.bundleId = value
        }
        if let value = dict["DevType"] as? String {
            self.devType = value
        }
        if let value = dict["Directory"] as? String {
            self.directory = value
        }
        if let value = dict["Process"] as? String {
            self.process = value
        }
    }
}

public class RecoveryContent : Tea.TeaModel {
    public var authReportInterval: AuthReportInterval?

    public var recoveryActions: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.authReportInterval?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.authReportInterval != nil {
            map["AuthReportInterval"] = self.authReportInterval?.toMap()
        }
        if self.recoveryActions != nil {
            map["RecoveryActions"] = self.recoveryActions!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AuthReportInterval"] as? [String: Any?] {
            var model = AuthReportInterval()
            model.fromMap(value)
            self.authReportInterval = model
        }
        if let value = dict["RecoveryActions"] as? [String] {
            self.recoveryActions = value
        }
    }
}

public class RiskSceneConfig : Tea.TeaModel {
    public var detectChannel: [String]?

    public var officeChannel: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.detectChannel != nil {
            map["DetectChannel"] = self.detectChannel!
        }
        if self.officeChannel != nil {
            map["OfficeChannel"] = self.officeChannel!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DetectChannel"] as? [String] {
            self.detectChannel = value
        }
        if let value = dict["OfficeChannel"] as? [String] {
            self.officeChannel = value
        }
    }
}

public class Rule : Tea.TeaModel {
    public var combinator: String?

    public var id: String?

    public var name: String?

    public var operator_: String?

    public var ruleSubType: String?

    public var ruleType: String?

    public var rules: [Rule]?

    public var values: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.combinator != nil {
            map["Combinator"] = self.combinator!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.operator_ != nil {
            map["Operator"] = self.operator_!
        }
        if self.ruleSubType != nil {
            map["RuleSubType"] = self.ruleSubType!
        }
        if self.ruleType != nil {
            map["RuleType"] = self.ruleType!
        }
        if self.rules != nil {
            var tmp : [Any] = []
            for k in self.rules! {
                tmp.append(k.toMap())
            }
            map["Rules"] = tmp
        }
        if self.values != nil {
            map["Values"] = self.values!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Combinator"] as? String {
            self.combinator = value
        }
        if let value = dict["Id"] as? String {
            self.id = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["Operator"] as? String {
            self.operator_ = value
        }
        if let value = dict["RuleSubType"] as? String {
            self.ruleSubType = value
        }
        if let value = dict["RuleType"] as? String {
            self.ruleType = value
        }
        if let value = dict["Rules"] as? [Any?] {
            var tmp : [Rule] = []
            for v in value {
                if v != nil {
                    var model = Rule()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.rules = tmp
        }
        if let value = dict["Values"] as? [String] {
            self.values = value
        }
    }
}

public class UserCertificate : Tea.TeaModel {
    public var certId: String?

    public var certificate: String?

    public var description_: String?

    public var dnsNames: [String]?

    public var expTimeUnix: Int64?

    public var gmtCreateUnix: Int64?

    public var gmtModifiedUnix: Int64?

    public var name: String?

    public var privateKey: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.certId != nil {
            map["CertId"] = self.certId!
        }
        if self.certificate != nil {
            map["Certificate"] = self.certificate!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.dnsNames != nil {
            map["DnsNames"] = self.dnsNames!
        }
        if self.expTimeUnix != nil {
            map["ExpTimeUnix"] = self.expTimeUnix!
        }
        if self.gmtCreateUnix != nil {
            map["GmtCreateUnix"] = self.gmtCreateUnix!
        }
        if self.gmtModifiedUnix != nil {
            map["GmtModifiedUnix"] = self.gmtModifiedUnix!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.privateKey != nil {
            map["PrivateKey"] = self.privateKey!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CertId"] as? String {
            self.certId = value
        }
        if let value = dict["Certificate"] as? String {
            self.certificate = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["DnsNames"] as? [String] {
            self.dnsNames = value
        }
        if let value = dict["ExpTimeUnix"] as? Int64 {
            self.expTimeUnix = value
        }
        if let value = dict["GmtCreateUnix"] as? Int64 {
            self.gmtCreateUnix = value
        }
        if let value = dict["GmtModifiedUnix"] as? Int64 {
            self.gmtModifiedUnix = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["PrivateKey"] as? String {
            self.privateKey = value
        }
    }
}

public class AttachApplication2ConnectorRequest : Tea.TeaModel {
    public var applicationIds: [String]?

    public var connectorId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.applicationIds != nil {
            map["ApplicationIds"] = self.applicationIds!
        }
        if self.connectorId != nil {
            map["ConnectorId"] = self.connectorId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApplicationIds"] as? [String] {
            self.applicationIds = value
        }
        if let value = dict["ConnectorId"] as? String {
            self.connectorId = value
        }
    }
}

public class AttachApplication2ConnectorShrinkRequest : Tea.TeaModel {
    public var applicationIdsShrink: String?

    public var connectorId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.applicationIdsShrink != nil {
            map["ApplicationIds"] = self.applicationIdsShrink!
        }
        if self.connectorId != nil {
            map["ConnectorId"] = self.connectorId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApplicationIds"] as? String {
            self.applicationIdsShrink = value
        }
        if let value = dict["ConnectorId"] as? String {
            self.connectorId = value
        }
    }
}

public class AttachApplication2ConnectorResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class AttachApplication2ConnectorResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AttachApplication2ConnectorResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = AttachApplication2ConnectorResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class AttachPolicy2ApprovalProcessRequest : Tea.TeaModel {
    public var policyId: String?

    public var policyType: String?

    public var processId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.policyId != nil {
            map["PolicyId"] = self.policyId!
        }
        if self.policyType != nil {
            map["PolicyType"] = self.policyType!
        }
        if self.processId != nil {
            map["ProcessId"] = self.processId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PolicyId"] as? String {
            self.policyId = value
        }
        if let value = dict["PolicyType"] as? String {
            self.policyType = value
        }
        if let value = dict["ProcessId"] as? String {
            self.processId = value
        }
    }
}

public class AttachPolicy2ApprovalProcessResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class AttachPolicy2ApprovalProcessResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AttachPolicy2ApprovalProcessResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = AttachPolicy2ApprovalProcessResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateApprovalProcessRequest : Tea.TeaModel {
    public class MatchSchemas : Tea.TeaModel {
        public var appUninstallSchemaId: String?

        public var deviceRegistrationSchemaId: String?

        public var dlpSendSchemaId: String?

        public var domainBlacklistSchemaId: String?

        public var domainWhitelistSchemaId: String?

        public var endpointHardeningSchemaId: String?

        public var peripheralBlockSchemaId: String?

        public var softwareBlockSchemaId: String?

        public var softwareHardeningSchemaId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.appUninstallSchemaId != nil {
                map["AppUninstallSchemaId"] = self.appUninstallSchemaId!
            }
            if self.deviceRegistrationSchemaId != nil {
                map["DeviceRegistrationSchemaId"] = self.deviceRegistrationSchemaId!
            }
            if self.dlpSendSchemaId != nil {
                map["DlpSendSchemaId"] = self.dlpSendSchemaId!
            }
            if self.domainBlacklistSchemaId != nil {
                map["DomainBlacklistSchemaId"] = self.domainBlacklistSchemaId!
            }
            if self.domainWhitelistSchemaId != nil {
                map["DomainWhitelistSchemaId"] = self.domainWhitelistSchemaId!
            }
            if self.endpointHardeningSchemaId != nil {
                map["EndpointHardeningSchemaId"] = self.endpointHardeningSchemaId!
            }
            if self.peripheralBlockSchemaId != nil {
                map["PeripheralBlockSchemaId"] = self.peripheralBlockSchemaId!
            }
            if self.softwareBlockSchemaId != nil {
                map["SoftwareBlockSchemaId"] = self.softwareBlockSchemaId!
            }
            if self.softwareHardeningSchemaId != nil {
                map["SoftwareHardeningSchemaId"] = self.softwareHardeningSchemaId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AppUninstallSchemaId"] as? String {
                self.appUninstallSchemaId = value
            }
            if let value = dict["DeviceRegistrationSchemaId"] as? String {
                self.deviceRegistrationSchemaId = value
            }
            if let value = dict["DlpSendSchemaId"] as? String {
                self.dlpSendSchemaId = value
            }
            if let value = dict["DomainBlacklistSchemaId"] as? String {
                self.domainBlacklistSchemaId = value
            }
            if let value = dict["DomainWhitelistSchemaId"] as? String {
                self.domainWhitelistSchemaId = value
            }
            if let value = dict["EndpointHardeningSchemaId"] as? String {
                self.endpointHardeningSchemaId = value
            }
            if let value = dict["PeripheralBlockSchemaId"] as? String {
                self.peripheralBlockSchemaId = value
            }
            if let value = dict["SoftwareBlockSchemaId"] as? String {
                self.softwareBlockSchemaId = value
            }
            if let value = dict["SoftwareHardeningSchemaId"] as? String {
                self.softwareHardeningSchemaId = value
            }
        }
    }
    public var description_: String?

    public var matchSchemas: CreateApprovalProcessRequest.MatchSchemas?

    public var processName: String?

    public var processNodes: [[String]]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.matchSchemas?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.matchSchemas != nil {
            map["MatchSchemas"] = self.matchSchemas?.toMap()
        }
        if self.processName != nil {
            map["ProcessName"] = self.processName!
        }
        if self.processNodes != nil {
            map["ProcessNodes"] = self.processNodes!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["MatchSchemas"] as? [String: Any?] {
            var model = CreateApprovalProcessRequest.MatchSchemas()
            model.fromMap(value)
            self.matchSchemas = model
        }
        if let value = dict["ProcessName"] as? String {
            self.processName = value
        }
        if let value = dict["ProcessNodes"] as? [[String]] {
            self.processNodes = value
        }
    }
}

public class CreateApprovalProcessShrinkRequest : Tea.TeaModel {
    public var description_: String?

    public var matchSchemasShrink: String?

    public var processName: String?

    public var processNodes: [[String]]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.matchSchemasShrink != nil {
            map["MatchSchemas"] = self.matchSchemasShrink!
        }
        if self.processName != nil {
            map["ProcessName"] = self.processName!
        }
        if self.processNodes != nil {
            map["ProcessNodes"] = self.processNodes!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["MatchSchemas"] as? String {
            self.matchSchemasShrink = value
        }
        if let value = dict["ProcessName"] as? String {
            self.processName = value
        }
        if let value = dict["ProcessNodes"] as? [[String]] {
            self.processNodes = value
        }
    }
}

public class CreateApprovalProcessResponseBody : Tea.TeaModel {
    public class Process : Tea.TeaModel {
        public class AppUninstallPolicies : Tea.TeaModel {
            public var policyIds: [String]?

            public var schemaId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.policyIds != nil {
                    map["PolicyIds"] = self.policyIds!
                }
                if self.schemaId != nil {
                    map["SchemaId"] = self.schemaId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["PolicyIds"] as? [String] {
                    self.policyIds = value
                }
                if let value = dict["SchemaId"] as? String {
                    self.schemaId = value
                }
            }
        }
        public class DeviceRegistrationPolicies : Tea.TeaModel {
            public var policyIds: [String]?

            public var schemaId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.policyIds != nil {
                    map["PolicyIds"] = self.policyIds!
                }
                if self.schemaId != nil {
                    map["SchemaId"] = self.schemaId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["PolicyIds"] as? [String] {
                    self.policyIds = value
                }
                if let value = dict["SchemaId"] as? String {
                    self.schemaId = value
                }
            }
        }
        public class DlpSendPolicies : Tea.TeaModel {
            public var policyIds: [String]?

            public var schemaId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.policyIds != nil {
                    map["PolicyIds"] = self.policyIds!
                }
                if self.schemaId != nil {
                    map["SchemaId"] = self.schemaId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["PolicyIds"] as? [String] {
                    self.policyIds = value
                }
                if let value = dict["SchemaId"] as? String {
                    self.schemaId = value
                }
            }
        }
        public class DomainBlacklistPolicies : Tea.TeaModel {
            public var policyIds: [String]?

            public var schemaId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.policyIds != nil {
                    map["PolicyIds"] = self.policyIds!
                }
                if self.schemaId != nil {
                    map["SchemaId"] = self.schemaId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["PolicyIds"] as? [String] {
                    self.policyIds = value
                }
                if let value = dict["SchemaId"] as? String {
                    self.schemaId = value
                }
            }
        }
        public class DomainWhitelistPolicies : Tea.TeaModel {
            public var policyIds: [String]?

            public var schemaId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.policyIds != nil {
                    map["PolicyIds"] = self.policyIds!
                }
                if self.schemaId != nil {
                    map["SchemaId"] = self.schemaId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["PolicyIds"] as? [String] {
                    self.policyIds = value
                }
                if let value = dict["SchemaId"] as? String {
                    self.schemaId = value
                }
            }
        }
        public class EndpointHardeningPolicies : Tea.TeaModel {
            public var policyIds: [String]?

            public var schemaId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.policyIds != nil {
                    map["PolicyIds"] = self.policyIds!
                }
                if self.schemaId != nil {
                    map["SchemaId"] = self.schemaId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["PolicyIds"] as? [String] {
                    self.policyIds = value
                }
                if let value = dict["SchemaId"] as? String {
                    self.schemaId = value
                }
            }
        }
        public class PeripheralBlockPolicies : Tea.TeaModel {
            public var policyIds: [String]?

            public var schemaId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.policyIds != nil {
                    map["PolicyIds"] = self.policyIds!
                }
                if self.schemaId != nil {
                    map["SchemaId"] = self.schemaId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["PolicyIds"] as? [String] {
                    self.policyIds = value
                }
                if let value = dict["SchemaId"] as? String {
                    self.schemaId = value
                }
            }
        }
        public class ProcessNodes : Tea.TeaModel {
            public var saseUserId: String?

            public var username: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.saseUserId != nil {
                    map["SaseUserId"] = self.saseUserId!
                }
                if self.username != nil {
                    map["Username"] = self.username!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["SaseUserId"] as? String {
                    self.saseUserId = value
                }
                if let value = dict["Username"] as? String {
                    self.username = value
                }
            }
        }
        public class SoftwareBlockPolicies : Tea.TeaModel {
            public var policyIds: [String]?

            public var schemaId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.policyIds != nil {
                    map["PolicyIds"] = self.policyIds!
                }
                if self.schemaId != nil {
                    map["SchemaId"] = self.schemaId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["PolicyIds"] as? [String] {
                    self.policyIds = value
                }
                if let value = dict["SchemaId"] as? String {
                    self.schemaId = value
                }
            }
        }
        public class SoftwareHardeningPolicies : Tea.TeaModel {
            public var policyIds: [String]?

            public var schemaId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.policyIds != nil {
                    map["PolicyIds"] = self.policyIds!
                }
                if self.schemaId != nil {
                    map["SchemaId"] = self.schemaId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["PolicyIds"] as? [String] {
                    self.policyIds = value
                }
                if let value = dict["SchemaId"] as? String {
                    self.schemaId = value
                }
            }
        }
        public var appUninstallPolicies: CreateApprovalProcessResponseBody.Process.AppUninstallPolicies?

        public var createTime: String?

        public var description_: String?

        public var deviceRegistrationPolicies: CreateApprovalProcessResponseBody.Process.DeviceRegistrationPolicies?

        public var dlpSendPolicies: CreateApprovalProcessResponseBody.Process.DlpSendPolicies?

        public var domainBlacklistPolicies: CreateApprovalProcessResponseBody.Process.DomainBlacklistPolicies?

        public var domainWhitelistPolicies: CreateApprovalProcessResponseBody.Process.DomainWhitelistPolicies?

        public var endpointHardeningPolicies: CreateApprovalProcessResponseBody.Process.EndpointHardeningPolicies?

        public var peripheralBlockPolicies: CreateApprovalProcessResponseBody.Process.PeripheralBlockPolicies?

        public var processId: String?

        public var processName: String?

        public var processNodes: [[CreateApprovalProcessResponseBody.Process.ProcessNodes]]?

        public var softwareBlockPolicies: CreateApprovalProcessResponseBody.Process.SoftwareBlockPolicies?

        public var softwareHardeningPolicies: CreateApprovalProcessResponseBody.Process.SoftwareHardeningPolicies?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.appUninstallPolicies?.validate()
            try self.deviceRegistrationPolicies?.validate()
            try self.dlpSendPolicies?.validate()
            try self.domainBlacklistPolicies?.validate()
            try self.domainWhitelistPolicies?.validate()
            try self.endpointHardeningPolicies?.validate()
            try self.peripheralBlockPolicies?.validate()
            try self.softwareBlockPolicies?.validate()
            try self.softwareHardeningPolicies?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.appUninstallPolicies != nil {
                map["AppUninstallPolicies"] = self.appUninstallPolicies?.toMap()
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.deviceRegistrationPolicies != nil {
                map["DeviceRegistrationPolicies"] = self.deviceRegistrationPolicies?.toMap()
            }
            if self.dlpSendPolicies != nil {
                map["DlpSendPolicies"] = self.dlpSendPolicies?.toMap()
            }
            if self.domainBlacklistPolicies != nil {
                map["DomainBlacklistPolicies"] = self.domainBlacklistPolicies?.toMap()
            }
            if self.domainWhitelistPolicies != nil {
                map["DomainWhitelistPolicies"] = self.domainWhitelistPolicies?.toMap()
            }
            if self.endpointHardeningPolicies != nil {
                map["EndpointHardeningPolicies"] = self.endpointHardeningPolicies?.toMap()
            }
            if self.peripheralBlockPolicies != nil {
                map["PeripheralBlockPolicies"] = self.peripheralBlockPolicies?.toMap()
            }
            if self.processId != nil {
                map["ProcessId"] = self.processId!
            }
            if self.processName != nil {
                map["ProcessName"] = self.processName!
            }
            if self.processNodes != nil {
                var tmp : [Any] = []
                for k in self.processNodes! {
                    var l1 : [Any] = []
                    for k1 in k {
                        l1.append(k1.toMap())
                    }
                    tmp.append(l1)
                }
                map["ProcessNodes"] = tmp
            }
            if self.softwareBlockPolicies != nil {
                map["SoftwareBlockPolicies"] = self.softwareBlockPolicies?.toMap()
            }
            if self.softwareHardeningPolicies != nil {
                map["SoftwareHardeningPolicies"] = self.softwareHardeningPolicies?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AppUninstallPolicies"] as? [String: Any?] {
                var model = CreateApprovalProcessResponseBody.Process.AppUninstallPolicies()
                model.fromMap(value)
                self.appUninstallPolicies = model
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["DeviceRegistrationPolicies"] as? [String: Any?] {
                var model = CreateApprovalProcessResponseBody.Process.DeviceRegistrationPolicies()
                model.fromMap(value)
                self.deviceRegistrationPolicies = model
            }
            if let value = dict["DlpSendPolicies"] as? [String: Any?] {
                var model = CreateApprovalProcessResponseBody.Process.DlpSendPolicies()
                model.fromMap(value)
                self.dlpSendPolicies = model
            }
            if let value = dict["DomainBlacklistPolicies"] as? [String: Any?] {
                var model = CreateApprovalProcessResponseBody.Process.DomainBlacklistPolicies()
                model.fromMap(value)
                self.domainBlacklistPolicies = model
            }
            if let value = dict["DomainWhitelistPolicies"] as? [String: Any?] {
                var model = CreateApprovalProcessResponseBody.Process.DomainWhitelistPolicies()
                model.fromMap(value)
                self.domainWhitelistPolicies = model
            }
            if let value = dict["EndpointHardeningPolicies"] as? [String: Any?] {
                var model = CreateApprovalProcessResponseBody.Process.EndpointHardeningPolicies()
                model.fromMap(value)
                self.endpointHardeningPolicies = model
            }
            if let value = dict["PeripheralBlockPolicies"] as? [String: Any?] {
                var model = CreateApprovalProcessResponseBody.Process.PeripheralBlockPolicies()
                model.fromMap(value)
                self.peripheralBlockPolicies = model
            }
            if let value = dict["ProcessId"] as? String {
                self.processId = value
            }
            if let value = dict["ProcessName"] as? String {
                self.processName = value
            }
            if let value = dict["ProcessNodes"] as? [Any?] {
                var tmp : [[CreateApprovalProcessResponseBody.Process.ProcessNodes]] = []
                for v in value {
                    if v != nil {
                        var l1 : [CreateApprovalProcessResponseBody.Process.ProcessNodes] = []
                        for v1 in v as! [Any?] {
                            if v1 != nil {
                                var model = CreateApprovalProcessResponseBody.Process.ProcessNodes()
                                if v1 != nil {
                                    model.fromMap(v1 as? [String: Any?])
                                }
                                l1.append(model)
                            }
                        }
                        tmp.append(l1)
                    }
                }
                self.processNodes = tmp
            }
            if let value = dict["SoftwareBlockPolicies"] as? [String: Any?] {
                var model = CreateApprovalProcessResponseBody.Process.SoftwareBlockPolicies()
                model.fromMap(value)
                self.softwareBlockPolicies = model
            }
            if let value = dict["SoftwareHardeningPolicies"] as? [String: Any?] {
                var model = CreateApprovalProcessResponseBody.Process.SoftwareHardeningPolicies()
                model.fromMap(value)
                self.softwareHardeningPolicies = model
            }
        }
    }
    public var process: CreateApprovalProcessResponseBody.Process?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.process?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.process != nil {
            map["Process"] = self.process?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Process"] as? [String: Any?] {
            var model = CreateApprovalProcessResponseBody.Process()
            model.fromMap(value)
            self.process = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateApprovalProcessResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateApprovalProcessResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateApprovalProcessResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateClientUserRequest : Tea.TeaModel {
    public var departmentId: String?

    public var description_: String?

    public var email: String?

    public var idpConfigId: String?

    public var mobileNumber: String?

    public var password: String?

    public var username: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.departmentId != nil {
            map["DepartmentId"] = self.departmentId!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.email != nil {
            map["Email"] = self.email!
        }
        if self.idpConfigId != nil {
            map["IdpConfigId"] = self.idpConfigId!
        }
        if self.mobileNumber != nil {
            map["MobileNumber"] = self.mobileNumber!
        }
        if self.password != nil {
            map["Password"] = self.password!
        }
        if self.username != nil {
            map["Username"] = self.username!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DepartmentId"] as? String {
            self.departmentId = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["Email"] as? String {
            self.email = value
        }
        if let value = dict["IdpConfigId"] as? String {
            self.idpConfigId = value
        }
        if let value = dict["MobileNumber"] as? String {
            self.mobileNumber = value
        }
        if let value = dict["Password"] as? String {
            self.password = value
        }
        if let value = dict["Username"] as? String {
            self.username = value
        }
    }
}

public class CreateClientUserResponseBody : Tea.TeaModel {
    public var data: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateClientUserResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateClientUserResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateClientUserResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateDynamicRouteRequest : Tea.TeaModel {
    public var applicationIds: [String]?

    public var applicationType: String?

    public var description_: String?

    public var dynamicRouteType: String?

    public var name: String?

    public var nextHop: String?

    public var priority: Int32?

    public var regionIds: [String]?

    public var status: String?

    public var tagIds: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.applicationIds != nil {
            map["ApplicationIds"] = self.applicationIds!
        }
        if self.applicationType != nil {
            map["ApplicationType"] = self.applicationType!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.dynamicRouteType != nil {
            map["DynamicRouteType"] = self.dynamicRouteType!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.nextHop != nil {
            map["NextHop"] = self.nextHop!
        }
        if self.priority != nil {
            map["Priority"] = self.priority!
        }
        if self.regionIds != nil {
            map["RegionIds"] = self.regionIds!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        if self.tagIds != nil {
            map["TagIds"] = self.tagIds!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApplicationIds"] as? [String] {
            self.applicationIds = value
        }
        if let value = dict["ApplicationType"] as? String {
            self.applicationType = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["DynamicRouteType"] as? String {
            self.dynamicRouteType = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["NextHop"] as? String {
            self.nextHop = value
        }
        if let value = dict["Priority"] as? Int32 {
            self.priority = value
        }
        if let value = dict["RegionIds"] as? [String] {
            self.regionIds = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
        if let value = dict["TagIds"] as? [String] {
            self.tagIds = value
        }
    }
}

public class CreateDynamicRouteResponseBody : Tea.TeaModel {
    public var dynamicRouteId: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dynamicRouteId != nil {
            map["DynamicRouteId"] = self.dynamicRouteId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DynamicRouteId"] as? String {
            self.dynamicRouteId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateDynamicRouteResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateDynamicRouteResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateDynamicRouteResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateEnterpriseAcceleratePolicyRequest : Tea.TeaModel {
    public var accelerationType: String?

    public var description_: String?

    public var name: String?

    public var priority: String?

    public var showInClient: Int32?

    public var upstreamHost: String?

    public var upstreamPort: Int32?

    public var upstreamType: String?

    public var userAttributeGroup: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.accelerationType != nil {
            map["AccelerationType"] = self.accelerationType!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.priority != nil {
            map["Priority"] = self.priority!
        }
        if self.showInClient != nil {
            map["ShowInClient"] = self.showInClient!
        }
        if self.upstreamHost != nil {
            map["UpstreamHost"] = self.upstreamHost!
        }
        if self.upstreamPort != nil {
            map["UpstreamPort"] = self.upstreamPort!
        }
        if self.upstreamType != nil {
            map["UpstreamType"] = self.upstreamType!
        }
        if self.userAttributeGroup != nil {
            map["UserAttributeGroup"] = self.userAttributeGroup!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AccelerationType"] as? String {
            self.accelerationType = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["Priority"] as? String {
            self.priority = value
        }
        if let value = dict["ShowInClient"] as? Int32 {
            self.showInClient = value
        }
        if let value = dict["UpstreamHost"] as? String {
            self.upstreamHost = value
        }
        if let value = dict["UpstreamPort"] as? Int32 {
            self.upstreamPort = value
        }
        if let value = dict["UpstreamType"] as? String {
            self.upstreamType = value
        }
        if let value = dict["UserAttributeGroup"] as? String {
            self.userAttributeGroup = value
        }
    }
}

public class CreateEnterpriseAcceleratePolicyResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateEnterpriseAcceleratePolicyResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateEnterpriseAcceleratePolicyResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateEnterpriseAcceleratePolicyResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateEnterpriseAccelerateTargetRequest : Tea.TeaModel {
    public var eapId: String?

    public var target: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.eapId != nil {
            map["EapId"] = self.eapId!
        }
        if self.target != nil {
            map["Target"] = self.target!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EapId"] as? String {
            self.eapId = value
        }
        if let value = dict["Target"] as? [String] {
            self.target = value
        }
    }
}

public class CreateEnterpriseAccelerateTargetResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateEnterpriseAccelerateTargetResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateEnterpriseAccelerateTargetResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateEnterpriseAccelerateTargetResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateIdpDepartmentRequest : Tea.TeaModel {
    public var departmentName: String?

    public var idpConfigId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.departmentName != nil {
            map["DepartmentName"] = self.departmentName!
        }
        if self.idpConfigId != nil {
            map["IdpConfigId"] = self.idpConfigId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DepartmentName"] as? String {
            self.departmentName = value
        }
        if let value = dict["IdpConfigId"] as? String {
            self.idpConfigId = value
        }
    }
}

public class CreateIdpDepartmentResponseBody : Tea.TeaModel {
    public var data: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateIdpDepartmentResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateIdpDepartmentResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateIdpDepartmentResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreatePrivateAccessApplicationRequest : Tea.TeaModel {
    public class PortRanges : Tea.TeaModel {
        public var begin: Int32?

        public var end: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.begin != nil {
                map["Begin"] = self.begin!
            }
            if self.end != nil {
                map["End"] = self.end!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Begin"] as? Int32 {
                self.begin = value
            }
            if let value = dict["End"] as? Int32 {
                self.end = value
            }
        }
    }
    public var addresses: [String]?

    public var browserAccessStatus: String?

    public var description_: String?

    public var l7Config: PAL7Config?

    public var l7ProxyDomainAutomaticPrefix: String?

    public var l7ProxyDomainCustom: String?

    public var name: String?

    public var portRanges: [CreatePrivateAccessApplicationRequest.PortRanges]?

    public var protocol_: String?

    public var status: String?

    public var tagIds: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.l7Config?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.addresses != nil {
            map["Addresses"] = self.addresses!
        }
        if self.browserAccessStatus != nil {
            map["BrowserAccessStatus"] = self.browserAccessStatus!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.l7Config != nil {
            map["L7Config"] = self.l7Config?.toMap()
        }
        if self.l7ProxyDomainAutomaticPrefix != nil {
            map["L7ProxyDomainAutomaticPrefix"] = self.l7ProxyDomainAutomaticPrefix!
        }
        if self.l7ProxyDomainCustom != nil {
            map["L7ProxyDomainCustom"] = self.l7ProxyDomainCustom!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.portRanges != nil {
            var tmp : [Any] = []
            for k in self.portRanges! {
                tmp.append(k.toMap())
            }
            map["PortRanges"] = tmp
        }
        if self.protocol_ != nil {
            map["Protocol"] = self.protocol_!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        if self.tagIds != nil {
            map["TagIds"] = self.tagIds!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Addresses"] as? [String] {
            self.addresses = value
        }
        if let value = dict["BrowserAccessStatus"] as? String {
            self.browserAccessStatus = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["L7Config"] as? [String: Any?] {
            var model = PAL7Config()
            model.fromMap(value)
            self.l7Config = model
        }
        if let value = dict["L7ProxyDomainAutomaticPrefix"] as? String {
            self.l7ProxyDomainAutomaticPrefix = value
        }
        if let value = dict["L7ProxyDomainCustom"] as? String {
            self.l7ProxyDomainCustom = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["PortRanges"] as? [Any?] {
            var tmp : [CreatePrivateAccessApplicationRequest.PortRanges] = []
            for v in value {
                if v != nil {
                    var model = CreatePrivateAccessApplicationRequest.PortRanges()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.portRanges = tmp
        }
        if let value = dict["Protocol"] as? String {
            self.protocol_ = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
        if let value = dict["TagIds"] as? [String] {
            self.tagIds = value
        }
    }
}

public class CreatePrivateAccessApplicationShrinkRequest : Tea.TeaModel {
    public class PortRanges : Tea.TeaModel {
        public var begin: Int32?

        public var end: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.begin != nil {
                map["Begin"] = self.begin!
            }
            if self.end != nil {
                map["End"] = self.end!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Begin"] as? Int32 {
                self.begin = value
            }
            if let value = dict["End"] as? Int32 {
                self.end = value
            }
        }
    }
    public var addresses: [String]?

    public var browserAccessStatus: String?

    public var description_: String?

    public var l7ConfigShrink: String?

    public var l7ProxyDomainAutomaticPrefix: String?

    public var l7ProxyDomainCustom: String?

    public var name: String?

    public var portRanges: [CreatePrivateAccessApplicationShrinkRequest.PortRanges]?

    public var protocol_: String?

    public var status: String?

    public var tagIds: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.addresses != nil {
            map["Addresses"] = self.addresses!
        }
        if self.browserAccessStatus != nil {
            map["BrowserAccessStatus"] = self.browserAccessStatus!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.l7ConfigShrink != nil {
            map["L7Config"] = self.l7ConfigShrink!
        }
        if self.l7ProxyDomainAutomaticPrefix != nil {
            map["L7ProxyDomainAutomaticPrefix"] = self.l7ProxyDomainAutomaticPrefix!
        }
        if self.l7ProxyDomainCustom != nil {
            map["L7ProxyDomainCustom"] = self.l7ProxyDomainCustom!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.portRanges != nil {
            var tmp : [Any] = []
            for k in self.portRanges! {
                tmp.append(k.toMap())
            }
            map["PortRanges"] = tmp
        }
        if self.protocol_ != nil {
            map["Protocol"] = self.protocol_!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        if self.tagIds != nil {
            map["TagIds"] = self.tagIds!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Addresses"] as? [String] {
            self.addresses = value
        }
        if let value = dict["BrowserAccessStatus"] as? String {
            self.browserAccessStatus = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["L7Config"] as? String {
            self.l7ConfigShrink = value
        }
        if let value = dict["L7ProxyDomainAutomaticPrefix"] as? String {
            self.l7ProxyDomainAutomaticPrefix = value
        }
        if let value = dict["L7ProxyDomainCustom"] as? String {
            self.l7ProxyDomainCustom = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["PortRanges"] as? [Any?] {
            var tmp : [CreatePrivateAccessApplicationShrinkRequest.PortRanges] = []
            for v in value {
                if v != nil {
                    var model = CreatePrivateAccessApplicationShrinkRequest.PortRanges()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.portRanges = tmp
        }
        if let value = dict["Protocol"] as? String {
            self.protocol_ = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
        if let value = dict["TagIds"] as? [String] {
            self.tagIds = value
        }
    }
}

public class CreatePrivateAccessApplicationResponseBody : Tea.TeaModel {
    public var applicationId: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.applicationId != nil {
            map["ApplicationId"] = self.applicationId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApplicationId"] as? String {
            self.applicationId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreatePrivateAccessApplicationResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreatePrivateAccessApplicationResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreatePrivateAccessApplicationResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreatePrivateAccessPolicyRequest : Tea.TeaModel {
    public class CustomUserAttributes : Tea.TeaModel {
        public var idpId: Int32?

        public var relation: String?

        public var userGroupType: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.idpId != nil {
                map["IdpId"] = self.idpId!
            }
            if self.relation != nil {
                map["Relation"] = self.relation!
            }
            if self.userGroupType != nil {
                map["UserGroupType"] = self.userGroupType!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["IdpId"] as? Int32 {
                self.idpId = value
            }
            if let value = dict["Relation"] as? String {
                self.relation = value
            }
            if let value = dict["UserGroupType"] as? String {
                self.userGroupType = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var applicationIds: [String]?

    public var applicationType: String?

    public var customUserAttributes: [CreatePrivateAccessPolicyRequest.CustomUserAttributes]?

    public var description_: String?

    public var deviceAttributeAction: String?

    public var deviceAttributeId: String?

    public var name: String?

    public var policyAction: String?

    public var priority: Int32?

    public var status: String?

    public var tagIds: [String]?

    public var triggerTemplateId: String?

    public var trustedProcessGroupIds: [String]?

    public var trustedProcessStatus: String?

    public var trustedSoftwareIds: [String]?

    public var userGroupIds: [String]?

    public var userGroupMode: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.applicationIds != nil {
            map["ApplicationIds"] = self.applicationIds!
        }
        if self.applicationType != nil {
            map["ApplicationType"] = self.applicationType!
        }
        if self.customUserAttributes != nil {
            var tmp : [Any] = []
            for k in self.customUserAttributes! {
                tmp.append(k.toMap())
            }
            map["CustomUserAttributes"] = tmp
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.deviceAttributeAction != nil {
            map["DeviceAttributeAction"] = self.deviceAttributeAction!
        }
        if self.deviceAttributeId != nil {
            map["DeviceAttributeId"] = self.deviceAttributeId!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.policyAction != nil {
            map["PolicyAction"] = self.policyAction!
        }
        if self.priority != nil {
            map["Priority"] = self.priority!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        if self.tagIds != nil {
            map["TagIds"] = self.tagIds!
        }
        if self.triggerTemplateId != nil {
            map["TriggerTemplateId"] = self.triggerTemplateId!
        }
        if self.trustedProcessGroupIds != nil {
            map["TrustedProcessGroupIds"] = self.trustedProcessGroupIds!
        }
        if self.trustedProcessStatus != nil {
            map["TrustedProcessStatus"] = self.trustedProcessStatus!
        }
        if self.trustedSoftwareIds != nil {
            map["TrustedSoftwareIds"] = self.trustedSoftwareIds!
        }
        if self.userGroupIds != nil {
            map["UserGroupIds"] = self.userGroupIds!
        }
        if self.userGroupMode != nil {
            map["UserGroupMode"] = self.userGroupMode!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApplicationIds"] as? [String] {
            self.applicationIds = value
        }
        if let value = dict["ApplicationType"] as? String {
            self.applicationType = value
        }
        if let value = dict["CustomUserAttributes"] as? [Any?] {
            var tmp : [CreatePrivateAccessPolicyRequest.CustomUserAttributes] = []
            for v in value {
                if v != nil {
                    var model = CreatePrivateAccessPolicyRequest.CustomUserAttributes()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.customUserAttributes = tmp
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["DeviceAttributeAction"] as? String {
            self.deviceAttributeAction = value
        }
        if let value = dict["DeviceAttributeId"] as? String {
            self.deviceAttributeId = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["PolicyAction"] as? String {
            self.policyAction = value
        }
        if let value = dict["Priority"] as? Int32 {
            self.priority = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
        if let value = dict["TagIds"] as? [String] {
            self.tagIds = value
        }
        if let value = dict["TriggerTemplateId"] as? String {
            self.triggerTemplateId = value
        }
        if let value = dict["TrustedProcessGroupIds"] as? [String] {
            self.trustedProcessGroupIds = value
        }
        if let value = dict["TrustedProcessStatus"] as? String {
            self.trustedProcessStatus = value
        }
        if let value = dict["TrustedSoftwareIds"] as? [String] {
            self.trustedSoftwareIds = value
        }
        if let value = dict["UserGroupIds"] as? [String] {
            self.userGroupIds = value
        }
        if let value = dict["UserGroupMode"] as? String {
            self.userGroupMode = value
        }
    }
}

public class CreatePrivateAccessPolicyResponseBody : Tea.TeaModel {
    public var policyId: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.policyId != nil {
            map["PolicyId"] = self.policyId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PolicyId"] as? String {
            self.policyId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreatePrivateAccessPolicyResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreatePrivateAccessPolicyResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreatePrivateAccessPolicyResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreatePrivateAccessTagRequest : Tea.TeaModel {
    public var description_: String?

    public var name: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
    }
}

public class CreatePrivateAccessTagResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var tagId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.tagId != nil {
            map["TagId"] = self.tagId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TagId"] as? String {
            self.tagId = value
        }
    }
}

public class CreatePrivateAccessTagResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreatePrivateAccessTagResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreatePrivateAccessTagResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateRegistrationPolicyRequest : Tea.TeaModel {
    public class CompanyLimitCount : Tea.TeaModel {
        public var all: Int32?

        public var mobile: Int32?

        public var PC: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.all != nil {
                map["All"] = self.all!
            }
            if self.mobile != nil {
                map["Mobile"] = self.mobile!
            }
            if self.PC != nil {
                map["PC"] = self.PC!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["All"] as? Int32 {
                self.all = value
            }
            if let value = dict["Mobile"] as? Int32 {
                self.mobile = value
            }
            if let value = dict["PC"] as? Int32 {
                self.PC = value
            }
        }
    }
    public class PersonalLimitCount : Tea.TeaModel {
        public var all: Int32?

        public var mobile: Int32?

        public var PC: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.all != nil {
                map["All"] = self.all!
            }
            if self.mobile != nil {
                map["Mobile"] = self.mobile!
            }
            if self.PC != nil {
                map["PC"] = self.PC!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["All"] as? Int32 {
                self.all = value
            }
            if let value = dict["Mobile"] as? Int32 {
                self.mobile = value
            }
            if let value = dict["PC"] as? Int32 {
                self.PC = value
            }
        }
    }
    public var companyLimitCount: CreateRegistrationPolicyRequest.CompanyLimitCount?

    public var companyLimitType: String?

    public var description_: String?

    public var matchMode: String?

    public var name: String?

    public var personalLimitCount: CreateRegistrationPolicyRequest.PersonalLimitCount?

    public var personalLimitType: String?

    public var priority: Int64?

    public var status: String?

    public var userGroupIds: [String]?

    public var whitelist: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.companyLimitCount?.validate()
        try self.personalLimitCount?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.companyLimitCount != nil {
            map["CompanyLimitCount"] = self.companyLimitCount?.toMap()
        }
        if self.companyLimitType != nil {
            map["CompanyLimitType"] = self.companyLimitType!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.matchMode != nil {
            map["MatchMode"] = self.matchMode!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.personalLimitCount != nil {
            map["PersonalLimitCount"] = self.personalLimitCount?.toMap()
        }
        if self.personalLimitType != nil {
            map["PersonalLimitType"] = self.personalLimitType!
        }
        if self.priority != nil {
            map["Priority"] = self.priority!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        if self.userGroupIds != nil {
            map["UserGroupIds"] = self.userGroupIds!
        }
        if self.whitelist != nil {
            map["Whitelist"] = self.whitelist!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CompanyLimitCount"] as? [String: Any?] {
            var model = CreateRegistrationPolicyRequest.CompanyLimitCount()
            model.fromMap(value)
            self.companyLimitCount = model
        }
        if let value = dict["CompanyLimitType"] as? String {
            self.companyLimitType = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["MatchMode"] as? String {
            self.matchMode = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["PersonalLimitCount"] as? [String: Any?] {
            var model = CreateRegistrationPolicyRequest.PersonalLimitCount()
            model.fromMap(value)
            self.personalLimitCount = model
        }
        if let value = dict["PersonalLimitType"] as? String {
            self.personalLimitType = value
        }
        if let value = dict["Priority"] as? Int64 {
            self.priority = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
        if let value = dict["UserGroupIds"] as? [String] {
            self.userGroupIds = value
        }
        if let value = dict["Whitelist"] as? [String] {
            self.whitelist = value
        }
    }
}

public class CreateRegistrationPolicyShrinkRequest : Tea.TeaModel {
    public var companyLimitCountShrink: String?

    public var companyLimitType: String?

    public var description_: String?

    public var matchMode: String?

    public var name: String?

    public var personalLimitCountShrink: String?

    public var personalLimitType: String?

    public var priority: Int64?

    public var status: String?

    public var userGroupIds: [String]?

    public var whitelist: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.companyLimitCountShrink != nil {
            map["CompanyLimitCount"] = self.companyLimitCountShrink!
        }
        if self.companyLimitType != nil {
            map["CompanyLimitType"] = self.companyLimitType!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.matchMode != nil {
            map["MatchMode"] = self.matchMode!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.personalLimitCountShrink != nil {
            map["PersonalLimitCount"] = self.personalLimitCountShrink!
        }
        if self.personalLimitType != nil {
            map["PersonalLimitType"] = self.personalLimitType!
        }
        if self.priority != nil {
            map["Priority"] = self.priority!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        if self.userGroupIds != nil {
            map["UserGroupIds"] = self.userGroupIds!
        }
        if self.whitelist != nil {
            map["Whitelist"] = self.whitelist!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CompanyLimitCount"] as? String {
            self.companyLimitCountShrink = value
        }
        if let value = dict["CompanyLimitType"] as? String {
            self.companyLimitType = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["MatchMode"] as? String {
            self.matchMode = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["PersonalLimitCount"] as? String {
            self.personalLimitCountShrink = value
        }
        if let value = dict["PersonalLimitType"] as? String {
            self.personalLimitType = value
        }
        if let value = dict["Priority"] as? Int64 {
            self.priority = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
        if let value = dict["UserGroupIds"] as? [String] {
            self.userGroupIds = value
        }
        if let value = dict["Whitelist"] as? [String] {
            self.whitelist = value
        }
    }
}

public class CreateRegistrationPolicyResponseBody : Tea.TeaModel {
    public class Policy : Tea.TeaModel {
        public class LimitDetail : Tea.TeaModel {
            public class LimitCount : Tea.TeaModel {
                public var all: Int32?

                public var mobile: Int32?

                public var PC: Int32?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.all != nil {
                        map["All"] = self.all!
                    }
                    if self.mobile != nil {
                        map["Mobile"] = self.mobile!
                    }
                    if self.PC != nil {
                        map["PC"] = self.PC!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["All"] as? Int32 {
                        self.all = value
                    }
                    if let value = dict["Mobile"] as? Int32 {
                        self.mobile = value
                    }
                    if let value = dict["PC"] as? Int32 {
                        self.PC = value
                    }
                }
            }
            public var deviceBelong: String?

            public var limitCount: CreateRegistrationPolicyResponseBody.Policy.LimitDetail.LimitCount?

            public var limitType: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.limitCount?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.deviceBelong != nil {
                    map["DeviceBelong"] = self.deviceBelong!
                }
                if self.limitCount != nil {
                    map["LimitCount"] = self.limitCount?.toMap()
                }
                if self.limitType != nil {
                    map["LimitType"] = self.limitType!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["DeviceBelong"] as? String {
                    self.deviceBelong = value
                }
                if let value = dict["LimitCount"] as? [String: Any?] {
                    var model = CreateRegistrationPolicyResponseBody.Policy.LimitDetail.LimitCount()
                    model.fromMap(value)
                    self.limitCount = model
                }
                if let value = dict["LimitType"] as? String {
                    self.limitType = value
                }
            }
        }
        public var createTime: String?

        public var description_: String?

        public var limitDetail: [CreateRegistrationPolicyResponseBody.Policy.LimitDetail]?

        public var matchMode: String?

        public var name: String?

        public var policyId: String?

        public var priority: String?

        public var status: String?

        public var userGroupIds: [String]?

        public var whitelist: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.limitDetail != nil {
                var tmp : [Any] = []
                for k in self.limitDetail! {
                    tmp.append(k.toMap())
                }
                map["LimitDetail"] = tmp
            }
            if self.matchMode != nil {
                map["MatchMode"] = self.matchMode!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.policyId != nil {
                map["PolicyId"] = self.policyId!
            }
            if self.priority != nil {
                map["Priority"] = self.priority!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.userGroupIds != nil {
                map["UserGroupIds"] = self.userGroupIds!
            }
            if self.whitelist != nil {
                map["Whitelist"] = self.whitelist!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["LimitDetail"] as? [Any?] {
                var tmp : [CreateRegistrationPolicyResponseBody.Policy.LimitDetail] = []
                for v in value {
                    if v != nil {
                        var model = CreateRegistrationPolicyResponseBody.Policy.LimitDetail()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.limitDetail = tmp
            }
            if let value = dict["MatchMode"] as? String {
                self.matchMode = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["PolicyId"] as? String {
                self.policyId = value
            }
            if let value = dict["Priority"] as? String {
                self.priority = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["UserGroupIds"] as? [String] {
                self.userGroupIds = value
            }
            if let value = dict["Whitelist"] as? [String] {
                self.whitelist = value
            }
        }
    }
    public var policy: CreateRegistrationPolicyResponseBody.Policy?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.policy?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.policy != nil {
            map["Policy"] = self.policy?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Policy"] as? [String: Any?] {
            var model = CreateRegistrationPolicyResponseBody.Policy()
            model.fromMap(value)
            self.policy = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateRegistrationPolicyResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateRegistrationPolicyResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateRegistrationPolicyResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateUserGroupRequest : Tea.TeaModel {
    public class Attributes : Tea.TeaModel {
        public var idpId: Int32?

        public var relation: String?

        public var userGroupType: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.idpId != nil {
                map["IdpId"] = self.idpId!
            }
            if self.relation != nil {
                map["Relation"] = self.relation!
            }
            if self.userGroupType != nil {
                map["UserGroupType"] = self.userGroupType!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["IdpId"] as? Int32 {
                self.idpId = value
            }
            if let value = dict["Relation"] as? String {
                self.relation = value
            }
            if let value = dict["UserGroupType"] as? String {
                self.userGroupType = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var attributes: [CreateUserGroupRequest.Attributes]?

    public var description_: String?

    public var name: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.attributes != nil {
            var tmp : [Any] = []
            for k in self.attributes! {
                tmp.append(k.toMap())
            }
            map["Attributes"] = tmp
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Attributes"] as? [Any?] {
            var tmp : [CreateUserGroupRequest.Attributes] = []
            for v in value {
                if v != nil {
                    var model = CreateUserGroupRequest.Attributes()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.attributes = tmp
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
    }
}

public class CreateUserGroupResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var userGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.userGroupId != nil {
            map["UserGroupId"] = self.userGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["UserGroupId"] as? String {
            self.userGroupId = value
        }
    }
}

public class CreateUserGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateUserGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateUserGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateWmBaseImageRequest : Tea.TeaModel {
    public class ImageControl : Tea.TeaModel {
        public class LogoVisibleControl : Tea.TeaModel {
            public var angle: Int64?

            public var logoBase64: String?

            public var mode: String?

            public var opacity: Int32?

            public var posAx: Double?

            public var posAy: Double?

            public var posX: Int64?

            public var posY: Int64?

            public var spaceX: Int64?

            public var spaceY: Int64?

            public var visible: Bool?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.angle != nil {
                    map["Angle"] = self.angle!
                }
                if self.logoBase64 != nil {
                    map["LogoBase64"] = self.logoBase64!
                }
                if self.mode != nil {
                    map["Mode"] = self.mode!
                }
                if self.opacity != nil {
                    map["Opacity"] = self.opacity!
                }
                if self.posAx != nil {
                    map["PosAx"] = self.posAx!
                }
                if self.posAy != nil {
                    map["PosAy"] = self.posAy!
                }
                if self.posX != nil {
                    map["PosX"] = self.posX!
                }
                if self.posY != nil {
                    map["PosY"] = self.posY!
                }
                if self.spaceX != nil {
                    map["SpaceX"] = self.spaceX!
                }
                if self.spaceY != nil {
                    map["SpaceY"] = self.spaceY!
                }
                if self.visible != nil {
                    map["Visible"] = self.visible!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Angle"] as? Int64 {
                    self.angle = value
                }
                if let value = dict["LogoBase64"] as? String {
                    self.logoBase64 = value
                }
                if let value = dict["Mode"] as? String {
                    self.mode = value
                }
                if let value = dict["Opacity"] as? Int32 {
                    self.opacity = value
                }
                if let value = dict["PosAx"] as? Double {
                    self.posAx = value
                }
                if let value = dict["PosAy"] as? Double {
                    self.posAy = value
                }
                if let value = dict["PosX"] as? Int64 {
                    self.posX = value
                }
                if let value = dict["PosY"] as? Int64 {
                    self.posY = value
                }
                if let value = dict["SpaceX"] as? Int64 {
                    self.spaceX = value
                }
                if let value = dict["SpaceY"] as? Int64 {
                    self.spaceY = value
                }
                if let value = dict["Visible"] as? Bool {
                    self.visible = value
                }
            }
        }
        public class TextVisibleControl : Tea.TeaModel {
            public var angle: Int64?

            public var fontColor: String?

            public var fontSize: Int64?

            public var mode: String?

            public var opacity: Int32?

            public var posAx: Double?

            public var posAy: Double?

            public var posX: Int64?

            public var posY: Int64?

            public var spaceX: Int64?

            public var spaceY: Int64?

            public var visible: Bool?

            public var visibleText: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.angle != nil {
                    map["Angle"] = self.angle!
                }
                if self.fontColor != nil {
                    map["FontColor"] = self.fontColor!
                }
                if self.fontSize != nil {
                    map["FontSize"] = self.fontSize!
                }
                if self.mode != nil {
                    map["Mode"] = self.mode!
                }
                if self.opacity != nil {
                    map["Opacity"] = self.opacity!
                }
                if self.posAx != nil {
                    map["PosAx"] = self.posAx!
                }
                if self.posAy != nil {
                    map["PosAy"] = self.posAy!
                }
                if self.posX != nil {
                    map["PosX"] = self.posX!
                }
                if self.posY != nil {
                    map["PosY"] = self.posY!
                }
                if self.spaceX != nil {
                    map["SpaceX"] = self.spaceX!
                }
                if self.spaceY != nil {
                    map["SpaceY"] = self.spaceY!
                }
                if self.visible != nil {
                    map["Visible"] = self.visible!
                }
                if self.visibleText != nil {
                    map["VisibleText"] = self.visibleText!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Angle"] as? Int64 {
                    self.angle = value
                }
                if let value = dict["FontColor"] as? String {
                    self.fontColor = value
                }
                if let value = dict["FontSize"] as? Int64 {
                    self.fontSize = value
                }
                if let value = dict["Mode"] as? String {
                    self.mode = value
                }
                if let value = dict["Opacity"] as? Int32 {
                    self.opacity = value
                }
                if let value = dict["PosAx"] as? Double {
                    self.posAx = value
                }
                if let value = dict["PosAy"] as? Double {
                    self.posAy = value
                }
                if let value = dict["PosX"] as? Int64 {
                    self.posX = value
                }
                if let value = dict["PosY"] as? Int64 {
                    self.posY = value
                }
                if let value = dict["SpaceX"] as? Int64 {
                    self.spaceX = value
                }
                if let value = dict["SpaceY"] as? Int64 {
                    self.spaceY = value
                }
                if let value = dict["Visible"] as? Bool {
                    self.visible = value
                }
                if let value = dict["VisibleText"] as? String {
                    self.visibleText = value
                }
            }
        }
        public var logoVisibleControl: CreateWmBaseImageRequest.ImageControl.LogoVisibleControl?

        public var textVisibleControl: CreateWmBaseImageRequest.ImageControl.TextVisibleControl?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.logoVisibleControl?.validate()
            try self.textVisibleControl?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.logoVisibleControl != nil {
                map["LogoVisibleControl"] = self.logoVisibleControl?.toMap()
            }
            if self.textVisibleControl != nil {
                map["TextVisibleControl"] = self.textVisibleControl?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["LogoVisibleControl"] as? [String: Any?] {
                var model = CreateWmBaseImageRequest.ImageControl.LogoVisibleControl()
                model.fromMap(value)
                self.logoVisibleControl = model
            }
            if let value = dict["TextVisibleControl"] as? [String: Any?] {
                var model = CreateWmBaseImageRequest.ImageControl.TextVisibleControl()
                model.fromMap(value)
                self.textVisibleControl = model
            }
        }
    }
    public var height: Int32?

    public var imageControl: CreateWmBaseImageRequest.ImageControl?

    public var opacity: Int32?

    public var scale: Int32?

    public var width: Int32?

    public var wmInfoBytesB64: String?

    public var wmInfoSize: Int64?

    public var wmInfoUint: String?

    public var wmType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.imageControl?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.height != nil {
            map["Height"] = self.height!
        }
        if self.imageControl != nil {
            map["ImageControl"] = self.imageControl?.toMap()
        }
        if self.opacity != nil {
            map["Opacity"] = self.opacity!
        }
        if self.scale != nil {
            map["Scale"] = self.scale!
        }
        if self.width != nil {
            map["Width"] = self.width!
        }
        if self.wmInfoBytesB64 != nil {
            map["WmInfoBytesB64"] = self.wmInfoBytesB64!
        }
        if self.wmInfoSize != nil {
            map["WmInfoSize"] = self.wmInfoSize!
        }
        if self.wmInfoUint != nil {
            map["WmInfoUint"] = self.wmInfoUint!
        }
        if self.wmType != nil {
            map["WmType"] = self.wmType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Height"] as? Int32 {
            self.height = value
        }
        if let value = dict["ImageControl"] as? [String: Any?] {
            var model = CreateWmBaseImageRequest.ImageControl()
            model.fromMap(value)
            self.imageControl = model
        }
        if let value = dict["Opacity"] as? Int32 {
            self.opacity = value
        }
        if let value = dict["Scale"] as? Int32 {
            self.scale = value
        }
        if let value = dict["Width"] as? Int32 {
            self.width = value
        }
        if let value = dict["WmInfoBytesB64"] as? String {
            self.wmInfoBytesB64 = value
        }
        if let value = dict["WmInfoSize"] as? Int64 {
            self.wmInfoSize = value
        }
        if let value = dict["WmInfoUint"] as? String {
            self.wmInfoUint = value
        }
        if let value = dict["WmType"] as? String {
            self.wmType = value
        }
    }
}

public class CreateWmBaseImageShrinkRequest : Tea.TeaModel {
    public var height: Int32?

    public var imageControlShrink: String?

    public var opacity: Int32?

    public var scale: Int32?

    public var width: Int32?

    public var wmInfoBytesB64: String?

    public var wmInfoSize: Int64?

    public var wmInfoUint: String?

    public var wmType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.height != nil {
            map["Height"] = self.height!
        }
        if self.imageControlShrink != nil {
            map["ImageControl"] = self.imageControlShrink!
        }
        if self.opacity != nil {
            map["Opacity"] = self.opacity!
        }
        if self.scale != nil {
            map["Scale"] = self.scale!
        }
        if self.width != nil {
            map["Width"] = self.width!
        }
        if self.wmInfoBytesB64 != nil {
            map["WmInfoBytesB64"] = self.wmInfoBytesB64!
        }
        if self.wmInfoSize != nil {
            map["WmInfoSize"] = self.wmInfoSize!
        }
        if self.wmInfoUint != nil {
            map["WmInfoUint"] = self.wmInfoUint!
        }
        if self.wmType != nil {
            map["WmType"] = self.wmType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Height"] as? Int32 {
            self.height = value
        }
        if let value = dict["ImageControl"] as? String {
            self.imageControlShrink = value
        }
        if let value = dict["Opacity"] as? Int32 {
            self.opacity = value
        }
        if let value = dict["Scale"] as? Int32 {
            self.scale = value
        }
        if let value = dict["Width"] as? Int32 {
            self.width = value
        }
        if let value = dict["WmInfoBytesB64"] as? String {
            self.wmInfoBytesB64 = value
        }
        if let value = dict["WmInfoSize"] as? Int64 {
            self.wmInfoSize = value
        }
        if let value = dict["WmInfoUint"] as? String {
            self.wmInfoUint = value
        }
        if let value = dict["WmType"] as? String {
            self.wmType = value
        }
    }
}

public class CreateWmBaseImageResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var imageId: String?

        public var imageUrl: String?

        public var imageUrlExp: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.imageId != nil {
                map["ImageId"] = self.imageId!
            }
            if self.imageUrl != nil {
                map["ImageUrl"] = self.imageUrl!
            }
            if self.imageUrlExp != nil {
                map["ImageUrlExp"] = self.imageUrlExp!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ImageId"] as? String {
                self.imageId = value
            }
            if let value = dict["ImageUrl"] as? String {
                self.imageUrl = value
            }
            if let value = dict["ImageUrlExp"] as? Int64 {
                self.imageUrlExp = value
            }
        }
    }
    public var data: CreateWmBaseImageResponseBody.Data?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Data"] as? [String: Any?] {
            var model = CreateWmBaseImageResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateWmBaseImageResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateWmBaseImageResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateWmBaseImageResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateWmEmbedTaskRequest : Tea.TeaModel {
    public class CsvControl : Tea.TeaModel {
        public var embedBitsNumberInEachTime: Int64?

        public var embedColumn: Int64?

        public var embedDensity: String?

        public var embedPrecision: Int64?

        public var embedTimePosition: String?

        public var method: String?

        public var timeFormat: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.embedBitsNumberInEachTime != nil {
                map["EmbedBitsNumberInEachTime"] = self.embedBitsNumberInEachTime!
            }
            if self.embedColumn != nil {
                map["EmbedColumn"] = self.embedColumn!
            }
            if self.embedDensity != nil {
                map["EmbedDensity"] = self.embedDensity!
            }
            if self.embedPrecision != nil {
                map["EmbedPrecision"] = self.embedPrecision!
            }
            if self.embedTimePosition != nil {
                map["EmbedTimePosition"] = self.embedTimePosition!
            }
            if self.method != nil {
                map["Method"] = self.method!
            }
            if self.timeFormat != nil {
                map["TimeFormat"] = self.timeFormat!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["EmbedBitsNumberInEachTime"] as? Int64 {
                self.embedBitsNumberInEachTime = value
            }
            if let value = dict["EmbedColumn"] as? Int64 {
                self.embedColumn = value
            }
            if let value = dict["EmbedDensity"] as? String {
                self.embedDensity = value
            }
            if let value = dict["EmbedPrecision"] as? Int64 {
                self.embedPrecision = value
            }
            if let value = dict["EmbedTimePosition"] as? String {
                self.embedTimePosition = value
            }
            if let value = dict["Method"] as? String {
                self.method = value
            }
            if let value = dict["TimeFormat"] as? String {
                self.timeFormat = value
            }
        }
    }
    public class DocumentControl : Tea.TeaModel {
        public class BackgroundControl : Tea.TeaModel {
            public class BgInvisibleControl : Tea.TeaModel {
                public var opacity: Int64?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.opacity != nil {
                        map["Opacity"] = self.opacity!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Opacity"] as? Int64 {
                        self.opacity = value
                    }
                }
            }
            public class BgVisibleControl : Tea.TeaModel {
                public var angle: Int64?

                public var fontColor: String?

                public var fontSize: Int64?

                public var horizontalNumber: Int64?

                public var mode: String?

                public var opacity: Int64?

                public var posX: String?

                public var posY: String?

                public var verticalNumber: Int64?

                public var visibleText: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.angle != nil {
                        map["Angle"] = self.angle!
                    }
                    if self.fontColor != nil {
                        map["FontColor"] = self.fontColor!
                    }
                    if self.fontSize != nil {
                        map["FontSize"] = self.fontSize!
                    }
                    if self.horizontalNumber != nil {
                        map["HorizontalNumber"] = self.horizontalNumber!
                    }
                    if self.mode != nil {
                        map["Mode"] = self.mode!
                    }
                    if self.opacity != nil {
                        map["Opacity"] = self.opacity!
                    }
                    if self.posX != nil {
                        map["PosX"] = self.posX!
                    }
                    if self.posY != nil {
                        map["PosY"] = self.posY!
                    }
                    if self.verticalNumber != nil {
                        map["VerticalNumber"] = self.verticalNumber!
                    }
                    if self.visibleText != nil {
                        map["VisibleText"] = self.visibleText!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Angle"] as? Int64 {
                        self.angle = value
                    }
                    if let value = dict["FontColor"] as? String {
                        self.fontColor = value
                    }
                    if let value = dict["FontSize"] as? Int64 {
                        self.fontSize = value
                    }
                    if let value = dict["HorizontalNumber"] as? Int64 {
                        self.horizontalNumber = value
                    }
                    if let value = dict["Mode"] as? String {
                        self.mode = value
                    }
                    if let value = dict["Opacity"] as? Int64 {
                        self.opacity = value
                    }
                    if let value = dict["PosX"] as? String {
                        self.posX = value
                    }
                    if let value = dict["PosY"] as? String {
                        self.posY = value
                    }
                    if let value = dict["VerticalNumber"] as? Int64 {
                        self.verticalNumber = value
                    }
                    if let value = dict["VisibleText"] as? String {
                        self.visibleText = value
                    }
                }
            }
            public var bgAddInvisible: Bool?

            public var bgAddVisible: Bool?

            public var bgInvisibleControl: CreateWmEmbedTaskRequest.DocumentControl.BackgroundControl.BgInvisibleControl?

            public var bgVisibleControl: CreateWmEmbedTaskRequest.DocumentControl.BackgroundControl.BgVisibleControl?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.bgInvisibleControl?.validate()
                try self.bgVisibleControl?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.bgAddInvisible != nil {
                    map["BgAddInvisible"] = self.bgAddInvisible!
                }
                if self.bgAddVisible != nil {
                    map["BgAddVisible"] = self.bgAddVisible!
                }
                if self.bgInvisibleControl != nil {
                    map["BgInvisibleControl"] = self.bgInvisibleControl?.toMap()
                }
                if self.bgVisibleControl != nil {
                    map["BgVisibleControl"] = self.bgVisibleControl?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["BgAddInvisible"] as? Bool {
                    self.bgAddInvisible = value
                }
                if let value = dict["BgAddVisible"] as? Bool {
                    self.bgAddVisible = value
                }
                if let value = dict["BgInvisibleControl"] as? [String: Any?] {
                    var model = CreateWmEmbedTaskRequest.DocumentControl.BackgroundControl.BgInvisibleControl()
                    model.fromMap(value)
                    self.bgInvisibleControl = model
                }
                if let value = dict["BgVisibleControl"] as? [String: Any?] {
                    var model = CreateWmEmbedTaskRequest.DocumentControl.BackgroundControl.BgVisibleControl()
                    model.fromMap(value)
                    self.bgVisibleControl = model
                }
            }
        }
        public var backgroundControl: CreateWmEmbedTaskRequest.DocumentControl.BackgroundControl?

        public var invisibleAntiAllCopy: Bool?

        public var invisibleAntiTextCopy: Bool?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.backgroundControl?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.backgroundControl != nil {
                map["BackgroundControl"] = self.backgroundControl?.toMap()
            }
            if self.invisibleAntiAllCopy != nil {
                map["InvisibleAntiAllCopy"] = self.invisibleAntiAllCopy!
            }
            if self.invisibleAntiTextCopy != nil {
                map["InvisibleAntiTextCopy"] = self.invisibleAntiTextCopy!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["BackgroundControl"] as? [String: Any?] {
                var model = CreateWmEmbedTaskRequest.DocumentControl.BackgroundControl()
                model.fromMap(value)
                self.backgroundControl = model
            }
            if let value = dict["InvisibleAntiAllCopy"] as? Bool {
                self.invisibleAntiAllCopy = value
            }
            if let value = dict["InvisibleAntiTextCopy"] as? Bool {
                self.invisibleAntiTextCopy = value
            }
        }
    }
    public var csvControl: CreateWmEmbedTaskRequest.CsvControl?

    public var documentControl: CreateWmEmbedTaskRequest.DocumentControl?

    public var fileUrl: String?

    public var filename: String?

    public var imageEmbedJpegQuality: Int64?

    public var imageEmbedLevel: Int64?

    public var videoBitrate: String?

    public var videoIsLong: Bool?

    public var wmInfoBytesB64: String?

    public var wmInfoSize: Int64?

    public var wmInfoUint: String?

    public var wmType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.csvControl?.validate()
        try self.documentControl?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.csvControl != nil {
            map["CsvControl"] = self.csvControl?.toMap()
        }
        if self.documentControl != nil {
            map["DocumentControl"] = self.documentControl?.toMap()
        }
        if self.fileUrl != nil {
            map["FileUrl"] = self.fileUrl!
        }
        if self.filename != nil {
            map["Filename"] = self.filename!
        }
        if self.imageEmbedJpegQuality != nil {
            map["ImageEmbedJpegQuality"] = self.imageEmbedJpegQuality!
        }
        if self.imageEmbedLevel != nil {
            map["ImageEmbedLevel"] = self.imageEmbedLevel!
        }
        if self.videoBitrate != nil {
            map["VideoBitrate"] = self.videoBitrate!
        }
        if self.videoIsLong != nil {
            map["VideoIsLong"] = self.videoIsLong!
        }
        if self.wmInfoBytesB64 != nil {
            map["WmInfoBytesB64"] = self.wmInfoBytesB64!
        }
        if self.wmInfoSize != nil {
            map["WmInfoSize"] = self.wmInfoSize!
        }
        if self.wmInfoUint != nil {
            map["WmInfoUint"] = self.wmInfoUint!
        }
        if self.wmType != nil {
            map["WmType"] = self.wmType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CsvControl"] as? [String: Any?] {
            var model = CreateWmEmbedTaskRequest.CsvControl()
            model.fromMap(value)
            self.csvControl = model
        }
        if let value = dict["DocumentControl"] as? [String: Any?] {
            var model = CreateWmEmbedTaskRequest.DocumentControl()
            model.fromMap(value)
            self.documentControl = model
        }
        if let value = dict["FileUrl"] as? String {
            self.fileUrl = value
        }
        if let value = dict["Filename"] as? String {
            self.filename = value
        }
        if let value = dict["ImageEmbedJpegQuality"] as? Int64 {
            self.imageEmbedJpegQuality = value
        }
        if let value = dict["ImageEmbedLevel"] as? Int64 {
            self.imageEmbedLevel = value
        }
        if let value = dict["VideoBitrate"] as? String {
            self.videoBitrate = value
        }
        if let value = dict["VideoIsLong"] as? Bool {
            self.videoIsLong = value
        }
        if let value = dict["WmInfoBytesB64"] as? String {
            self.wmInfoBytesB64 = value
        }
        if let value = dict["WmInfoSize"] as? Int64 {
            self.wmInfoSize = value
        }
        if let value = dict["WmInfoUint"] as? String {
            self.wmInfoUint = value
        }
        if let value = dict["WmType"] as? String {
            self.wmType = value
        }
    }
}

public class CreateWmEmbedTaskShrinkRequest : Tea.TeaModel {
    public var csvControlShrink: String?

    public var documentControlShrink: String?

    public var fileUrl: String?

    public var filename: String?

    public var imageEmbedJpegQuality: Int64?

    public var imageEmbedLevel: Int64?

    public var videoBitrate: String?

    public var videoIsLong: Bool?

    public var wmInfoBytesB64: String?

    public var wmInfoSize: Int64?

    public var wmInfoUint: String?

    public var wmType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.csvControlShrink != nil {
            map["CsvControl"] = self.csvControlShrink!
        }
        if self.documentControlShrink != nil {
            map["DocumentControl"] = self.documentControlShrink!
        }
        if self.fileUrl != nil {
            map["FileUrl"] = self.fileUrl!
        }
        if self.filename != nil {
            map["Filename"] = self.filename!
        }
        if self.imageEmbedJpegQuality != nil {
            map["ImageEmbedJpegQuality"] = self.imageEmbedJpegQuality!
        }
        if self.imageEmbedLevel != nil {
            map["ImageEmbedLevel"] = self.imageEmbedLevel!
        }
        if self.videoBitrate != nil {
            map["VideoBitrate"] = self.videoBitrate!
        }
        if self.videoIsLong != nil {
            map["VideoIsLong"] = self.videoIsLong!
        }
        if self.wmInfoBytesB64 != nil {
            map["WmInfoBytesB64"] = self.wmInfoBytesB64!
        }
        if self.wmInfoSize != nil {
            map["WmInfoSize"] = self.wmInfoSize!
        }
        if self.wmInfoUint != nil {
            map["WmInfoUint"] = self.wmInfoUint!
        }
        if self.wmType != nil {
            map["WmType"] = self.wmType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CsvControl"] as? String {
            self.csvControlShrink = value
        }
        if let value = dict["DocumentControl"] as? String {
            self.documentControlShrink = value
        }
        if let value = dict["FileUrl"] as? String {
            self.fileUrl = value
        }
        if let value = dict["Filename"] as? String {
            self.filename = value
        }
        if let value = dict["ImageEmbedJpegQuality"] as? Int64 {
            self.imageEmbedJpegQuality = value
        }
        if let value = dict["ImageEmbedLevel"] as? Int64 {
            self.imageEmbedLevel = value
        }
        if let value = dict["VideoBitrate"] as? String {
            self.videoBitrate = value
        }
        if let value = dict["VideoIsLong"] as? Bool {
            self.videoIsLong = value
        }
        if let value = dict["WmInfoBytesB64"] as? String {
            self.wmInfoBytesB64 = value
        }
        if let value = dict["WmInfoSize"] as? Int64 {
            self.wmInfoSize = value
        }
        if let value = dict["WmInfoUint"] as? String {
            self.wmInfoUint = value
        }
        if let value = dict["WmType"] as? String {
            self.wmType = value
        }
    }
}

public class CreateWmEmbedTaskResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var taskId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["TaskId"] as? String {
                self.taskId = value
            }
        }
    }
    public var data: CreateWmEmbedTaskResponseBody.Data?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Data"] as? [String: Any?] {
            var model = CreateWmEmbedTaskResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateWmEmbedTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateWmEmbedTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateWmEmbedTaskResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateWmExtractTaskRequest : Tea.TeaModel {
    public class CsvControl : Tea.TeaModel {
        public var embedBitsNumberInEachTime: Int64?

        public var embedColumn: Int64?

        public var embedPrecision: Int64?

        public var embedTimePosition: String?

        public var method: String?

        public var timeFormat: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.embedBitsNumberInEachTime != nil {
                map["EmbedBitsNumberInEachTime"] = self.embedBitsNumberInEachTime!
            }
            if self.embedColumn != nil {
                map["EmbedColumn"] = self.embedColumn!
            }
            if self.embedPrecision != nil {
                map["EmbedPrecision"] = self.embedPrecision!
            }
            if self.embedTimePosition != nil {
                map["EmbedTimePosition"] = self.embedTimePosition!
            }
            if self.method != nil {
                map["Method"] = self.method!
            }
            if self.timeFormat != nil {
                map["TimeFormat"] = self.timeFormat!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["EmbedBitsNumberInEachTime"] as? Int64 {
                self.embedBitsNumberInEachTime = value
            }
            if let value = dict["EmbedColumn"] as? Int64 {
                self.embedColumn = value
            }
            if let value = dict["EmbedPrecision"] as? Int64 {
                self.embedPrecision = value
            }
            if let value = dict["EmbedTimePosition"] as? String {
                self.embedTimePosition = value
            }
            if let value = dict["Method"] as? String {
                self.method = value
            }
            if let value = dict["TimeFormat"] as? String {
                self.timeFormat = value
            }
        }
    }
    public var csvControl: CreateWmExtractTaskRequest.CsvControl?

    public var documentIsCapture: Bool?

    public var fileUrl: String?

    public var filename: String?

    public var isClientEmbed: Bool?

    public var videoIsLong: Bool?

    public var videoSpeed: String?

    public var wmInfoSize: Int64?

    public var wmType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.csvControl?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.csvControl != nil {
            map["CsvControl"] = self.csvControl?.toMap()
        }
        if self.documentIsCapture != nil {
            map["DocumentIsCapture"] = self.documentIsCapture!
        }
        if self.fileUrl != nil {
            map["FileUrl"] = self.fileUrl!
        }
        if self.filename != nil {
            map["Filename"] = self.filename!
        }
        if self.isClientEmbed != nil {
            map["IsClientEmbed"] = self.isClientEmbed!
        }
        if self.videoIsLong != nil {
            map["VideoIsLong"] = self.videoIsLong!
        }
        if self.videoSpeed != nil {
            map["VideoSpeed"] = self.videoSpeed!
        }
        if self.wmInfoSize != nil {
            map["WmInfoSize"] = self.wmInfoSize!
        }
        if self.wmType != nil {
            map["WmType"] = self.wmType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CsvControl"] as? [String: Any?] {
            var model = CreateWmExtractTaskRequest.CsvControl()
            model.fromMap(value)
            self.csvControl = model
        }
        if let value = dict["DocumentIsCapture"] as? Bool {
            self.documentIsCapture = value
        }
        if let value = dict["FileUrl"] as? String {
            self.fileUrl = value
        }
        if let value = dict["Filename"] as? String {
            self.filename = value
        }
        if let value = dict["IsClientEmbed"] as? Bool {
            self.isClientEmbed = value
        }
        if let value = dict["VideoIsLong"] as? Bool {
            self.videoIsLong = value
        }
        if let value = dict["VideoSpeed"] as? String {
            self.videoSpeed = value
        }
        if let value = dict["WmInfoSize"] as? Int64 {
            self.wmInfoSize = value
        }
        if let value = dict["WmType"] as? String {
            self.wmType = value
        }
    }
}

public class CreateWmExtractTaskShrinkRequest : Tea.TeaModel {
    public var csvControlShrink: String?

    public var documentIsCapture: Bool?

    public var fileUrl: String?

    public var filename: String?

    public var isClientEmbed: Bool?

    public var videoIsLong: Bool?

    public var videoSpeed: String?

    public var wmInfoSize: Int64?

    public var wmType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.csvControlShrink != nil {
            map["CsvControl"] = self.csvControlShrink!
        }
        if self.documentIsCapture != nil {
            map["DocumentIsCapture"] = self.documentIsCapture!
        }
        if self.fileUrl != nil {
            map["FileUrl"] = self.fileUrl!
        }
        if self.filename != nil {
            map["Filename"] = self.filename!
        }
        if self.isClientEmbed != nil {
            map["IsClientEmbed"] = self.isClientEmbed!
        }
        if self.videoIsLong != nil {
            map["VideoIsLong"] = self.videoIsLong!
        }
        if self.videoSpeed != nil {
            map["VideoSpeed"] = self.videoSpeed!
        }
        if self.wmInfoSize != nil {
            map["WmInfoSize"] = self.wmInfoSize!
        }
        if self.wmType != nil {
            map["WmType"] = self.wmType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CsvControl"] as? String {
            self.csvControlShrink = value
        }
        if let value = dict["DocumentIsCapture"] as? Bool {
            self.documentIsCapture = value
        }
        if let value = dict["FileUrl"] as? String {
            self.fileUrl = value
        }
        if let value = dict["Filename"] as? String {
            self.filename = value
        }
        if let value = dict["IsClientEmbed"] as? Bool {
            self.isClientEmbed = value
        }
        if let value = dict["VideoIsLong"] as? Bool {
            self.videoIsLong = value
        }
        if let value = dict["VideoSpeed"] as? String {
            self.videoSpeed = value
        }
        if let value = dict["WmInfoSize"] as? Int64 {
            self.wmInfoSize = value
        }
        if let value = dict["WmType"] as? String {
            self.wmType = value
        }
    }
}

public class CreateWmExtractTaskResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var taskId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["TaskId"] as? String {
                self.taskId = value
            }
        }
    }
    public var data: CreateWmExtractTaskResponseBody.Data?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Data"] as? [String: Any?] {
            var model = CreateWmExtractTaskResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateWmExtractTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateWmExtractTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateWmExtractTaskResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateWmInfoMappingRequest : Tea.TeaModel {
    public var wmInfoBytesB64: String?

    public var wmInfoSize: Int64?

    public var wmType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.wmInfoBytesB64 != nil {
            map["WmInfoBytesB64"] = self.wmInfoBytesB64!
        }
        if self.wmInfoSize != nil {
            map["WmInfoSize"] = self.wmInfoSize!
        }
        if self.wmType != nil {
            map["WmType"] = self.wmType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["WmInfoBytesB64"] as? String {
            self.wmInfoBytesB64 = value
        }
        if let value = dict["WmInfoSize"] as? Int64 {
            self.wmInfoSize = value
        }
        if let value = dict["WmType"] as? String {
            self.wmType = value
        }
    }
}

public class CreateWmInfoMappingResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var wmInfoUint: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.wmInfoUint != nil {
                map["WmInfoUint"] = self.wmInfoUint!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["WmInfoUint"] as? Int64 {
                self.wmInfoUint = value
            }
        }
    }
    public var data: CreateWmInfoMappingResponseBody.Data?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Data"] as? [String: Any?] {
            var model = CreateWmInfoMappingResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateWmInfoMappingResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateWmInfoMappingResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateWmInfoMappingResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteApprovalProcessesRequest : Tea.TeaModel {
    public var processIds: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.processIds != nil {
            map["ProcessIds"] = self.processIds!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ProcessIds"] as? [String] {
            self.processIds = value
        }
    }
}

public class DeleteApprovalProcessesResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteApprovalProcessesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteApprovalProcessesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteApprovalProcessesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteClientUserRequest : Tea.TeaModel {
    public var id: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? String {
            self.id = value
        }
    }
}

public class DeleteClientUserResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteClientUserResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteClientUserResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteClientUserResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteDynamicRouteRequest : Tea.TeaModel {
    public var dynamicRouteId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dynamicRouteId != nil {
            map["DynamicRouteId"] = self.dynamicRouteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DynamicRouteId"] as? String {
            self.dynamicRouteId = value
        }
    }
}

public class DeleteDynamicRouteResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteDynamicRouteResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteDynamicRouteResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteDynamicRouteResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteEnterpriseAcceleratePolicyRequest : Tea.TeaModel {
    public var eapId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.eapId != nil {
            map["EapId"] = self.eapId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EapId"] as? String {
            self.eapId = value
        }
    }
}

public class DeleteEnterpriseAcceleratePolicyResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteEnterpriseAcceleratePolicyResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteEnterpriseAcceleratePolicyResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteEnterpriseAcceleratePolicyResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteEnterpriseAccelerateTargetRequest : Tea.TeaModel {
    public var eapId: String?

    public var target: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.eapId != nil {
            map["EapId"] = self.eapId!
        }
        if self.target != nil {
            map["Target"] = self.target!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EapId"] as? String {
            self.eapId = value
        }
        if let value = dict["Target"] as? [String] {
            self.target = value
        }
    }
}

public class DeleteEnterpriseAccelerateTargetResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteEnterpriseAccelerateTargetResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteEnterpriseAccelerateTargetResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteEnterpriseAccelerateTargetResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteIdpDepartmentRequest : Tea.TeaModel {
    public var departmentId: String?

    public var idpConfigId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.departmentId != nil {
            map["DepartmentId"] = self.departmentId!
        }
        if self.idpConfigId != nil {
            map["IdpConfigId"] = self.idpConfigId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DepartmentId"] as? String {
            self.departmentId = value
        }
        if let value = dict["IdpConfigId"] as? String {
            self.idpConfigId = value
        }
    }
}

public class DeleteIdpDepartmentResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteIdpDepartmentResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteIdpDepartmentResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteIdpDepartmentResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteOtpConfigRequest : Tea.TeaModel {
    public var username: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.username != nil {
            map["Username"] = self.username!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Username"] as? String {
            self.username = value
        }
    }
}

public class DeleteOtpConfigResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteOtpConfigResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteOtpConfigResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteOtpConfigResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeletePrivateAccessApplicationRequest : Tea.TeaModel {
    public var applicationId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.applicationId != nil {
            map["ApplicationId"] = self.applicationId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApplicationId"] as? String {
            self.applicationId = value
        }
    }
}

public class DeletePrivateAccessApplicationResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeletePrivateAccessApplicationResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeletePrivateAccessApplicationResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeletePrivateAccessApplicationResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeletePrivateAccessPolicyRequest : Tea.TeaModel {
    public var policyId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.policyId != nil {
            map["PolicyId"] = self.policyId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PolicyId"] as? String {
            self.policyId = value
        }
    }
}

public class DeletePrivateAccessPolicyResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeletePrivateAccessPolicyResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeletePrivateAccessPolicyResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeletePrivateAccessPolicyResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeletePrivateAccessTagRequest : Tea.TeaModel {
    public var tagId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.tagId != nil {
            map["TagId"] = self.tagId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["TagId"] as? String {
            self.tagId = value
        }
    }
}

public class DeletePrivateAccessTagResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeletePrivateAccessTagResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeletePrivateAccessTagResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeletePrivateAccessTagResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteRegistrationPoliciesRequest : Tea.TeaModel {
    public var policyIds: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.policyIds != nil {
            map["PolicyIds"] = self.policyIds!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PolicyIds"] as? [String] {
            self.policyIds = value
        }
    }
}

public class DeleteRegistrationPoliciesResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteRegistrationPoliciesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteRegistrationPoliciesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteRegistrationPoliciesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteUserDevicesRequest : Tea.TeaModel {
    public var deviceTags: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.deviceTags != nil {
            map["DeviceTags"] = self.deviceTags!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DeviceTags"] as? [String] {
            self.deviceTags = value
        }
    }
}

public class DeleteUserDevicesResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteUserDevicesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteUserDevicesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteUserDevicesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteUserGroupRequest : Tea.TeaModel {
    public var userGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.userGroupId != nil {
            map["UserGroupId"] = self.userGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["UserGroupId"] as? String {
            self.userGroupId = value
        }
    }
}

public class DeleteUserGroupResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteUserGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteUserGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteUserGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DetachApplication2ConnectorRequest : Tea.TeaModel {
    public var applicationIds: [String]?

    public var connectorId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.applicationIds != nil {
            map["ApplicationIds"] = self.applicationIds!
        }
        if self.connectorId != nil {
            map["ConnectorId"] = self.connectorId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApplicationIds"] as? [String] {
            self.applicationIds = value
        }
        if let value = dict["ConnectorId"] as? String {
            self.connectorId = value
        }
    }
}

public class DetachApplication2ConnectorShrinkRequest : Tea.TeaModel {
    public var applicationIdsShrink: String?

    public var connectorId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.applicationIdsShrink != nil {
            map["ApplicationIds"] = self.applicationIdsShrink!
        }
        if self.connectorId != nil {
            map["ConnectorId"] = self.connectorId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApplicationIds"] as? String {
            self.applicationIdsShrink = value
        }
        if let value = dict["ConnectorId"] as? String {
            self.connectorId = value
        }
    }
}

public class DetachApplication2ConnectorResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DetachApplication2ConnectorResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DetachApplication2ConnectorResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DetachApplication2ConnectorResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DetachPolicy2ApprovalProcessRequest : Tea.TeaModel {
    public var policyId: String?

    public var policyType: String?

    public var processId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.policyId != nil {
            map["PolicyId"] = self.policyId!
        }
        if self.policyType != nil {
            map["PolicyType"] = self.policyType!
        }
        if self.processId != nil {
            map["ProcessId"] = self.processId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PolicyId"] as? String {
            self.policyId = value
        }
        if let value = dict["PolicyType"] as? String {
            self.policyType = value
        }
        if let value = dict["ProcessId"] as? String {
            self.processId = value
        }
    }
}

public class DetachPolicy2ApprovalProcessResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DetachPolicy2ApprovalProcessResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DetachPolicy2ApprovalProcessResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DetachPolicy2ApprovalProcessResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DisableEnterpriseAcceleratePolicyRequest : Tea.TeaModel {
    public var eapId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.eapId != nil {
            map["EapId"] = self.eapId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EapId"] as? String {
            self.eapId = value
        }
    }
}

public class DisableEnterpriseAcceleratePolicyResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DisableEnterpriseAcceleratePolicyResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DisableEnterpriseAcceleratePolicyResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DisableEnterpriseAcceleratePolicyResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class EnableEnterpriseAcceleratePolicyRequest : Tea.TeaModel {
    public var eapId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.eapId != nil {
            map["EapId"] = self.eapId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EapId"] as? String {
            self.eapId = value
        }
    }
}

public class EnableEnterpriseAcceleratePolicyResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class EnableEnterpriseAcceleratePolicyResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: EnableEnterpriseAcceleratePolicyResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = EnableEnterpriseAcceleratePolicyResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ExportUserDevicesRequest : Tea.TeaModel {
    public var appStatuses: [String]?

    public var department: String?

    public var deviceBelong: String?

    public var deviceStatuses: [String]?

    public var deviceTags: [String]?

    public var deviceTypes: [String]?

    public var dlpStatuses: [String]?

    public var hostname: String?

    public var iaStatuses: [String]?

    public var mac: String?

    public var nacStatuses: [String]?

    public var paStatuses: [String]?

    public var saseUserId: String?

    public var sharingStatus: Bool?

    public var username: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appStatuses != nil {
            map["AppStatuses"] = self.appStatuses!
        }
        if self.department != nil {
            map["Department"] = self.department!
        }
        if self.deviceBelong != nil {
            map["DeviceBelong"] = self.deviceBelong!
        }
        if self.deviceStatuses != nil {
            map["DeviceStatuses"] = self.deviceStatuses!
        }
        if self.deviceTags != nil {
            map["DeviceTags"] = self.deviceTags!
        }
        if self.deviceTypes != nil {
            map["DeviceTypes"] = self.deviceTypes!
        }
        if self.dlpStatuses != nil {
            map["DlpStatuses"] = self.dlpStatuses!
        }
        if self.hostname != nil {
            map["Hostname"] = self.hostname!
        }
        if self.iaStatuses != nil {
            map["IaStatuses"] = self.iaStatuses!
        }
        if self.mac != nil {
            map["Mac"] = self.mac!
        }
        if self.nacStatuses != nil {
            map["NacStatuses"] = self.nacStatuses!
        }
        if self.paStatuses != nil {
            map["PaStatuses"] = self.paStatuses!
        }
        if self.saseUserId != nil {
            map["SaseUserId"] = self.saseUserId!
        }
        if self.sharingStatus != nil {
            map["SharingStatus"] = self.sharingStatus!
        }
        if self.username != nil {
            map["Username"] = self.username!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppStatuses"] as? [String] {
            self.appStatuses = value
        }
        if let value = dict["Department"] as? String {
            self.department = value
        }
        if let value = dict["DeviceBelong"] as? String {
            self.deviceBelong = value
        }
        if let value = dict["DeviceStatuses"] as? [String] {
            self.deviceStatuses = value
        }
        if let value = dict["DeviceTags"] as? [String] {
            self.deviceTags = value
        }
        if let value = dict["DeviceTypes"] as? [String] {
            self.deviceTypes = value
        }
        if let value = dict["DlpStatuses"] as? [String] {
            self.dlpStatuses = value
        }
        if let value = dict["Hostname"] as? String {
            self.hostname = value
        }
        if let value = dict["IaStatuses"] as? [String] {
            self.iaStatuses = value
        }
        if let value = dict["Mac"] as? String {
            self.mac = value
        }
        if let value = dict["NacStatuses"] as? [String] {
            self.nacStatuses = value
        }
        if let value = dict["PaStatuses"] as? [String] {
            self.paStatuses = value
        }
        if let value = dict["SaseUserId"] as? String {
            self.saseUserId = value
        }
        if let value = dict["SharingStatus"] as? Bool {
            self.sharingStatus = value
        }
        if let value = dict["Username"] as? String {
            self.username = value
        }
    }
}

public class ExportUserDevicesResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var signedUrl: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.signedUrl != nil {
            map["SignedUrl"] = self.signedUrl!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SignedUrl"] as? String {
            self.signedUrl = value
        }
    }
}

public class ExportUserDevicesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ExportUserDevicesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ExportUserDevicesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetActiveIdpConfigResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var description_: String?

        public var id: String?

        public var name: String?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["Id"] as? String {
                self.id = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
        }
    }
    public var data: GetActiveIdpConfigResponseBody.Data?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetActiveIdpConfigResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetActiveIdpConfigResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetActiveIdpConfigResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetActiveIdpConfigResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetApprovalRequest : Tea.TeaModel {
    public var approvalId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.approvalId != nil {
            map["ApprovalId"] = self.approvalId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApprovalId"] as? String {
            self.approvalId = value
        }
    }
}

public class GetApprovalResponseBody : Tea.TeaModel {
    public class Approval : Tea.TeaModel {
        public class ApprovalProgresses : Tea.TeaModel {
            public class Operators : Tea.TeaModel {
                public var saseUserId: String?

                public var username: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.saseUserId != nil {
                        map["SaseUserId"] = self.saseUserId!
                    }
                    if self.username != nil {
                        map["Username"] = self.username!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["SaseUserId"] as? String {
                        self.saseUserId = value
                    }
                    if let value = dict["Username"] as? String {
                        self.username = value
                    }
                }
            }
            public var action: String?

            public var comment: String?

            public var executor: String?

            public var operators: [GetApprovalResponseBody.Approval.ApprovalProgresses.Operators]?

            public var status: String?

            public var timestamp: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.action != nil {
                    map["Action"] = self.action!
                }
                if self.comment != nil {
                    map["Comment"] = self.comment!
                }
                if self.executor != nil {
                    map["Executor"] = self.executor!
                }
                if self.operators != nil {
                    var tmp : [Any] = []
                    for k in self.operators! {
                        tmp.append(k.toMap())
                    }
                    map["Operators"] = tmp
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                if self.timestamp != nil {
                    map["Timestamp"] = self.timestamp!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Action"] as? String {
                    self.action = value
                }
                if let value = dict["Comment"] as? String {
                    self.comment = value
                }
                if let value = dict["Executor"] as? String {
                    self.executor = value
                }
                if let value = dict["Operators"] as? [Any?] {
                    var tmp : [GetApprovalResponseBody.Approval.ApprovalProgresses.Operators] = []
                    for v in value {
                        if v != nil {
                            var model = GetApprovalResponseBody.Approval.ApprovalProgresses.Operators()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.operators = tmp
                }
                if let value = dict["Status"] as? String {
                    self.status = value
                }
                if let value = dict["Timestamp"] as? Int64 {
                    self.timestamp = value
                }
            }
        }
        public var approvalDetail: String?

        public var approvalId: String?

        public var approvalProgresses: [GetApprovalResponseBody.Approval.ApprovalProgresses]?

        public var createTime: String?

        public var creatorDepartment: String?

        public var creatorDevTag: String?

        public var creatorUserId: String?

        public var creatorUsername: String?

        public var endTimestamp: Int64?

        public var policyType: String?

        public var processId: String?

        public var processName: String?

        public var reason: String?

        public var schemaContent: String?

        public var schemaId: String?

        public var schemaName: String?

        public var status: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.approvalDetail != nil {
                map["ApprovalDetail"] = self.approvalDetail!
            }
            if self.approvalId != nil {
                map["ApprovalId"] = self.approvalId!
            }
            if self.approvalProgresses != nil {
                var tmp : [Any] = []
                for k in self.approvalProgresses! {
                    tmp.append(k.toMap())
                }
                map["ApprovalProgresses"] = tmp
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.creatorDepartment != nil {
                map["CreatorDepartment"] = self.creatorDepartment!
            }
            if self.creatorDevTag != nil {
                map["CreatorDevTag"] = self.creatorDevTag!
            }
            if self.creatorUserId != nil {
                map["CreatorUserId"] = self.creatorUserId!
            }
            if self.creatorUsername != nil {
                map["CreatorUsername"] = self.creatorUsername!
            }
            if self.endTimestamp != nil {
                map["EndTimestamp"] = self.endTimestamp!
            }
            if self.policyType != nil {
                map["PolicyType"] = self.policyType!
            }
            if self.processId != nil {
                map["ProcessId"] = self.processId!
            }
            if self.processName != nil {
                map["ProcessName"] = self.processName!
            }
            if self.reason != nil {
                map["Reason"] = self.reason!
            }
            if self.schemaContent != nil {
                map["SchemaContent"] = self.schemaContent!
            }
            if self.schemaId != nil {
                map["SchemaId"] = self.schemaId!
            }
            if self.schemaName != nil {
                map["SchemaName"] = self.schemaName!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ApprovalDetail"] as? String {
                self.approvalDetail = value
            }
            if let value = dict["ApprovalId"] as? String {
                self.approvalId = value
            }
            if let value = dict["ApprovalProgresses"] as? [Any?] {
                var tmp : [GetApprovalResponseBody.Approval.ApprovalProgresses] = []
                for v in value {
                    if v != nil {
                        var model = GetApprovalResponseBody.Approval.ApprovalProgresses()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.approvalProgresses = tmp
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["CreatorDepartment"] as? String {
                self.creatorDepartment = value
            }
            if let value = dict["CreatorDevTag"] as? String {
                self.creatorDevTag = value
            }
            if let value = dict["CreatorUserId"] as? String {
                self.creatorUserId = value
            }
            if let value = dict["CreatorUsername"] as? String {
                self.creatorUsername = value
            }
            if let value = dict["EndTimestamp"] as? Int64 {
                self.endTimestamp = value
            }
            if let value = dict["PolicyType"] as? String {
                self.policyType = value
            }
            if let value = dict["ProcessId"] as? String {
                self.processId = value
            }
            if let value = dict["ProcessName"] as? String {
                self.processName = value
            }
            if let value = dict["Reason"] as? String {
                self.reason = value
            }
            if let value = dict["SchemaContent"] as? String {
                self.schemaContent = value
            }
            if let value = dict["SchemaId"] as? String {
                self.schemaId = value
            }
            if let value = dict["SchemaName"] as? String {
                self.schemaName = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
        }
    }
    public var approval: [GetApprovalResponseBody.Approval]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.approval != nil {
            var tmp : [Any] = []
            for k in self.approval! {
                tmp.append(k.toMap())
            }
            map["Approval"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Approval"] as? [Any?] {
            var tmp : [GetApprovalResponseBody.Approval] = []
            for v in value {
                if v != nil {
                    var model = GetApprovalResponseBody.Approval()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.approval = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetApprovalResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetApprovalResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetApprovalResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetApprovalProcessRequest : Tea.TeaModel {
    public var processId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.processId != nil {
            map["ProcessId"] = self.processId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ProcessId"] as? String {
            self.processId = value
        }
    }
}

public class GetApprovalProcessResponseBody : Tea.TeaModel {
    public class Process : Tea.TeaModel {
        public class AppUninstallPolicies : Tea.TeaModel {
            public var policyIds: [String]?

            public var schemaId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.policyIds != nil {
                    map["PolicyIds"] = self.policyIds!
                }
                if self.schemaId != nil {
                    map["SchemaId"] = self.schemaId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["PolicyIds"] as? [String] {
                    self.policyIds = value
                }
                if let value = dict["SchemaId"] as? String {
                    self.schemaId = value
                }
            }
        }
        public class DeviceRegistrationPolicies : Tea.TeaModel {
            public var policyIds: [String]?

            public var schemaId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.policyIds != nil {
                    map["PolicyIds"] = self.policyIds!
                }
                if self.schemaId != nil {
                    map["SchemaId"] = self.schemaId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["PolicyIds"] as? [String] {
                    self.policyIds = value
                }
                if let value = dict["SchemaId"] as? String {
                    self.schemaId = value
                }
            }
        }
        public class DlpSendPolicies : Tea.TeaModel {
            public var policyIds: [String]?

            public var schemaId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.policyIds != nil {
                    map["PolicyIds"] = self.policyIds!
                }
                if self.schemaId != nil {
                    map["SchemaId"] = self.schemaId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["PolicyIds"] as? [String] {
                    self.policyIds = value
                }
                if let value = dict["SchemaId"] as? String {
                    self.schemaId = value
                }
            }
        }
        public class DomainBlacklistPolicies : Tea.TeaModel {
            public var policyIds: [String]?

            public var schemaId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.policyIds != nil {
                    map["PolicyIds"] = self.policyIds!
                }
                if self.schemaId != nil {
                    map["SchemaId"] = self.schemaId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["PolicyIds"] as? [String] {
                    self.policyIds = value
                }
                if let value = dict["SchemaId"] as? String {
                    self.schemaId = value
                }
            }
        }
        public class DomainWhitelistPolicies : Tea.TeaModel {
            public var policyIds: [String]?

            public var schemaId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.policyIds != nil {
                    map["PolicyIds"] = self.policyIds!
                }
                if self.schemaId != nil {
                    map["SchemaId"] = self.schemaId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["PolicyIds"] as? [String] {
                    self.policyIds = value
                }
                if let value = dict["SchemaId"] as? String {
                    self.schemaId = value
                }
            }
        }
        public class EndpointHardeningPolicies : Tea.TeaModel {
            public var policyIds: [String]?

            public var schemaId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.policyIds != nil {
                    map["PolicyIds"] = self.policyIds!
                }
                if self.schemaId != nil {
                    map["SchemaId"] = self.schemaId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["PolicyIds"] as? [String] {
                    self.policyIds = value
                }
                if let value = dict["SchemaId"] as? String {
                    self.schemaId = value
                }
            }
        }
        public class PeripheralBlockPolicies : Tea.TeaModel {
            public var policyIds: [String]?

            public var schemaId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.policyIds != nil {
                    map["PolicyIds"] = self.policyIds!
                }
                if self.schemaId != nil {
                    map["SchemaId"] = self.schemaId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["PolicyIds"] as? [String] {
                    self.policyIds = value
                }
                if let value = dict["SchemaId"] as? String {
                    self.schemaId = value
                }
            }
        }
        public class ProcessNodes : Tea.TeaModel {
            public var saseUserId: String?

            public var username: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.saseUserId != nil {
                    map["SaseUserId"] = self.saseUserId!
                }
                if self.username != nil {
                    map["Username"] = self.username!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["SaseUserId"] as? String {
                    self.saseUserId = value
                }
                if let value = dict["Username"] as? String {
                    self.username = value
                }
            }
        }
        public class SoftwareBlockPolicies : Tea.TeaModel {
            public var policyIds: [String]?

            public var schemaId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.policyIds != nil {
                    map["PolicyIds"] = self.policyIds!
                }
                if self.schemaId != nil {
                    map["SchemaId"] = self.schemaId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["PolicyIds"] as? [String] {
                    self.policyIds = value
                }
                if let value = dict["SchemaId"] as? String {
                    self.schemaId = value
                }
            }
        }
        public class SoftwareHardeningPolicies : Tea.TeaModel {
            public var policyIds: [String]?

            public var schemaId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.policyIds != nil {
                    map["PolicyIds"] = self.policyIds!
                }
                if self.schemaId != nil {
                    map["SchemaId"] = self.schemaId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["PolicyIds"] as? [String] {
                    self.policyIds = value
                }
                if let value = dict["SchemaId"] as? String {
                    self.schemaId = value
                }
            }
        }
        public var appUninstallPolicies: GetApprovalProcessResponseBody.Process.AppUninstallPolicies?

        public var createTime: String?

        public var description_: String?

        public var deviceRegistrationPolicies: GetApprovalProcessResponseBody.Process.DeviceRegistrationPolicies?

        public var dlpSendPolicies: GetApprovalProcessResponseBody.Process.DlpSendPolicies?

        public var domainBlacklistPolicies: GetApprovalProcessResponseBody.Process.DomainBlacklistPolicies?

        public var domainWhitelistPolicies: GetApprovalProcessResponseBody.Process.DomainWhitelistPolicies?

        public var endpointHardeningPolicies: GetApprovalProcessResponseBody.Process.EndpointHardeningPolicies?

        public var peripheralBlockPolicies: GetApprovalProcessResponseBody.Process.PeripheralBlockPolicies?

        public var processId: String?

        public var processName: String?

        public var processNodes: [[GetApprovalProcessResponseBody.Process.ProcessNodes]]?

        public var softwareBlockPolicies: GetApprovalProcessResponseBody.Process.SoftwareBlockPolicies?

        public var softwareHardeningPolicies: GetApprovalProcessResponseBody.Process.SoftwareHardeningPolicies?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.appUninstallPolicies?.validate()
            try self.deviceRegistrationPolicies?.validate()
            try self.dlpSendPolicies?.validate()
            try self.domainBlacklistPolicies?.validate()
            try self.domainWhitelistPolicies?.validate()
            try self.endpointHardeningPolicies?.validate()
            try self.peripheralBlockPolicies?.validate()
            try self.softwareBlockPolicies?.validate()
            try self.softwareHardeningPolicies?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.appUninstallPolicies != nil {
                map["AppUninstallPolicies"] = self.appUninstallPolicies?.toMap()
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.deviceRegistrationPolicies != nil {
                map["DeviceRegistrationPolicies"] = self.deviceRegistrationPolicies?.toMap()
            }
            if self.dlpSendPolicies != nil {
                map["DlpSendPolicies"] = self.dlpSendPolicies?.toMap()
            }
            if self.domainBlacklistPolicies != nil {
                map["DomainBlacklistPolicies"] = self.domainBlacklistPolicies?.toMap()
            }
            if self.domainWhitelistPolicies != nil {
                map["DomainWhitelistPolicies"] = self.domainWhitelistPolicies?.toMap()
            }
            if self.endpointHardeningPolicies != nil {
                map["EndpointHardeningPolicies"] = self.endpointHardeningPolicies?.toMap()
            }
            if self.peripheralBlockPolicies != nil {
                map["PeripheralBlockPolicies"] = self.peripheralBlockPolicies?.toMap()
            }
            if self.processId != nil {
                map["ProcessId"] = self.processId!
            }
            if self.processName != nil {
                map["ProcessName"] = self.processName!
            }
            if self.processNodes != nil {
                var tmp : [Any] = []
                for k in self.processNodes! {
                    var l1 : [Any] = []
                    for k1 in k {
                        l1.append(k1.toMap())
                    }
                    tmp.append(l1)
                }
                map["ProcessNodes"] = tmp
            }
            if self.softwareBlockPolicies != nil {
                map["SoftwareBlockPolicies"] = self.softwareBlockPolicies?.toMap()
            }
            if self.softwareHardeningPolicies != nil {
                map["SoftwareHardeningPolicies"] = self.softwareHardeningPolicies?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AppUninstallPolicies"] as? [String: Any?] {
                var model = GetApprovalProcessResponseBody.Process.AppUninstallPolicies()
                model.fromMap(value)
                self.appUninstallPolicies = model
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["DeviceRegistrationPolicies"] as? [String: Any?] {
                var model = GetApprovalProcessResponseBody.Process.DeviceRegistrationPolicies()
                model.fromMap(value)
                self.deviceRegistrationPolicies = model
            }
            if let value = dict["DlpSendPolicies"] as? [String: Any?] {
                var model = GetApprovalProcessResponseBody.Process.DlpSendPolicies()
                model.fromMap(value)
                self.dlpSendPolicies = model
            }
            if let value = dict["DomainBlacklistPolicies"] as? [String: Any?] {
                var model = GetApprovalProcessResponseBody.Process.DomainBlacklistPolicies()
                model.fromMap(value)
                self.domainBlacklistPolicies = model
            }
            if let value = dict["DomainWhitelistPolicies"] as? [String: Any?] {
                var model = GetApprovalProcessResponseBody.Process.DomainWhitelistPolicies()
                model.fromMap(value)
                self.domainWhitelistPolicies = model
            }
            if let value = dict["EndpointHardeningPolicies"] as? [String: Any?] {
                var model = GetApprovalProcessResponseBody.Process.EndpointHardeningPolicies()
                model.fromMap(value)
                self.endpointHardeningPolicies = model
            }
            if let value = dict["PeripheralBlockPolicies"] as? [String: Any?] {
                var model = GetApprovalProcessResponseBody.Process.PeripheralBlockPolicies()
                model.fromMap(value)
                self.peripheralBlockPolicies = model
            }
            if let value = dict["ProcessId"] as? String {
                self.processId = value
            }
            if let value = dict["ProcessName"] as? String {
                self.processName = value
            }
            if let value = dict["ProcessNodes"] as? [Any?] {
                var tmp : [[GetApprovalProcessResponseBody.Process.ProcessNodes]] = []
                for v in value {
                    if v != nil {
                        var l1 : [GetApprovalProcessResponseBody.Process.ProcessNodes] = []
                        for v1 in v as! [Any?] {
                            if v1 != nil {
                                var model = GetApprovalProcessResponseBody.Process.ProcessNodes()
                                if v1 != nil {
                                    model.fromMap(v1 as? [String: Any?])
                                }
                                l1.append(model)
                            }
                        }
                        tmp.append(l1)
                    }
                }
                self.processNodes = tmp
            }
            if let value = dict["SoftwareBlockPolicies"] as? [String: Any?] {
                var model = GetApprovalProcessResponseBody.Process.SoftwareBlockPolicies()
                model.fromMap(value)
                self.softwareBlockPolicies = model
            }
            if let value = dict["SoftwareHardeningPolicies"] as? [String: Any?] {
                var model = GetApprovalProcessResponseBody.Process.SoftwareHardeningPolicies()
                model.fromMap(value)
                self.softwareHardeningPolicies = model
            }
        }
    }
    public var process: GetApprovalProcessResponseBody.Process?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.process?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.process != nil {
            map["Process"] = self.process?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Process"] as? [String: Any?] {
            var model = GetApprovalProcessResponseBody.Process()
            model.fromMap(value)
            self.process = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetApprovalProcessResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetApprovalProcessResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetApprovalProcessResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetApprovalSchemaRequest : Tea.TeaModel {
    public var schemaId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.schemaId != nil {
            map["SchemaId"] = self.schemaId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["SchemaId"] as? String {
            self.schemaId = value
        }
    }
}

public class GetApprovalSchemaResponseBody : Tea.TeaModel {
    public class Schema : Tea.TeaModel {
        public var createTime: String?

        public var description_: String?

        public var isDefault: Bool?

        public var policyType: String?

        public var schemaContent: String?

        public var schemaId: String?

        public var schemaName: String?

        public var schemaVersion: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.isDefault != nil {
                map["IsDefault"] = self.isDefault!
            }
            if self.policyType != nil {
                map["PolicyType"] = self.policyType!
            }
            if self.schemaContent != nil {
                map["SchemaContent"] = self.schemaContent!
            }
            if self.schemaId != nil {
                map["SchemaId"] = self.schemaId!
            }
            if self.schemaName != nil {
                map["SchemaName"] = self.schemaName!
            }
            if self.schemaVersion != nil {
                map["SchemaVersion"] = self.schemaVersion!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["IsDefault"] as? Bool {
                self.isDefault = value
            }
            if let value = dict["PolicyType"] as? String {
                self.policyType = value
            }
            if let value = dict["SchemaContent"] as? String {
                self.schemaContent = value
            }
            if let value = dict["SchemaId"] as? String {
                self.schemaId = value
            }
            if let value = dict["SchemaName"] as? String {
                self.schemaName = value
            }
            if let value = dict["SchemaVersion"] as? Int64 {
                self.schemaVersion = value
            }
        }
    }
    public var requestId: String?

    public var schema: GetApprovalSchemaResponseBody.Schema?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.schema?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.schema != nil {
            map["Schema"] = self.schema?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Schema"] as? [String: Any?] {
            var model = GetApprovalSchemaResponseBody.Schema()
            model.fromMap(value)
            self.schema = model
        }
    }
}

public class GetApprovalSchemaResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetApprovalSchemaResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetApprovalSchemaResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetBootAndAntiUninstallPolicyResponseBody : Tea.TeaModel {
    public class Strategy : Tea.TeaModel {
        public class BlockContent : Tea.TeaModel {
            public class BlockTextEn : Tea.TeaModel {
                public var content: String?

                public var mainButtonText: String?

                public var minorButtonText: String?

                public var title: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.content != nil {
                        map["Content"] = self.content!
                    }
                    if self.mainButtonText != nil {
                        map["MainButtonText"] = self.mainButtonText!
                    }
                    if self.minorButtonText != nil {
                        map["MinorButtonText"] = self.minorButtonText!
                    }
                    if self.title != nil {
                        map["Title"] = self.title!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Content"] as? String {
                        self.content = value
                    }
                    if let value = dict["MainButtonText"] as? String {
                        self.mainButtonText = value
                    }
                    if let value = dict["MinorButtonText"] as? String {
                        self.minorButtonText = value
                    }
                    if let value = dict["Title"] as? String {
                        self.title = value
                    }
                }
            }
            public class BlockTextZh : Tea.TeaModel {
                public var content: String?

                public var mainButtonText: String?

                public var minorButtonText: String?

                public var title: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.content != nil {
                        map["Content"] = self.content!
                    }
                    if self.mainButtonText != nil {
                        map["MainButtonText"] = self.mainButtonText!
                    }
                    if self.minorButtonText != nil {
                        map["MinorButtonText"] = self.minorButtonText!
                    }
                    if self.title != nil {
                        map["Title"] = self.title!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Content"] as? String {
                        self.content = value
                    }
                    if let value = dict["MainButtonText"] as? String {
                        self.mainButtonText = value
                    }
                    if let value = dict["MinorButtonText"] as? String {
                        self.minorButtonText = value
                    }
                    if let value = dict["Title"] as? String {
                        self.title = value
                    }
                }
            }
            public var blockTextEn: GetBootAndAntiUninstallPolicyResponseBody.Strategy.BlockContent.BlockTextEn?

            public var blockTextZh: GetBootAndAntiUninstallPolicyResponseBody.Strategy.BlockContent.BlockTextZh?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.blockTextEn?.validate()
                try self.blockTextZh?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.blockTextEn != nil {
                    map["BlockTextEn"] = self.blockTextEn?.toMap()
                }
                if self.blockTextZh != nil {
                    map["BlockTextZh"] = self.blockTextZh?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["BlockTextEn"] as? [String: Any?] {
                    var model = GetBootAndAntiUninstallPolicyResponseBody.Strategy.BlockContent.BlockTextEn()
                    model.fromMap(value)
                    self.blockTextEn = model
                }
                if let value = dict["BlockTextZh"] as? [String: Any?] {
                    var model = GetBootAndAntiUninstallPolicyResponseBody.Strategy.BlockContent.BlockTextZh()
                    model.fromMap(value)
                    self.blockTextZh = model
                }
            }
        }
        public var allowReport: Bool?

        public var blockContent: GetBootAndAntiUninstallPolicyResponseBody.Strategy.BlockContent?

        public var createTime: String?

        public var isAntiUninstall: Bool?

        public var isBoot: Bool?

        public var policyId: String?

        public var reportProcessId: String?

        public var updateTime: String?

        public var userGroupIds: [String]?

        public var whitelistUsers: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.blockContent?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.allowReport != nil {
                map["AllowReport"] = self.allowReport!
            }
            if self.blockContent != nil {
                map["BlockContent"] = self.blockContent?.toMap()
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.isAntiUninstall != nil {
                map["IsAntiUninstall"] = self.isAntiUninstall!
            }
            if self.isBoot != nil {
                map["IsBoot"] = self.isBoot!
            }
            if self.policyId != nil {
                map["PolicyId"] = self.policyId!
            }
            if self.reportProcessId != nil {
                map["ReportProcessId"] = self.reportProcessId!
            }
            if self.updateTime != nil {
                map["UpdateTime"] = self.updateTime!
            }
            if self.userGroupIds != nil {
                map["UserGroupIds"] = self.userGroupIds!
            }
            if self.whitelistUsers != nil {
                map["WhitelistUsers"] = self.whitelistUsers!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AllowReport"] as? Bool {
                self.allowReport = value
            }
            if let value = dict["BlockContent"] as? [String: Any?] {
                var model = GetBootAndAntiUninstallPolicyResponseBody.Strategy.BlockContent()
                model.fromMap(value)
                self.blockContent = model
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["IsAntiUninstall"] as? Bool {
                self.isAntiUninstall = value
            }
            if let value = dict["IsBoot"] as? Bool {
                self.isBoot = value
            }
            if let value = dict["PolicyId"] as? String {
                self.policyId = value
            }
            if let value = dict["ReportProcessId"] as? String {
                self.reportProcessId = value
            }
            if let value = dict["UpdateTime"] as? String {
                self.updateTime = value
            }
            if let value = dict["UserGroupIds"] as? [String] {
                self.userGroupIds = value
            }
            if let value = dict["WhitelistUsers"] as? [String] {
                self.whitelistUsers = value
            }
        }
    }
    public var requestId: String?

    public var strategy: GetBootAndAntiUninstallPolicyResponseBody.Strategy?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.strategy?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.strategy != nil {
            map["Strategy"] = self.strategy?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Strategy"] as? [String: Any?] {
            var model = GetBootAndAntiUninstallPolicyResponseBody.Strategy()
            model.fromMap(value)
            self.strategy = model
        }
    }
}

public class GetBootAndAntiUninstallPolicyResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetBootAndAntiUninstallPolicyResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetBootAndAntiUninstallPolicyResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetClientUserRequest : Tea.TeaModel {
    public var idpConfigId: String?

    public var username: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.idpConfigId != nil {
            map["IdpConfigId"] = self.idpConfigId!
        }
        if self.username != nil {
            map["Username"] = self.username!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["IdpConfigId"] as? String {
            self.idpConfigId = value
        }
        if let value = dict["Username"] as? String {
            self.username = value
        }
    }
}

public class GetClientUserResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Department : Tea.TeaModel {
            public var id: String?

            public var name: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
            }
        }
        public var department: GetClientUserResponseBody.Data.Department?

        public var departmentId: String?

        public var description_: String?

        public var email: String?

        public var id: String?

        public var idpConfigId: String?

        public var mobileNumber: String?

        public var status: String?

        public var userId: String?

        public var username: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.department?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.department != nil {
                map["Department"] = self.department?.toMap()
            }
            if self.departmentId != nil {
                map["DepartmentId"] = self.departmentId!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.email != nil {
                map["Email"] = self.email!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.idpConfigId != nil {
                map["IdpConfigId"] = self.idpConfigId!
            }
            if self.mobileNumber != nil {
                map["MobileNumber"] = self.mobileNumber!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.userId != nil {
                map["UserId"] = self.userId!
            }
            if self.username != nil {
                map["Username"] = self.username!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Department"] as? [String: Any?] {
                var model = GetClientUserResponseBody.Data.Department()
                model.fromMap(value)
                self.department = model
            }
            if let value = dict["DepartmentId"] as? String {
                self.departmentId = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["Email"] as? String {
                self.email = value
            }
            if let value = dict["Id"] as? String {
                self.id = value
            }
            if let value = dict["IdpConfigId"] as? String {
                self.idpConfigId = value
            }
            if let value = dict["MobileNumber"] as? String {
                self.mobileNumber = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["UserId"] as? String {
                self.userId = value
            }
            if let value = dict["Username"] as? String {
                self.username = value
            }
        }
    }
    public var data: GetClientUserResponseBody.Data?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetClientUserResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetClientUserResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetClientUserResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetClientUserResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetDynamicRouteRequest : Tea.TeaModel {
    public var dynamicRouteId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dynamicRouteId != nil {
            map["DynamicRouteId"] = self.dynamicRouteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DynamicRouteId"] as? String {
            self.dynamicRouteId = value
        }
    }
}

public class GetDynamicRouteResponseBody : Tea.TeaModel {
    public class DynamicRoute : Tea.TeaModel {
        public var applicationIds: [String]?

        public var applicationType: String?

        public var createTime: String?

        public var description_: String?

        public var dynamicRouteId: String?

        public var dynamicRouteType: String?

        public var name: String?

        public var nextHop: String?

        public var priority: Int32?

        public var regionIds: [String]?

        public var status: String?

        public var tagIds: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.applicationIds != nil {
                map["ApplicationIds"] = self.applicationIds!
            }
            if self.applicationType != nil {
                map["ApplicationType"] = self.applicationType!
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.dynamicRouteId != nil {
                map["DynamicRouteId"] = self.dynamicRouteId!
            }
            if self.dynamicRouteType != nil {
                map["DynamicRouteType"] = self.dynamicRouteType!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.nextHop != nil {
                map["NextHop"] = self.nextHop!
            }
            if self.priority != nil {
                map["Priority"] = self.priority!
            }
            if self.regionIds != nil {
                map["RegionIds"] = self.regionIds!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.tagIds != nil {
                map["TagIds"] = self.tagIds!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ApplicationIds"] as? [String] {
                self.applicationIds = value
            }
            if let value = dict["ApplicationType"] as? String {
                self.applicationType = value
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["DynamicRouteId"] as? String {
                self.dynamicRouteId = value
            }
            if let value = dict["DynamicRouteType"] as? String {
                self.dynamicRouteType = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["NextHop"] as? String {
                self.nextHop = value
            }
            if let value = dict["Priority"] as? Int32 {
                self.priority = value
            }
            if let value = dict["RegionIds"] as? [String] {
                self.regionIds = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["TagIds"] as? [String] {
                self.tagIds = value
            }
        }
    }
    public var dynamicRoute: GetDynamicRouteResponseBody.DynamicRoute?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.dynamicRoute?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dynamicRoute != nil {
            map["DynamicRoute"] = self.dynamicRoute?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DynamicRoute"] as? [String: Any?] {
            var model = GetDynamicRouteResponseBody.DynamicRoute()
            model.fromMap(value)
            self.dynamicRoute = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetDynamicRouteResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetDynamicRouteResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetDynamicRouteResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetIdpConfigRequest : Tea.TeaModel {
    public var id: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? String {
            self.id = value
        }
    }
}

public class GetIdpConfigResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var accessKey: String?

        public var accessKeySecret: String?

        public var description_: String?

        public var getGroupUrl: String?

        public var id: String?

        public var idpMetadata: String?

        public var mfaConfigType: String?

        public var mobileLoginType: String?

        public var mobileMfaConfigType: String?

        public var multiIdpInfo: String?

        public var name: String?

        public var pcLoginType: String?

        public var status: String?

        public var type: String?

        public var updateTime: String?

        public var verifyAesKey: String?

        public var verifyToken: String?

        public var verifyUrl: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accessKey != nil {
                map["AccessKey"] = self.accessKey!
            }
            if self.accessKeySecret != nil {
                map["AccessKeySecret"] = self.accessKeySecret!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.getGroupUrl != nil {
                map["GetGroupUrl"] = self.getGroupUrl!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.idpMetadata != nil {
                map["IdpMetadata"] = self.idpMetadata!
            }
            if self.mfaConfigType != nil {
                map["MfaConfigType"] = self.mfaConfigType!
            }
            if self.mobileLoginType != nil {
                map["MobileLoginType"] = self.mobileLoginType!
            }
            if self.mobileMfaConfigType != nil {
                map["MobileMfaConfigType"] = self.mobileMfaConfigType!
            }
            if self.multiIdpInfo != nil {
                map["MultiIdpInfo"] = self.multiIdpInfo!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.pcLoginType != nil {
                map["PcLoginType"] = self.pcLoginType!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            if self.updateTime != nil {
                map["UpdateTime"] = self.updateTime!
            }
            if self.verifyAesKey != nil {
                map["VerifyAesKey"] = self.verifyAesKey!
            }
            if self.verifyToken != nil {
                map["VerifyToken"] = self.verifyToken!
            }
            if self.verifyUrl != nil {
                map["VerifyUrl"] = self.verifyUrl!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AccessKey"] as? String {
                self.accessKey = value
            }
            if let value = dict["AccessKeySecret"] as? String {
                self.accessKeySecret = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["GetGroupUrl"] as? String {
                self.getGroupUrl = value
            }
            if let value = dict["Id"] as? String {
                self.id = value
            }
            if let value = dict["IdpMetadata"] as? String {
                self.idpMetadata = value
            }
            if let value = dict["MfaConfigType"] as? String {
                self.mfaConfigType = value
            }
            if let value = dict["MobileLoginType"] as? String {
                self.mobileLoginType = value
            }
            if let value = dict["MobileMfaConfigType"] as? String {
                self.mobileMfaConfigType = value
            }
            if let value = dict["MultiIdpInfo"] as? String {
                self.multiIdpInfo = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["PcLoginType"] as? String {
                self.pcLoginType = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
            if let value = dict["UpdateTime"] as? String {
                self.updateTime = value
            }
            if let value = dict["VerifyAesKey"] as? String {
                self.verifyAesKey = value
            }
            if let value = dict["VerifyToken"] as? String {
                self.verifyToken = value
            }
            if let value = dict["VerifyUrl"] as? String {
                self.verifyUrl = value
            }
        }
    }
    public var data: GetIdpConfigResponseBody.Data?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetIdpConfigResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetIdpConfigResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetIdpConfigResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetIdpConfigResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetPrivateAccessApplicationRequest : Tea.TeaModel {
    public var applicationId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.applicationId != nil {
            map["ApplicationId"] = self.applicationId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApplicationId"] as? String {
            self.applicationId = value
        }
    }
}

public class GetPrivateAccessApplicationResponseBody : Tea.TeaModel {
    public class Application : Tea.TeaModel {
        public class PortRanges : Tea.TeaModel {
            public var begin: Int32?

            public var end: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.begin != nil {
                    map["Begin"] = self.begin!
                }
                if self.end != nil {
                    map["End"] = self.end!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Begin"] as? Int32 {
                    self.begin = value
                }
                if let value = dict["End"] as? Int32 {
                    self.end = value
                }
            }
        }
        public var addresses: [String]?

        public var applicationId: String?

        public var autoGenerated: Int32?

        public var browserAccessStatus: String?

        public var connectorIds: [String]?

        public var createTime: String?

        public var description_: String?

        public var l7Config: PAL7Config?

        public var l7ProxyDomainAutomatic: String?

        public var l7ProxyDomainCustom: String?

        public var name: String?

        public var policyIds: [String]?

        public var portRanges: [GetPrivateAccessApplicationResponseBody.Application.PortRanges]?

        public var protocol_: String?

        public var status: String?

        public var tagIds: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.l7Config?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.addresses != nil {
                map["Addresses"] = self.addresses!
            }
            if self.applicationId != nil {
                map["ApplicationId"] = self.applicationId!
            }
            if self.autoGenerated != nil {
                map["AutoGenerated"] = self.autoGenerated!
            }
            if self.browserAccessStatus != nil {
                map["BrowserAccessStatus"] = self.browserAccessStatus!
            }
            if self.connectorIds != nil {
                map["ConnectorIds"] = self.connectorIds!
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.l7Config != nil {
                map["L7Config"] = self.l7Config?.toMap()
            }
            if self.l7ProxyDomainAutomatic != nil {
                map["L7ProxyDomainAutomatic"] = self.l7ProxyDomainAutomatic!
            }
            if self.l7ProxyDomainCustom != nil {
                map["L7ProxyDomainCustom"] = self.l7ProxyDomainCustom!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.policyIds != nil {
                map["PolicyIds"] = self.policyIds!
            }
            if self.portRanges != nil {
                var tmp : [Any] = []
                for k in self.portRanges! {
                    tmp.append(k.toMap())
                }
                map["PortRanges"] = tmp
            }
            if self.protocol_ != nil {
                map["Protocol"] = self.protocol_!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.tagIds != nil {
                map["TagIds"] = self.tagIds!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Addresses"] as? [String] {
                self.addresses = value
            }
            if let value = dict["ApplicationId"] as? String {
                self.applicationId = value
            }
            if let value = dict["AutoGenerated"] as? Int32 {
                self.autoGenerated = value
            }
            if let value = dict["BrowserAccessStatus"] as? String {
                self.browserAccessStatus = value
            }
            if let value = dict["ConnectorIds"] as? [String] {
                self.connectorIds = value
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["L7Config"] as? [String: Any?] {
                var model = PAL7Config()
                model.fromMap(value)
                self.l7Config = model
            }
            if let value = dict["L7ProxyDomainAutomatic"] as? String {
                self.l7ProxyDomainAutomatic = value
            }
            if let value = dict["L7ProxyDomainCustom"] as? String {
                self.l7ProxyDomainCustom = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["PolicyIds"] as? [String] {
                self.policyIds = value
            }
            if let value = dict["PortRanges"] as? [Any?] {
                var tmp : [GetPrivateAccessApplicationResponseBody.Application.PortRanges] = []
                for v in value {
                    if v != nil {
                        var model = GetPrivateAccessApplicationResponseBody.Application.PortRanges()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.portRanges = tmp
            }
            if let value = dict["Protocol"] as? String {
                self.protocol_ = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["TagIds"] as? [String] {
                self.tagIds = value
            }
        }
    }
    public var application: GetPrivateAccessApplicationResponseBody.Application?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.application?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.application != nil {
            map["Application"] = self.application?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Application"] as? [String: Any?] {
            var model = GetPrivateAccessApplicationResponseBody.Application()
            model.fromMap(value)
            self.application = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetPrivateAccessApplicationResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetPrivateAccessApplicationResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetPrivateAccessApplicationResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetPrivateAccessPolicyRequest : Tea.TeaModel {
    public var policyId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.policyId != nil {
            map["PolicyId"] = self.policyId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PolicyId"] as? String {
            self.policyId = value
        }
    }
}

public class GetPrivateAccessPolicyResponseBody : Tea.TeaModel {
    public class Policy : Tea.TeaModel {
        public class CustomUserAttributes : Tea.TeaModel {
            public var idpId: Int32?

            public var relation: String?

            public var userGroupType: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.idpId != nil {
                    map["IdpId"] = self.idpId!
                }
                if self.relation != nil {
                    map["Relation"] = self.relation!
                }
                if self.userGroupType != nil {
                    map["UserGroupType"] = self.userGroupType!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["IdpId"] as? Int32 {
                    self.idpId = value
                }
                if let value = dict["Relation"] as? String {
                    self.relation = value
                }
                if let value = dict["UserGroupType"] as? String {
                    self.userGroupType = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public var applicationIds: [String]?

        public var applicationType: String?

        public var createTime: String?

        public var customUserAttributes: [GetPrivateAccessPolicyResponseBody.Policy.CustomUserAttributes]?

        public var description_: String?

        public var deviceAttributeAction: String?

        public var deviceAttributeId: String?

        public var name: String?

        public var policyAction: String?

        public var policyId: String?

        public var priority: Int32?

        public var status: String?

        public var tagIds: [String]?

        public var triggerTemplateId: String?

        public var trustedProcessGroupIds: [String]?

        public var trustedProcessStatus: String?

        public var trustedSoftwareIds: [String]?

        public var userGroupIds: [String]?

        public var userGroupMode: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.applicationIds != nil {
                map["ApplicationIds"] = self.applicationIds!
            }
            if self.applicationType != nil {
                map["ApplicationType"] = self.applicationType!
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.customUserAttributes != nil {
                var tmp : [Any] = []
                for k in self.customUserAttributes! {
                    tmp.append(k.toMap())
                }
                map["CustomUserAttributes"] = tmp
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.deviceAttributeAction != nil {
                map["DeviceAttributeAction"] = self.deviceAttributeAction!
            }
            if self.deviceAttributeId != nil {
                map["DeviceAttributeId"] = self.deviceAttributeId!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.policyAction != nil {
                map["PolicyAction"] = self.policyAction!
            }
            if self.policyId != nil {
                map["PolicyId"] = self.policyId!
            }
            if self.priority != nil {
                map["Priority"] = self.priority!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.tagIds != nil {
                map["TagIds"] = self.tagIds!
            }
            if self.triggerTemplateId != nil {
                map["TriggerTemplateId"] = self.triggerTemplateId!
            }
            if self.trustedProcessGroupIds != nil {
                map["TrustedProcessGroupIds"] = self.trustedProcessGroupIds!
            }
            if self.trustedProcessStatus != nil {
                map["TrustedProcessStatus"] = self.trustedProcessStatus!
            }
            if self.trustedSoftwareIds != nil {
                map["TrustedSoftwareIds"] = self.trustedSoftwareIds!
            }
            if self.userGroupIds != nil {
                map["UserGroupIds"] = self.userGroupIds!
            }
            if self.userGroupMode != nil {
                map["UserGroupMode"] = self.userGroupMode!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ApplicationIds"] as? [String] {
                self.applicationIds = value
            }
            if let value = dict["ApplicationType"] as? String {
                self.applicationType = value
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["CustomUserAttributes"] as? [Any?] {
                var tmp : [GetPrivateAccessPolicyResponseBody.Policy.CustomUserAttributes] = []
                for v in value {
                    if v != nil {
                        var model = GetPrivateAccessPolicyResponseBody.Policy.CustomUserAttributes()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.customUserAttributes = tmp
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["DeviceAttributeAction"] as? String {
                self.deviceAttributeAction = value
            }
            if let value = dict["DeviceAttributeId"] as? String {
                self.deviceAttributeId = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["PolicyAction"] as? String {
                self.policyAction = value
            }
            if let value = dict["PolicyId"] as? String {
                self.policyId = value
            }
            if let value = dict["Priority"] as? Int32 {
                self.priority = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["TagIds"] as? [String] {
                self.tagIds = value
            }
            if let value = dict["TriggerTemplateId"] as? String {
                self.triggerTemplateId = value
            }
            if let value = dict["TrustedProcessGroupIds"] as? [String] {
                self.trustedProcessGroupIds = value
            }
            if let value = dict["TrustedProcessStatus"] as? String {
                self.trustedProcessStatus = value
            }
            if let value = dict["TrustedSoftwareIds"] as? [String] {
                self.trustedSoftwareIds = value
            }
            if let value = dict["UserGroupIds"] as? [String] {
                self.userGroupIds = value
            }
            if let value = dict["UserGroupMode"] as? String {
                self.userGroupMode = value
            }
        }
    }
    public var policy: GetPrivateAccessPolicyResponseBody.Policy?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.policy?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.policy != nil {
            map["Policy"] = self.policy?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Policy"] as? [String: Any?] {
            var model = GetPrivateAccessPolicyResponseBody.Policy()
            model.fromMap(value)
            self.policy = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetPrivateAccessPolicyResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetPrivateAccessPolicyResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetPrivateAccessPolicyResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetRegistrationPolicyRequest : Tea.TeaModel {
    public var policyId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.policyId != nil {
            map["PolicyId"] = self.policyId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PolicyId"] as? String {
            self.policyId = value
        }
    }
}

public class GetRegistrationPolicyResponseBody : Tea.TeaModel {
    public class LimitDetail : Tea.TeaModel {
        public class LimitCount : Tea.TeaModel {
            public var all: Int32?

            public var mobile: Int32?

            public var PC: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.all != nil {
                    map["All"] = self.all!
                }
                if self.mobile != nil {
                    map["Mobile"] = self.mobile!
                }
                if self.PC != nil {
                    map["PC"] = self.PC!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["All"] as? Int32 {
                    self.all = value
                }
                if let value = dict["Mobile"] as? Int32 {
                    self.mobile = value
                }
                if let value = dict["PC"] as? Int32 {
                    self.PC = value
                }
            }
        }
        public var deviceBelong: String?

        public var limitCount: GetRegistrationPolicyResponseBody.LimitDetail.LimitCount?

        public var limitType: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.limitCount?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.deviceBelong != nil {
                map["DeviceBelong"] = self.deviceBelong!
            }
            if self.limitCount != nil {
                map["LimitCount"] = self.limitCount?.toMap()
            }
            if self.limitType != nil {
                map["LimitType"] = self.limitType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DeviceBelong"] as? String {
                self.deviceBelong = value
            }
            if let value = dict["LimitCount"] as? [String: Any?] {
                var model = GetRegistrationPolicyResponseBody.LimitDetail.LimitCount()
                model.fromMap(value)
                self.limitCount = model
            }
            if let value = dict["LimitType"] as? String {
                self.limitType = value
            }
        }
    }
    public var createTime: String?

    public var description_: String?

    public var limitDetail: [GetRegistrationPolicyResponseBody.LimitDetail]?

    public var matchMode: String?

    public var name: String?

    public var policyId: String?

    public var priority: Int64?

    public var requestId: String?

    public var status: String?

    public var userGroupIds: [String]?

    public var whitelist: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.createTime != nil {
            map["CreateTime"] = self.createTime!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.limitDetail != nil {
            var tmp : [Any] = []
            for k in self.limitDetail! {
                tmp.append(k.toMap())
            }
            map["LimitDetail"] = tmp
        }
        if self.matchMode != nil {
            map["MatchMode"] = self.matchMode!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.policyId != nil {
            map["PolicyId"] = self.policyId!
        }
        if self.priority != nil {
            map["Priority"] = self.priority!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        if self.userGroupIds != nil {
            map["UserGroupIds"] = self.userGroupIds!
        }
        if self.whitelist != nil {
            map["Whitelist"] = self.whitelist!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CreateTime"] as? String {
            self.createTime = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["LimitDetail"] as? [Any?] {
            var tmp : [GetRegistrationPolicyResponseBody.LimitDetail] = []
            for v in value {
                if v != nil {
                    var model = GetRegistrationPolicyResponseBody.LimitDetail()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.limitDetail = tmp
        }
        if let value = dict["MatchMode"] as? String {
            self.matchMode = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["PolicyId"] as? String {
            self.policyId = value
        }
        if let value = dict["Priority"] as? Int64 {
            self.priority = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
        if let value = dict["UserGroupIds"] as? [String] {
            self.userGroupIds = value
        }
        if let value = dict["Whitelist"] as? [String] {
            self.whitelist = value
        }
    }
}

public class GetRegistrationPolicyResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetRegistrationPolicyResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetRegistrationPolicyResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetUserDeviceRequest : Tea.TeaModel {
    public var deviceTag: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.deviceTag != nil {
            map["DeviceTag"] = self.deviceTag!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DeviceTag"] as? String {
            self.deviceTag = value
        }
    }
}

public class GetUserDeviceResponseBody : Tea.TeaModel {
    public class Device : Tea.TeaModel {
        public class HistoryUsers : Tea.TeaModel {
            public var saseUserId: String?

            public var username: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.saseUserId != nil {
                    map["SaseUserId"] = self.saseUserId!
                }
                if self.username != nil {
                    map["Username"] = self.username!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["SaseUserId"] as? String {
                    self.saseUserId = value
                }
                if let value = dict["Username"] as? String {
                    self.username = value
                }
            }
        }
        public class NetInterfaceInfo : Tea.TeaModel {
            public var mac: String?

            public var name: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.mac != nil {
                    map["Mac"] = self.mac!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Mac"] as? String {
                    self.mac = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
            }
        }
        public var appStatus: String?

        public var appVersion: String?

        public var CPU: String?

        public var createTime: String?

        public var department: String?

        public var deviceBelong: String?

        public var deviceModel: String?

        public var deviceStatus: String?

        public var deviceTag: String?

        public var deviceType: String?

        public var deviceVersion: String?

        public var disk: String?

        public var dlpStatus: String?

        public var edrStatus: String?

        public var historyUsers: [GetUserDeviceResponseBody.Device.HistoryUsers]?

        public var hostname: String?

        public var iaStatus: String?

        public var innerIP: String?

        public var mac: String?

        public var matchDeviceGroupIds: [String]?

        public var memory: String?

        public var nacStatus: String?

        public var netInterfaceInfo: [GetUserDeviceResponseBody.Device.NetInterfaceInfo]?

        public var paStatus: String?

        public var saseUserId: String?

        public var sharingStatus: Bool?

        public var snBaseBoard: String?

        public var snBios: String?

        public var snDiskDrive: String?

        public var snProcessor: String?

        public var snSystem: String?

        public var srcIP: String?

        public var updateTime: String?

        public var username: String?

        public var workshop: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.appStatus != nil {
                map["AppStatus"] = self.appStatus!
            }
            if self.appVersion != nil {
                map["AppVersion"] = self.appVersion!
            }
            if self.CPU != nil {
                map["CPU"] = self.CPU!
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.department != nil {
                map["Department"] = self.department!
            }
            if self.deviceBelong != nil {
                map["DeviceBelong"] = self.deviceBelong!
            }
            if self.deviceModel != nil {
                map["DeviceModel"] = self.deviceModel!
            }
            if self.deviceStatus != nil {
                map["DeviceStatus"] = self.deviceStatus!
            }
            if self.deviceTag != nil {
                map["DeviceTag"] = self.deviceTag!
            }
            if self.deviceType != nil {
                map["DeviceType"] = self.deviceType!
            }
            if self.deviceVersion != nil {
                map["DeviceVersion"] = self.deviceVersion!
            }
            if self.disk != nil {
                map["Disk"] = self.disk!
            }
            if self.dlpStatus != nil {
                map["DlpStatus"] = self.dlpStatus!
            }
            if self.edrStatus != nil {
                map["EdrStatus"] = self.edrStatus!
            }
            if self.historyUsers != nil {
                var tmp : [Any] = []
                for k in self.historyUsers! {
                    tmp.append(k.toMap())
                }
                map["HistoryUsers"] = tmp
            }
            if self.hostname != nil {
                map["Hostname"] = self.hostname!
            }
            if self.iaStatus != nil {
                map["IaStatus"] = self.iaStatus!
            }
            if self.innerIP != nil {
                map["InnerIP"] = self.innerIP!
            }
            if self.mac != nil {
                map["Mac"] = self.mac!
            }
            if self.matchDeviceGroupIds != nil {
                map["MatchDeviceGroupIds"] = self.matchDeviceGroupIds!
            }
            if self.memory != nil {
                map["Memory"] = self.memory!
            }
            if self.nacStatus != nil {
                map["NacStatus"] = self.nacStatus!
            }
            if self.netInterfaceInfo != nil {
                var tmp : [Any] = []
                for k in self.netInterfaceInfo! {
                    tmp.append(k.toMap())
                }
                map["NetInterfaceInfo"] = tmp
            }
            if self.paStatus != nil {
                map["PaStatus"] = self.paStatus!
            }
            if self.saseUserId != nil {
                map["SaseUserId"] = self.saseUserId!
            }
            if self.sharingStatus != nil {
                map["SharingStatus"] = self.sharingStatus!
            }
            if self.snBaseBoard != nil {
                map["SnBaseBoard"] = self.snBaseBoard!
            }
            if self.snBios != nil {
                map["SnBios"] = self.snBios!
            }
            if self.snDiskDrive != nil {
                map["SnDiskDrive"] = self.snDiskDrive!
            }
            if self.snProcessor != nil {
                map["SnProcessor"] = self.snProcessor!
            }
            if self.snSystem != nil {
                map["SnSystem"] = self.snSystem!
            }
            if self.srcIP != nil {
                map["SrcIP"] = self.srcIP!
            }
            if self.updateTime != nil {
                map["UpdateTime"] = self.updateTime!
            }
            if self.username != nil {
                map["Username"] = self.username!
            }
            if self.workshop != nil {
                map["Workshop"] = self.workshop!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AppStatus"] as? String {
                self.appStatus = value
            }
            if let value = dict["AppVersion"] as? String {
                self.appVersion = value
            }
            if let value = dict["CPU"] as? String {
                self.CPU = value
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["Department"] as? String {
                self.department = value
            }
            if let value = dict["DeviceBelong"] as? String {
                self.deviceBelong = value
            }
            if let value = dict["DeviceModel"] as? String {
                self.deviceModel = value
            }
            if let value = dict["DeviceStatus"] as? String {
                self.deviceStatus = value
            }
            if let value = dict["DeviceTag"] as? String {
                self.deviceTag = value
            }
            if let value = dict["DeviceType"] as? String {
                self.deviceType = value
            }
            if let value = dict["DeviceVersion"] as? String {
                self.deviceVersion = value
            }
            if let value = dict["Disk"] as? String {
                self.disk = value
            }
            if let value = dict["DlpStatus"] as? String {
                self.dlpStatus = value
            }
            if let value = dict["EdrStatus"] as? String {
                self.edrStatus = value
            }
            if let value = dict["HistoryUsers"] as? [Any?] {
                var tmp : [GetUserDeviceResponseBody.Device.HistoryUsers] = []
                for v in value {
                    if v != nil {
                        var model = GetUserDeviceResponseBody.Device.HistoryUsers()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.historyUsers = tmp
            }
            if let value = dict["Hostname"] as? String {
                self.hostname = value
            }
            if let value = dict["IaStatus"] as? String {
                self.iaStatus = value
            }
            if let value = dict["InnerIP"] as? String {
                self.innerIP = value
            }
            if let value = dict["Mac"] as? String {
                self.mac = value
            }
            if let value = dict["MatchDeviceGroupIds"] as? [String] {
                self.matchDeviceGroupIds = value
            }
            if let value = dict["Memory"] as? String {
                self.memory = value
            }
            if let value = dict["NacStatus"] as? String {
                self.nacStatus = value
            }
            if let value = dict["NetInterfaceInfo"] as? [Any?] {
                var tmp : [GetUserDeviceResponseBody.Device.NetInterfaceInfo] = []
                for v in value {
                    if v != nil {
                        var model = GetUserDeviceResponseBody.Device.NetInterfaceInfo()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.netInterfaceInfo = tmp
            }
            if let value = dict["PaStatus"] as? String {
                self.paStatus = value
            }
            if let value = dict["SaseUserId"] as? String {
                self.saseUserId = value
            }
            if let value = dict["SharingStatus"] as? Bool {
                self.sharingStatus = value
            }
            if let value = dict["SnBaseBoard"] as? String {
                self.snBaseBoard = value
            }
            if let value = dict["SnBios"] as? String {
                self.snBios = value
            }
            if let value = dict["SnDiskDrive"] as? String {
                self.snDiskDrive = value
            }
            if let value = dict["SnProcessor"] as? String {
                self.snProcessor = value
            }
            if let value = dict["SnSystem"] as? String {
                self.snSystem = value
            }
            if let value = dict["SrcIP"] as? String {
                self.srcIP = value
            }
            if let value = dict["UpdateTime"] as? String {
                self.updateTime = value
            }
            if let value = dict["Username"] as? String {
                self.username = value
            }
            if let value = dict["Workshop"] as? String {
                self.workshop = value
            }
        }
    }
    public var device: GetUserDeviceResponseBody.Device?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.device?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.device != nil {
            map["Device"] = self.device?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Device"] as? [String: Any?] {
            var model = GetUserDeviceResponseBody.Device()
            model.fromMap(value)
            self.device = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetUserDeviceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetUserDeviceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetUserDeviceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetUserGroupRequest : Tea.TeaModel {
    public var userGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.userGroupId != nil {
            map["UserGroupId"] = self.userGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["UserGroupId"] as? String {
            self.userGroupId = value
        }
    }
}

public class GetUserGroupResponseBody : Tea.TeaModel {
    public class UserGroup : Tea.TeaModel {
        public class Attributes : Tea.TeaModel {
            public var idpId: Int32?

            public var relation: String?

            public var userGroupType: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.idpId != nil {
                    map["IdpId"] = self.idpId!
                }
                if self.relation != nil {
                    map["Relation"] = self.relation!
                }
                if self.userGroupType != nil {
                    map["UserGroupType"] = self.userGroupType!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["IdpId"] as? Int32 {
                    self.idpId = value
                }
                if let value = dict["Relation"] as? String {
                    self.relation = value
                }
                if let value = dict["UserGroupType"] as? String {
                    self.userGroupType = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public var attributes: [GetUserGroupResponseBody.UserGroup.Attributes]?

        public var createTime: String?

        public var description_: String?

        public var name: String?

        public var userGroupId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.attributes != nil {
                var tmp : [Any] = []
                for k in self.attributes! {
                    tmp.append(k.toMap())
                }
                map["Attributes"] = tmp
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.userGroupId != nil {
                map["UserGroupId"] = self.userGroupId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Attributes"] as? [Any?] {
                var tmp : [GetUserGroupResponseBody.UserGroup.Attributes] = []
                for v in value {
                    if v != nil {
                        var model = GetUserGroupResponseBody.UserGroup.Attributes()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.attributes = tmp
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["UserGroupId"] as? String {
                self.userGroupId = value
            }
        }
    }
    public var requestId: String?

    public var userGroup: GetUserGroupResponseBody.UserGroup?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.userGroup?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.userGroup != nil {
            map["UserGroup"] = self.userGroup?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["UserGroup"] as? [String: Any?] {
            var model = GetUserGroupResponseBody.UserGroup()
            model.fromMap(value)
            self.userGroup = model
        }
    }
}

public class GetUserGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetUserGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetUserGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetWmEmbedTaskRequest : Tea.TeaModel {
    public var taskId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["TaskId"] as? String {
            self.taskId = value
        }
    }
}

public class GetWmEmbedTaskResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var fileUrl: String?

        public var fileUrlExp: String?

        public var filename: String?

        public var outFileHashMd5: String?

        public var outFileSize: Int64?

        public var taskId: String?

        public var taskStatus: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.fileUrl != nil {
                map["FileUrl"] = self.fileUrl!
            }
            if self.fileUrlExp != nil {
                map["FileUrlExp"] = self.fileUrlExp!
            }
            if self.filename != nil {
                map["Filename"] = self.filename!
            }
            if self.outFileHashMd5 != nil {
                map["OutFileHashMd5"] = self.outFileHashMd5!
            }
            if self.outFileSize != nil {
                map["OutFileSize"] = self.outFileSize!
            }
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            if self.taskStatus != nil {
                map["TaskStatus"] = self.taskStatus!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["FileUrl"] as? String {
                self.fileUrl = value
            }
            if let value = dict["FileUrlExp"] as? String {
                self.fileUrlExp = value
            }
            if let value = dict["Filename"] as? String {
                self.filename = value
            }
            if let value = dict["OutFileHashMd5"] as? String {
                self.outFileHashMd5 = value
            }
            if let value = dict["OutFileSize"] as? Int64 {
                self.outFileSize = value
            }
            if let value = dict["TaskId"] as? String {
                self.taskId = value
            }
            if let value = dict["TaskStatus"] as? String {
                self.taskStatus = value
            }
        }
    }
    public var data: GetWmEmbedTaskResponseBody.Data?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetWmEmbedTaskResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetWmEmbedTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetWmEmbedTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetWmEmbedTaskResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetWmExtractTaskRequest : Tea.TeaModel {
    public var taskId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["TaskId"] as? String {
            self.taskId = value
        }
    }
}

public class GetWmExtractTaskResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var createTime: String?

        public var filename: String?

        public var status: String?

        public var taskId: String?

        public var wmInfoBytesB64: String?

        public var wmInfoSize: Int64?

        public var wmInfoUint: Int64?

        public var wmType: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.filename != nil {
                map["Filename"] = self.filename!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            if self.wmInfoBytesB64 != nil {
                map["WmInfoBytesB64"] = self.wmInfoBytesB64!
            }
            if self.wmInfoSize != nil {
                map["WmInfoSize"] = self.wmInfoSize!
            }
            if self.wmInfoUint != nil {
                map["WmInfoUint"] = self.wmInfoUint!
            }
            if self.wmType != nil {
                map["WmType"] = self.wmType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["Filename"] as? String {
                self.filename = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["TaskId"] as? String {
                self.taskId = value
            }
            if let value = dict["WmInfoBytesB64"] as? String {
                self.wmInfoBytesB64 = value
            }
            if let value = dict["WmInfoSize"] as? Int64 {
                self.wmInfoSize = value
            }
            if let value = dict["WmInfoUint"] as? Int64 {
                self.wmInfoUint = value
            }
            if let value = dict["WmType"] as? String {
                self.wmType = value
            }
        }
    }
    public var data: GetWmExtractTaskResponseBody.Data?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetWmExtractTaskResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetWmExtractTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetWmExtractTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetWmExtractTaskResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ImportEnterpriseAccelerateTargetsRequest : Tea.TeaModel {
    public var eapId: String?

    public var fileUrl: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.eapId != nil {
            map["EapId"] = self.eapId!
        }
        if self.fileUrl != nil {
            map["FileUrl"] = self.fileUrl!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EapId"] as? String {
            self.eapId = value
        }
        if let value = dict["FileUrl"] as? String {
            self.fileUrl = value
        }
    }
}

public class ImportEnterpriseAccelerateTargetsResponseBody : Tea.TeaModel {
    public var data: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ImportEnterpriseAccelerateTargetsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ImportEnterpriseAccelerateTargetsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ImportEnterpriseAccelerateTargetsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListApplicationsForPrivateAccessPolicyRequest : Tea.TeaModel {
    public var policyIds: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.policyIds != nil {
            map["PolicyIds"] = self.policyIds!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PolicyIds"] as? [String] {
            self.policyIds = value
        }
    }
}

public class ListApplicationsForPrivateAccessPolicyResponseBody : Tea.TeaModel {
    public class Polices : Tea.TeaModel {
        public class Applications : Tea.TeaModel {
            public class PortRanges : Tea.TeaModel {
                public var begin: Int32?

                public var end: Int32?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.begin != nil {
                        map["Begin"] = self.begin!
                    }
                    if self.end != nil {
                        map["End"] = self.end!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Begin"] as? Int32 {
                        self.begin = value
                    }
                    if let value = dict["End"] as? Int32 {
                        self.end = value
                    }
                }
            }
            public var addresses: [String]?

            public var applicationId: String?

            public var createTime: String?

            public var description_: String?

            public var name: String?

            public var portRanges: [ListApplicationsForPrivateAccessPolicyResponseBody.Polices.Applications.PortRanges]?

            public var protocol_: String?

            public var status: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.addresses != nil {
                    map["Addresses"] = self.addresses!
                }
                if self.applicationId != nil {
                    map["ApplicationId"] = self.applicationId!
                }
                if self.createTime != nil {
                    map["CreateTime"] = self.createTime!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.portRanges != nil {
                    var tmp : [Any] = []
                    for k in self.portRanges! {
                        tmp.append(k.toMap())
                    }
                    map["PortRanges"] = tmp
                }
                if self.protocol_ != nil {
                    map["Protocol"] = self.protocol_!
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Addresses"] as? [String] {
                    self.addresses = value
                }
                if let value = dict["ApplicationId"] as? String {
                    self.applicationId = value
                }
                if let value = dict["CreateTime"] as? String {
                    self.createTime = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["PortRanges"] as? [Any?] {
                    var tmp : [ListApplicationsForPrivateAccessPolicyResponseBody.Polices.Applications.PortRanges] = []
                    for v in value {
                        if v != nil {
                            var model = ListApplicationsForPrivateAccessPolicyResponseBody.Polices.Applications.PortRanges()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.portRanges = tmp
                }
                if let value = dict["Protocol"] as? String {
                    self.protocol_ = value
                }
                if let value = dict["Status"] as? String {
                    self.status = value
                }
            }
        }
        public var applications: [ListApplicationsForPrivateAccessPolicyResponseBody.Polices.Applications]?

        public var policyId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.applications != nil {
                var tmp : [Any] = []
                for k in self.applications! {
                    tmp.append(k.toMap())
                }
                map["Applications"] = tmp
            }
            if self.policyId != nil {
                map["PolicyId"] = self.policyId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Applications"] as? [Any?] {
                var tmp : [ListApplicationsForPrivateAccessPolicyResponseBody.Polices.Applications] = []
                for v in value {
                    if v != nil {
                        var model = ListApplicationsForPrivateAccessPolicyResponseBody.Polices.Applications()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.applications = tmp
            }
            if let value = dict["PolicyId"] as? String {
                self.policyId = value
            }
        }
    }
    public var polices: [ListApplicationsForPrivateAccessPolicyResponseBody.Polices]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.polices != nil {
            var tmp : [Any] = []
            for k in self.polices! {
                tmp.append(k.toMap())
            }
            map["Polices"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Polices"] as? [Any?] {
            var tmp : [ListApplicationsForPrivateAccessPolicyResponseBody.Polices] = []
            for v in value {
                if v != nil {
                    var model = ListApplicationsForPrivateAccessPolicyResponseBody.Polices()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.polices = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListApplicationsForPrivateAccessPolicyResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListApplicationsForPrivateAccessPolicyResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListApplicationsForPrivateAccessPolicyResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListApplicationsForPrivateAccessTagRequest : Tea.TeaModel {
    public var tagIds: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.tagIds != nil {
            map["TagIds"] = self.tagIds!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["TagIds"] as? [String] {
            self.tagIds = value
        }
    }
}

public class ListApplicationsForPrivateAccessTagResponseBody : Tea.TeaModel {
    public class Tags : Tea.TeaModel {
        public class Applications : Tea.TeaModel {
            public class PortRanges : Tea.TeaModel {
                public var begin: Int32?

                public var end: Int32?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.begin != nil {
                        map["Begin"] = self.begin!
                    }
                    if self.end != nil {
                        map["End"] = self.end!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Begin"] as? Int32 {
                        self.begin = value
                    }
                    if let value = dict["End"] as? Int32 {
                        self.end = value
                    }
                }
            }
            public var addresses: [String]?

            public var applicationId: String?

            public var createTime: String?

            public var description_: String?

            public var name: String?

            public var portRanges: [ListApplicationsForPrivateAccessTagResponseBody.Tags.Applications.PortRanges]?

            public var protocol_: String?

            public var status: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.addresses != nil {
                    map["Addresses"] = self.addresses!
                }
                if self.applicationId != nil {
                    map["ApplicationId"] = self.applicationId!
                }
                if self.createTime != nil {
                    map["CreateTime"] = self.createTime!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.portRanges != nil {
                    var tmp : [Any] = []
                    for k in self.portRanges! {
                        tmp.append(k.toMap())
                    }
                    map["PortRanges"] = tmp
                }
                if self.protocol_ != nil {
                    map["Protocol"] = self.protocol_!
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Addresses"] as? [String] {
                    self.addresses = value
                }
                if let value = dict["ApplicationId"] as? String {
                    self.applicationId = value
                }
                if let value = dict["CreateTime"] as? String {
                    self.createTime = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["PortRanges"] as? [Any?] {
                    var tmp : [ListApplicationsForPrivateAccessTagResponseBody.Tags.Applications.PortRanges] = []
                    for v in value {
                        if v != nil {
                            var model = ListApplicationsForPrivateAccessTagResponseBody.Tags.Applications.PortRanges()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.portRanges = tmp
                }
                if let value = dict["Protocol"] as? String {
                    self.protocol_ = value
                }
                if let value = dict["Status"] as? String {
                    self.status = value
                }
            }
        }
        public var applications: [ListApplicationsForPrivateAccessTagResponseBody.Tags.Applications]?

        public var tagId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.applications != nil {
                var tmp : [Any] = []
                for k in self.applications! {
                    tmp.append(k.toMap())
                }
                map["Applications"] = tmp
            }
            if self.tagId != nil {
                map["TagId"] = self.tagId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Applications"] as? [Any?] {
                var tmp : [ListApplicationsForPrivateAccessTagResponseBody.Tags.Applications] = []
                for v in value {
                    if v != nil {
                        var model = ListApplicationsForPrivateAccessTagResponseBody.Tags.Applications()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.applications = tmp
            }
            if let value = dict["TagId"] as? String {
                self.tagId = value
            }
        }
    }
    public var requestId: String?

    public var tags: [ListApplicationsForPrivateAccessTagResponseBody.Tags]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.tags != nil {
            var tmp : [Any] = []
            for k in self.tags! {
                tmp.append(k.toMap())
            }
            map["Tags"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Tags"] as? [Any?] {
            var tmp : [ListApplicationsForPrivateAccessTagResponseBody.Tags] = []
            for v in value {
                if v != nil {
                    var model = ListApplicationsForPrivateAccessTagResponseBody.Tags()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tags = tmp
        }
    }
}

public class ListApplicationsForPrivateAccessTagResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListApplicationsForPrivateAccessTagResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListApplicationsForPrivateAccessTagResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListApprovalProcessesRequest : Tea.TeaModel {
    public var currentPage: Int64?

    public var pageSize: Int64?

    public var policyId: String?

    public var policyType: String?

    public var processIds: [String]?

    public var processName: String?

    public var saseUserId: String?

    public var username: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.currentPage != nil {
            map["CurrentPage"] = self.currentPage!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.policyId != nil {
            map["PolicyId"] = self.policyId!
        }
        if self.policyType != nil {
            map["PolicyType"] = self.policyType!
        }
        if self.processIds != nil {
            map["ProcessIds"] = self.processIds!
        }
        if self.processName != nil {
            map["ProcessName"] = self.processName!
        }
        if self.saseUserId != nil {
            map["SaseUserId"] = self.saseUserId!
        }
        if self.username != nil {
            map["Username"] = self.username!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CurrentPage"] as? Int64 {
            self.currentPage = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["PolicyId"] as? String {
            self.policyId = value
        }
        if let value = dict["PolicyType"] as? String {
            self.policyType = value
        }
        if let value = dict["ProcessIds"] as? [String] {
            self.processIds = value
        }
        if let value = dict["ProcessName"] as? String {
            self.processName = value
        }
        if let value = dict["SaseUserId"] as? String {
            self.saseUserId = value
        }
        if let value = dict["Username"] as? String {
            self.username = value
        }
    }
}

public class ListApprovalProcessesResponseBody : Tea.TeaModel {
    public class Processes : Tea.TeaModel {
        public class AppUninstallPolicies : Tea.TeaModel {
            public var policyIds: [String]?

            public var schemaId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.policyIds != nil {
                    map["PolicyIds"] = self.policyIds!
                }
                if self.schemaId != nil {
                    map["SchemaId"] = self.schemaId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["PolicyIds"] as? [String] {
                    self.policyIds = value
                }
                if let value = dict["SchemaId"] as? String {
                    self.schemaId = value
                }
            }
        }
        public class DeviceRegistrationPolicies : Tea.TeaModel {
            public var policyIds: [String]?

            public var schemaId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.policyIds != nil {
                    map["PolicyIds"] = self.policyIds!
                }
                if self.schemaId != nil {
                    map["SchemaId"] = self.schemaId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["PolicyIds"] as? [String] {
                    self.policyIds = value
                }
                if let value = dict["SchemaId"] as? String {
                    self.schemaId = value
                }
            }
        }
        public class DlpSendPolicies : Tea.TeaModel {
            public var policyIds: [String]?

            public var schemaId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.policyIds != nil {
                    map["PolicyIds"] = self.policyIds!
                }
                if self.schemaId != nil {
                    map["SchemaId"] = self.schemaId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["PolicyIds"] as? [String] {
                    self.policyIds = value
                }
                if let value = dict["SchemaId"] as? String {
                    self.schemaId = value
                }
            }
        }
        public class DomainBlacklistPolicies : Tea.TeaModel {
            public var policyIds: [String]?

            public var schemaId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.policyIds != nil {
                    map["PolicyIds"] = self.policyIds!
                }
                if self.schemaId != nil {
                    map["SchemaId"] = self.schemaId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["PolicyIds"] as? [String] {
                    self.policyIds = value
                }
                if let value = dict["SchemaId"] as? String {
                    self.schemaId = value
                }
            }
        }
        public class DomainWhitelistPolicies : Tea.TeaModel {
            public var policyIds: [String]?

            public var schemaId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.policyIds != nil {
                    map["PolicyIds"] = self.policyIds!
                }
                if self.schemaId != nil {
                    map["SchemaId"] = self.schemaId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["PolicyIds"] as? [String] {
                    self.policyIds = value
                }
                if let value = dict["SchemaId"] as? String {
                    self.schemaId = value
                }
            }
        }
        public class EndpointHardeningPolicies : Tea.TeaModel {
            public var policyIds: [String]?

            public var schemaId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.policyIds != nil {
                    map["PolicyIds"] = self.policyIds!
                }
                if self.schemaId != nil {
                    map["SchemaId"] = self.schemaId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["PolicyIds"] as? [String] {
                    self.policyIds = value
                }
                if let value = dict["SchemaId"] as? String {
                    self.schemaId = value
                }
            }
        }
        public class PeripheralBlockPolicies : Tea.TeaModel {
            public var policyIds: [String]?

            public var schemaId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.policyIds != nil {
                    map["PolicyIds"] = self.policyIds!
                }
                if self.schemaId != nil {
                    map["SchemaId"] = self.schemaId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["PolicyIds"] as? [String] {
                    self.policyIds = value
                }
                if let value = dict["SchemaId"] as? String {
                    self.schemaId = value
                }
            }
        }
        public class ProcessNodes : Tea.TeaModel {
            public var saseUserId: String?

            public var username: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.saseUserId != nil {
                    map["SaseUserId"] = self.saseUserId!
                }
                if self.username != nil {
                    map["Username"] = self.username!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["SaseUserId"] as? String {
                    self.saseUserId = value
                }
                if let value = dict["Username"] as? String {
                    self.username = value
                }
            }
        }
        public class SoftwareBlockPolicies : Tea.TeaModel {
            public var policyIds: [String]?

            public var schemaId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.policyIds != nil {
                    map["PolicyIds"] = self.policyIds!
                }
                if self.schemaId != nil {
                    map["SchemaId"] = self.schemaId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["PolicyIds"] as? [String] {
                    self.policyIds = value
                }
                if let value = dict["SchemaId"] as? String {
                    self.schemaId = value
                }
            }
        }
        public class SoftwareHardeningPolicies : Tea.TeaModel {
            public var policyIds: [String]?

            public var schemaId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.policyIds != nil {
                    map["PolicyIds"] = self.policyIds!
                }
                if self.schemaId != nil {
                    map["SchemaId"] = self.schemaId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["PolicyIds"] as? [String] {
                    self.policyIds = value
                }
                if let value = dict["SchemaId"] as? String {
                    self.schemaId = value
                }
            }
        }
        public var appUninstallPolicies: ListApprovalProcessesResponseBody.Processes.AppUninstallPolicies?

        public var createTime: String?

        public var description_: String?

        public var deviceRegistrationPolicies: ListApprovalProcessesResponseBody.Processes.DeviceRegistrationPolicies?

        public var dlpSendPolicies: ListApprovalProcessesResponseBody.Processes.DlpSendPolicies?

        public var domainBlacklistPolicies: ListApprovalProcessesResponseBody.Processes.DomainBlacklistPolicies?

        public var domainWhitelistPolicies: ListApprovalProcessesResponseBody.Processes.DomainWhitelistPolicies?

        public var endpointHardeningPolicies: ListApprovalProcessesResponseBody.Processes.EndpointHardeningPolicies?

        public var peripheralBlockPolicies: ListApprovalProcessesResponseBody.Processes.PeripheralBlockPolicies?

        public var processId: String?

        public var processName: String?

        public var processNodes: [[ListApprovalProcessesResponseBody.Processes.ProcessNodes]]?

        public var softwareBlockPolicies: ListApprovalProcessesResponseBody.Processes.SoftwareBlockPolicies?

        public var softwareHardeningPolicies: ListApprovalProcessesResponseBody.Processes.SoftwareHardeningPolicies?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.appUninstallPolicies?.validate()
            try self.deviceRegistrationPolicies?.validate()
            try self.dlpSendPolicies?.validate()
            try self.domainBlacklistPolicies?.validate()
            try self.domainWhitelistPolicies?.validate()
            try self.endpointHardeningPolicies?.validate()
            try self.peripheralBlockPolicies?.validate()
            try self.softwareBlockPolicies?.validate()
            try self.softwareHardeningPolicies?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.appUninstallPolicies != nil {
                map["AppUninstallPolicies"] = self.appUninstallPolicies?.toMap()
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.deviceRegistrationPolicies != nil {
                map["DeviceRegistrationPolicies"] = self.deviceRegistrationPolicies?.toMap()
            }
            if self.dlpSendPolicies != nil {
                map["DlpSendPolicies"] = self.dlpSendPolicies?.toMap()
            }
            if self.domainBlacklistPolicies != nil {
                map["DomainBlacklistPolicies"] = self.domainBlacklistPolicies?.toMap()
            }
            if self.domainWhitelistPolicies != nil {
                map["DomainWhitelistPolicies"] = self.domainWhitelistPolicies?.toMap()
            }
            if self.endpointHardeningPolicies != nil {
                map["EndpointHardeningPolicies"] = self.endpointHardeningPolicies?.toMap()
            }
            if self.peripheralBlockPolicies != nil {
                map["PeripheralBlockPolicies"] = self.peripheralBlockPolicies?.toMap()
            }
            if self.processId != nil {
                map["ProcessId"] = self.processId!
            }
            if self.processName != nil {
                map["ProcessName"] = self.processName!
            }
            if self.processNodes != nil {
                var tmp : [Any] = []
                for k in self.processNodes! {
                    var l1 : [Any] = []
                    for k1 in k {
                        l1.append(k1.toMap())
                    }
                    tmp.append(l1)
                }
                map["ProcessNodes"] = tmp
            }
            if self.softwareBlockPolicies != nil {
                map["SoftwareBlockPolicies"] = self.softwareBlockPolicies?.toMap()
            }
            if self.softwareHardeningPolicies != nil {
                map["SoftwareHardeningPolicies"] = self.softwareHardeningPolicies?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AppUninstallPolicies"] as? [String: Any?] {
                var model = ListApprovalProcessesResponseBody.Processes.AppUninstallPolicies()
                model.fromMap(value)
                self.appUninstallPolicies = model
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["DeviceRegistrationPolicies"] as? [String: Any?] {
                var model = ListApprovalProcessesResponseBody.Processes.DeviceRegistrationPolicies()
                model.fromMap(value)
                self.deviceRegistrationPolicies = model
            }
            if let value = dict["DlpSendPolicies"] as? [String: Any?] {
                var model = ListApprovalProcessesResponseBody.Processes.DlpSendPolicies()
                model.fromMap(value)
                self.dlpSendPolicies = model
            }
            if let value = dict["DomainBlacklistPolicies"] as? [String: Any?] {
                var model = ListApprovalProcessesResponseBody.Processes.DomainBlacklistPolicies()
                model.fromMap(value)
                self.domainBlacklistPolicies = model
            }
            if let value = dict["DomainWhitelistPolicies"] as? [String: Any?] {
                var model = ListApprovalProcessesResponseBody.Processes.DomainWhitelistPolicies()
                model.fromMap(value)
                self.domainWhitelistPolicies = model
            }
            if let value = dict["EndpointHardeningPolicies"] as? [String: Any?] {
                var model = ListApprovalProcessesResponseBody.Processes.EndpointHardeningPolicies()
                model.fromMap(value)
                self.endpointHardeningPolicies = model
            }
            if let value = dict["PeripheralBlockPolicies"] as? [String: Any?] {
                var model = ListApprovalProcessesResponseBody.Processes.PeripheralBlockPolicies()
                model.fromMap(value)
                self.peripheralBlockPolicies = model
            }
            if let value = dict["ProcessId"] as? String {
                self.processId = value
            }
            if let value = dict["ProcessName"] as? String {
                self.processName = value
            }
            if let value = dict["ProcessNodes"] as? [Any?] {
                var tmp : [[ListApprovalProcessesResponseBody.Processes.ProcessNodes]] = []
                for v in value {
                    if v != nil {
                        var l1 : [ListApprovalProcessesResponseBody.Processes.ProcessNodes] = []
                        for v1 in v as! [Any?] {
                            if v1 != nil {
                                var model = ListApprovalProcessesResponseBody.Processes.ProcessNodes()
                                if v1 != nil {
                                    model.fromMap(v1 as? [String: Any?])
                                }
                                l1.append(model)
                            }
                        }
                        tmp.append(l1)
                    }
                }
                self.processNodes = tmp
            }
            if let value = dict["SoftwareBlockPolicies"] as? [String: Any?] {
                var model = ListApprovalProcessesResponseBody.Processes.SoftwareBlockPolicies()
                model.fromMap(value)
                self.softwareBlockPolicies = model
            }
            if let value = dict["SoftwareHardeningPolicies"] as? [String: Any?] {
                var model = ListApprovalProcessesResponseBody.Processes.SoftwareHardeningPolicies()
                model.fromMap(value)
                self.softwareHardeningPolicies = model
            }
        }
    }
    public var processes: [ListApprovalProcessesResponseBody.Processes]?

    public var requestId: String?

    public var totalNum: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.processes != nil {
            var tmp : [Any] = []
            for k in self.processes! {
                tmp.append(k.toMap())
            }
            map["Processes"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalNum != nil {
            map["TotalNum"] = self.totalNum!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Processes"] as? [Any?] {
            var tmp : [ListApprovalProcessesResponseBody.Processes] = []
            for v in value {
                if v != nil {
                    var model = ListApprovalProcessesResponseBody.Processes()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.processes = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalNum"] as? String {
            self.totalNum = value
        }
    }
}

public class ListApprovalProcessesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListApprovalProcessesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListApprovalProcessesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListApprovalProcessesForApprovalSchemasRequest : Tea.TeaModel {
    public var schemaIds: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.schemaIds != nil {
            map["SchemaIds"] = self.schemaIds!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["SchemaIds"] as? [String] {
            self.schemaIds = value
        }
    }
}

public class ListApprovalProcessesForApprovalSchemasResponseBody : Tea.TeaModel {
    public class Schemas : Tea.TeaModel {
        public class Processes : Tea.TeaModel {
            public var createTime: String?

            public var description_: String?

            public var processId: String?

            public var processName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.createTime != nil {
                    map["CreateTime"] = self.createTime!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.processId != nil {
                    map["ProcessId"] = self.processId!
                }
                if self.processName != nil {
                    map["ProcessName"] = self.processName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CreateTime"] as? String {
                    self.createTime = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["ProcessId"] as? String {
                    self.processId = value
                }
                if let value = dict["ProcessName"] as? String {
                    self.processName = value
                }
            }
        }
        public var processes: [ListApprovalProcessesForApprovalSchemasResponseBody.Schemas.Processes]?

        public var schemaId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.processes != nil {
                var tmp : [Any] = []
                for k in self.processes! {
                    tmp.append(k.toMap())
                }
                map["Processes"] = tmp
            }
            if self.schemaId != nil {
                map["SchemaId"] = self.schemaId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Processes"] as? [Any?] {
                var tmp : [ListApprovalProcessesForApprovalSchemasResponseBody.Schemas.Processes] = []
                for v in value {
                    if v != nil {
                        var model = ListApprovalProcessesForApprovalSchemasResponseBody.Schemas.Processes()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.processes = tmp
            }
            if let value = dict["SchemaId"] as? String {
                self.schemaId = value
            }
        }
    }
    public var requestId: String?

    public var schemas: [ListApprovalProcessesForApprovalSchemasResponseBody.Schemas]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.schemas != nil {
            var tmp : [Any] = []
            for k in self.schemas! {
                tmp.append(k.toMap())
            }
            map["Schemas"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Schemas"] as? [Any?] {
            var tmp : [ListApprovalProcessesForApprovalSchemasResponseBody.Schemas] = []
            for v in value {
                if v != nil {
                    var model = ListApprovalProcessesForApprovalSchemasResponseBody.Schemas()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.schemas = tmp
        }
    }
}

public class ListApprovalProcessesForApprovalSchemasResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListApprovalProcessesForApprovalSchemasResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListApprovalProcessesForApprovalSchemasResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListApprovalSchemasRequest : Tea.TeaModel {
    public var currentPage: Int64?

    public var pageSize: Int64?

    public var policyType: String?

    public var schemaIds: [String]?

    public var schemaName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.currentPage != nil {
            map["CurrentPage"] = self.currentPage!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.policyType != nil {
            map["PolicyType"] = self.policyType!
        }
        if self.schemaIds != nil {
            map["SchemaIds"] = self.schemaIds!
        }
        if self.schemaName != nil {
            map["SchemaName"] = self.schemaName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CurrentPage"] as? Int64 {
            self.currentPage = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["PolicyType"] as? String {
            self.policyType = value
        }
        if let value = dict["SchemaIds"] as? [String] {
            self.schemaIds = value
        }
        if let value = dict["SchemaName"] as? String {
            self.schemaName = value
        }
    }
}

public class ListApprovalSchemasResponseBody : Tea.TeaModel {
    public class Schemas : Tea.TeaModel {
        public var createTime: String?

        public var description_: String?

        public var isDefault: Bool?

        public var policyType: String?

        public var schemaContent: String?

        public var schemaId: String?

        public var schemaName: String?

        public var schemaVersion: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.isDefault != nil {
                map["IsDefault"] = self.isDefault!
            }
            if self.policyType != nil {
                map["PolicyType"] = self.policyType!
            }
            if self.schemaContent != nil {
                map["SchemaContent"] = self.schemaContent!
            }
            if self.schemaId != nil {
                map["SchemaId"] = self.schemaId!
            }
            if self.schemaName != nil {
                map["SchemaName"] = self.schemaName!
            }
            if self.schemaVersion != nil {
                map["SchemaVersion"] = self.schemaVersion!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["IsDefault"] as? Bool {
                self.isDefault = value
            }
            if let value = dict["PolicyType"] as? String {
                self.policyType = value
            }
            if let value = dict["SchemaContent"] as? String {
                self.schemaContent = value
            }
            if let value = dict["SchemaId"] as? String {
                self.schemaId = value
            }
            if let value = dict["SchemaName"] as? String {
                self.schemaName = value
            }
            if let value = dict["SchemaVersion"] as? Int64 {
                self.schemaVersion = value
            }
        }
    }
    public var requestId: String?

    public var schemas: [ListApprovalSchemasResponseBody.Schemas]?

    public var totalNum: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.schemas != nil {
            var tmp : [Any] = []
            for k in self.schemas! {
                tmp.append(k.toMap())
            }
            map["Schemas"] = tmp
        }
        if self.totalNum != nil {
            map["TotalNum"] = self.totalNum!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Schemas"] as? [Any?] {
            var tmp : [ListApprovalSchemasResponseBody.Schemas] = []
            for v in value {
                if v != nil {
                    var model = ListApprovalSchemasResponseBody.Schemas()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.schemas = tmp
        }
        if let value = dict["TotalNum"] as? String {
            self.totalNum = value
        }
    }
}

public class ListApprovalSchemasResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListApprovalSchemasResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListApprovalSchemasResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListApprovalSchemasForApprovalProcessesRequest : Tea.TeaModel {
    public var processIds: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.processIds != nil {
            map["ProcessIds"] = self.processIds!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ProcessIds"] as? [String] {
            self.processIds = value
        }
    }
}

public class ListApprovalSchemasForApprovalProcessesResponseBody : Tea.TeaModel {
    public class Processes : Tea.TeaModel {
        public class Schemas : Tea.TeaModel {
            public var createTime: String?

            public var description_: String?

            public var isDefault: Bool?

            public var policyType: String?

            public var schemaContent: String?

            public var schemaId: String?

            public var schemaName: String?

            public var schemaVersion: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.createTime != nil {
                    map["CreateTime"] = self.createTime!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.isDefault != nil {
                    map["IsDefault"] = self.isDefault!
                }
                if self.policyType != nil {
                    map["PolicyType"] = self.policyType!
                }
                if self.schemaContent != nil {
                    map["SchemaContent"] = self.schemaContent!
                }
                if self.schemaId != nil {
                    map["SchemaId"] = self.schemaId!
                }
                if self.schemaName != nil {
                    map["SchemaName"] = self.schemaName!
                }
                if self.schemaVersion != nil {
                    map["SchemaVersion"] = self.schemaVersion!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CreateTime"] as? String {
                    self.createTime = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["IsDefault"] as? Bool {
                    self.isDefault = value
                }
                if let value = dict["PolicyType"] as? String {
                    self.policyType = value
                }
                if let value = dict["SchemaContent"] as? String {
                    self.schemaContent = value
                }
                if let value = dict["SchemaId"] as? String {
                    self.schemaId = value
                }
                if let value = dict["SchemaName"] as? String {
                    self.schemaName = value
                }
                if let value = dict["SchemaVersion"] as? Int64 {
                    self.schemaVersion = value
                }
            }
        }
        public var processId: String?

        public var schemas: [ListApprovalSchemasForApprovalProcessesResponseBody.Processes.Schemas]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.processId != nil {
                map["ProcessId"] = self.processId!
            }
            if self.schemas != nil {
                var tmp : [Any] = []
                for k in self.schemas! {
                    tmp.append(k.toMap())
                }
                map["Schemas"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ProcessId"] as? String {
                self.processId = value
            }
            if let value = dict["Schemas"] as? [Any?] {
                var tmp : [ListApprovalSchemasForApprovalProcessesResponseBody.Processes.Schemas] = []
                for v in value {
                    if v != nil {
                        var model = ListApprovalSchemasForApprovalProcessesResponseBody.Processes.Schemas()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.schemas = tmp
            }
        }
    }
    public var processes: [ListApprovalSchemasForApprovalProcessesResponseBody.Processes]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.processes != nil {
            var tmp : [Any] = []
            for k in self.processes! {
                tmp.append(k.toMap())
            }
            map["Processes"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Processes"] as? [Any?] {
            var tmp : [ListApprovalSchemasForApprovalProcessesResponseBody.Processes] = []
            for v in value {
                if v != nil {
                    var model = ListApprovalSchemasForApprovalProcessesResponseBody.Processes()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.processes = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListApprovalSchemasForApprovalProcessesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListApprovalSchemasForApprovalProcessesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListApprovalSchemasForApprovalProcessesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListApprovalsRequest : Tea.TeaModel {
    public var approvalIds: [String]?

    public var createEndTime: Int64?

    public var createStartTime: Int64?

    public var creatorDepartment: String?

    public var creatorDevTag: String?

    public var creatorUserId: String?

    public var creatorUsername: String?

    public var currentPage: Int64?

    public var operatorUserId: String?

    public var operatorUsername: String?

    public var pageSize: Int64?

    public var policyType: String?

    public var processId: String?

    public var processName: String?

    public var schemaId: String?

    public var schemaName: String?

    public var statuses: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.approvalIds != nil {
            map["ApprovalIds"] = self.approvalIds!
        }
        if self.createEndTime != nil {
            map["CreateEndTime"] = self.createEndTime!
        }
        if self.createStartTime != nil {
            map["CreateStartTime"] = self.createStartTime!
        }
        if self.creatorDepartment != nil {
            map["CreatorDepartment"] = self.creatorDepartment!
        }
        if self.creatorDevTag != nil {
            map["CreatorDevTag"] = self.creatorDevTag!
        }
        if self.creatorUserId != nil {
            map["CreatorUserId"] = self.creatorUserId!
        }
        if self.creatorUsername != nil {
            map["CreatorUsername"] = self.creatorUsername!
        }
        if self.currentPage != nil {
            map["CurrentPage"] = self.currentPage!
        }
        if self.operatorUserId != nil {
            map["OperatorUserId"] = self.operatorUserId!
        }
        if self.operatorUsername != nil {
            map["OperatorUsername"] = self.operatorUsername!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.policyType != nil {
            map["PolicyType"] = self.policyType!
        }
        if self.processId != nil {
            map["ProcessId"] = self.processId!
        }
        if self.processName != nil {
            map["ProcessName"] = self.processName!
        }
        if self.schemaId != nil {
            map["SchemaId"] = self.schemaId!
        }
        if self.schemaName != nil {
            map["SchemaName"] = self.schemaName!
        }
        if self.statuses != nil {
            map["Statuses"] = self.statuses!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApprovalIds"] as? [String] {
            self.approvalIds = value
        }
        if let value = dict["CreateEndTime"] as? Int64 {
            self.createEndTime = value
        }
        if let value = dict["CreateStartTime"] as? Int64 {
            self.createStartTime = value
        }
        if let value = dict["CreatorDepartment"] as? String {
            self.creatorDepartment = value
        }
        if let value = dict["CreatorDevTag"] as? String {
            self.creatorDevTag = value
        }
        if let value = dict["CreatorUserId"] as? String {
            self.creatorUserId = value
        }
        if let value = dict["CreatorUsername"] as? String {
            self.creatorUsername = value
        }
        if let value = dict["CurrentPage"] as? Int64 {
            self.currentPage = value
        }
        if let value = dict["OperatorUserId"] as? String {
            self.operatorUserId = value
        }
        if let value = dict["OperatorUsername"] as? String {
            self.operatorUsername = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["PolicyType"] as? String {
            self.policyType = value
        }
        if let value = dict["ProcessId"] as? String {
            self.processId = value
        }
        if let value = dict["ProcessName"] as? String {
            self.processName = value
        }
        if let value = dict["SchemaId"] as? String {
            self.schemaId = value
        }
        if let value = dict["SchemaName"] as? String {
            self.schemaName = value
        }
        if let value = dict["Statuses"] as? [String] {
            self.statuses = value
        }
    }
}

public class ListApprovalsResponseBody : Tea.TeaModel {
    public class Approvals : Tea.TeaModel {
        public class ApprovalProgresses : Tea.TeaModel {
            public class Operators : Tea.TeaModel {
                public var saseUserId: String?

                public var username: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.saseUserId != nil {
                        map["SaseUserId"] = self.saseUserId!
                    }
                    if self.username != nil {
                        map["Username"] = self.username!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["SaseUserId"] as? String {
                        self.saseUserId = value
                    }
                    if let value = dict["Username"] as? String {
                        self.username = value
                    }
                }
            }
            public var action: String?

            public var comment: String?

            public var executor: String?

            public var operators: [ListApprovalsResponseBody.Approvals.ApprovalProgresses.Operators]?

            public var status: String?

            public var timestamp: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.action != nil {
                    map["Action"] = self.action!
                }
                if self.comment != nil {
                    map["Comment"] = self.comment!
                }
                if self.executor != nil {
                    map["Executor"] = self.executor!
                }
                if self.operators != nil {
                    var tmp : [Any] = []
                    for k in self.operators! {
                        tmp.append(k.toMap())
                    }
                    map["Operators"] = tmp
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                if self.timestamp != nil {
                    map["Timestamp"] = self.timestamp!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Action"] as? String {
                    self.action = value
                }
                if let value = dict["Comment"] as? String {
                    self.comment = value
                }
                if let value = dict["Executor"] as? String {
                    self.executor = value
                }
                if let value = dict["Operators"] as? [Any?] {
                    var tmp : [ListApprovalsResponseBody.Approvals.ApprovalProgresses.Operators] = []
                    for v in value {
                        if v != nil {
                            var model = ListApprovalsResponseBody.Approvals.ApprovalProgresses.Operators()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.operators = tmp
                }
                if let value = dict["Status"] as? String {
                    self.status = value
                }
                if let value = dict["Timestamp"] as? Int64 {
                    self.timestamp = value
                }
            }
        }
        public var approvalDetail: String?

        public var approvalId: String?

        public var approvalProgresses: [ListApprovalsResponseBody.Approvals.ApprovalProgresses]?

        public var createTime: String?

        public var creatorDepartment: String?

        public var creatorDevTag: String?

        public var creatorUserId: String?

        public var creatorUsername: String?

        public var endTimestamp: Int64?

        public var policyType: String?

        public var processId: String?

        public var processName: String?

        public var reason: String?

        public var schemaContent: String?

        public var schemaId: String?

        public var schemaName: String?

        public var status: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.approvalDetail != nil {
                map["ApprovalDetail"] = self.approvalDetail!
            }
            if self.approvalId != nil {
                map["ApprovalId"] = self.approvalId!
            }
            if self.approvalProgresses != nil {
                var tmp : [Any] = []
                for k in self.approvalProgresses! {
                    tmp.append(k.toMap())
                }
                map["ApprovalProgresses"] = tmp
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.creatorDepartment != nil {
                map["CreatorDepartment"] = self.creatorDepartment!
            }
            if self.creatorDevTag != nil {
                map["CreatorDevTag"] = self.creatorDevTag!
            }
            if self.creatorUserId != nil {
                map["CreatorUserId"] = self.creatorUserId!
            }
            if self.creatorUsername != nil {
                map["CreatorUsername"] = self.creatorUsername!
            }
            if self.endTimestamp != nil {
                map["EndTimestamp"] = self.endTimestamp!
            }
            if self.policyType != nil {
                map["PolicyType"] = self.policyType!
            }
            if self.processId != nil {
                map["ProcessId"] = self.processId!
            }
            if self.processName != nil {
                map["ProcessName"] = self.processName!
            }
            if self.reason != nil {
                map["Reason"] = self.reason!
            }
            if self.schemaContent != nil {
                map["SchemaContent"] = self.schemaContent!
            }
            if self.schemaId != nil {
                map["SchemaId"] = self.schemaId!
            }
            if self.schemaName != nil {
                map["SchemaName"] = self.schemaName!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ApprovalDetail"] as? String {
                self.approvalDetail = value
            }
            if let value = dict["ApprovalId"] as? String {
                self.approvalId = value
            }
            if let value = dict["ApprovalProgresses"] as? [Any?] {
                var tmp : [ListApprovalsResponseBody.Approvals.ApprovalProgresses] = []
                for v in value {
                    if v != nil {
                        var model = ListApprovalsResponseBody.Approvals.ApprovalProgresses()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.approvalProgresses = tmp
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["CreatorDepartment"] as? String {
                self.creatorDepartment = value
            }
            if let value = dict["CreatorDevTag"] as? String {
                self.creatorDevTag = value
            }
            if let value = dict["CreatorUserId"] as? String {
                self.creatorUserId = value
            }
            if let value = dict["CreatorUsername"] as? String {
                self.creatorUsername = value
            }
            if let value = dict["EndTimestamp"] as? Int64 {
                self.endTimestamp = value
            }
            if let value = dict["PolicyType"] as? String {
                self.policyType = value
            }
            if let value = dict["ProcessId"] as? String {
                self.processId = value
            }
            if let value = dict["ProcessName"] as? String {
                self.processName = value
            }
            if let value = dict["Reason"] as? String {
                self.reason = value
            }
            if let value = dict["SchemaContent"] as? String {
                self.schemaContent = value
            }
            if let value = dict["SchemaId"] as? String {
                self.schemaId = value
            }
            if let value = dict["SchemaName"] as? String {
                self.schemaName = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
        }
    }
    public var approvals: [ListApprovalsResponseBody.Approvals]?

    public var requestId: String?

    public var totalNum: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.approvals != nil {
            var tmp : [Any] = []
            for k in self.approvals! {
                tmp.append(k.toMap())
            }
            map["Approvals"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalNum != nil {
            map["TotalNum"] = self.totalNum!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Approvals"] as? [Any?] {
            var tmp : [ListApprovalsResponseBody.Approvals] = []
            for v in value {
                if v != nil {
                    var model = ListApprovalsResponseBody.Approvals()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.approvals = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalNum"] as? String {
            self.totalNum = value
        }
    }
}

public class ListApprovalsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListApprovalsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListApprovalsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListClientUsersRequest : Tea.TeaModel {
    public var currentPage: Int64?

    public var departmentId: String?

    public var email: String?

    public var idpConfigId: String?

    public var mobileNumber: String?

    public var pageSize: Int64?

    public var status: String?

    public var username: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.currentPage != nil {
            map["CurrentPage"] = self.currentPage!
        }
        if self.departmentId != nil {
            map["DepartmentId"] = self.departmentId!
        }
        if self.email != nil {
            map["Email"] = self.email!
        }
        if self.idpConfigId != nil {
            map["IdpConfigId"] = self.idpConfigId!
        }
        if self.mobileNumber != nil {
            map["MobileNumber"] = self.mobileNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        if self.username != nil {
            map["Username"] = self.username!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CurrentPage"] as? Int64 {
            self.currentPage = value
        }
        if let value = dict["DepartmentId"] as? String {
            self.departmentId = value
        }
        if let value = dict["Email"] as? String {
            self.email = value
        }
        if let value = dict["IdpConfigId"] as? String {
            self.idpConfigId = value
        }
        if let value = dict["MobileNumber"] as? String {
            self.mobileNumber = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
        if let value = dict["Username"] as? String {
            self.username = value
        }
    }
}

public class ListClientUsersResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class DataList : Tea.TeaModel {
            public class Department : Tea.TeaModel {
                public var id: String?

                public var name: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.id != nil {
                        map["Id"] = self.id!
                    }
                    if self.name != nil {
                        map["Name"] = self.name!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Id"] as? String {
                        self.id = value
                    }
                    if let value = dict["Name"] as? String {
                        self.name = value
                    }
                }
            }
            public var department: ListClientUsersResponseBody.Data.DataList.Department?

            public var departmentId: String?

            public var description_: String?

            public var email: String?

            public var id: String?

            public var idpConfigId: String?

            public var mobileNumber: String?

            public var status: String?

            public var userId: String?

            public var username: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.department?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.department != nil {
                    map["Department"] = self.department?.toMap()
                }
                if self.departmentId != nil {
                    map["DepartmentId"] = self.departmentId!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.email != nil {
                    map["Email"] = self.email!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.idpConfigId != nil {
                    map["IdpConfigId"] = self.idpConfigId!
                }
                if self.mobileNumber != nil {
                    map["MobileNumber"] = self.mobileNumber!
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                if self.userId != nil {
                    map["UserId"] = self.userId!
                }
                if self.username != nil {
                    map["Username"] = self.username!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Department"] as? [String: Any?] {
                    var model = ListClientUsersResponseBody.Data.DataList.Department()
                    model.fromMap(value)
                    self.department = model
                }
                if let value = dict["DepartmentId"] as? String {
                    self.departmentId = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["Email"] as? String {
                    self.email = value
                }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
                if let value = dict["IdpConfigId"] as? String {
                    self.idpConfigId = value
                }
                if let value = dict["MobileNumber"] as? String {
                    self.mobileNumber = value
                }
                if let value = dict["Status"] as? String {
                    self.status = value
                }
                if let value = dict["UserId"] as? String {
                    self.userId = value
                }
                if let value = dict["Username"] as? String {
                    self.username = value
                }
            }
        }
        public var dataList: [ListClientUsersResponseBody.Data.DataList]?

        public var totalNum: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.dataList != nil {
                var tmp : [Any] = []
                for k in self.dataList! {
                    tmp.append(k.toMap())
                }
                map["DataList"] = tmp
            }
            if self.totalNum != nil {
                map["TotalNum"] = self.totalNum!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DataList"] as? [Any?] {
                var tmp : [ListClientUsersResponseBody.Data.DataList] = []
                for v in value {
                    if v != nil {
                        var model = ListClientUsersResponseBody.Data.DataList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.dataList = tmp
            }
            if let value = dict["TotalNum"] as? Int64 {
                self.totalNum = value
            }
        }
    }
    public var data: ListClientUsersResponseBody.Data?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ListClientUsersResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListClientUsersResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListClientUsersResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListClientUsersResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListConnectorsRequest : Tea.TeaModel {
    public var connectorIds: [String]?

    public var currentPage: Int32?

    public var name: String?

    public var pageSize: Int32?

    public var status: String?

    public var switchStatus: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.connectorIds != nil {
            map["ConnectorIds"] = self.connectorIds!
        }
        if self.currentPage != nil {
            map["CurrentPage"] = self.currentPage!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        if self.switchStatus != nil {
            map["SwitchStatus"] = self.switchStatus!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConnectorIds"] as? [String] {
            self.connectorIds = value
        }
        if let value = dict["CurrentPage"] as? Int32 {
            self.currentPage = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
        if let value = dict["SwitchStatus"] as? String {
            self.switchStatus = value
        }
    }
}

public class ListConnectorsResponseBody : Tea.TeaModel {
    public class Connectors : Tea.TeaModel {
        public class Applications : Tea.TeaModel {
            public var applicationId: String?

            public var applicationName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.applicationId != nil {
                    map["ApplicationId"] = self.applicationId!
                }
                if self.applicationName != nil {
                    map["ApplicationName"] = self.applicationName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ApplicationId"] as? String {
                    self.applicationId = value
                }
                if let value = dict["ApplicationName"] as? String {
                    self.applicationName = value
                }
            }
        }
        public class ConnectorClients : Tea.TeaModel {
            public var connectionStatus: String?

            public var devTag: String?

            public var hostname: String?

            public var publicIp: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.connectionStatus != nil {
                    map["ConnectionStatus"] = self.connectionStatus!
                }
                if self.devTag != nil {
                    map["DevTag"] = self.devTag!
                }
                if self.hostname != nil {
                    map["Hostname"] = self.hostname!
                }
                if self.publicIp != nil {
                    map["PublicIp"] = self.publicIp!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ConnectionStatus"] as? String {
                    self.connectionStatus = value
                }
                if let value = dict["DevTag"] as? String {
                    self.devTag = value
                }
                if let value = dict["Hostname"] as? String {
                    self.hostname = value
                }
                if let value = dict["PublicIp"] as? String {
                    self.publicIp = value
                }
            }
        }
        public class UpgradeTime : Tea.TeaModel {
            public var end: String?

            public var start: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.end != nil {
                    map["End"] = self.end!
                }
                if self.start != nil {
                    map["Start"] = self.start!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["End"] as? String {
                    self.end = value
                }
                if let value = dict["Start"] as? String {
                    self.start = value
                }
            }
        }
        public var applications: [ListConnectorsResponseBody.Connectors.Applications]?

        public var connectorClients: [ListConnectorsResponseBody.Connectors.ConnectorClients]?

        public var connectorId: String?

        public var createTime: String?

        public var name: String?

        public var regionId: String?

        public var status: String?

        public var switchStatus: String?

        public var upgradeTime: ListConnectorsResponseBody.Connectors.UpgradeTime?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.upgradeTime?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.applications != nil {
                var tmp : [Any] = []
                for k in self.applications! {
                    tmp.append(k.toMap())
                }
                map["Applications"] = tmp
            }
            if self.connectorClients != nil {
                var tmp : [Any] = []
                for k in self.connectorClients! {
                    tmp.append(k.toMap())
                }
                map["ConnectorClients"] = tmp
            }
            if self.connectorId != nil {
                map["ConnectorId"] = self.connectorId!
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.regionId != nil {
                map["RegionId"] = self.regionId!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.switchStatus != nil {
                map["SwitchStatus"] = self.switchStatus!
            }
            if self.upgradeTime != nil {
                map["UpgradeTime"] = self.upgradeTime?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Applications"] as? [Any?] {
                var tmp : [ListConnectorsResponseBody.Connectors.Applications] = []
                for v in value {
                    if v != nil {
                        var model = ListConnectorsResponseBody.Connectors.Applications()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.applications = tmp
            }
            if let value = dict["ConnectorClients"] as? [Any?] {
                var tmp : [ListConnectorsResponseBody.Connectors.ConnectorClients] = []
                for v in value {
                    if v != nil {
                        var model = ListConnectorsResponseBody.Connectors.ConnectorClients()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.connectorClients = tmp
            }
            if let value = dict["ConnectorId"] as? String {
                self.connectorId = value
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["RegionId"] as? String {
                self.regionId = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["SwitchStatus"] as? String {
                self.switchStatus = value
            }
            if let value = dict["UpgradeTime"] as? [String: Any?] {
                var model = ListConnectorsResponseBody.Connectors.UpgradeTime()
                model.fromMap(value)
                self.upgradeTime = model
            }
        }
    }
    public var connectors: [ListConnectorsResponseBody.Connectors]?

    public var requestId: String?

    public var totalNum: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.connectors != nil {
            var tmp : [Any] = []
            for k in self.connectors! {
                tmp.append(k.toMap())
            }
            map["Connectors"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalNum != nil {
            map["TotalNum"] = self.totalNum!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Connectors"] as? [Any?] {
            var tmp : [ListConnectorsResponseBody.Connectors] = []
            for v in value {
                if v != nil {
                    var model = ListConnectorsResponseBody.Connectors()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.connectors = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalNum"] as? Int32 {
            self.totalNum = value
        }
    }
}

public class ListConnectorsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListConnectorsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListConnectorsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListDynamicDisposalProcessesRequest : Tea.TeaModel {
    public var currentPage: Int64?

    public var devTag: String?

    public var disposalAction: String?

    public var disposalProcessId: String?

    public var endTime: Int64?

    public var pageSize: Int64?

    public var recoveryType: String?

    public var startTime: Int64?

    public var status: String?

    public var userName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.currentPage != nil {
            map["CurrentPage"] = self.currentPage!
        }
        if self.devTag != nil {
            map["DevTag"] = self.devTag!
        }
        if self.disposalAction != nil {
            map["DisposalAction"] = self.disposalAction!
        }
        if self.disposalProcessId != nil {
            map["DisposalProcessId"] = self.disposalProcessId!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.recoveryType != nil {
            map["RecoveryType"] = self.recoveryType!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        if self.userName != nil {
            map["UserName"] = self.userName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CurrentPage"] as? Int64 {
            self.currentPage = value
        }
        if let value = dict["DevTag"] as? String {
            self.devTag = value
        }
        if let value = dict["DisposalAction"] as? String {
            self.disposalAction = value
        }
        if let value = dict["DisposalProcessId"] as? String {
            self.disposalProcessId = value
        }
        if let value = dict["EndTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["RecoveryType"] as? String {
            self.recoveryType = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
        if let value = dict["UserName"] as? String {
            self.userName = value
        }
    }
}

public class ListDynamicDisposalProcessesResponseBody : Tea.TeaModel {
    public class DisposalProcesses : Tea.TeaModel {
        public class DeviceBasicInfo : Tea.TeaModel {
            public var cpu: String?

            public var devTag: String?

            public var devType: String?

            public var disk: String?

            public var hostname: String?

            public var mac: String?

            public var memory: String?

            public var osVersion: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.cpu != nil {
                    map["Cpu"] = self.cpu!
                }
                if self.devTag != nil {
                    map["DevTag"] = self.devTag!
                }
                if self.devType != nil {
                    map["DevType"] = self.devType!
                }
                if self.disk != nil {
                    map["Disk"] = self.disk!
                }
                if self.hostname != nil {
                    map["Hostname"] = self.hostname!
                }
                if self.mac != nil {
                    map["Mac"] = self.mac!
                }
                if self.memory != nil {
                    map["Memory"] = self.memory!
                }
                if self.osVersion != nil {
                    map["OsVersion"] = self.osVersion!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Cpu"] as? String {
                    self.cpu = value
                }
                if let value = dict["DevTag"] as? String {
                    self.devTag = value
                }
                if let value = dict["DevType"] as? String {
                    self.devType = value
                }
                if let value = dict["Disk"] as? String {
                    self.disk = value
                }
                if let value = dict["Hostname"] as? String {
                    self.hostname = value
                }
                if let value = dict["Mac"] as? String {
                    self.mac = value
                }
                if let value = dict["Memory"] as? String {
                    self.memory = value
                }
                if let value = dict["OsVersion"] as? String {
                    self.osVersion = value
                }
            }
        }
        public class DeviceStatusInfo : Tea.TeaModel {
            public var appVersion: String?

            public var department: String?

            public var dlpStatus: String?

            public var internetIp: String?

            public var laStatus: String?

            public var loginStatus: String?

            public var nacStatus: String?

            public var privateIp: String?

            public var saseUserId: String?

            public var username: String?

            public var workshop: String?

            public var ztnaStatus: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.appVersion != nil {
                    map["AppVersion"] = self.appVersion!
                }
                if self.department != nil {
                    map["Department"] = self.department!
                }
                if self.dlpStatus != nil {
                    map["DlpStatus"] = self.dlpStatus!
                }
                if self.internetIp != nil {
                    map["InternetIp"] = self.internetIp!
                }
                if self.laStatus != nil {
                    map["LaStatus"] = self.laStatus!
                }
                if self.loginStatus != nil {
                    map["LoginStatus"] = self.loginStatus!
                }
                if self.nacStatus != nil {
                    map["NacStatus"] = self.nacStatus!
                }
                if self.privateIp != nil {
                    map["PrivateIp"] = self.privateIp!
                }
                if self.saseUserId != nil {
                    map["SaseUserId"] = self.saseUserId!
                }
                if self.username != nil {
                    map["Username"] = self.username!
                }
                if self.workshop != nil {
                    map["Workshop"] = self.workshop!
                }
                if self.ztnaStatus != nil {
                    map["ZtnaStatus"] = self.ztnaStatus!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AppVersion"] as? String {
                    self.appVersion = value
                }
                if let value = dict["Department"] as? String {
                    self.department = value
                }
                if let value = dict["DlpStatus"] as? String {
                    self.dlpStatus = value
                }
                if let value = dict["InternetIp"] as? String {
                    self.internetIp = value
                }
                if let value = dict["LaStatus"] as? String {
                    self.laStatus = value
                }
                if let value = dict["LoginStatus"] as? String {
                    self.loginStatus = value
                }
                if let value = dict["NacStatus"] as? String {
                    self.nacStatus = value
                }
                if let value = dict["PrivateIp"] as? String {
                    self.privateIp = value
                }
                if let value = dict["SaseUserId"] as? String {
                    self.saseUserId = value
                }
                if let value = dict["Username"] as? String {
                    self.username = value
                }
                if let value = dict["Workshop"] as? String {
                    self.workshop = value
                }
                if let value = dict["ZtnaStatus"] as? String {
                    self.ztnaStatus = value
                }
            }
        }
        public var department: String?

        public var devTag: String?

        public var deviceBasicInfo: ListDynamicDisposalProcessesResponseBody.DisposalProcesses.DeviceBasicInfo?

        public var deviceStatusInfo: ListDynamicDisposalProcessesResponseBody.DisposalProcesses.DeviceStatusInfo?

        public var disposalActions: [String]?

        public var disposalProcessId: String?

        public var disposalTime: String?

        public var dynamicPolicyId: String?

        public var dynamicPolicyName: String?

        public var hostname: String?

        public var recoveryType: String?

        public var ruleContent: Any?

        public var saseUserId: String?

        public var status: String?

        public var userName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.deviceBasicInfo?.validate()
            try self.deviceStatusInfo?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.department != nil {
                map["Department"] = self.department!
            }
            if self.devTag != nil {
                map["DevTag"] = self.devTag!
            }
            if self.deviceBasicInfo != nil {
                map["DeviceBasicInfo"] = self.deviceBasicInfo?.toMap()
            }
            if self.deviceStatusInfo != nil {
                map["DeviceStatusInfo"] = self.deviceStatusInfo?.toMap()
            }
            if self.disposalActions != nil {
                map["DisposalActions"] = self.disposalActions!
            }
            if self.disposalProcessId != nil {
                map["DisposalProcessId"] = self.disposalProcessId!
            }
            if self.disposalTime != nil {
                map["DisposalTime"] = self.disposalTime!
            }
            if self.dynamicPolicyId != nil {
                map["DynamicPolicyId"] = self.dynamicPolicyId!
            }
            if self.dynamicPolicyName != nil {
                map["DynamicPolicyName"] = self.dynamicPolicyName!
            }
            if self.hostname != nil {
                map["Hostname"] = self.hostname!
            }
            if self.recoveryType != nil {
                map["RecoveryType"] = self.recoveryType!
            }
            if self.ruleContent != nil {
                map["RuleContent"] = self.ruleContent!
            }
            if self.saseUserId != nil {
                map["SaseUserId"] = self.saseUserId!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.userName != nil {
                map["UserName"] = self.userName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Department"] as? String {
                self.department = value
            }
            if let value = dict["DevTag"] as? String {
                self.devTag = value
            }
            if let value = dict["DeviceBasicInfo"] as? [String: Any?] {
                var model = ListDynamicDisposalProcessesResponseBody.DisposalProcesses.DeviceBasicInfo()
                model.fromMap(value)
                self.deviceBasicInfo = model
            }
            if let value = dict["DeviceStatusInfo"] as? [String: Any?] {
                var model = ListDynamicDisposalProcessesResponseBody.DisposalProcesses.DeviceStatusInfo()
                model.fromMap(value)
                self.deviceStatusInfo = model
            }
            if let value = dict["DisposalActions"] as? [String] {
                self.disposalActions = value
            }
            if let value = dict["DisposalProcessId"] as? String {
                self.disposalProcessId = value
            }
            if let value = dict["DisposalTime"] as? String {
                self.disposalTime = value
            }
            if let value = dict["DynamicPolicyId"] as? String {
                self.dynamicPolicyId = value
            }
            if let value = dict["DynamicPolicyName"] as? String {
                self.dynamicPolicyName = value
            }
            if let value = dict["Hostname"] as? String {
                self.hostname = value
            }
            if let value = dict["RecoveryType"] as? String {
                self.recoveryType = value
            }
            if let value = dict["RuleContent"] as? Any {
                self.ruleContent = value
            }
            if let value = dict["SaseUserId"] as? String {
                self.saseUserId = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["UserName"] as? String {
                self.userName = value
            }
        }
    }
    public var disposalProcesses: [ListDynamicDisposalProcessesResponseBody.DisposalProcesses]?

    public var requestId: String?

    public var totalNum: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.disposalProcesses != nil {
            var tmp : [Any] = []
            for k in self.disposalProcesses! {
                tmp.append(k.toMap())
            }
            map["DisposalProcesses"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalNum != nil {
            map["TotalNum"] = self.totalNum!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DisposalProcesses"] as? [Any?] {
            var tmp : [ListDynamicDisposalProcessesResponseBody.DisposalProcesses] = []
            for v in value {
                if v != nil {
                    var model = ListDynamicDisposalProcessesResponseBody.DisposalProcesses()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.disposalProcesses = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalNum"] as? Int32 {
            self.totalNum = value
        }
    }
}

public class ListDynamicDisposalProcessesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListDynamicDisposalProcessesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListDynamicDisposalProcessesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListDynamicRouteRegionsResponseBody : Tea.TeaModel {
    public var regions: [String]?

    public var requestId: String?

    public var totalNum: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.regions != nil {
            map["Regions"] = self.regions!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalNum != nil {
            map["TotalNum"] = self.totalNum!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Regions"] as? [String] {
            self.regions = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalNum"] as? Int32 {
            self.totalNum = value
        }
    }
}

public class ListDynamicRouteRegionsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListDynamicRouteRegionsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListDynamicRouteRegionsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListDynamicRoutesRequest : Tea.TeaModel {
    public var applicationId: String?

    public var currentPage: Int32?

    public var dynamicRouteIds: [String]?

    public var name: String?

    public var nextHop: String?

    public var pageSize: Int32?

    public var regionIds: [String]?

    public var status: String?

    public var tagId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.applicationId != nil {
            map["ApplicationId"] = self.applicationId!
        }
        if self.currentPage != nil {
            map["CurrentPage"] = self.currentPage!
        }
        if self.dynamicRouteIds != nil {
            map["DynamicRouteIds"] = self.dynamicRouteIds!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.nextHop != nil {
            map["NextHop"] = self.nextHop!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.regionIds != nil {
            map["RegionIds"] = self.regionIds!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        if self.tagId != nil {
            map["TagId"] = self.tagId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApplicationId"] as? String {
            self.applicationId = value
        }
        if let value = dict["CurrentPage"] as? Int32 {
            self.currentPage = value
        }
        if let value = dict["DynamicRouteIds"] as? [String] {
            self.dynamicRouteIds = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["NextHop"] as? String {
            self.nextHop = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RegionIds"] as? [String] {
            self.regionIds = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
        if let value = dict["TagId"] as? String {
            self.tagId = value
        }
    }
}

public class ListDynamicRoutesResponseBody : Tea.TeaModel {
    public class DynamicRoutes : Tea.TeaModel {
        public var applicationIds: [String]?

        public var applicationType: String?

        public var createTime: String?

        public var description_: String?

        public var dynamicRouteId: String?

        public var dynamicRouteType: String?

        public var name: String?

        public var nextHop: String?

        public var priority: Int32?

        public var regionIds: [String]?

        public var status: String?

        public var tagIds: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.applicationIds != nil {
                map["ApplicationIds"] = self.applicationIds!
            }
            if self.applicationType != nil {
                map["ApplicationType"] = self.applicationType!
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.dynamicRouteId != nil {
                map["DynamicRouteId"] = self.dynamicRouteId!
            }
            if self.dynamicRouteType != nil {
                map["DynamicRouteType"] = self.dynamicRouteType!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.nextHop != nil {
                map["NextHop"] = self.nextHop!
            }
            if self.priority != nil {
                map["Priority"] = self.priority!
            }
            if self.regionIds != nil {
                map["RegionIds"] = self.regionIds!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.tagIds != nil {
                map["TagIds"] = self.tagIds!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ApplicationIds"] as? [String] {
                self.applicationIds = value
            }
            if let value = dict["ApplicationType"] as? String {
                self.applicationType = value
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["DynamicRouteId"] as? String {
                self.dynamicRouteId = value
            }
            if let value = dict["DynamicRouteType"] as? String {
                self.dynamicRouteType = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["NextHop"] as? String {
                self.nextHop = value
            }
            if let value = dict["Priority"] as? Int32 {
                self.priority = value
            }
            if let value = dict["RegionIds"] as? [String] {
                self.regionIds = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["TagIds"] as? [String] {
                self.tagIds = value
            }
        }
    }
    public var dynamicRoutes: [ListDynamicRoutesResponseBody.DynamicRoutes]?

    public var requestId: String?

    public var totalNum: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dynamicRoutes != nil {
            var tmp : [Any] = []
            for k in self.dynamicRoutes! {
                tmp.append(k.toMap())
            }
            map["DynamicRoutes"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalNum != nil {
            map["TotalNum"] = self.totalNum!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DynamicRoutes"] as? [Any?] {
            var tmp : [ListDynamicRoutesResponseBody.DynamicRoutes] = []
            for v in value {
                if v != nil {
                    var model = ListDynamicRoutesResponseBody.DynamicRoutes()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.dynamicRoutes = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalNum"] as? Int32 {
            self.totalNum = value
        }
    }
}

public class ListDynamicRoutesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListDynamicRoutesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListDynamicRoutesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListEnterpriseAccelerateLogsRequest : Tea.TeaModel {
    public var currentPage: Int32?

    public var department: String?

    public var dstAddr: String?

    public var endTime: Int64?

    public var pageSize: Int32?

    public var searchMode: String?

    public var startTime: Int64?

    public var username: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.currentPage != nil {
            map["CurrentPage"] = self.currentPage!
        }
        if self.department != nil {
            map["Department"] = self.department!
        }
        if self.dstAddr != nil {
            map["DstAddr"] = self.dstAddr!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.searchMode != nil {
            map["SearchMode"] = self.searchMode!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.username != nil {
            map["Username"] = self.username!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CurrentPage"] as? Int32 {
            self.currentPage = value
        }
        if let value = dict["Department"] as? String {
            self.department = value
        }
        if let value = dict["DstAddr"] as? String {
            self.dstAddr = value
        }
        if let value = dict["EndTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["SearchMode"] as? String {
            self.searchMode = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
        if let value = dict["Username"] as? String {
            self.username = value
        }
    }
}

public class ListEnterpriseAccelerateLogsResponseBody : Tea.TeaModel {
    public class Logs : Tea.TeaModel {
        public var department: String?

        public var deviceType: String?

        public var dstAddr: String?

        public var inBytes: String?

        public var outBytes: String?

        public var policyName: String?

        public var proxyAddr: String?

        public var unixTime: String?

        public var username: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.department != nil {
                map["Department"] = self.department!
            }
            if self.deviceType != nil {
                map["DeviceType"] = self.deviceType!
            }
            if self.dstAddr != nil {
                map["DstAddr"] = self.dstAddr!
            }
            if self.inBytes != nil {
                map["InBytes"] = self.inBytes!
            }
            if self.outBytes != nil {
                map["OutBytes"] = self.outBytes!
            }
            if self.policyName != nil {
                map["PolicyName"] = self.policyName!
            }
            if self.proxyAddr != nil {
                map["ProxyAddr"] = self.proxyAddr!
            }
            if self.unixTime != nil {
                map["UnixTime"] = self.unixTime!
            }
            if self.username != nil {
                map["Username"] = self.username!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Department"] as? String {
                self.department = value
            }
            if let value = dict["DeviceType"] as? String {
                self.deviceType = value
            }
            if let value = dict["DstAddr"] as? String {
                self.dstAddr = value
            }
            if let value = dict["InBytes"] as? String {
                self.inBytes = value
            }
            if let value = dict["OutBytes"] as? String {
                self.outBytes = value
            }
            if let value = dict["PolicyName"] as? String {
                self.policyName = value
            }
            if let value = dict["ProxyAddr"] as? String {
                self.proxyAddr = value
            }
            if let value = dict["UnixTime"] as? String {
                self.unixTime = value
            }
            if let value = dict["Username"] as? String {
                self.username = value
            }
        }
    }
    public var logs: [ListEnterpriseAccelerateLogsResponseBody.Logs]?

    public var requestId: String?

    public var totalNumber: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.logs != nil {
            var tmp : [Any] = []
            for k in self.logs! {
                tmp.append(k.toMap())
            }
            map["Logs"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalNumber != nil {
            map["TotalNumber"] = self.totalNumber!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Logs"] as? [Any?] {
            var tmp : [ListEnterpriseAccelerateLogsResponseBody.Logs] = []
            for v in value {
                if v != nil {
                    var model = ListEnterpriseAccelerateLogsResponseBody.Logs()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.logs = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalNumber"] as? Int32 {
            self.totalNumber = value
        }
    }
}

public class ListEnterpriseAccelerateLogsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListEnterpriseAccelerateLogsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListEnterpriseAccelerateLogsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListEnterpriseAcceleratePoliciesRequest : Tea.TeaModel {
    public var currentPage: Int32?

    public var name: String?

    public var pageSize: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.currentPage != nil {
            map["CurrentPage"] = self.currentPage!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CurrentPage"] as? Int32 {
            self.currentPage = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
    }
}

public class ListEnterpriseAcceleratePoliciesResponseBody : Tea.TeaModel {
    public class Policies : Tea.TeaModel {
        public var accelerationType: String?

        public var description_: String?

        public var eapId: String?

        public var enabled: Int32?

        public var name: String?

        public var onTls: Int32?

        public var priority: Int32?

        public var showInClient: Int32?

        public var upstreamHost: String?

        public var upstreamPort: Int32?

        public var upstreamType: String?

        public var userAttributeGroup: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accelerationType != nil {
                map["AccelerationType"] = self.accelerationType!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.eapId != nil {
                map["EapId"] = self.eapId!
            }
            if self.enabled != nil {
                map["Enabled"] = self.enabled!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.onTls != nil {
                map["OnTls"] = self.onTls!
            }
            if self.priority != nil {
                map["Priority"] = self.priority!
            }
            if self.showInClient != nil {
                map["ShowInClient"] = self.showInClient!
            }
            if self.upstreamHost != nil {
                map["UpstreamHost"] = self.upstreamHost!
            }
            if self.upstreamPort != nil {
                map["UpstreamPort"] = self.upstreamPort!
            }
            if self.upstreamType != nil {
                map["UpstreamType"] = self.upstreamType!
            }
            if self.userAttributeGroup != nil {
                map["UserAttributeGroup"] = self.userAttributeGroup!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AccelerationType"] as? String {
                self.accelerationType = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["EapId"] as? String {
                self.eapId = value
            }
            if let value = dict["Enabled"] as? Int32 {
                self.enabled = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["OnTls"] as? Int32 {
                self.onTls = value
            }
            if let value = dict["Priority"] as? Int32 {
                self.priority = value
            }
            if let value = dict["ShowInClient"] as? Int32 {
                self.showInClient = value
            }
            if let value = dict["UpstreamHost"] as? String {
                self.upstreamHost = value
            }
            if let value = dict["UpstreamPort"] as? Int32 {
                self.upstreamPort = value
            }
            if let value = dict["UpstreamType"] as? String {
                self.upstreamType = value
            }
            if let value = dict["UserAttributeGroup"] as? String {
                self.userAttributeGroup = value
            }
        }
    }
    public var policies: [ListEnterpriseAcceleratePoliciesResponseBody.Policies]?

    public var requestId: String?

    public var total: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.policies != nil {
            var tmp : [Any] = []
            for k in self.policies! {
                tmp.append(k.toMap())
            }
            map["Policies"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.total != nil {
            map["Total"] = self.total!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Policies"] as? [Any?] {
            var tmp : [ListEnterpriseAcceleratePoliciesResponseBody.Policies] = []
            for v in value {
                if v != nil {
                    var model = ListEnterpriseAcceleratePoliciesResponseBody.Policies()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.policies = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Total"] as? Int32 {
            self.total = value
        }
    }
}

public class ListEnterpriseAcceleratePoliciesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListEnterpriseAcceleratePoliciesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListEnterpriseAcceleratePoliciesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListEnterpriseAccelerateTargetsRequest : Tea.TeaModel {
    public var currentPage: Int64?

    public var eapId: String?

    public var pageSize: Int64?

    public var target: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.currentPage != nil {
            map["CurrentPage"] = self.currentPage!
        }
        if self.eapId != nil {
            map["EapId"] = self.eapId!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.target != nil {
            map["Target"] = self.target!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CurrentPage"] as? Int64 {
            self.currentPage = value
        }
        if let value = dict["EapId"] as? String {
            self.eapId = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["Target"] as? String {
            self.target = value
        }
    }
}

public class ListEnterpriseAccelerateTargetsResponseBody : Tea.TeaModel {
    public var eapId: String?

    public var requestId: String?

    public var targets: [String]?

    public var total: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.eapId != nil {
            map["EapId"] = self.eapId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.targets != nil {
            map["Targets"] = self.targets!
        }
        if self.total != nil {
            map["Total"] = self.total!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EapId"] as? String {
            self.eapId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Targets"] as? [String] {
            self.targets = value
        }
        if let value = dict["Total"] as? Int32 {
            self.total = value
        }
    }
}

public class ListEnterpriseAccelerateTargetsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListEnterpriseAccelerateTargetsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListEnterpriseAccelerateTargetsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListExcessiveDeviceRegistrationApplicationsRequest : Tea.TeaModel {
    public var applicationIds: [String]?

    public var currentPage: Int64?

    public var department: String?

    public var deviceTag: String?

    public var hostname: String?

    public var mac: String?

    public var pageSize: Int64?

    public var saseUserId: String?

    public var statuses: [String]?

    public var username: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.applicationIds != nil {
            map["ApplicationIds"] = self.applicationIds!
        }
        if self.currentPage != nil {
            map["CurrentPage"] = self.currentPage!
        }
        if self.department != nil {
            map["Department"] = self.department!
        }
        if self.deviceTag != nil {
            map["DeviceTag"] = self.deviceTag!
        }
        if self.hostname != nil {
            map["Hostname"] = self.hostname!
        }
        if self.mac != nil {
            map["Mac"] = self.mac!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.saseUserId != nil {
            map["SaseUserId"] = self.saseUserId!
        }
        if self.statuses != nil {
            map["Statuses"] = self.statuses!
        }
        if self.username != nil {
            map["Username"] = self.username!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApplicationIds"] as? [String] {
            self.applicationIds = value
        }
        if let value = dict["CurrentPage"] as? Int64 {
            self.currentPage = value
        }
        if let value = dict["Department"] as? String {
            self.department = value
        }
        if let value = dict["DeviceTag"] as? String {
            self.deviceTag = value
        }
        if let value = dict["Hostname"] as? String {
            self.hostname = value
        }
        if let value = dict["Mac"] as? String {
            self.mac = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["SaseUserId"] as? String {
            self.saseUserId = value
        }
        if let value = dict["Statuses"] as? [String] {
            self.statuses = value
        }
        if let value = dict["Username"] as? String {
            self.username = value
        }
    }
}

public class ListExcessiveDeviceRegistrationApplicationsResponseBody : Tea.TeaModel {
    public class Applications : Tea.TeaModel {
        public var applicationId: String?

        public var createTime: String?

        public var department: String?

        public var description_: String?

        public var deviceTag: String?

        public var deviceType: String?

        public var hostname: String?

        public var isUsed: Bool?

        public var mac: String?

        public var saseUserId: String?

        public var status: String?

        public var username: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.applicationId != nil {
                map["ApplicationId"] = self.applicationId!
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.department != nil {
                map["Department"] = self.department!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.deviceTag != nil {
                map["DeviceTag"] = self.deviceTag!
            }
            if self.deviceType != nil {
                map["DeviceType"] = self.deviceType!
            }
            if self.hostname != nil {
                map["Hostname"] = self.hostname!
            }
            if self.isUsed != nil {
                map["IsUsed"] = self.isUsed!
            }
            if self.mac != nil {
                map["Mac"] = self.mac!
            }
            if self.saseUserId != nil {
                map["SaseUserId"] = self.saseUserId!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.username != nil {
                map["Username"] = self.username!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ApplicationId"] as? String {
                self.applicationId = value
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["Department"] as? String {
                self.department = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["DeviceTag"] as? String {
                self.deviceTag = value
            }
            if let value = dict["DeviceType"] as? String {
                self.deviceType = value
            }
            if let value = dict["Hostname"] as? String {
                self.hostname = value
            }
            if let value = dict["IsUsed"] as? Bool {
                self.isUsed = value
            }
            if let value = dict["Mac"] as? String {
                self.mac = value
            }
            if let value = dict["SaseUserId"] as? String {
                self.saseUserId = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["Username"] as? String {
                self.username = value
            }
        }
    }
    public var applications: [ListExcessiveDeviceRegistrationApplicationsResponseBody.Applications]?

    public var requestId: String?

    public var totalNum: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.applications != nil {
            var tmp : [Any] = []
            for k in self.applications! {
                tmp.append(k.toMap())
            }
            map["Applications"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalNum != nil {
            map["TotalNum"] = self.totalNum!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Applications"] as? [Any?] {
            var tmp : [ListExcessiveDeviceRegistrationApplicationsResponseBody.Applications] = []
            for v in value {
                if v != nil {
                    var model = ListExcessiveDeviceRegistrationApplicationsResponseBody.Applications()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.applications = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalNum"] as? Int64 {
            self.totalNum = value
        }
    }
}

public class ListExcessiveDeviceRegistrationApplicationsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListExcessiveDeviceRegistrationApplicationsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListExcessiveDeviceRegistrationApplicationsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListIdpConfigsRequest : Tea.TeaModel {
    public var currentPage: Int64?

    public var include: String?

    public var pageSize: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.currentPage != nil {
            map["CurrentPage"] = self.currentPage!
        }
        if self.include != nil {
            map["Include"] = self.include!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CurrentPage"] as? Int64 {
            self.currentPage = value
        }
        if let value = dict["Include"] as? String {
            self.include = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
    }
}

public class ListIdpConfigsResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class DataList : Tea.TeaModel {
            public var description_: String?

            public var id: String?

            public var mfa: String?

            public var mobileLoginType: String?

            public var mobileMfaConfigType: String?

            public var multiIdpInfo: String?

            public var name: String?

            public var pcLoginType: String?

            public var status: String?

            public var type: String?

            public var updateTime: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.mfa != nil {
                    map["Mfa"] = self.mfa!
                }
                if self.mobileLoginType != nil {
                    map["MobileLoginType"] = self.mobileLoginType!
                }
                if self.mobileMfaConfigType != nil {
                    map["MobileMfaConfigType"] = self.mobileMfaConfigType!
                }
                if self.multiIdpInfo != nil {
                    map["MultiIdpInfo"] = self.multiIdpInfo!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.pcLoginType != nil {
                    map["PcLoginType"] = self.pcLoginType!
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                if self.updateTime != nil {
                    map["UpdateTime"] = self.updateTime!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
                if let value = dict["Mfa"] as? String {
                    self.mfa = value
                }
                if let value = dict["MobileLoginType"] as? String {
                    self.mobileLoginType = value
                }
                if let value = dict["MobileMfaConfigType"] as? String {
                    self.mobileMfaConfigType = value
                }
                if let value = dict["MultiIdpInfo"] as? String {
                    self.multiIdpInfo = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["PcLoginType"] as? String {
                    self.pcLoginType = value
                }
                if let value = dict["Status"] as? String {
                    self.status = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
                if let value = dict["UpdateTime"] as? String {
                    self.updateTime = value
                }
            }
        }
        public var dataList: [ListIdpConfigsResponseBody.Data.DataList]?

        public var totalNum: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.dataList != nil {
                var tmp : [Any] = []
                for k in self.dataList! {
                    tmp.append(k.toMap())
                }
                map["DataList"] = tmp
            }
            if self.totalNum != nil {
                map["TotalNum"] = self.totalNum!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DataList"] as? [Any?] {
                var tmp : [ListIdpConfigsResponseBody.Data.DataList] = []
                for v in value {
                    if v != nil {
                        var model = ListIdpConfigsResponseBody.Data.DataList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.dataList = tmp
            }
            if let value = dict["TotalNum"] as? Int64 {
                self.totalNum = value
            }
        }
    }
    public var data: ListIdpConfigsResponseBody.Data?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ListIdpConfigsResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListIdpConfigsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListIdpConfigsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListIdpConfigsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListIdpDepartmentsRequest : Tea.TeaModel {
    public var currentPage: Int64?

    public var idpConfigId: String?

    public var pageSize: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.currentPage != nil {
            map["CurrentPage"] = self.currentPage!
        }
        if self.idpConfigId != nil {
            map["IdpConfigId"] = self.idpConfigId!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CurrentPage"] as? Int64 {
            self.currentPage = value
        }
        if let value = dict["IdpConfigId"] as? String {
            self.idpConfigId = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
    }
}

public class ListIdpDepartmentsResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class DataList : Tea.TeaModel {
            public var id: String?

            public var idpConfigId: String?

            public var name: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.idpConfigId != nil {
                    map["IdpConfigId"] = self.idpConfigId!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
                if let value = dict["IdpConfigId"] as? String {
                    self.idpConfigId = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
            }
        }
        public var dataList: [ListIdpDepartmentsResponseBody.Data.DataList]?

        public var totalNum: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.dataList != nil {
                var tmp : [Any] = []
                for k in self.dataList! {
                    tmp.append(k.toMap())
                }
                map["DataList"] = tmp
            }
            if self.totalNum != nil {
                map["TotalNum"] = self.totalNum!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DataList"] as? [Any?] {
                var tmp : [ListIdpDepartmentsResponseBody.Data.DataList] = []
                for v in value {
                    if v != nil {
                        var model = ListIdpDepartmentsResponseBody.Data.DataList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.dataList = tmp
            }
            if let value = dict["TotalNum"] as? Int64 {
                self.totalNum = value
            }
        }
    }
    public var data: ListIdpDepartmentsResponseBody.Data?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ListIdpDepartmentsResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListIdpDepartmentsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListIdpDepartmentsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListIdpDepartmentsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListNacUserCertRequest : Tea.TeaModel {
    public var currentPage: String?

    public var department: String?

    public var deviceType: String?

    public var endTime: Int64?

    public var pageSize: String?

    public var startTime: Int64?

    public var status: String?

    public var username: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.currentPage != nil {
            map["CurrentPage"] = self.currentPage!
        }
        if self.department != nil {
            map["Department"] = self.department!
        }
        if self.deviceType != nil {
            map["DeviceType"] = self.deviceType!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        if self.username != nil {
            map["Username"] = self.username!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CurrentPage"] as? String {
            self.currentPage = value
        }
        if let value = dict["Department"] as? String {
            self.department = value
        }
        if let value = dict["DeviceType"] as? String {
            self.deviceType = value
        }
        if let value = dict["EndTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["PageSize"] as? String {
            self.pageSize = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
        if let value = dict["Username"] as? String {
            self.username = value
        }
    }
}

public class ListNacUserCertResponseBody : Tea.TeaModel {
    public class DataList : Tea.TeaModel {
        public var aliuid: String?

        public var department: String?

        public var devTag: String?

        public var deviceType: String?

        public var expiredTime: String?

        public var hostname: String?

        public var mac: String?

        public var status: String?

        public var userId: String?

        public var username: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.aliuid != nil {
                map["Aliuid"] = self.aliuid!
            }
            if self.department != nil {
                map["Department"] = self.department!
            }
            if self.devTag != nil {
                map["DevTag"] = self.devTag!
            }
            if self.deviceType != nil {
                map["DeviceType"] = self.deviceType!
            }
            if self.expiredTime != nil {
                map["ExpiredTime"] = self.expiredTime!
            }
            if self.hostname != nil {
                map["Hostname"] = self.hostname!
            }
            if self.mac != nil {
                map["Mac"] = self.mac!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.userId != nil {
                map["UserId"] = self.userId!
            }
            if self.username != nil {
                map["Username"] = self.username!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Aliuid"] as? String {
                self.aliuid = value
            }
            if let value = dict["Department"] as? String {
                self.department = value
            }
            if let value = dict["DevTag"] as? String {
                self.devTag = value
            }
            if let value = dict["DeviceType"] as? String {
                self.deviceType = value
            }
            if let value = dict["ExpiredTime"] as? String {
                self.expiredTime = value
            }
            if let value = dict["Hostname"] as? String {
                self.hostname = value
            }
            if let value = dict["Mac"] as? String {
                self.mac = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["UserId"] as? String {
                self.userId = value
            }
            if let value = dict["Username"] as? String {
                self.username = value
            }
        }
    }
    public var code: Int64?

    public var dataList: [ListNacUserCertResponseBody.DataList]?

    public var message: String?

    public var requestId: String?

    public var totalNum: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.dataList != nil {
            var tmp : [Any] = []
            for k in self.dataList! {
                tmp.append(k.toMap())
            }
            map["DataList"] = tmp
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalNum != nil {
            map["TotalNum"] = self.totalNum!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? Int64 {
            self.code = value
        }
        if let value = dict["DataList"] as? [Any?] {
            var tmp : [ListNacUserCertResponseBody.DataList] = []
            for v in value {
                if v != nil {
                    var model = ListNacUserCertResponseBody.DataList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.dataList = tmp
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalNum"] as? Int64 {
            self.totalNum = value
        }
    }
}

public class ListNacUserCertResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListNacUserCertResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListNacUserCertResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListPolicesForPrivateAccessApplicationRequest : Tea.TeaModel {
    public var applicationIds: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.applicationIds != nil {
            map["ApplicationIds"] = self.applicationIds!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApplicationIds"] as? [String] {
            self.applicationIds = value
        }
    }
}

public class ListPolicesForPrivateAccessApplicationResponseBody : Tea.TeaModel {
    public class Applications : Tea.TeaModel {
        public class Policies : Tea.TeaModel {
            public class CustomUserAttributes : Tea.TeaModel {
                public var idpId: Int32?

                public var relation: String?

                public var userGroupType: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.idpId != nil {
                        map["IdpId"] = self.idpId!
                    }
                    if self.relation != nil {
                        map["Relation"] = self.relation!
                    }
                    if self.userGroupType != nil {
                        map["UserGroupType"] = self.userGroupType!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["IdpId"] as? Int32 {
                        self.idpId = value
                    }
                    if let value = dict["Relation"] as? String {
                        self.relation = value
                    }
                    if let value = dict["UserGroupType"] as? String {
                        self.userGroupType = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public var applicationType: String?

            public var createTime: String?

            public var customUserAttributes: [ListPolicesForPrivateAccessApplicationResponseBody.Applications.Policies.CustomUserAttributes]?

            public var description_: String?

            public var name: String?

            public var policyAction: String?

            public var policyId: String?

            public var priority: Int32?

            public var status: String?

            public var userGroupType: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.applicationType != nil {
                    map["ApplicationType"] = self.applicationType!
                }
                if self.createTime != nil {
                    map["CreateTime"] = self.createTime!
                }
                if self.customUserAttributes != nil {
                    var tmp : [Any] = []
                    for k in self.customUserAttributes! {
                        tmp.append(k.toMap())
                    }
                    map["CustomUserAttributes"] = tmp
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.policyAction != nil {
                    map["PolicyAction"] = self.policyAction!
                }
                if self.policyId != nil {
                    map["PolicyId"] = self.policyId!
                }
                if self.priority != nil {
                    map["Priority"] = self.priority!
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                if self.userGroupType != nil {
                    map["UserGroupType"] = self.userGroupType!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ApplicationType"] as? String {
                    self.applicationType = value
                }
                if let value = dict["CreateTime"] as? String {
                    self.createTime = value
                }
                if let value = dict["CustomUserAttributes"] as? [Any?] {
                    var tmp : [ListPolicesForPrivateAccessApplicationResponseBody.Applications.Policies.CustomUserAttributes] = []
                    for v in value {
                        if v != nil {
                            var model = ListPolicesForPrivateAccessApplicationResponseBody.Applications.Policies.CustomUserAttributes()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.customUserAttributes = tmp
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["PolicyAction"] as? String {
                    self.policyAction = value
                }
                if let value = dict["PolicyId"] as? String {
                    self.policyId = value
                }
                if let value = dict["Priority"] as? Int32 {
                    self.priority = value
                }
                if let value = dict["Status"] as? String {
                    self.status = value
                }
                if let value = dict["UserGroupType"] as? String {
                    self.userGroupType = value
                }
            }
        }
        public var applicationId: String?

        public var policies: [ListPolicesForPrivateAccessApplicationResponseBody.Applications.Policies]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.applicationId != nil {
                map["ApplicationId"] = self.applicationId!
            }
            if self.policies != nil {
                var tmp : [Any] = []
                for k in self.policies! {
                    tmp.append(k.toMap())
                }
                map["Policies"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ApplicationId"] as? String {
                self.applicationId = value
            }
            if let value = dict["Policies"] as? [Any?] {
                var tmp : [ListPolicesForPrivateAccessApplicationResponseBody.Applications.Policies] = []
                for v in value {
                    if v != nil {
                        var model = ListPolicesForPrivateAccessApplicationResponseBody.Applications.Policies()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.policies = tmp
            }
        }
    }
    public var applications: [ListPolicesForPrivateAccessApplicationResponseBody.Applications]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.applications != nil {
            var tmp : [Any] = []
            for k in self.applications! {
                tmp.append(k.toMap())
            }
            map["Applications"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Applications"] as? [Any?] {
            var tmp : [ListPolicesForPrivateAccessApplicationResponseBody.Applications] = []
            for v in value {
                if v != nil {
                    var model = ListPolicesForPrivateAccessApplicationResponseBody.Applications()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.applications = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListPolicesForPrivateAccessApplicationResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListPolicesForPrivateAccessApplicationResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListPolicesForPrivateAccessApplicationResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListPolicesForPrivateAccessTagRequest : Tea.TeaModel {
    public var tagIds: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.tagIds != nil {
            map["TagIds"] = self.tagIds!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["TagIds"] as? [String] {
            self.tagIds = value
        }
    }
}

public class ListPolicesForPrivateAccessTagResponseBody : Tea.TeaModel {
    public class Tags : Tea.TeaModel {
        public class Polices : Tea.TeaModel {
            public class CustomUserAttributes : Tea.TeaModel {
                public var idpId: Int32?

                public var relation: String?

                public var userGroupType: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.idpId != nil {
                        map["IdpId"] = self.idpId!
                    }
                    if self.relation != nil {
                        map["Relation"] = self.relation!
                    }
                    if self.userGroupType != nil {
                        map["UserGroupType"] = self.userGroupType!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["IdpId"] as? Int32 {
                        self.idpId = value
                    }
                    if let value = dict["Relation"] as? String {
                        self.relation = value
                    }
                    if let value = dict["UserGroupType"] as? String {
                        self.userGroupType = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public var applicationType: String?

            public var createTime: String?

            public var customUserAttributes: [ListPolicesForPrivateAccessTagResponseBody.Tags.Polices.CustomUserAttributes]?

            public var description_: String?

            public var name: String?

            public var policyAction: String?

            public var policyId: String?

            public var priority: Int32?

            public var status: String?

            public var userGroupType: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.applicationType != nil {
                    map["ApplicationType"] = self.applicationType!
                }
                if self.createTime != nil {
                    map["CreateTime"] = self.createTime!
                }
                if self.customUserAttributes != nil {
                    var tmp : [Any] = []
                    for k in self.customUserAttributes! {
                        tmp.append(k.toMap())
                    }
                    map["CustomUserAttributes"] = tmp
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.policyAction != nil {
                    map["PolicyAction"] = self.policyAction!
                }
                if self.policyId != nil {
                    map["PolicyId"] = self.policyId!
                }
                if self.priority != nil {
                    map["Priority"] = self.priority!
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                if self.userGroupType != nil {
                    map["UserGroupType"] = self.userGroupType!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ApplicationType"] as? String {
                    self.applicationType = value
                }
                if let value = dict["CreateTime"] as? String {
                    self.createTime = value
                }
                if let value = dict["CustomUserAttributes"] as? [Any?] {
                    var tmp : [ListPolicesForPrivateAccessTagResponseBody.Tags.Polices.CustomUserAttributes] = []
                    for v in value {
                        if v != nil {
                            var model = ListPolicesForPrivateAccessTagResponseBody.Tags.Polices.CustomUserAttributes()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.customUserAttributes = tmp
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["PolicyAction"] as? String {
                    self.policyAction = value
                }
                if let value = dict["PolicyId"] as? String {
                    self.policyId = value
                }
                if let value = dict["Priority"] as? Int32 {
                    self.priority = value
                }
                if let value = dict["Status"] as? String {
                    self.status = value
                }
                if let value = dict["UserGroupType"] as? String {
                    self.userGroupType = value
                }
            }
        }
        public var polices: [ListPolicesForPrivateAccessTagResponseBody.Tags.Polices]?

        public var tagId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.polices != nil {
                var tmp : [Any] = []
                for k in self.polices! {
                    tmp.append(k.toMap())
                }
                map["Polices"] = tmp
            }
            if self.tagId != nil {
                map["TagId"] = self.tagId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Polices"] as? [Any?] {
                var tmp : [ListPolicesForPrivateAccessTagResponseBody.Tags.Polices] = []
                for v in value {
                    if v != nil {
                        var model = ListPolicesForPrivateAccessTagResponseBody.Tags.Polices()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.polices = tmp
            }
            if let value = dict["TagId"] as? String {
                self.tagId = value
            }
        }
    }
    public var requestId: String?

    public var tags: [ListPolicesForPrivateAccessTagResponseBody.Tags]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.tags != nil {
            var tmp : [Any] = []
            for k in self.tags! {
                tmp.append(k.toMap())
            }
            map["Tags"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Tags"] as? [Any?] {
            var tmp : [ListPolicesForPrivateAccessTagResponseBody.Tags] = []
            for v in value {
                if v != nil {
                    var model = ListPolicesForPrivateAccessTagResponseBody.Tags()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tags = tmp
        }
    }
}

public class ListPolicesForPrivateAccessTagResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListPolicesForPrivateAccessTagResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListPolicesForPrivateAccessTagResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListPolicesForUserGroupRequest : Tea.TeaModel {
    public var userGroupIds: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.userGroupIds != nil {
            map["UserGroupIds"] = self.userGroupIds!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["UserGroupIds"] as? [String] {
            self.userGroupIds = value
        }
    }
}

public class ListPolicesForUserGroupResponseBody : Tea.TeaModel {
    public class UserGroups : Tea.TeaModel {
        public class Polices : Tea.TeaModel {
            public var name: String?

            public var policyId: String?

            public var policyType: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.policyId != nil {
                    map["PolicyId"] = self.policyId!
                }
                if self.policyType != nil {
                    map["PolicyType"] = self.policyType!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["PolicyId"] as? String {
                    self.policyId = value
                }
                if let value = dict["PolicyType"] as? String {
                    self.policyType = value
                }
            }
        }
        public var polices: [ListPolicesForUserGroupResponseBody.UserGroups.Polices]?

        public var userGroupId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.polices != nil {
                var tmp : [Any] = []
                for k in self.polices! {
                    tmp.append(k.toMap())
                }
                map["Polices"] = tmp
            }
            if self.userGroupId != nil {
                map["UserGroupId"] = self.userGroupId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Polices"] as? [Any?] {
                var tmp : [ListPolicesForUserGroupResponseBody.UserGroups.Polices] = []
                for v in value {
                    if v != nil {
                        var model = ListPolicesForUserGroupResponseBody.UserGroups.Polices()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.polices = tmp
            }
            if let value = dict["UserGroupId"] as? String {
                self.userGroupId = value
            }
        }
    }
    public var requestId: String?

    public var userGroups: [ListPolicesForUserGroupResponseBody.UserGroups]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.userGroups != nil {
            var tmp : [Any] = []
            for k in self.userGroups! {
                tmp.append(k.toMap())
            }
            map["UserGroups"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["UserGroups"] as? [Any?] {
            var tmp : [ListPolicesForUserGroupResponseBody.UserGroups] = []
            for v in value {
                if v != nil {
                    var model = ListPolicesForUserGroupResponseBody.UserGroups()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.userGroups = tmp
        }
    }
}

public class ListPolicesForUserGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListPolicesForUserGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListPolicesForUserGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListPopTrafficStatisticsRequest : Tea.TeaModel {
    public var endTime: String?

    public var region: String?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.region != nil {
            map["Region"] = self.region!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["Region"] as? String {
            self.region = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
    }
}

public class ListPopTrafficStatisticsResponseBody : Tea.TeaModel {
    public class TrafficData : Tea.TeaModel {
        public class Datapoints : Tea.TeaModel {
            public var average: Double?

            public var dateTime: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.average != nil {
                    map["Average"] = self.average!
                }
                if self.dateTime != nil {
                    map["DateTime"] = self.dateTime!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Average"] as? Double {
                    self.average = value
                }
                if let value = dict["DateTime"] as? String {
                    self.dateTime = value
                }
            }
        }
        public var datapoints: [ListPopTrafficStatisticsResponseBody.TrafficData.Datapoints]?

        public var metricName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.datapoints != nil {
                var tmp : [Any] = []
                for k in self.datapoints! {
                    tmp.append(k.toMap())
                }
                map["Datapoints"] = tmp
            }
            if self.metricName != nil {
                map["MetricName"] = self.metricName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Datapoints"] as? [Any?] {
                var tmp : [ListPopTrafficStatisticsResponseBody.TrafficData.Datapoints] = []
                for v in value {
                    if v != nil {
                        var model = ListPopTrafficStatisticsResponseBody.TrafficData.Datapoints()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.datapoints = tmp
            }
            if let value = dict["MetricName"] as? String {
                self.metricName = value
            }
        }
    }
    public var requestId: String?

    public var trafficData: [ListPopTrafficStatisticsResponseBody.TrafficData]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.trafficData != nil {
            var tmp : [Any] = []
            for k in self.trafficData! {
                tmp.append(k.toMap())
            }
            map["TrafficData"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TrafficData"] as? [Any?] {
            var tmp : [ListPopTrafficStatisticsResponseBody.TrafficData] = []
            for v in value {
                if v != nil {
                    var model = ListPopTrafficStatisticsResponseBody.TrafficData()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.trafficData = tmp
        }
    }
}

public class ListPopTrafficStatisticsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListPopTrafficStatisticsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListPopTrafficStatisticsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListPrivateAccessApplicationsRequest : Tea.TeaModel {
    public var accessModes: String?

    public var address: String?

    public var applicationIds: [String]?

    public var connectorId: String?

    public var currentPage: Int32?

    public var name: String?

    public var pageSize: Int32?

    public var policyId: String?

    public var status: String?

    public var tagId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.accessModes != nil {
            map["AccessModes"] = self.accessModes!
        }
        if self.address != nil {
            map["Address"] = self.address!
        }
        if self.applicationIds != nil {
            map["ApplicationIds"] = self.applicationIds!
        }
        if self.connectorId != nil {
            map["ConnectorId"] = self.connectorId!
        }
        if self.currentPage != nil {
            map["CurrentPage"] = self.currentPage!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.policyId != nil {
            map["PolicyId"] = self.policyId!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        if self.tagId != nil {
            map["TagId"] = self.tagId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AccessModes"] as? String {
            self.accessModes = value
        }
        if let value = dict["Address"] as? String {
            self.address = value
        }
        if let value = dict["ApplicationIds"] as? [String] {
            self.applicationIds = value
        }
        if let value = dict["ConnectorId"] as? String {
            self.connectorId = value
        }
        if let value = dict["CurrentPage"] as? Int32 {
            self.currentPage = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["PolicyId"] as? String {
            self.policyId = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
        if let value = dict["TagId"] as? String {
            self.tagId = value
        }
    }
}

public class ListPrivateAccessApplicationsResponseBody : Tea.TeaModel {
    public class Applications : Tea.TeaModel {
        public class PortRanges : Tea.TeaModel {
            public var begin: Int32?

            public var end: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.begin != nil {
                    map["Begin"] = self.begin!
                }
                if self.end != nil {
                    map["End"] = self.end!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Begin"] as? Int32 {
                    self.begin = value
                }
                if let value = dict["End"] as? Int32 {
                    self.end = value
                }
            }
        }
        public var addresses: [String]?

        public var applicationId: String?

        public var autoGenerated: Int32?

        public var browserAccessStatus: String?

        public var connectorIds: [String]?

        public var createTime: String?

        public var description_: String?

        public var l7ProxyDomainAutomatic: String?

        public var l7ProxyDomainCustom: String?

        public var name: String?

        public var policyIds: [String]?

        public var portRanges: [ListPrivateAccessApplicationsResponseBody.Applications.PortRanges]?

        public var protocol_: String?

        public var status: String?

        public var tagIds: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.addresses != nil {
                map["Addresses"] = self.addresses!
            }
            if self.applicationId != nil {
                map["ApplicationId"] = self.applicationId!
            }
            if self.autoGenerated != nil {
                map["AutoGenerated"] = self.autoGenerated!
            }
            if self.browserAccessStatus != nil {
                map["BrowserAccessStatus"] = self.browserAccessStatus!
            }
            if self.connectorIds != nil {
                map["ConnectorIds"] = self.connectorIds!
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.l7ProxyDomainAutomatic != nil {
                map["L7ProxyDomainAutomatic"] = self.l7ProxyDomainAutomatic!
            }
            if self.l7ProxyDomainCustom != nil {
                map["L7ProxyDomainCustom"] = self.l7ProxyDomainCustom!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.policyIds != nil {
                map["PolicyIds"] = self.policyIds!
            }
            if self.portRanges != nil {
                var tmp : [Any] = []
                for k in self.portRanges! {
                    tmp.append(k.toMap())
                }
                map["PortRanges"] = tmp
            }
            if self.protocol_ != nil {
                map["Protocol"] = self.protocol_!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.tagIds != nil {
                map["TagIds"] = self.tagIds!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Addresses"] as? [String] {
                self.addresses = value
            }
            if let value = dict["ApplicationId"] as? String {
                self.applicationId = value
            }
            if let value = dict["AutoGenerated"] as? Int32 {
                self.autoGenerated = value
            }
            if let value = dict["BrowserAccessStatus"] as? String {
                self.browserAccessStatus = value
            }
            if let value = dict["ConnectorIds"] as? [String] {
                self.connectorIds = value
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["L7ProxyDomainAutomatic"] as? String {
                self.l7ProxyDomainAutomatic = value
            }
            if let value = dict["L7ProxyDomainCustom"] as? String {
                self.l7ProxyDomainCustom = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["PolicyIds"] as? [String] {
                self.policyIds = value
            }
            if let value = dict["PortRanges"] as? [Any?] {
                var tmp : [ListPrivateAccessApplicationsResponseBody.Applications.PortRanges] = []
                for v in value {
                    if v != nil {
                        var model = ListPrivateAccessApplicationsResponseBody.Applications.PortRanges()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.portRanges = tmp
            }
            if let value = dict["Protocol"] as? String {
                self.protocol_ = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["TagIds"] as? [String] {
                self.tagIds = value
            }
        }
    }
    public var applications: [ListPrivateAccessApplicationsResponseBody.Applications]?

    public var requestId: String?

    public var totalNum: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.applications != nil {
            var tmp : [Any] = []
            for k in self.applications! {
                tmp.append(k.toMap())
            }
            map["Applications"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalNum != nil {
            map["TotalNum"] = self.totalNum!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Applications"] as? [Any?] {
            var tmp : [ListPrivateAccessApplicationsResponseBody.Applications] = []
            for v in value {
                if v != nil {
                    var model = ListPrivateAccessApplicationsResponseBody.Applications()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.applications = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalNum"] as? Int32 {
            self.totalNum = value
        }
    }
}

public class ListPrivateAccessApplicationsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListPrivateAccessApplicationsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListPrivateAccessApplicationsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListPrivateAccessApplicationsForDynamicRouteRequest : Tea.TeaModel {
    public var dynamicRouteIds: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dynamicRouteIds != nil {
            map["DynamicRouteIds"] = self.dynamicRouteIds!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DynamicRouteIds"] as? [String] {
            self.dynamicRouteIds = value
        }
    }
}

public class ListPrivateAccessApplicationsForDynamicRouteResponseBody : Tea.TeaModel {
    public class DynamicRoutes : Tea.TeaModel {
        public class Applications : Tea.TeaModel {
            public class PortRanges : Tea.TeaModel {
                public var begin: Int32?

                public var end: Int32?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.begin != nil {
                        map["Begin"] = self.begin!
                    }
                    if self.end != nil {
                        map["End"] = self.end!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Begin"] as? Int32 {
                        self.begin = value
                    }
                    if let value = dict["End"] as? Int32 {
                        self.end = value
                    }
                }
            }
            public var addresses: [String]?

            public var applicationId: String?

            public var createTime: String?

            public var description_: String?

            public var name: String?

            public var portRanges: [ListPrivateAccessApplicationsForDynamicRouteResponseBody.DynamicRoutes.Applications.PortRanges]?

            public var protocol_: String?

            public var status: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.addresses != nil {
                    map["Addresses"] = self.addresses!
                }
                if self.applicationId != nil {
                    map["ApplicationId"] = self.applicationId!
                }
                if self.createTime != nil {
                    map["CreateTime"] = self.createTime!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.portRanges != nil {
                    var tmp : [Any] = []
                    for k in self.portRanges! {
                        tmp.append(k.toMap())
                    }
                    map["PortRanges"] = tmp
                }
                if self.protocol_ != nil {
                    map["Protocol"] = self.protocol_!
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Addresses"] as? [String] {
                    self.addresses = value
                }
                if let value = dict["ApplicationId"] as? String {
                    self.applicationId = value
                }
                if let value = dict["CreateTime"] as? String {
                    self.createTime = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["PortRanges"] as? [Any?] {
                    var tmp : [ListPrivateAccessApplicationsForDynamicRouteResponseBody.DynamicRoutes.Applications.PortRanges] = []
                    for v in value {
                        if v != nil {
                            var model = ListPrivateAccessApplicationsForDynamicRouteResponseBody.DynamicRoutes.Applications.PortRanges()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.portRanges = tmp
                }
                if let value = dict["Protocol"] as? String {
                    self.protocol_ = value
                }
                if let value = dict["Status"] as? String {
                    self.status = value
                }
            }
        }
        public var applications: [ListPrivateAccessApplicationsForDynamicRouteResponseBody.DynamicRoutes.Applications]?

        public var dynamicRouteId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.applications != nil {
                var tmp : [Any] = []
                for k in self.applications! {
                    tmp.append(k.toMap())
                }
                map["Applications"] = tmp
            }
            if self.dynamicRouteId != nil {
                map["DynamicRouteId"] = self.dynamicRouteId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Applications"] as? [Any?] {
                var tmp : [ListPrivateAccessApplicationsForDynamicRouteResponseBody.DynamicRoutes.Applications] = []
                for v in value {
                    if v != nil {
                        var model = ListPrivateAccessApplicationsForDynamicRouteResponseBody.DynamicRoutes.Applications()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.applications = tmp
            }
            if let value = dict["DynamicRouteId"] as? String {
                self.dynamicRouteId = value
            }
        }
    }
    public var dynamicRoutes: [ListPrivateAccessApplicationsForDynamicRouteResponseBody.DynamicRoutes]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dynamicRoutes != nil {
            var tmp : [Any] = []
            for k in self.dynamicRoutes! {
                tmp.append(k.toMap())
            }
            map["DynamicRoutes"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DynamicRoutes"] as? [Any?] {
            var tmp : [ListPrivateAccessApplicationsForDynamicRouteResponseBody.DynamicRoutes] = []
            for v in value {
                if v != nil {
                    var model = ListPrivateAccessApplicationsForDynamicRouteResponseBody.DynamicRoutes()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.dynamicRoutes = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListPrivateAccessApplicationsForDynamicRouteResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListPrivateAccessApplicationsForDynamicRouteResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListPrivateAccessApplicationsForDynamicRouteResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListPrivateAccessPolicesRequest : Tea.TeaModel {
    public var applicationId: String?

    public var applicationName: String?

    public var currentPage: Int32?

    public var name: String?

    public var pageSize: Int32?

    public var policyAction: String?

    public var policyIds: [String]?

    public var status: String?

    public var tagId: String?

    public var tagName: String?

    public var userGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.applicationId != nil {
            map["ApplicationId"] = self.applicationId!
        }
        if self.applicationName != nil {
            map["ApplicationName"] = self.applicationName!
        }
        if self.currentPage != nil {
            map["CurrentPage"] = self.currentPage!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.policyAction != nil {
            map["PolicyAction"] = self.policyAction!
        }
        if self.policyIds != nil {
            map["PolicyIds"] = self.policyIds!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        if self.tagId != nil {
            map["TagId"] = self.tagId!
        }
        if self.tagName != nil {
            map["TagName"] = self.tagName!
        }
        if self.userGroupId != nil {
            map["UserGroupId"] = self.userGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApplicationId"] as? String {
            self.applicationId = value
        }
        if let value = dict["ApplicationName"] as? String {
            self.applicationName = value
        }
        if let value = dict["CurrentPage"] as? Int32 {
            self.currentPage = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["PolicyAction"] as? String {
            self.policyAction = value
        }
        if let value = dict["PolicyIds"] as? [String] {
            self.policyIds = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
        if let value = dict["TagId"] as? String {
            self.tagId = value
        }
        if let value = dict["TagName"] as? String {
            self.tagName = value
        }
        if let value = dict["UserGroupId"] as? String {
            self.userGroupId = value
        }
    }
}

public class ListPrivateAccessPolicesResponseBody : Tea.TeaModel {
    public class Polices : Tea.TeaModel {
        public class CustomUserAttributes : Tea.TeaModel {
            public var idpId: Int32?

            public var relation: String?

            public var userGroupType: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.idpId != nil {
                    map["IdpId"] = self.idpId!
                }
                if self.relation != nil {
                    map["Relation"] = self.relation!
                }
                if self.userGroupType != nil {
                    map["UserGroupType"] = self.userGroupType!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["IdpId"] as? Int32 {
                    self.idpId = value
                }
                if let value = dict["Relation"] as? String {
                    self.relation = value
                }
                if let value = dict["UserGroupType"] as? String {
                    self.userGroupType = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public var applicationIds: [String]?

        public var applicationType: String?

        public var createTime: String?

        public var customUserAttributes: [ListPrivateAccessPolicesResponseBody.Polices.CustomUserAttributes]?

        public var description_: String?

        public var deviceAttributeAction: String?

        public var deviceAttributeId: String?

        public var name: String?

        public var policyAction: String?

        public var policyId: String?

        public var priority: Int32?

        public var status: String?

        public var tagIds: [String]?

        public var triggerTemplateId: String?

        public var trustedProcessGroupIds: [String]?

        public var trustedProcessStatus: String?

        public var trustedSoftwareIds: [String]?

        public var userGroupIds: [String]?

        public var userGroupMode: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.applicationIds != nil {
                map["ApplicationIds"] = self.applicationIds!
            }
            if self.applicationType != nil {
                map["ApplicationType"] = self.applicationType!
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.customUserAttributes != nil {
                var tmp : [Any] = []
                for k in self.customUserAttributes! {
                    tmp.append(k.toMap())
                }
                map["CustomUserAttributes"] = tmp
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.deviceAttributeAction != nil {
                map["DeviceAttributeAction"] = self.deviceAttributeAction!
            }
            if self.deviceAttributeId != nil {
                map["DeviceAttributeId"] = self.deviceAttributeId!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.policyAction != nil {
                map["PolicyAction"] = self.policyAction!
            }
            if self.policyId != nil {
                map["PolicyId"] = self.policyId!
            }
            if self.priority != nil {
                map["Priority"] = self.priority!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.tagIds != nil {
                map["TagIds"] = self.tagIds!
            }
            if self.triggerTemplateId != nil {
                map["TriggerTemplateId"] = self.triggerTemplateId!
            }
            if self.trustedProcessGroupIds != nil {
                map["TrustedProcessGroupIds"] = self.trustedProcessGroupIds!
            }
            if self.trustedProcessStatus != nil {
                map["TrustedProcessStatus"] = self.trustedProcessStatus!
            }
            if self.trustedSoftwareIds != nil {
                map["TrustedSoftwareIds"] = self.trustedSoftwareIds!
            }
            if self.userGroupIds != nil {
                map["UserGroupIds"] = self.userGroupIds!
            }
            if self.userGroupMode != nil {
                map["UserGroupMode"] = self.userGroupMode!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ApplicationIds"] as? [String] {
                self.applicationIds = value
            }
            if let value = dict["ApplicationType"] as? String {
                self.applicationType = value
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["CustomUserAttributes"] as? [Any?] {
                var tmp : [ListPrivateAccessPolicesResponseBody.Polices.CustomUserAttributes] = []
                for v in value {
                    if v != nil {
                        var model = ListPrivateAccessPolicesResponseBody.Polices.CustomUserAttributes()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.customUserAttributes = tmp
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["DeviceAttributeAction"] as? String {
                self.deviceAttributeAction = value
            }
            if let value = dict["DeviceAttributeId"] as? String {
                self.deviceAttributeId = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["PolicyAction"] as? String {
                self.policyAction = value
            }
            if let value = dict["PolicyId"] as? String {
                self.policyId = value
            }
            if let value = dict["Priority"] as? Int32 {
                self.priority = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["TagIds"] as? [String] {
                self.tagIds = value
            }
            if let value = dict["TriggerTemplateId"] as? String {
                self.triggerTemplateId = value
            }
            if let value = dict["TrustedProcessGroupIds"] as? [String] {
                self.trustedProcessGroupIds = value
            }
            if let value = dict["TrustedProcessStatus"] as? String {
                self.trustedProcessStatus = value
            }
            if let value = dict["TrustedSoftwareIds"] as? [String] {
                self.trustedSoftwareIds = value
            }
            if let value = dict["UserGroupIds"] as? [String] {
                self.userGroupIds = value
            }
            if let value = dict["UserGroupMode"] as? String {
                self.userGroupMode = value
            }
        }
    }
    public var polices: [ListPrivateAccessPolicesResponseBody.Polices]?

    public var requestId: String?

    public var totalNum: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.polices != nil {
            var tmp : [Any] = []
            for k in self.polices! {
                tmp.append(k.toMap())
            }
            map["Polices"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalNum != nil {
            map["TotalNum"] = self.totalNum!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Polices"] as? [Any?] {
            var tmp : [ListPrivateAccessPolicesResponseBody.Polices] = []
            for v in value {
                if v != nil {
                    var model = ListPrivateAccessPolicesResponseBody.Polices()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.polices = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalNum"] as? Int32 {
            self.totalNum = value
        }
    }
}

public class ListPrivateAccessPolicesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListPrivateAccessPolicesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListPrivateAccessPolicesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListPrivateAccessTagsRequest : Tea.TeaModel {
    public var applicationId: String?

    public var currentPage: Int32?

    public var name: String?

    public var pageSize: Int32?

    public var policyId: String?

    public var simpleMode: Bool?

    public var tagIds: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.applicationId != nil {
            map["ApplicationId"] = self.applicationId!
        }
        if self.currentPage != nil {
            map["CurrentPage"] = self.currentPage!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.policyId != nil {
            map["PolicyId"] = self.policyId!
        }
        if self.simpleMode != nil {
            map["SimpleMode"] = self.simpleMode!
        }
        if self.tagIds != nil {
            map["TagIds"] = self.tagIds!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApplicationId"] as? String {
            self.applicationId = value
        }
        if let value = dict["CurrentPage"] as? Int32 {
            self.currentPage = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["PolicyId"] as? String {
            self.policyId = value
        }
        if let value = dict["SimpleMode"] as? Bool {
            self.simpleMode = value
        }
        if let value = dict["TagIds"] as? [String] {
            self.tagIds = value
        }
    }
}

public class ListPrivateAccessTagsResponseBody : Tea.TeaModel {
    public class Tags : Tea.TeaModel {
        public var applicationIds: [String]?

        public var createTime: String?

        public var description_: String?

        public var name: String?

        public var policyIds: [String]?

        public var tagId: String?

        public var tagType: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.applicationIds != nil {
                map["ApplicationIds"] = self.applicationIds!
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.policyIds != nil {
                map["PolicyIds"] = self.policyIds!
            }
            if self.tagId != nil {
                map["TagId"] = self.tagId!
            }
            if self.tagType != nil {
                map["TagType"] = self.tagType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ApplicationIds"] as? [String] {
                self.applicationIds = value
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["PolicyIds"] as? [String] {
                self.policyIds = value
            }
            if let value = dict["TagId"] as? String {
                self.tagId = value
            }
            if let value = dict["TagType"] as? String {
                self.tagType = value
            }
        }
    }
    public var requestId: String?

    public var tags: [ListPrivateAccessTagsResponseBody.Tags]?

    public var totalNum: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.tags != nil {
            var tmp : [Any] = []
            for k in self.tags! {
                tmp.append(k.toMap())
            }
            map["Tags"] = tmp
        }
        if self.totalNum != nil {
            map["TotalNum"] = self.totalNum!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Tags"] as? [Any?] {
            var tmp : [ListPrivateAccessTagsResponseBody.Tags] = []
            for v in value {
                if v != nil {
                    var model = ListPrivateAccessTagsResponseBody.Tags()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tags = tmp
        }
        if let value = dict["TotalNum"] as? Int32 {
            self.totalNum = value
        }
    }
}

public class ListPrivateAccessTagsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListPrivateAccessTagsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListPrivateAccessTagsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListPrivateAccessTagsForDynamicRouteRequest : Tea.TeaModel {
    public var dynamicRouteIds: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dynamicRouteIds != nil {
            map["DynamicRouteIds"] = self.dynamicRouteIds!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DynamicRouteIds"] as? [String] {
            self.dynamicRouteIds = value
        }
    }
}

public class ListPrivateAccessTagsForDynamicRouteResponseBody : Tea.TeaModel {
    public class DynamicRoutes : Tea.TeaModel {
        public class Tags : Tea.TeaModel {
            public var createTime: String?

            public var description_: String?

            public var name: String?

            public var tagId: String?

            public var tagType: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.createTime != nil {
                    map["CreateTime"] = self.createTime!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.tagId != nil {
                    map["TagId"] = self.tagId!
                }
                if self.tagType != nil {
                    map["TagType"] = self.tagType!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CreateTime"] as? String {
                    self.createTime = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["TagId"] as? String {
                    self.tagId = value
                }
                if let value = dict["TagType"] as? String {
                    self.tagType = value
                }
            }
        }
        public var dynamicRouteId: String?

        public var tags: [ListPrivateAccessTagsForDynamicRouteResponseBody.DynamicRoutes.Tags]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.dynamicRouteId != nil {
                map["DynamicRouteId"] = self.dynamicRouteId!
            }
            if self.tags != nil {
                var tmp : [Any] = []
                for k in self.tags! {
                    tmp.append(k.toMap())
                }
                map["Tags"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DynamicRouteId"] as? String {
                self.dynamicRouteId = value
            }
            if let value = dict["Tags"] as? [Any?] {
                var tmp : [ListPrivateAccessTagsForDynamicRouteResponseBody.DynamicRoutes.Tags] = []
                for v in value {
                    if v != nil {
                        var model = ListPrivateAccessTagsForDynamicRouteResponseBody.DynamicRoutes.Tags()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.tags = tmp
            }
        }
    }
    public var dynamicRoutes: [ListPrivateAccessTagsForDynamicRouteResponseBody.DynamicRoutes]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dynamicRoutes != nil {
            var tmp : [Any] = []
            for k in self.dynamicRoutes! {
                tmp.append(k.toMap())
            }
            map["DynamicRoutes"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DynamicRoutes"] as? [Any?] {
            var tmp : [ListPrivateAccessTagsForDynamicRouteResponseBody.DynamicRoutes] = []
            for v in value {
                if v != nil {
                    var model = ListPrivateAccessTagsForDynamicRouteResponseBody.DynamicRoutes()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.dynamicRoutes = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListPrivateAccessTagsForDynamicRouteResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListPrivateAccessTagsForDynamicRouteResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListPrivateAccessTagsForDynamicRouteResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListRegistrationPoliciesRequest : Tea.TeaModel {
    public var companyLimitType: String?

    public var currentPage: Int64?

    public var matchMode: String?

    public var name: String?

    public var pageSize: Int64?

    public var personalLimitType: String?

    public var policyIds: [String]?

    public var status: String?

    public var userGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.companyLimitType != nil {
            map["CompanyLimitType"] = self.companyLimitType!
        }
        if self.currentPage != nil {
            map["CurrentPage"] = self.currentPage!
        }
        if self.matchMode != nil {
            map["MatchMode"] = self.matchMode!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.personalLimitType != nil {
            map["PersonalLimitType"] = self.personalLimitType!
        }
        if self.policyIds != nil {
            map["PolicyIds"] = self.policyIds!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        if self.userGroupId != nil {
            map["UserGroupId"] = self.userGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CompanyLimitType"] as? String {
            self.companyLimitType = value
        }
        if let value = dict["CurrentPage"] as? Int64 {
            self.currentPage = value
        }
        if let value = dict["MatchMode"] as? String {
            self.matchMode = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["PersonalLimitType"] as? String {
            self.personalLimitType = value
        }
        if let value = dict["PolicyIds"] as? [String] {
            self.policyIds = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
        if let value = dict["UserGroupId"] as? String {
            self.userGroupId = value
        }
    }
}

public class ListRegistrationPoliciesResponseBody : Tea.TeaModel {
    public class Policies : Tea.TeaModel {
        public class LimitDetail : Tea.TeaModel {
            public class LimitCount : Tea.TeaModel {
                public var all: Int32?

                public var mobile: Int32?

                public var PC: Int32?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.all != nil {
                        map["All"] = self.all!
                    }
                    if self.mobile != nil {
                        map["Mobile"] = self.mobile!
                    }
                    if self.PC != nil {
                        map["PC"] = self.PC!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["All"] as? Int32 {
                        self.all = value
                    }
                    if let value = dict["Mobile"] as? Int32 {
                        self.mobile = value
                    }
                    if let value = dict["PC"] as? Int32 {
                        self.PC = value
                    }
                }
            }
            public var deviceBelong: String?

            public var limitCount: ListRegistrationPoliciesResponseBody.Policies.LimitDetail.LimitCount?

            public var limitType: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.limitCount?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.deviceBelong != nil {
                    map["DeviceBelong"] = self.deviceBelong!
                }
                if self.limitCount != nil {
                    map["LimitCount"] = self.limitCount?.toMap()
                }
                if self.limitType != nil {
                    map["LimitType"] = self.limitType!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["DeviceBelong"] as? String {
                    self.deviceBelong = value
                }
                if let value = dict["LimitCount"] as? [String: Any?] {
                    var model = ListRegistrationPoliciesResponseBody.Policies.LimitDetail.LimitCount()
                    model.fromMap(value)
                    self.limitCount = model
                }
                if let value = dict["LimitType"] as? String {
                    self.limitType = value
                }
            }
        }
        public var createTime: String?

        public var description_: String?

        public var limitDetail: [ListRegistrationPoliciesResponseBody.Policies.LimitDetail]?

        public var matchMode: String?

        public var name: String?

        public var policyId: String?

        public var priority: Int64?

        public var status: String?

        public var userGroupIds: [String]?

        public var whitelist: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.limitDetail != nil {
                var tmp : [Any] = []
                for k in self.limitDetail! {
                    tmp.append(k.toMap())
                }
                map["LimitDetail"] = tmp
            }
            if self.matchMode != nil {
                map["MatchMode"] = self.matchMode!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.policyId != nil {
                map["PolicyId"] = self.policyId!
            }
            if self.priority != nil {
                map["Priority"] = self.priority!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.userGroupIds != nil {
                map["UserGroupIds"] = self.userGroupIds!
            }
            if self.whitelist != nil {
                map["Whitelist"] = self.whitelist!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["LimitDetail"] as? [Any?] {
                var tmp : [ListRegistrationPoliciesResponseBody.Policies.LimitDetail] = []
                for v in value {
                    if v != nil {
                        var model = ListRegistrationPoliciesResponseBody.Policies.LimitDetail()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.limitDetail = tmp
            }
            if let value = dict["MatchMode"] as? String {
                self.matchMode = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["PolicyId"] as? String {
                self.policyId = value
            }
            if let value = dict["Priority"] as? Int64 {
                self.priority = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["UserGroupIds"] as? [String] {
                self.userGroupIds = value
            }
            if let value = dict["Whitelist"] as? [String] {
                self.whitelist = value
            }
        }
    }
    public var policies: [ListRegistrationPoliciesResponseBody.Policies]?

    public var requestId: String?

    public var totalNum: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.policies != nil {
            var tmp : [Any] = []
            for k in self.policies! {
                tmp.append(k.toMap())
            }
            map["Policies"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalNum != nil {
            map["TotalNum"] = self.totalNum!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Policies"] as? [Any?] {
            var tmp : [ListRegistrationPoliciesResponseBody.Policies] = []
            for v in value {
                if v != nil {
                    var model = ListRegistrationPoliciesResponseBody.Policies()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.policies = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalNum"] as? String {
            self.totalNum = value
        }
    }
}

public class ListRegistrationPoliciesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListRegistrationPoliciesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListRegistrationPoliciesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListRegistrationPoliciesForUserGroupRequest : Tea.TeaModel {
    public var userGroupIds: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.userGroupIds != nil {
            map["UserGroupIds"] = self.userGroupIds!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["UserGroupIds"] as? [String] {
            self.userGroupIds = value
        }
    }
}

public class ListRegistrationPoliciesForUserGroupResponseBody : Tea.TeaModel {
    public class UserGroups : Tea.TeaModel {
        public class Policies : Tea.TeaModel {
            public class LimitDetail : Tea.TeaModel {
                public class LimitCount : Tea.TeaModel {
                    public var all: String?

                    public var mobile: String?

                    public var PC: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.all != nil {
                            map["All"] = self.all!
                        }
                        if self.mobile != nil {
                            map["Mobile"] = self.mobile!
                        }
                        if self.PC != nil {
                            map["PC"] = self.PC!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["All"] as? String {
                            self.all = value
                        }
                        if let value = dict["Mobile"] as? String {
                            self.mobile = value
                        }
                        if let value = dict["PC"] as? String {
                            self.PC = value
                        }
                    }
                }
                public var deviceBelong: String?

                public var limitCount: ListRegistrationPoliciesForUserGroupResponseBody.UserGroups.Policies.LimitDetail.LimitCount?

                public var limitType: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.limitCount?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.deviceBelong != nil {
                        map["DeviceBelong"] = self.deviceBelong!
                    }
                    if self.limitCount != nil {
                        map["LimitCount"] = self.limitCount?.toMap()
                    }
                    if self.limitType != nil {
                        map["LimitType"] = self.limitType!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["DeviceBelong"] as? String {
                        self.deviceBelong = value
                    }
                    if let value = dict["LimitCount"] as? [String: Any?] {
                        var model = ListRegistrationPoliciesForUserGroupResponseBody.UserGroups.Policies.LimitDetail.LimitCount()
                        model.fromMap(value)
                        self.limitCount = model
                    }
                    if let value = dict["LimitType"] as? String {
                        self.limitType = value
                    }
                }
            }
            public var createTime: String?

            public var description_: String?

            public var limitDetail: [ListRegistrationPoliciesForUserGroupResponseBody.UserGroups.Policies.LimitDetail]?

            public var matchMode: String?

            public var name: String?

            public var policyId: String?

            public var priority: Int64?

            public var status: String?

            public var whitelist: [String]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.createTime != nil {
                    map["CreateTime"] = self.createTime!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.limitDetail != nil {
                    var tmp : [Any] = []
                    for k in self.limitDetail! {
                        tmp.append(k.toMap())
                    }
                    map["LimitDetail"] = tmp
                }
                if self.matchMode != nil {
                    map["MatchMode"] = self.matchMode!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.policyId != nil {
                    map["PolicyId"] = self.policyId!
                }
                if self.priority != nil {
                    map["Priority"] = self.priority!
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                if self.whitelist != nil {
                    map["Whitelist"] = self.whitelist!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CreateTime"] as? String {
                    self.createTime = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["LimitDetail"] as? [Any?] {
                    var tmp : [ListRegistrationPoliciesForUserGroupResponseBody.UserGroups.Policies.LimitDetail] = []
                    for v in value {
                        if v != nil {
                            var model = ListRegistrationPoliciesForUserGroupResponseBody.UserGroups.Policies.LimitDetail()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.limitDetail = tmp
                }
                if let value = dict["MatchMode"] as? String {
                    self.matchMode = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["PolicyId"] as? String {
                    self.policyId = value
                }
                if let value = dict["Priority"] as? Int64 {
                    self.priority = value
                }
                if let value = dict["Status"] as? String {
                    self.status = value
                }
                if let value = dict["Whitelist"] as? [String] {
                    self.whitelist = value
                }
            }
        }
        public var policies: [ListRegistrationPoliciesForUserGroupResponseBody.UserGroups.Policies]?

        public var userGroupId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.policies != nil {
                var tmp : [Any] = []
                for k in self.policies! {
                    tmp.append(k.toMap())
                }
                map["Policies"] = tmp
            }
            if self.userGroupId != nil {
                map["UserGroupId"] = self.userGroupId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Policies"] as? [Any?] {
                var tmp : [ListRegistrationPoliciesForUserGroupResponseBody.UserGroups.Policies] = []
                for v in value {
                    if v != nil {
                        var model = ListRegistrationPoliciesForUserGroupResponseBody.UserGroups.Policies()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.policies = tmp
            }
            if let value = dict["UserGroupId"] as? String {
                self.userGroupId = value
            }
        }
    }
    public var requestId: String?

    public var userGroups: [ListRegistrationPoliciesForUserGroupResponseBody.UserGroups]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.userGroups != nil {
            var tmp : [Any] = []
            for k in self.userGroups! {
                tmp.append(k.toMap())
            }
            map["UserGroups"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["UserGroups"] as? [Any?] {
            var tmp : [ListRegistrationPoliciesForUserGroupResponseBody.UserGroups] = []
            for v in value {
                if v != nil {
                    var model = ListRegistrationPoliciesForUserGroupResponseBody.UserGroups()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.userGroups = tmp
        }
    }
}

public class ListRegistrationPoliciesForUserGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListRegistrationPoliciesForUserGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListRegistrationPoliciesForUserGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListSoftwareForUserDeviceRequest : Tea.TeaModel {
    public var currentPage: Int64?

    public var deviceTag: String?

    public var pageSize: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.currentPage != nil {
            map["CurrentPage"] = self.currentPage!
        }
        if self.deviceTag != nil {
            map["DeviceTag"] = self.deviceTag!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CurrentPage"] as? Int64 {
            self.currentPage = value
        }
        if let value = dict["DeviceTag"] as? String {
            self.deviceTag = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
    }
}

public class ListSoftwareForUserDeviceResponseBody : Tea.TeaModel {
    public class Software : Tea.TeaModel {
        public var inc: String?

        public var installTime: String?

        public var name: String?

        public var versions: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.inc != nil {
                map["Inc"] = self.inc!
            }
            if self.installTime != nil {
                map["InstallTime"] = self.installTime!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.versions != nil {
                map["Versions"] = self.versions!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Inc"] as? String {
                self.inc = value
            }
            if let value = dict["InstallTime"] as? String {
                self.installTime = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["Versions"] as? [String] {
                self.versions = value
            }
        }
    }
    public var requestId: String?

    public var software: [ListSoftwareForUserDeviceResponseBody.Software]?

    public var totalNum: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.software != nil {
            var tmp : [Any] = []
            for k in self.software! {
                tmp.append(k.toMap())
            }
            map["Software"] = tmp
        }
        if self.totalNum != nil {
            map["TotalNum"] = self.totalNum!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Software"] as? [Any?] {
            var tmp : [ListSoftwareForUserDeviceResponseBody.Software] = []
            for v in value {
                if v != nil {
                    var model = ListSoftwareForUserDeviceResponseBody.Software()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.software = tmp
        }
        if let value = dict["TotalNum"] as? Int64 {
            self.totalNum = value
        }
    }
}

public class ListSoftwareForUserDeviceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListSoftwareForUserDeviceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListSoftwareForUserDeviceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListTagsForPrivateAccessApplicationRequest : Tea.TeaModel {
    public var applicationIds: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.applicationIds != nil {
            map["ApplicationIds"] = self.applicationIds!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApplicationIds"] as? [String] {
            self.applicationIds = value
        }
    }
}

public class ListTagsForPrivateAccessApplicationResponseBody : Tea.TeaModel {
    public class Applications : Tea.TeaModel {
        public class Tags : Tea.TeaModel {
            public var createTime: String?

            public var description_: String?

            public var name: String?

            public var tagId: String?

            public var tagType: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.createTime != nil {
                    map["CreateTime"] = self.createTime!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.tagId != nil {
                    map["TagId"] = self.tagId!
                }
                if self.tagType != nil {
                    map["TagType"] = self.tagType!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CreateTime"] as? String {
                    self.createTime = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["TagId"] as? String {
                    self.tagId = value
                }
                if let value = dict["TagType"] as? String {
                    self.tagType = value
                }
            }
        }
        public var applicationId: String?

        public var tags: [ListTagsForPrivateAccessApplicationResponseBody.Applications.Tags]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.applicationId != nil {
                map["ApplicationId"] = self.applicationId!
            }
            if self.tags != nil {
                var tmp : [Any] = []
                for k in self.tags! {
                    tmp.append(k.toMap())
                }
                map["Tags"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ApplicationId"] as? String {
                self.applicationId = value
            }
            if let value = dict["Tags"] as? [Any?] {
                var tmp : [ListTagsForPrivateAccessApplicationResponseBody.Applications.Tags] = []
                for v in value {
                    if v != nil {
                        var model = ListTagsForPrivateAccessApplicationResponseBody.Applications.Tags()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.tags = tmp
            }
        }
    }
    public var applications: [ListTagsForPrivateAccessApplicationResponseBody.Applications]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.applications != nil {
            var tmp : [Any] = []
            for k in self.applications! {
                tmp.append(k.toMap())
            }
            map["Applications"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Applications"] as? [Any?] {
            var tmp : [ListTagsForPrivateAccessApplicationResponseBody.Applications] = []
            for v in value {
                if v != nil {
                    var model = ListTagsForPrivateAccessApplicationResponseBody.Applications()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.applications = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListTagsForPrivateAccessApplicationResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListTagsForPrivateAccessApplicationResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListTagsForPrivateAccessApplicationResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListTagsForPrivateAccessPolicyRequest : Tea.TeaModel {
    public var policyIds: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.policyIds != nil {
            map["PolicyIds"] = self.policyIds!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PolicyIds"] as? [String] {
            self.policyIds = value
        }
    }
}

public class ListTagsForPrivateAccessPolicyResponseBody : Tea.TeaModel {
    public class Polices : Tea.TeaModel {
        public class Tags : Tea.TeaModel {
            public var createTime: String?

            public var description_: String?

            public var name: String?

            public var tagId: String?

            public var tagType: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.createTime != nil {
                    map["CreateTime"] = self.createTime!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.tagId != nil {
                    map["TagId"] = self.tagId!
                }
                if self.tagType != nil {
                    map["TagType"] = self.tagType!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CreateTime"] as? String {
                    self.createTime = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["TagId"] as? String {
                    self.tagId = value
                }
                if let value = dict["TagType"] as? String {
                    self.tagType = value
                }
            }
        }
        public var policyId: String?

        public var tags: [ListTagsForPrivateAccessPolicyResponseBody.Polices.Tags]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.policyId != nil {
                map["PolicyId"] = self.policyId!
            }
            if self.tags != nil {
                var tmp : [Any] = []
                for k in self.tags! {
                    tmp.append(k.toMap())
                }
                map["Tags"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["PolicyId"] as? String {
                self.policyId = value
            }
            if let value = dict["Tags"] as? [Any?] {
                var tmp : [ListTagsForPrivateAccessPolicyResponseBody.Polices.Tags] = []
                for v in value {
                    if v != nil {
                        var model = ListTagsForPrivateAccessPolicyResponseBody.Polices.Tags()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.tags = tmp
            }
        }
    }
    public var polices: [ListTagsForPrivateAccessPolicyResponseBody.Polices]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.polices != nil {
            var tmp : [Any] = []
            for k in self.polices! {
                tmp.append(k.toMap())
            }
            map["Polices"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Polices"] as? [Any?] {
            var tmp : [ListTagsForPrivateAccessPolicyResponseBody.Polices] = []
            for v in value {
                if v != nil {
                    var model = ListTagsForPrivateAccessPolicyResponseBody.Polices()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.polices = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListTagsForPrivateAccessPolicyResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListTagsForPrivateAccessPolicyResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListTagsForPrivateAccessPolicyResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListUninstallApplicationsRequest : Tea.TeaModel {
    public var applicationIds: [String]?

    public var currentPage: Int64?

    public var department: String?

    public var hostname: String?

    public var mac: String?

    public var pageSize: Int64?

    public var statuses: [String]?

    public var username: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.applicationIds != nil {
            map["ApplicationIds"] = self.applicationIds!
        }
        if self.currentPage != nil {
            map["CurrentPage"] = self.currentPage!
        }
        if self.department != nil {
            map["Department"] = self.department!
        }
        if self.hostname != nil {
            map["Hostname"] = self.hostname!
        }
        if self.mac != nil {
            map["Mac"] = self.mac!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.statuses != nil {
            map["Statuses"] = self.statuses!
        }
        if self.username != nil {
            map["Username"] = self.username!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApplicationIds"] as? [String] {
            self.applicationIds = value
        }
        if let value = dict["CurrentPage"] as? Int64 {
            self.currentPage = value
        }
        if let value = dict["Department"] as? String {
            self.department = value
        }
        if let value = dict["Hostname"] as? String {
            self.hostname = value
        }
        if let value = dict["Mac"] as? String {
            self.mac = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["Statuses"] as? [String] {
            self.statuses = value
        }
        if let value = dict["Username"] as? String {
            self.username = value
        }
    }
}

public class ListUninstallApplicationsResponseBody : Tea.TeaModel {
    public class Applications : Tea.TeaModel {
        public var applicationId: String?

        public var createTime: String?

        public var department: String?

        public var devTag: String?

        public var devType: String?

        public var hostname: String?

        public var idpName: String?

        public var isUninstall: Bool?

        public var mac: String?

        public var reason: String?

        public var saseUserId: String?

        public var status: String?

        public var username: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.applicationId != nil {
                map["ApplicationId"] = self.applicationId!
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.department != nil {
                map["Department"] = self.department!
            }
            if self.devTag != nil {
                map["DevTag"] = self.devTag!
            }
            if self.devType != nil {
                map["DevType"] = self.devType!
            }
            if self.hostname != nil {
                map["Hostname"] = self.hostname!
            }
            if self.idpName != nil {
                map["IdpName"] = self.idpName!
            }
            if self.isUninstall != nil {
                map["IsUninstall"] = self.isUninstall!
            }
            if self.mac != nil {
                map["Mac"] = self.mac!
            }
            if self.reason != nil {
                map["Reason"] = self.reason!
            }
            if self.saseUserId != nil {
                map["SaseUserId"] = self.saseUserId!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.username != nil {
                map["Username"] = self.username!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ApplicationId"] as? String {
                self.applicationId = value
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["Department"] as? String {
                self.department = value
            }
            if let value = dict["DevTag"] as? String {
                self.devTag = value
            }
            if let value = dict["DevType"] as? String {
                self.devType = value
            }
            if let value = dict["Hostname"] as? String {
                self.hostname = value
            }
            if let value = dict["IdpName"] as? String {
                self.idpName = value
            }
            if let value = dict["IsUninstall"] as? Bool {
                self.isUninstall = value
            }
            if let value = dict["Mac"] as? String {
                self.mac = value
            }
            if let value = dict["Reason"] as? String {
                self.reason = value
            }
            if let value = dict["SaseUserId"] as? String {
                self.saseUserId = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["Username"] as? String {
                self.username = value
            }
        }
    }
    public var applications: [ListUninstallApplicationsResponseBody.Applications]?

    public var requestId: String?

    public var totalNum: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.applications != nil {
            var tmp : [Any] = []
            for k in self.applications! {
                tmp.append(k.toMap())
            }
            map["Applications"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalNum != nil {
            map["TotalNum"] = self.totalNum!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Applications"] as? [Any?] {
            var tmp : [ListUninstallApplicationsResponseBody.Applications] = []
            for v in value {
                if v != nil {
                    var model = ListUninstallApplicationsResponseBody.Applications()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.applications = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalNum"] as? Int64 {
            self.totalNum = value
        }
    }
}

public class ListUninstallApplicationsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListUninstallApplicationsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListUninstallApplicationsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListUserApplicationsRequest : Tea.TeaModel {
    public var currentPage: Int32?

    public var name: String?

    public var pageSize: Int32?

    public var saseUserId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.currentPage != nil {
            map["CurrentPage"] = self.currentPage!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.saseUserId != nil {
            map["SaseUserId"] = self.saseUserId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CurrentPage"] as? Int32 {
            self.currentPage = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["SaseUserId"] as? String {
            self.saseUserId = value
        }
    }
}

public class ListUserApplicationsResponseBody : Tea.TeaModel {
    public class Applications : Tea.TeaModel {
        public class PortRanges : Tea.TeaModel {
            public var begin: String?

            public var end: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.begin != nil {
                    map["Begin"] = self.begin!
                }
                if self.end != nil {
                    map["End"] = self.end!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Begin"] as? String {
                    self.begin = value
                }
                if let value = dict["End"] as? String {
                    self.end = value
                }
            }
        }
        public var action: String?

        public var addresses: [String]?

        public var applicationId: String?

        public var name: String?

        public var portRanges: [ListUserApplicationsResponseBody.Applications.PortRanges]?

        public var protocol_: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.action != nil {
                map["Action"] = self.action!
            }
            if self.addresses != nil {
                map["Addresses"] = self.addresses!
            }
            if self.applicationId != nil {
                map["ApplicationId"] = self.applicationId!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.portRanges != nil {
                var tmp : [Any] = []
                for k in self.portRanges! {
                    tmp.append(k.toMap())
                }
                map["PortRanges"] = tmp
            }
            if self.protocol_ != nil {
                map["Protocol"] = self.protocol_!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Action"] as? String {
                self.action = value
            }
            if let value = dict["Addresses"] as? [String] {
                self.addresses = value
            }
            if let value = dict["ApplicationId"] as? String {
                self.applicationId = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["PortRanges"] as? [Any?] {
                var tmp : [ListUserApplicationsResponseBody.Applications.PortRanges] = []
                for v in value {
                    if v != nil {
                        var model = ListUserApplicationsResponseBody.Applications.PortRanges()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.portRanges = tmp
            }
            if let value = dict["Protocol"] as? String {
                self.protocol_ = value
            }
        }
    }
    public var applications: [ListUserApplicationsResponseBody.Applications]?

    public var requestId: String?

    public var totalNum: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.applications != nil {
            var tmp : [Any] = []
            for k in self.applications! {
                tmp.append(k.toMap())
            }
            map["Applications"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalNum != nil {
            map["TotalNum"] = self.totalNum!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Applications"] as? [Any?] {
            var tmp : [ListUserApplicationsResponseBody.Applications] = []
            for v in value {
                if v != nil {
                    var model = ListUserApplicationsResponseBody.Applications()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.applications = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalNum"] as? Int32 {
            self.totalNum = value
        }
    }
}

public class ListUserApplicationsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListUserApplicationsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListUserApplicationsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListUserDevicesRequest : Tea.TeaModel {
    public var appStatuses: [String]?

    public var appVersions: [String]?

    public var currentPage: Int64?

    public var department: String?

    public var deviceBelong: String?

    public var deviceGroupId: String?

    public var deviceStatuses: [String]?

    public var deviceTags: [String]?

    public var deviceTypes: [String]?

    public var dlpStatuses: [String]?

    public var hostname: String?

    public var iaStatuses: [String]?

    public var innerIp: String?

    public var mac: String?

    public var nacStatuses: [String]?

    public var paStatuses: [String]?

    public var pageSize: Int64?

    public var saseUserId: String?

    public var sharingStatus: Bool?

    public var snSystem: String?

    public var sortBy: String?

    public var username: String?

    public var workshop: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appStatuses != nil {
            map["AppStatuses"] = self.appStatuses!
        }
        if self.appVersions != nil {
            map["AppVersions"] = self.appVersions!
        }
        if self.currentPage != nil {
            map["CurrentPage"] = self.currentPage!
        }
        if self.department != nil {
            map["Department"] = self.department!
        }
        if self.deviceBelong != nil {
            map["DeviceBelong"] = self.deviceBelong!
        }
        if self.deviceGroupId != nil {
            map["DeviceGroupId"] = self.deviceGroupId!
        }
        if self.deviceStatuses != nil {
            map["DeviceStatuses"] = self.deviceStatuses!
        }
        if self.deviceTags != nil {
            map["DeviceTags"] = self.deviceTags!
        }
        if self.deviceTypes != nil {
            map["DeviceTypes"] = self.deviceTypes!
        }
        if self.dlpStatuses != nil {
            map["DlpStatuses"] = self.dlpStatuses!
        }
        if self.hostname != nil {
            map["Hostname"] = self.hostname!
        }
        if self.iaStatuses != nil {
            map["IaStatuses"] = self.iaStatuses!
        }
        if self.innerIp != nil {
            map["InnerIp"] = self.innerIp!
        }
        if self.mac != nil {
            map["Mac"] = self.mac!
        }
        if self.nacStatuses != nil {
            map["NacStatuses"] = self.nacStatuses!
        }
        if self.paStatuses != nil {
            map["PaStatuses"] = self.paStatuses!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.saseUserId != nil {
            map["SaseUserId"] = self.saseUserId!
        }
        if self.sharingStatus != nil {
            map["SharingStatus"] = self.sharingStatus!
        }
        if self.snSystem != nil {
            map["SnSystem"] = self.snSystem!
        }
        if self.sortBy != nil {
            map["SortBy"] = self.sortBy!
        }
        if self.username != nil {
            map["Username"] = self.username!
        }
        if self.workshop != nil {
            map["Workshop"] = self.workshop!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppStatuses"] as? [String] {
            self.appStatuses = value
        }
        if let value = dict["AppVersions"] as? [String] {
            self.appVersions = value
        }
        if let value = dict["CurrentPage"] as? Int64 {
            self.currentPage = value
        }
        if let value = dict["Department"] as? String {
            self.department = value
        }
        if let value = dict["DeviceBelong"] as? String {
            self.deviceBelong = value
        }
        if let value = dict["DeviceGroupId"] as? String {
            self.deviceGroupId = value
        }
        if let value = dict["DeviceStatuses"] as? [String] {
            self.deviceStatuses = value
        }
        if let value = dict["DeviceTags"] as? [String] {
            self.deviceTags = value
        }
        if let value = dict["DeviceTypes"] as? [String] {
            self.deviceTypes = value
        }
        if let value = dict["DlpStatuses"] as? [String] {
            self.dlpStatuses = value
        }
        if let value = dict["Hostname"] as? String {
            self.hostname = value
        }
        if let value = dict["IaStatuses"] as? [String] {
            self.iaStatuses = value
        }
        if let value = dict["InnerIp"] as? String {
            self.innerIp = value
        }
        if let value = dict["Mac"] as? String {
            self.mac = value
        }
        if let value = dict["NacStatuses"] as? [String] {
            self.nacStatuses = value
        }
        if let value = dict["PaStatuses"] as? [String] {
            self.paStatuses = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["SaseUserId"] as? String {
            self.saseUserId = value
        }
        if let value = dict["SharingStatus"] as? Bool {
            self.sharingStatus = value
        }
        if let value = dict["SnSystem"] as? String {
            self.snSystem = value
        }
        if let value = dict["SortBy"] as? String {
            self.sortBy = value
        }
        if let value = dict["Username"] as? String {
            self.username = value
        }
        if let value = dict["Workshop"] as? String {
            self.workshop = value
        }
    }
}

public class ListUserDevicesResponseBody : Tea.TeaModel {
    public class Devices : Tea.TeaModel {
        public class NetInterfaceInfo : Tea.TeaModel {
            public var mac: String?

            public var name: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.mac != nil {
                    map["Mac"] = self.mac!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Mac"] as? String {
                    self.mac = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
            }
        }
        public var appStatus: String?

        public var appVersion: String?

        public var CPU: String?

        public var createTime: String?

        public var department: String?

        public var deviceBelong: String?

        public var deviceModel: String?

        public var deviceStatus: String?

        public var deviceTag: String?

        public var deviceType: String?

        public var deviceVersion: String?

        public var disk: String?

        public var dlpStatus: String?

        public var edrStatus: String?

        public var hostname: String?

        public var iaStatus: String?

        public var innerIP: String?

        public var mac: String?

        public var matchDeviceGroupIds: [String]?

        public var memory: String?

        public var nacStatus: String?

        public var netInterfaceInfo: [ListUserDevicesResponseBody.Devices.NetInterfaceInfo]?

        public var paStatus: String?

        public var saseUserId: String?

        public var sharingStatus: Bool?

        public var snBaseBoard: String?

        public var snBios: String?

        public var snDiskDrive: String?

        public var snProcessor: String?

        public var snSystem: String?

        public var srcIP: String?

        public var updateTime: String?

        public var username: String?

        public var workshop: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.appStatus != nil {
                map["AppStatus"] = self.appStatus!
            }
            if self.appVersion != nil {
                map["AppVersion"] = self.appVersion!
            }
            if self.CPU != nil {
                map["CPU"] = self.CPU!
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.department != nil {
                map["Department"] = self.department!
            }
            if self.deviceBelong != nil {
                map["DeviceBelong"] = self.deviceBelong!
            }
            if self.deviceModel != nil {
                map["DeviceModel"] = self.deviceModel!
            }
            if self.deviceStatus != nil {
                map["DeviceStatus"] = self.deviceStatus!
            }
            if self.deviceTag != nil {
                map["DeviceTag"] = self.deviceTag!
            }
            if self.deviceType != nil {
                map["DeviceType"] = self.deviceType!
            }
            if self.deviceVersion != nil {
                map["DeviceVersion"] = self.deviceVersion!
            }
            if self.disk != nil {
                map["Disk"] = self.disk!
            }
            if self.dlpStatus != nil {
                map["DlpStatus"] = self.dlpStatus!
            }
            if self.edrStatus != nil {
                map["EdrStatus"] = self.edrStatus!
            }
            if self.hostname != nil {
                map["Hostname"] = self.hostname!
            }
            if self.iaStatus != nil {
                map["IaStatus"] = self.iaStatus!
            }
            if self.innerIP != nil {
                map["InnerIP"] = self.innerIP!
            }
            if self.mac != nil {
                map["Mac"] = self.mac!
            }
            if self.matchDeviceGroupIds != nil {
                map["MatchDeviceGroupIds"] = self.matchDeviceGroupIds!
            }
            if self.memory != nil {
                map["Memory"] = self.memory!
            }
            if self.nacStatus != nil {
                map["NacStatus"] = self.nacStatus!
            }
            if self.netInterfaceInfo != nil {
                var tmp : [Any] = []
                for k in self.netInterfaceInfo! {
                    tmp.append(k.toMap())
                }
                map["NetInterfaceInfo"] = tmp
            }
            if self.paStatus != nil {
                map["PaStatus"] = self.paStatus!
            }
            if self.saseUserId != nil {
                map["SaseUserId"] = self.saseUserId!
            }
            if self.sharingStatus != nil {
                map["SharingStatus"] = self.sharingStatus!
            }
            if self.snBaseBoard != nil {
                map["SnBaseBoard"] = self.snBaseBoard!
            }
            if self.snBios != nil {
                map["SnBios"] = self.snBios!
            }
            if self.snDiskDrive != nil {
                map["SnDiskDrive"] = self.snDiskDrive!
            }
            if self.snProcessor != nil {
                map["SnProcessor"] = self.snProcessor!
            }
            if self.snSystem != nil {
                map["SnSystem"] = self.snSystem!
            }
            if self.srcIP != nil {
                map["SrcIP"] = self.srcIP!
            }
            if self.updateTime != nil {
                map["UpdateTime"] = self.updateTime!
            }
            if self.username != nil {
                map["Username"] = self.username!
            }
            if self.workshop != nil {
                map["Workshop"] = self.workshop!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AppStatus"] as? String {
                self.appStatus = value
            }
            if let value = dict["AppVersion"] as? String {
                self.appVersion = value
            }
            if let value = dict["CPU"] as? String {
                self.CPU = value
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["Department"] as? String {
                self.department = value
            }
            if let value = dict["DeviceBelong"] as? String {
                self.deviceBelong = value
            }
            if let value = dict["DeviceModel"] as? String {
                self.deviceModel = value
            }
            if let value = dict["DeviceStatus"] as? String {
                self.deviceStatus = value
            }
            if let value = dict["DeviceTag"] as? String {
                self.deviceTag = value
            }
            if let value = dict["DeviceType"] as? String {
                self.deviceType = value
            }
            if let value = dict["DeviceVersion"] as? String {
                self.deviceVersion = value
            }
            if let value = dict["Disk"] as? String {
                self.disk = value
            }
            if let value = dict["DlpStatus"] as? String {
                self.dlpStatus = value
            }
            if let value = dict["EdrStatus"] as? String {
                self.edrStatus = value
            }
            if let value = dict["Hostname"] as? String {
                self.hostname = value
            }
            if let value = dict["IaStatus"] as? String {
                self.iaStatus = value
            }
            if let value = dict["InnerIP"] as? String {
                self.innerIP = value
            }
            if let value = dict["Mac"] as? String {
                self.mac = value
            }
            if let value = dict["MatchDeviceGroupIds"] as? [String] {
                self.matchDeviceGroupIds = value
            }
            if let value = dict["Memory"] as? String {
                self.memory = value
            }
            if let value = dict["NacStatus"] as? String {
                self.nacStatus = value
            }
            if let value = dict["NetInterfaceInfo"] as? [Any?] {
                var tmp : [ListUserDevicesResponseBody.Devices.NetInterfaceInfo] = []
                for v in value {
                    if v != nil {
                        var model = ListUserDevicesResponseBody.Devices.NetInterfaceInfo()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.netInterfaceInfo = tmp
            }
            if let value = dict["PaStatus"] as? String {
                self.paStatus = value
            }
            if let value = dict["SaseUserId"] as? String {
                self.saseUserId = value
            }
            if let value = dict["SharingStatus"] as? Bool {
                self.sharingStatus = value
            }
            if let value = dict["SnBaseBoard"] as? String {
                self.snBaseBoard = value
            }
            if let value = dict["SnBios"] as? String {
                self.snBios = value
            }
            if let value = dict["SnDiskDrive"] as? String {
                self.snDiskDrive = value
            }
            if let value = dict["SnProcessor"] as? String {
                self.snProcessor = value
            }
            if let value = dict["SnSystem"] as? String {
                self.snSystem = value
            }
            if let value = dict["SrcIP"] as? String {
                self.srcIP = value
            }
            if let value = dict["UpdateTime"] as? String {
                self.updateTime = value
            }
            if let value = dict["Username"] as? String {
                self.username = value
            }
            if let value = dict["Workshop"] as? String {
                self.workshop = value
            }
        }
    }
    public var devices: [ListUserDevicesResponseBody.Devices]?

    public var requestId: String?

    public var totalNum: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.devices != nil {
            var tmp : [Any] = []
            for k in self.devices! {
                tmp.append(k.toMap())
            }
            map["Devices"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalNum != nil {
            map["TotalNum"] = self.totalNum!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Devices"] as? [Any?] {
            var tmp : [ListUserDevicesResponseBody.Devices] = []
            for v in value {
                if v != nil {
                    var model = ListUserDevicesResponseBody.Devices()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.devices = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalNum"] as? Int64 {
            self.totalNum = value
        }
    }
}

public class ListUserDevicesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListUserDevicesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListUserDevicesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListUserGroupsRequest : Tea.TeaModel {
    public var attributeValue: String?

    public var currentPage: Int32?

    public var name: String?

    public var PAPolicyId: String?

    public var pageSize: Int32?

    public var userGroupIds: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.attributeValue != nil {
            map["AttributeValue"] = self.attributeValue!
        }
        if self.currentPage != nil {
            map["CurrentPage"] = self.currentPage!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.PAPolicyId != nil {
            map["PAPolicyId"] = self.PAPolicyId!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.userGroupIds != nil {
            map["UserGroupIds"] = self.userGroupIds!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AttributeValue"] as? String {
            self.attributeValue = value
        }
        if let value = dict["CurrentPage"] as? Int32 {
            self.currentPage = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["PAPolicyId"] as? String {
            self.PAPolicyId = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["UserGroupIds"] as? [String] {
            self.userGroupIds = value
        }
    }
}

public class ListUserGroupsResponseBody : Tea.TeaModel {
    public class UserGroups : Tea.TeaModel {
        public class Attributes : Tea.TeaModel {
            public var idpId: Int32?

            public var relation: String?

            public var userGroupType: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.idpId != nil {
                    map["IdpId"] = self.idpId!
                }
                if self.relation != nil {
                    map["Relation"] = self.relation!
                }
                if self.userGroupType != nil {
                    map["UserGroupType"] = self.userGroupType!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["IdpId"] as? Int32 {
                    self.idpId = value
                }
                if let value = dict["Relation"] as? String {
                    self.relation = value
                }
                if let value = dict["UserGroupType"] as? String {
                    self.userGroupType = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public var attributes: [ListUserGroupsResponseBody.UserGroups.Attributes]?

        public var createTime: String?

        public var description_: String?

        public var name: String?

        public var userGroupId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.attributes != nil {
                var tmp : [Any] = []
                for k in self.attributes! {
                    tmp.append(k.toMap())
                }
                map["Attributes"] = tmp
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.userGroupId != nil {
                map["UserGroupId"] = self.userGroupId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Attributes"] as? [Any?] {
                var tmp : [ListUserGroupsResponseBody.UserGroups.Attributes] = []
                for v in value {
                    if v != nil {
                        var model = ListUserGroupsResponseBody.UserGroups.Attributes()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.attributes = tmp
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["UserGroupId"] as? String {
                self.userGroupId = value
            }
        }
    }
    public var requestId: String?

    public var totalNum: Int32?

    public var userGroups: [ListUserGroupsResponseBody.UserGroups]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalNum != nil {
            map["TotalNum"] = self.totalNum!
        }
        if self.userGroups != nil {
            var tmp : [Any] = []
            for k in self.userGroups! {
                tmp.append(k.toMap())
            }
            map["UserGroups"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalNum"] as? Int32 {
            self.totalNum = value
        }
        if let value = dict["UserGroups"] as? [Any?] {
            var tmp : [ListUserGroupsResponseBody.UserGroups] = []
            for v in value {
                if v != nil {
                    var model = ListUserGroupsResponseBody.UserGroups()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.userGroups = tmp
        }
    }
}

public class ListUserGroupsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListUserGroupsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListUserGroupsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListUserGroupsForPrivateAccessPolicyRequest : Tea.TeaModel {
    public var policyIds: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.policyIds != nil {
            map["PolicyIds"] = self.policyIds!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PolicyIds"] as? [String] {
            self.policyIds = value
        }
    }
}

public class ListUserGroupsForPrivateAccessPolicyResponseBody : Tea.TeaModel {
    public class Polices : Tea.TeaModel {
        public class UserGroups : Tea.TeaModel {
            public class Attributes : Tea.TeaModel {
                public var idpId: Int32?

                public var relation: String?

                public var userGroupType: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.idpId != nil {
                        map["IdpId"] = self.idpId!
                    }
                    if self.relation != nil {
                        map["Relation"] = self.relation!
                    }
                    if self.userGroupType != nil {
                        map["UserGroupType"] = self.userGroupType!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["IdpId"] as? Int32 {
                        self.idpId = value
                    }
                    if let value = dict["Relation"] as? String {
                        self.relation = value
                    }
                    if let value = dict["UserGroupType"] as? String {
                        self.userGroupType = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public var attributes: [ListUserGroupsForPrivateAccessPolicyResponseBody.Polices.UserGroups.Attributes]?

            public var createTime: String?

            public var description_: String?

            public var name: String?

            public var userGroupId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.attributes != nil {
                    var tmp : [Any] = []
                    for k in self.attributes! {
                        tmp.append(k.toMap())
                    }
                    map["Attributes"] = tmp
                }
                if self.createTime != nil {
                    map["CreateTime"] = self.createTime!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.userGroupId != nil {
                    map["UserGroupId"] = self.userGroupId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Attributes"] as? [Any?] {
                    var tmp : [ListUserGroupsForPrivateAccessPolicyResponseBody.Polices.UserGroups.Attributes] = []
                    for v in value {
                        if v != nil {
                            var model = ListUserGroupsForPrivateAccessPolicyResponseBody.Polices.UserGroups.Attributes()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.attributes = tmp
                }
                if let value = dict["CreateTime"] as? String {
                    self.createTime = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["UserGroupId"] as? String {
                    self.userGroupId = value
                }
            }
        }
        public var policyId: String?

        public var userGroups: [ListUserGroupsForPrivateAccessPolicyResponseBody.Polices.UserGroups]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.policyId != nil {
                map["PolicyId"] = self.policyId!
            }
            if self.userGroups != nil {
                var tmp : [Any] = []
                for k in self.userGroups! {
                    tmp.append(k.toMap())
                }
                map["UserGroups"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["PolicyId"] as? String {
                self.policyId = value
            }
            if let value = dict["UserGroups"] as? [Any?] {
                var tmp : [ListUserGroupsForPrivateAccessPolicyResponseBody.Polices.UserGroups] = []
                for v in value {
                    if v != nil {
                        var model = ListUserGroupsForPrivateAccessPolicyResponseBody.Polices.UserGroups()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.userGroups = tmp
            }
        }
    }
    public var polices: [ListUserGroupsForPrivateAccessPolicyResponseBody.Polices]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.polices != nil {
            var tmp : [Any] = []
            for k in self.polices! {
                tmp.append(k.toMap())
            }
            map["Polices"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Polices"] as? [Any?] {
            var tmp : [ListUserGroupsForPrivateAccessPolicyResponseBody.Polices] = []
            for v in value {
                if v != nil {
                    var model = ListUserGroupsForPrivateAccessPolicyResponseBody.Polices()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.polices = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListUserGroupsForPrivateAccessPolicyResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListUserGroupsForPrivateAccessPolicyResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListUserGroupsForPrivateAccessPolicyResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListUserGroupsForRegistrationPolicyRequest : Tea.TeaModel {
    public var policyIds: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.policyIds != nil {
            map["PolicyIds"] = self.policyIds!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PolicyIds"] as? [String] {
            self.policyIds = value
        }
    }
}

public class ListUserGroupsForRegistrationPolicyResponseBody : Tea.TeaModel {
    public class Policies : Tea.TeaModel {
        public class UserGroups : Tea.TeaModel {
            public class Attributes : Tea.TeaModel {
                public var idpId: Int32?

                public var relation: String?

                public var userGroupType: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.idpId != nil {
                        map["IdpId"] = self.idpId!
                    }
                    if self.relation != nil {
                        map["Relation"] = self.relation!
                    }
                    if self.userGroupType != nil {
                        map["UserGroupType"] = self.userGroupType!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["IdpId"] as? Int32 {
                        self.idpId = value
                    }
                    if let value = dict["Relation"] as? String {
                        self.relation = value
                    }
                    if let value = dict["UserGroupType"] as? String {
                        self.userGroupType = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public var attributes: [ListUserGroupsForRegistrationPolicyResponseBody.Policies.UserGroups.Attributes]?

            public var createTime: String?

            public var description_: String?

            public var name: String?

            public var userGroupId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.attributes != nil {
                    var tmp : [Any] = []
                    for k in self.attributes! {
                        tmp.append(k.toMap())
                    }
                    map["Attributes"] = tmp
                }
                if self.createTime != nil {
                    map["CreateTime"] = self.createTime!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.userGroupId != nil {
                    map["UserGroupId"] = self.userGroupId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Attributes"] as? [Any?] {
                    var tmp : [ListUserGroupsForRegistrationPolicyResponseBody.Policies.UserGroups.Attributes] = []
                    for v in value {
                        if v != nil {
                            var model = ListUserGroupsForRegistrationPolicyResponseBody.Policies.UserGroups.Attributes()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.attributes = tmp
                }
                if let value = dict["CreateTime"] as? String {
                    self.createTime = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["UserGroupId"] as? String {
                    self.userGroupId = value
                }
            }
        }
        public var policyId: String?

        public var userGroups: [ListUserGroupsForRegistrationPolicyResponseBody.Policies.UserGroups]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.policyId != nil {
                map["PolicyId"] = self.policyId!
            }
            if self.userGroups != nil {
                var tmp : [Any] = []
                for k in self.userGroups! {
                    tmp.append(k.toMap())
                }
                map["UserGroups"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["PolicyId"] as? String {
                self.policyId = value
            }
            if let value = dict["UserGroups"] as? [Any?] {
                var tmp : [ListUserGroupsForRegistrationPolicyResponseBody.Policies.UserGroups] = []
                for v in value {
                    if v != nil {
                        var model = ListUserGroupsForRegistrationPolicyResponseBody.Policies.UserGroups()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.userGroups = tmp
            }
        }
    }
    public var policies: [ListUserGroupsForRegistrationPolicyResponseBody.Policies]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.policies != nil {
            var tmp : [Any] = []
            for k in self.policies! {
                tmp.append(k.toMap())
            }
            map["Policies"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Policies"] as? [Any?] {
            var tmp : [ListUserGroupsForRegistrationPolicyResponseBody.Policies] = []
            for v in value {
                if v != nil {
                    var model = ListUserGroupsForRegistrationPolicyResponseBody.Policies()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.policies = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListUserGroupsForRegistrationPolicyResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListUserGroupsForRegistrationPolicyResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListUserGroupsForRegistrationPolicyResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListUserPrivateAccessPoliciesRequest : Tea.TeaModel {
    public var currentPage: Int32?

    public var name: String?

    public var pageSize: Int32?

    public var saseUserId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.currentPage != nil {
            map["CurrentPage"] = self.currentPage!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.saseUserId != nil {
            map["SaseUserId"] = self.saseUserId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CurrentPage"] as? Int32 {
            self.currentPage = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["SaseUserId"] as? String {
            self.saseUserId = value
        }
    }
}

public class ListUserPrivateAccessPoliciesResponseBody : Tea.TeaModel {
    public class Polices : Tea.TeaModel {
        public class CustomUserAttributes : Tea.TeaModel {
            public var idpId: Int32?

            public var relation: String?

            public var userGroupType: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.idpId != nil {
                    map["IdpId"] = self.idpId!
                }
                if self.relation != nil {
                    map["Relation"] = self.relation!
                }
                if self.userGroupType != nil {
                    map["UserGroupType"] = self.userGroupType!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["IdpId"] as? Int32 {
                    self.idpId = value
                }
                if let value = dict["Relation"] as? String {
                    self.relation = value
                }
                if let value = dict["UserGroupType"] as? String {
                    self.userGroupType = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public var customUserAttributes: [ListUserPrivateAccessPoliciesResponseBody.Polices.CustomUserAttributes]?

        public var deviceAttributeName: String?

        public var matchedUserGroup: String?

        public var name: String?

        public var policyAction: String?

        public var policyId: String?

        public var priority: Int64?

        public var trustedProcessGroupIds: [String]?

        public var trustedSoftwareIds: [String]?

        public var userGroupMode: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.customUserAttributes != nil {
                var tmp : [Any] = []
                for k in self.customUserAttributes! {
                    tmp.append(k.toMap())
                }
                map["CustomUserAttributes"] = tmp
            }
            if self.deviceAttributeName != nil {
                map["DeviceAttributeName"] = self.deviceAttributeName!
            }
            if self.matchedUserGroup != nil {
                map["MatchedUserGroup"] = self.matchedUserGroup!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.policyAction != nil {
                map["PolicyAction"] = self.policyAction!
            }
            if self.policyId != nil {
                map["PolicyId"] = self.policyId!
            }
            if self.priority != nil {
                map["Priority"] = self.priority!
            }
            if self.trustedProcessGroupIds != nil {
                map["TrustedProcessGroupIds"] = self.trustedProcessGroupIds!
            }
            if self.trustedSoftwareIds != nil {
                map["TrustedSoftwareIds"] = self.trustedSoftwareIds!
            }
            if self.userGroupMode != nil {
                map["UserGroupMode"] = self.userGroupMode!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CustomUserAttributes"] as? [Any?] {
                var tmp : [ListUserPrivateAccessPoliciesResponseBody.Polices.CustomUserAttributes] = []
                for v in value {
                    if v != nil {
                        var model = ListUserPrivateAccessPoliciesResponseBody.Polices.CustomUserAttributes()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.customUserAttributes = tmp
            }
            if let value = dict["DeviceAttributeName"] as? String {
                self.deviceAttributeName = value
            }
            if let value = dict["MatchedUserGroup"] as? String {
                self.matchedUserGroup = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["PolicyAction"] as? String {
                self.policyAction = value
            }
            if let value = dict["PolicyId"] as? String {
                self.policyId = value
            }
            if let value = dict["Priority"] as? Int64 {
                self.priority = value
            }
            if let value = dict["TrustedProcessGroupIds"] as? [String] {
                self.trustedProcessGroupIds = value
            }
            if let value = dict["TrustedSoftwareIds"] as? [String] {
                self.trustedSoftwareIds = value
            }
            if let value = dict["UserGroupMode"] as? String {
                self.userGroupMode = value
            }
        }
    }
    public var polices: [ListUserPrivateAccessPoliciesResponseBody.Polices]?

    public var requestId: String?

    public var totalNum: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.polices != nil {
            var tmp : [Any] = []
            for k in self.polices! {
                tmp.append(k.toMap())
            }
            map["Polices"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalNum != nil {
            map["TotalNum"] = self.totalNum!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Polices"] as? [Any?] {
            var tmp : [ListUserPrivateAccessPoliciesResponseBody.Polices] = []
            for v in value {
                if v != nil {
                    var model = ListUserPrivateAccessPoliciesResponseBody.Polices()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.polices = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalNum"] as? Int32 {
            self.totalNum = value
        }
    }
}

public class ListUserPrivateAccessPoliciesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListUserPrivateAccessPoliciesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListUserPrivateAccessPoliciesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListUsersRequest : Tea.TeaModel {
    public var currentPage: Int64?

    public var department: String?

    public var fuzzyUsername: String?

    public var pageSize: Int64?

    public var preciseUsername: String?

    public var saseUserIds: [String]?

    public var status: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.currentPage != nil {
            map["CurrentPage"] = self.currentPage!
        }
        if self.department != nil {
            map["Department"] = self.department!
        }
        if self.fuzzyUsername != nil {
            map["FuzzyUsername"] = self.fuzzyUsername!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.preciseUsername != nil {
            map["PreciseUsername"] = self.preciseUsername!
        }
        if self.saseUserIds != nil {
            map["SaseUserIds"] = self.saseUserIds!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CurrentPage"] as? Int64 {
            self.currentPage = value
        }
        if let value = dict["Department"] as? String {
            self.department = value
        }
        if let value = dict["FuzzyUsername"] as? String {
            self.fuzzyUsername = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["PreciseUsername"] as? String {
            self.preciseUsername = value
        }
        if let value = dict["SaseUserIds"] as? [String] {
            self.saseUserIds = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
    }
}

public class ListUsersResponseBody : Tea.TeaModel {
    public class Users : Tea.TeaModel {
        public var department: String?

        public var email: String?

        public var idpName: String?

        public var phone: String?

        public var saseUserId: String?

        public var status: String?

        public var username: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.department != nil {
                map["Department"] = self.department!
            }
            if self.email != nil {
                map["Email"] = self.email!
            }
            if self.idpName != nil {
                map["IdpName"] = self.idpName!
            }
            if self.phone != nil {
                map["Phone"] = self.phone!
            }
            if self.saseUserId != nil {
                map["SaseUserId"] = self.saseUserId!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.username != nil {
                map["Username"] = self.username!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Department"] as? String {
                self.department = value
            }
            if let value = dict["Email"] as? String {
                self.email = value
            }
            if let value = dict["IdpName"] as? String {
                self.idpName = value
            }
            if let value = dict["Phone"] as? String {
                self.phone = value
            }
            if let value = dict["SaseUserId"] as? String {
                self.saseUserId = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["Username"] as? String {
                self.username = value
            }
        }
    }
    public var requestId: String?

    public var totalNum: String?

    public var users: [ListUsersResponseBody.Users]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalNum != nil {
            map["TotalNum"] = self.totalNum!
        }
        if self.users != nil {
            var tmp : [Any] = []
            for k in self.users! {
                tmp.append(k.toMap())
            }
            map["Users"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalNum"] as? String {
            self.totalNum = value
        }
        if let value = dict["Users"] as? [Any?] {
            var tmp : [ListUsersResponseBody.Users] = []
            for v in value {
                if v != nil {
                    var model = ListUsersResponseBody.Users()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.users = tmp
        }
    }
}

public class ListUsersResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListUsersResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListUsersResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class LookupWmInfoMappingRequest : Tea.TeaModel {
    public var wmInfoSize: Int64?

    public var wmInfoUint: String?

    public var wmType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.wmInfoSize != nil {
            map["WmInfoSize"] = self.wmInfoSize!
        }
        if self.wmInfoUint != nil {
            map["WmInfoUint"] = self.wmInfoUint!
        }
        if self.wmType != nil {
            map["WmType"] = self.wmType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["WmInfoSize"] as? Int64 {
            self.wmInfoSize = value
        }
        if let value = dict["WmInfoUint"] as? String {
            self.wmInfoUint = value
        }
        if let value = dict["WmType"] as? String {
            self.wmType = value
        }
    }
}

public class LookupWmInfoMappingResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var wmInfoBytesB64: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.wmInfoBytesB64 != nil {
                map["WmInfoBytesB64"] = self.wmInfoBytesB64!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["WmInfoBytesB64"] as? String {
                self.wmInfoBytesB64 = value
            }
        }
    }
    public var data: LookupWmInfoMappingResponseBody.Data?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Data"] as? [String: Any?] {
            var model = LookupWmInfoMappingResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class LookupWmInfoMappingResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: LookupWmInfoMappingResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = LookupWmInfoMappingResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyEnterpriseAcceleratePolicyRequest : Tea.TeaModel {
    public var accelerationType: String?

    public var description_: String?

    public var eapId: String?

    public var name: String?

    public var onTls: Int32?

    public var priority: Int32?

    public var showInClient: Int32?

    public var upstreamHost: String?

    public var upstreamPort: Int32?

    public var upstreamType: String?

    public var userAttributeGroup: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.accelerationType != nil {
            map["AccelerationType"] = self.accelerationType!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.eapId != nil {
            map["EapId"] = self.eapId!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.onTls != nil {
            map["OnTls"] = self.onTls!
        }
        if self.priority != nil {
            map["Priority"] = self.priority!
        }
        if self.showInClient != nil {
            map["ShowInClient"] = self.showInClient!
        }
        if self.upstreamHost != nil {
            map["UpstreamHost"] = self.upstreamHost!
        }
        if self.upstreamPort != nil {
            map["UpstreamPort"] = self.upstreamPort!
        }
        if self.upstreamType != nil {
            map["UpstreamType"] = self.upstreamType!
        }
        if self.userAttributeGroup != nil {
            map["UserAttributeGroup"] = self.userAttributeGroup!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AccelerationType"] as? String {
            self.accelerationType = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["EapId"] as? String {
            self.eapId = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["OnTls"] as? Int32 {
            self.onTls = value
        }
        if let value = dict["Priority"] as? Int32 {
            self.priority = value
        }
        if let value = dict["ShowInClient"] as? Int32 {
            self.showInClient = value
        }
        if let value = dict["UpstreamHost"] as? String {
            self.upstreamHost = value
        }
        if let value = dict["UpstreamPort"] as? Int32 {
            self.upstreamPort = value
        }
        if let value = dict["UpstreamType"] as? String {
            self.upstreamType = value
        }
        if let value = dict["UserAttributeGroup"] as? String {
            self.userAttributeGroup = value
        }
    }
}

public class ModifyEnterpriseAcceleratePolicyResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyEnterpriseAcceleratePolicyResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyEnterpriseAcceleratePolicyResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyEnterpriseAcceleratePolicyResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RevokeUserSessionRequest : Tea.TeaModel {
    public var externalIds: String?

    public var idpId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.externalIds != nil {
            map["ExternalIds"] = self.externalIds!
        }
        if self.idpId != nil {
            map["IdpId"] = self.idpId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ExternalIds"] as? String {
            self.externalIds = value
        }
        if let value = dict["IdpId"] as? String {
            self.idpId = value
        }
    }
}

public class RevokeUserSessionResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class RevokeUserSessionResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RevokeUserSessionResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RevokeUserSessionResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateApprovalProcessRequest : Tea.TeaModel {
    public class MatchSchemas : Tea.TeaModel {
        public var appUninstallSchemaId: String?

        public var deviceRegistrationSchemaId: String?

        public var dlpSendSchemaId: String?

        public var domainBlacklistSchemaId: String?

        public var domainWhitelistSchemaId: String?

        public var endpointHardeningSchemaId: String?

        public var peripheralBlockSchemaId: String?

        public var softwareBlockSchemaId: String?

        public var softwareHardeningSchemaId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.appUninstallSchemaId != nil {
                map["AppUninstallSchemaId"] = self.appUninstallSchemaId!
            }
            if self.deviceRegistrationSchemaId != nil {
                map["DeviceRegistrationSchemaId"] = self.deviceRegistrationSchemaId!
            }
            if self.dlpSendSchemaId != nil {
                map["DlpSendSchemaId"] = self.dlpSendSchemaId!
            }
            if self.domainBlacklistSchemaId != nil {
                map["DomainBlacklistSchemaId"] = self.domainBlacklistSchemaId!
            }
            if self.domainWhitelistSchemaId != nil {
                map["DomainWhitelistSchemaId"] = self.domainWhitelistSchemaId!
            }
            if self.endpointHardeningSchemaId != nil {
                map["EndpointHardeningSchemaId"] = self.endpointHardeningSchemaId!
            }
            if self.peripheralBlockSchemaId != nil {
                map["PeripheralBlockSchemaId"] = self.peripheralBlockSchemaId!
            }
            if self.softwareBlockSchemaId != nil {
                map["SoftwareBlockSchemaId"] = self.softwareBlockSchemaId!
            }
            if self.softwareHardeningSchemaId != nil {
                map["SoftwareHardeningSchemaId"] = self.softwareHardeningSchemaId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AppUninstallSchemaId"] as? String {
                self.appUninstallSchemaId = value
            }
            if let value = dict["DeviceRegistrationSchemaId"] as? String {
                self.deviceRegistrationSchemaId = value
            }
            if let value = dict["DlpSendSchemaId"] as? String {
                self.dlpSendSchemaId = value
            }
            if let value = dict["DomainBlacklistSchemaId"] as? String {
                self.domainBlacklistSchemaId = value
            }
            if let value = dict["DomainWhitelistSchemaId"] as? String {
                self.domainWhitelistSchemaId = value
            }
            if let value = dict["EndpointHardeningSchemaId"] as? String {
                self.endpointHardeningSchemaId = value
            }
            if let value = dict["PeripheralBlockSchemaId"] as? String {
                self.peripheralBlockSchemaId = value
            }
            if let value = dict["SoftwareBlockSchemaId"] as? String {
                self.softwareBlockSchemaId = value
            }
            if let value = dict["SoftwareHardeningSchemaId"] as? String {
                self.softwareHardeningSchemaId = value
            }
        }
    }
    public var description_: String?

    public var matchSchemas: UpdateApprovalProcessRequest.MatchSchemas?

    public var processId: String?

    public var processName: String?

    public var processNodes: [[String]]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.matchSchemas?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.matchSchemas != nil {
            map["MatchSchemas"] = self.matchSchemas?.toMap()
        }
        if self.processId != nil {
            map["ProcessId"] = self.processId!
        }
        if self.processName != nil {
            map["ProcessName"] = self.processName!
        }
        if self.processNodes != nil {
            map["ProcessNodes"] = self.processNodes!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["MatchSchemas"] as? [String: Any?] {
            var model = UpdateApprovalProcessRequest.MatchSchemas()
            model.fromMap(value)
            self.matchSchemas = model
        }
        if let value = dict["ProcessId"] as? String {
            self.processId = value
        }
        if let value = dict["ProcessName"] as? String {
            self.processName = value
        }
        if let value = dict["ProcessNodes"] as? [[String]] {
            self.processNodes = value
        }
    }
}

public class UpdateApprovalProcessShrinkRequest : Tea.TeaModel {
    public var description_: String?

    public var matchSchemasShrink: String?

    public var processId: String?

    public var processName: String?

    public var processNodes: [[String]]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.matchSchemasShrink != nil {
            map["MatchSchemas"] = self.matchSchemasShrink!
        }
        if self.processId != nil {
            map["ProcessId"] = self.processId!
        }
        if self.processName != nil {
            map["ProcessName"] = self.processName!
        }
        if self.processNodes != nil {
            map["ProcessNodes"] = self.processNodes!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["MatchSchemas"] as? String {
            self.matchSchemasShrink = value
        }
        if let value = dict["ProcessId"] as? String {
            self.processId = value
        }
        if let value = dict["ProcessName"] as? String {
            self.processName = value
        }
        if let value = dict["ProcessNodes"] as? [[String]] {
            self.processNodes = value
        }
    }
}

public class UpdateApprovalProcessResponseBody : Tea.TeaModel {
    public class Process : Tea.TeaModel {
        public class AppUninstallPolicies : Tea.TeaModel {
            public var policyIds: [String]?

            public var schemaId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.policyIds != nil {
                    map["PolicyIds"] = self.policyIds!
                }
                if self.schemaId != nil {
                    map["SchemaId"] = self.schemaId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["PolicyIds"] as? [String] {
                    self.policyIds = value
                }
                if let value = dict["SchemaId"] as? String {
                    self.schemaId = value
                }
            }
        }
        public class DeviceRegistrationPolicies : Tea.TeaModel {
            public var policyIds: [String]?

            public var schemaId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.policyIds != nil {
                    map["PolicyIds"] = self.policyIds!
                }
                if self.schemaId != nil {
                    map["SchemaId"] = self.schemaId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["PolicyIds"] as? [String] {
                    self.policyIds = value
                }
                if let value = dict["SchemaId"] as? String {
                    self.schemaId = value
                }
            }
        }
        public class DlpSendPolicies : Tea.TeaModel {
            public var policyIds: [String]?

            public var schemaId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.policyIds != nil {
                    map["PolicyIds"] = self.policyIds!
                }
                if self.schemaId != nil {
                    map["SchemaId"] = self.schemaId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["PolicyIds"] as? [String] {
                    self.policyIds = value
                }
                if let value = dict["SchemaId"] as? String {
                    self.schemaId = value
                }
            }
        }
        public class DomainBlacklistPolicies : Tea.TeaModel {
            public var policyIds: [String]?

            public var schemaId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.policyIds != nil {
                    map["PolicyIds"] = self.policyIds!
                }
                if self.schemaId != nil {
                    map["SchemaId"] = self.schemaId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["PolicyIds"] as? [String] {
                    self.policyIds = value
                }
                if let value = dict["SchemaId"] as? String {
                    self.schemaId = value
                }
            }
        }
        public class DomainWhitelistPolicies : Tea.TeaModel {
            public var policyIds: [String]?

            public var schemaId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.policyIds != nil {
                    map["PolicyIds"] = self.policyIds!
                }
                if self.schemaId != nil {
                    map["SchemaId"] = self.schemaId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["PolicyIds"] as? [String] {
                    self.policyIds = value
                }
                if let value = dict["SchemaId"] as? String {
                    self.schemaId = value
                }
            }
        }
        public class EndpointHardeningPolicies : Tea.TeaModel {
            public var policyIds: [String]?

            public var schemaId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.policyIds != nil {
                    map["PolicyIds"] = self.policyIds!
                }
                if self.schemaId != nil {
                    map["SchemaId"] = self.schemaId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["PolicyIds"] as? [String] {
                    self.policyIds = value
                }
                if let value = dict["SchemaId"] as? String {
                    self.schemaId = value
                }
            }
        }
        public class PeripheraBlockPolicies : Tea.TeaModel {
            public var policyIds: [String]?

            public var schemaId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.policyIds != nil {
                    map["PolicyIds"] = self.policyIds!
                }
                if self.schemaId != nil {
                    map["SchemaId"] = self.schemaId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["PolicyIds"] as? [String] {
                    self.policyIds = value
                }
                if let value = dict["SchemaId"] as? String {
                    self.schemaId = value
                }
            }
        }
        public class ProcessNodes : Tea.TeaModel {
            public var saseUserId: String?

            public var username: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.saseUserId != nil {
                    map["SaseUserId"] = self.saseUserId!
                }
                if self.username != nil {
                    map["Username"] = self.username!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["SaseUserId"] as? String {
                    self.saseUserId = value
                }
                if let value = dict["Username"] as? String {
                    self.username = value
                }
            }
        }
        public class SoftwareBlockPolicies : Tea.TeaModel {
            public var policyIds: [String]?

            public var schemaId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.policyIds != nil {
                    map["PolicyIds"] = self.policyIds!
                }
                if self.schemaId != nil {
                    map["SchemaId"] = self.schemaId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["PolicyIds"] as? [String] {
                    self.policyIds = value
                }
                if let value = dict["SchemaId"] as? String {
                    self.schemaId = value
                }
            }
        }
        public class SoftwareHardeningPolicies : Tea.TeaModel {
            public var policyIds: [String]?

            public var schemaId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.policyIds != nil {
                    map["PolicyIds"] = self.policyIds!
                }
                if self.schemaId != nil {
                    map["SchemaId"] = self.schemaId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["PolicyIds"] as? [String] {
                    self.policyIds = value
                }
                if let value = dict["SchemaId"] as? String {
                    self.schemaId = value
                }
            }
        }
        public var appUninstallPolicies: UpdateApprovalProcessResponseBody.Process.AppUninstallPolicies?

        public var createTime: String?

        public var description_: String?

        public var deviceRegistrationPolicies: UpdateApprovalProcessResponseBody.Process.DeviceRegistrationPolicies?

        public var dlpSendPolicies: UpdateApprovalProcessResponseBody.Process.DlpSendPolicies?

        public var domainBlacklistPolicies: UpdateApprovalProcessResponseBody.Process.DomainBlacklistPolicies?

        public var domainWhitelistPolicies: UpdateApprovalProcessResponseBody.Process.DomainWhitelistPolicies?

        public var endpointHardeningPolicies: UpdateApprovalProcessResponseBody.Process.EndpointHardeningPolicies?

        public var peripheraBlockPolicies: UpdateApprovalProcessResponseBody.Process.PeripheraBlockPolicies?

        public var processId: String?

        public var processName: String?

        public var processNodes: [[UpdateApprovalProcessResponseBody.Process.ProcessNodes]]?

        public var softwareBlockPolicies: UpdateApprovalProcessResponseBody.Process.SoftwareBlockPolicies?

        public var softwareHardeningPolicies: UpdateApprovalProcessResponseBody.Process.SoftwareHardeningPolicies?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.appUninstallPolicies?.validate()
            try self.deviceRegistrationPolicies?.validate()
            try self.dlpSendPolicies?.validate()
            try self.domainBlacklistPolicies?.validate()
            try self.domainWhitelistPolicies?.validate()
            try self.endpointHardeningPolicies?.validate()
            try self.peripheraBlockPolicies?.validate()
            try self.softwareBlockPolicies?.validate()
            try self.softwareHardeningPolicies?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.appUninstallPolicies != nil {
                map["AppUninstallPolicies"] = self.appUninstallPolicies?.toMap()
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.deviceRegistrationPolicies != nil {
                map["DeviceRegistrationPolicies"] = self.deviceRegistrationPolicies?.toMap()
            }
            if self.dlpSendPolicies != nil {
                map["DlpSendPolicies"] = self.dlpSendPolicies?.toMap()
            }
            if self.domainBlacklistPolicies != nil {
                map["DomainBlacklistPolicies"] = self.domainBlacklistPolicies?.toMap()
            }
            if self.domainWhitelistPolicies != nil {
                map["DomainWhitelistPolicies"] = self.domainWhitelistPolicies?.toMap()
            }
            if self.endpointHardeningPolicies != nil {
                map["EndpointHardeningPolicies"] = self.endpointHardeningPolicies?.toMap()
            }
            if self.peripheraBlockPolicies != nil {
                map["PeripheraBlockPolicies"] = self.peripheraBlockPolicies?.toMap()
            }
            if self.processId != nil {
                map["ProcessId"] = self.processId!
            }
            if self.processName != nil {
                map["ProcessName"] = self.processName!
            }
            if self.processNodes != nil {
                var tmp : [Any] = []
                for k in self.processNodes! {
                    var l1 : [Any] = []
                    for k1 in k {
                        l1.append(k1.toMap())
                    }
                    tmp.append(l1)
                }
                map["ProcessNodes"] = tmp
            }
            if self.softwareBlockPolicies != nil {
                map["SoftwareBlockPolicies"] = self.softwareBlockPolicies?.toMap()
            }
            if self.softwareHardeningPolicies != nil {
                map["SoftwareHardeningPolicies"] = self.softwareHardeningPolicies?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AppUninstallPolicies"] as? [String: Any?] {
                var model = UpdateApprovalProcessResponseBody.Process.AppUninstallPolicies()
                model.fromMap(value)
                self.appUninstallPolicies = model
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["DeviceRegistrationPolicies"] as? [String: Any?] {
                var model = UpdateApprovalProcessResponseBody.Process.DeviceRegistrationPolicies()
                model.fromMap(value)
                self.deviceRegistrationPolicies = model
            }
            if let value = dict["DlpSendPolicies"] as? [String: Any?] {
                var model = UpdateApprovalProcessResponseBody.Process.DlpSendPolicies()
                model.fromMap(value)
                self.dlpSendPolicies = model
            }
            if let value = dict["DomainBlacklistPolicies"] as? [String: Any?] {
                var model = UpdateApprovalProcessResponseBody.Process.DomainBlacklistPolicies()
                model.fromMap(value)
                self.domainBlacklistPolicies = model
            }
            if let value = dict["DomainWhitelistPolicies"] as? [String: Any?] {
                var model = UpdateApprovalProcessResponseBody.Process.DomainWhitelistPolicies()
                model.fromMap(value)
                self.domainWhitelistPolicies = model
            }
            if let value = dict["EndpointHardeningPolicies"] as? [String: Any?] {
                var model = UpdateApprovalProcessResponseBody.Process.EndpointHardeningPolicies()
                model.fromMap(value)
                self.endpointHardeningPolicies = model
            }
            if let value = dict["PeripheraBlockPolicies"] as? [String: Any?] {
                var model = UpdateApprovalProcessResponseBody.Process.PeripheraBlockPolicies()
                model.fromMap(value)
                self.peripheraBlockPolicies = model
            }
            if let value = dict["ProcessId"] as? String {
                self.processId = value
            }
            if let value = dict["ProcessName"] as? String {
                self.processName = value
            }
            if let value = dict["ProcessNodes"] as? [Any?] {
                var tmp : [[UpdateApprovalProcessResponseBody.Process.ProcessNodes]] = []
                for v in value {
                    if v != nil {
                        var l1 : [UpdateApprovalProcessResponseBody.Process.ProcessNodes] = []
                        for v1 in v as! [Any?] {
                            if v1 != nil {
                                var model = UpdateApprovalProcessResponseBody.Process.ProcessNodes()
                                if v1 != nil {
                                    model.fromMap(v1 as? [String: Any?])
                                }
                                l1.append(model)
                            }
                        }
                        tmp.append(l1)
                    }
                }
                self.processNodes = tmp
            }
            if let value = dict["SoftwareBlockPolicies"] as? [String: Any?] {
                var model = UpdateApprovalProcessResponseBody.Process.SoftwareBlockPolicies()
                model.fromMap(value)
                self.softwareBlockPolicies = model
            }
            if let value = dict["SoftwareHardeningPolicies"] as? [String: Any?] {
                var model = UpdateApprovalProcessResponseBody.Process.SoftwareHardeningPolicies()
                model.fromMap(value)
                self.softwareHardeningPolicies = model
            }
        }
    }
    public var process: UpdateApprovalProcessResponseBody.Process?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.process?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.process != nil {
            map["Process"] = self.process?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Process"] as? [String: Any?] {
            var model = UpdateApprovalProcessResponseBody.Process()
            model.fromMap(value)
            self.process = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdateApprovalProcessResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateApprovalProcessResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateApprovalProcessResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateApprovalStatusRequest : Tea.TeaModel {
    public var approvalId: String?

    public var status: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.approvalId != nil {
            map["ApprovalId"] = self.approvalId!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApprovalId"] as? String {
            self.approvalId = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
    }
}

public class UpdateApprovalStatusResponseBody : Tea.TeaModel {
    public class Approval : Tea.TeaModel {
        public class ApprovalProgresses : Tea.TeaModel {
            public class Operators : Tea.TeaModel {
                public var saseUserId: String?

                public var username: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.saseUserId != nil {
                        map["SaseUserId"] = self.saseUserId!
                    }
                    if self.username != nil {
                        map["Username"] = self.username!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["SaseUserId"] as? String {
                        self.saseUserId = value
                    }
                    if let value = dict["Username"] as? String {
                        self.username = value
                    }
                }
            }
            public var action: String?

            public var comment: String?

            public var executor: String?

            public var operators: [UpdateApprovalStatusResponseBody.Approval.ApprovalProgresses.Operators]?

            public var status: String?

            public var timestamp: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.action != nil {
                    map["Action"] = self.action!
                }
                if self.comment != nil {
                    map["Comment"] = self.comment!
                }
                if self.executor != nil {
                    map["Executor"] = self.executor!
                }
                if self.operators != nil {
                    var tmp : [Any] = []
                    for k in self.operators! {
                        tmp.append(k.toMap())
                    }
                    map["Operators"] = tmp
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                if self.timestamp != nil {
                    map["Timestamp"] = self.timestamp!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Action"] as? String {
                    self.action = value
                }
                if let value = dict["Comment"] as? String {
                    self.comment = value
                }
                if let value = dict["Executor"] as? String {
                    self.executor = value
                }
                if let value = dict["Operators"] as? [Any?] {
                    var tmp : [UpdateApprovalStatusResponseBody.Approval.ApprovalProgresses.Operators] = []
                    for v in value {
                        if v != nil {
                            var model = UpdateApprovalStatusResponseBody.Approval.ApprovalProgresses.Operators()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.operators = tmp
                }
                if let value = dict["Status"] as? String {
                    self.status = value
                }
                if let value = dict["Timestamp"] as? Int64 {
                    self.timestamp = value
                }
            }
        }
        public var approvalDetail: String?

        public var approvalId: String?

        public var approvalProgresses: [UpdateApprovalStatusResponseBody.Approval.ApprovalProgresses]?

        public var createTime: String?

        public var creatorDevTag: String?

        public var creatorUserId: String?

        public var endTimestamp: Int64?

        public var policyType: String?

        public var processId: String?

        public var processName: String?

        public var reason: String?

        public var schemaContent: String?

        public var schemaId: String?

        public var schemaName: String?

        public var status: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.approvalDetail != nil {
                map["ApprovalDetail"] = self.approvalDetail!
            }
            if self.approvalId != nil {
                map["ApprovalId"] = self.approvalId!
            }
            if self.approvalProgresses != nil {
                var tmp : [Any] = []
                for k in self.approvalProgresses! {
                    tmp.append(k.toMap())
                }
                map["ApprovalProgresses"] = tmp
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.creatorDevTag != nil {
                map["CreatorDevTag"] = self.creatorDevTag!
            }
            if self.creatorUserId != nil {
                map["CreatorUserId"] = self.creatorUserId!
            }
            if self.endTimestamp != nil {
                map["EndTimestamp"] = self.endTimestamp!
            }
            if self.policyType != nil {
                map["PolicyType"] = self.policyType!
            }
            if self.processId != nil {
                map["ProcessId"] = self.processId!
            }
            if self.processName != nil {
                map["ProcessName"] = self.processName!
            }
            if self.reason != nil {
                map["Reason"] = self.reason!
            }
            if self.schemaContent != nil {
                map["SchemaContent"] = self.schemaContent!
            }
            if self.schemaId != nil {
                map["SchemaId"] = self.schemaId!
            }
            if self.schemaName != nil {
                map["SchemaName"] = self.schemaName!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ApprovalDetail"] as? String {
                self.approvalDetail = value
            }
            if let value = dict["ApprovalId"] as? String {
                self.approvalId = value
            }
            if let value = dict["ApprovalProgresses"] as? [Any?] {
                var tmp : [UpdateApprovalStatusResponseBody.Approval.ApprovalProgresses] = []
                for v in value {
                    if v != nil {
                        var model = UpdateApprovalStatusResponseBody.Approval.ApprovalProgresses()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.approvalProgresses = tmp
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["CreatorDevTag"] as? String {
                self.creatorDevTag = value
            }
            if let value = dict["CreatorUserId"] as? String {
                self.creatorUserId = value
            }
            if let value = dict["EndTimestamp"] as? Int64 {
                self.endTimestamp = value
            }
            if let value = dict["PolicyType"] as? String {
                self.policyType = value
            }
            if let value = dict["ProcessId"] as? String {
                self.processId = value
            }
            if let value = dict["ProcessName"] as? String {
                self.processName = value
            }
            if let value = dict["Reason"] as? String {
                self.reason = value
            }
            if let value = dict["SchemaContent"] as? String {
                self.schemaContent = value
            }
            if let value = dict["SchemaId"] as? String {
                self.schemaId = value
            }
            if let value = dict["SchemaName"] as? String {
                self.schemaName = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
        }
    }
    public var approval: [UpdateApprovalStatusResponseBody.Approval]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.approval != nil {
            var tmp : [Any] = []
            for k in self.approval! {
                tmp.append(k.toMap())
            }
            map["Approval"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Approval"] as? [Any?] {
            var tmp : [UpdateApprovalStatusResponseBody.Approval] = []
            for v in value {
                if v != nil {
                    var model = UpdateApprovalStatusResponseBody.Approval()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.approval = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdateApprovalStatusResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateApprovalStatusResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateApprovalStatusResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateBootAndAntiUninstallPolicyRequest : Tea.TeaModel {
    public class BlockContent : Tea.TeaModel {
        public class BlockTextEn : Tea.TeaModel {
            public var content: String?

            public var mainButtonText: String?

            public var minorButtonText: String?

            public var title: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.content != nil {
                    map["Content"] = self.content!
                }
                if self.mainButtonText != nil {
                    map["MainButtonText"] = self.mainButtonText!
                }
                if self.minorButtonText != nil {
                    map["MinorButtonText"] = self.minorButtonText!
                }
                if self.title != nil {
                    map["Title"] = self.title!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Content"] as? String {
                    self.content = value
                }
                if let value = dict["MainButtonText"] as? String {
                    self.mainButtonText = value
                }
                if let value = dict["MinorButtonText"] as? String {
                    self.minorButtonText = value
                }
                if let value = dict["Title"] as? String {
                    self.title = value
                }
            }
        }
        public class BlockTextZh : Tea.TeaModel {
            public var content: String?

            public var mainButtonText: String?

            public var minorButtonText: String?

            public var title: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.content != nil {
                    map["Content"] = self.content!
                }
                if self.mainButtonText != nil {
                    map["MainButtonText"] = self.mainButtonText!
                }
                if self.minorButtonText != nil {
                    map["MinorButtonText"] = self.minorButtonText!
                }
                if self.title != nil {
                    map["Title"] = self.title!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Content"] as? String {
                    self.content = value
                }
                if let value = dict["MainButtonText"] as? String {
                    self.mainButtonText = value
                }
                if let value = dict["MinorButtonText"] as? String {
                    self.minorButtonText = value
                }
                if let value = dict["Title"] as? String {
                    self.title = value
                }
            }
        }
        public var blockTextEn: UpdateBootAndAntiUninstallPolicyRequest.BlockContent.BlockTextEn?

        public var blockTextZh: UpdateBootAndAntiUninstallPolicyRequest.BlockContent.BlockTextZh?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.blockTextEn?.validate()
            try self.blockTextZh?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.blockTextEn != nil {
                map["BlockTextEn"] = self.blockTextEn?.toMap()
            }
            if self.blockTextZh != nil {
                map["BlockTextZh"] = self.blockTextZh?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["BlockTextEn"] as? [String: Any?] {
                var model = UpdateBootAndAntiUninstallPolicyRequest.BlockContent.BlockTextEn()
                model.fromMap(value)
                self.blockTextEn = model
            }
            if let value = dict["BlockTextZh"] as? [String: Any?] {
                var model = UpdateBootAndAntiUninstallPolicyRequest.BlockContent.BlockTextZh()
                model.fromMap(value)
                self.blockTextZh = model
            }
        }
    }
    public var allowReport: Bool?

    public var blockContent: UpdateBootAndAntiUninstallPolicyRequest.BlockContent?

    public var isAntiUninstall: Bool?

    public var isBoot: Bool?

    public var userGroupIds: [String]?

    public var whitelistUsers: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.blockContent?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.allowReport != nil {
            map["AllowReport"] = self.allowReport!
        }
        if self.blockContent != nil {
            map["BlockContent"] = self.blockContent?.toMap()
        }
        if self.isAntiUninstall != nil {
            map["IsAntiUninstall"] = self.isAntiUninstall!
        }
        if self.isBoot != nil {
            map["IsBoot"] = self.isBoot!
        }
        if self.userGroupIds != nil {
            map["UserGroupIds"] = self.userGroupIds!
        }
        if self.whitelistUsers != nil {
            map["WhitelistUsers"] = self.whitelistUsers!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AllowReport"] as? Bool {
            self.allowReport = value
        }
        if let value = dict["BlockContent"] as? [String: Any?] {
            var model = UpdateBootAndAntiUninstallPolicyRequest.BlockContent()
            model.fromMap(value)
            self.blockContent = model
        }
        if let value = dict["IsAntiUninstall"] as? Bool {
            self.isAntiUninstall = value
        }
        if let value = dict["IsBoot"] as? Bool {
            self.isBoot = value
        }
        if let value = dict["UserGroupIds"] as? [String] {
            self.userGroupIds = value
        }
        if let value = dict["WhitelistUsers"] as? [String] {
            self.whitelistUsers = value
        }
    }
}

public class UpdateBootAndAntiUninstallPolicyShrinkRequest : Tea.TeaModel {
    public var allowReport: Bool?

    public var blockContentShrink: String?

    public var isAntiUninstall: Bool?

    public var isBoot: Bool?

    public var userGroupIds: [String]?

    public var whitelistUsers: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.allowReport != nil {
            map["AllowReport"] = self.allowReport!
        }
        if self.blockContentShrink != nil {
            map["BlockContent"] = self.blockContentShrink!
        }
        if self.isAntiUninstall != nil {
            map["IsAntiUninstall"] = self.isAntiUninstall!
        }
        if self.isBoot != nil {
            map["IsBoot"] = self.isBoot!
        }
        if self.userGroupIds != nil {
            map["UserGroupIds"] = self.userGroupIds!
        }
        if self.whitelistUsers != nil {
            map["WhitelistUsers"] = self.whitelistUsers!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AllowReport"] as? Bool {
            self.allowReport = value
        }
        if let value = dict["BlockContent"] as? String {
            self.blockContentShrink = value
        }
        if let value = dict["IsAntiUninstall"] as? Bool {
            self.isAntiUninstall = value
        }
        if let value = dict["IsBoot"] as? Bool {
            self.isBoot = value
        }
        if let value = dict["UserGroupIds"] as? [String] {
            self.userGroupIds = value
        }
        if let value = dict["WhitelistUsers"] as? [String] {
            self.whitelistUsers = value
        }
    }
}

public class UpdateBootAndAntiUninstallPolicyResponseBody : Tea.TeaModel {
    public class Strategy : Tea.TeaModel {
        public class BlockContent : Tea.TeaModel {
            public class BlockTextEn : Tea.TeaModel {
                public var content: String?

                public var mainButtonText: String?

                public var minorButtonText: String?

                public var title: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.content != nil {
                        map["Content"] = self.content!
                    }
                    if self.mainButtonText != nil {
                        map["MainButtonText"] = self.mainButtonText!
                    }
                    if self.minorButtonText != nil {
                        map["MinorButtonText"] = self.minorButtonText!
                    }
                    if self.title != nil {
                        map["Title"] = self.title!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Content"] as? String {
                        self.content = value
                    }
                    if let value = dict["MainButtonText"] as? String {
                        self.mainButtonText = value
                    }
                    if let value = dict["MinorButtonText"] as? String {
                        self.minorButtonText = value
                    }
                    if let value = dict["Title"] as? String {
                        self.title = value
                    }
                }
            }
            public class BlockTextZh : Tea.TeaModel {
                public var content: String?

                public var mainButtonText: String?

                public var minorButtonText: String?

                public var title: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.content != nil {
                        map["Content"] = self.content!
                    }
                    if self.mainButtonText != nil {
                        map["MainButtonText"] = self.mainButtonText!
                    }
                    if self.minorButtonText != nil {
                        map["MinorButtonText"] = self.minorButtonText!
                    }
                    if self.title != nil {
                        map["Title"] = self.title!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Content"] as? String {
                        self.content = value
                    }
                    if let value = dict["MainButtonText"] as? String {
                        self.mainButtonText = value
                    }
                    if let value = dict["MinorButtonText"] as? String {
                        self.minorButtonText = value
                    }
                    if let value = dict["Title"] as? String {
                        self.title = value
                    }
                }
            }
            public var blockTextEn: UpdateBootAndAntiUninstallPolicyResponseBody.Strategy.BlockContent.BlockTextEn?

            public var blockTextZh: UpdateBootAndAntiUninstallPolicyResponseBody.Strategy.BlockContent.BlockTextZh?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.blockTextEn?.validate()
                try self.blockTextZh?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.blockTextEn != nil {
                    map["BlockTextEn"] = self.blockTextEn?.toMap()
                }
                if self.blockTextZh != nil {
                    map["BlockTextZh"] = self.blockTextZh?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["BlockTextEn"] as? [String: Any?] {
                    var model = UpdateBootAndAntiUninstallPolicyResponseBody.Strategy.BlockContent.BlockTextEn()
                    model.fromMap(value)
                    self.blockTextEn = model
                }
                if let value = dict["BlockTextZh"] as? [String: Any?] {
                    var model = UpdateBootAndAntiUninstallPolicyResponseBody.Strategy.BlockContent.BlockTextZh()
                    model.fromMap(value)
                    self.blockTextZh = model
                }
            }
        }
        public var allowReport: Bool?

        public var blockContent: UpdateBootAndAntiUninstallPolicyResponseBody.Strategy.BlockContent?

        public var createTime: String?

        public var isAntiUninstall: Bool?

        public var isBoot: Bool?

        public var policyId: String?

        public var reportProcessId: String?

        public var updateTime: String?

        public var userGroupIds: [String]?

        public var whitelistUsers: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.blockContent?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.allowReport != nil {
                map["AllowReport"] = self.allowReport!
            }
            if self.blockContent != nil {
                map["BlockContent"] = self.blockContent?.toMap()
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.isAntiUninstall != nil {
                map["IsAntiUninstall"] = self.isAntiUninstall!
            }
            if self.isBoot != nil {
                map["IsBoot"] = self.isBoot!
            }
            if self.policyId != nil {
                map["PolicyId"] = self.policyId!
            }
            if self.reportProcessId != nil {
                map["ReportProcessId"] = self.reportProcessId!
            }
            if self.updateTime != nil {
                map["UpdateTime"] = self.updateTime!
            }
            if self.userGroupIds != nil {
                map["UserGroupIds"] = self.userGroupIds!
            }
            if self.whitelistUsers != nil {
                map["WhitelistUsers"] = self.whitelistUsers!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AllowReport"] as? Bool {
                self.allowReport = value
            }
            if let value = dict["BlockContent"] as? [String: Any?] {
                var model = UpdateBootAndAntiUninstallPolicyResponseBody.Strategy.BlockContent()
                model.fromMap(value)
                self.blockContent = model
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["IsAntiUninstall"] as? Bool {
                self.isAntiUninstall = value
            }
            if let value = dict["IsBoot"] as? Bool {
                self.isBoot = value
            }
            if let value = dict["PolicyId"] as? String {
                self.policyId = value
            }
            if let value = dict["ReportProcessId"] as? String {
                self.reportProcessId = value
            }
            if let value = dict["UpdateTime"] as? String {
                self.updateTime = value
            }
            if let value = dict["UserGroupIds"] as? [String] {
                self.userGroupIds = value
            }
            if let value = dict["WhitelistUsers"] as? [String] {
                self.whitelistUsers = value
            }
        }
    }
    public var requestId: String?

    public var strategy: UpdateBootAndAntiUninstallPolicyResponseBody.Strategy?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.strategy?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.strategy != nil {
            map["Strategy"] = self.strategy?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Strategy"] as? [String: Any?] {
            var model = UpdateBootAndAntiUninstallPolicyResponseBody.Strategy()
            model.fromMap(value)
            self.strategy = model
        }
    }
}

public class UpdateBootAndAntiUninstallPolicyResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateBootAndAntiUninstallPolicyResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateBootAndAntiUninstallPolicyResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateClientUserRequest : Tea.TeaModel {
    public var departmentId: String?

    public var description_: String?

    public var email: String?

    public var id: String?

    public var mobileNumber: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.departmentId != nil {
            map["DepartmentId"] = self.departmentId!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.email != nil {
            map["Email"] = self.email!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.mobileNumber != nil {
            map["MobileNumber"] = self.mobileNumber!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DepartmentId"] as? String {
            self.departmentId = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["Email"] as? String {
            self.email = value
        }
        if let value = dict["Id"] as? String {
            self.id = value
        }
        if let value = dict["MobileNumber"] as? String {
            self.mobileNumber = value
        }
    }
}

public class UpdateClientUserResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdateClientUserResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateClientUserResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateClientUserResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateClientUserPasswordRequest : Tea.TeaModel {
    public var id: String?

    public var password: String?

    public var username: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.password != nil {
            map["Password"] = self.password!
        }
        if self.username != nil {
            map["Username"] = self.username!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? String {
            self.id = value
        }
        if let value = dict["Password"] as? String {
            self.password = value
        }
        if let value = dict["Username"] as? String {
            self.username = value
        }
    }
}

public class UpdateClientUserPasswordResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdateClientUserPasswordResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateClientUserPasswordResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateClientUserPasswordResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateClientUserStatusRequest : Tea.TeaModel {
    public var id: String?

    public var status: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? String {
            self.id = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
    }
}

public class UpdateClientUserStatusResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdateClientUserStatusResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateClientUserStatusResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateClientUserStatusResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateDynamicRouteRequest : Tea.TeaModel {
    public var applicationIds: [String]?

    public var applicationType: String?

    public var description_: String?

    public var dynamicRouteId: String?

    public var dynamicRouteType: String?

    public var modifyType: String?

    public var name: String?

    public var nextHop: String?

    public var priority: Int32?

    public var regionIds: [String]?

    public var status: String?

    public var tagIds: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.applicationIds != nil {
            map["ApplicationIds"] = self.applicationIds!
        }
        if self.applicationType != nil {
            map["ApplicationType"] = self.applicationType!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.dynamicRouteId != nil {
            map["DynamicRouteId"] = self.dynamicRouteId!
        }
        if self.dynamicRouteType != nil {
            map["DynamicRouteType"] = self.dynamicRouteType!
        }
        if self.modifyType != nil {
            map["ModifyType"] = self.modifyType!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.nextHop != nil {
            map["NextHop"] = self.nextHop!
        }
        if self.priority != nil {
            map["Priority"] = self.priority!
        }
        if self.regionIds != nil {
            map["RegionIds"] = self.regionIds!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        if self.tagIds != nil {
            map["TagIds"] = self.tagIds!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApplicationIds"] as? [String] {
            self.applicationIds = value
        }
        if let value = dict["ApplicationType"] as? String {
            self.applicationType = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["DynamicRouteId"] as? String {
            self.dynamicRouteId = value
        }
        if let value = dict["DynamicRouteType"] as? String {
            self.dynamicRouteType = value
        }
        if let value = dict["ModifyType"] as? String {
            self.modifyType = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["NextHop"] as? String {
            self.nextHop = value
        }
        if let value = dict["Priority"] as? Int32 {
            self.priority = value
        }
        if let value = dict["RegionIds"] as? [String] {
            self.regionIds = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
        if let value = dict["TagIds"] as? [String] {
            self.tagIds = value
        }
    }
}

public class UpdateDynamicRouteResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdateDynamicRouteResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateDynamicRouteResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateDynamicRouteResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateExcessiveDeviceRegistrationApplicationsStatusRequest : Tea.TeaModel {
    public var applicationIds: [String]?

    public var status: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.applicationIds != nil {
            map["ApplicationIds"] = self.applicationIds!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApplicationIds"] as? [String] {
            self.applicationIds = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
    }
}

public class UpdateExcessiveDeviceRegistrationApplicationsStatusResponseBody : Tea.TeaModel {
    public class Applications : Tea.TeaModel {
        public var applicationId: String?

        public var createTime: String?

        public var department: String?

        public var description_: String?

        public var deviceTag: String?

        public var deviceType: String?

        public var hostname: String?

        public var isUsed: Bool?

        public var mac: String?

        public var saseUserId: String?

        public var status: String?

        public var username: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.applicationId != nil {
                map["ApplicationId"] = self.applicationId!
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.department != nil {
                map["Department"] = self.department!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.deviceTag != nil {
                map["DeviceTag"] = self.deviceTag!
            }
            if self.deviceType != nil {
                map["DeviceType"] = self.deviceType!
            }
            if self.hostname != nil {
                map["Hostname"] = self.hostname!
            }
            if self.isUsed != nil {
                map["IsUsed"] = self.isUsed!
            }
            if self.mac != nil {
                map["Mac"] = self.mac!
            }
            if self.saseUserId != nil {
                map["SaseUserId"] = self.saseUserId!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.username != nil {
                map["Username"] = self.username!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ApplicationId"] as? String {
                self.applicationId = value
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["Department"] as? String {
                self.department = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["DeviceTag"] as? String {
                self.deviceTag = value
            }
            if let value = dict["DeviceType"] as? String {
                self.deviceType = value
            }
            if let value = dict["Hostname"] as? String {
                self.hostname = value
            }
            if let value = dict["IsUsed"] as? Bool {
                self.isUsed = value
            }
            if let value = dict["Mac"] as? String {
                self.mac = value
            }
            if let value = dict["SaseUserId"] as? String {
                self.saseUserId = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["Username"] as? String {
                self.username = value
            }
        }
    }
    public var applications: [UpdateExcessiveDeviceRegistrationApplicationsStatusResponseBody.Applications]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.applications != nil {
            var tmp : [Any] = []
            for k in self.applications! {
                tmp.append(k.toMap())
            }
            map["Applications"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Applications"] as? [Any?] {
            var tmp : [UpdateExcessiveDeviceRegistrationApplicationsStatusResponseBody.Applications] = []
            for v in value {
                if v != nil {
                    var model = UpdateExcessiveDeviceRegistrationApplicationsStatusResponseBody.Applications()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.applications = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdateExcessiveDeviceRegistrationApplicationsStatusResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateExcessiveDeviceRegistrationApplicationsStatusResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateExcessiveDeviceRegistrationApplicationsStatusResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateIdpDepartmentRequest : Tea.TeaModel {
    public var departmentId: String?

    public var departmentName: String?

    public var idpConfigId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.departmentId != nil {
            map["DepartmentId"] = self.departmentId!
        }
        if self.departmentName != nil {
            map["DepartmentName"] = self.departmentName!
        }
        if self.idpConfigId != nil {
            map["IdpConfigId"] = self.idpConfigId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DepartmentId"] as? String {
            self.departmentId = value
        }
        if let value = dict["DepartmentName"] as? String {
            self.departmentName = value
        }
        if let value = dict["IdpConfigId"] as? String {
            self.idpConfigId = value
        }
    }
}

public class UpdateIdpDepartmentResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdateIdpDepartmentResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateIdpDepartmentResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateIdpDepartmentResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateNacUserCertStatusRequest : Tea.TeaModel {
    public class IdList : Tea.TeaModel {
        public var devTag: String?

        public var userId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.devTag != nil {
                map["DevTag"] = self.devTag!
            }
            if self.userId != nil {
                map["UserId"] = self.userId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DevTag"] as? String {
                self.devTag = value
            }
            if let value = dict["UserId"] as? String {
                self.userId = value
            }
        }
    }
    public var idList: [UpdateNacUserCertStatusRequest.IdList]?

    public var status: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.idList != nil {
            var tmp : [Any] = []
            for k in self.idList! {
                tmp.append(k.toMap())
            }
            map["IdList"] = tmp
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["IdList"] as? [Any?] {
            var tmp : [UpdateNacUserCertStatusRequest.IdList] = []
            for v in value {
                if v != nil {
                    var model = UpdateNacUserCertStatusRequest.IdList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.idList = tmp
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
    }
}

public class UpdateNacUserCertStatusResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdateNacUserCertStatusResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateNacUserCertStatusResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateNacUserCertStatusResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdatePrivateAccessApplicationRequest : Tea.TeaModel {
    public class PortRanges : Tea.TeaModel {
        public var begin: Int32?

        public var end: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.begin != nil {
                map["Begin"] = self.begin!
            }
            if self.end != nil {
                map["End"] = self.end!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Begin"] as? Int32 {
                self.begin = value
            }
            if let value = dict["End"] as? Int32 {
                self.end = value
            }
        }
    }
    public var addresses: [String]?

    public var applicationId: String?

    public var description_: String?

    public var l7Config: PAL7Config?

    public var l7ProxyDomainAutomaticPrefix: String?

    public var l7ProxyDomainCustom: String?

    public var l7ProxyDomainPrivate: String?

    public var modifyType: String?

    public var portRanges: [UpdatePrivateAccessApplicationRequest.PortRanges]?

    public var protocol_: String?

    public var status: String?

    public var tagIds: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.l7Config?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.addresses != nil {
            map["Addresses"] = self.addresses!
        }
        if self.applicationId != nil {
            map["ApplicationId"] = self.applicationId!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.l7Config != nil {
            map["L7Config"] = self.l7Config?.toMap()
        }
        if self.l7ProxyDomainAutomaticPrefix != nil {
            map["L7ProxyDomainAutomaticPrefix"] = self.l7ProxyDomainAutomaticPrefix!
        }
        if self.l7ProxyDomainCustom != nil {
            map["L7ProxyDomainCustom"] = self.l7ProxyDomainCustom!
        }
        if self.l7ProxyDomainPrivate != nil {
            map["L7ProxyDomainPrivate"] = self.l7ProxyDomainPrivate!
        }
        if self.modifyType != nil {
            map["ModifyType"] = self.modifyType!
        }
        if self.portRanges != nil {
            var tmp : [Any] = []
            for k in self.portRanges! {
                tmp.append(k.toMap())
            }
            map["PortRanges"] = tmp
        }
        if self.protocol_ != nil {
            map["Protocol"] = self.protocol_!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        if self.tagIds != nil {
            map["TagIds"] = self.tagIds!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Addresses"] as? [String] {
            self.addresses = value
        }
        if let value = dict["ApplicationId"] as? String {
            self.applicationId = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["L7Config"] as? [String: Any?] {
            var model = PAL7Config()
            model.fromMap(value)
            self.l7Config = model
        }
        if let value = dict["L7ProxyDomainAutomaticPrefix"] as? String {
            self.l7ProxyDomainAutomaticPrefix = value
        }
        if let value = dict["L7ProxyDomainCustom"] as? String {
            self.l7ProxyDomainCustom = value
        }
        if let value = dict["L7ProxyDomainPrivate"] as? String {
            self.l7ProxyDomainPrivate = value
        }
        if let value = dict["ModifyType"] as? String {
            self.modifyType = value
        }
        if let value = dict["PortRanges"] as? [Any?] {
            var tmp : [UpdatePrivateAccessApplicationRequest.PortRanges] = []
            for v in value {
                if v != nil {
                    var model = UpdatePrivateAccessApplicationRequest.PortRanges()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.portRanges = tmp
        }
        if let value = dict["Protocol"] as? String {
            self.protocol_ = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
        if let value = dict["TagIds"] as? [String] {
            self.tagIds = value
        }
    }
}

public class UpdatePrivateAccessApplicationShrinkRequest : Tea.TeaModel {
    public class PortRanges : Tea.TeaModel {
        public var begin: Int32?

        public var end: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.begin != nil {
                map["Begin"] = self.begin!
            }
            if self.end != nil {
                map["End"] = self.end!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Begin"] as? Int32 {
                self.begin = value
            }
            if let value = dict["End"] as? Int32 {
                self.end = value
            }
        }
    }
    public var addresses: [String]?

    public var applicationId: String?

    public var description_: String?

    public var l7ConfigShrink: String?

    public var l7ProxyDomainAutomaticPrefix: String?

    public var l7ProxyDomainCustom: String?

    public var l7ProxyDomainPrivate: String?

    public var modifyType: String?

    public var portRanges: [UpdatePrivateAccessApplicationShrinkRequest.PortRanges]?

    public var protocol_: String?

    public var status: String?

    public var tagIds: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.addresses != nil {
            map["Addresses"] = self.addresses!
        }
        if self.applicationId != nil {
            map["ApplicationId"] = self.applicationId!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.l7ConfigShrink != nil {
            map["L7Config"] = self.l7ConfigShrink!
        }
        if self.l7ProxyDomainAutomaticPrefix != nil {
            map["L7ProxyDomainAutomaticPrefix"] = self.l7ProxyDomainAutomaticPrefix!
        }
        if self.l7ProxyDomainCustom != nil {
            map["L7ProxyDomainCustom"] = self.l7ProxyDomainCustom!
        }
        if self.l7ProxyDomainPrivate != nil {
            map["L7ProxyDomainPrivate"] = self.l7ProxyDomainPrivate!
        }
        if self.modifyType != nil {
            map["ModifyType"] = self.modifyType!
        }
        if self.portRanges != nil {
            var tmp : [Any] = []
            for k in self.portRanges! {
                tmp.append(k.toMap())
            }
            map["PortRanges"] = tmp
        }
        if self.protocol_ != nil {
            map["Protocol"] = self.protocol_!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        if self.tagIds != nil {
            map["TagIds"] = self.tagIds!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Addresses"] as? [String] {
            self.addresses = value
        }
        if let value = dict["ApplicationId"] as? String {
            self.applicationId = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["L7Config"] as? String {
            self.l7ConfigShrink = value
        }
        if let value = dict["L7ProxyDomainAutomaticPrefix"] as? String {
            self.l7ProxyDomainAutomaticPrefix = value
        }
        if let value = dict["L7ProxyDomainCustom"] as? String {
            self.l7ProxyDomainCustom = value
        }
        if let value = dict["L7ProxyDomainPrivate"] as? String {
            self.l7ProxyDomainPrivate = value
        }
        if let value = dict["ModifyType"] as? String {
            self.modifyType = value
        }
        if let value = dict["PortRanges"] as? [Any?] {
            var tmp : [UpdatePrivateAccessApplicationShrinkRequest.PortRanges] = []
            for v in value {
                if v != nil {
                    var model = UpdatePrivateAccessApplicationShrinkRequest.PortRanges()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.portRanges = tmp
        }
        if let value = dict["Protocol"] as? String {
            self.protocol_ = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
        if let value = dict["TagIds"] as? [String] {
            self.tagIds = value
        }
    }
}

public class UpdatePrivateAccessApplicationResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdatePrivateAccessApplicationResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdatePrivateAccessApplicationResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdatePrivateAccessApplicationResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdatePrivateAccessPolicyRequest : Tea.TeaModel {
    public class CustomUserAttributes : Tea.TeaModel {
        public var idpId: Int32?

        public var relation: String?

        public var userGroupType: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.idpId != nil {
                map["IdpId"] = self.idpId!
            }
            if self.relation != nil {
                map["Relation"] = self.relation!
            }
            if self.userGroupType != nil {
                map["UserGroupType"] = self.userGroupType!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["IdpId"] as? Int32 {
                self.idpId = value
            }
            if let value = dict["Relation"] as? String {
                self.relation = value
            }
            if let value = dict["UserGroupType"] as? String {
                self.userGroupType = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var applicationIds: [String]?

    public var applicationType: String?

    public var customUserAttributes: [UpdatePrivateAccessPolicyRequest.CustomUserAttributes]?

    public var description_: String?

    public var deviceAttributeAction: String?

    public var deviceAttributeId: String?

    public var modifyType: String?

    public var policyAction: String?

    public var policyId: String?

    public var priority: Int32?

    public var status: String?

    public var tagIds: [String]?

    public var triggerTemplateId: String?

    public var trustedProcessGroupIds: [String]?

    public var trustedProcessStatus: String?

    public var trustedSoftwareIds: [String]?

    public var userGroupIds: [String]?

    public var userGroupMode: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.applicationIds != nil {
            map["ApplicationIds"] = self.applicationIds!
        }
        if self.applicationType != nil {
            map["ApplicationType"] = self.applicationType!
        }
        if self.customUserAttributes != nil {
            var tmp : [Any] = []
            for k in self.customUserAttributes! {
                tmp.append(k.toMap())
            }
            map["CustomUserAttributes"] = tmp
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.deviceAttributeAction != nil {
            map["DeviceAttributeAction"] = self.deviceAttributeAction!
        }
        if self.deviceAttributeId != nil {
            map["DeviceAttributeId"] = self.deviceAttributeId!
        }
        if self.modifyType != nil {
            map["ModifyType"] = self.modifyType!
        }
        if self.policyAction != nil {
            map["PolicyAction"] = self.policyAction!
        }
        if self.policyId != nil {
            map["PolicyId"] = self.policyId!
        }
        if self.priority != nil {
            map["Priority"] = self.priority!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        if self.tagIds != nil {
            map["TagIds"] = self.tagIds!
        }
        if self.triggerTemplateId != nil {
            map["TriggerTemplateId"] = self.triggerTemplateId!
        }
        if self.trustedProcessGroupIds != nil {
            map["TrustedProcessGroupIds"] = self.trustedProcessGroupIds!
        }
        if self.trustedProcessStatus != nil {
            map["TrustedProcessStatus"] = self.trustedProcessStatus!
        }
        if self.trustedSoftwareIds != nil {
            map["TrustedSoftwareIds"] = self.trustedSoftwareIds!
        }
        if self.userGroupIds != nil {
            map["UserGroupIds"] = self.userGroupIds!
        }
        if self.userGroupMode != nil {
            map["UserGroupMode"] = self.userGroupMode!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApplicationIds"] as? [String] {
            self.applicationIds = value
        }
        if let value = dict["ApplicationType"] as? String {
            self.applicationType = value
        }
        if let value = dict["CustomUserAttributes"] as? [Any?] {
            var tmp : [UpdatePrivateAccessPolicyRequest.CustomUserAttributes] = []
            for v in value {
                if v != nil {
                    var model = UpdatePrivateAccessPolicyRequest.CustomUserAttributes()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.customUserAttributes = tmp
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["DeviceAttributeAction"] as? String {
            self.deviceAttributeAction = value
        }
        if let value = dict["DeviceAttributeId"] as? String {
            self.deviceAttributeId = value
        }
        if let value = dict["ModifyType"] as? String {
            self.modifyType = value
        }
        if let value = dict["PolicyAction"] as? String {
            self.policyAction = value
        }
        if let value = dict["PolicyId"] as? String {
            self.policyId = value
        }
        if let value = dict["Priority"] as? Int32 {
            self.priority = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
        if let value = dict["TagIds"] as? [String] {
            self.tagIds = value
        }
        if let value = dict["TriggerTemplateId"] as? String {
            self.triggerTemplateId = value
        }
        if let value = dict["TrustedProcessGroupIds"] as? [String] {
            self.trustedProcessGroupIds = value
        }
        if let value = dict["TrustedProcessStatus"] as? String {
            self.trustedProcessStatus = value
        }
        if let value = dict["TrustedSoftwareIds"] as? [String] {
            self.trustedSoftwareIds = value
        }
        if let value = dict["UserGroupIds"] as? [String] {
            self.userGroupIds = value
        }
        if let value = dict["UserGroupMode"] as? String {
            self.userGroupMode = value
        }
    }
}

public class UpdatePrivateAccessPolicyResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdatePrivateAccessPolicyResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdatePrivateAccessPolicyResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdatePrivateAccessPolicyResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateRegistrationPolicyRequest : Tea.TeaModel {
    public class CompanyLimitCount : Tea.TeaModel {
        public var all: Int32?

        public var mobile: Int32?

        public var PC: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.all != nil {
                map["All"] = self.all!
            }
            if self.mobile != nil {
                map["Mobile"] = self.mobile!
            }
            if self.PC != nil {
                map["PC"] = self.PC!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["All"] as? Int32 {
                self.all = value
            }
            if let value = dict["Mobile"] as? Int32 {
                self.mobile = value
            }
            if let value = dict["PC"] as? Int32 {
                self.PC = value
            }
        }
    }
    public class PersonalLimitCount : Tea.TeaModel {
        public var all: Int32?

        public var mobile: Int32?

        public var PC: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.all != nil {
                map["All"] = self.all!
            }
            if self.mobile != nil {
                map["Mobile"] = self.mobile!
            }
            if self.PC != nil {
                map["PC"] = self.PC!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["All"] as? Int32 {
                self.all = value
            }
            if let value = dict["Mobile"] as? Int32 {
                self.mobile = value
            }
            if let value = dict["PC"] as? Int32 {
                self.PC = value
            }
        }
    }
    public var companyLimitCount: UpdateRegistrationPolicyRequest.CompanyLimitCount?

    public var companyLimitType: String?

    public var description_: String?

    public var matchMode: String?

    public var name: String?

    public var personalLimitCount: UpdateRegistrationPolicyRequest.PersonalLimitCount?

    public var personalLimitType: String?

    public var policyId: String?

    public var priority: Int64?

    public var status: String?

    public var userGroupIds: [String]?

    public var whitelist: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.companyLimitCount?.validate()
        try self.personalLimitCount?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.companyLimitCount != nil {
            map["CompanyLimitCount"] = self.companyLimitCount?.toMap()
        }
        if self.companyLimitType != nil {
            map["CompanyLimitType"] = self.companyLimitType!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.matchMode != nil {
            map["MatchMode"] = self.matchMode!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.personalLimitCount != nil {
            map["PersonalLimitCount"] = self.personalLimitCount?.toMap()
        }
        if self.personalLimitType != nil {
            map["PersonalLimitType"] = self.personalLimitType!
        }
        if self.policyId != nil {
            map["PolicyId"] = self.policyId!
        }
        if self.priority != nil {
            map["Priority"] = self.priority!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        if self.userGroupIds != nil {
            map["UserGroupIds"] = self.userGroupIds!
        }
        if self.whitelist != nil {
            map["Whitelist"] = self.whitelist!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CompanyLimitCount"] as? [String: Any?] {
            var model = UpdateRegistrationPolicyRequest.CompanyLimitCount()
            model.fromMap(value)
            self.companyLimitCount = model
        }
        if let value = dict["CompanyLimitType"] as? String {
            self.companyLimitType = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["MatchMode"] as? String {
            self.matchMode = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["PersonalLimitCount"] as? [String: Any?] {
            var model = UpdateRegistrationPolicyRequest.PersonalLimitCount()
            model.fromMap(value)
            self.personalLimitCount = model
        }
        if let value = dict["PersonalLimitType"] as? String {
            self.personalLimitType = value
        }
        if let value = dict["PolicyId"] as? String {
            self.policyId = value
        }
        if let value = dict["Priority"] as? Int64 {
            self.priority = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
        if let value = dict["UserGroupIds"] as? [String] {
            self.userGroupIds = value
        }
        if let value = dict["Whitelist"] as? [String] {
            self.whitelist = value
        }
    }
}

public class UpdateRegistrationPolicyShrinkRequest : Tea.TeaModel {
    public var companyLimitCountShrink: String?

    public var companyLimitType: String?

    public var description_: String?

    public var matchMode: String?

    public var name: String?

    public var personalLimitCountShrink: String?

    public var personalLimitType: String?

    public var policyId: String?

    public var priority: Int64?

    public var status: String?

    public var userGroupIds: [String]?

    public var whitelist: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.companyLimitCountShrink != nil {
            map["CompanyLimitCount"] = self.companyLimitCountShrink!
        }
        if self.companyLimitType != nil {
            map["CompanyLimitType"] = self.companyLimitType!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.matchMode != nil {
            map["MatchMode"] = self.matchMode!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.personalLimitCountShrink != nil {
            map["PersonalLimitCount"] = self.personalLimitCountShrink!
        }
        if self.personalLimitType != nil {
            map["PersonalLimitType"] = self.personalLimitType!
        }
        if self.policyId != nil {
            map["PolicyId"] = self.policyId!
        }
        if self.priority != nil {
            map["Priority"] = self.priority!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        if self.userGroupIds != nil {
            map["UserGroupIds"] = self.userGroupIds!
        }
        if self.whitelist != nil {
            map["Whitelist"] = self.whitelist!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CompanyLimitCount"] as? String {
            self.companyLimitCountShrink = value
        }
        if let value = dict["CompanyLimitType"] as? String {
            self.companyLimitType = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["MatchMode"] as? String {
            self.matchMode = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["PersonalLimitCount"] as? String {
            self.personalLimitCountShrink = value
        }
        if let value = dict["PersonalLimitType"] as? String {
            self.personalLimitType = value
        }
        if let value = dict["PolicyId"] as? String {
            self.policyId = value
        }
        if let value = dict["Priority"] as? Int64 {
            self.priority = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
        if let value = dict["UserGroupIds"] as? [String] {
            self.userGroupIds = value
        }
        if let value = dict["Whitelist"] as? [String] {
            self.whitelist = value
        }
    }
}

public class UpdateRegistrationPolicyResponseBody : Tea.TeaModel {
    public class Policy : Tea.TeaModel {
        public class LimitDetail : Tea.TeaModel {
            public class LimitCount : Tea.TeaModel {
                public var all: Int32?

                public var mobile: Int32?

                public var PC: Int32?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.all != nil {
                        map["All"] = self.all!
                    }
                    if self.mobile != nil {
                        map["Mobile"] = self.mobile!
                    }
                    if self.PC != nil {
                        map["PC"] = self.PC!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["All"] as? Int32 {
                        self.all = value
                    }
                    if let value = dict["Mobile"] as? Int32 {
                        self.mobile = value
                    }
                    if let value = dict["PC"] as? Int32 {
                        self.PC = value
                    }
                }
            }
            public var deviceBelong: String?

            public var limitCount: UpdateRegistrationPolicyResponseBody.Policy.LimitDetail.LimitCount?

            public var limitType: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.limitCount?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.deviceBelong != nil {
                    map["DeviceBelong"] = self.deviceBelong!
                }
                if self.limitCount != nil {
                    map["LimitCount"] = self.limitCount?.toMap()
                }
                if self.limitType != nil {
                    map["LimitType"] = self.limitType!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["DeviceBelong"] as? String {
                    self.deviceBelong = value
                }
                if let value = dict["LimitCount"] as? [String: Any?] {
                    var model = UpdateRegistrationPolicyResponseBody.Policy.LimitDetail.LimitCount()
                    model.fromMap(value)
                    self.limitCount = model
                }
                if let value = dict["LimitType"] as? String {
                    self.limitType = value
                }
            }
        }
        public var createTime: String?

        public var description_: String?

        public var limitDetail: [UpdateRegistrationPolicyResponseBody.Policy.LimitDetail]?

        public var matchMode: String?

        public var name: String?

        public var policyId: String?

        public var priority: String?

        public var status: String?

        public var userGroupIds: [String]?

        public var whitelist: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.limitDetail != nil {
                var tmp : [Any] = []
                for k in self.limitDetail! {
                    tmp.append(k.toMap())
                }
                map["LimitDetail"] = tmp
            }
            if self.matchMode != nil {
                map["MatchMode"] = self.matchMode!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.policyId != nil {
                map["PolicyId"] = self.policyId!
            }
            if self.priority != nil {
                map["Priority"] = self.priority!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.userGroupIds != nil {
                map["UserGroupIds"] = self.userGroupIds!
            }
            if self.whitelist != nil {
                map["Whitelist"] = self.whitelist!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["LimitDetail"] as? [Any?] {
                var tmp : [UpdateRegistrationPolicyResponseBody.Policy.LimitDetail] = []
                for v in value {
                    if v != nil {
                        var model = UpdateRegistrationPolicyResponseBody.Policy.LimitDetail()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.limitDetail = tmp
            }
            if let value = dict["MatchMode"] as? String {
                self.matchMode = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["PolicyId"] as? String {
                self.policyId = value
            }
            if let value = dict["Priority"] as? String {
                self.priority = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["UserGroupIds"] as? [String] {
                self.userGroupIds = value
            }
            if let value = dict["Whitelist"] as? [String] {
                self.whitelist = value
            }
        }
    }
    public var policy: UpdateRegistrationPolicyResponseBody.Policy?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.policy?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.policy != nil {
            map["Policy"] = self.policy?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Policy"] as? [String: Any?] {
            var model = UpdateRegistrationPolicyResponseBody.Policy()
            model.fromMap(value)
            self.policy = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdateRegistrationPolicyResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateRegistrationPolicyResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateRegistrationPolicyResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateUninstallApplicationsStatusRequest : Tea.TeaModel {
    public var applicationIds: [String]?

    public var status: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.applicationIds != nil {
            map["ApplicationIds"] = self.applicationIds!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApplicationIds"] as? [String] {
            self.applicationIds = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
    }
}

public class UpdateUninstallApplicationsStatusResponseBody : Tea.TeaModel {
    public class Applications : Tea.TeaModel {
        public var applicationId: String?

        public var createTime: String?

        public var department: String?

        public var devTag: String?

        public var devType: String?

        public var hostname: String?

        public var idpName: String?

        public var isUninstall: Bool?

        public var mac: String?

        public var reason: String?

        public var saseUserId: String?

        public var status: String?

        public var username: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.applicationId != nil {
                map["ApplicationId"] = self.applicationId!
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.department != nil {
                map["Department"] = self.department!
            }
            if self.devTag != nil {
                map["DevTag"] = self.devTag!
            }
            if self.devType != nil {
                map["DevType"] = self.devType!
            }
            if self.hostname != nil {
                map["Hostname"] = self.hostname!
            }
            if self.idpName != nil {
                map["IdpName"] = self.idpName!
            }
            if self.isUninstall != nil {
                map["IsUninstall"] = self.isUninstall!
            }
            if self.mac != nil {
                map["Mac"] = self.mac!
            }
            if self.reason != nil {
                map["Reason"] = self.reason!
            }
            if self.saseUserId != nil {
                map["SaseUserId"] = self.saseUserId!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.username != nil {
                map["Username"] = self.username!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ApplicationId"] as? String {
                self.applicationId = value
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["Department"] as? String {
                self.department = value
            }
            if let value = dict["DevTag"] as? String {
                self.devTag = value
            }
            if let value = dict["DevType"] as? String {
                self.devType = value
            }
            if let value = dict["Hostname"] as? String {
                self.hostname = value
            }
            if let value = dict["IdpName"] as? String {
                self.idpName = value
            }
            if let value = dict["IsUninstall"] as? Bool {
                self.isUninstall = value
            }
            if let value = dict["Mac"] as? String {
                self.mac = value
            }
            if let value = dict["Reason"] as? String {
                self.reason = value
            }
            if let value = dict["SaseUserId"] as? String {
                self.saseUserId = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["Username"] as? String {
                self.username = value
            }
        }
    }
    public var applications: [UpdateUninstallApplicationsStatusResponseBody.Applications]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.applications != nil {
            var tmp : [Any] = []
            for k in self.applications! {
                tmp.append(k.toMap())
            }
            map["Applications"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Applications"] as? [Any?] {
            var tmp : [UpdateUninstallApplicationsStatusResponseBody.Applications] = []
            for v in value {
                if v != nil {
                    var model = UpdateUninstallApplicationsStatusResponseBody.Applications()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.applications = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdateUninstallApplicationsStatusResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateUninstallApplicationsStatusResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateUninstallApplicationsStatusResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateUserDevicesSharingStatusRequest : Tea.TeaModel {
    public var deviceTags: [String]?

    public var sharingStatus: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.deviceTags != nil {
            map["DeviceTags"] = self.deviceTags!
        }
        if self.sharingStatus != nil {
            map["SharingStatus"] = self.sharingStatus!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DeviceTags"] as? [String] {
            self.deviceTags = value
        }
        if let value = dict["SharingStatus"] as? Bool {
            self.sharingStatus = value
        }
    }
}

public class UpdateUserDevicesSharingStatusResponseBody : Tea.TeaModel {
    public class Devices : Tea.TeaModel {
        public class NetInterfaceInfo : Tea.TeaModel {
            public var mac: String?

            public var name: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.mac != nil {
                    map["Mac"] = self.mac!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Mac"] as? String {
                    self.mac = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
            }
        }
        public var appStatus: String?

        public var appVersion: String?

        public var CPU: String?

        public var createTime: String?

        public var department: String?

        public var deviceBelong: String?

        public var deviceModel: String?

        public var deviceStatus: String?

        public var deviceTag: String?

        public var deviceType: String?

        public var deviceVersion: String?

        public var disk: String?

        public var dlpStatus: String?

        public var hostname: String?

        public var iaStatus: String?

        public var innerIP: String?

        public var mac: String?

        public var memory: String?

        public var nacStatus: String?

        public var netInterfaceInfo: [UpdateUserDevicesSharingStatusResponseBody.Devices.NetInterfaceInfo]?

        public var paStatus: String?

        public var saseUserId: String?

        public var sharingStatus: Bool?

        public var srcIP: String?

        public var updateTime: String?

        public var username: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.appStatus != nil {
                map["AppStatus"] = self.appStatus!
            }
            if self.appVersion != nil {
                map["AppVersion"] = self.appVersion!
            }
            if self.CPU != nil {
                map["CPU"] = self.CPU!
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.department != nil {
                map["Department"] = self.department!
            }
            if self.deviceBelong != nil {
                map["DeviceBelong"] = self.deviceBelong!
            }
            if self.deviceModel != nil {
                map["DeviceModel"] = self.deviceModel!
            }
            if self.deviceStatus != nil {
                map["DeviceStatus"] = self.deviceStatus!
            }
            if self.deviceTag != nil {
                map["DeviceTag"] = self.deviceTag!
            }
            if self.deviceType != nil {
                map["DeviceType"] = self.deviceType!
            }
            if self.deviceVersion != nil {
                map["DeviceVersion"] = self.deviceVersion!
            }
            if self.disk != nil {
                map["Disk"] = self.disk!
            }
            if self.dlpStatus != nil {
                map["DlpStatus"] = self.dlpStatus!
            }
            if self.hostname != nil {
                map["Hostname"] = self.hostname!
            }
            if self.iaStatus != nil {
                map["IaStatus"] = self.iaStatus!
            }
            if self.innerIP != nil {
                map["InnerIP"] = self.innerIP!
            }
            if self.mac != nil {
                map["Mac"] = self.mac!
            }
            if self.memory != nil {
                map["Memory"] = self.memory!
            }
            if self.nacStatus != nil {
                map["NacStatus"] = self.nacStatus!
            }
            if self.netInterfaceInfo != nil {
                var tmp : [Any] = []
                for k in self.netInterfaceInfo! {
                    tmp.append(k.toMap())
                }
                map["NetInterfaceInfo"] = tmp
            }
            if self.paStatus != nil {
                map["PaStatus"] = self.paStatus!
            }
            if self.saseUserId != nil {
                map["SaseUserId"] = self.saseUserId!
            }
            if self.sharingStatus != nil {
                map["SharingStatus"] = self.sharingStatus!
            }
            if self.srcIP != nil {
                map["SrcIP"] = self.srcIP!
            }
            if self.updateTime != nil {
                map["UpdateTime"] = self.updateTime!
            }
            if self.username != nil {
                map["Username"] = self.username!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AppStatus"] as? String {
                self.appStatus = value
            }
            if let value = dict["AppVersion"] as? String {
                self.appVersion = value
            }
            if let value = dict["CPU"] as? String {
                self.CPU = value
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["Department"] as? String {
                self.department = value
            }
            if let value = dict["DeviceBelong"] as? String {
                self.deviceBelong = value
            }
            if let value = dict["DeviceModel"] as? String {
                self.deviceModel = value
            }
            if let value = dict["DeviceStatus"] as? String {
                self.deviceStatus = value
            }
            if let value = dict["DeviceTag"] as? String {
                self.deviceTag = value
            }
            if let value = dict["DeviceType"] as? String {
                self.deviceType = value
            }
            if let value = dict["DeviceVersion"] as? String {
                self.deviceVersion = value
            }
            if let value = dict["Disk"] as? String {
                self.disk = value
            }
            if let value = dict["DlpStatus"] as? String {
                self.dlpStatus = value
            }
            if let value = dict["Hostname"] as? String {
                self.hostname = value
            }
            if let value = dict["IaStatus"] as? String {
                self.iaStatus = value
            }
            if let value = dict["InnerIP"] as? String {
                self.innerIP = value
            }
            if let value = dict["Mac"] as? String {
                self.mac = value
            }
            if let value = dict["Memory"] as? String {
                self.memory = value
            }
            if let value = dict["NacStatus"] as? String {
                self.nacStatus = value
            }
            if let value = dict["NetInterfaceInfo"] as? [Any?] {
                var tmp : [UpdateUserDevicesSharingStatusResponseBody.Devices.NetInterfaceInfo] = []
                for v in value {
                    if v != nil {
                        var model = UpdateUserDevicesSharingStatusResponseBody.Devices.NetInterfaceInfo()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.netInterfaceInfo = tmp
            }
            if let value = dict["PaStatus"] as? String {
                self.paStatus = value
            }
            if let value = dict["SaseUserId"] as? String {
                self.saseUserId = value
            }
            if let value = dict["SharingStatus"] as? Bool {
                self.sharingStatus = value
            }
            if let value = dict["SrcIP"] as? String {
                self.srcIP = value
            }
            if let value = dict["UpdateTime"] as? String {
                self.updateTime = value
            }
            if let value = dict["Username"] as? String {
                self.username = value
            }
        }
    }
    public var devices: [UpdateUserDevicesSharingStatusResponseBody.Devices]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.devices != nil {
            var tmp : [Any] = []
            for k in self.devices! {
                tmp.append(k.toMap())
            }
            map["Devices"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Devices"] as? [Any?] {
            var tmp : [UpdateUserDevicesSharingStatusResponseBody.Devices] = []
            for v in value {
                if v != nil {
                    var model = UpdateUserDevicesSharingStatusResponseBody.Devices()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.devices = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdateUserDevicesSharingStatusResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateUserDevicesSharingStatusResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateUserDevicesSharingStatusResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateUserDevicesStatusRequest : Tea.TeaModel {
    public var deviceAction: String?

    public var deviceTags: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.deviceAction != nil {
            map["DeviceAction"] = self.deviceAction!
        }
        if self.deviceTags != nil {
            map["DeviceTags"] = self.deviceTags!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DeviceAction"] as? String {
            self.deviceAction = value
        }
        if let value = dict["DeviceTags"] as? [String] {
            self.deviceTags = value
        }
    }
}

public class UpdateUserDevicesStatusResponseBody : Tea.TeaModel {
    public class Devices : Tea.TeaModel {
        public class NetInterfaceInfo : Tea.TeaModel {
            public var mac: String?

            public var name: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.mac != nil {
                    map["Mac"] = self.mac!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Mac"] as? String {
                    self.mac = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
            }
        }
        public var appStatus: String?

        public var appVersion: String?

        public var CPU: String?

        public var createTime: String?

        public var department: String?

        public var deviceBelong: String?

        public var deviceModel: String?

        public var deviceStatus: String?

        public var deviceTag: String?

        public var deviceType: String?

        public var deviceVersion: String?

        public var disk: String?

        public var dlpStatus: String?

        public var hostname: String?

        public var iaStatus: String?

        public var innerIP: String?

        public var mac: String?

        public var memory: String?

        public var nacStatus: String?

        public var netInterfaceInfo: [UpdateUserDevicesStatusResponseBody.Devices.NetInterfaceInfo]?

        public var paStatus: String?

        public var saseUserId: String?

        public var sharingStatus: Bool?

        public var srcIP: String?

        public var updateTime: String?

        public var username: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.appStatus != nil {
                map["AppStatus"] = self.appStatus!
            }
            if self.appVersion != nil {
                map["AppVersion"] = self.appVersion!
            }
            if self.CPU != nil {
                map["CPU"] = self.CPU!
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.department != nil {
                map["Department"] = self.department!
            }
            if self.deviceBelong != nil {
                map["DeviceBelong"] = self.deviceBelong!
            }
            if self.deviceModel != nil {
                map["DeviceModel"] = self.deviceModel!
            }
            if self.deviceStatus != nil {
                map["DeviceStatus"] = self.deviceStatus!
            }
            if self.deviceTag != nil {
                map["DeviceTag"] = self.deviceTag!
            }
            if self.deviceType != nil {
                map["DeviceType"] = self.deviceType!
            }
            if self.deviceVersion != nil {
                map["DeviceVersion"] = self.deviceVersion!
            }
            if self.disk != nil {
                map["Disk"] = self.disk!
            }
            if self.dlpStatus != nil {
                map["DlpStatus"] = self.dlpStatus!
            }
            if self.hostname != nil {
                map["Hostname"] = self.hostname!
            }
            if self.iaStatus != nil {
                map["IaStatus"] = self.iaStatus!
            }
            if self.innerIP != nil {
                map["InnerIP"] = self.innerIP!
            }
            if self.mac != nil {
                map["Mac"] = self.mac!
            }
            if self.memory != nil {
                map["Memory"] = self.memory!
            }
            if self.nacStatus != nil {
                map["NacStatus"] = self.nacStatus!
            }
            if self.netInterfaceInfo != nil {
                var tmp : [Any] = []
                for k in self.netInterfaceInfo! {
                    tmp.append(k.toMap())
                }
                map["NetInterfaceInfo"] = tmp
            }
            if self.paStatus != nil {
                map["PaStatus"] = self.paStatus!
            }
            if self.saseUserId != nil {
                map["SaseUserId"] = self.saseUserId!
            }
            if self.sharingStatus != nil {
                map["SharingStatus"] = self.sharingStatus!
            }
            if self.srcIP != nil {
                map["SrcIP"] = self.srcIP!
            }
            if self.updateTime != nil {
                map["UpdateTime"] = self.updateTime!
            }
            if self.username != nil {
                map["Username"] = self.username!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AppStatus"] as? String {
                self.appStatus = value
            }
            if let value = dict["AppVersion"] as? String {
                self.appVersion = value
            }
            if let value = dict["CPU"] as? String {
                self.CPU = value
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["Department"] as? String {
                self.department = value
            }
            if let value = dict["DeviceBelong"] as? String {
                self.deviceBelong = value
            }
            if let value = dict["DeviceModel"] as? String {
                self.deviceModel = value
            }
            if let value = dict["DeviceStatus"] as? String {
                self.deviceStatus = value
            }
            if let value = dict["DeviceTag"] as? String {
                self.deviceTag = value
            }
            if let value = dict["DeviceType"] as? String {
                self.deviceType = value
            }
            if let value = dict["DeviceVersion"] as? String {
                self.deviceVersion = value
            }
            if let value = dict["Disk"] as? String {
                self.disk = value
            }
            if let value = dict["DlpStatus"] as? String {
                self.dlpStatus = value
            }
            if let value = dict["Hostname"] as? String {
                self.hostname = value
            }
            if let value = dict["IaStatus"] as? String {
                self.iaStatus = value
            }
            if let value = dict["InnerIP"] as? String {
                self.innerIP = value
            }
            if let value = dict["Mac"] as? String {
                self.mac = value
            }
            if let value = dict["Memory"] as? String {
                self.memory = value
            }
            if let value = dict["NacStatus"] as? String {
                self.nacStatus = value
            }
            if let value = dict["NetInterfaceInfo"] as? [Any?] {
                var tmp : [UpdateUserDevicesStatusResponseBody.Devices.NetInterfaceInfo] = []
                for v in value {
                    if v != nil {
                        var model = UpdateUserDevicesStatusResponseBody.Devices.NetInterfaceInfo()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.netInterfaceInfo = tmp
            }
            if let value = dict["PaStatus"] as? String {
                self.paStatus = value
            }
            if let value = dict["SaseUserId"] as? String {
                self.saseUserId = value
            }
            if let value = dict["SharingStatus"] as? Bool {
                self.sharingStatus = value
            }
            if let value = dict["SrcIP"] as? String {
                self.srcIP = value
            }
            if let value = dict["UpdateTime"] as? String {
                self.updateTime = value
            }
            if let value = dict["Username"] as? String {
                self.username = value
            }
        }
    }
    public var devices: [UpdateUserDevicesStatusResponseBody.Devices]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.devices != nil {
            var tmp : [Any] = []
            for k in self.devices! {
                tmp.append(k.toMap())
            }
            map["Devices"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Devices"] as? [Any?] {
            var tmp : [UpdateUserDevicesStatusResponseBody.Devices] = []
            for v in value {
                if v != nil {
                    var model = UpdateUserDevicesStatusResponseBody.Devices()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.devices = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdateUserDevicesStatusResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateUserDevicesStatusResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateUserDevicesStatusResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateUserGroupRequest : Tea.TeaModel {
    public class Attributes : Tea.TeaModel {
        public var idpId: Int32?

        public var relation: String?

        public var userGroupType: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.idpId != nil {
                map["IdpId"] = self.idpId!
            }
            if self.relation != nil {
                map["Relation"] = self.relation!
            }
            if self.userGroupType != nil {
                map["UserGroupType"] = self.userGroupType!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["IdpId"] as? Int32 {
                self.idpId = value
            }
            if let value = dict["Relation"] as? String {
                self.relation = value
            }
            if let value = dict["UserGroupType"] as? String {
                self.userGroupType = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var attributes: [UpdateUserGroupRequest.Attributes]?

    public var description_: String?

    public var modifyType: String?

    public var userGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.attributes != nil {
            var tmp : [Any] = []
            for k in self.attributes! {
                tmp.append(k.toMap())
            }
            map["Attributes"] = tmp
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.modifyType != nil {
            map["ModifyType"] = self.modifyType!
        }
        if self.userGroupId != nil {
            map["UserGroupId"] = self.userGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Attributes"] as? [Any?] {
            var tmp : [UpdateUserGroupRequest.Attributes] = []
            for v in value {
                if v != nil {
                    var model = UpdateUserGroupRequest.Attributes()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.attributes = tmp
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["ModifyType"] as? String {
            self.modifyType = value
        }
        if let value = dict["UserGroupId"] as? String {
            self.userGroupId = value
        }
    }
}

public class UpdateUserGroupResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdateUserGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateUserGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateUserGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateUsersStatusRequest : Tea.TeaModel {
    public var saseUserIds: [String]?

    public var status: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.saseUserIds != nil {
            map["SaseUserIds"] = self.saseUserIds!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["SaseUserIds"] as? [String] {
            self.saseUserIds = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
    }
}

public class UpdateUsersStatusResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdateUsersStatusResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateUsersStatusResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateUsersStatusResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}
